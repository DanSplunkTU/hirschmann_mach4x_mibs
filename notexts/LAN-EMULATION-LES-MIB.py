#
# PySNMP MIB module LAN-EMULATION-LES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/LAN-EMULATION-LES-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 17:30:22 2022
# On host fv-az126-670 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
VciInteger, VpiInteger, atmfLanEmulation, LeArpTableEntryType = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "VciInteger", "VpiInteger", "atmfLanEmulation", "LeArpTableEntryType")
Integer, IfIndexOrZero, AtmLaneMask, TIMESTAMP = mibBuilder.importSymbols("LAN-EMULATION-ELAN-MIB", "Integer", "IfIndexOrZero", "AtmLaneMask", "TIMESTAMP")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Unsigned32, ObjectIdentity, Gauge32, iso, Integer32, NotificationType, Counter64, IpAddress, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Gauge32", "iso", "Integer32", "NotificationType", "Counter64", "IpAddress", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 3))
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    pass

class AtmLaneAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class LesLecDataFrameFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("aflane8023", 2), ("aflane8025", 3))

class LesLecDataFrameSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))
    namedValues = NamedValues(("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5))

lesConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1))
lesStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2))
lesLecStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3))
lesFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4))
lesConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesConfNextId.setStatus('mandatory')
lesConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2), )
if mibBuilder.loadTexts: lesConfTable.setStatus('mandatory')
lesConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: lesConfEntry.setStatus('mandatory')
lesConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: lesConfIndex.setStatus('mandatory')
lesAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAtmAddrSpec.setStatus('mandatory')
lesAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 3), AtmLaneMask().clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAtmAddrMask.setStatus('mandatory')
lesAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 4), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesAtmAddrActual.setStatus('mandatory')
lesElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesElanName.setStatus('mandatory')
lesLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 6), LesLecDataFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLanType.setStatus('mandatory')
lesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 7), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLastChange.setStatus('mandatory')
lesMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 8), LesLecDataFrameSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesMaxFrameSize.setStatus('mandatory')
lesControlTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesControlTimeOut.setStatus('mandatory')
lesOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOperStatus.setStatus('mandatory')
lesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAdminStatus.setStatus('mandatory')
lesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesRowStatus.setStatus('mandatory')
lesVccTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3), )
if mibBuilder.loadTexts: lesVccTable.setStatus('mandatory')
lesVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesVccAtmIfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesVccCtlDistVpi"), (0, "LAN-EMULATION-LES-MIB", "lesVccCtlDistVci"))
if mibBuilder.loadTexts: lesVccEntry.setStatus('mandatory')
lesVccAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3, 1, 1), IfIndexOrZero())
if mibBuilder.loadTexts: lesVccAtmIfIndex.setStatus('mandatory')
lesVccCtlDistVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3, 1, 2), VpiInteger())
if mibBuilder.loadTexts: lesVccCtlDistVpi.setStatus('mandatory')
lesVccCtlDistVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3, 1, 3), VciInteger())
if mibBuilder.loadTexts: lesVccCtlDistVci.setStatus('mandatory')
lesVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesVccRowStatus.setStatus('mandatory')
lesBusTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 4), )
if mibBuilder.loadTexts: lesBusTable.setStatus('mandatory')
lesBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 4, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesBusConfIndex"))
if mibBuilder.loadTexts: lesBusEntry.setStatus('mandatory')
lesBusConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: lesBusConfIndex.setStatus('mandatory')
lesBusAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 4, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesBusAddress.setStatus('mandatory')
lesLeArpMacTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5), )
if mibBuilder.loadTexts: lesLeArpMacTable.setStatus('mandatory')
lesLeArpMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesLeArpMacAddr"))
if mibBuilder.loadTexts: lesLeArpMacEntry.setStatus('mandatory')
lesLeArpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: lesLeArpMacAddr.setStatus('mandatory')
lesLeArpLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLeArpLecId.setStatus('mandatory')
lesLeArpAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1, 3), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpAtmAddr.setStatus('mandatory')
lesLeArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1, 4), LeArpTableEntryType().clone('staticVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpEntryType.setStatus('mandatory')
lesLeArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpRowStatus.setStatus('mandatory')
lesLeArpRdTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6), )
if mibBuilder.loadTexts: lesLeArpRdTable.setStatus('mandatory')
lesLeArpRdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesLeArpRdSegId"), (0, "LAN-EMULATION-LES-MIB", "lesLeArpRdBridgeNum"))
if mibBuilder.loadTexts: lesLeArpRdEntry.setStatus('mandatory')
lesLeArpRdSegId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: lesLeArpRdSegId.setStatus('mandatory')
lesLeArpRdBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: lesLeArpRdBridgeNum.setStatus('mandatory')
lesLeArpRdLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLeArpRdLecId.setStatus('mandatory')
lesLeArpRdAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 4), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpRdAtmAddr.setStatus('mandatory')
lesLeArpRdEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 5), LeArpTableEntryType().clone('staticVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpRdEntryType.setStatus('mandatory')
lesLeArpRdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 6, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLeArpRdRowStatus.setStatus('mandatory')
lesLecTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 7), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecTableLastChange.setStatus('mandatory')
lesLecTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8), )
if mibBuilder.loadTexts: lesLecTable.setStatus('mandatory')
lesLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesLecIndex"))
if mibBuilder.loadTexts: lesLecEntry.setStatus('mandatory')
lesLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: lesLecIndex.setStatus('mandatory')
lesLecAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecAtmAddr.setStatus('mandatory')
lesLecProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecProxy.setStatus('mandatory')
lesLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecId.setStatus('mandatory')
lesLecAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 5), IfIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecAtmIfIndex.setStatus('mandatory')
lesLecCtlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 6), VpiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecCtlDirectVpi.setStatus('mandatory')
lesLecCtlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 7), VciInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecCtlDirectVci.setStatus('mandatory')
lesLecLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 8), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecLastChange.setStatus('mandatory')
lesLecState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noLesConnect", 2), ("lesConnect", 3), ("joining", 4), ("addLec", 5), ("joinedLes", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecState.setStatus('mandatory')
lesLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 1, 8, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecRowStatus.setStatus('mandatory')
lesStatTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1), )
if mibBuilder.loadTexts: lesStatTable.setStatus('mandatory')
lesStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: lesStatEntry.setStatus('mandatory')
lesStatJoinOk = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatJoinOk.setStatus('mandatory')
lesStatVerNotSup = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatVerNotSup.setStatus('mandatory')
lesStatInvalidReqParam = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInvalidReqParam.setStatus('mandatory')
lesStatDupLanDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatDupLanDest.setStatus('mandatory')
lesStatDupAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatDupAtmAddr.setStatus('mandatory')
lesStatInsRes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInsRes.setStatus('mandatory')
lesStatAccDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatAccDenied.setStatus('mandatory')
lesStatInvalidReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInvalidReqId.setStatus('mandatory')
lesStatInvalidLanDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInvalidLanDest.setStatus('mandatory')
lesStatInvalidAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInvalidAtmAddr.setStatus('mandatory')
lesStatInBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatInBadPkts.setStatus('mandatory')
lesStatOutRegFails = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatOutRegFails.setStatus('mandatory')
lesStatLeArpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatLeArpIn.setStatus('mandatory')
lesStatLeArpFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesStatLeArpFwd.setStatus('mandatory')
lesLecStatTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1), )
if mibBuilder.loadTexts: lesLecStatTable.setStatus('mandatory')
lesLecStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesLecIndex"))
if mibBuilder.loadTexts: lesLecStatEntry.setStatus('mandatory')
lesLecRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecRecvs.setStatus('mandatory')
lesLecSends = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecSends.setStatus('mandatory')
lesLecInRegReq = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInRegReq.setStatus('mandatory')
lesLecInUnReg = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInUnReg.setStatus('mandatory')
lesLecInLeArpUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInLeArpUcast.setStatus('mandatory')
lesLecInLeArpBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInLeArpBcast.setStatus('mandatory')
lesLecInLeArpResp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInLeArpResp.setStatus('mandatory')
lesLecInNArp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecInNArp.setStatus('mandatory')
lesErrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1), )
if mibBuilder.loadTexts: lesErrCtlTable.setStatus('mandatory')
lesErrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: lesErrCtlEntry.setStatus('mandatory')
lesErrCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesErrCtlAdminStatus.setStatus('mandatory')
lesErrCtlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("outOfRes", 3), ("failed", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesErrCtlOperStatus.setStatus('mandatory')
lesErrCtlClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesErrCtlClearLog.setStatus('mandatory')
lesErrCtlMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesErrCtlMaxEntries.setStatus('mandatory')
lesErrCtlLastEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesErrCtlLastEntry.setStatus('mandatory')
lesErrLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2), )
if mibBuilder.loadTexts: lesErrLogTable.setStatus('mandatory')
lesErrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "LAN-EMULATION-LES-MIB", "lesErrLogIndex"))
if mibBuilder.loadTexts: lesErrLogEntry.setStatus('mandatory')
lesErrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lesErrLogIndex.setStatus('mandatory')
lesErrLogAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesErrLogAtmAddr.setStatus('mandatory')
lesErrLogErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesErrLogErrCode.setStatus('mandatory')
lesErrLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 3, 4, 2, 1, 4), TIMESTAMP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesErrLogTime.setStatus('mandatory')
mibBuilder.exportSymbols("LAN-EMULATION-LES-MIB", lesLecAtmIfIndex=lesLecAtmIfIndex, lesLeArpRdLecId=lesLeArpRdLecId, lesLecProxy=lesLecProxy, lesErrLogAtmAddr=lesErrLogAtmAddr, lesStatLeArpFwd=lesStatLeArpFwd, lesLeArpAtmAddr=lesLeArpAtmAddr, lesLecStatTable=lesLecStatTable, lesLecInUnReg=lesLecInUnReg, lesStatDupLanDest=lesStatDupLanDest, lesStatGroup=lesStatGroup, lesStatLeArpIn=lesStatLeArpIn, lesLeArpRdAtmAddr=lesLeArpRdAtmAddr, lesLecInLeArpBcast=lesLecInLeArpBcast, lesErrCtlTable=lesErrCtlTable, lesErrLogTable=lesErrLogTable, lesStatInvalidReqParam=lesStatInvalidReqParam, lesLeArpEntryType=lesLeArpEntryType, lesStatJoinOk=lesStatJoinOk, lesAtmAddrSpec=lesAtmAddrSpec, lesStatInvalidReqId=lesStatInvalidReqId, lesBusAddress=lesBusAddress, lesLeArpMacTable=lesLeArpMacTable, lesStatInvalidAtmAddr=lesStatInvalidAtmAddr, lesLecCtlDirectVci=lesLecCtlDirectVci, RowStatus=RowStatus, AtmLaneAddress=AtmLaneAddress, lesRowStatus=lesRowStatus, lesStatAccDenied=lesStatAccDenied, lesLeArpMacEntry=lesLeArpMacEntry, lesErrCtlEntry=lesErrCtlEntry, lesLeArpRdBridgeNum=lesLeArpRdBridgeNum, lesLanType=lesLanType, lesMaxFrameSize=lesMaxFrameSize, lesLecInLeArpResp=lesLecInLeArpResp, LesLecDataFrameFormat=LesLecDataFrameFormat, lesVccRowStatus=lesVccRowStatus, lesConfNextId=lesConfNextId, lesBusConfIndex=lesBusConfIndex, lesLeArpRdEntry=lesLeArpRdEntry, lesLeArpRdTable=lesLeArpRdTable, lesConfGroup=lesConfGroup, lesLecIndex=lesLecIndex, lesLeArpRdRowStatus=lesLeArpRdRowStatus, lesLecId=lesLecId, lesLecSends=lesLecSends, lesLeArpMacAddr=lesLeArpMacAddr, lesAtmAddrMask=lesAtmAddrMask, lesStatInBadPkts=lesStatInBadPkts, lesLecCtlDirectVpi=lesLecCtlDirectVpi, lesLecInRegReq=lesLecInRegReq, lesStatDupAtmAddr=lesStatDupAtmAddr, lesElanName=lesElanName, lesVccCtlDistVpi=lesVccCtlDistVpi, lesStatEntry=lesStatEntry, lesLeArpRdEntryType=lesLeArpRdEntryType, lesLeArpLecId=lesLeArpLecId, lesLecRowStatus=lesLecRowStatus, lesStatOutRegFails=lesStatOutRegFails, lesErrLogEntry=lesErrLogEntry, lesAdminStatus=lesAdminStatus, lesLecRecvs=lesLecRecvs, lesLecState=lesLecState, lesLeArpRowStatus=lesLeArpRowStatus, lesStatInsRes=lesStatInsRes, lesBusEntry=lesBusEntry, lesLecTableLastChange=lesLecTableLastChange, lesLecAtmAddr=lesLecAtmAddr, lesLecLastChange=lesLecLastChange, lesConfTable=lesConfTable, TruthValue=TruthValue, lesLecEntry=lesLecEntry, lesLastChange=lesLastChange, LesLecDataFrameSize=LesLecDataFrameSize, lesErrLogErrCode=lesErrLogErrCode, lesBusTable=lesBusTable, lesStatVerNotSup=lesStatVerNotSup, lesErrCtlClearLog=lesErrCtlClearLog, lesVccTable=lesVccTable, lesStatTable=lesStatTable, lesStatInvalidLanDest=lesStatInvalidLanDest, lesErrLogIndex=lesErrLogIndex, lesLecTable=lesLecTable, lesLecStatEntry=lesLecStatEntry, lesControlTimeOut=lesControlTimeOut, lesErrCtlAdminStatus=lesErrCtlAdminStatus, lesFaultGroup=lesFaultGroup, lesErrCtlMaxEntries=lesErrCtlMaxEntries, lesLecInLeArpUcast=lesLecInLeArpUcast, lesConfEntry=lesConfEntry, lesErrCtlLastEntry=lesErrCtlLastEntry, MacAddress=MacAddress, lesLeArpRdSegId=lesLeArpRdSegId, lesConfIndex=lesConfIndex, lesVccEntry=lesVccEntry, lesLecStatGroup=lesLecStatGroup, lesMIB=lesMIB, lesOperStatus=lesOperStatus, lesAtmAddrActual=lesAtmAddrActual, lesErrLogTime=lesErrLogTime, lesVccCtlDistVci=lesVccCtlDistVci, lesLecInNArp=lesLecInNArp, lesVccAtmIfIndex=lesVccAtmIfIndex, lesErrCtlOperStatus=lesErrCtlOperStatus)
