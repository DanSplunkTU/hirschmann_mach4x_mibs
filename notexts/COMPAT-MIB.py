#
# PySNMP MIB module COMPAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/COMPAT-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 17:49:35 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, ObjectIdentity, MibIdentifier, IpAddress, Counter64, Bits, Counter32, NotificationType, Unsigned32, Gauge32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter64", "Bits", "Counter32", "NotificationType", "Unsigned32", "Gauge32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

compatible = MibIdentifier((1, 3, 6, 1, 4, 1, 255))
compatVars = MibIdentifier((1, 3, 6, 1, 4, 1, 255, 1))
compatVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 255, 2))
vpnLoginTable = MibIdentifier((1, 3, 6, 1, 4, 1, 255, 2, 1))
vPNTunnelTable = MibIdentifier((1, 3, 6, 1, 4, 1, 255, 2, 2))
failedLogins = MibScalar((1, 3, 6, 1, 4, 1, 255, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failedLogins.setStatus('mandatory')
failedSecurID = MibScalar((1, 3, 6, 1, 4, 1, 255, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failedSecurID.setStatus('mandatory')
failedRadiusAuth = MibScalar((1, 3, 6, 1, 4, 1, 255, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failedRadiusAuth.setStatus('mandatory')
processorUtilizationPercentage = MibScalar((1, 3, 6, 1, 4, 1, 255, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorUtilizationPercentage.setStatus('mandatory')
vpnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 255, 2, 2, 1), )
if mibBuilder.loadTexts: vpnTunnelTable.setStatus('mandatory')
vpnTunnelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1), ).setIndexNames((0, "COMPAT-MIB", "vpnTunnelTableIndex"))
if mibBuilder.loadTexts: vpnTunnelTableEntry.setStatus('mandatory')
vpnTunnelTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIndex.setStatus('mandatory')
vpnTunnelTableUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableUserName.setStatus('mandatory')
vpnTunnelTableGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableGroupName.setStatus('mandatory')
vpnTunnelTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIpAddress.setStatus('mandatory')
vpnTunnelTableAssignedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableAssignedIpAddress.setStatus('mandatory')
vpnTunnelTableIpBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIpBytesRcvd.setStatus('mandatory')
vpnTunnelTableIpBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIpBytesSent.setStatus('mandatory')
vpnTunnelTableIpxBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIpxBytesRcvd.setStatus('mandatory')
vpnTunnelTableIpxBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableIpxBytesSent.setStatus('mandatory')
vpnTunnelTableAppletalkBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableAppletalkBytesRcvd.setStatus('mandatory')
vpnTunnelTableAppletalkBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableAppletalkBytesSent.setStatus('mandatory')
vpnTunnelTableUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableUptime.setStatus('mandatory')
vpnTunnelTableLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableLatency.setStatus('mandatory')
vpnTunnelTableBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableBandwidthOut.setStatus('mandatory')
vpnTunnelTableBandwidthReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 255, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelTableBandwidthReturn.setStatus('mandatory')
mibBuilder.exportSymbols("COMPAT-MIB", vpnTunnelTableBandwidthOut=vpnTunnelTableBandwidthOut, failedRadiusAuth=failedRadiusAuth, vpnTunnelTableIpAddress=vpnTunnelTableIpAddress, DisplayString=DisplayString, compatVPN=compatVPN, vpnTunnelTableIpxBytesRcvd=vpnTunnelTableIpxBytesRcvd, vpnTunnelTableUptime=vpnTunnelTableUptime, vpnTunnelTableIpBytesSent=vpnTunnelTableIpBytesSent, vpnTunnelTableBandwidthReturn=vpnTunnelTableBandwidthReturn, vpnTunnelTableIndex=vpnTunnelTableIndex, compatVars=compatVars, vpnTunnelTableUserName=vpnTunnelTableUserName, vPNTunnelTable=vPNTunnelTable, vpnTunnelTableIpxBytesSent=vpnTunnelTableIpxBytesSent, failedLogins=failedLogins, vpnTunnelTableLatency=vpnTunnelTableLatency, vpnTunnelTableAppletalkBytesRcvd=vpnTunnelTableAppletalkBytesRcvd, processorUtilizationPercentage=processorUtilizationPercentage, vpnTunnelTable=vpnTunnelTable, vpnTunnelTableEntry=vpnTunnelTableEntry, vpnTunnelTableAppletalkBytesSent=vpnTunnelTableAppletalkBytesSent, failedSecurID=failedSecurID, vpnTunnelTableAssignedIpAddress=vpnTunnelTableAssignedIpAddress, vpnTunnelTableGroupName=vpnTunnelTableGroupName, vpnLoginTable=vpnLoginTable, compatible=compatible, vpnTunnelTableIpBytesRcvd=vpnTunnelTableIpBytesRcvd)
