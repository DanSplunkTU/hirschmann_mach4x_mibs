#
# PySNMP MIB module PRVT-L2TUNNELING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-L2TUNNELING-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:13:23 2021
# On host fv-az33-471 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-QOS-MIB", "serviceAccessSwitch")
svcId, sdpInfoEntry, sapEncapValue, sdpId, sapBaseInfoEntry, sapPortId = mibBuilder.importSymbols("PRVT-SERV-MIB", "svcId", "sdpInfoEntry", "sapEncapValue", "sdpId", "sapBaseInfoEntry", "sapPortId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, MibIdentifier, Counter64, TimeTicks, Bits, Unsigned32, Integer32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "MibIdentifier", "Counter64", "TimeTicks", "Bits", "Unsigned32", "Integer32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Gauge32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
prvtL2TunnelingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 3))
prvtL2TunnelingMIB.setRevisions(('2009-10-20 00:00',))
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setLastUpdated('200910200000Z')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setOrganization('BATM Advanced Communication')
prvtL2TunnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 0))
prvtL2TunnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1))
prvtL2TunnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2))
prvtL2TunnEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnEnable.setStatus('current')
prvtL2TunnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2), )
if mibBuilder.loadTexts: prvtL2TunnProfileTable.setStatus('current')
prvtL2TunnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"))
if mibBuilder.loadTexts: prvtL2TunnProfileEntry.setStatus('current')
prvtL2TunnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfileName.setStatus('current')
prvtL2TunnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfileRowStatus.setStatus('current')
prvtL2ProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3), )
if mibBuilder.loadTexts: prvtL2ProtocolsTable.setStatus('current')
prvtL2ProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2ProtocolsEntry.setStatus('current')
prvtL2ProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolName.setStatus('current')
prvtL2ProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolEthertype.setStatus('current')
prvtL2ProtocolMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolMAC.setStatus('current')
prvtL2ReplaceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ReplaceMAC.setStatus('current')
prvtL2ProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolRowStatus.setStatus('current')
prvtL2TunnProfMapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4), )
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoTable.setStatus('current')
prvtL2TunnProfMapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoEntry.setStatus('current')
prvtL2TunnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnAction.setStatus('current')
prvtL2TunnSAPPointsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5), )
if mibBuilder.loadTexts: prvtL2TunnSAPPointsTable.setStatus('current')
prvtL2TunnSAPPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5, 1), )
sapBaseInfoEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSAPPointsEntry"))
prvtL2TunnSAPPointsEntry.setIndexNames(*sapBaseInfoEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSAPPointsEntry.setStatus('current')
profileSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileSAP.setStatus('current')
prvtL2TunnSDPPointsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6), )
if mibBuilder.loadTexts: prvtL2TunnSDPPointsTable.setStatus('current')
prvtL2TunnSDPPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6, 1), )
sdpInfoEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSDPPointsEntry"))
prvtL2TunnSDPPointsEntry.setIndexNames(*sdpInfoEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSDPPointsEntry.setStatus('current')
profileSDP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileSDP.setStatus('current')
prvtL2TunnClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnClearStatistics.setStatus('current')
prvtL2TunnSapStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8), )
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsTable.setStatus('current')
prvtL2TunnSapStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsEntry.setStatus('current')
l2TunnSapRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSapRxPackets.setStatus('current')
l2TunnSapTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSapTxPackets.setStatus('current')
prvtL2TunnSdpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9), )
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsTable.setStatus('current')
prvtL2TunnSdpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sdpId"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsEntry.setStatus('current')
l2TunnSdpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSdpRxPackets.setStatus('current')
l2TunnSdpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSdpTxPackets.setStatus('current')
prvtL2TunnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 1))
prvtL2TunnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2))
prvtL2TunnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 1, 1)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnProtocolGroup"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileGroup"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnPointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnCompliance = prvtL2TunnCompliance.setStatus('current')
prvtL2TunnProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 1)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"), ("PRVT-L2TUNNELING-MIB", "prvtL2ReplaceMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolEthertype"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ReplaceMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnProtocolGroup = prvtL2TunnProtocolGroup.setStatus('current')
prvtL2TunnProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 2)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnEnable"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnProfileGroup = prvtL2TunnProfileGroup.setStatus('current')
prvtL2TunnPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 3)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnAction"), ("PRVT-L2TUNNELING-MIB", "profileSDP"), ("PRVT-L2TUNNELING-MIB", "profileSAP"), ("PRVT-L2TUNNELING-MIB", "l2TunnSapRxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSapTxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSdpRxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSdpTxPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnPointGroup = prvtL2TunnPointGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-L2TUNNELING-MIB", prvtL2TunnSdpStatisticsTable=prvtL2TunnSdpStatisticsTable, prvtL2TunnClearStatistics=prvtL2TunnClearStatistics, prvtL2TunnPointGroup=prvtL2TunnPointGroup, prvtL2TunnProfMapProtoTable=prvtL2TunnProfMapProtoTable, l2TunnSapTxPackets=l2TunnSapTxPackets, l2TunnSapRxPackets=l2TunnSapRxPackets, prvtL2TunnProfileName=prvtL2TunnProfileName, prvtL2TunnSDPPointsEntry=prvtL2TunnSDPPointsEntry, prvtL2TunnSapStatisticsEntry=prvtL2TunnSapStatisticsEntry, prvtL2TunnSAPPointsTable=prvtL2TunnSAPPointsTable, prvtL2TunnelingMIB=prvtL2TunnelingMIB, prvtL2TunnNotifications=prvtL2TunnNotifications, prvtL2TunnAction=prvtL2TunnAction, profileSDP=profileSDP, prvtL2TunnProtocolGroup=prvtL2TunnProtocolGroup, prvtL2TunnProfMapProtoEntry=prvtL2TunnProfMapProtoEntry, prvtL2TunnProfileTable=prvtL2TunnProfileTable, prvtL2ReplaceMAC=prvtL2ReplaceMAC, prvtL2TunnSAPPointsEntry=prvtL2TunnSAPPointsEntry, prvtL2TunnEnable=prvtL2TunnEnable, prvtL2TunnSdpStatisticsEntry=prvtL2TunnSdpStatisticsEntry, prvtL2TunnProfileEntry=prvtL2TunnProfileEntry, prvtL2TunnCompliance=prvtL2TunnCompliance, prvtL2TunnConformance=prvtL2TunnConformance, PYSNMP_MODULE_ID=prvtL2TunnelingMIB, prvtL2ProtocolsTable=prvtL2ProtocolsTable, prvtL2ProtocolName=prvtL2ProtocolName, prvtL2TunnGroups=prvtL2TunnGroups, prvtL2TunnSapStatisticsTable=prvtL2TunnSapStatisticsTable, l2TunnSdpTxPackets=l2TunnSdpTxPackets, prvtL2ProtocolsEntry=prvtL2ProtocolsEntry, prvtL2ProtocolRowStatus=prvtL2ProtocolRowStatus, profileSAP=profileSAP, prvtL2ProtocolEthertype=prvtL2ProtocolEthertype, prvtL2ProtocolMAC=prvtL2ProtocolMAC, prvtL2TunnSDPPointsTable=prvtL2TunnSDPPointsTable, prvtL2TunnCompliances=prvtL2TunnCompliances, prvtL2TunnProfileRowStatus=prvtL2TunnProfileRowStatus, prvtL2TunnProfileGroup=prvtL2TunnProfileGroup, l2TunnSdpRxPackets=l2TunnSdpRxPackets, prvtL2TunnObjects=prvtL2TunnObjects)
