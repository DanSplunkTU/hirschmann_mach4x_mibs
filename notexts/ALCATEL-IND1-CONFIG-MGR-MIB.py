#
# PySNMP MIB module ALCATEL-IND1-CONFIG-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-CONFIG-MGR-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:01 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Confmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Confmgr")
VirtualOperChassisId, = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "VirtualOperChassisId")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, iso, NotificationType, IpAddress, TimeTicks, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Gauge32, Unsigned32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "NotificationType", "IpAddress", "TimeTicks", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Gauge32", "Unsigned32", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alcatelIND1ConfigMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1))
alcatelIND1ConfigMgrMIB.setRevisions(('2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setOrganization('Alcatel-Lucent')
alcatelIND1ConfigMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBObjects.setStatus('current')
alcatelIND1ConfigMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBConformance.setStatus('current')
alcatelIND1ConfigMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBGroups.setStatus('current')
alcatelIND1ConfigMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliances.setStatus('current')
configManager = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1))
configFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileName.setStatus('current')
configFileAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("checkSyntaxOnly", 2), ("apply", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileAction.setStatus('current')
configErrorFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configErrorFileName.setStatus('current')
configFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileStatus.setStatus('current')
configFileMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("verbose", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileMode.setStatus('current')
configTimerFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileName.setStatus('current')
configTimerFileTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileTime.setStatus('current')
configTimerFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2), ("inProgress", 3))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTimerFileStatus.setStatus('current')
configTimerClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerClear.setStatus('current')
configSnapshotFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotFileName.setStatus('current')
configSnapshotAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAction.setStatus('current')
configSnapshotAllSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAllSelect.setStatus('current')
configSnapshotVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVlanSelect.setStatus('current')
configSnapshotSpanningTreeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSpanningTreeSelect.setStatus('current')
configSnapshotQOSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotQOSSelect.setStatus('current')
configSnapshotIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPSelect.setStatus('current')
configSnapshotIPXSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPXSelect.setStatus('current')
configSnapshotIPMSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMSSelect.setStatus('current')
configSnapshotAAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAAASelect.setStatus('current')
configSnapshotSNMPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSNMPSelect.setStatus('current')
configSnapshot8021QSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshot8021QSelect.setStatus('current')
configSnapshotLinkAggregateSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLinkAggregateSelect.setStatus('current')
configSnapshotPortMirrorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMirrorSelect.setStatus('current')
configSnapshotXIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotXIPSelect.setStatus('current')
configSnapshotHealthMonitorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotHealthMonitorSelect.setStatus('current')
configSnapshotBootPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBootPSelect.setStatus('current')
configSnapshotBridgeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBridgeSelect.setStatus('current')
configSnapshotChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotChassisSelect.setStatus('current')
configSnapshotInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotInterfaceSelect.setStatus('current')
configSnapshotPolicySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPolicySelect.setStatus('current')
configSnapshotSessionSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSessionSelect.setStatus('current')
configSnapshotServerLoadBalanceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotServerLoadBalanceSelect.setStatus('current')
configSnapshotSystemServiceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSystemServiceSelect.setStatus('current')
configSnapshotVRRPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVRRPSelect.setStatus('current')
configSnapshotWebSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWebSelect.setStatus('current')
configSnapshotRIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPSelect.setStatus('current')
configSnapshotOSPFSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPFSelect.setStatus('current')
configSnapshotBGPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBGPSelect.setStatus('current')
configSnapshotIPRMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPRMSelect.setStatus('current')
configSnapshotIPMRSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMRSelect.setStatus('current')
configSnapshotModuleSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotModuleSelect.setStatus('current')
configTechSupportLogAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("notSignificant", 0), ("techSupportBasic", 1), ("techSupportL2", 2), ("techSupportL3", 3), ("techSupportL3Rip", 4), ("techSupportL3Ipx", 5), ("techSupportL3Ospf", 6), ("techSupportL3Bgp", 7), ("techSupportL3Pimsm", 8), ("techSupportL3Mroute", 9), ("techSupportL3Dvmrp", 10), ("techSupportL3IPv6", 11), ("techSupportL3RIPng", 12), ("techSupportL3OSPF3", 13), ("techSupportL3Isis", 14), ("techSupportL3Pim6", 15), ("techSupportL3IPsec", 16), ("techSupportL3Bfd", 17))).clone('techSupportBasic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTechSupportLogAction.setStatus('current')
configWriteMemory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configWriteMemory.setStatus('current')
configErrorFileMaximum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configErrorFileMaximum.setStatus('current')
configChangeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("identical", 1), ("different", 2))).clone('identical')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configChangeStatus.setStatus('current')
configSnapshotRDPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRDPSelect.setStatus('current')
configSnapshotIPv6Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPv6Select.setStatus('current')
configSnapshotRIPngSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPngSelect.setStatus('current')
configSnapshotAtmSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAtmSelect.setStatus('current')
configSnapshotSonetSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSonetSelect.setStatus('current')
configSnapshotNTPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNTPSelect.setStatus('current')
configSnapshotPortMappingSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMappingSelect.setStatus('current')
configSnapshotOSPF3Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPF3Select.setStatus('current')
configWriteMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configWriteMemoryStatus.setStatus('current')
configSnapshotStackSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotStackSelect.setStatus('current')
configSnapshotISISSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotISISSelect.setStatus('current')
configSnapshotEOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEOAMSelect.setStatus('current')
configSnapshotUDLDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotUDLDSelect.setStatus('current')
configSnapshotNETSECSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNETSECSelect.setStatus('current')
configSnapshotIPsecSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPsecSelect.setStatus('current')
configSnapshotBFDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBFDSelect.setStatus('current')
configSnapshotMultiChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMultiChassisSelect.setStatus('current')
configSnapshotErpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotErpSelect.setStatus('current')
configSnapshotMPLSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMPLSSelect.setStatus('current')
configSnapshotEFMOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEFMOAMSelect.setStatus('current')
configSnapshotCapabilitySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotCapabilitySelect.setStatus('current')
configSnapshotVfcSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVfcSelect.setStatus('current')
configSnapshotHaVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotHaVlanSelect.setStatus('current')
configSnapshotDaUnpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDaUnpSelect.setStatus('current')
configSnapshotDHLSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDHLSelect.setStatus('current')
configSnapshotMVRPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMVRPSelect.setStatus('current')
configSnapshotSAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSAASelect.setStatus('current')
configSnapshotSPBSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSPBSelect.setStatus('current')
configSnapshotSPBIsisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSPBIsisSelect.setStatus('current')
configSnapshotVirtualChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVirtualChassisSelect.setStatus('current')
configSnapshotMplsLdpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMplsLdpSelect.setStatus('current')
configSnapshotVCMSpecific = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVCMSpecific.setStatus('current')
configSnapshotChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 78), VirtualOperChassisId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotChassisId.setStatus('current')
configSnapshotEvbSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEvbSelect.setStatus('current')
configConvertConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSignificant", 0), ("virtualChassis", 1))).clone('notSignificant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertConfiguration.setStatus('current')
configConvertConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configConvertConfigurationStatus.setStatus('current')
configConvertDestinationDirectory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 82), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertDestinationDirectory.setStatus('current')
configConvertReload = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertReload.setStatus('current')
configSnapshotAppfpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAppfpSelect.setStatus('current')
configSnapshotFipsSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotFipsSelect.setStatus('current')
configSnapshotLFPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLFPSelect.setStatus('current')
configSnapshotPmInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPmInterfaceSelect.setStatus('current')
configSnapshotAutofabricSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAutofabricSelect.setStatus('current')
configSnapshotDhcpv6RelaySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpv6RelaySelect.setStatus('current')
configSnapshotSIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSIPSelect.setStatus('current')
configSnapshotOpenflowSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOpenflowSelect.setStatus('current')
configSnapshotWlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWlanSelect.setStatus('current')
configSnapshotDhcpSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpSrvSelect.setStatus('current')
configSnapshotDPISelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDPISelect.setStatus('current')
configSnapshotMsgSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMsgSrvSelect.setStatus('current')
configSnapshotAlSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAlSrvSelect.setStatus('current')
configSnapshotDhcpv6SrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpv6SrvSelect.setStatus('current')
configSnapshotAGSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAGSelect.setStatus('current')
configSnapshotQMRSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotQMRSelect.setStatus('current')
configSnapshotVCSPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVCSPSelect.setStatus('current')
configSnapshotDhcpSnoopingSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpSnoopingSelect.setStatus('current')
configSnapshotAppMonSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAppMonSelect.setStatus('current')
configSnapshotLbdSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLbdSelect.setStatus('current')
configSnapshotVMSnoopSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVMSnoopSelect.setStatus('current')
configSnapshotPppoeIaSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPppoeIaSelect.setStatus('current')
configSnapshotPmPortViolationSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPmPortViolationSelect.setStatus('current')
configSnapshotLanPowerSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLanPowerSelect.setStatus('current')
configSnapshotPVLANSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPVLANSelect.setStatus('current')
alcatelIND1ConfigMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ConfigMgrMIBCompliance = alcatelIND1ConfigMgrMIBCompliance.setStatus('current')
configFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileMode"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileMaximum"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configChangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configFileGroup = configFileGroup.setStatus('current')
configTimerFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileTime"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerClear"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTimerFileGroup = configTimerFileGroup.setStatus('current')
configSnapshotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAllSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVCMSpecific"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotChassisId"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSpanningTreeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotQOSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPXSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSNMPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshot8021QSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLinkAggregateSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMirrorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotXIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotHealthMonitorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBootPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBridgeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotInterfaceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPolicySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSessionSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotServerLoadBalanceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSystemServiceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVRRPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWebSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPFSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBGPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPRMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMRSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotModuleSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRDPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPv6Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPngSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAtmSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSonetSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNTPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMappingSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPF3Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotStackSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotISISSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotUDLDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNETSECSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPsecSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBFDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMultiChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEFMOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMPLSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotErpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotCapabilitySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVfcSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotHaVlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDaUnpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDHLSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMVRPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSPBSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSPBIsisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVirtualChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMplsLdpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEvbSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAppfpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotFipsSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLFPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPmInterfaceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAutofabricSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpv6RelaySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOpenflowSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDPISelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMsgSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAlSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpv6SrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAGSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotQMRSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVCSPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpSnoopingSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAppMonSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVMSnoopSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLbdSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPppoeIaSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPmPortViolationSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLanPowerSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPVLANSelect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configSnapshotGroup = configSnapshotGroup.setStatus('current')
configTechSupportLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTechSupportLogGroup = configTechSupportLogGroup.setStatus('current')
configWriteMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configWriteMemoryGroup = configWriteMemoryGroup.setStatus('current')
configConvertConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfiguration"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfigurationStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertDestinationDirectory"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertReload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configConvertConfigurationGroup = configConvertConfigurationGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-CONFIG-MGR-MIB", configSnapshotAppMonSelect=configSnapshotAppMonSelect, configSnapshotBootPSelect=configSnapshotBootPSelect, configTimerFileTime=configTimerFileTime, configFileName=configFileName, configSnapshotSonetSelect=configSnapshotSonetSelect, configSnapshotOpenflowSelect=configSnapshotOpenflowSelect, configSnapshotHaVlanSelect=configSnapshotHaVlanSelect, configSnapshotDHLSelect=configSnapshotDHLSelect, configSnapshotBridgeSelect=configSnapshotBridgeSelect, configSnapshotPortMappingSelect=configSnapshotPortMappingSelect, configSnapshotWlanSelect=configSnapshotWlanSelect, configSnapshotSessionSelect=configSnapshotSessionSelect, configErrorFileMaximum=configErrorFileMaximum, configSnapshotNETSECSelect=configSnapshotNETSECSelect, configSnapshotNTPSelect=configSnapshotNTPSelect, configSnapshotErpSelect=configSnapshotErpSelect, configSnapshotStackSelect=configSnapshotStackSelect, configSnapshotOSPF3Select=configSnapshotOSPF3Select, configSnapshotPmInterfaceSelect=configSnapshotPmInterfaceSelect, configSnapshotLinkAggregateSelect=configSnapshotLinkAggregateSelect, configSnapshotVfcSelect=configSnapshotVfcSelect, configSnapshotPmPortViolationSelect=configSnapshotPmPortViolationSelect, configWriteMemory=configWriteMemory, configTechSupportLogGroup=configTechSupportLogGroup, configSnapshotPortMirrorSelect=configSnapshotPortMirrorSelect, configSnapshotSpanningTreeSelect=configSnapshotSpanningTreeSelect, configChangeStatus=configChangeStatus, configManager=configManager, configSnapshotSystemServiceSelect=configSnapshotSystemServiceSelect, configFileMode=configFileMode, configWriteMemoryGroup=configWriteMemoryGroup, configSnapshotVCSPSelect=configSnapshotVCSPSelect, configSnapshotRIPngSelect=configSnapshotRIPngSelect, configSnapshotUDLDSelect=configSnapshotUDLDSelect, configSnapshotXIPSelect=configSnapshotXIPSelect, configSnapshotFileName=configSnapshotFileName, configSnapshotDhcpv6SrvSelect=configSnapshotDhcpv6SrvSelect, configFileGroup=configFileGroup, configSnapshotSNMPSelect=configSnapshotSNMPSelect, PYSNMP_MODULE_ID=alcatelIND1ConfigMgrMIB, configSnapshotSPBIsisSelect=configSnapshotSPBIsisSelect, configSnapshotEvbSelect=configSnapshotEvbSelect, configConvertConfigurationStatus=configConvertConfigurationStatus, configSnapshot8021QSelect=configSnapshot8021QSelect, configSnapshotVCMSpecific=configSnapshotVCMSpecific, configSnapshotIPSelect=configSnapshotIPSelect, configSnapshotModuleSelect=configSnapshotModuleSelect, configSnapshotBFDSelect=configSnapshotBFDSelect, configSnapshotMVRPSelect=configSnapshotMVRPSelect, configSnapshotIPMSSelect=configSnapshotIPMSSelect, configSnapshotDhcpSrvSelect=configSnapshotDhcpSrvSelect, alcatelIND1ConfigMgrMIBCompliances=alcatelIND1ConfigMgrMIBCompliances, configSnapshotSIPSelect=configSnapshotSIPSelect, configSnapshotAGSelect=configSnapshotAGSelect, configSnapshotDaUnpSelect=configSnapshotDaUnpSelect, configSnapshotMultiChassisSelect=configSnapshotMultiChassisSelect, configSnapshotSAASelect=configSnapshotSAASelect, configSnapshotDhcpv6RelaySelect=configSnapshotDhcpv6RelaySelect, configSnapshotAtmSelect=configSnapshotAtmSelect, alcatelIND1ConfigMgrMIBObjects=alcatelIND1ConfigMgrMIBObjects, alcatelIND1ConfigMgrMIBGroups=alcatelIND1ConfigMgrMIBGroups, configSnapshotChassisId=configSnapshotChassisId, configSnapshotIPXSelect=configSnapshotIPXSelect, configFileStatus=configFileStatus, configSnapshotPolicySelect=configSnapshotPolicySelect, configSnapshotRDPSelect=configSnapshotRDPSelect, configSnapshotEOAMSelect=configSnapshotEOAMSelect, configSnapshotLbdSelect=configSnapshotLbdSelect, configSnapshotAAASelect=configSnapshotAAASelect, configSnapshotIPv6Select=configSnapshotIPv6Select, configSnapshotIPRMSelect=configSnapshotIPRMSelect, configSnapshotRIPSelect=configSnapshotRIPSelect, configSnapshotIPMRSelect=configSnapshotIPMRSelect, configSnapshotBGPSelect=configSnapshotBGPSelect, configSnapshotLFPSelect=configSnapshotLFPSelect, configErrorFileName=configErrorFileName, configSnapshotServerLoadBalanceSelect=configSnapshotServerLoadBalanceSelect, configSnapshotChassisSelect=configSnapshotChassisSelect, configConvertDestinationDirectory=configConvertDestinationDirectory, configSnapshotPppoeIaSelect=configSnapshotPppoeIaSelect, alcatelIND1ConfigMgrMIBCompliance=alcatelIND1ConfigMgrMIBCompliance, configSnapshotSPBSelect=configSnapshotSPBSelect, configSnapshotOSPFSelect=configSnapshotOSPFSelect, configSnapshotVlanSelect=configSnapshotVlanSelect, configSnapshotGroup=configSnapshotGroup, configSnapshotAppfpSelect=configSnapshotAppfpSelect, configTimerClear=configTimerClear, configSnapshotISISSelect=configSnapshotISISSelect, configConvertReload=configConvertReload, configTimerFileStatus=configTimerFileStatus, configSnapshotInterfaceSelect=configSnapshotInterfaceSelect, configSnapshotVRRPSelect=configSnapshotVRRPSelect, configSnapshotPVLANSelect=configSnapshotPVLANSelect, configSnapshotDPISelect=configSnapshotDPISelect, configSnapshotVirtualChassisSelect=configSnapshotVirtualChassisSelect, configSnapshotQMRSelect=configSnapshotQMRSelect, configTimerFileGroup=configTimerFileGroup, alcatelIND1ConfigMgrMIBConformance=alcatelIND1ConfigMgrMIBConformance, configSnapshotQOSSelect=configSnapshotQOSSelect, configConvertConfigurationGroup=configConvertConfigurationGroup, configSnapshotHealthMonitorSelect=configSnapshotHealthMonitorSelect, configSnapshotAutofabricSelect=configSnapshotAutofabricSelect, configTimerFileName=configTimerFileName, configSnapshotWebSelect=configSnapshotWebSelect, configSnapshotCapabilitySelect=configSnapshotCapabilitySelect, configSnapshotFipsSelect=configSnapshotFipsSelect, configSnapshotMplsLdpSelect=configSnapshotMplsLdpSelect, alcatelIND1ConfigMgrMIB=alcatelIND1ConfigMgrMIB, configTechSupportLogAction=configTechSupportLogAction, configSnapshotAction=configSnapshotAction, configSnapshotMPLSSelect=configSnapshotMPLSSelect, configSnapshotDhcpSnoopingSelect=configSnapshotDhcpSnoopingSelect, configWriteMemoryStatus=configWriteMemoryStatus, configSnapshotMsgSrvSelect=configSnapshotMsgSrvSelect, configSnapshotLanPowerSelect=configSnapshotLanPowerSelect, configSnapshotAlSrvSelect=configSnapshotAlSrvSelect, configSnapshotIPsecSelect=configSnapshotIPsecSelect, configConvertConfiguration=configConvertConfiguration, configSnapshotAllSelect=configSnapshotAllSelect, configSnapshotVMSnoopSelect=configSnapshotVMSnoopSelect, configFileAction=configFileAction, configSnapshotEFMOAMSelect=configSnapshotEFMOAMSelect)
