#
# PySNMP MIB module PRVT-ROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-ROUTE-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:27:07 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
routingProtocols, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "routingProtocols")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, MibIdentifier, iso, TimeTicks, NotificationType, Bits, Counter32, Gauge32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "MibIdentifier", "iso", "TimeTicks", "NotificationType", "Bits", "Counter32", "Gauge32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
prvtRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3))
prvtRouteMIB.setRevisions(('2009-01-27 00:00',))
if mibBuilder.loadTexts: prvtRouteMIB.setLastUpdated('200901270000Z')
if mibBuilder.loadTexts: prvtRouteMIB.setOrganization('BATM Advanced Communication')
class NetPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d.1d.1d.1d/1d'

prvtRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1))
prvtDynamicRouteTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1), )
if mibBuilder.loadTexts: prvtDynamicRouteTable.setStatus('current')
prvtDynamicRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1), ).setIndexNames((0, "PRVT-ROUTE-MIB", "prvtDynamicRoutePrefix"), (0, "PRVT-ROUTE-MIB", "prvtDynamicRouteNextHop"), (0, "PRVT-ROUTE-MIB", "prvtDynamicRouteType"), (0, "PRVT-ROUTE-MIB", "prvtDynamicRouteDistance"))
if mibBuilder.loadTexts: prvtDynamicRouteEntry.setStatus('current')
prvtDynamicRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5))
if mibBuilder.loadTexts: prvtDynamicRoutePrefix.setStatus('current')
prvtDynamicRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: prvtDynamicRouteNextHop.setStatus('current')
prvtDynamicRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("system", 1), ("kernel", 2), ("connect", 3), ("static", 4), ("rip", 5), ("ripng", 6), ("ospf", 7), ("ospf6", 8), ("bgp", 9), ("fib", 10), ("vrrp", 11), ("irdp", 12), ("dhcp", 13), ("pimd", 14), ("isis1", 15), ("isis2", 16), ("bfd", 17), ("test", 18), ("max", 19))))
if mibBuilder.loadTexts: prvtDynamicRouteType.setStatus('current')
prvtDynamicRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: prvtDynamicRouteDistance.setStatus('current')
prvtDynamicRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("internal", 0), ("selfroute", 1), ("blackhole", 2), ("ibgp", 3), ("selected", 4), ("changed", 5), ("static", 6), ("deleted", 7), ("staticarp", 8), ("mplsIngress", 9), ("mplsEgress", 10), ("outband", 11), ("selfIp", 12), ("vrrpIp", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteFlags.setStatus('current')
prvtDynamicRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ifindex", 1), ("ifname", 2), ("ipv4", 3), ("ipv4Ifindex", 4), ("ipv4Ifname", 5), ("ipv6", 6), ("ipv6Ifindex", 7), ("ipv6Ifname", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteNextHopType.setStatus('current')
prvtDynamicRouteNextHopFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("active", 0), ("fib", 1), ("recursive", 2), ("notready", 3), ("outband", 4), ("fibsetOutband", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteNextHopFlags.setStatus('current')
prvtDynamicRouteMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteMetrics.setStatus('current')
prvtDynamicRouteUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteUptime.setStatus('current')
prvtDynamicRouteIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDynamicRouteIfName.setStatus('current')
prvtCfgRouteTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2), )
if mibBuilder.loadTexts: prvtCfgRouteTable.setStatus('current')
prvtCfgRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2, 1), ).setIndexNames((0, "PRVT-ROUTE-MIB", "prvtCfgRoutePrefix"), (0, "PRVT-ROUTE-MIB", "prvtCfgRouteNextHop"), (0, "PRVT-ROUTE-MIB", "prvtCfgRouteDistance"))
if mibBuilder.loadTexts: prvtCfgRouteEntry.setStatus('current')
prvtCfgRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5))
if mibBuilder.loadTexts: prvtCfgRoutePrefix.setStatus('current')
prvtCfgRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: prvtCfgRouteNextHop.setStatus('current')
prvtCfgRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: prvtCfgRouteDistance.setStatus('current')
prvtCfgRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfgRouteRowStatus.setStatus('current')
prvtCfgIPv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3), )
if mibBuilder.loadTexts: prvtCfgIPv6RouteTable.setStatus('current')
prvtCfgIPv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3, 1), ).setIndexNames((0, "PRVT-ROUTE-MIB", "prvtCfgIPv6RoutePrefix"), (0, "PRVT-ROUTE-MIB", "prvtCfgIPv6RouteNextHop"), (0, "PRVT-ROUTE-MIB", "prvtCfgIPv6RouteDistance"))
if mibBuilder.loadTexts: prvtCfgIPv6RouteEntry.setStatus('current')
prvtCfgIPv6RoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtCfgIPv6RoutePrefix.setStatus('current')
prvtCfgIPv6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: prvtCfgIPv6RouteNextHop.setStatus('current')
prvtCfgIPv6RouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: prvtCfgIPv6RouteDistance.setStatus('current')
prvtCfgIPv6RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfgIPv6RouteRowStatus.setStatus('current')
prvtGlobalIPv6Forwarding = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtGlobalIPv6Forwarding.setStatus('current')
prvtGlobalIPv6Disable = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtGlobalIPv6Disable.setStatus('current')
mibBuilder.exportSymbols("PRVT-ROUTE-MIB", prvtDynamicRouteNextHop=prvtDynamicRouteNextHop, prvtDynamicRouteIfName=prvtDynamicRouteIfName, prvtCfgIPv6RouteEntry=prvtCfgIPv6RouteEntry, PYSNMP_MODULE_ID=prvtRouteMIB, prvtCfgRoutePrefix=prvtCfgRoutePrefix, prvtCfgIPv6RouteNextHop=prvtCfgIPv6RouteNextHop, prvtCfgIPv6RouteRowStatus=prvtCfgIPv6RouteRowStatus, prvtDynamicRouteMetrics=prvtDynamicRouteMetrics, prvtDynamicRouteType=prvtDynamicRouteType, prvtCfgRouteEntry=prvtCfgRouteEntry, prvtCfgRouteTable=prvtCfgRouteTable, prvtCfgIPv6RouteTable=prvtCfgIPv6RouteTable, prvtGlobalIPv6Forwarding=prvtGlobalIPv6Forwarding, prvtDynamicRouteNextHopType=prvtDynamicRouteNextHopType, prvtCfgRouteNextHop=prvtCfgRouteNextHop, prvtDynamicRouteEntry=prvtDynamicRouteEntry, prvtCfgIPv6RoutePrefix=prvtCfgIPv6RoutePrefix, prvtDynamicRouteFlags=prvtDynamicRouteFlags, prvtDynamicRoutePrefix=prvtDynamicRoutePrefix, prvtCfgRouteDistance=prvtCfgRouteDistance, prvtCfgIPv6RouteDistance=prvtCfgIPv6RouteDistance, prvtDynamicRouteNextHopFlags=prvtDynamicRouteNextHopFlags, prvtRouteMIBObjects=prvtRouteMIBObjects, prvtDynamicRouteUptime=prvtDynamicRouteUptime, NetPrefix=NetPrefix, prvtDynamicRouteDistance=prvtDynamicRouteDistance, prvtCfgRouteRowStatus=prvtCfgRouteRowStatus, prvtRouteMIB=prvtRouteMIB, prvtDynamicRouteTable=prvtDynamicRouteTable, prvtGlobalIPv6Disable=prvtGlobalIPv6Disable)
