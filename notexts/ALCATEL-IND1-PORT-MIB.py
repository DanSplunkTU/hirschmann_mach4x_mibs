#
# PySNMP MIB module ALCATEL-IND1-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-PORT-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:02 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Port, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Port")
alclnkaggAggIndex, = mibBuilder.importSymbols("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifInErrors, ifIndex, ifEntry, ifOutErrors, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifInErrors", "ifIndex", "ifEntry", "ifOutErrors", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, MibIdentifier, NotificationType, Counter32, IpAddress, ObjectIdentity, Bits, ModuleIdentity, Gauge32, Integer32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ObjectIdentity", "Bits", "ModuleIdentity", "Gauge32", "Integer32", "TimeTicks", "Counter64")
MacAddress, DateAndTime, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DateAndTime", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1PortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1))
alcatelIND1PortMIB.setRevisions(('2013-11-22 00:00', '2010-05-13 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1PortMIB.setLastUpdated('201311220000Z')
if mibBuilder.loadTexts: alcatelIND1PortMIB.setOrganization('Alcatel-Lucent')
class CableState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ok", 1), ("open", 2), ("short", 3), ("openShort", 4), ("crossTalk", 5), ("unknown", 6))

alcatelIND1PortNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0))
alcatelIND1PortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1))
alcatelIND1PortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2))
esmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1))
physicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2))
ddmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4))
portViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5))
csmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6))
interfaceCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7))
esmStormTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8))
linkAggPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9))
esmDrvTrapDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmDrvTrapDrops.setStatus('current')
alaDyingGaspChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspChassisId.setStatus('current')
alaDyingGaspPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("saps", 3), ("all", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspPowerSupplyType.setStatus('current')
alaDyingGaspTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspTime.setStatus('current')
esmStormViolationThresholdNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearViolation", 1), ("highAlarm", 2), ("lowAlarm", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: esmStormViolationThresholdNotificationType.setStatus('current')
esmStormViolationThresholdTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("uunicast", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: esmStormViolationThresholdTrafficType.setStatus('current')
esmConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1), )
if mibBuilder.loadTexts: esmConfTable.setStatus('current')
esmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmConfEntry.setStatus('current')
esmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortSlot.setStatus('current')
esmPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortIF.setStatus('current')
esmPortAutoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("unknown", 4), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7), ("speed20000", 11), ("speed21000", 12), ("speed2000", 13), ("speed4000", 14), ("speed8000", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoSpeed.setStatus('current')
esmPortAutoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoDuplexMode.setStatus('current')
esmPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7), ("speedMax100", 8), ("speedMax1000", 9), ("speed2000", 13), ("speed4000", 14), ("speed8000", 15), ("speedMax4000", 16), ("speedMax8000", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgSpeed.setStatus('current')
esmPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgDuplexMode.setStatus('current')
esmPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAdminStatus.setStatus('current')
esmPortLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortLinkUpDownTrapEnable.setStatus('current')
esmPortCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgMaxFrameSize.setStatus('current')
esmPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAlias.setStatus('current')
esmPortCfgPause = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgPause.setStatus('current')
esmPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgAutoNegotiation.setStatus('current')
esmPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3), ("notapplicable", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgCrossover.setStatus('current')
esmPortCfgHybridActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notapplicable", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortCfgHybridActiveType.setStatus('current')
esmPortCfgHybridMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notapplicable", 0), ("preferredCopper", 1), ("forcedCopper", 2), ("preferredFiber", 3), ("forcedFiber", 4))).clone('preferredFiber')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgHybridMode.setStatus('current')
esmPortOperationalHybridType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortOperationalHybridType.setStatus('current')
esmPortBcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitEnable.setStatus('current')
esmPortBcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitType.setStatus('current')
esmPortBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimit.setStatus('current')
esmPortMcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitEnable.setStatus('current')
esmPortMcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitType.setStatus('current')
esmPortMcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimit.setStatus('current')
esmPortUucastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitEnable.setStatus('current')
esmPortUucastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitType.setStatus('current')
esmPortUucastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimit.setStatus('current')
esmPortIngressRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitEnable.setStatus('current')
esmPortIngressRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimit.setStatus('current')
esmPortIngressRateLimitBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitBurst.setStatus('current')
esmPortEPPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEPPEnable.setStatus('current')
esmPortEEEEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEEEEnable.setStatus('current')
esmPortIsFiberChannelCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIsFiberChannelCapable.setStatus('current')
esmPortBcastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastThresholdAction.setStatus('current')
esmPortMcastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastThresholdAction.setStatus('current')
esmPortUucastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastThresholdAction.setStatus('current')
esmPortMinBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinBcastRateLimit.setStatus('current')
esmPortMinMcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinMcastRateLimit.setStatus('current')
esmPortMinUucastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinUucastRateLimit.setStatus('current')
esmPortBcastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortBcastStormState.setStatus('current')
esmPortMcastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortMcastStormState.setStatus('current')
esmPortUucastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortUucastStormState.setStatus('current')
alcetherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alcetherStatsTable.setStatus('current')
alcetherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcetherStatsEntry.setStatus('current')
alcetherClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcetherClearStats.setStatus('current')
alcetherLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherLastClearStats.setStatus('current')
alcetherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsCRCAlignErrors.setStatus('current')
alcetherStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxUndersizePkts.setStatus('current')
alcetherStatsTxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxUndersizePkts.setStatus('current')
alcetherStatsTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxOversizePkts.setStatus('current')
alcetherStatsRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxJabbers.setStatus('current')
alcetherStatsRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCollisions.setStatus('current')
alcetherStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxCollisions.setStatus('current')
alcetherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts64Octets.setStatus('current')
alcetherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts65to127Octets.setStatus('current')
alcetherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts128to255Octets.setStatus('current')
alcetherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts256to511Octets.setStatus('current')
alcetherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts512to1023Octets.setStatus('current')
alcetherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1024to1518Octets.setStatus('current')
gigaEtherStatsPkts1519to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts1519to4095Octets.setStatus('current')
gigaEtherStatsPkts4096to9215Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts4096to9215Octets.setStatus('current')
alcetherStatsPkts1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1519to2047Octets.setStatus('current')
alcetherStatsPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts2048to4095Octets.setStatus('current')
alcetherStatsPkts4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts4096Octets.setStatus('current')
alcetherStatsRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxGiantPkts.setStatus('current')
alcetherStatsRxDribbleNibblePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDribbleNibblePkts.setStatus('current')
alcetherStatsRxLongEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLongEventPkts.setStatus('current')
alcetherStatsRxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxVlanTagPkts.setStatus('current')
alcetherStatsRxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxControlPkts.setStatus('current')
alcetherStatsRxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLenChkErrPkts.setStatus('current')
alcetherStatsRxCodeErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCodeErrPkts.setStatus('current')
alcetherStatsRxDvEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDvEventPkts.setStatus('current')
alcetherStatsRxPrevPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxPrevPktDropped.setStatus('current')
alcetherStatsTx64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx64Octets.setStatus('current')
alcetherStatsTx65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx65to127Octets.setStatus('current')
alcetherStatsTx128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx128to255Octets.setStatus('current')
alcetherStatsTx256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx256to511Octets.setStatus('current')
alcetherStatsTx512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx512to1023Octets.setStatus('current')
alcetherStatsTx1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1024to1518Octets.setStatus('current')
alcetherStatsTx1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1519to2047Octets.setStatus('current')
alcetherStatsTx2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx2048to4095Octets.setStatus('current')
alcetherStatsTx4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx4096Octets.setStatus('current')
alcetherStatsTxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxRetryCount.setStatus('current')
alcetherStatsTxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxVlanTagPkts.setStatus('current')
alcetherStatsTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxControlPkts.setStatus('current')
alcetherStatsTxLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLatePkts.setStatus('current')
alcetherStatsTxTotalBytesOnWire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxTotalBytesOnWire.setStatus('current')
alcetherStatsTxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLenChkErrPkts.setStatus('current')
alcetherStatsTxExcDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxExcDeferPkts.setStatus('current')
alcLagStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alcLagStatsTable.setStatus('current')
alcLagStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alcLagStatsEntry.setStatus('current')
alcLagClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcLagClearStats.setStatus('current')
esmHybridConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: esmHybridConfTable.setStatus('current')
esmHybridConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmHybridConfEntry.setStatus('current')
esmHybridPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 8, 9))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speedMax100", 8), ("speedMax1000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgSpeed.setStatus('current')
esmHybridPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgDuplexMode.setStatus('current')
esmHybridPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgAutoNegotiation.setStatus('current')
esmHybridPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgCrossover.setStatus('current')
esmHybridPortCfgFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgFlow.setStatus('current')
esmHybridPortCfgInactiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmHybridPortCfgInactiveType.setStatus('current')
ddmConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmConfig.setStatus('current')
ddmTrapConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmTrapConfig.setStatus('current')
ddmNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clearViolation", 1), ("highAlarm", 2), ("highWarning", 3), ("lowWarning", 4), ("lowAlarm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ddmNotificationType.setStatus('current')
ddmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5), )
if mibBuilder.loadTexts: ddmInfoTable.setStatus('deprecated')
ddmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ddmInfoEntry.setStatus('current')
ddmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTemperature.setStatus('current')
ddmTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowWarning.setStatus('current')
ddmTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowAlarm.setStatus('current')
ddmTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiWarning.setStatus('current')
ddmTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiAlarm.setStatus('current')
ddmSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltage.setStatus('current')
ddmSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowWarning.setStatus('current')
ddmSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowAlarm.setStatus('current')
ddmSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiWarning.setStatus('current')
ddmSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiAlarm.setStatus('current')
ddmTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrent.setStatus('current')
ddmTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowWarning.setStatus('current')
ddmTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowAlarm.setStatus('current')
ddmTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiWarning.setStatus('current')
ddmTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiAlarm.setStatus('current')
ddmTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPower.setStatus('current')
ddmTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowWarning.setStatus('current')
ddmTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowAlarm.setStatus('current')
ddmTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiWarning.setStatus('current')
ddmTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiAlarm.setStatus('current')
ddmRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPower.setStatus('current')
ddmRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowWarning.setStatus('current')
ddmRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowAlarm.setStatus('current')
ddmRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiWarning.setStatus('current')
ddmRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiAlarm.setStatus('current')
ddmPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6), )
if mibBuilder.loadTexts: ddmPortInfoTable.setStatus('current')
ddmPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if mibBuilder.loadTexts: ddmPortInfoEntry.setStatus('current')
ddmPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setUnits('QSFP/SFP channel number').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortChannel.setStatus('current')
ddmPortTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTemperature.setStatus('current')
ddmPortTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowWarning.setStatus('current')
ddmPortTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowAlarm.setStatus('current')
ddmPortTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiWarning.setStatus('current')
ddmPortTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiAlarm.setStatus('current')
ddmPortSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltage.setStatus('current')
ddmPortSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowWarning.setStatus('current')
ddmPortSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowAlarm.setStatus('current')
ddmPortSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiWarning.setStatus('current')
ddmPortSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiAlarm.setStatus('current')
ddmPortTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrent.setStatus('current')
ddmPortTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowWarning.setStatus('current')
ddmPortTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowAlarm.setStatus('current')
ddmPortTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiWarning.setStatus('current')
ddmPortTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiAlarm.setStatus('current')
ddmPortTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPower.setStatus('current')
ddmPortTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowWarning.setStatus('current')
ddmPortTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowAlarm.setStatus('current')
ddmPortTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiWarning.setStatus('current')
ddmPortTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiAlarm.setStatus('current')
ddmPortRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPower.setStatus('current')
ddmPortRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowWarning.setStatus('current')
ddmPortRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowAlarm.setStatus('current')
ddmPortRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiWarning.setStatus('current')
ddmPortRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiAlarm.setStatus('current')
alcfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7), )
if mibBuilder.loadTexts: alcfcStatsTable.setStatus('current')
alcfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcfcStatsEntry.setStatus('current')
alcfcClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcfcClearStats.setStatus('current')
alcfcLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcLastClearStats.setStatus('current')
alcfcStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxUndersizePkts.setStatus('current')
alcfcStatsTxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsTxBBCreditZeros.setStatus('current')
alcfcStatsRxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxBBCreditZeros.setStatus('current')
alcfcStatsLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLinkFailures.setStatus('current')
alcfcStatsLossofSynchs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSynchs.setStatus('current')
alcfcStatsLossofSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSignals.setStatus('current')
alcfcStatsPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsPrimSeqProtocolErrors.setStatus('current')
alcfcStatsInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidTxWords.setStatus('current')
alcfcStatsInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidCRCs.setStatus('current')
alcfcStatsInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidOrderedSets.setStatus('current')
alcfcStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsFrameTooLongs.setStatus('current')
alcfcStatsDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsDelimiterErrors.setStatus('current')
alcfcStatsEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsEncodingDisparityErrors.setStatus('current')
alcfcStatsOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsOtherErrors.setStatus('current')
esmDrvTrapDropsLink = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortSlot"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"), ("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"))
if mibBuilder.loadTexts: esmDrvTrapDropsLink.setStatus('current')
ddmTemperatureThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTemperature"))
if mibBuilder.loadTexts: ddmTemperatureThresholdViolated.setStatus('current')
ddmVoltageThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"))
if mibBuilder.loadTexts: ddmVoltageThresholdViolated.setStatus('current')
ddmCurrentThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"))
if mibBuilder.loadTexts: ddmCurrentThresholdViolated.setStatus('current')
ddmTxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"))
if mibBuilder.loadTexts: ddmTxPowerThresholdViolated.setStatus('current')
ddmRxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"))
if mibBuilder.loadTexts: ddmRxPowerThresholdViolated.setStatus('current')
portViolationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1), )
if mibBuilder.loadTexts: portViolationTable.setStatus('current')
portViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "portViolationIfIndex"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationSource"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationEntry.setStatus('current')
portViolationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portViolationIfIndex.setStatus('current')
portViolationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ag", 1), ("qos", 2), ("netsec", 3), ("udld", 4), ("nisup", 5), ("oam", 6), ("lfp", 8), ("lm", 9), ("lbd", 10), ("spb", 11), ("storm", 12), ("stormuucast", 13), ("lldp", 14))))
if mibBuilder.loadTexts: portViolationSource.setStatus('current')
portViolationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("pvSLLpsShutDown", 1), ("pvSLLpsRestrict", 2), ("pvQosPolicy", 3), ("pvQosSpoofed", 4), ("pvQosBpdu", 5), ("pvQosBgp", 6), ("pvQosOspf", 7), ("pvQosRip", 8), ("pvQosVrrp", 9), ("pvQosDhcp", 10), ("pvQosPim", 11), ("pvQosIsis", 12), ("pvQosDnsReply", 13), ("pvUdld", 14), ("pvOamRfp", 15), ("pvAgLpsDiscard", 16), ("pvLfpShutDown", 17), ("pvLmThreshold", 18), ("pvLbd", 19), ("pvQosDvmrp", 20), ("pvSpbRfp", 21), ("pvEsmStorm", 22), ("pvEsmStormUucast", 23), ("pvLldpShutDown", 24), ("pvRemoteLbd", 25))))
if mibBuilder.loadTexts: portViolationReason.setStatus('current')
portViolationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portDown", 1), ("portAdminDown", 2), ("portTimerDown", 3), ("portTimerAdminDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationAction.setStatus('current')
portViolationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimer.setStatus('current')
portViolationTimerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("portNoTimerAction", 0), ("portDownAfterTimer", 1), ("portUpAfterTimer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimerAction.setStatus('current')
portViolationClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portViolationClearPort.setStatus('current')
portViolationCfgRecoveryMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationCfgRecoveryMax.setStatus('current')
portViolationCfgRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationCfgRetryTime.setStatus('current')
portViolationRetryRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationRetryRemain.setStatus('current')
alaLinkMonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2), )
if mibBuilder.loadTexts: alaLinkMonConfigTable.setStatus('current')
alaLinkMonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonConfigEntry.setStatus('current')
alaLinkMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatus.setStatus('current')
alaLinkMonTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonTimeWindow.setStatus('current')
alaLinkMonLinkFlapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkFlapThreshold.setStatus('current')
alaLinkMonLinkErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkErrorThreshold.setStatus('current')
alaLinkMonWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToRestoreTimer.setStatus('current')
alaLinkMonWaitToShutdownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToShutdownTimer.setStatus('current')
alaLinkMonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3), )
if mibBuilder.loadTexts: alaLinkMonStatsTable.setStatus('current')
alaLinkMonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonStatsEntry.setStatus('current')
alaLinkMonStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatsClearStats.setStatus('current')
alaLinkMonStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsPortState.setStatus('current')
alaLinkMonStatsCurrentLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkFlaps.setStatus('current')
alaLinkMonStatsCurrentErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentErrorFrames.setStatus('current')
alaLinkMonStatsCurrentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentCRCErrors.setStatus('current')
alaLinkMonStatsCurrentLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLostFrames.setStatus('current')
alaLinkMonStatsCurrentAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentAlignErrors.setStatus('current')
alaLinkMonStatsCurrentLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkErrors.setStatus('current')
alaLinkMonStatsTotalLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkFlaps.setStatus('current')
alaLinkMonStatsTotalLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkErrors.setStatus('current')
alaLFPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4), )
if mibBuilder.loadTexts: alaLFPGroupTable.setStatus('current')
alaLFPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"))
if mibBuilder.loadTexts: alaLFPGroupEntry.setStatus('current')
alaLFPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPGroupId.setStatus('current')
alaLFPGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupAdminStatus.setStatus('current')
alaLFPGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLFPGroupOperStatus.setStatus('current')
alaLFPGroupWaitToShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupWaitToShutdown.setStatus('current')
alaLFPGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupRowStatus.setStatus('current')
alaLFPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5), )
if mibBuilder.loadTexts: alaLFPConfigTable.setStatus('current')
alaLFPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), (0, "ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"))
if mibBuilder.loadTexts: alaLFPConfigEntry.setStatus('current')
alaLFPConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPConfigPort.setStatus('current')
alaLFPConfigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination", 1), ("source", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigPortType.setStatus('current')
alaLFPConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigRowStatus.setStatus('current')
alaPvrGlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6))
alaPvrGlobalRecoveryMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalRecoveryMax.setStatus('current')
alaPvrGlobalRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalRetryTime.setStatus('current')
alaPvrGlobalTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalTrapEnable.setStatus('current')
alaPvrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7), )
if mibBuilder.loadTexts: alaPvrConfigTable.setStatus('current')
alaPvrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaPvrConfigEntry.setStatus('current')
alaPvrRecoveryMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 50)).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrRecoveryMax.setStatus('current')
alaPvrRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(30, 600), )).clone(-2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrRetryTime.setStatus('current')
alaPortViolationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 8))
portViolationRecoveryReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("clearViolationCmd", 2), ("recoveryTimer", 3), ("adminUpDown", 4), ("nativeRecoveryTimer", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portViolationRecoveryReason.setStatus('current')
portViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "portViolationSource"), ("ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationTrap.setStatus('current')
portViolationNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "portViolationRecoveryReason"))
if mibBuilder.loadTexts: portViolationNotificationTrap.setStatus('current')
alaDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if mibBuilder.loadTexts: alaDyingGaspTrap.setStatus('current')
esmStormThresholdViolationStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdNotificationType"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdTrafficType"))
if mibBuilder.loadTexts: esmStormThresholdViolationStatus.setStatus('current')
esmTdrPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8), )
if mibBuilder.loadTexts: esmTdrPortTable.setStatus('current')
esmTdrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmTdrPortEntry.setStatus('current')
esmTdrPortCableState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 1), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortCableState.setStatus('current')
esmTdrPortValidPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortValidPairs.setStatus('current')
esmTdrPortPair1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 3), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair1State.setStatus('current')
esmTdrPortPair1Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair1Length.setStatus('current')
esmTdrPortPair2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 5), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair2State.setStatus('current')
esmTdrPortPair2Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair2Length.setStatus('current')
esmTdrPortPair3State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 7), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair3State.setStatus('current')
esmTdrPortPair3Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair3Length.setStatus('current')
esmTdrPortPair4State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 9), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair4State.setStatus('current')
esmTdrPortPair4Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair4Length.setStatus('current')
esmTdrPortFuzzLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortFuzzLength.setStatus('current')
esmTdrPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmTdrPortTest.setStatus('current')
esmTdrPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmTdrPortClearStats.setStatus('current')
esmTdrPortResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortResult.setStatus('current')
interfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1), )
if mibBuilder.loadTexts: interfaceStatsTable.setStatus('current')
interfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1), )
ifEntry.registerAugmentions(("ALCATEL-IND1-PORT-MIB", "interfaceStatsEntry"))
interfaceStatsEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: interfaceStatsEntry.setStatus('current')
inBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inBitsPerSec.setStatus('current')
outBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBitsPerSec.setStatus('current')
ifInPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInPauseFrames.setStatus('current')
ifOutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutPauseFrames.setStatus('current')
ifInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInPktsPerSec.setStatus('current')
ifOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutPktsPerSec.setStatus('current')
esmPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9), )
if mibBuilder.loadTexts: esmPortModeTable.setStatus('current')
esmPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmPortModeEntry.setStatus('current')
esmConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode40Gig", 1), ("mode4X10Gig", 2), ("modeAuto", 3))).clone('modeAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmConfiguredMode.setStatus('current')
esmOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode40Gig", 1), ("mode4X10Gig", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmOperationalMode.setStatus('current')
esmPortBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10), )
if mibBuilder.loadTexts: esmPortBeaconTable.setStatus('current')
esmPortBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmPortBeaconEntry.setStatus('current')
esmBeaconAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconAdminState.setStatus('current')
esmBeaconLedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ledOff", 1), ("ledBlue", 2), ("ledGreen", 3), ("ledAqua", 4), ("ledRed", 5), ("ledMagenta", 6), ("ledYellow", 7), ("ledWhite", 8))).clone('ledMagenta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconLedColor.setStatus('current')
esmBeaconLedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ledModeSolid", 1), ("ledModeActivity", 2))).clone('ledModeActivity')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconLedMode.setStatus('current')
esmBeaconRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconRowStatus.setStatus('current')
alcatelIND1PortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1))
alcatelIND1PortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2))
esmConfPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "esmDetectedConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcPortNotificationGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmInfoGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationsGroup"), ("ALCATEL-IND1-PORT-MIB", "esmConfTrapGroup"), ("ALCATEL-IND1-PORT-MIB", "esmHybridConfEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "esmConfEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "csmConfTrapGroup"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortGroup"), ("ALCATEL-IND1-PORT-MIB", "portViolationEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmPortInfoGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPvrConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "interfaceStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPortViolationTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfPortCompliance = esmConfPortCompliance.setStatus('current')
alcEtherStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcEtherStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsGroup"), ("ALCATEL-IND1-PORT-MIB", "esmPortFiberstatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsCompliance = alcEtherStatsCompliance.setStatus('current')
alcLagStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcLagStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcLagStatsCompliance = alcLagStatsCompliance.setStatus('current')
esmConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgMaxFrameSize"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgPause"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitBurst"), ("ALCATEL-IND1-PORT-MIB", "esmPortEPPEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortEEEEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinBcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinMcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinUucastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastStormState"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastStormState"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastStormState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfMIBGroup = esmConfMIBGroup.setStatus('current')
esmDetectedConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAutoSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortAutoDuplexMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmDetectedConfMIBGroup = esmDetectedConfMIBGroup.setStatus('current')
alcEtherStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcetherClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherLastClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsCRCAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxOversizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxJabbers"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts1519to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts4096to9215Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxGiantPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDribbleNibblePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLongEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCodeErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDvEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxPrevPktDropped"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxRetryCount"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLatePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxTotalBytesOnWire"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxExcDeferPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsMIBGroup = alcEtherStatsMIBGroup.setStatus('current')
alcPortNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDropsLink"), ("ALCATEL-IND1-PORT-MIB", "portViolationTrap"), ("ALCATEL-IND1-PORT-MIB", "portViolationNotificationTrap"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTrap"), ("ALCATEL-IND1-PORT-MIB", "esmStormThresholdViolationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcPortNotificationGroup = alcPortNotificationGroup.setStatus('current')
ddmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmInfoGroup = ddmInfoGroup.setStatus('current')
ddmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmTrapConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmConfigGroup = ddmConfigGroup.setStatus('current')
ddmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperatureThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmVoltageThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmCurrentThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmTxPowerThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmRxPowerThresholdViolated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmNotificationsGroup = ddmNotificationsGroup.setStatus('current')
esmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdNotificationType"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdTrafficType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfTrapGroup = esmConfTrapGroup.setStatus('current')
esmHybridConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgFlow"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgInactiveType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmHybridConfEntryGroup = esmHybridConfEntryGroup.setStatus('current')
esmConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "esmPortAlias"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridActiveType"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("ALCATEL-IND1-PORT-MIB", "esmPortLinkUpDownTrapEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortOperationalHybridType"), ("ALCATEL-IND1-PORT-MIB", "esmPortSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfEntryGroup = esmConfEntryGroup.setStatus('current')
portViolationEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-PORT-MIB", "portViolationAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimer"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimerAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationClearPort"), ("ALCATEL-IND1-PORT-MIB", "portViolationCfgRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "portViolationCfgRetryTime"), ("ALCATEL-IND1-PORT-MIB", "portViolationRetryRemain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portViolationEntryGroup = portViolationEntryGroup.setStatus('current')
ddmPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmPortTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmPortInfoGroup = ddmPortInfoGroup.setStatus('current')
alaLinkMonConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 14)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonTimeWindow"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkFlapThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkErrorThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToRestoreTimer"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToShutdownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonConfigMIBGroup = alaLinkMonConfigMIBGroup.setStatus('current')
alaLinkMonStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 15)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsClearStats"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsPortState"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentErrorFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentCRCErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLostFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonStatsMIBGroup = alaLinkMonStatsMIBGroup.setStatus('current')
alaLFPGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 16)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupOperStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupWaitToShutdown"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPGroupMIBGroup = alaLFPGroupMIBGroup.setStatus('current')
alaLFPConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 17)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPortType"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPConfigMIBGroup = alaLFPConfigMIBGroup.setStatus('current')
csmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 18)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csmConfTrapGroup = csmConfTrapGroup.setStatus('current')
esmTdrPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 19)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmTdrPortCableState"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortValidPairs"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair1State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair1Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair2State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair2Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair3State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair3Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair4State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair4Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortFuzzLength"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortTest"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortClearStats"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmTdrPortGroup = esmTdrPortGroup.setStatus('current')
alcfcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 20)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcfcClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcfcLastClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsDelimiterErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsEncodingDisparityErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsFrameTooLongs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidCRCs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidOrderedSets"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidTxWords"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLinkFailures"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLossofSignals"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsRxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsTxBBCreditZeros"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLossofSynchs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsOtherErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsPrimSeqProtocolErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsRxBBCreditZeros"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcfcStatsGroup = alcfcStatsGroup.setStatus('current')
esmPortFiberstatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 21)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortIsFiberChannelCapable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortFiberstatsGroup = esmPortFiberstatsGroup.setStatus('current')
alaPvrGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 22)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalRetryTime"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPvrGlobalConfigGroup = alaPvrGlobalConfigGroup.setStatus('current')
esmPortModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 23)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmConfiguredMode"), ("ALCATEL-IND1-PORT-MIB", "esmOperationalMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortModeGroup = esmPortModeGroup.setStatus('current')
esmPortBeaconGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 24)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmBeaconAdminState"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconLedColor"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconLedMode"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortBeaconGroup = esmPortBeaconGroup.setStatus('current')
alaPvrConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 25)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaPvrRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "alaPvrRetryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPvrConfigGroup = alaPvrConfigGroup.setStatus('current')
interfaceStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 26)).setObjects(("ALCATEL-IND1-PORT-MIB", "inBitsPerSec"), ("ALCATEL-IND1-PORT-MIB", "outBitsPerSec"), ("ALCATEL-IND1-PORT-MIB", "ifInPauseFrames"), ("ALCATEL-IND1-PORT-MIB", "ifOutPauseFrames"), ("ALCATEL-IND1-PORT-MIB", "ifInPktsPerSec"), ("ALCATEL-IND1-PORT-MIB", "ifOutPktsPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    interfaceStatsMIBGroup = interfaceStatsMIBGroup.setStatus('current')
alaPortViolationTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 27)).setObjects(("ALCATEL-IND1-PORT-MIB", "portViolationRecoveryReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPortViolationTrapGroup = alaPortViolationTrapGroup.setStatus('current')
alcLagStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 28)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcLagClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcLagStatsMIBGroup = alcLagStatsMIBGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MIB", alcfcStatsInvalidCRCs=alcfcStatsInvalidCRCs, alaLFPConfigEntry=alaLFPConfigEntry, ddmPortSupplyVoltageHiWarning=ddmPortSupplyVoltageHiWarning, alaDyingGaspPowerSupplyType=alaDyingGaspPowerSupplyType, alcetherStatsTxRetryCount=alcetherStatsTxRetryCount, alaLinkMonStatsMIBGroup=alaLinkMonStatsMIBGroup, esmTdrPortPair4Length=esmTdrPortPair4Length, portViolations=portViolations, esmHybridPortCfgAutoNegotiation=esmHybridPortCfgAutoNegotiation, ddmRxOpticalPowerHiAlarm=ddmRxOpticalPowerHiAlarm, ddmPortRxOpticalPowerHiWarning=ddmPortRxOpticalPowerHiWarning, portViolationRetryRemain=portViolationRetryRemain, ddmSupplyVoltageLowWarning=ddmSupplyVoltageLowWarning, esmPortFiberstatsGroup=esmPortFiberstatsGroup, esmHybridConfEntry=esmHybridConfEntry, esmHybridPortCfgFlow=esmHybridPortCfgFlow, alaPvrGlobalConfigGroup=alaPvrGlobalConfigGroup, esmHybridPortCfgSpeed=esmHybridPortCfgSpeed, portViolationTimerAction=portViolationTimerAction, alaLFPConfigMIBGroup=alaLFPConfigMIBGroup, portViolationTrap=portViolationTrap, ddmTempHiWarning=ddmTempHiWarning, ddmPortTxBiasCurrentLowAlarm=ddmPortTxBiasCurrentLowAlarm, alcfcStatsPrimSeqProtocolErrors=alcfcStatsPrimSeqProtocolErrors, ddmPortTemperature=ddmPortTemperature, esmPortOperationalHybridType=esmPortOperationalHybridType, esmPortMinMcastRateLimit=esmPortMinMcastRateLimit, linkAggPort=linkAggPort, ddmInfoTable=ddmInfoTable, alaLFPGroupWaitToShutdown=alaLFPGroupWaitToShutdown, alaPvrRetryTime=alaPvrRetryTime, esmPortMcastThresholdAction=esmPortMcastThresholdAction, alcfcStatsTable=alcfcStatsTable, ddmPortInfoEntry=ddmPortInfoEntry, alaDyingGaspTime=alaDyingGaspTime, alcfcStatsEntry=alcfcStatsEntry, esmPortAutoDuplexMode=esmPortAutoDuplexMode, ddmNotificationType=ddmNotificationType, alaLFPGroupMIBGroup=alaLFPGroupMIBGroup, esmPortEEEEnable=esmPortEEEEnable, ddmPortTxBiasCurrentHiAlarm=ddmPortTxBiasCurrentHiAlarm, esmPortCfgHybridMode=esmPortCfgHybridMode, esmConfPortCompliance=esmConfPortCompliance, alaLinkMonWaitToShutdownTimer=alaLinkMonWaitToShutdownTimer, ddmPortTempLowWarning=ddmPortTempLowWarning, esmPortIngressRateLimit=esmPortIngressRateLimit, esmTdrPortPair4State=esmTdrPortPair4State, alcetherStatsTxOversizePkts=alcetherStatsTxOversizePkts, esmPortUucastStormState=esmPortUucastStormState, alcatelIND1PortMIBCompliances=alcatelIND1PortMIBCompliances, alcetherStatsEntry=alcetherStatsEntry, esmPortSlot=esmPortSlot, esmPortBcastRateLimit=esmPortBcastRateLimit, alcfcStatsLossofSignals=alcfcStatsLossofSignals, alcetherStatsRxDribbleNibblePkts=alcetherStatsRxDribbleNibblePkts, alcetherStatsRxGiantPkts=alcetherStatsRxGiantPkts, esmPortBcastThresholdAction=esmPortBcastThresholdAction, esmBeaconAdminState=esmBeaconAdminState, esmPortMcastRateLimitType=esmPortMcastRateLimitType, ddmSupplyVoltageHiAlarm=ddmSupplyVoltageHiAlarm, portViolationTable=portViolationTable, ddmInfoEntry=ddmInfoEntry, esmPortMcastRateLimit=esmPortMcastRateLimit, alcetherStatsRxLongEventPkts=alcetherStatsRxLongEventPkts, alaLinkMonStatsTotalLinkFlaps=alaLinkMonStatsTotalLinkFlaps, ddmPortTxBiasCurrentHiWarning=ddmPortTxBiasCurrentHiWarning, alcetherStatsPkts256to511Octets=alcetherStatsPkts256to511Octets, alaPortViolationTrapGroup=alaPortViolationTrapGroup, ddmPortSupplyVoltageLowWarning=ddmPortSupplyVoltageLowWarning, alcetherStatsTxControlPkts=alcetherStatsTxControlPkts, esmPortLinkUpDownTrapEnable=esmPortLinkUpDownTrapEnable, ddmTxBiasCurrent=ddmTxBiasCurrent, ddmRxPowerThresholdViolated=ddmRxPowerThresholdViolated, alaLFPConfigPortType=alaLFPConfigPortType, esmTdrPortPair1State=esmTdrPortPair1State, gigaEtherStatsPkts1519to4095Octets=gigaEtherStatsPkts1519to4095Octets, alaLinkMonStatsCurrentLinkFlaps=alaLinkMonStatsCurrentLinkFlaps, alaLinkMonStatsClearStats=alaLinkMonStatsClearStats, ddmRxOpticalPower=ddmRxOpticalPower, esmTdrPortEntry=esmTdrPortEntry, interfaceCounters=interfaceCounters, alcetherStatsRxCollisions=alcetherStatsRxCollisions, alaPvrConfigTable=alaPvrConfigTable, ddmPortTxOutputPowerHiAlarm=ddmPortTxOutputPowerHiAlarm, ddmPortTxOutputPowerLowAlarm=ddmPortTxOutputPowerLowAlarm, esmBeaconRowStatus=esmBeaconRowStatus, ddmConfiguration=ddmConfiguration, alcfcStatsGroup=alcfcStatsGroup, ddmTxBiasCurrentHiAlarm=ddmTxBiasCurrentHiAlarm, alaLFPGroupId=alaLFPGroupId, portViolationCfgRetryTime=portViolationCfgRetryTime, esmPortEPPEnable=esmPortEPPEnable, alaPvrGlobalTrapEnable=alaPvrGlobalTrapEnable, CableState=CableState, esmConfTrap=esmConfTrap, ddmTxOutputPowerLowAlarm=ddmTxOutputPowerLowAlarm, ddmPortInfoTable=ddmPortInfoTable, esmTdrPortTest=esmTdrPortTest, physicalPort=physicalPort, ddmRxOpticalPowerLowAlarm=ddmRxOpticalPowerLowAlarm, alcatelIND1PortMIBObjects=alcatelIND1PortMIBObjects, esmTdrPortResult=esmTdrPortResult, ddmTxBiasCurrentLowWarning=ddmTxBiasCurrentLowWarning, esmTdrPortValidPairs=esmTdrPortValidPairs, csmConfTrap=csmConfTrap, alcetherStatsPkts2048to4095Octets=alcetherStatsPkts2048to4095Octets, ddmPortTempLowAlarm=ddmPortTempLowAlarm, esmPortAdminStatus=esmPortAdminStatus, esmOperationalMode=esmOperationalMode, alcLagStatsMIBGroup=alcLagStatsMIBGroup, alcfcStatsInvalidOrderedSets=alcfcStatsInvalidOrderedSets, alcfcStatsLossofSynchs=alcfcStatsLossofSynchs, alaLFPConfigTable=alaLFPConfigTable, ddmPortSupplyVoltageHiAlarm=ddmPortSupplyVoltageHiAlarm, portViolationTimer=portViolationTimer, esmPortIngressRateLimitEnable=esmPortIngressRateLimitEnable, ddmTxPowerThresholdViolated=ddmTxPowerThresholdViolated, alaLFPConfigPort=alaLFPConfigPort, esmStormViolationThresholdNotificationType=esmStormViolationThresholdNotificationType, alcetherStatsTx1024to1518Octets=alcetherStatsTx1024to1518Octets, alcetherStatsRxDvEventPkts=alcetherStatsRxDvEventPkts, alaLinkMonConfigTable=alaLinkMonConfigTable, ddmTemperature=ddmTemperature, ddmPortTempHiWarning=ddmPortTempHiWarning, ddmPortTxOutputPower=ddmPortTxOutputPower, esmHybridPortCfgInactiveType=esmHybridPortCfgInactiveType, alcetherStatsPkts4096Octets=alcetherStatsPkts4096Octets, alcatelIND1PortMIBGroups=alcatelIND1PortMIBGroups, alaLinkMonLinkFlapThreshold=alaLinkMonLinkFlapThreshold, ddmTemperatureThresholdViolated=ddmTemperatureThresholdViolated, alcatelIND1PortNotifications=alcatelIND1PortNotifications, ddmTxBiasCurrentLowAlarm=ddmTxBiasCurrentLowAlarm, ifInPauseFrames=ifInPauseFrames, csmConfTrapGroup=csmConfTrapGroup, esmDrvTrapDrops=esmDrvTrapDrops, esmPortBeaconEntry=esmPortBeaconEntry, esmTdrPortPair3State=esmTdrPortPair3State, esmPortModeEntry=esmPortModeEntry, alaLinkMonStatsPortState=alaLinkMonStatsPortState, alaLinkMonConfigEntry=alaLinkMonConfigEntry, alaPvrConfigEntry=alaPvrConfigEntry, esmPortIsFiberChannelCapable=esmPortIsFiberChannelCapable, ddmConfig=ddmConfig, alcetherStatsPkts128to255Octets=alcetherStatsPkts128to255Octets, portViolationEntry=portViolationEntry, alcatelIND1PortMIB=alcatelIND1PortMIB, esmTdrPortPair2State=esmTdrPortPair2State, alcfcStatsInvalidTxWords=alcfcStatsInvalidTxWords, alcetherStatsTxLenChkErrPkts=alcetherStatsTxLenChkErrPkts, interfaceStatsTable=interfaceStatsTable, alaLFPGroupOperStatus=alaLFPGroupOperStatus, esmPortCfgCrossover=esmPortCfgCrossover, esmConfiguredMode=esmConfiguredMode, alcfcStatsEncodingDisparityErrors=alcfcStatsEncodingDisparityErrors, alaLFPGroupRowStatus=alaLFPGroupRowStatus, alcetherStatsTable=alcetherStatsTable, alaLinkMonLinkErrorThreshold=alaLinkMonLinkErrorThreshold, esmStormTrap=esmStormTrap, esmTdrPortClearStats=esmTdrPortClearStats, ddmSupplyVoltage=ddmSupplyVoltage, esmPortMinBcastRateLimit=esmPortMinBcastRateLimit, interfaceStatsMIBGroup=interfaceStatsMIBGroup, alcetherStatsTx128to255Octets=alcetherStatsTx128to255Octets, alaDyingGaspChassisId=alaDyingGaspChassisId, ddmTxBiasCurrentHiWarning=ddmTxBiasCurrentHiWarning, esmPortModeGroup=esmPortModeGroup, esmPortModeTable=esmPortModeTable, alcetherStatsRxVlanTagPkts=alcetherStatsRxVlanTagPkts, alcEtherStatsCompliance=alcEtherStatsCompliance, esmPortBcastRateLimitEnable=esmPortBcastRateLimitEnable, ddmTempLowWarning=ddmTempLowWarning, alcfcStatsFrameTooLongs=alcfcStatsFrameTooLongs, alaPvrGlobalRecoveryMax=alaPvrGlobalRecoveryMax, esmPortUucastThresholdAction=esmPortUucastThresholdAction, alcetherStatsTxVlanTagPkts=alcetherStatsTxVlanTagPkts, portViolationCfgRecoveryMax=portViolationCfgRecoveryMax, ddmPortRxOpticalPowerLowAlarm=ddmPortRxOpticalPowerLowAlarm, esmStormThresholdViolationStatus=esmStormThresholdViolationStatus, esmTdrPortFuzzLength=esmTdrPortFuzzLength, alcetherStatsTx512to1023Octets=alcetherStatsTx512to1023Octets, esmPortUucastRateLimitType=esmPortUucastRateLimitType, alaPvrRecoveryMax=alaPvrRecoveryMax, esmPortAutoSpeed=esmPortAutoSpeed, esmStormViolationThresholdTrafficType=esmStormViolationThresholdTrafficType, ddmPortSupplyVoltage=ddmPortSupplyVoltage, alcfcStatsRxUndersizePkts=alcfcStatsRxUndersizePkts, ddmRxOpticalPowerLowWarning=ddmRxOpticalPowerLowWarning, alaLinkMonTimeWindow=alaLinkMonTimeWindow, esmDrvTrapDropsLink=esmDrvTrapDropsLink, alcetherStatsTxExcDeferPkts=alcetherStatsTxExcDeferPkts, esmHybridConfEntryGroup=esmHybridConfEntryGroup, outBitsPerSec=outBitsPerSec, alcetherStatsPkts65to127Octets=alcetherStatsPkts65to127Octets, alaLFPGroupAdminStatus=alaLFPGroupAdminStatus, alcetherStatsRxPrevPktDropped=alcetherStatsRxPrevPktDropped, alcetherStatsTx1519to2047Octets=alcetherStatsTx1519to2047Octets, alcLagClearStats=alcLagClearStats, alcPortNotificationGroup=alcPortNotificationGroup, esmPortCfgPause=esmPortCfgPause, ddmCurrentThresholdViolated=ddmCurrentThresholdViolated, esmTdrPortPair2Length=esmTdrPortPair2Length, ddmConfigGroup=ddmConfigGroup, alcfcLastClearStats=alcfcLastClearStats, ddmTxOutputPowerHiWarning=ddmTxOutputPowerHiWarning, alcetherLastClearStats=alcetherLastClearStats, esmPortMcastStormState=esmPortMcastStormState, alcetherStatsPkts64Octets=alcetherStatsPkts64Octets, inBitsPerSec=inBitsPerSec, alaLFPConfigRowStatus=alaLFPConfigRowStatus, PYSNMP_MODULE_ID=alcatelIND1PortMIB, alcfcStatsRxBBCreditZeros=alcfcStatsRxBBCreditZeros, alcetherStatsTxLatePkts=alcetherStatsTxLatePkts, ifInPktsPerSec=ifInPktsPerSec, alcetherStatsRxCodeErrPkts=alcetherStatsRxCodeErrPkts, alaPvrConfigGroup=alaPvrConfigGroup, alcLagStatsEntry=alcLagStatsEntry, ddmTempLowAlarm=ddmTempLowAlarm, alaLinkMonStatsCurrentCRCErrors=alaLinkMonStatsCurrentCRCErrors, alcetherStatsRxUndersizePkts=alcetherStatsRxUndersizePkts, alaLinkMonStatsCurrentLinkErrors=alaLinkMonStatsCurrentLinkErrors, esmTdrPortPair3Length=esmTdrPortPair3Length, alaLinkMonStatsCurrentLostFrames=alaLinkMonStatsCurrentLostFrames, esmPortIngressRateLimitBurst=esmPortIngressRateLimitBurst, esmPortCfgHybridActiveType=esmPortCfgHybridActiveType, esmPortCfgMaxFrameSize=esmPortCfgMaxFrameSize, alaLinkMonStatsEntry=alaLinkMonStatsEntry, esmHybridPortCfgDuplexMode=esmHybridPortCfgDuplexMode, portViolationEntryGroup=portViolationEntryGroup, alcetherStatsTx4096Octets=alcetherStatsTx4096Octets, esmPortCfgDuplexMode=esmPortCfgDuplexMode, esmPortAlias=esmPortAlias, esmTdrPortGroup=esmTdrPortGroup, esmPortMcastRateLimitEnable=esmPortMcastRateLimitEnable, alaLinkMonStatsTable=alaLinkMonStatsTable, esmPortUucastRateLimit=esmPortUucastRateLimit, alcetherStatsCRCAlignErrors=alcetherStatsCRCAlignErrors, alcetherStatsPkts512to1023Octets=alcetherStatsPkts512to1023Octets, alcfcClearStats=alcfcClearStats, alaPvrGlobalRetryTime=alaPvrGlobalRetryTime, alcetherStatsTx2048to4095Octets=alcetherStatsTx2048to4095Octets, alcetherStatsTx65to127Octets=alcetherStatsTx65to127Octets, alcfcStatsDelimiterErrors=alcfcStatsDelimiterErrors, esmPortUucastRateLimitEnable=esmPortUucastRateLimitEnable, ddmTempHiAlarm=ddmTempHiAlarm, ddmPortInfoGroup=ddmPortInfoGroup, portViolationIfIndex=portViolationIfIndex, alcLagStatsCompliance=alcLagStatsCompliance, alaLinkMonStatsCurrentAlignErrors=alaLinkMonStatsCurrentAlignErrors, alaDyingGaspTrap=alaDyingGaspTrap, alcetherStatsTx64Octets=alcetherStatsTx64Octets, alcfcStatsOtherErrors=alcfcStatsOtherErrors, alaLFPGroupEntry=alaLFPGroupEntry, esmConfEntry=esmConfEntry, esmBeaconLedMode=esmBeaconLedMode)
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MIB", portViolationRecoveryReason=portViolationRecoveryReason, esmPortCfgAutoNegotiation=esmPortCfgAutoNegotiation, ddmTxOutputPowerLowWarning=ddmTxOutputPowerLowWarning, esmPortIF=esmPortIF, alaLinkMonConfigMIBGroup=alaLinkMonConfigMIBGroup, ddmTrapConfig=ddmTrapConfig, portViolationSource=portViolationSource, interfaceStatsEntry=interfaceStatsEntry, alcetherStatsTxUndersizePkts=alcetherStatsTxUndersizePkts, alcetherStatsPkts1024to1518Octets=alcetherStatsPkts1024to1518Octets, ddmPortRxOpticalPower=ddmPortRxOpticalPower, alaPvrGlobalConfigObjects=alaPvrGlobalConfigObjects, alcetherStatsRxLenChkErrPkts=alcetherStatsRxLenChkErrPkts, ddmVoltageThresholdViolated=ddmVoltageThresholdViolated, ifOutPauseFrames=ifOutPauseFrames, esmPortBcastStormState=esmPortBcastStormState, esmDetectedConfMIBGroup=esmDetectedConfMIBGroup, alcEtherStatsMIBGroup=alcEtherStatsMIBGroup, esmConfEntryGroup=esmConfEntryGroup, alcetherStatsTxTotalBytesOnWire=alcetherStatsTxTotalBytesOnWire, ddmPortSupplyVoltageLowAlarm=ddmPortSupplyVoltageLowAlarm, ddmPortTxBiasCurrentLowWarning=ddmPortTxBiasCurrentLowWarning, esmTdrPortPair1Length=esmTdrPortPair1Length, ddmSupplyVoltageLowAlarm=ddmSupplyVoltageLowAlarm, ddmPortRxOpticalPowerLowWarning=ddmPortRxOpticalPowerLowWarning, alaLinkMonStatsCurrentErrorFrames=alaLinkMonStatsCurrentErrorFrames, ddmSupplyVoltageHiWarning=ddmSupplyVoltageHiWarning, portViolationReason=portViolationReason, esmConfMIBGroup=esmConfMIBGroup, esmTdrPortTable=esmTdrPortTable, alcetherStatsTxCollisions=alcetherStatsTxCollisions, ddmTxOutputPower=ddmTxOutputPower, esmPortMinUucastRateLimit=esmPortMinUucastRateLimit, ddmNotificationsGroup=ddmNotificationsGroup, alcetherStatsTx256to511Octets=alcetherStatsTx256to511Octets, alcatelIND1PortMIBConformance=alcatelIND1PortMIBConformance, esmConfTable=esmConfTable, alcetherStatsPkts1519to2047Octets=alcetherStatsPkts1519to2047Octets, ddmPortTxOutputPowerLowWarning=ddmPortTxOutputPowerLowWarning, alcetherStatsRxJabbers=alcetherStatsRxJabbers, gigaEtherStatsPkts4096to9215Octets=gigaEtherStatsPkts4096to9215Octets, esmPortBcastRateLimitType=esmPortBcastRateLimitType, ifOutPktsPerSec=ifOutPktsPerSec, alaLinkMonStatus=alaLinkMonStatus, esmConfTrapGroup=esmConfTrapGroup, ddmTxOutputPowerHiAlarm=ddmTxOutputPowerHiAlarm, ddmPortTxOutputPowerHiWarning=ddmPortTxOutputPowerHiWarning, ddmPortRxOpticalPowerHiAlarm=ddmPortRxOpticalPowerHiAlarm, esmHybridPortCfgCrossover=esmHybridPortCfgCrossover, ddmPortTxBiasCurrent=ddmPortTxBiasCurrent, alcfcStatsLinkFailures=alcfcStatsLinkFailures, ddmInfoGroup=ddmInfoGroup, alaLinkMonWaitToRestoreTimer=alaLinkMonWaitToRestoreTimer, alcetherClearStats=alcetherClearStats, alcLagStatsTable=alcLagStatsTable, ddmPortChannel=ddmPortChannel, esmTdrPortCableState=esmTdrPortCableState, ddmPortTempHiAlarm=ddmPortTempHiAlarm, ddmRxOpticalPowerHiWarning=ddmRxOpticalPowerHiWarning, alaLinkMonStatsTotalLinkErrors=alaLinkMonStatsTotalLinkErrors, esmPortBeaconTable=esmPortBeaconTable, alcfcStatsTxBBCreditZeros=alcfcStatsTxBBCreditZeros, portViolationClearPort=portViolationClearPort, esmPortBeaconGroup=esmPortBeaconGroup, alaLFPGroupTable=alaLFPGroupTable, esmHybridConfTable=esmHybridConfTable, esmBeaconLedColor=esmBeaconLedColor, esmPortCfgSpeed=esmPortCfgSpeed, portViolationNotificationTrap=portViolationNotificationTrap, portViolationAction=portViolationAction, alaPortViolationTrapObjects=alaPortViolationTrapObjects, alcetherStatsRxControlPkts=alcetherStatsRxControlPkts)
