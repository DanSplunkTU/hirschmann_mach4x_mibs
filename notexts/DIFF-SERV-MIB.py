#
# PySNMP MIB module DIFF-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DIFF-SERV-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 05:10:45 2022
# On host fv-az77-149 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
rlExperience, = mibBuilder.importSymbols("CISCOSB-MIB", "rlExperience")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, zeroDotZero, Counter32, IpAddress, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Gauge32, Counter64, TimeTicks, Bits, Unsigned32, mib_2, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "zeroDotZero", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Gauge32", "Counter64", "TimeTicks", "Bits", "Unsigned32", "mib-2", "MibIdentifier")
RowStatus, TestAndIncr, RowPointer, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TestAndIncr", "RowPointer", "TextualConvention", "DisplayString")
diffServMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1))
diffServMib.setRevisions(('1999-07-19 01:00',))
if mibBuilder.loadTexts: diffServMib.setLastUpdated('9907190100Z')
if mibBuilder.loadTexts: diffServMib.setOrganization('Cisco Systems')
diffServObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1))
diffServTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2))
diffServMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 3))
class Dscp(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

diffServAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 1), )
if mibBuilder.loadTexts: diffServAggregateTable.setStatus('current')
diffServAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 1, 1), ).setIndexNames((0, "DIFF-SERV-MIB", "diffServAggregateDSCP"))
if mibBuilder.loadTexts: diffServAggregateEntry.setStatus('current')
diffServAggregateDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 1, 1, 1), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAggregateDSCP.setStatus('current')
class MFClassifierL4Port(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

diffServMFClassifierUnique = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServMFClassifierUnique.setStatus('current')
diffServMFClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2), )
if mibBuilder.loadTexts: diffServMFClassifierTable.setStatus('current')
diffServMFClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1), ).setIndexNames((0, "DIFF-SERV-MIB", "diffServMFClassifierIndex"))
if mibBuilder.loadTexts: diffServMFClassifierEntry.setStatus('current')
diffServMFClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServMFClassifierIndex.setStatus('current')
diffServMFClassifierAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierAddrType.setStatus('current')
diffServMFClassifierDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierDstAddr.setStatus('current')
diffServMFClassifierDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierDstAddrMask.setStatus('current')
diffServMFClassifierSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierSrcAddr.setStatus('current')
diffServMFClassifierSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierSrcAddrMask.setStatus('current')
diffServMFClassifierDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierDscp.setStatus('current')
diffServMFClassifierProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierProtocol.setStatus('current')
diffServMFClassifierDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 9), MFClassifierL4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierDstL4PortMin.setStatus('current')
diffServMFClassifierDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 10), MFClassifierL4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierDstL4PortMax.setStatus('current')
diffServMFClassifierSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 11), MFClassifierL4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierSrcL4PortMin.setStatus('current')
diffServMFClassifierSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 12), MFClassifierL4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierSrcL4PortMax.setStatus('current')
diffServMFClassifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMFClassifierStatus.setStatus('current')
diffServClassifierUnique = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassifierUnique.setStatus('current')
diffServClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3), )
if mibBuilder.loadTexts: diffServClassifierTable.setStatus('current')
diffServClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DIFF-SERV-MIB", "diffServInterfaceDirection"), (0, "DIFF-SERV-MIB", "diffServClassifierNumber"))
if mibBuilder.loadTexts: diffServClassifierEntry.setStatus('current')
diffServInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServInterfaceDirection.setStatus('current')
diffServClassifierNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassifierNumber.setStatus('current')
diffServClassifierMatchObject = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 3), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassifierMatchObject.setStatus('current')
diffServClassifierNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassifierNext.setStatus('current')
diffServClassifierSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassifierSequence.setStatus('current')
diffServClassifierConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("mib", 1), ("pib", 2), ("bgp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassifierConfigType.setStatus('current')
diffServClassifierConfigTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassifierConfigTypeInfo.setStatus('current')
diffServClassifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassifierStatus.setStatus('current')
diffServTBMeterUnique = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1, 3), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServTBMeterUnique.setStatus('current')
diffServTBMeterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4), )
if mibBuilder.loadTexts: diffServTBMeterTable.setStatus('current')
diffServTBMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DIFF-SERV-MIB", "diffServInterfaceDirection"), (0, "DIFF-SERV-MIB", "diffServTBMeterNumber"))
if mibBuilder.loadTexts: diffServTBMeterEntry.setStatus('current')
diffServTBMeterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: diffServTBMeterNumber.setStatus('current')
diffServTBMeterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 2), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServTBMeterInterval.setStatus('current')
diffServTBMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServTBMeterBurstSize.setStatus('current')
diffServTBMeterFailNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServTBMeterFailNext.setStatus('current')
diffServTBMeterSucceedNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 5), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServTBMeterSucceedNext.setStatus('current')
diffServTBMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServTBMeterStatus.setStatus('current')
diffServActionUnique = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1, 4), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServActionUnique.setStatus('current')
diffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5), )
if mibBuilder.loadTexts: diffServActionTable.setStatus('current')
diffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DIFF-SERV-MIB", "diffServInterfaceDirection"), (0, "DIFF-SERV-MIB", "diffServActionNumber"))
if mibBuilder.loadTexts: diffServActionEntry.setStatus('current')
diffServActionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServActionNumber.setStatus('current')
diffServActionNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 2), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionNext.setStatus('current')
diffServActionDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 3), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionDSCP.setStatus('current')
diffServActionMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 4), Unsigned32()).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionMinThreshold.setStatus('current')
diffServActionMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 5), Unsigned32()).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionMaxThreshold.setStatus('current')
diffServActionDropPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("alwaysDrop", 2), ("tailDrop", 3), ("randomDrop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionDropPolicy.setStatus('current')
diffServActionHCConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 7), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionHCConformingPackets.setStatus('current')
diffServActionConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionConformingPackets.setStatus('current')
diffServActionHCConformingOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionHCConformingOctets.setStatus('current')
diffServActionConformingOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionConformingOctets.setStatus('current')
diffServActionTailDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionTailDrops.setStatus('current')
diffServActionHCTailDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionHCTailDrops.setStatus('current')
diffServActionRandomDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionRandomDrops.setStatus('current')
diffServActionHCRandomDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionHCRandomDrops.setStatus('current')
diffServActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 5, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionStatus.setStatus('current')
diffServQueueUnique = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 1, 5), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServQueueUnique.setStatus('current')
diffServQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6), )
if mibBuilder.loadTexts: diffServQueueTable.setStatus('current')
diffServQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DIFF-SERV-MIB", "diffServInterfaceDirection"), (0, "DIFF-SERV-MIB", "diffServQueueNumber"))
if mibBuilder.loadTexts: diffServQueueEntry.setStatus('current')
diffServQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServQueueNumber.setStatus('current')
diffServQueueMinimumRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 2), Unsigned32()).setUnits('KBPS').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueueMinimumRate.setStatus('current')
diffServQueueMaximumRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 3), Unsigned32()).setUnits('KBPS').setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueueMaximumRate.setStatus('current')
diffServQueuePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueuePriority.setStatus('current')
diffServQueueNextTCB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 5), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueueNextTCB.setStatus('current')
diffServQueueOccupancyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueueOccupancyWeight.setStatus('current')
diffServQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 51, 1, 2, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServQueueStatus.setStatus('current')
mibBuilder.exportSymbols("DIFF-SERV-MIB", diffServMFClassifierUnique=diffServMFClassifierUnique, diffServClassifierConfigTypeInfo=diffServClassifierConfigTypeInfo, diffServMIBConformance=diffServMIBConformance, PYSNMP_MODULE_ID=diffServMib, diffServInterfaceDirection=diffServInterfaceDirection, diffServMFClassifierIndex=diffServMFClassifierIndex, diffServMFClassifierDstAddr=diffServMFClassifierDstAddr, diffServMFClassifierDscp=diffServMFClassifierDscp, diffServClassifierConfigType=diffServClassifierConfigType, diffServClassifierTable=diffServClassifierTable, diffServActionMinThreshold=diffServActionMinThreshold, diffServActionConformingOctets=diffServActionConformingOctets, MFClassifierL4Port=MFClassifierL4Port, diffServTBMeterTable=diffServTBMeterTable, diffServTBMeterBurstSize=diffServTBMeterBurstSize, diffServActionStatus=diffServActionStatus, diffServQueueNextTCB=diffServQueueNextTCB, diffServActionNext=diffServActionNext, diffServMFClassifierSrcAddrMask=diffServMFClassifierSrcAddrMask, diffServClassifierNumber=diffServClassifierNumber, diffServMFClassifierSrcL4PortMax=diffServMFClassifierSrcL4PortMax, diffServMib=diffServMib, diffServActionEntry=diffServActionEntry, diffServMFClassifierSrcAddr=diffServMFClassifierSrcAddr, diffServActionNumber=diffServActionNumber, diffServMFClassifierEntry=diffServMFClassifierEntry, diffServQueuePriority=diffServQueuePriority, diffServActionHCRandomDrops=diffServActionHCRandomDrops, diffServActionDropPolicy=diffServActionDropPolicy, diffServTBMeterFailNext=diffServTBMeterFailNext, diffServActionConformingPackets=diffServActionConformingPackets, diffServClassifierEntry=diffServClassifierEntry, diffServMFClassifierDstL4PortMax=diffServMFClassifierDstL4PortMax, diffServMFClassifierStatus=diffServMFClassifierStatus, diffServActionUnique=diffServActionUnique, diffServActionTailDrops=diffServActionTailDrops, diffServClassifierUnique=diffServClassifierUnique, diffServClassifierNext=diffServClassifierNext, diffServAggregateTable=diffServAggregateTable, diffServActionHCConformingPackets=diffServActionHCConformingPackets, diffServTBMeterInterval=diffServTBMeterInterval, diffServQueueMinimumRate=diffServQueueMinimumRate, diffServObjects=diffServObjects, diffServActionTable=diffServActionTable, diffServQueueStatus=diffServQueueStatus, diffServActionRandomDrops=diffServActionRandomDrops, diffServMFClassifierAddrType=diffServMFClassifierAddrType, diffServActionMaxThreshold=diffServActionMaxThreshold, Dscp=Dscp, diffServQueueTable=diffServQueueTable, diffServMFClassifierSrcL4PortMin=diffServMFClassifierSrcL4PortMin, diffServTBMeterStatus=diffServTBMeterStatus, diffServAggregateEntry=diffServAggregateEntry, diffServClassifierStatus=diffServClassifierStatus, diffServActionHCTailDrops=diffServActionHCTailDrops, diffServMFClassifierTable=diffServMFClassifierTable, diffServActionHCConformingOctets=diffServActionHCConformingOctets, diffServTBMeterSucceedNext=diffServTBMeterSucceedNext, diffServMFClassifierDstL4PortMin=diffServMFClassifierDstL4PortMin, diffServActionDSCP=diffServActionDSCP, diffServClassifierMatchObject=diffServClassifierMatchObject, diffServTBMeterUnique=diffServTBMeterUnique, diffServQueueOccupancyWeight=diffServQueueOccupancyWeight, diffServQueueEntry=diffServQueueEntry, diffServTBMeterEntry=diffServTBMeterEntry, diffServTBMeterNumber=diffServTBMeterNumber, diffServQueueNumber=diffServQueueNumber, diffServAggregateDSCP=diffServAggregateDSCP, diffServQueueMaximumRate=diffServQueueMaximumRate, diffServClassifierSequence=diffServClassifierSequence, diffServQueueUnique=diffServQueueUnique, diffServTables=diffServTables, diffServMFClassifierProtocol=diffServMFClassifierProtocol, diffServMFClassifierDstAddrMask=diffServMFClassifierDstAddrMask)
