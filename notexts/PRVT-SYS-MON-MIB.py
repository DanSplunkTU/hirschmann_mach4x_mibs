#
# PySNMP MIB module PRVT-SYS-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SYS-MON-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 11:54:19 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
reportsL2IfaceUnit, reportsIfJackIndex, reportsL2IfaceSlot, prvt_products, reportsL2IfacePort = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "reportsL2IfaceUnit", "reportsIfJackIndex", "reportsL2IfaceSlot", "prvt-products", "reportsL2IfacePort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, Gauge32, Counter64, MibIdentifier, iso, NotificationType, Counter32, TimeTicks, IpAddress, ModuleIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Gauge32", "Counter64", "MibIdentifier", "iso", "NotificationType", "Counter32", "TimeTicks", "IpAddress", "ModuleIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
prvtSysMonMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 111, 3))
prvtSysMonMib.setRevisions(('2007-12-27 00:00', '2005-02-16 00:00', '2003-11-18 00:00', '2003-05-13 00:00',))
if mibBuilder.loadTexts: prvtSysMonMib.setLastUpdated('200712270000Z')
if mibBuilder.loadTexts: prvtSysMonMib.setOrganization('BATM Advanced Communication')
software = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111))
class EnableStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

prvtSysMonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0))
prvtSysMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1))
prvtSysMonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 2))
sysMonThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1))
sysMonValues = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2))
sysMonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3))
cpuUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilizationThreshold.setStatus('current')
ramBytesFreeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramBytesFreeThreshold.setStatus('current')
portErrorsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrorsThreshold.setStatus('current')
portsBroadcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsBroadcastThreshold.setStatus('current')
portsCRCErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsCRCErrThreshold.setStatus('current')
portsRuntsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsRuntsThreshold.setStatus('current')
portsOverSizeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsOverSizeThreshold.setStatus('current')
laserPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8), )
if mibBuilder.loadTexts: laserPortThresholdTable.setStatus('current')
laserPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"), (0, "PRVT-SWITCH-MIB", "reportsIfJackIndex"))
if mibBuilder.loadTexts: laserPortThresholdEntry.setStatus('current')
laserTemperatureHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTemperatureHighThreshold.setStatus('current')
laserTemperatureLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTemperatureLowThreshold.setStatus('current')
laserTxPowerHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTxPowerHighThreshold.setStatus('current')
laserTxPowerLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTxPowerLowThreshold.setStatus('current')
laserRxPowerHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserRxPowerHighThreshold.setStatus('current')
laserRxPowerLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserRxPowerLowThreshold.setStatus('current')
monCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monCpuUtilization.setStatus('current')
monRamBytesFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monRamBytesFree.setStatus('current')
monPortsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3), )
if mibBuilder.loadTexts: monPortsTable.setStatus('current')
monPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"))
if mibBuilder.loadTexts: monPortsEntry.setStatus('current')
monPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monPortErrors.setStatus('current')
monPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monPortBroadcast.setStatus('current')
monPortCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monPortCRCErr.setStatus('current')
monPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monPortRunts.setStatus('current')
monPortOverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: monPortOverSize.setStatus('current')
laserPortValueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4), )
if mibBuilder.loadTexts: laserPortValueTable.setStatus('current')
laserPortValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"), (0, "PRVT-SWITCH-MIB", "reportsIfJackIndex"))
if mibBuilder.loadTexts: laserPortValueEntry.setStatus('current')
sfpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lm-supported", 1), ("lm-not-supported", 2), ("extracted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpStatus.setStatus('current')
laserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserTemperature.setStatus('current')
laserTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserTxPower.setStatus('current')
laserRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserRxPower.setStatus('current')
cpuUtilizationExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 1)).setObjects(("PRVT-SYS-MON-MIB", "monCpuUtilization"), ("PRVT-SYS-MON-MIB", "cpuUtilizationThreshold"))
if mibBuilder.loadTexts: cpuUtilizationExceeded.setStatus('current')
ramFreeSpaceExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 2)).setObjects(("PRVT-SYS-MON-MIB", "monRamBytesFree"), ("PRVT-SYS-MON-MIB", "ramBytesFreeThreshold"))
if mibBuilder.loadTexts: ramFreeSpaceExceeded.setStatus('current')
portErrorsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 3)).setObjects(("PRVT-SYS-MON-MIB", "monPortErrors"), ("PRVT-SYS-MON-MIB", "portErrorsThreshold"))
if mibBuilder.loadTexts: portErrorsExceeded.setStatus('current')
portsBroadcastExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 4)).setObjects(("PRVT-SYS-MON-MIB", "monPortBroadcast"), ("PRVT-SYS-MON-MIB", "portsBroadcastThreshold"))
if mibBuilder.loadTexts: portsBroadcastExceeded.setStatus('current')
portsCRCErrExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 5)).setObjects(("PRVT-SYS-MON-MIB", "monPortCRCErr"), ("PRVT-SYS-MON-MIB", "portsCRCErrThreshold"))
if mibBuilder.loadTexts: portsCRCErrExceeded.setStatus('current')
portsRuntsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 6)).setObjects(("PRVT-SYS-MON-MIB", "monPortRunts"), ("PRVT-SYS-MON-MIB", "portsRuntsThreshold"))
if mibBuilder.loadTexts: portsRuntsExceeded.setStatus('current')
portsOverSizeExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 7)).setObjects(("PRVT-SYS-MON-MIB", "monPortOverSize"), ("PRVT-SYS-MON-MIB", "portsOverSizeThreshold"))
if mibBuilder.loadTexts: portsOverSizeExceeded.setStatus('current')
laserTemperatureThresholdCrossed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 8)).setObjects(("PRVT-SYS-MON-MIB", "laserTemperature"), ("PRVT-SYS-MON-MIB", "laserTemperatureHighThreshold"), ("PRVT-SYS-MON-MIB", "laserTemperatureLowThreshold"))
if mibBuilder.loadTexts: laserTemperatureThresholdCrossed.setStatus('current')
laserTxPowerThresholdCrossed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 9)).setObjects(("PRVT-SYS-MON-MIB", "laserTxPower"), ("PRVT-SYS-MON-MIB", "laserTxPowerHighThreshold"), ("PRVT-SYS-MON-MIB", "laserTxPowerLowThreshold"))
if mibBuilder.loadTexts: laserTxPowerThresholdCrossed.setStatus('current')
laserRxPowerThresholdCrossed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 10)).setObjects(("PRVT-SYS-MON-MIB", "laserRxPower"), ("PRVT-SYS-MON-MIB", "laserRxPowerHighThreshold"), ("PRVT-SYS-MON-MIB", "laserRxPowerLowThreshold"))
if mibBuilder.loadTexts: laserRxPowerThresholdCrossed.setStatus('current')
sfpMonStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 0, 11)).setObjects(("PRVT-SYS-MON-MIB", "sfpMonStatus"))
if mibBuilder.loadTexts: sfpMonStatusChanged.setStatus('current')
sfpPortManTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5), )
if mibBuilder.loadTexts: sfpPortManTable.setStatus('current')
sfpPortManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"), (0, "PRVT-SWITCH-MIB", "reportsIfJackIndex"))
if mibBuilder.loadTexts: sfpPortManEntry.setStatus('current')
sfpMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sfpInserted", 1), ("sfpExtracted", 2), ("sfpUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpMonStatus.setStatus('current')
sfpVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendor.setStatus('current')
sfpPN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPN.setStatus('current')
sfpRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRevision.setStatus('current')
sfpLenght = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLenght.setStatus('current')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
sysMonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1), )
if mibBuilder.loadTexts: sysMonConfigTable.setStatus('current')
sysMonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-SYS-MON-MIB", "sysMonIndicator"))
if mibBuilder.loadTexts: sysMonConfigEntry.setStatus('current')
sysMonIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cpu-usage", 1), ("ram-usage", 2), ("power-supply", 3), ("onboard-power", 4), ("fan", 5), ("temperature", 6), ("laser", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMonIndicator.setStatus('current')
sysMonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonEnable.setStatus('current')
sysMonPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonPeriod.setStatus('current')
sysMonTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 4), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonTrap.setStatus('current')
sysMonLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 5), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonLog.setStatus('current')
sysMonLed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 6), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonLed.setStatus('current')
sysMonDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("reset", 1))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMonDefaults.setStatus('current')
sysMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 2, 2))
sysMonNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 111, 3, 2, 2, 3)).setObjects(("PRVT-SYS-MON-MIB", "cpuUtilizationExceeded"), ("PRVT-SYS-MON-MIB", "ramFreeSpaceExceeded"), ("PRVT-SYS-MON-MIB", "portErrorsExceeded"), ("PRVT-SYS-MON-MIB", "portsBroadcastExceeded"), ("PRVT-SYS-MON-MIB", "portsCRCErrExceeded"), ("PRVT-SYS-MON-MIB", "portsRuntsExceeded"), ("PRVT-SYS-MON-MIB", "portsOverSizeExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysMonNotificationGroup = sysMonNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-SYS-MON-MIB", laserTxPowerLowThreshold=laserTxPowerLowThreshold, laserPortValueEntry=laserPortValueEntry, portErrorsExceeded=portErrorsExceeded, ramBytesFreeThreshold=ramBytesFreeThreshold, portsCRCErrThreshold=portsCRCErrThreshold, laserTxPower=laserTxPower, sysMonPeriod=sysMonPeriod, laserRxPowerHighThreshold=laserRxPowerHighThreshold, monPortsTable=monPortsTable, sysMonEnable=sysMonEnable, portsCRCErrExceeded=portsCRCErrExceeded, laserRxPower=laserRxPower, sysMonThreshold=sysMonThreshold, portsRuntsThreshold=portsRuntsThreshold, sysMonConfig=sysMonConfig, monCpuUtilization=monCpuUtilization, laserPortValueTable=laserPortValueTable, sfpMonStatusChanged=sfpMonStatusChanged, cpuUtilizationExceeded=cpuUtilizationExceeded, sfpPN=sfpPN, sfpMonStatus=sfpMonStatus, monPortCRCErr=monPortCRCErr, sysMonConfigTable=sysMonConfigTable, monPortsEntry=monPortsEntry, sfpRevision=sfpRevision, sfpLenght=sfpLenght, sfpConnector=sfpConnector, monRamBytesFree=monRamBytesFree, prvtSysMonObjects=prvtSysMonObjects, monPortRunts=monPortRunts, ramFreeSpaceExceeded=ramFreeSpaceExceeded, laserTemperatureThresholdCrossed=laserTemperatureThresholdCrossed, laserTxPowerThresholdCrossed=laserTxPowerThresholdCrossed, sfpPortManEntry=sfpPortManEntry, sfpVendor=sfpVendor, sysMonIndicator=sysMonIndicator, sysMonTrap=sysMonTrap, sysMonMIBGroups=sysMonMIBGroups, laserRxPowerLowThreshold=laserRxPowerLowThreshold, monPortBroadcast=monPortBroadcast, prvtSysMonMib=prvtSysMonMib, sysMonNotificationGroup=sysMonNotificationGroup, prvtSysMonConformance=prvtSysMonConformance, laserTemperature=laserTemperature, laserTemperatureLowThreshold=laserTemperatureLowThreshold, sfpPortManTable=sfpPortManTable, PYSNMP_MODULE_ID=prvtSysMonMib, sfpStatus=sfpStatus, EnableStatus=EnableStatus, laserTxPowerHighThreshold=laserTxPowerHighThreshold, sysMonValues=sysMonValues, portsOverSizeThreshold=portsOverSizeThreshold, monPortOverSize=monPortOverSize, portsRuntsExceeded=portsRuntsExceeded, laserRxPowerThresholdCrossed=laserRxPowerThresholdCrossed, sysMonLog=sysMonLog, portErrorsThreshold=portErrorsThreshold, cpuUtilizationThreshold=cpuUtilizationThreshold, laserTemperatureHighThreshold=laserTemperatureHighThreshold, monPortErrors=monPortErrors, portsOverSizeExceeded=portsOverSizeExceeded, portsBroadcastExceeded=portsBroadcastExceeded, laserPortThresholdTable=laserPortThresholdTable, sysMonConfigEntry=sysMonConfigEntry, laserPortThresholdEntry=laserPortThresholdEntry, sysMonLed=sysMonLed, software=software, portsBroadcastThreshold=portsBroadcastThreshold, sysMonDefaults=sysMonDefaults, prvtSysMonNotifications=prvtSysMonNotifications)
