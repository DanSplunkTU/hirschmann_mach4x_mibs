#
# PySNMP MIB module PRVT-SWITCH-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SWITCH-ACCESS-LIST-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 17:25:02 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
serviceId, sapEncapValue, sapPortId = mibBuilder.importSymbols("PRVT-SERV-MIB", "serviceId", "sapEncapValue", "sapPortId")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, TimeTicks, ObjectIdentity, Counter32, Integer32, iso, IpAddress, Counter64, Bits, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter32", "Integer32", "iso", "IpAddress", "Counter64", "Bits", "Unsigned32", "MibIdentifier")
TruthValue, RowStatus, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention", "MacAddress")
prvtSwitchAccessListMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 1))
prvtSwitchAccessListMIB.setRevisions(('2010-06-25 00:00',))
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setLastUpdated('201006250000Z')
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setOrganization('BATM Advanced Communication')
class PrvtSwAclAcgType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ipStd", 0), ("ipExt", 1), ("mac", 2), ("etherType", 3))

class PrvtSwAclIpv4PrefixType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d.1d.1d.1d/1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class PrvtSwAclVlanIdTypeOrNone(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class PrvtSwAclDscpTypeOrNone(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class PrvtSwAclTosTypeOrNone(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16)

class PrvtSwAclFcTypeOrNone(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtSwAclPrecedenceTypeOrNone(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flashOverride", 4), ("critical", 5), ("internet", 6), ("network", 7), ("none", 8))

class PrvtSwAclVptTypeOrNone(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 8)

class PrvtSwAclVlanMaskType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:1x:1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class PrvtSwAclEtherType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PrvtSwAclEtherTypeMask(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PrvtSwAclAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permit", 0), ("deny", 1))

class PrvtSwAclIpProtocol(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrvtSwAclPortIdTypeOrNone(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class PrvtSwAclExceedAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noAction", 0), ("markYellow", 1), ("markRed", 2), ("drop", 3))

class PrvtSwAclMatchTrafficType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("any", 0), ("unknownUnicast", 1), ("knownUnicast", 2), ("unknownMulticast", 3), ("knownMulticast", 4), ("broadcast", 5))

class PrvtSwAclGroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("in", 1), ("out", 2), ("vlan", 3))

class PrvtSwAclDescrType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '30a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 30)

class PrvtSwAclNameType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '10a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

class PrvtSwAclRuleIdType(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class PrvtSwAclStatsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("matchCounterFrames", 1), ("matchCounterBytes", 2), ("rateLimitRedNotRedFrames", 3), ("rateLimitRedNotRedBytes", 4), ("rateLimitGreenNotGreenFrames", 5), ("rateLimitGreenNotGreenBytes", 6), ("rateLimitGreenRedFrames", 7), ("rateLimitGreenRedBytes", 8), ("rateLimitGreenYellowFrames", 9), ("rateLimitGreenYellowBytes", 10), ("rateLimitRedYellowFrames", 11), ("rateLimitRedYellowBytes", 12), ("bwMonMatchCounterFrames", 13), ("bwMonMatchCounterBytes", 14), ("bwMonRedNotRedFrames", 15), ("bwMonRedNotRedBytes", 16), ("bwMonGreenNotGreenFrames", 17), ("bwMonGreenNotGreenBytes", 18), ("bwMonGreenRedFrames", 19), ("bwMonGreenRedBytes", 20), ("bwMonGreenYellowFrames", 21), ("bwMonGreenYellowBytes", 22), ("bwMonRedYellowFrames", 23), ("bwMonRedYellowBytes", 24))

class PrvtSwAclFcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtSwAclColorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("green", 1), ("yellow", 2), ("red", 3))

class PrvtSwAclProfileIdType(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PrvtSwAclRateLimitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("single", 1), ("dual", 2))

class PrvtSwAclRateType(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class PrvtSwAclBurstSizeType(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class PrvtSwAclTagType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2))

prvtSwAclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0))
prvtSwAclObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1))
prvtSwAclMonProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1))
prvtSwAclMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: prvtSwAclMonPrfTable.setStatus('current')
prvtSwAclMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclMonPrfEntry.setStatus('current')
prvtSwAclMonPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1, 1), PrvtSwAclProfileIdType())
if mibBuilder.loadTexts: prvtSwAclMonPrfId.setStatus('current')
prvtSwAclMonPrfIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMonPrfIdRowStatus.setStatus('current')
prvtSwAclMonPrfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsTable.setStatus('current')
prvtSwAclMonPrfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfStatsType"))
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsEntry.setStatus('current')
prvtSwAclMonPrfStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1, 1), PrvtSwAclStatsType())
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsType.setStatus('current')
prvtSwAclMonPrfStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsRowStatus.setStatus('current')
prvtSwAclGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2))
prvtSwAclStdTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSwAclStdTable.setStatus('current')
prvtSwAclStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdName"))
if mibBuilder.loadTexts: prvtSwAclStdEntry.setStatus('current')
prvtSwAclStdName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclStdName.setStatus('current')
prvtSwAclStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRowStatus.setStatus('current')
prvtSwAclStdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdDescr.setStatus('current')
prvtSwAclStdRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclStdRuleTable.setStatus('current')
prvtSwAclStdRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdRuleId"))
if mibBuilder.loadTexts: prvtSwAclStdRuleEntry.setStatus('current')
prvtSwAclStdRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclStdRuleId.setStatus('current')
prvtSwAclStdRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleRowStatus.setStatus('current')
prvtSwAclStdRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleAction.setStatus('current')
prvtSwAclStdRuleIpSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 4), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleIpSrcPrefix.setStatus('current')
prvtSwAclStdRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 5), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanId.setStatus('current')
prvtSwAclStdRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 6), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanMask.setStatus('current')
prvtSwAclStdRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 7), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanId.setStatus('current')
prvtSwAclStdRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 8), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanMask.setStatus('current')
prvtSwAclStdRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 9), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVpt.setStatus('current')
prvtSwAclStdRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 10), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVpt.setStatus('current')
prvtSwAclStdRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 11), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleDscp.setStatus('current')
prvtSwAclStdRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleUntaggedMode.setStatus('current')
prvtSwAclExtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclExtTable.setStatus('current')
prvtSwAclExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtName"))
if mibBuilder.loadTexts: prvtSwAclExtEntry.setStatus('current')
prvtSwAclExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclExtName.setStatus('current')
prvtSwAclExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRowStatus.setStatus('current')
prvtSwAclExtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtDescr.setStatus('current')
prvtSwAclExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclExtRuleTable.setStatus('current')
prvtSwAclExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtRuleId"))
if mibBuilder.loadTexts: prvtSwAclExtRuleEntry.setStatus('current')
prvtSwAclExtRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclExtRuleId.setStatus('current')
prvtSwAclExtRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleRowStatus.setStatus('current')
prvtSwAclExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleAction.setStatus('current')
prvtSwAclExtRuleIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 4), PrvtSwAclIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpProtocol.setStatus('current')
prvtSwAclExtRuleIpSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 5), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpSrcPrefix.setStatus('current')
prvtSwAclExtRuleIpDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 6), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpDstPrefix.setStatus('current')
prvtSwAclExtRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpType.setStatus('current')
prvtSwAclExtRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpCode.setStatus('current')
prvtSwAclExtRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleEstablished.setStatus('current')
prvtSwAclExtRuleTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 10), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpSrcPort.setStatus('current')
prvtSwAclExtRuleTcpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 11), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpDstPort.setStatus('current')
prvtSwAclExtRuleUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 12), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpSrcPort.setStatus('current')
prvtSwAclExtRuleUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 13), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpDstPort.setStatus('current')
prvtSwAclExtRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 14), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTos.setStatus('current')
prvtSwAclExtRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 15), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRulePrecedence.setStatus('current')
prvtSwAclExtRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 16), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanId.setStatus('current')
prvtSwAclExtRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 17), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanMask.setStatus('current')
prvtSwAclExtRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 18), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanId.setStatus('current')
prvtSwAclExtRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 19), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanMask.setStatus('current')
prvtSwAclExtRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 20), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVpt.setStatus('current')
prvtSwAclExtRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 21), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVpt.setStatus('current')
prvtSwAclExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 22), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleDscp.setStatus('current')
prvtSwAclExtRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUntaggedMode.setStatus('current')
prvtSwAclMacTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclMacTable.setStatus('current')
prvtSwAclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacName"))
if mibBuilder.loadTexts: prvtSwAclMacEntry.setStatus('current')
prvtSwAclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclMacName.setStatus('current')
prvtSwAclMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRowStatus.setStatus('current')
prvtSwAclMacDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacDescr.setStatus('current')
prvtSwAclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclMacRuleTable.setStatus('current')
prvtSwAclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacRuleId"))
if mibBuilder.loadTexts: prvtSwAclMacRuleEntry.setStatus('current')
prvtSwAclMacRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclMacRuleId.setStatus('current')
prvtSwAclMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleRowStatus.setStatus('current')
prvtSwAclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleAction.setStatus('current')
prvtSwAclMacRuleMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrc.setStatus('current')
prvtSwAclMacRuleMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrcMask.setStatus('current')
prvtSwAclMacRuleMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDst.setStatus('current')
prvtSwAclMacRuleMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDstMask.setStatus('current')
prvtSwAclMacRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 8), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleTos.setStatus('current')
prvtSwAclMacRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 9), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRulePrecedence.setStatus('current')
prvtSwAclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 10), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanId.setStatus('current')
prvtSwAclMacRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 11), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanMask.setStatus('current')
prvtSwAclMacRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 12), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanId.setStatus('current')
prvtSwAclMacRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 13), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanMask.setStatus('current')
prvtSwAclMacRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 14), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVpt.setStatus('current')
prvtSwAclMacRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 15), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVpt.setStatus('current')
prvtSwAclMacRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 16), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleDscp.setStatus('current')
prvtSwAclMacRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleUntaggedMode.setStatus('current')
prvtSwAclMacRuleDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 18), PrvtSwAclMatchTrafficType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleDstAddrType.setStatus('current')
prvtSwAclEthTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7), )
if mibBuilder.loadTexts: prvtSwAclEthTable.setStatus('current')
prvtSwAclEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthName"))
if mibBuilder.loadTexts: prvtSwAclEthEntry.setStatus('current')
prvtSwAclEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclEthName.setStatus('current')
prvtSwAclEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRowStatus.setStatus('current')
prvtSwAclEthDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthDescr.setStatus('current')
prvtSwAclEthRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8), )
if mibBuilder.loadTexts: prvtSwAclEthRuleTable.setStatus('current')
prvtSwAclEthRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthRuleId"))
if mibBuilder.loadTexts: prvtSwAclEthRuleEntry.setStatus('current')
prvtSwAclEthRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclEthRuleId.setStatus('current')
prvtSwAclEthRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleRowStatus.setStatus('current')
prvtSwAclEthRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleAction.setStatus('current')
prvtSwAclEthRuleEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 4), PrvtSwAclEtherType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleEthType.setStatus('current')
prvtSwAclEthRuleEthTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 5), PrvtSwAclEtherTypeMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleEthTypeMask.setStatus('current')
prvtSwAclEthRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 6), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleTos.setStatus('current')
prvtSwAclEthRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 7), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRulePrecedence.setStatus('current')
prvtSwAclEthRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 8), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanId.setStatus('current')
prvtSwAclEthRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 9), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanMask.setStatus('current')
prvtSwAclEthRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 10), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanId.setStatus('current')
prvtSwAclEthRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 11), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanMask.setStatus('current')
prvtSwAclEthRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 12), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVpt.setStatus('current')
prvtSwAclEthRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 13), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVpt.setStatus('current')
prvtSwAclEthRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 14), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleDscp.setStatus('current')
prvtSwAclEthRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleUntaggedMode.setStatus('current')
prvtSwAclInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3))
prvtSwAclIfAcg = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2))
prvtSwAclIfAcgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: prvtSwAclIfAcgTable.setStatus('current')
prvtSwAclIfAcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"))
if mibBuilder.loadTexts: prvtSwAclIfAcgEntry.setStatus('current')
prvtSwAclIfAcgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgIndex.setStatus('current')
prvtSwAclIfAcgSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: prvtSwAclIfAcgSeqId.setStatus('current')
prvtSwAclIfAcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 3), PrvtSwAclAcgType())
if mibBuilder.loadTexts: prvtSwAclIfAcgType.setStatus('current')
prvtSwAclIfAcgAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 4), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclIfAcgAclName.setStatus('current')
prvtSwAclIfAcgAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 5), PrvtSwAclGroupType())
if mibBuilder.loadTexts: prvtSwAclIfAcgAclType.setStatus('current')
prvtSwAclIfAcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRowStatus.setStatus('current')
prvtSwAclIfAcgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 8), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVlan.setStatus('current')
prvtSwAclIfAcgVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 9), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVlanAdd.setStatus('current')
prvtSwAclIfAcgVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 10), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVpt.setStatus('current')
prvtSwAclIfAcgInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 11), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgInnerVpt.setStatus('current')
prvtSwAclIfAcgDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 12), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgDscp.setStatus('current')
prvtSwAclIfAcgColorGreenFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 13), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenFc.setStatus('current')
prvtSwAclIfAcgColorYellowFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 14), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowFc.setStatus('current')
prvtSwAclIfAcgColorRedFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 15), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedFc.setStatus('current')
prvtSwAclIfAcgColorGreenVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 16), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenVpt.setStatus('current')
prvtSwAclIfAcgColorYellowVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 17), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowVpt.setStatus('current')
prvtSwAclIfAcgColorRedVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 18), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedVpt.setStatus('current')
prvtSwAclIfAcgColorGreenDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 19), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenDscp.setStatus('current')
prvtSwAclIfAcgColorYellowDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 20), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowDscp.setStatus('current')
prvtSwAclIfAcgColorRedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 21), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedDscp.setStatus('current')
prvtSwAclIfAcgResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgResetStats.setStatus('current')
prvtSwAclIfAcgRLimitTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitTable.setStatus('current')
prvtSwAclIfAcgRLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRLimitType"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEntry.setStatus('current')
prvtSwAclIfAcgRLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 1), PrvtSwAclRateLimitType())
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitType.setStatus('current')
prvtSwAclIfAcgRLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitRowStatus.setStatus('current')
prvtSwAclIfAcgRLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 3), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCir.setStatus('current')
prvtSwAclIfAcgRLimitCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 4), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCbs.setStatus('current')
prvtSwAclIfAcgRLimitEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 5), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEbs.setStatus('current')
prvtSwAclIfAcgRLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 6), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPir.setStatus('current')
prvtSwAclIfAcgRLimitPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 7), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPbs.setStatus('current')
prvtSwAclIfAcgRLimitColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitColorAware.setStatus('current')
prvtSwAclIfAcgRLimitExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 9), PrvtSwAclExceedAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitExceedAct.setStatus('current')
prvtSwAclIfAcgRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectTable.setStatus('current')
prvtSwAclIfAcgRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRedirectIfIndex"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectEntry.setStatus('current')
prvtSwAclIfAcgRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectIfIndex.setStatus('current')
prvtSwAclIfAcgRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectRowStatus.setStatus('current')
prvtSwAclIfAcgFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclIfAcgFcTable.setStatus('current')
prvtSwAclIfAcgFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgFcId"))
if mibBuilder.loadTexts: prvtSwAclIfAcgFcEntry.setStatus('current')
prvtSwAclIfAcgFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 1), PrvtSwAclFcType())
if mibBuilder.loadTexts: prvtSwAclIfAcgFcId.setStatus('current')
prvtSwAclIfAcgFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgFcRowStatus.setStatus('current')
prvtSwAclIfAcgFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 3), PrvtSwAclColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgFcColor.setStatus('current')
prvtSwAclIfAcgMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfTable.setStatus('current')
prvtSwAclIfAcgMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfEntry.setStatus('current')
prvtSwAclIfAcgMonPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRowStatus.setStatus('current')
prvtSwAclIfAcgMonPrfMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchF.setStatus('current')
prvtSwAclIfAcgMonPrfMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchB.setStatus('current')
prvtSwAclIfAcgMonPrfGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenF.setStatus('current')
prvtSwAclIfAcgMonPrfGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenB.setStatus('current')
prvtSwAclIfAcgMonPrfNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenF.setStatus('current')
prvtSwAclIfAcgMonPrfNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenB.setStatus('current')
prvtSwAclIfAcgMonPrfYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowF.setStatus('current')
prvtSwAclIfAcgMonPrfYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowB.setStatus('current')
prvtSwAclIfAcgMonPrfRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedF.setStatus('current')
prvtSwAclIfAcgMonPrfRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedB.setStatus('current')
prvtSwAclIfAcgMonPrfNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedF.setStatus('current')
prvtSwAclIfAcgMonPrfNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedB.setStatus('current')
prvtSwAclIfAcgMonPrfRateMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchF.setStatus('current')
prvtSwAclIfAcgMonPrfRateMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchB.setStatus('current')
prvtSwAclIfAcgMonPrfRateGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenF.setStatus('current')
prvtSwAclIfAcgMonPrfRateGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenB.setStatus('current')
prvtSwAclIfAcgMonPrfRateNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenF.setStatus('current')
prvtSwAclIfAcgMonPrfRateNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenB.setStatus('current')
prvtSwAclIfAcgMonPrfRateYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowF.setStatus('current')
prvtSwAclIfAcgMonPrfRateYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowB.setStatus('current')
prvtSwAclIfAcgMonPrfRateRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedF.setStatus('current')
prvtSwAclIfAcgMonPrfRateRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedB.setStatus('current')
prvtSwAclIfAcgMonPrfRateNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedF.setStatus('current')
prvtSwAclIfAcgMonPrfRateNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedB.setStatus('current')
prvtSwAclIfAcgRestrictEgForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingTable.setStatus('current')
prvtSwAclIfAcgRestrictEgForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRestrictEgForwIfIndex"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingEntry.setStatus('current')
prvtSwAclIfAcgRestrictEgForwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwIfIndex.setStatus('current')
prvtSwAclIfAcgRestrictEgForwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwRowStatus.setStatus('current')
prvtSwAclSaps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4))
prvtSwAclSapAcgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: prvtSwAclSapAcgTable.setStatus('current')
prvtSwAclSapAcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"))
if mibBuilder.loadTexts: prvtSwAclSapAcgEntry.setStatus('current')
prvtSwAclSapAcgSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: prvtSwAclSapAcgSeqId.setStatus('current')
prvtSwAclSapAcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 5), PrvtSwAclAcgType())
if mibBuilder.loadTexts: prvtSwAclSapAcgType.setStatus('current')
prvtSwAclSapAcgAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 6), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclSapAcgAclName.setStatus('current')
prvtSwAclSapAcgAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 7), PrvtSwAclGroupType())
if mibBuilder.loadTexts: prvtSwAclSapAcgAclType.setStatus('current')
prvtSwAclSapAcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRowStatus.setStatus('current')
prvtSwAclSapAcgColorGreenFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 13), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorGreenFc.setStatus('current')
prvtSwAclSapAcgColorYellowFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 14), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorYellowFc.setStatus('current')
prvtSwAclSapAcgColorRedFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 15), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorRedFc.setStatus('current')
prvtSwAclSapAcgResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgResetStats.setStatus('current')
prvtSwAclSapAcg = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2))
prvtSwAclSapAcgRLimitTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitTable.setStatus('current')
prvtSwAclSapAcgRLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRLimitType"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEntry.setStatus('current')
prvtSwAclSapAcgRLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 1), PrvtSwAclRateLimitType())
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitType.setStatus('current')
prvtSwAclSapAcgRLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitRowStatus.setStatus('current')
prvtSwAclSapAcgRLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 3), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCir.setStatus('current')
prvtSwAclSapAcgRLimitCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 4), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCbs.setStatus('current')
prvtSwAclSapAcgRLimitEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 5), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEbs.setStatus('current')
prvtSwAclSapAcgRLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 6), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPir.setStatus('current')
prvtSwAclSapAcgRLimitPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 7), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPbs.setStatus('current')
prvtSwAclSapAcgRLimitColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitColorAware.setStatus('current')
prvtSwAclSapAcgRLimitExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 9), PrvtSwAclExceedAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitExceedAct.setStatus('current')
prvtSwAclSapAcgRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectTable.setStatus('current')
prvtSwAclSapAcgRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRedirectIfIndex"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectEntry.setStatus('current')
prvtSwAclSapAcgRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectIfIndex.setStatus('current')
prvtSwAclSapAcgRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectRowStatus.setStatus('current')
prvtSwAclSapAcgFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclSapAcgFcTable.setStatus('current')
prvtSwAclSapAcgFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgFcId"))
if mibBuilder.loadTexts: prvtSwAclSapAcgFcEntry.setStatus('current')
prvtSwAclSapAcgFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 1), PrvtSwAclFcType())
if mibBuilder.loadTexts: prvtSwAclSapAcgFcId.setStatus('current')
prvtSwAclSapAcgFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgFcRowStatus.setStatus('current')
prvtSwAclSapAcgFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 3), PrvtSwAclColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgFcColor.setStatus('current')
prvtSwAclSapAcgMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfTable.setStatus('current')
prvtSwAclSapAcgMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfEntry.setStatus('current')
prvtSwAclSapAcgMonPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRowStatus.setStatus('current')
prvtSwAclSapAcgMonPrfMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchF.setStatus('current')
prvtSwAclSapAcgMonPrfMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchB.setStatus('current')
prvtSwAclSapAcgMonPrfGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenF.setStatus('current')
prvtSwAclSapAcgMonPrfGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenB.setStatus('current')
prvtSwAclSapAcgMonPrfNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenF.setStatus('current')
prvtSwAclSapAcgMonPrfNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenB.setStatus('current')
prvtSwAclSapAcgMonPrfYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowF.setStatus('current')
prvtSwAclSapAcgMonPrfYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowB.setStatus('current')
prvtSwAclSapAcgMonPrfRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedF.setStatus('current')
prvtSwAclSapAcgMonPrfRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedB.setStatus('current')
prvtSwAclSapAcgMonPrfNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedF.setStatus('current')
prvtSwAclSapAcgMonPrfNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedB.setStatus('current')
prvtSwAclSapAcgMonPrfRateMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchF.setStatus('current')
prvtSwAclSapAcgMonPrfRateMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchB.setStatus('current')
prvtSwAclSapAcgMonPrfRateGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenF.setStatus('current')
prvtSwAclSapAcgMonPrfRateGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenB.setStatus('current')
prvtSwAclSapAcgMonPrfRateNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenF.setStatus('current')
prvtSwAclSapAcgMonPrfRateNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenB.setStatus('current')
prvtSwAclSapAcgMonPrfRateYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowF.setStatus('current')
prvtSwAclSapAcgMonPrfRateYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowB.setStatus('current')
prvtSwAclSapAcgMonPrfRateRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedF.setStatus('current')
prvtSwAclSapAcgMonPrfRateRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedB.setStatus('current')
prvtSwAclSapAcgMonPrfRateNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedF.setStatus('current')
prvtSwAclSapAcgMonPrfRateNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedB.setStatus('current')
prvtSwAclSapAcgRestrictEgForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingTable.setStatus('current')
prvtSwAclSapAcgRestrictEgForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRestrictEgForwIfIndex"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingEntry.setStatus('current')
prvtSwAclSapAcgRestrictEgForwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwIfIndex.setStatus('current')
prvtSwAclSapAcgRestrictEgForwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwRowStatus.setStatus('current')
prvtSwAclIfAcgApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 1)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgApplyFailed.setStatus('current')
prvtSwAclIfAcgRLimitApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 2)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRLimitRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitApplyFailed.setStatus('current')
prvtSwAclIfAcgRedirectApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 3)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRedirectRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectApplyFailed.setStatus('current')
prvtSwAclIfAcgFcApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 4)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgFcRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgFcApplyFailed.setStatus('current')
prvtSwAclIfAcgMonPrfApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 5)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgMonPrfRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfApplyFailed.setStatus('current')
prvtSwAclSapAcgApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 6)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgApplyFailed.setStatus('current')
prvtSwAclSapAcgRLimitApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 7)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRLimitRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitApplyFailed.setStatus('current')
prvtSwAclSapAcgRedirectApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 8)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRedirectRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectApplyFailed.setStatus('current')
prvtSwAclSapAcgFcApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 9)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgFcRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgFcApplyFailed.setStatus('current')
prvtSwAclSapAcgMonPrfApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 10)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgMonPrfRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfApplyFailed.setStatus('current')
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", prvtSwAclIfAcgRLimitTable=prvtSwAclIfAcgRLimitTable, prvtSwAclIfAcgMonPrfNotGreenB=prvtSwAclIfAcgMonPrfNotGreenB, prvtSwAclSapAcg=prvtSwAclSapAcg, prvtSwAclSapAcgMonPrfGreenB=prvtSwAclSapAcgMonPrfGreenB, prvtSwAclSapAcgMonPrfRateGreenB=prvtSwAclSapAcgMonPrfRateGreenB, PrvtSwAclRuleIdType=PrvtSwAclRuleIdType, prvtSwAclMonPrfStatsTable=prvtSwAclMonPrfStatsTable, prvtSwAclMacRuleMacDstMask=prvtSwAclMacRuleMacDstMask, prvtSwAclMacRuleMacSrc=prvtSwAclMacRuleMacSrc, prvtSwAclSapAcgFcRowStatus=prvtSwAclSapAcgFcRowStatus, prvtSwAclExtRuleTcpDstPort=prvtSwAclExtRuleTcpDstPort, PrvtSwAclRateType=PrvtSwAclRateType, prvtSwAclIfAcgMonPrfGreenF=prvtSwAclIfAcgMonPrfGreenF, prvtSwAclSapAcgMonPrfYellowF=prvtSwAclSapAcgMonPrfYellowF, prvtSwAclMacRulePrecedence=prvtSwAclMacRulePrecedence, prvtSwAclExtRuleUdpDstPort=prvtSwAclExtRuleUdpDstPort, prvtSwAclExtRuleDscp=prvtSwAclExtRuleDscp, PrvtSwAclVlanIdTypeOrNone=PrvtSwAclVlanIdTypeOrNone, prvtSwAclSapAcgMonPrfRateNotRedF=prvtSwAclSapAcgMonPrfRateNotRedF, prvtSwAclIfAcgType=prvtSwAclIfAcgType, prvtSwAclIfAcgRestrictEgForwardingTable=prvtSwAclIfAcgRestrictEgForwardingTable, prvtSwAclSapAcgRedirectTable=prvtSwAclSapAcgRedirectTable, prvtSwAclIfAcgColorGreenVpt=prvtSwAclIfAcgColorGreenVpt, prvtSwAclIfAcgMonPrfRateYellowF=prvtSwAclIfAcgMonPrfRateYellowF, prvtSwAclObjects=prvtSwAclObjects, prvtSwAclEthRuleEthType=prvtSwAclEthRuleEthType, prvtSwAclEthRuleVlanMask=prvtSwAclEthRuleVlanMask, prvtSwAclIfAcgRedirectIfIndex=prvtSwAclIfAcgRedirectIfIndex, prvtSwAclIfAcgMonPrfRateNotGreenB=prvtSwAclIfAcgMonPrfRateNotGreenB, prvtSwAclSapAcgRestrictEgForwardingEntry=prvtSwAclSapAcgRestrictEgForwardingEntry, prvtSwAclMacRuleInnerVlanId=prvtSwAclMacRuleInnerVlanId, prvtSwAclEthRuleUntaggedMode=prvtSwAclEthRuleUntaggedMode, prvtSwAclMonPrfStatsEntry=prvtSwAclMonPrfStatsEntry, prvtSwAclSapAcgMonPrfApplyFailed=prvtSwAclSapAcgMonPrfApplyFailed, prvtSwAclMacRowStatus=prvtSwAclMacRowStatus, prvtSwAclSaps=prvtSwAclSaps, prvtSwAclExtRuleEstablished=prvtSwAclExtRuleEstablished, prvtSwAclIfAcgColorRedFc=prvtSwAclIfAcgColorRedFc, prvtSwAclIfAcgVlanAdd=prvtSwAclIfAcgVlanAdd, prvtSwAclEthRulePrecedence=prvtSwAclEthRulePrecedence, prvtSwAclEthRuleInnerVpt=prvtSwAclEthRuleInnerVpt, prvtSwAclMacRuleAction=prvtSwAclMacRuleAction, prvtSwAclIfAcgMonPrfRateNotRedF=prvtSwAclIfAcgMonPrfRateNotRedF, prvtSwAclSapAcgMonPrfMatchF=prvtSwAclSapAcgMonPrfMatchF, prvtSwAclSapAcgMonPrfNotRedB=prvtSwAclSapAcgMonPrfNotRedB, prvtSwitchAccessListMIB=prvtSwitchAccessListMIB, prvtSwAclIfAcgMonPrfGreenB=prvtSwAclIfAcgMonPrfGreenB, prvtSwAclExtRuleUntaggedMode=prvtSwAclExtRuleUntaggedMode, prvtSwAclIfAcg=prvtSwAclIfAcg, prvtSwAclStdRuleInnerVlanMask=prvtSwAclStdRuleInnerVlanMask, prvtSwAclEthTable=prvtSwAclEthTable, PrvtSwAclDescrType=PrvtSwAclDescrType, prvtSwAclIfAcgFcRowStatus=prvtSwAclIfAcgFcRowStatus, prvtSwAclMonProfiles=prvtSwAclMonProfiles, prvtSwAclExtName=prvtSwAclExtName, prvtSwAclIfAcgInnerVpt=prvtSwAclIfAcgInnerVpt, prvtSwAclIfAcgRLimitEntry=prvtSwAclIfAcgRLimitEntry, PrvtSwAclRateLimitType=PrvtSwAclRateLimitType, prvtSwAclSapAcgEntry=prvtSwAclSapAcgEntry, prvtSwAclSapAcgMonPrfNotRedF=prvtSwAclSapAcgMonPrfNotRedF, prvtSwAclSapAcgMonPrfRateGreenF=prvtSwAclSapAcgMonPrfRateGreenF, prvtSwAclIfAcgApplyFailed=prvtSwAclIfAcgApplyFailed, prvtSwAclSapAcgFcApplyFailed=prvtSwAclSapAcgFcApplyFailed, prvtSwAclExtRuleAction=prvtSwAclExtRuleAction, prvtSwAclIfAcgFcTable=prvtSwAclIfAcgFcTable, prvtSwAclStdRuleInnerVlanId=prvtSwAclStdRuleInnerVlanId, prvtSwAclSapAcgAclName=prvtSwAclSapAcgAclName, prvtSwAclSapAcgRedirectIfIndex=prvtSwAclSapAcgRedirectIfIndex, prvtSwAclSapAcgMonPrfRateRedF=prvtSwAclSapAcgMonPrfRateRedF, prvtSwAclExtDescr=prvtSwAclExtDescr, prvtSwAclIfAcgFcEntry=prvtSwAclIfAcgFcEntry, prvtSwAclIfAcgMonPrfRateNotGreenF=prvtSwAclIfAcgMonPrfRateNotGreenF, prvtSwAclSapAcgRLimitEbs=prvtSwAclSapAcgRLimitEbs, prvtSwAclSapAcgRLimitCir=prvtSwAclSapAcgRLimitCir, prvtSwAclMacRuleTos=prvtSwAclMacRuleTos, PrvtSwAclFcTypeOrNone=PrvtSwAclFcTypeOrNone, prvtSwAclStdTable=prvtSwAclStdTable, prvtSwAclIfAcgMonPrfRedB=prvtSwAclIfAcgMonPrfRedB, prvtSwAclMacRuleVlanId=prvtSwAclMacRuleVlanId, prvtSwAclMacRuleDscp=prvtSwAclMacRuleDscp, prvtSwAclIfAcgVpt=prvtSwAclIfAcgVpt, prvtSwAclIfAcgRLimitPir=prvtSwAclIfAcgRLimitPir, prvtSwAclIfAcgMonPrfNotRedF=prvtSwAclIfAcgMonPrfNotRedF, prvtSwAclMacRuleInnerVlanMask=prvtSwAclMacRuleInnerVlanMask, prvtSwAclStdRuleAction=prvtSwAclStdRuleAction, prvtSwAclIfAcgColorRedVpt=prvtSwAclIfAcgColorRedVpt, prvtSwAclStdRuleTable=prvtSwAclStdRuleTable, prvtSwAclIfAcgMonPrfYellowF=prvtSwAclIfAcgMonPrfYellowF, prvtSwAclIfAcgMonPrfRateRedB=prvtSwAclIfAcgMonPrfRateRedB, PrvtSwAclTagType=PrvtSwAclTagType, prvtSwAclMonPrfStatsType=prvtSwAclMonPrfStatsType, prvtSwAclSapAcgMonPrfYellowB=prvtSwAclSapAcgMonPrfYellowB, PrvtSwAclNameType=PrvtSwAclNameType, prvtSwAclExtRulePrecedence=prvtSwAclExtRulePrecedence, PrvtSwAclTosTypeOrNone=PrvtSwAclTosTypeOrNone, prvtSwAclStdRuleRowStatus=prvtSwAclStdRuleRowStatus, prvtSwAclIfAcgMonPrfMatchF=prvtSwAclIfAcgMonPrfMatchF, prvtSwAclSapAcgFcColor=prvtSwAclSapAcgFcColor, prvtSwAclStdRuleDscp=prvtSwAclStdRuleDscp, prvtSwAclStdRuleId=prvtSwAclStdRuleId, prvtSwAclExtRuleIpSrcPrefix=prvtSwAclExtRuleIpSrcPrefix, prvtSwAclIfAcgMonPrfRateRedF=prvtSwAclIfAcgMonPrfRateRedF, prvtSwAclIfAcgRestrictEgForwardingEntry=prvtSwAclIfAcgRestrictEgForwardingEntry, prvtSwAclSapAcgRedirectApplyFailed=prvtSwAclSapAcgRedirectApplyFailed, prvtSwAclMacRuleMacSrcMask=prvtSwAclMacRuleMacSrcMask, PrvtSwAclGroupType=PrvtSwAclGroupType, prvtSwAclIfAcgAclName=prvtSwAclIfAcgAclName, prvtSwAclIfAcgRLimitCir=prvtSwAclIfAcgRLimitCir, prvtSwAclSapAcgRestrictEgForwIfIndex=prvtSwAclSapAcgRestrictEgForwIfIndex, prvtSwAclIfAcgFcId=prvtSwAclIfAcgFcId, prvtSwAclEthRuleInnerVlanId=prvtSwAclEthRuleInnerVlanId, prvtSwAclSapAcgColorGreenFc=prvtSwAclSapAcgColorGreenFc, prvtSwAclIfAcgSeqId=prvtSwAclIfAcgSeqId, PrvtSwAclProfileIdType=PrvtSwAclProfileIdType, prvtSwAclEthEntry=prvtSwAclEthEntry, prvtSwAclIfAcgAclType=prvtSwAclIfAcgAclType, prvtSwAclEthRowStatus=prvtSwAclEthRowStatus, PrvtSwAclEtherType=PrvtSwAclEtherType, PrvtSwAclBurstSizeType=PrvtSwAclBurstSizeType, prvtSwAclEthRuleDscp=prvtSwAclEthRuleDscp, prvtSwAclSapAcgRedirectRowStatus=prvtSwAclSapAcgRedirectRowStatus, prvtSwAclSapAcgMonPrfTable=prvtSwAclSapAcgMonPrfTable, prvtSwAclMacRuleTable=prvtSwAclMacRuleTable, prvtSwAclMacEntry=prvtSwAclMacEntry, prvtSwAclIfAcgColorRedDscp=prvtSwAclIfAcgColorRedDscp, prvtSwAclEthRuleEthTypeMask=prvtSwAclEthRuleEthTypeMask, prvtSwAclMacRuleEntry=prvtSwAclMacRuleEntry, prvtSwAclMacRuleInnerVpt=prvtSwAclMacRuleInnerVpt, prvtSwAclIfAcgRLimitColorAware=prvtSwAclIfAcgRLimitColorAware, prvtSwAclSapAcgMonPrfEntry=prvtSwAclSapAcgMonPrfEntry, prvtSwAclStdRuleIpSrcPrefix=prvtSwAclStdRuleIpSrcPrefix, prvtSwAclIfAcgMonPrfRateNotRedB=prvtSwAclIfAcgMonPrfRateNotRedB, prvtSwAclSapAcgMonPrfRowStatus=prvtSwAclSapAcgMonPrfRowStatus, prvtSwAclIfAcgMonPrfRateYellowB=prvtSwAclIfAcgMonPrfRateYellowB, PrvtSwAclExceedAction=PrvtSwAclExceedAction, prvtSwAclIfAcgRLimitEbs=prvtSwAclIfAcgRLimitEbs, PrvtSwAclIpv4PrefixType=PrvtSwAclIpv4PrefixType, prvtSwAclExtRuleVlanMask=prvtSwAclExtRuleVlanMask, PrvtSwAclIpProtocol=PrvtSwAclIpProtocol, prvtSwAclIfAcgRLimitPbs=prvtSwAclIfAcgRLimitPbs, prvtSwAclIfAcgRestrictEgForwIfIndex=prvtSwAclIfAcgRestrictEgForwIfIndex, prvtSwAclSapAcgFcEntry=prvtSwAclSapAcgFcEntry, prvtSwAclEthRuleVlanId=prvtSwAclEthRuleVlanId, prvtSwAclMonPrfId=prvtSwAclMonPrfId, prvtSwAclExtRuleInnerVpt=prvtSwAclExtRuleInnerVpt, prvtSwAclIfAcgMonPrfNotGreenF=prvtSwAclIfAcgMonPrfNotGreenF, prvtSwAclIfAcgMonPrfTable=prvtSwAclIfAcgMonPrfTable, prvtSwAclIfAcgFcColor=prvtSwAclIfAcgFcColor, prvtSwAclSapAcgMonPrfRedB=prvtSwAclSapAcgMonPrfRedB, prvtSwAclSapAcgRestrictEgForwardingTable=prvtSwAclSapAcgRestrictEgForwardingTable, prvtSwAclIfAcgMonPrfRateMatchF=prvtSwAclIfAcgMonPrfRateMatchF, prvtSwAclIfAcgColorGreenFc=prvtSwAclIfAcgColorGreenFc, prvtSwAclSapAcgRLimitPir=prvtSwAclSapAcgRLimitPir, prvtSwAclIfAcgRedirectApplyFailed=prvtSwAclIfAcgRedirectApplyFailed, prvtSwAclMacName=prvtSwAclMacName, prvtSwAclMacRuleMacDst=prvtSwAclMacRuleMacDst, prvtSwAclSapAcgResetStats=prvtSwAclSapAcgResetStats, PrvtSwAclEtherTypeMask=PrvtSwAclEtherTypeMask, prvtSwAclSapAcgRLimitTable=prvtSwAclSapAcgRLimitTable, prvtSwAclIfAcgVlan=prvtSwAclIfAcgVlan, prvtSwAclEthRuleAction=prvtSwAclEthRuleAction, prvtSwAclSapAcgMonPrfRateYellowB=prvtSwAclSapAcgMonPrfRateYellowB, PrvtSwAclFcType=PrvtSwAclFcType, prvtSwAclEthRuleRowStatus=prvtSwAclEthRuleRowStatus, prvtSwAclSapAcgRLimitExceedAct=prvtSwAclSapAcgRLimitExceedAct, prvtSwAclIfAcgRLimitApplyFailed=prvtSwAclIfAcgRLimitApplyFailed, prvtSwAclSapAcgMonPrfRedF=prvtSwAclSapAcgMonPrfRedF, prvtSwAclExtRuleVlanId=prvtSwAclExtRuleVlanId, prvtSwAclStdRuleEntry=prvtSwAclStdRuleEntry, prvtSwAclSapAcgFcTable=prvtSwAclSapAcgFcTable, prvtSwAclSapAcgRedirectEntry=prvtSwAclSapAcgRedirectEntry, prvtSwAclSapAcgMonPrfNotGreenB=prvtSwAclSapAcgMonPrfNotGreenB, prvtSwAclExtRuleUdpSrcPort=prvtSwAclExtRuleUdpSrcPort, prvtSwAclIfAcgRestrictEgForwRowStatus=prvtSwAclIfAcgRestrictEgForwRowStatus, prvtSwAclSapAcgMonPrfGreenF=prvtSwAclSapAcgMonPrfGreenF, prvtSwAclIfAcgTable=prvtSwAclIfAcgTable, prvtSwAclIfAcgColorYellowVpt=prvtSwAclIfAcgColorYellowVpt, prvtSwAclEthRuleInnerVlanMask=prvtSwAclEthRuleInnerVlanMask, PrvtSwAclVptTypeOrNone=PrvtSwAclVptTypeOrNone, prvtSwAclStdEntry=prvtSwAclStdEntry, prvtSwAclIfAcgMonPrfEntry=prvtSwAclIfAcgMonPrfEntry, prvtSwAclSapAcgRLimitCbs=prvtSwAclSapAcgRLimitCbs, prvtSwAclEthRuleVpt=prvtSwAclEthRuleVpt, prvtSwAclExtRuleTos=prvtSwAclExtRuleTos, prvtSwAclSapAcgMonPrfRateMatchF=prvtSwAclSapAcgMonPrfRateMatchF, prvtSwAclExtRuleId=prvtSwAclExtRuleId, prvtSwAclMacRuleDstAddrType=prvtSwAclMacRuleDstAddrType, prvtSwAclExtRuleIcmpType=prvtSwAclExtRuleIcmpType, prvtSwAclExtRuleIcmpCode=prvtSwAclExtRuleIcmpCode, prvtSwAclIfAcgFcApplyFailed=prvtSwAclIfAcgFcApplyFailed, prvtSwAclIfAcgDscp=prvtSwAclIfAcgDscp, prvtSwAclStdName=prvtSwAclStdName, prvtSwAclMacRuleId=prvtSwAclMacRuleId, prvtSwAclExtRuleRowStatus=prvtSwAclExtRuleRowStatus, prvtSwAclIfAcgMonPrfRateGreenF=prvtSwAclIfAcgMonPrfRateGreenF, prvtSwAclIfAcgResetStats=prvtSwAclIfAcgResetStats, prvtSwAclSapAcgTable=prvtSwAclSapAcgTable, prvtSwAclSapAcgMonPrfRateRedB=prvtSwAclSapAcgMonPrfRateRedB, prvtSwAclExtRuleTable=prvtSwAclExtRuleTable, prvtSwAclGroups=prvtSwAclGroups, prvtSwAclMacRuleUntaggedMode=prvtSwAclMacRuleUntaggedMode, prvtSwAclIfAcgMonPrfYellowB=prvtSwAclIfAcgMonPrfYellowB, PrvtSwAclStatsType=PrvtSwAclStatsType, prvtSwAclStdRuleVlanMask=prvtSwAclStdRuleVlanMask, prvtSwAclSapAcgApplyFailed=prvtSwAclSapAcgApplyFailed, prvtSwAclIfAcgMonPrfRateGreenB=prvtSwAclIfAcgMonPrfRateGreenB, prvtSwAclEthName=prvtSwAclEthName, prvtSwAclEthRuleId=prvtSwAclEthRuleId, PrvtSwAclPrecedenceTypeOrNone=PrvtSwAclPrecedenceTypeOrNone, prvtSwAclMacTable=prvtSwAclMacTable, PrvtSwAclAction=PrvtSwAclAction, prvtSwAclSapAcgRLimitColorAware=prvtSwAclSapAcgRLimitColorAware, PrvtSwAclAcgType=PrvtSwAclAcgType, prvtSwAclExtRuleInnerVlanId=prvtSwAclExtRuleInnerVlanId, prvtSwAclIfAcgMonPrfRedF=prvtSwAclIfAcgMonPrfRedF, prvtSwAclMacRuleRowStatus=prvtSwAclMacRuleRowStatus, prvtSwAclIfAcgIndex=prvtSwAclIfAcgIndex, prvtSwAclSapAcgRLimitRowStatus=prvtSwAclSapAcgRLimitRowStatus, prvtSwAclSapAcgMonPrfRateNotGreenB=prvtSwAclSapAcgMonPrfRateNotGreenB, PrvtSwAclVlanMaskType=PrvtSwAclVlanMaskType, prvtSwAclIfAcgMonPrfNotRedB=prvtSwAclIfAcgMonPrfNotRedB, prvtSwAclSapAcgAclType=prvtSwAclSapAcgAclType, prvtSwAclIfAcgMonPrfRowStatus=prvtSwAclIfAcgMonPrfRowStatus, prvtSwAclSapAcgMonPrfNotGreenF=prvtSwAclSapAcgMonPrfNotGreenF, prvtSwAclSapAcgMonPrfRateYellowF=prvtSwAclSapAcgMonPrfRateYellowF, prvtSwAclSapAcgRestrictEgForwRowStatus=prvtSwAclSapAcgRestrictEgForwRowStatus, prvtSwAclMacRuleVlanMask=prvtSwAclMacRuleVlanMask, prvtSwAclIfAcgColorYellowDscp=prvtSwAclIfAcgColorYellowDscp, prvtSwAclIfAcgMonPrfApplyFailed=prvtSwAclIfAcgMonPrfApplyFailed, prvtSwAclSapAcgRLimitPbs=prvtSwAclSapAcgRLimitPbs, PrvtSwAclDscpTypeOrNone=PrvtSwAclDscpTypeOrNone, prvtSwAclStdRuleVpt=prvtSwAclStdRuleVpt, prvtSwAclIfAcgRedirectEntry=prvtSwAclIfAcgRedirectEntry, PYSNMP_MODULE_ID=prvtSwitchAccessListMIB, prvtSwAclNotifications=prvtSwAclNotifications, prvtSwAclIfAcgColorGreenDscp=prvtSwAclIfAcgColorGreenDscp, prvtSwAclEthRuleTable=prvtSwAclEthRuleTable, prvtSwAclEthRuleEntry=prvtSwAclEthRuleEntry, prvtSwAclEthRuleTos=prvtSwAclEthRuleTos, prvtSwAclIfAcgColorYellowFc=prvtSwAclIfAcgColorYellowFc, prvtSwAclIfAcgRLimitExceedAct=prvtSwAclIfAcgRLimitExceedAct, prvtSwAclExtEntry=prvtSwAclExtEntry, prvtSwAclMonPrfIdRowStatus=prvtSwAclMonPrfIdRowStatus, prvtSwAclIfAcgEntry=prvtSwAclIfAcgEntry, prvtSwAclSapAcgSeqId=prvtSwAclSapAcgSeqId, prvtSwAclSapAcgRowStatus=prvtSwAclSapAcgRowStatus, prvtSwAclExtTable=prvtSwAclExtTable, prvtSwAclExtRuleIpDstPrefix=prvtSwAclExtRuleIpDstPrefix, prvtSwAclSapAcgRLimitApplyFailed=prvtSwAclSapAcgRLimitApplyFailed, prvtSwAclSapAcgRLimitEntry=prvtSwAclSapAcgRLimitEntry, prvtSwAclExtRowStatus=prvtSwAclExtRowStatus, prvtSwAclSapAcgMonPrfRateMatchB=prvtSwAclSapAcgMonPrfRateMatchB, prvtSwAclExtRuleInnerVlanMask=prvtSwAclExtRuleInnerVlanMask, prvtSwAclMonPrfEntry=prvtSwAclMonPrfEntry)
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", prvtSwAclExtRuleIpProtocol=prvtSwAclExtRuleIpProtocol, prvtSwAclSapAcgColorRedFc=prvtSwAclSapAcgColorRedFc, prvtSwAclSapAcgMonPrfRateNotGreenF=prvtSwAclSapAcgMonPrfRateNotGreenF, prvtSwAclSapAcgType=prvtSwAclSapAcgType, prvtSwAclSapAcgFcId=prvtSwAclSapAcgFcId, prvtSwAclMonPrfStatsRowStatus=prvtSwAclMonPrfStatsRowStatus, prvtSwAclMacRuleVpt=prvtSwAclMacRuleVpt, prvtSwAclIfAcgRLimitRowStatus=prvtSwAclIfAcgRLimitRowStatus, PrvtSwAclColorType=PrvtSwAclColorType, prvtSwAclIfAcgMonPrfRateMatchB=prvtSwAclIfAcgMonPrfRateMatchB, prvtSwAclEthDescr=prvtSwAclEthDescr, prvtSwAclIfAcgRedirectRowStatus=prvtSwAclIfAcgRedirectRowStatus, prvtSwAclStdRuleUntaggedMode=prvtSwAclStdRuleUntaggedMode, prvtSwAclIfAcgRedirectTable=prvtSwAclIfAcgRedirectTable, prvtSwAclIfAcgMonPrfMatchB=prvtSwAclIfAcgMonPrfMatchB, PrvtSwAclMatchTrafficType=PrvtSwAclMatchTrafficType, prvtSwAclStdRowStatus=prvtSwAclStdRowStatus, prvtSwAclStdRuleVlanId=prvtSwAclStdRuleVlanId, prvtSwAclIfAcgRowStatus=prvtSwAclIfAcgRowStatus, prvtSwAclInterfaces=prvtSwAclInterfaces, prvtSwAclMonPrfTable=prvtSwAclMonPrfTable, prvtSwAclExtRuleEntry=prvtSwAclExtRuleEntry, PrvtSwAclPortIdTypeOrNone=PrvtSwAclPortIdTypeOrNone, prvtSwAclSapAcgMonPrfRateNotRedB=prvtSwAclSapAcgMonPrfRateNotRedB, prvtSwAclExtRuleTcpSrcPort=prvtSwAclExtRuleTcpSrcPort, prvtSwAclMacDescr=prvtSwAclMacDescr, prvtSwAclSapAcgColorYellowFc=prvtSwAclSapAcgColorYellowFc, prvtSwAclIfAcgRLimitCbs=prvtSwAclIfAcgRLimitCbs, prvtSwAclExtRuleVpt=prvtSwAclExtRuleVpt, prvtSwAclStdDescr=prvtSwAclStdDescr, prvtSwAclIfAcgRLimitType=prvtSwAclIfAcgRLimitType, prvtSwAclSapAcgMonPrfMatchB=prvtSwAclSapAcgMonPrfMatchB, prvtSwAclStdRuleInnerVpt=prvtSwAclStdRuleInnerVpt, prvtSwAclSapAcgRLimitType=prvtSwAclSapAcgRLimitType)
