#
# PySNMP MIB module PRVT-SWITCH-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SWITCH-ACCESS-LIST-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 17:17:59 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
sapEncapValue, svcId, sdpId, sapPortId = mibBuilder.importSymbols("PRVT-SERV-MIB", "sapEncapValue", "svcId", "sdpId", "sapPortId")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
dot1qVlanIndex, dot1qVlanStatus = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qVlanStatus")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, ModuleIdentity, Counter64, Gauge32, IpAddress, Unsigned32, Integer32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "ModuleIdentity", "Counter64", "Gauge32", "IpAddress", "Unsigned32", "Integer32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "iso")
MacAddress, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
prvtSwitchAccessListMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 1))
prvtSwitchAccessListMib.setRevisions(('2011-02-07 00:00', '2010-11-16 00:00', '2010-11-03 00:00', '2009-04-17 00:00', '2008-11-20 00:00', '2008-02-14 00:00', '2008-01-01 00:00', '2007-12-05 00:00', '2006-03-22 00:00', '2005-10-03 00:00', '2005-09-30 00:00', '2005-02-28 00:00', '2005-02-24 00:00', '2005-02-16 00:00', '2004-12-15 00:00', '2003-10-15 00:00', '2003-05-08 00:00', '2002-11-12 00:00', '2001-11-05 00:00', '2001-09-30 00:00', '2001-08-27 00:00', '2001-07-31 00:00', '2001-05-14 00:00', '2001-02-20 00:00', '2001-02-15 00:00', '2001-01-28 00:00', '2000-11-13 09:59',))
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setLastUpdated('201011160000Z')
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setOrganization('BATM Advanced Communication')
class AccessListAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 100))
    namedValues = NamedValues(("permit", 0), ("deny", 1), ("shaper", 2), ("remark", 3), ("undefined", 100))

class IpProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PortDef(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))
    namedValues = NamedValues(("equal", 1), ("range", 2), ("greater-than", 3), ("less-than", 4), ("undefined", 0))

class Rate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(13, 1000000), )
class ExceedAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("drop", 0), ("markDiscardable", 1), ("undefined", 2), ("green", 3), ("yellow", 4), ("red", 5))

class VlanTag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("untagged", 0), ("tagged", 1), ("undefined", 2))

class ISPType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("connectivity", 0), ("normal", 1), ("routed", 2))

class Shaper(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class ConformAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("transmit", 0))

class AssigenValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class AccessListModifyTos(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListEstablished(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListDiscard(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("normal", 0), ("discardable", 1), ("green", 2), ("yellow", 3), ("red", 4), ("undefined", 5))

class AccessListRemarkString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '40a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 40)

class TxqDropLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("green", 1), ("yellow", 2))

class MatchTraffic(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("untagged", 1), ("unknown-unicast", 2), ("multicast", 3), ("broadcast", 4), ("known-unicast", 5))

class AccessListStatistics(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ingress", 0), ("egress", 1))

prvtSwitchAccessListNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0))
accessLists = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1))
isp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2))
prvtSwitchAccessListConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3))
accessListTemplate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("vlan-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListTemplate.setStatus('current')
accessGroupsDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2))
accessListsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3))
accessListsVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4))
accessListsServices = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5))
accessListsInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6))
accessListsServicesStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7))
accessListControlTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: accessListControlTable.setStatus('current')
accessListControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"))
if mibBuilder.loadTexts: accessListControlEntry.setStatus('current')
accessListControlListGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: accessListControlListGroup.setStatus('current')
accessListControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListControlRowStatus.setStatus('current')
standardAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: standardAccessListTable.setStatus('current')
standardAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListIndex"))
if mibBuilder.loadTexts: standardAccessListEntry.setStatus('current')
standardAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: standardAccessListIndex.setStatus('current')
standardAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListAction.setStatus('current')
standardAccessListIpSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListIpSrc.setStatus('current')
standardAccessListIpMASKsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListIpMASKsrc.setStatus('current')
standardAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 5), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListRemark.setStatus('current')
standardAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListLog.setStatus('current')
standardAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVpt.setStatus('current')
standardAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardAccessListRowStatus.setStatus('current')
standardAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVlanId.setStatus('current')
standardAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVlanMask.setStatus('current')
standardAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVlanId.setStatus('current')
standardAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVlanMask.setStatus('current')
standardAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVpt.setStatus('current')
standardAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListUntaggedMode.setStatus('current')
standardAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListDropLevel.setStatus('current')
standardAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListDscp.setStatus('current')
extendedAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: extendedAccessListTable.setStatus('current')
extendedAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListIndex"))
if mibBuilder.loadTexts: extendedAccessListEntry.setStatus('current')
extendedAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extendedAccessListIndex.setStatus('current')
extendedAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListAction.setStatus('current')
extendedAccessListIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 3), IpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpProtocol.setStatus('current')
extendedAccessListIpSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpSrc.setStatus('current')
extendedAccessListIpMASKsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpMASKsrc.setStatus('current')
extendedAccessListPortDefSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 6), PortDef()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortDefSrc.setStatus('current')
extendedAccessListPortNumSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortNumSrc.setStatus('current')
extendedAccessListPortRangeSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortRangeSrc.setStatus('current')
extendedAccessListIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpDest.setStatus('current')
extendedAccessListIpMASKdst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpMASKdst.setStatus('current')
extendedAccessListPortDefDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 11), PortDef()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortDefDst.setStatus('current')
extendedAccessListPortNumDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortNumDst.setStatus('current')
extendedAccessListPortRangeDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortRangeDst.setStatus('current')
extendedAccessListTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListTos.setStatus('current')
extendedAccessListPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPrec.setStatus('current')
extendedAccessListModifyTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 16), AccessListModifyTos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListModifyTos.setStatus('current')
extendedAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 17), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListRemark.setStatus('current')
extendedAccessListIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIcmpType.setStatus('current')
extendedAccessListIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIcmpCode.setStatus('current')
extendedAccessListIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIgmpType.setStatus('current')
extendedAccessListEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 21), AccessListEstablished()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListEstablished.setStatus('current')
extendedAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListLog.setStatus('current')
extendedAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVpt.setStatus('current')
extendedAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendedAccessListRowStatus.setStatus('current')
extendedAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVlanId.setStatus('current')
extendedAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVlanMask.setStatus('current')
extendedAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVlanId.setStatus('current')
extendedAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 28), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVlanMask.setStatus('current')
extendedAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVpt.setStatus('current')
extendedAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListUntaggedMode.setStatus('current')
extendedAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListDropLevel.setStatus('current')
extendedAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListDscp.setStatus('current')
macAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: macAccessListTable.setStatus('current')
macAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListIndex"))
if mibBuilder.loadTexts: macAccessListEntry.setStatus('current')
macAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: macAccessListIndex.setStatus('current')
macAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListAction.setStatus('current')
macAccessListMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacSrc.setStatus('current')
macAccessListMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacSrcMask.setStatus('current')
macAccessListMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacDst.setStatus('current')
macAccessListMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacDstMask.setStatus('current')
macAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 7), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListRemark.setStatus('current')
macAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListLog.setStatus('current')
macAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAccessListRowStatus.setStatus('current')
macAccessListTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListTos.setStatus('current')
macAccessListPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListPrecedence.setStatus('current')
macAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVpt.setStatus('current')
macAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVlanId.setStatus('current')
macAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVlanMask.setStatus('current')
macAccessListInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVlanId.setStatus('current')
macAccessListInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVlanMask.setStatus('current')
macAccessListInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVpt.setStatus('current')
macAccessListEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 18), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListEtherType.setStatus('current')
macAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListDscp.setStatus('current')
macAccessListMatchTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 20), MatchTraffic()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMatchTraffic.setStatus('current')
macAccessListMatchTrafficPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 21), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMatchTrafficPort.setStatus('current')
macAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListUntaggedMode.setStatus('current')
macAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListDropLevel.setStatus('current')
etherTypeAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5), )
if mibBuilder.loadTexts: etherTypeAccessListTable.setStatus('current')
etherTypeAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListIndex"))
if mibBuilder.loadTexts: etherTypeAccessListEntry.setStatus('current')
etherTypeAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: etherTypeAccessListIndex.setStatus('current')
etherTypeAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListAction.setStatus('current')
etherTypeAccessListEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListEtherType.setStatus('current')
etherTypeAccessListEtherTypeCodeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListEtherTypeCodeMask.setStatus('current')
etherTypeAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 5), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListRemark.setStatus('current')
etherTypeAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListLog.setStatus('current')
etherTypeAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherTypeAccessListRowStatus.setStatus('current')
etherTypeAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListVlanId.setStatus('current')
etherTypeAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListVlanMask.setStatus('current')
etherTypeAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanId.setStatus('current')
etherTypeAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanMask.setStatus('current')
etherTypeAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVpt.setStatus('current')
accessListInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: accessListInterfaceTable.setStatus('current')
accessListInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceGroupIndex"))
if mibBuilder.loadTexts: accessListInterfaceEntry.setStatus('current')
accessListInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceTableIndex.setStatus('current')
accessListInterfaceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceGroupIndex.setStatus('current')
accessListInterfaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceDscp.setStatus('current')
accessListInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRowStatus.setStatus('current')
accessListInterfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePriority.setStatus('current')
accessListInterfaceDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 6), AccessListDiscard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceDiscard.setStatus('current')
accessListInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRateLimit.setStatus('current')
accessListInterfaceExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 8), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceExceedAction.setStatus('current')
accessListInterfaceShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 9), Shaper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceShaper.setStatus('current')
accessListInterfaceBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 10), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceBurst.setStatus('current')
accessListInterfaceRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectIfIndex.setStatus('current')
accessListInterfaceRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectVlanID.setStatus('current')
accessListInterfaceRedirectNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectNexthop.setStatus('current')
accessListInterfacePeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 14), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePeakRate.setStatus('current')
accessListInterfacePeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 15), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePeakBurst.setStatus('current')
accessListInterfaceColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceColorAware.setStatus('current')
accessListInterfacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dcsp", 1), ("priority", 2), ("priority-dp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePolicy.setStatus('current')
accessListInterfaceTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceTrafficClass.setStatus('current')
accessListInterfaceSpanRootTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceSpanRootTrack.setStatus('current')
accessListInterfaceUntagFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceUntagFilter.setStatus('current')
accessListInterfaceTxq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceTxq.setStatus('current')
accessListInterfaceTxqDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 22), TxqDropLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceTxqDropLevel.setStatus('current')
accessListInterfaceApplyMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceApplyMirror.setStatus('current')
accessListInterfaceStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 24), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceStatistics.setStatus('current')
accessListInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 25), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceDirection.setStatus('current')
accessListInterfaceRateStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 26), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceRateStatistics.setStatus('current')
accessListVLANTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: accessListVLANTable.setStatus('current')
accessListVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListVLANTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListVLANGroupIndex"))
if mibBuilder.loadTexts: accessListVLANEntry.setStatus('current')
accessListVLANTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListVLANTableIndex.setStatus('current')
accessListVLANGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListVLANGroupIndex.setStatus('current')
accessListVLANDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANDscp.setStatus('current')
accessListVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRowStatus.setStatus('current')
accessListVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPriority.setStatus('current')
accessListVLANDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 6), AccessListDiscard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANDiscard.setStatus('current')
accessListVLANRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRateLimit.setStatus('current')
accessListVLANExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 8), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANExceedAction.setStatus('current')
accessListVLANBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 9), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANBurst.setStatus('current')
accessListVLANRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectIfIndex.setStatus('current')
accessListVLANRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectVlanID.setStatus('current')
accessListVLANRedirectNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectNexthop.setStatus('current')
accessListVLANPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 13), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPeakRate.setStatus('current')
accessListVLANPeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 14), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPeakBurst.setStatus('current')
accessListVLANColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANColorAware.setStatus('current')
accessListVLANPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dcsp", 1), ("priority", 2), ("priority-dp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPolicy.setStatus('current')
accessListVLANTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANTrafficClass.setStatus('current')
accessListVLANSpanRootTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANSpanRootTrack.setStatus('current')
accessListVLANUntagFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANUntagFilter.setStatus('current')
accessListVLANApplyMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANApplyMirror.setStatus('current')
accessListVLANStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 21), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANStatistics.setStatus('current')
accessListVLANDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 22), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANDirection.setStatus('current')
accessListSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1), )
if mibBuilder.loadTexts: accessListSapTable.setStatus('current')
accessListSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapGroupIndex"))
if mibBuilder.loadTexts: accessListSapEntry.setStatus('current')
accessListSapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapTableIndex.setStatus('current')
accessListSapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapGroupIndex.setStatus('current')
accessListSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapRowStatus.setStatus('current')
accessListSapRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 4), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapRateLimit.setStatus('current')
accessListSapExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 5), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapExceedAction.setStatus('current')
accessListSapBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 6), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapBurst.setStatus('current')
accessListSapPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapPeakRate.setStatus('current')
accessListSapPeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 8), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapPeakBurst.setStatus('current')
accessListSapColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapColorAware.setStatus('current')
accessListSapTxq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapTxq.setStatus('current')
accessListSapTxqDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 11), TxqDropLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapTxqDropLevel.setStatus('current')
accessListSapStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 12), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapStatistics.setStatus('current')
accessListSapRateStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 13), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapRateStatistics.setStatus('current')
accessListSapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 14), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapDirection.setStatus('current')
accessListInterfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1), )
if mibBuilder.loadTexts: accessListInterfaceStatisticsTable.setStatus('current')
accessListInterfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceStatisticsGroupIndex"))
if mibBuilder.loadTexts: accessListInterfaceStatisticsEntry.setStatus('current')
accessListInterfaceStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceStatisticsGroupIndex.setStatus('current')
accessListInterfaceGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceGreenBytes.setStatus('current')
accessListInterfaceYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceYellowBytes.setStatus('current')
accessListInterfaceRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceRedBytes.setStatus('current')
accessListInterfaceClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceClassifiedPackets.setStatus('current')
accessListSapStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1), )
if mibBuilder.loadTexts: accessListSapStatisticsTable.setStatus('current')
accessListSapStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapStatisticsGroupIndex"))
if mibBuilder.loadTexts: accessListSapStatisticsEntry.setStatus('current')
accessListSapStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapStatisticsGroupIndex.setStatus('current')
accessListSapGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapGreenBytes.setStatus('current')
accessListSapYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapYellowBytes.setStatus('current')
accessListSapRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapRedBytes.setStatus('current')
accessListSapClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapClassifiedPackets.setStatus('current')
ispUpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: ispUpLinkTable.setStatus('current')
ispUpLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "ispUpLinkIndex"))
if mibBuilder.loadTexts: ispUpLinkEntry.setStatus('current')
ispUpLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: ispUpLinkIndex.setStatus('current')
ispUpLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkIfIndex.setStatus('current')
ispUpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 3), ISPType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkType.setStatus('current')
ispUpLinkAccessGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUpLinkAccessGroup.setStatus('current')
ispUpLinkVLANid = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkVLANid.setStatus('current')
ispUpLinkVLANtag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 6), VlanTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkVLANtag.setStatus('current')
ispUpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUpLinkRowStatus.setStatus('current')
ispUserInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2), )
if mibBuilder.loadTexts: ispUserInterfaceTable.setStatus('current')
ispUserInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ispUserInterfaceEntry.setStatus('current')
ispUserInterfaceAssigen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 1), AssigenValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceAssigen.setStatus('current')
ispUserInterfaceIspUplinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUserInterfaceIspUplinkIndex.setStatus('current')
ispUserInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 3), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceRateLimit.setStatus('current')
ispUserInterfaceConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 4), ConformAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceConformAction.setStatus('current')
ispUserInterfaceExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 5), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceExceedAction.setStatus('current')
ispUserInterfaceShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 6), Shaper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceShaper.setStatus('current')
standardAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListAction"))
if mibBuilder.loadTexts: standardAccessListRuleMatched.setStatus('current')
extendedAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListAction"))
if mibBuilder.loadTexts: extendedAccessListRuleMatched.setStatus('current')
macAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListAction"))
if mibBuilder.loadTexts: macAccessListRuleMatched.setStatus('current')
etherTypeAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListAction"))
if mibBuilder.loadTexts: etherTypeAccessListRuleMatched.setStatus('current')
prvtSwitchAccessListMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3, 1))
prvtSwitchAccessListNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3, 1, 1)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListRuleMatched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSwitchAccessListNotificationGroup = prvtSwitchAccessListNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", extendedAccessListIpMASKdst=extendedAccessListIpMASKdst, etherTypeAccessListEtherType=etherTypeAccessListEtherType, ispUserInterfaceRateLimit=ispUserInterfaceRateLimit, ispUpLinkRowStatus=ispUpLinkRowStatus, extendedAccessListPortDefSrc=extendedAccessListPortDefSrc, accessListSapRateLimit=accessListSapRateLimit, ispUserInterfaceConformAction=ispUserInterfaceConformAction, AccessListModifyTos=AccessListModifyTos, extendedAccessListTable=extendedAccessListTable, extendedAccessListModifyTos=extendedAccessListModifyTos, accessListVLANRedirectVlanID=accessListVLANRedirectVlanID, ispUserInterfaceEntry=ispUserInterfaceEntry, accessListsInterfaces=accessListsInterfaces, AccessListAction=AccessListAction, accessListInterfaceGreenBytes=accessListInterfaceGreenBytes, accessListInterfaceRateStatistics=accessListInterfaceRateStatistics, accessListInterfaceRowStatus=accessListInterfaceRowStatus, extendedAccessListVlanMask=extendedAccessListVlanMask, prvtSwitchAccessListConformance=prvtSwitchAccessListConformance, extendedAccessListProviderVlanMask=extendedAccessListProviderVlanMask, macAccessListAction=macAccessListAction, macAccessListInnerVlanMask=macAccessListInnerVlanMask, accessListControlTable=accessListControlTable, accessListVLANApplyMirror=accessListVLANApplyMirror, accessListVLANDscp=accessListVLANDscp, accessListSapGreenBytes=accessListSapGreenBytes, macAccessListUntaggedMode=macAccessListUntaggedMode, macAccessListVlanMask=macAccessListVlanMask, extendedAccessListPortRangeDst=extendedAccessListPortRangeDst, extendedAccessListIpDest=extendedAccessListIpDest, macAccessListRemark=macAccessListRemark, accessListInterfaceTableIndex=accessListInterfaceTableIndex, accessListVLANEntry=accessListVLANEntry, accessListVLANRedirectNexthop=accessListVLANRedirectNexthop, macAccessListDropLevel=macAccessListDropLevel, accessListInterfaceApplyMirror=accessListInterfaceApplyMirror, macAccessListEntry=macAccessListEntry, accessListVLANTableIndex=accessListVLANTableIndex, ispUpLinkAccessGroup=ispUpLinkAccessGroup, accessListVLANPriority=accessListVLANPriority, accessListInterfaceRedirectNexthop=accessListInterfaceRedirectNexthop, ispUpLinkVLANid=ispUpLinkVLANid, accessListVLANStatistics=accessListVLANStatistics, accessListInterfaceUntagFilter=accessListInterfaceUntagFilter, accessListVLANDiscard=accessListVLANDiscard, accessListInterfaceClassifiedPackets=accessListInterfaceClassifiedPackets, etherTypeAccessListProviderVpt=etherTypeAccessListProviderVpt, accessListInterfaceStatistics=accessListInterfaceStatistics, accessListInterfaceSpanRootTrack=accessListInterfaceSpanRootTrack, accessListInterfaceRedirectVlanID=accessListInterfaceRedirectVlanID, standardAccessListIpMASKsrc=standardAccessListIpMASKsrc, macAccessListRowStatus=macAccessListRowStatus, macAccessListDscp=macAccessListDscp, extendedAccessListIcmpType=extendedAccessListIcmpType, etherTypeAccessListVlanMask=etherTypeAccessListVlanMask, accessListSapEntry=accessListSapEntry, accessListsInterfaceStatistics=accessListsInterfaceStatistics, accessListTemplate=accessListTemplate, accessListControlEntry=accessListControlEntry, prvtSwitchAccessListNotificationGroup=prvtSwitchAccessListNotificationGroup, extendedAccessListRemark=extendedAccessListRemark, extendedAccessListPrec=extendedAccessListPrec, standardAccessListEntry=standardAccessListEntry, macAccessListMatchTraffic=macAccessListMatchTraffic, accessListInterfacePolicy=accessListInterfacePolicy, standardAccessListRowStatus=standardAccessListRowStatus, etherTypeAccessListEtherTypeCodeMask=etherTypeAccessListEtherTypeCodeMask, MatchTraffic=MatchTraffic, accessListSapTxqDropLevel=accessListSapTxqDropLevel, standardAccessListLog=standardAccessListLog, accessListSapStatisticsTable=accessListSapStatisticsTable, macAccessListMacSrc=macAccessListMacSrc, IpProtocol=IpProtocol, accessListInterfaceDscp=accessListInterfaceDscp, standardAccessListRuleMatched=standardAccessListRuleMatched, accessListInterfaceRedirectIfIndex=accessListInterfaceRedirectIfIndex, accessListInterfaceBurst=accessListInterfaceBurst, accessListInterfaceDirection=accessListInterfaceDirection, accessListVLANExceedAction=accessListVLANExceedAction, macAccessListTable=macAccessListTable, ISPType=ISPType, accessListVLANPeakRate=accessListVLANPeakRate, ispUpLinkVLANtag=ispUpLinkVLANtag, isp=isp, ispUpLinkEntry=ispUpLinkEntry, standardAccessListDropLevel=standardAccessListDropLevel, accessListInterfaceStatisticsTable=accessListInterfaceStatisticsTable, ispUserInterfaceExceedAction=ispUserInterfaceExceedAction, ispUserInterfaceIspUplinkIndex=ispUserInterfaceIspUplinkIndex, accessListControlRowStatus=accessListControlRowStatus, accessListVLANSpanRootTrack=accessListVLANSpanRootTrack, PortDef=PortDef, macAccessListEtherType=macAccessListEtherType, Shaper=Shaper, accessListInterfaceColorAware=accessListInterfaceColorAware, accessListVLANRedirectIfIndex=accessListVLANRedirectIfIndex, AccessListDirection=AccessListDirection, extendedAccessListEstablished=extendedAccessListEstablished, etherTypeAccessListProviderVlanId=etherTypeAccessListProviderVlanId, accessListSapExceedAction=accessListSapExceedAction, accessListSapDirection=accessListSapDirection, TxqDropLevel=TxqDropLevel, accessLists=accessLists, standardAccessListDscp=standardAccessListDscp, ConformAction=ConformAction, standardAccessListVpt=standardAccessListVpt, accessListInterfaceShaper=accessListInterfaceShaper, extendedAccessListIgmpType=extendedAccessListIgmpType, accessListVLANRowStatus=accessListVLANRowStatus, accessListsServicesStatistics=accessListsServicesStatistics, AccessListStatistics=AccessListStatistics, extendedAccessListDropLevel=extendedAccessListDropLevel, etherTypeAccessListEntry=etherTypeAccessListEntry, accessListSapYellowBytes=accessListSapYellowBytes, AccessListRemarkString=AccessListRemarkString, macAccessListVpt=macAccessListVpt, etherTypeAccessListRemark=etherTypeAccessListRemark, extendedAccessListPortNumDst=extendedAccessListPortNumDst, accessListInterfaceYellowBytes=accessListInterfaceYellowBytes, accessListVLANUntagFilter=accessListVLANUntagFilter, AccessListEstablished=AccessListEstablished, VlanTag=VlanTag, extendedAccessListIndex=extendedAccessListIndex, accessListVLANPolicy=accessListVLANPolicy, accessListInterfaceExceedAction=accessListInterfaceExceedAction, AssigenValue=AssigenValue, extendedAccessListIcmpCode=extendedAccessListIcmpCode, macAccessListInnerVpt=macAccessListInnerVpt, accessListInterfaceEntry=accessListInterfaceEntry, etherTypeAccessListProviderVlanMask=etherTypeAccessListProviderVlanMask, macAccessListMacDstMask=macAccessListMacDstMask, extendedAccessListRowStatus=extendedAccessListRowStatus, accessListSapRateStatistics=accessListSapRateStatistics, ispUpLinkTable=ispUpLinkTable, extendedAccessListRuleMatched=extendedAccessListRuleMatched, accessListSapRedBytes=accessListSapRedBytes, accessListSapTxq=accessListSapTxq, etherTypeAccessListTable=etherTypeAccessListTable, extendedAccessListIpMASKsrc=extendedAccessListIpMASKsrc, standardAccessListVlanMask=standardAccessListVlanMask, etherTypeAccessListRowStatus=etherTypeAccessListRowStatus, standardAccessListProviderVlanMask=standardAccessListProviderVlanMask, standardAccessListUntaggedMode=standardAccessListUntaggedMode, accessListSapClassifiedPackets=accessListSapClassifiedPackets, extendedAccessListIpSrc=extendedAccessListIpSrc, extendedAccessListVpt=extendedAccessListVpt, etherTypeAccessListVlanId=etherTypeAccessListVlanId, extendedAccessListVlanId=extendedAccessListVlanId, macAccessListPrecedence=macAccessListPrecedence, macAccessListMacSrcMask=macAccessListMacSrcMask, etherTypeAccessListLog=etherTypeAccessListLog, extendedAccessListProviderVpt=extendedAccessListProviderVpt, accessListInterfacePeakBurst=accessListInterfacePeakBurst, accessListVLANColorAware=accessListVLANColorAware, extendedAccessListEntry=extendedAccessListEntry, accessListSapPeakBurst=accessListSapPeakBurst, ispUpLinkIndex=ispUpLinkIndex, accessListVLANGroupIndex=accessListVLANGroupIndex, macAccessListVlanId=macAccessListVlanId, macAccessListIndex=macAccessListIndex, extendedAccessListProviderVlanId=extendedAccessListProviderVlanId, accessListVLANBurst=accessListVLANBurst, Rate=Rate, accessListSapStatisticsGroupIndex=accessListSapStatisticsGroupIndex, prvtSwitchAccessListMib=prvtSwitchAccessListMib, standardAccessListTable=standardAccessListTable, ispUpLinkType=ispUpLinkType, accessListInterfaceTable=accessListInterfaceTable, accessListSapGroupIndex=accessListSapGroupIndex, macAccessListMacDst=macAccessListMacDst, accessListInterfaceStatisticsEntry=accessListInterfaceStatisticsEntry, standardAccessListIndex=standardAccessListIndex, accessListSapTable=accessListSapTable, accessListInterfacePeakRate=accessListInterfacePeakRate, PYSNMP_MODULE_ID=prvtSwitchAccessListMib, extendedAccessListPortDefDst=extendedAccessListPortDefDst, extendedAccessListDscp=extendedAccessListDscp, accessListVLANPeakBurst=accessListVLANPeakBurst, accessListInterfaceStatisticsGroupIndex=accessListInterfaceStatisticsGroupIndex, accessListVLANTrafficClass=accessListVLANTrafficClass, accessListVLANRateLimit=accessListVLANRateLimit, accessListSapStatisticsEntry=accessListSapStatisticsEntry, accessListSapRowStatus=accessListSapRowStatus, accessListInterfaceRateLimit=accessListInterfaceRateLimit, extendedAccessListIpProtocol=extendedAccessListIpProtocol, accessListSapBurst=accessListSapBurst, ispUserInterfaceTable=ispUserInterfaceTable, ispUserInterfaceShaper=ispUserInterfaceShaper, accessListSapPeakRate=accessListSapPeakRate, extendedAccessListTos=extendedAccessListTos, accessListInterfacePriority=accessListInterfacePriority, ispUpLinkIfIndex=ispUpLinkIfIndex, etherTypeAccessListRuleMatched=etherTypeAccessListRuleMatched, accessListControlListGroup=accessListControlListGroup, standardAccessListProviderVlanId=standardAccessListProviderVlanId, etherTypeAccessListIndex=etherTypeAccessListIndex, macAccessListRuleMatched=macAccessListRuleMatched, prvtSwitchAccessListNotifications=prvtSwitchAccessListNotifications, macAccessListInnerVlanId=macAccessListInnerVlanId, standardAccessListVlanId=standardAccessListVlanId, extendedAccessListUntaggedMode=extendedAccessListUntaggedMode, standardAccessListProviderVpt=standardAccessListProviderVpt, standardAccessListRemark=standardAccessListRemark, extendedAccessListAction=extendedAccessListAction, accessListInterfaceRedBytes=accessListInterfaceRedBytes, accessListInterfaceGroupIndex=accessListInterfaceGroupIndex, extendedAccessListPortRangeSrc=extendedAccessListPortRangeSrc, macAccessListMatchTrafficPort=macAccessListMatchTrafficPort, accessGroupsDefinitions=accessGroupsDefinitions, accessListsServices=accessListsServices, ExceedAction=ExceedAction, accessListInterfaceDiscard=accessListInterfaceDiscard, ispUserInterfaceAssigen=ispUserInterfaceAssigen, extendedAccessListPortNumSrc=extendedAccessListPortNumSrc, accessListSapColorAware=accessListSapColorAware, prvtSwitchAccessListMibGroups=prvtSwitchAccessListMibGroups, accessListsVLAN=accessListsVLAN, AccessListDiscard=AccessListDiscard, accessListInterfaceTxqDropLevel=accessListInterfaceTxqDropLevel, extendedAccessListLog=extendedAccessListLog, accessListVLANTable=accessListVLANTable, accessListSapTableIndex=accessListSapTableIndex, accessListSapStatistics=accessListSapStatistics, standardAccessListAction=standardAccessListAction, etherTypeAccessListAction=etherTypeAccessListAction, accessListInterfaceTrafficClass=accessListInterfaceTrafficClass, accessListVLANDirection=accessListVLANDirection, standardAccessListIpSrc=standardAccessListIpSrc, macAccessListTos=macAccessListTos, accessListInterfaceTxq=accessListInterfaceTxq, macAccessListLog=macAccessListLog)
