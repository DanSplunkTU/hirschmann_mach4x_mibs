#
# PySNMP MIB module SL-SECU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-SECU-MIB
# Produced by pysmi-1.1.0 at Fri Nov 19 15:24:27 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
slMain, = mibBuilder.importSymbols("SL-MAIN-MIB", "slMain")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
transmission, MibIdentifier, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, NotificationType, Counter64, TimeTicks, Unsigned32, Bits, Counter32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "MibIdentifier", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "NotificationType", "Counter64", "TimeTicks", "Unsigned32", "Bits", "Counter32", "ModuleIdentity", "iso")
TextualConvention, RowStatus, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "DateAndTime", "TruthValue")
slSecuMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24))
if mibBuilder.loadTexts: slSecuMib.setLastUpdated('201105170000Z')
if mibBuilder.loadTexts: slSecuMib.setOrganization('PacketLight Networks Ltd.')
class SlSecuType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("telnet", 1), ("ssh", 2), ("http", 3), ("https", 4), ("icmp", 5), ("snmp", 6), ("ftp", 7), ("tftp", 8), ("tl1", 9), ("tl1ssh", 10), ("wl", 11), ("snmpovertcp", 12), ("sftp", 13))

slSecuGen = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 1))
slSecuSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2))
slSecuWl = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3))
slSecuEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4))
slSecuFirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuFirewallEnable.setStatus('current')
slSecuSelectTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2, 1), )
if mibBuilder.loadTexts: slSecuSelectTable.setStatus('current')
slSecuSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2, 1, 1), ).setIndexNames((0, "SL-SECU-MIB", "slSecuSelectType"))
if mibBuilder.loadTexts: slSecuSelectEntry.setStatus('current')
slSecuSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2, 1, 1, 1), SlSecuType())
if mibBuilder.loadTexts: slSecuSelectType.setStatus('current')
slSecuSelectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuSelectPort.setStatus('current')
slSecuSelectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuSelectEnable.setStatus('current')
slSecuWlTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3, 1), )
if mibBuilder.loadTexts: slSecuWlTable.setStatus('current')
slSecuWlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3, 1, 1), ).setIndexNames((0, "SL-SECU-MIB", "slSecuWlIp"))
if mibBuilder.loadTexts: slSecuWlEntry.setStatus('current')
slSecuWlIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuWlIp.setStatus('current')
slSecuWlMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuWlMask.setStatus('current')
slSecuWlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slSecuWlStatus.setStatus('current')
slSecuEncryptionTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1), )
if mibBuilder.loadTexts: slSecuEncryptionTable.setStatus('current')
slSecuEncryptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1), ).setIndexNames((0, "SL-SECU-MIB", "slSecuEncryptionIfIndex"))
if mibBuilder.loadTexts: slSecuEncryptionEntry.setStatus('current')
slSecuEncryptionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuEncryptionIfIndex.setStatus('current')
slSecuEncryptionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuEncryptionEnable.setStatus('current')
slSecuEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("exchange", 2), ("kdf", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuEncryptionStatus.setStatus('current')
slSecuEncryptionForceInit = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuEncryptionForceInit.setStatus('current')
slSecuEncryptionPreShared = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuEncryptionPreShared.setStatus('current')
slSecuEncryptionKeyExchangePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuEncryptionKeyExchangePeriod.setStatus('current')
slSecuEncryptionLock = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slSecuEncryptionLock.setStatus('current')
slSecuEncryptionProtectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 3, 24, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("exchange", 2), ("kdf", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSecuEncryptionProtectedStatus.setStatus('current')
mibBuilder.exportSymbols("SL-SECU-MIB", slSecuWlMask=slSecuWlMask, slSecuSelectTable=slSecuSelectTable, slSecuEncryptionIfIndex=slSecuEncryptionIfIndex, SlSecuType=SlSecuType, slSecuEncryptionEntry=slSecuEncryptionEntry, slSecuFirewallEnable=slSecuFirewallEnable, slSecuWlIp=slSecuWlIp, slSecuSelect=slSecuSelect, slSecuSelectEntry=slSecuSelectEntry, slSecuEncryption=slSecuEncryption, slSecuEncryptionTable=slSecuEncryptionTable, slSecuSelectType=slSecuSelectType, slSecuEncryptionKeyExchangePeriod=slSecuEncryptionKeyExchangePeriod, PYSNMP_MODULE_ID=slSecuMib, slSecuEncryptionProtectedStatus=slSecuEncryptionProtectedStatus, slSecuEncryptionLock=slSecuEncryptionLock, slSecuSelectPort=slSecuSelectPort, slSecuWl=slSecuWl, slSecuEncryptionForceInit=slSecuEncryptionForceInit, slSecuEncryptionEnable=slSecuEncryptionEnable, slSecuEncryptionPreShared=slSecuEncryptionPreShared, slSecuMib=slSecuMib, slSecuEncryptionStatus=slSecuEncryptionStatus, slSecuSelectEnable=slSecuSelectEnable, slSecuGen=slSecuGen, slSecuWlTable=slSecuWlTable, slSecuWlStatus=slSecuWlStatus, slSecuWlEntry=slSecuWlEntry)
