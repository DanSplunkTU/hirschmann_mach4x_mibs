#
# PySNMP MIB module PRVT-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-DHCP-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 17:46:31 2021
# On host fv-az36-855 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, Integer32, ModuleIdentity, Gauge32, NotificationType, Counter32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Integer32", "ModuleIdentity", "Gauge32", "NotificationType", "Counter32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "TimeTicks", "IpAddress")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
prvtDHCPMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 105))
prvtDHCPMib.setRevisions(('2005-02-16 00:00', '2003-05-06 00:00', '2002-05-30 00:00',))
if mibBuilder.loadTexts: prvtDHCPMib.setLastUpdated('200502160000Z')
if mibBuilder.loadTexts: prvtDHCPMib.setOrganization('BATM Advanced Communication')
prvtDHCPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1))
prvtDHCPNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 2))
dhcpPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1))
dhcpRanges = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2))
dhcpSubnets = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3))
dhcpHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4))
dhcpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5))
dhcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6))
dhcpVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7))
dhcpMiscSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8))
dhcpRRSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9))
dhcpStaticHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1))
dhcpDynamicHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2))
dhcpStatusTotalNoOfDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfDiscovers.setStatus('current')
dhcpStatusTotalNoOfRequests = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfRequests.setStatus('current')
dhcpStatusTotalNoOfReleases = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfReleases.setStatus('current')
dhcpStatusTotalNoOfOffers = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfOffers.setStatus('current')
dhcpStatusTotalNoOfAcks = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfAcks.setStatus('current')
dhcpStatusTotalNoOfNacks = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfNacks.setStatus('current')
dhcpStatusTotalNoOfDeclines = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfDeclines.setStatus('current')
dhcpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1), )
if mibBuilder.loadTexts: dhcpRangeTable.setStatus('current')
dhcpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpRangeStartIp"))
if mibBuilder.loadTexts: dhcpRangeEntry.setStatus('current')
dhcpRangeStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeStartIp.setStatus('current')
dhcpRangeStopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeStopIp.setStatus('current')
dhcpRangeNoAddInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeNoAddInUse.setStatus('current')
dhcpRangeNoAddFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeNoAddFree.setStatus('current')
dhcpRangeCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeCircuitID.setStatus('current')
dhcpRangeCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeCircuitIDType.setStatus('current')
dhcpRangeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeRangeName.setStatus('current')
dhcpRangeSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeSubnetIp.setStatus('current')
dhcpRangeSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeSubnetName.setStatus('current')
dhcpRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeRowStatus.setStatus('current')
dhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1), )
if mibBuilder.loadTexts: dhcpSubnetTable.setStatus('current')
dhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpSubnetIp"))
if mibBuilder.loadTexts: dhcpSubnetEntry.setStatus('current')
dhcpSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetIp.setStatus('current')
dhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('current')
dhcpSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetName.setStatus('current')
dhcpSubnetNoAddInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetNoAddInUse.setStatus('current')
dhcpSubnetNoAddFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetNoAddFree.setStatus('current')
dhcpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRowStatus.setStatus('current')
dhcpStaticHostsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1), )
if mibBuilder.loadTexts: dhcpStaticHostsTable.setStatus('current')
dhcpStaticHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpStaticHostIPAddress"))
if mibBuilder.loadTexts: dhcpStaticHostsEntry.setStatus('current')
dhcpStaticHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostIPAddress.setStatus('current')
dhcpStaticHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostName.setStatus('current')
dhcpStaticHostConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticHostConnected.setStatus('current')
dhcpStaticHostMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostMACAddr.setStatus('current')
dhcpStaticHostFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostFilename.setStatus('current')
dhcpStaticHostBootpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostBootpIP.setStatus('current')
dhcpStaticHostServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostServer.setStatus('current')
dhcpStatisHostSnoofPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatisHostSnoofPort.setStatus('current')
dhcpStaticHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostRowStatus.setStatus('current')
dhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1), )
if mibBuilder.loadTexts: dhcpLeaseStateTable.setStatus('current')
dhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpLeaseIp"))
if mibBuilder.loadTexts: dhcpLeaseStateEntry.setStatus('current')
dhcpLeaseIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIp.setStatus('current')
dhcpLeaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseName.setStatus('current')
dhcpLeaseETime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseETime.setStatus('current')
dhcpLeaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseMac.setStatus('current')
dhcpLeaseSnoofPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseSnoofPort.setStatus('current')
dhcpOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1), )
if mibBuilder.loadTexts: dhcpOptionsTable.setStatus('current')
dhcpOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpOptionsSubnetIp"))
if mibBuilder.loadTexts: dhcpOptionsEntry.setStatus('current')
dhcpOptionsSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionsSubnetIp.setStatus('current')
dhcpOptionsMaxLTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsMaxLTime.setStatus('current')
dhcpOptionsDfltLTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDfltLTime.setStatus('current')
dhcpOptionsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsRouter.setStatus('current')
dhcpOptionsBrcstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBrcstAddr.setStatus('current')
dhcpOptionsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsSubnetMask.setStatus('current')
dhcpOptionsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDomainName.setStatus('current')
dhcpOptionsMeritDump = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsMeritDump.setStatus('current')
dhcpOptionsRootPath = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsRootPath.setStatus('current')
dhcpOptionsBootStSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBootStSrv.setStatus('current')
dhcpOptionsBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBootFileName.setStatus('current')
dhcpOptionsDNSServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer1.setStatus('current')
dhcpOptionsDNSServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer2.setStatus('current')
dhcpOptionsDNSServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer3.setStatus('current')
dhcpOptionsDNSServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer4.setStatus('current')
dhcpOptionsDNSServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer5.setStatus('current')
dhcpOptionsLogServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer1.setStatus('current')
dhcpOptionsLogServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer2.setStatus('current')
dhcpOptionsLogServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer3.setStatus('current')
dhcpOptionsLogServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer4.setStatus('current')
dhcpOptionsLogServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer5.setStatus('current')
dhcpOptionsWinsServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer1.setStatus('current')
dhcpOptionsWinsServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer2.setStatus('current')
dhcpOptionsWinsServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer3.setStatus('current')
dhcpOptionsWinsServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 25), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer4.setStatus('current')
dhcpOptionsWinsServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 26), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer5.setStatus('current')
dhcpDBExpire = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDBExpire.setStatus('current')
dhcpTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpTFTPServer.setStatus('current')
dhcpFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServer.setStatus('current')
dhcpFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServerUser.setStatus('current')
dhcpFTPServerPass = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServerPass.setStatus('current')
dhcpRemoteDBDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRemoteDBDelay.setStatus('current')
dhcpRemoteDBFilename = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRemoteDBFilename.setStatus('current')
dhcpUnknownCircuitIDPolicy = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpUnknownCircuitIDPolicy.setStatus('current')
dhcpEnableServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpEnableServer.setStatus('current')
dhcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1), )
if mibBuilder.loadTexts: dhcpPortTable.setStatus('current')
dhcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpPort"))
if mibBuilder.loadTexts: dhcpPortEntry.setStatus('current')
dhcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPort.setStatus('current')
dhcpMaxPortIP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpMaxPortIP.setStatus('current')
dhcpPortSnoof = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPortSnoof.setStatus('current')
dhcpPortServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPortServiceEnable.setStatus('current')
dhcpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1), )
if mibBuilder.loadTexts: dhcpVlanTable.setStatus('current')
dhcpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpVlanID"))
if mibBuilder.loadTexts: dhcpVlanEntry.setStatus('current')
dhcpVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpVlanID.setStatus('current')
dhcpVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpVlanEnable.setStatus('current')
dhcpRRTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1), )
if mibBuilder.loadTexts: dhcpRRTable.setStatus('current')
dhcpRREntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpRRif"))
if mibBuilder.loadTexts: dhcpRREntry.setStatus('current')
dhcpRRif = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRRif.setStatus('current')
dhcpRREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRREnable.setStatus('current')
mibBuilder.exportSymbols("PRVT-DHCP-MIB", dhcpFTPServerPass=dhcpFTPServerPass, dhcpStaticHostServer=dhcpStaticHostServer, dhcpStatusTotalNoOfAcks=dhcpStatusTotalNoOfAcks, dhcpHosts=dhcpHosts, dhcpDBExpire=dhcpDBExpire, dhcpOptionsDNSServer1=dhcpOptionsDNSServer1, dhcpOptionsMeritDump=dhcpOptionsMeritDump, dhcpSubnetEntry=dhcpSubnetEntry, dhcpLeaseStateTable=dhcpLeaseStateTable, dhcpRangeSubnetName=dhcpRangeSubnetName, dhcpSubnetMask=dhcpSubnetMask, dhcpOptionsRootPath=dhcpOptionsRootPath, dhcpOptionsWinsServer2=dhcpOptionsWinsServer2, dhcpOptionsDNSServer3=dhcpOptionsDNSServer3, dhcpOptionsTable=dhcpOptionsTable, dhcpStatusTotalNoOfRequests=dhcpStatusTotalNoOfRequests, dhcpLeaseMac=dhcpLeaseMac, dhcpVlanEnable=dhcpVlanEnable, dhcpSubnetNoAddInUse=dhcpSubnetNoAddInUse, dhcpStatisHostSnoofPort=dhcpStatisHostSnoofPort, prvtDHCPObjects=prvtDHCPObjects, dhcpPorts=dhcpPorts, dhcpStaticHostMACAddr=dhcpStaticHostMACAddr, dhcpFTPServerUser=dhcpFTPServerUser, dhcpVlanTable=dhcpVlanTable, dhcpStaticHosts=dhcpStaticHosts, dhcpLeaseName=dhcpLeaseName, dhcpRREnable=dhcpRREnable, dhcpSubnetName=dhcpSubnetName, dhcpStatusTotalNoOfNacks=dhcpStatusTotalNoOfNacks, dhcpRangeCircuitIDType=dhcpRangeCircuitIDType, dhcpRemoteDBFilename=dhcpRemoteDBFilename, dhcpOptionsBootStSrv=dhcpOptionsBootStSrv, dhcpRangeStopIp=dhcpRangeStopIp, dhcpRangeSubnetIp=dhcpRangeSubnetIp, dhcpPortServiceEnable=dhcpPortServiceEnable, dhcpOptions=dhcpOptions, dhcpPortEntry=dhcpPortEntry, dhcpRRSettings=dhcpRRSettings, dhcpRRif=dhcpRRif, dhcpStatusTotalNoOfReleases=dhcpStatusTotalNoOfReleases, dhcpRangeStartIp=dhcpRangeStartIp, dhcpOptionsDomainName=dhcpOptionsDomainName, dhcpOptionsSubnetIp=dhcpOptionsSubnetIp, dhcpOptionsEntry=dhcpOptionsEntry, dhcpVlanID=dhcpVlanID, dhcpMiscSettings=dhcpMiscSettings, dhcpLeaseETime=dhcpLeaseETime, dhcpOptionsWinsServer5=dhcpOptionsWinsServer5, dhcpStatusTotalNoOfDeclines=dhcpStatusTotalNoOfDeclines, dhcpOptionsLogServer5=dhcpOptionsLogServer5, dhcpRangeEntry=dhcpRangeEntry, dhcpOptionsDNSServer4=dhcpOptionsDNSServer4, dhcpOptionsDNSServer5=dhcpOptionsDNSServer5, dhcpRemoteDBDelay=dhcpRemoteDBDelay, dhcpStaticHostConnected=dhcpStaticHostConnected, dhcpOptionsDNSServer2=dhcpOptionsDNSServer2, dhcpOptionsLogServer4=dhcpOptionsLogServer4, dhcpRangeRowStatus=dhcpRangeRowStatus, dhcpLeaseSnoofPort=dhcpLeaseSnoofPort, dhcpStatusTotalNoOfOffers=dhcpStatusTotalNoOfOffers, dhcpRangeNoAddFree=dhcpRangeNoAddFree, dhcpRREntry=dhcpRREntry, dhcpOptionsMaxLTime=dhcpOptionsMaxLTime, dhcpUnknownCircuitIDPolicy=dhcpUnknownCircuitIDPolicy, dhcpOptionsBrcstAddr=dhcpOptionsBrcstAddr, dhcpMaxPortIP=dhcpMaxPortIP, dhcpOptionsWinsServer3=dhcpOptionsWinsServer3, dhcpRangeRangeName=dhcpRangeRangeName, PYSNMP_MODULE_ID=prvtDHCPMib, dhcpRangeCircuitID=dhcpRangeCircuitID, dhcpPortTable=dhcpPortTable, prvtDHCPMib=prvtDHCPMib, dhcpOptionsLogServer1=dhcpOptionsLogServer1, dhcpSubnetTable=dhcpSubnetTable, dhcpOptionsDfltLTime=dhcpOptionsDfltLTime, dhcpOptionsLogServer3=dhcpOptionsLogServer3, dhcpLeaseIp=dhcpLeaseIp, dhcpStaticHostBootpIP=dhcpStaticHostBootpIP, dhcpSubnetRowStatus=dhcpSubnetRowStatus, dhcpLeaseStateEntry=dhcpLeaseStateEntry, dhcpSubnetIp=dhcpSubnetIp, dhcpStaticHostsEntry=dhcpStaticHostsEntry, dhcpStaticHostRowStatus=dhcpStaticHostRowStatus, dhcpRangeTable=dhcpRangeTable, dhcpRangeNoAddInUse=dhcpRangeNoAddInUse, dhcpStaticHostName=dhcpStaticHostName, dhcpSubnets=dhcpSubnets, dhcpStaticHostFilename=dhcpStaticHostFilename, prvtDHCPNotifications=prvtDHCPNotifications, dhcpFTPServer=dhcpFTPServer, dhcpPackets=dhcpPackets, dhcpRanges=dhcpRanges, dhcpPortSnoof=dhcpPortSnoof, dhcpVlanEntry=dhcpVlanEntry, dhcpOptionsBootFileName=dhcpOptionsBootFileName, dhcpTFTPServer=dhcpTFTPServer, dhcpSubnetNoAddFree=dhcpSubnetNoAddFree, dhcpOptionsWinsServer1=dhcpOptionsWinsServer1, dhcpEnableServer=dhcpEnableServer, dhcpOptionsSubnetMask=dhcpOptionsSubnetMask, dhcpStatusTotalNoOfDiscovers=dhcpStatusTotalNoOfDiscovers, dhcpDynamicHosts=dhcpDynamicHosts, dhcpStaticHostIPAddress=dhcpStaticHostIPAddress, dhcpOptionsWinsServer4=dhcpOptionsWinsServer4, dhcpOptionsRouter=dhcpOptionsRouter, dhcpOptionsLogServer2=dhcpOptionsLogServer2, dhcpRRTable=dhcpRRTable, dhcpVlans=dhcpVlans, dhcpStaticHostsTable=dhcpStaticHostsTable, dhcpPort=dhcpPort)
