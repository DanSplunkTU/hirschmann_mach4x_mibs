#
# PySNMP MIB module PRVT-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-DHCP-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 15:50:13 2021
# On host fv-az74-277 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, ObjectIdentity, NotificationType, Bits, IpAddress, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Bits", "IpAddress", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "Integer32", "iso")
MacAddress, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
prvtDHCPMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 105))
prvtDHCPMib.setRevisions(('2005-02-16 00:00', '2003-05-06 00:00', '2002-05-30 00:00',))
if mibBuilder.loadTexts: prvtDHCPMib.setLastUpdated('200502160000Z')
if mibBuilder.loadTexts: prvtDHCPMib.setOrganization('BATM Advanced Communication')
prvtDHCPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1))
prvtDHCPNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 2))
dhcpPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1))
dhcpRanges = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2))
dhcpSubnets = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3))
dhcpHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4))
dhcpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5))
dhcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6))
dhcpVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7))
dhcpMiscSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8))
dhcpRRSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9))
dhcpStaticHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1))
dhcpDynamicHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2))
dhcpStatusTotalNoOfDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfDiscovers.setStatus('current')
dhcpStatusTotalNoOfRequests = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfRequests.setStatus('current')
dhcpStatusTotalNoOfReleases = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfReleases.setStatus('current')
dhcpStatusTotalNoOfOffers = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfOffers.setStatus('current')
dhcpStatusTotalNoOfAcks = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfAcks.setStatus('current')
dhcpStatusTotalNoOfNacks = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfNacks.setStatus('current')
dhcpStatusTotalNoOfDeclines = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatusTotalNoOfDeclines.setStatus('current')
dhcpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1), )
if mibBuilder.loadTexts: dhcpRangeTable.setStatus('current')
dhcpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpRangeStartIp"))
if mibBuilder.loadTexts: dhcpRangeEntry.setStatus('current')
dhcpRangeStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeStartIp.setStatus('current')
dhcpRangeStopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeStopIp.setStatus('current')
dhcpRangeNoAddInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeNoAddInUse.setStatus('current')
dhcpRangeNoAddFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeNoAddFree.setStatus('current')
dhcpRangeCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeCircuitID.setStatus('current')
dhcpRangeCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("string", 1), ("hex", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeCircuitIDType.setStatus('current')
dhcpRangeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeRangeName.setStatus('current')
dhcpRangeSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeSubnetIp.setStatus('current')
dhcpRangeSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeSubnetName.setStatus('current')
dhcpRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRangeRowStatus.setStatus('current')
dhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1), )
if mibBuilder.loadTexts: dhcpSubnetTable.setStatus('current')
dhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpSubnetIp"))
if mibBuilder.loadTexts: dhcpSubnetEntry.setStatus('current')
dhcpSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetIp.setStatus('current')
dhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('current')
dhcpSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetName.setStatus('current')
dhcpSubnetNoAddInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetNoAddInUse.setStatus('current')
dhcpSubnetNoAddFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetNoAddFree.setStatus('current')
dhcpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRowStatus.setStatus('current')
dhcpStaticHostsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1), )
if mibBuilder.loadTexts: dhcpStaticHostsTable.setStatus('current')
dhcpStaticHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpStaticHostIPAddress"))
if mibBuilder.loadTexts: dhcpStaticHostsEntry.setStatus('current')
dhcpStaticHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostIPAddress.setStatus('current')
dhcpStaticHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostName.setStatus('current')
dhcpStaticHostConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticHostConnected.setStatus('current')
dhcpStaticHostMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostMACAddr.setStatus('current')
dhcpStaticHostFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostFilename.setStatus('current')
dhcpStaticHostBootpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostBootpIP.setStatus('current')
dhcpStaticHostServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostServer.setStatus('current')
dhcpStatisHostSnoofPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStatisHostSnoofPort.setStatus('current')
dhcpStaticHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticHostRowStatus.setStatus('current')
dhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1), )
if mibBuilder.loadTexts: dhcpLeaseStateTable.setStatus('current')
dhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpLeaseIp"))
if mibBuilder.loadTexts: dhcpLeaseStateEntry.setStatus('current')
dhcpLeaseIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIp.setStatus('current')
dhcpLeaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseName.setStatus('current')
dhcpLeaseETime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseETime.setStatus('current')
dhcpLeaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseMac.setStatus('current')
dhcpLeaseSnoofPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseSnoofPort.setStatus('current')
dhcpOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1), )
if mibBuilder.loadTexts: dhcpOptionsTable.setStatus('current')
dhcpOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpOptionsSubnetIp"))
if mibBuilder.loadTexts: dhcpOptionsEntry.setStatus('current')
dhcpOptionsSubnetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionsSubnetIp.setStatus('current')
dhcpOptionsMaxLTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsMaxLTime.setStatus('current')
dhcpOptionsDfltLTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDfltLTime.setStatus('current')
dhcpOptionsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsRouter.setStatus('current')
dhcpOptionsBrcstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBrcstAddr.setStatus('current')
dhcpOptionsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsSubnetMask.setStatus('current')
dhcpOptionsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDomainName.setStatus('current')
dhcpOptionsMeritDump = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsMeritDump.setStatus('current')
dhcpOptionsRootPath = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsRootPath.setStatus('current')
dhcpOptionsBootStSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBootStSrv.setStatus('current')
dhcpOptionsBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsBootFileName.setStatus('current')
dhcpOptionsDNSServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer1.setStatus('current')
dhcpOptionsDNSServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer2.setStatus('current')
dhcpOptionsDNSServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer3.setStatus('current')
dhcpOptionsDNSServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer4.setStatus('current')
dhcpOptionsDNSServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsDNSServer5.setStatus('current')
dhcpOptionsLogServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer1.setStatus('current')
dhcpOptionsLogServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer2.setStatus('current')
dhcpOptionsLogServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer3.setStatus('current')
dhcpOptionsLogServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer4.setStatus('current')
dhcpOptionsLogServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsLogServer5.setStatus('current')
dhcpOptionsWinsServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer1.setStatus('current')
dhcpOptionsWinsServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer2.setStatus('current')
dhcpOptionsWinsServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer3.setStatus('current')
dhcpOptionsWinsServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 25), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer4.setStatus('current')
dhcpOptionsWinsServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 5, 1, 1, 26), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpOptionsWinsServer5.setStatus('current')
dhcpDBExpire = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDBExpire.setStatus('current')
dhcpTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpTFTPServer.setStatus('current')
dhcpFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServer.setStatus('current')
dhcpFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServerUser.setStatus('current')
dhcpFTPServerPass = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFTPServerPass.setStatus('current')
dhcpRemoteDBDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRemoteDBDelay.setStatus('current')
dhcpRemoteDBFilename = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRemoteDBFilename.setStatus('current')
dhcpUnknownCircuitIDPolicy = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpUnknownCircuitIDPolicy.setStatus('current')
dhcpEnableServer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpEnableServer.setStatus('current')
dhcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1), )
if mibBuilder.loadTexts: dhcpPortTable.setStatus('current')
dhcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpPort"))
if mibBuilder.loadTexts: dhcpPortEntry.setStatus('current')
dhcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPort.setStatus('current')
dhcpMaxPortIP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpMaxPortIP.setStatus('current')
dhcpPortSnoof = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPortSnoof.setStatus('current')
dhcpPortServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPortServiceEnable.setStatus('current')
dhcpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1), )
if mibBuilder.loadTexts: dhcpVlanTable.setStatus('current')
dhcpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpVlanID"))
if mibBuilder.loadTexts: dhcpVlanEntry.setStatus('current')
dhcpVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpVlanID.setStatus('current')
dhcpVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 7, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpVlanEnable.setStatus('current')
dhcpRRTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1), )
if mibBuilder.loadTexts: dhcpRRTable.setStatus('current')
dhcpRREntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-DHCP-MIB", "dhcpRRif"))
if mibBuilder.loadTexts: dhcpRREntry.setStatus('current')
dhcpRRif = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRRif.setStatus('current')
dhcpRREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 105, 1, 9, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRREnable.setStatus('current')
mibBuilder.exportSymbols("PRVT-DHCP-MIB", dhcpStatusTotalNoOfDeclines=dhcpStatusTotalNoOfDeclines, dhcpRangeSubnetIp=dhcpRangeSubnetIp, dhcpTFTPServer=dhcpTFTPServer, dhcpOptionsWinsServer5=dhcpOptionsWinsServer5, dhcpOptionsDomainName=dhcpOptionsDomainName, prvtDHCPObjects=prvtDHCPObjects, dhcpRangeTable=dhcpRangeTable, dhcpRangeCircuitIDType=dhcpRangeCircuitIDType, dhcpLeaseSnoofPort=dhcpLeaseSnoofPort, dhcpOptionsLogServer3=dhcpOptionsLogServer3, dhcpRangeNoAddInUse=dhcpRangeNoAddInUse, dhcpOptionsDNSServer1=dhcpOptionsDNSServer1, dhcpStatusTotalNoOfAcks=dhcpStatusTotalNoOfAcks, dhcpOptionsWinsServer2=dhcpOptionsWinsServer2, dhcpOptionsBrcstAddr=dhcpOptionsBrcstAddr, dhcpMiscSettings=dhcpMiscSettings, dhcpSubnetNoAddFree=dhcpSubnetNoAddFree, dhcpOptionsWinsServer3=dhcpOptionsWinsServer3, dhcpSubnetName=dhcpSubnetName, dhcpRemoteDBDelay=dhcpRemoteDBDelay, dhcpLeaseIp=dhcpLeaseIp, dhcpOptionsSubnetMask=dhcpOptionsSubnetMask, dhcpOptionsBootStSrv=dhcpOptionsBootStSrv, dhcpOptionsWinsServer1=dhcpOptionsWinsServer1, dhcpStatisHostSnoofPort=dhcpStatisHostSnoofPort, dhcpStatusTotalNoOfOffers=dhcpStatusTotalNoOfOffers, dhcpSubnetNoAddInUse=dhcpSubnetNoAddInUse, dhcpUnknownCircuitIDPolicy=dhcpUnknownCircuitIDPolicy, dhcpLeaseStateEntry=dhcpLeaseStateEntry, dhcpLeaseName=dhcpLeaseName, dhcpStaticHostMACAddr=dhcpStaticHostMACAddr, dhcpStaticHostConnected=dhcpStaticHostConnected, dhcpStatusTotalNoOfRequests=dhcpStatusTotalNoOfRequests, dhcpStatusTotalNoOfDiscovers=dhcpStatusTotalNoOfDiscovers, dhcpVlanTable=dhcpVlanTable, dhcpRangeRowStatus=dhcpRangeRowStatus, dhcpStaticHostName=dhcpStaticHostName, dhcpOptionsDfltLTime=dhcpOptionsDfltLTime, dhcpDynamicHosts=dhcpDynamicHosts, prvtDHCPNotifications=prvtDHCPNotifications, dhcpSubnetTable=dhcpSubnetTable, dhcpSubnetEntry=dhcpSubnetEntry, dhcpRemoteDBFilename=dhcpRemoteDBFilename, dhcpRangeCircuitID=dhcpRangeCircuitID, dhcpVlans=dhcpVlans, dhcpFTPServer=dhcpFTPServer, dhcpPackets=dhcpPackets, dhcpStaticHostRowStatus=dhcpStaticHostRowStatus, dhcpSubnetRowStatus=dhcpSubnetRowStatus, dhcpRREntry=dhcpRREntry, dhcpStaticHostServer=dhcpStaticHostServer, dhcpOptionsDNSServer3=dhcpOptionsDNSServer3, dhcpStatusTotalNoOfReleases=dhcpStatusTotalNoOfReleases, dhcpOptionsMeritDump=dhcpOptionsMeritDump, dhcpPortServiceEnable=dhcpPortServiceEnable, dhcpRRSettings=dhcpRRSettings, dhcpOptionsLogServer2=dhcpOptionsLogServer2, dhcpPortTable=dhcpPortTable, dhcpStaticHostsTable=dhcpStaticHostsTable, dhcpSubnetIp=dhcpSubnetIp, dhcpRangeSubnetName=dhcpRangeSubnetName, dhcpOptionsRouter=dhcpOptionsRouter, dhcpOptionsRootPath=dhcpOptionsRootPath, dhcpOptionsDNSServer5=dhcpOptionsDNSServer5, dhcpOptionsLogServer4=dhcpOptionsLogServer4, dhcpOptionsSubnetIp=dhcpOptionsSubnetIp, dhcpPorts=dhcpPorts, dhcpSubnets=dhcpSubnets, dhcpPortEntry=dhcpPortEntry, dhcpOptions=dhcpOptions, dhcpStaticHosts=dhcpStaticHosts, dhcpPortSnoof=dhcpPortSnoof, dhcpOptionsDNSServer2=dhcpOptionsDNSServer2, dhcpMaxPortIP=dhcpMaxPortIP, PYSNMP_MODULE_ID=prvtDHCPMib, dhcpStaticHostsEntry=dhcpStaticHostsEntry, dhcpPort=dhcpPort, dhcpLeaseETime=dhcpLeaseETime, dhcpDBExpire=dhcpDBExpire, dhcpRangeRangeName=dhcpRangeRangeName, dhcpLeaseStateTable=dhcpLeaseStateTable, dhcpOptionsBootFileName=dhcpOptionsBootFileName, dhcpRRTable=dhcpRRTable, dhcpStaticHostFilename=dhcpStaticHostFilename, dhcpVlanID=dhcpVlanID, dhcpRRif=dhcpRRif, dhcpOptionsLogServer5=dhcpOptionsLogServer5, dhcpOptionsMaxLTime=dhcpOptionsMaxLTime, dhcpFTPServerPass=dhcpFTPServerPass, dhcpHosts=dhcpHosts, dhcpRangeNoAddFree=dhcpRangeNoAddFree, dhcpLeaseMac=dhcpLeaseMac, dhcpStaticHostBootpIP=dhcpStaticHostBootpIP, dhcpRREnable=dhcpRREnable, dhcpOptionsDNSServer4=dhcpOptionsDNSServer4, prvtDHCPMib=prvtDHCPMib, dhcpStatusTotalNoOfNacks=dhcpStatusTotalNoOfNacks, dhcpVlanEnable=dhcpVlanEnable, dhcpEnableServer=dhcpEnableServer, dhcpOptionsWinsServer4=dhcpOptionsWinsServer4, dhcpRangeStopIp=dhcpRangeStopIp, dhcpOptionsEntry=dhcpOptionsEntry, dhcpOptionsLogServer1=dhcpOptionsLogServer1, dhcpSubnetMask=dhcpSubnetMask, dhcpOptionsTable=dhcpOptionsTable, dhcpFTPServerUser=dhcpFTPServerUser, dhcpRangeEntry=dhcpRangeEntry, dhcpStaticHostIPAddress=dhcpStaticHostIPAddress, dhcpVlanEntry=dhcpVlanEntry, dhcpRanges=dhcpRanges, dhcpRangeStartIp=dhcpRangeStartIp)
