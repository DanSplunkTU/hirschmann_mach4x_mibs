#
# PySNMP MIB module NETAPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netapp/NETAPP-MIB
# Produced by pysmi-1.1.8 at Fri Feb 11 19:44:37 2022
# On host fv-az83-653 platform Linux version 5.11.0-1028-azure by user runner
# Using Python version 3.10.2 (main, Feb  7 2022, 07:35:17) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ZeroBasedCounter64, CounterBasedGauge64 = mibBuilder.importSymbols("HCNUM-TC", "ZeroBasedCounter64", "CounterBasedGauge64")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, ModuleIdentity, Unsigned32, iso, snmpModules, NotificationType, Gauge32, Counter64, Integer32, mib_2, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "iso", "snmpModules", "NotificationType", "Gauge32", "Counter64", "Integer32", "mib-2", "enterprises", "TimeTicks")
TimeStamp, DateAndTime, DisplayString, PhysAddress, TestAndIncr, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DateAndTime", "DisplayString", "PhysAddress", "TestAndIncr", "TextualConvention")
netappModuleId = ModuleIdentity((1, 3, 6, 1, 6, 3, 789))
if mibBuilder.loadTexts: netappModuleId.setLastUpdated('201403050000Z')
if mibBuilder.loadTexts: netappModuleId.setOrganization('NetApp')
class Boolean(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class Uuid(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class TimeTicks64(TextualConvention, Counter64):
    status = 'current'

netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp0 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 0))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))
netappOnCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 5))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
netappNode = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 4))
netappCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 5))
netappVserver = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 6))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
sis = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 23))
compress = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 24))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 25))
extcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 26))
vserver = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 27))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 28))
sm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 29))
clusterIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 25, 1))
clusterIdentityUuid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentityUuid.setStatus('current')
clusterIdentityName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentityName.setStatus('current')
clusterIdentitySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIdentitySerialNumber.setStatus('current')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 2), )
if mibBuilder.loadTexts: nodeTable.setStatus('current')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "nodeName"))
if mibBuilder.loadTexts: nodeEntry.setStatus('current')
nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('current')
nodeOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOwner.setStatus('current')
nodeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeLocation.setStatus('current')
nodeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeModel.setStatus('current')
nodeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSerialNumber.setStatus('current')
nodeAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAssetTag.setStatus('current')
nodeUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUptime.setStatus('current')
nodeNvramId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNvramId.setStatus('current')
nodeSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSystemId.setStatus('current')
nodeVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeVendor.setStatus('current')
nodeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 11), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHealth.setStatus('current')
nodeEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 12), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEligibility.setStatus('current')
nodeEpsilon = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 13), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEpsilon.setStatus('current')
nodeUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUuid.setStatus('current')
nodeCpuUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCpuUptime.setStatus('current')
nodeCpuBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCpuBusyTime.setStatus('current')
nodeNvramBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNvramBatteryStatus.setStatus('current')
nodeEnvOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvOverTemperature.setStatus('current')
nodeEnvFailedFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedFanCount.setStatus('current')
nodeEnvFailedFanMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedFanMessage.setStatus('current')
nodeEnvFailedPowerSupplyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyCount.setStatus('current')
nodeEnvFailedPowerSupplyMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEnvFailedPowerSupplyMessage.setStatus('current')
nodeProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeProductVersion.setStatus('current')
nodeFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFirmwareVersion.setStatus('current')
clusterLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 3), )
if mibBuilder.loadTexts: clusterLicenseTable.setStatus('deprecated')
clusterLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "clusterLicenseFeature"))
if mibBuilder.loadTexts: clusterLicenseEntry.setStatus('deprecated')
clusterLicenseFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseFeature.setStatus('deprecated')
clusterLicenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseCode.setStatus('deprecated')
clusterLicenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseDescription.setStatus('deprecated')
clusterLicenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseSerialNumber.setStatus('deprecated')
clusterLicenseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseLimit.setStatus('deprecated')
clusterLicenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterLicenseExpirationDate.setStatus('deprecated')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 25, 4), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "licenseSerialNumber"), (0, "NETAPP-MIB", "licensePackage"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseSerialNumber.setStatus('current')
licensePackage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensePackage.setStatus('current')
licenseOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseOwner.setStatus('current')
licenseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseDescription.setStatus('current')
licenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("license", 2), ("site", 3), ("demo", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseType.setStatus('current')
licenseExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpiration.setStatus('current')
licenseLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseLegacy.setStatus('current')
licenseCustomerID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 25, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCustomerID.setStatus('current')
vserverTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 27, 1), )
if mibBuilder.loadTexts: vserverTable.setStatus('current')
vserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "vserverIndex"))
if mibBuilder.loadTexts: vserverEntry.setStatus('current')
vserverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: vserverIndex.setStatus('current')
vserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverName.setStatus('current')
vserverUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverUuid.setStatus('current')
vserverRootVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverRootVolume.setStatus('current')
vserverAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAggregate.setStatus('current')
vserverNsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNsSwitch.setStatus('current')
vserverNisDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNisDomain.setStatus('current')
vserverRootVolumeSecurityStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unix", 0), ("ntfs", 1), ("mixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverRootVolumeSecurityStyle.setStatus('current')
vserverLdapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverLdapClient.setStatus('current')
vserverLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverLanguage.setStatus('current')
vserverSnapshotPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverSnapshotPolicy.setStatus('current')
vserverComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverComment.setStatus('current')
vserverAntiVirusOnAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAntiVirusOnAccessPolicy.setStatus('deprecated')
vserverQuotaPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverQuotaPolicy.setStatus('current')
vserverType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("data", 0), ("admin", 1), ("node", 2), ("system", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverType.setStatus('current')
vserverState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("running", 0), ("stopped", 1), ("starting", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverState.setStatus('current')
vserverAggrList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAggrList.setStatus('current')
vserverAllowedProtocolList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverAllowedProtocolList.setStatus('current')
vserverNumVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverNumVolumes.setStatus('current')
vserverMaxVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverMaxVolumes.setStatus('current')
vserverDisallowedProtocolList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverDisallowedProtocolList.setStatus('current')
vserverIPspace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverIPspace.setStatus('current')
vserverIsRepository = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 23), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverIsRepository.setStatus('current')
vserverOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 27, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("stopped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vserverOperationalState.setStatus('current')
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eisaBased", 1), ("pciBased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('current')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("ibm", 2), ("dell", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVendor.setStatus('current')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('current')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('current')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productGuiUrl.setStatus('current')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productApiUrl.setStatus('current')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('current')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartnerSerialNum.setStatus('current')
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x86", 1), ("alpha", 2), ("mips", 3), ("sparc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productCPUArch.setStatus('current')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTrapData.setStatus('current')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMachineType.setStatus('current')
productLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 1, 14), )
if mibBuilder.loadTexts: productLicenseTable.setStatus('deprecated')
productLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1), ).setIndexNames((0, "NETAPP-MIB", "productLicenseIndex"))
if mibBuilder.loadTexts: productLicenseEntry.setStatus('deprecated')
productLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productLicenseIndex.setStatus('deprecated')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('deprecated')
licenseIsLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsLicensed.setStatus('deprecated')
licenseIsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsExpired.setStatus('deprecated')
licenseIsSite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsSite.setStatus('deprecated')
licenseExpirationTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationTimeStamp.setStatus('deprecated')
licenseIsAutoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIsAutoEnabled.setStatus('deprecated')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
nodeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 10))
nodeStatTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1), )
if mibBuilder.loadTexts: nodeStatTable.setStatus('current')
nodeStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "nodeStatNode"), (0, "NETAPP-MIB", "nodeStatCategoryIndex"), (0, "NETAPP-MIB", "nodeStatInstanceIndex"), (0, "NETAPP-MIB", "nodeStatCounterIndex"))
if mibBuilder.loadTexts: nodeStatEntry.setStatus('current')
nodeStatNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: nodeStatNode.setStatus('current')
nodeStatCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatCategoryIndex.setStatus('current')
nodeStatInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatInstanceIndex.setStatus('current')
nodeStatCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nodeStatCounterIndex.setStatus('current')
nodeStatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatValue.setStatus('current')
nodeStatUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatUnits.setStatus('current')
nodeStatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatDescription.setStatus('current')
nodeStatProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatProperties.setStatus('current')
nodeStatCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatCategoryName.setStatus('current')
nodeStatInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatInstanceName.setStatus('current')
nodeStatCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatCounterName.setStatus('current')
nodeStatLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatLabels.setStatus('current')
nodeStatValues = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 10, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatValues.setStatus('current')
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUpTime.setStatus('current')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTime.setStatus('current')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTimePerCent.setStatus('current')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTime.setStatus('current')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTimePerCent.setStatus('current')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCount.setStatus('current')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSwitchInvocations.setStatus('current')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuContextSwitches.setStatus('current')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('current')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterrupts.setStatus('current')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCPInterruptPercent.setStatus('current')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setStatus('current')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setStatus('current')
cDOTCpuTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14), )
if mibBuilder.loadTexts: cDOTCpuTable.setStatus('current')
cDOTCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1), ).setIndexNames((1, "NETAPP-MIB", "cDOTCpuNodeName"))
if mibBuilder.loadTexts: cDOTCpuEntry.setStatus('current')
cDOTCpuNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNodeName.setStatus('current')
cDOTCpuUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 2), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuUpTime.setStatus('current')
cDOTCpuBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 3), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuBusyTime.setStatus('current')
cDOTCpuBusyTimePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuBusyTimePerCent.setStatus('current')
cDOTCpuIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 5), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuIdleTime.setStatus('current')
cDOTCpuIdleTimePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuIdleTimePerCent.setStatus('current')
cDOTCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuCount.setStatus('current')
cDOTCpuSwitchInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuSwitchInvocations.setStatus('current')
cDOTCpuContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuContextSwitches.setStatus('current')
cDOTCpuInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuInterrupts.setStatus('current')
cDOTCpuNonCPInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNonCPInterrupts.setStatus('current')
cDOTCpuCPInterruptPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuCPInterruptPercent.setStatus('current')
cDOTCpuNonCPInterruptPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuNonCPInterruptPercent.setStatus('current')
cDOTCpuTotalDomainSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 14, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpuTotalDomainSwitches.setStatus('current')
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNfsOps.setStatus('deprecated')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetRcvdKB.setStatus('deprecated')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetSentKB.setStatus('deprecated')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatus.setStatus('current')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNfsOps.setStatus('deprecated')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNfsOps.setStatus('deprecated')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighCifsOps.setStatus('deprecated')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowCifsOps.setStatus('deprecated')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighHttpOps.setStatus('deprecated')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowHttpOps.setStatus('deprecated')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setStatus('deprecated')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setStatus('deprecated')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetSentBytes.setStatus('deprecated')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetSentBytes.setStatus('deprecated')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskReadBytes.setStatus('deprecated')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskReadBytes.setStatus('deprecated')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setStatus('deprecated')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setStatus('deprecated')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeReadBytes.setStatus('deprecated')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeReadBytes.setStatus('deprecated')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setStatus('deprecated')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setStatus('deprecated')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCacheAge.setStatus('current')
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setStatus('current')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatusMessage.setStatus('current')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setStatus('current')
misc64NfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NfsOps.setStatus('current')
misc64CifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64CifsOps.setStatus('current')
misc64HttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64HttpOps.setStatus('current')
misc64NetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetRcvdBytes.setStatus('current')
misc64NetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetSentBytes.setStatus('current')
misc64DiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskReadBytes.setStatus('current')
misc64DiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskWriteBytes.setStatus('current')
misc64TapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeReadBytes.setStatus('current')
misc64TapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeWriteBytes.setStatus('current')
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSettings.setStatus('current')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfState.setStatus('current')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6), ("mailboxDegraded", 7), ("partnerMailboxUninitialised", 8), ("mailboxVersionMismatch", 9), ("nvramSizeMismatch", 10), ("kernelVersionMismatch", 11), ("partnerBootingUp", 12), ("partnerPerformingRevert", 13), ("performingRevert", 14), ("partnerRequestedTakeover", 15), ("alreadyInTakenoverMode", 16), ("nvramLogUnsynchronized", 17), ("backupMailboxProblems", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCannotTakeoverCause.setStatus('current')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerStatus.setStatus('current')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setStatus('current')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerName.setStatus('current')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerSysid.setStatus('current')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfInterconnectStatus.setStatus('current')
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envOverTemperature.setStatus('current')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanCount.setStatus('current')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanMessage.setStatus('current')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setStatus('current')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setStatus('current')
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramBatteryStatus.setStatus('current')
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTime.setStatus('current')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromTimerOps.setStatus('current')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSnapshotOps.setStatus('current')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowWaterOps.setStatus('current')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromHighWaterOps.setStatus('current')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLogFullOps.setStatus('current')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpOps.setStatus('current')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotalOps.setStatus('current')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromFlushOps.setStatus('current')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSyncOps.setStatus('current')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowVbufOps.setStatus('current')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpDeferredOps.setStatus('current')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setStatus('current')
cpFromLowMbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowMbufOps.setStatus('current')
cpFromNvlogReplayTakeoverTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromNvlogReplayTakeoverTime.setStatus('current')
cDOTCpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16), )
if mibBuilder.loadTexts: cDOTCpTable.setStatus('current')
cDOTCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1), ).setIndexNames((1, "NETAPP-MIB", "cDOTCpNodeName"))
if mibBuilder.loadTexts: cDOTCpEntry.setStatus('current')
cDOTCpNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 1), DisplayString())
if mibBuilder.loadTexts: cDOTCpNodeName.setStatus('current')
cDOTCpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 2), TimeTicks64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpTime.setStatus('current')
cDOTCpFromTimerOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromTimerOps.setStatus('current')
cDOTCpFromSnapshotOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromSnapshotOps.setStatus('current')
cDOTCpFromLowWaterOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowWaterOps.setStatus('current')
cDOTCpFromHighWaterOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromHighWaterOps.setStatus('current')
cDOTCpFromLogFullOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLogFullOps.setStatus('current')
cDOTCpFromCpOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromCpOps.setStatus('current')
cDOTCpTotalOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpTotalOps.setStatus('current')
cDOTCpFromFlushOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromFlushOps.setStatus('current')
cDOTCpFromSyncOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromSyncOps.setStatus('current')
cDOTCpFromCpDeferredOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromCpDeferredOps.setStatus('current')
cDOTCpFromLowDatavecsOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowDatavecsOps.setStatus('current')
cDOTCpFromLowMbufOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromLowMbufOps.setStatus('current')
cDOTCpFromNvlogReplayTakeoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 16, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDOTCpFromNvlogReplayTakeoverTime.setStatus('current')
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("smtpFailure", 2), ("postFailure", 3), ("smtpPostFailure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatus.setStatus('current')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatusMessage.setStatus('current')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportSuccessfulSends.setStatus('current')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportFailedSends.setStatus('current')
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcCalls.setStatus('current')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadCalls.setStatus('current')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcNullRecvs.setStatus('current')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadLens.setStatus('current')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcServXDRCalls.setStatus('current')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpCalls.setStatus('current')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadCalls.setStatus('current')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpNullRecvs.setStatus('current')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadLens.setStatus('current')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setStatus('current')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpCalls.setStatus('current')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadCalls.setStatus('current')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpNullRecvs.setStatus('current')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadLens.setStatus('current')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setStatus('current')
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCalls.setStatus('current')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServBadCalls.setStatus('current')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cNulls.setStatus('current')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cGetattrs.setStatus('current')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSetattrs.setStatus('current')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRoots.setStatus('current')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLookups.setStatus('current')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReadlinks.setStatus('current')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReads.setStatus('current')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrcaches.setStatus('current')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrites.setStatus('current')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cCreates.setStatus('current')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRemoves.setStatus('current')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRenames.setStatus('current')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLinks.setStatus('current')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSymlinks.setStatus('current')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cMkdirs.setStatus('current')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRmdirs.setStatus('current')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReaddirs.setStatus('current')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cStatfss.setStatus('current')
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pNulls.setStatus('current')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pGetattrs.setStatus('current')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSetattrs.setStatus('current')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRoots.setStatus('current')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLookups.setStatus('current')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReadlinks.setStatus('current')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReads.setStatus('current')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrcaches.setStatus('current')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrites.setStatus('current')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pCreates.setStatus('current')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRemoves.setStatus('current')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRenames.setStatus('current')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLinks.setStatus('current')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSymlinks.setStatus('current')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pMkdirs.setStatus('current')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRmdirs.setStatus('current')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReaddirs.setStatus('current')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pStatfss.setStatus('current')
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccNulls.setStatus('current')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccGetattrs.setStatus('current')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSetattrs.setStatus('current')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRoots.setStatus('current')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLookups.setStatus('current')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReadlinks.setStatus('current')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReads.setStatus('current')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrcaches.setStatus('current')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrites.setStatus('current')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccCreates.setStatus('current')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRemoves.setStatus('current')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRenames.setStatus('current')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLinks.setStatus('current')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSymlinks.setStatus('current')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccMkdirs.setStatus('current')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRmdirs.setStatus('current')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReaddirs.setStatus('current')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccStatfss.setStatus('current')
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpNulls.setStatus('current')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpGetattrs.setStatus('current')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSetattrs.setStatus('current')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRoots.setStatus('current')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLookups.setStatus('current')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReadlinks.setStatus('current')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReads.setStatus('current')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrcaches.setStatus('current')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrites.setStatus('current')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpCreates.setStatus('current')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRemoves.setStatus('current')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRenames.setStatus('current')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLinks.setStatus('current')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSymlinks.setStatus('current')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpMkdirs.setStatus('current')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRmdirs.setStatus('current')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReaddirs.setStatus('current')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpStatfss.setStatus('current')
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cNulls.setStatus('current')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cGetattrs.setStatus('current')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSetattrs.setStatus('current')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLookups.setStatus('current')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cAccesss.setStatus('current')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReadlinks.setStatus('current')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReads.setStatus('current')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cWrites.setStatus('current')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCreates.setStatus('current')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMkdirs.setStatus('current')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSymlinks.setStatus('current')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMknods.setStatus('current')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRemoves.setStatus('current')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRmdirs.setStatus('current')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRenames.setStatus('current')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLinks.setStatus('current')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirs.setStatus('current')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirPluss.setStatus('current')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsstats.setStatus('current')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsinfos.setStatus('current')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cPathconfs.setStatus('current')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCommits.setStatus('current')
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pNulls.setStatus('current')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pGetattrs.setStatus('current')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSetattrs.setStatus('current')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLookups.setStatus('current')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pAccesss.setStatus('current')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReadlinks.setStatus('current')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReads.setStatus('current')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pWrites.setStatus('current')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCreates.setStatus('current')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMkdirs.setStatus('current')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSymlinks.setStatus('current')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMknods.setStatus('current')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRemoves.setStatus('current')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRmdirs.setStatus('current')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRenames.setStatus('current')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLinks.setStatus('current')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirs.setStatus('current')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirPluss.setStatus('current')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsstats.setStatus('current')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsinfos.setStatus('current')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pPathconfs.setStatus('current')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCommits.setStatus('current')
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccNulls.setStatus('current')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccGetattrs.setStatus('current')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSetattrs.setStatus('current')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLookups.setStatus('current')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccAccesss.setStatus('current')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReadlinks.setStatus('current')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReads.setStatus('current')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccWrites.setStatus('current')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCreates.setStatus('current')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMkdirs.setStatus('current')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSymlinks.setStatus('current')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMknods.setStatus('current')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRemoves.setStatus('current')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRmdirs.setStatus('current')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRenames.setStatus('current')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLinks.setStatus('current')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirs.setStatus('current')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirPluss.setStatus('current')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsstats.setStatus('current')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsinfos.setStatus('current')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccPathconfs.setStatus('current')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCommits.setStatus('current')
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpNulls.setStatus('current')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpGetattrs.setStatus('current')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSetattrs.setStatus('current')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLookups.setStatus('current')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpAccesss.setStatus('current')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReadlinks.setStatus('current')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReads.setStatus('current')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpWrites.setStatus('current')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCreates.setStatus('current')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMkdirs.setStatus('current')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSymlinks.setStatus('current')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMknods.setStatus('current')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRemoves.setStatus('current')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRmdirs.setStatus('current')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRenames.setStatus('current')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLinks.setStatus('current')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirs.setStatus('current')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirPluss.setStatus('current')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsstats.setStatus('current')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsinfos.setStatus('current')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpPathconfs.setStatus('current')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCommits.setStatus('current')
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcInProgressHits.setStatus('current')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcDelayHits.setStatus('deprecated')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMisses.setStatus('current')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemDoneHits.setStatus('current')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setStatus('current')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpInProgressHits.setStatus('current')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpDelayHits.setStatus('deprecated')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpMisses.setStatus('current')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setStatus('current')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setStatus('current')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpInProgressHits.setStatus('current')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpDelayHits.setStatus('deprecated')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpMisses.setStatus('current')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setStatus('current')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setStatus('current')
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read512Calls.setStatus('current')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read1KCalls.setStatus('current')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read2KCalls.setStatus('current')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read4KCalls.setStatus('current')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read8KCalls.setStatus('current')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read16KCalls.setStatus('current')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read32KCalls.setStatus('current')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read64KCalls.setStatus('current')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read128KCalls.setStatus('current')
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write512Calls.setStatus('current')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write1KCalls.setStatus('current')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write2KCalls.setStatus('current')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write4KCalls.setStatus('current')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write8KCalls.setStatus('current')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write16KCalls.setStatus('current')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write32KCalls.setStatus('current')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write64KCalls.setStatus('current')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write128KCalls.setStatus('current')
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read512Calls.setStatus('current')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read1KCalls.setStatus('current')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read2KCalls.setStatus('current')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read4KCalls.setStatus('current')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read8KCalls.setStatus('current')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read16KCalls.setStatus('current')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read32KCalls.setStatus('current')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read64KCalls.setStatus('current')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read128KCalls.setStatus('current')
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write512Calls.setStatus('current')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write1KCalls.setStatus('current')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write2KCalls.setStatus('current')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write4KCalls.setStatus('current')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write8KCalls.setStatus('current')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write16KCalls.setStatus('current')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write32KCalls.setStatus('current')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write64KCalls.setStatus('current')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write128KCalls.setStatus('current')
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pclTable.setStatus('current')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "pclIpAddr"))
if mibBuilder.loadTexts: pclEntry.setStatus('current')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclIpAddr.setStatus('current')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcCalls.setStatus('current')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadCalls.setStatus('current')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcNullRecvs.setStatus('current')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadLens.setStatus('current')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcServXDRCalls.setStatus('current')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsCalls.setStatus('current')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsServBadCalls.setStatus('current')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Nulls.setStatus('current')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Getattrs.setStatus('current')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Setattrs.setStatus('current')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Roots.setStatus('current')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Lookups.setStatus('current')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readlinks.setStatus('current')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Reads.setStatus('current')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setStatus('current')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Writes.setStatus('current')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Creates.setStatus('current')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Removes.setStatus('current')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Renames.setStatus('current')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Links.setStatus('current')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Symlinks.setStatus('current')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setStatus('current')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setStatus('current')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readdirs.setStatus('current')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Statfss.setStatus('current')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Nulls.setStatus('current')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Getattrs.setStatus('current')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Setattrs.setStatus('current')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Lookups.setStatus('current')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Accesss.setStatus('current')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readlinks.setStatus('current')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Reads.setStatus('current')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Writes.setStatus('current')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Creates.setStatus('current')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setStatus('current')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Symlinks.setStatus('current')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mknods.setStatus('current')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Removes.setStatus('current')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setStatus('current')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Renames.setStatus('current')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Links.setStatus('current')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readdirs.setStatus('current')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setStatus('current')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsstats.setStatus('current')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setStatus('current')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setStatus('current')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Commits.setStatus('current')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclPerCent.setStatus('current')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setStatus('current')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setStatus('current')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setStatus('current')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setStatus('current')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setStatus('current')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setStatus('current')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setStatus('current')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setStatus('current')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setStatus('current')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setStatus('current')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setStatus('current')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setStatus('current')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setStatus('current')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setStatus('current')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setStatus('current')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setStatus('current')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setStatus('current')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setStatus('current')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setStatus('current')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setStatus('current')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setStatus('current')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setStatus('current')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setStatus('current')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setStatus('current')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setStatus('current')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setStatus('current')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setStatus('current')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setStatus('current')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setStatus('current')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setStatus('current')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setStatus('current')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setStatus('current')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setStatus('current')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setStatus('current')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setStatus('current')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setStatus('current')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setStatus('current')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setStatus('current')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setStatus('current')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setStatus('current')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setStatus('current')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setStatus('current')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setStatus('current')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setStatus('current')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setStatus('current')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setStatus('current')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setStatus('current')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setStatus('current')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setStatus('current')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setStatus('current')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setStatus('current')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setStatus('current')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setStatus('current')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setStatus('current')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setStatus('current')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setStatus('current')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setStatus('current')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setStatus('current')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setStatus('current')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setStatus('current')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setStatus('current')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setStatus('current')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setStatus('current')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setStatus('current')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setStatus('current')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setStatus('current')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setStatus('current')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setStatus('current')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setStatus('current')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setStatus('current')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setStatus('current')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setStatus('current')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setStatus('current')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setStatus('current')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setStatus('current')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setStatus('current')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNumber.setStatus('current')
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcCalls.setStatus('current')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadCalls.setStatus('current')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcNullRecvs.setStatus('current')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadLens.setStatus('current')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcServXDRCalls.setStatus('current')
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsCalls.setStatus('current')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsServBadCalls.setStatus('current')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cNulls.setStatus('current')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cGetattrs.setStatus('current')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSetattrs.setStatus('current')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRoots.setStatus('current')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLookups.setStatus('current')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReadlinks.setStatus('current')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReads.setStatus('current')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrcaches.setStatus('current')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrites.setStatus('current')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cCreates.setStatus('current')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRemoves.setStatus('current')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRenames.setStatus('current')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLinks.setStatus('current')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSymlinks.setStatus('current')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cMkdirs.setStatus('current')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRmdirs.setStatus('current')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReaddirs.setStatus('current')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cStatfss.setStatus('current')
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pNulls.setStatus('current')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pGetattrs.setStatus('current')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSetattrs.setStatus('current')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRoots.setStatus('current')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLookups.setStatus('current')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReadlinks.setStatus('current')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReads.setStatus('current')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrcaches.setStatus('current')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrites.setStatus('current')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pCreates.setStatus('current')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRemoves.setStatus('current')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRenames.setStatus('current')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLinks.setStatus('current')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSymlinks.setStatus('current')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pMkdirs.setStatus('current')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRmdirs.setStatus('current')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReaddirs.setStatus('current')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pStatfss.setStatus('current')
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccNulls.setStatus('current')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccGetattrs.setStatus('current')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSetattrs.setStatus('current')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRoots.setStatus('current')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLookups.setStatus('current')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReadlinks.setStatus('current')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReads.setStatus('current')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrcaches.setStatus('current')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrites.setStatus('current')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccCreates.setStatus('current')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRemoves.setStatus('current')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRenames.setStatus('current')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLinks.setStatus('current')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSymlinks.setStatus('current')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccMkdirs.setStatus('current')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRmdirs.setStatus('current')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReaddirs.setStatus('current')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccStatfss.setStatus('current')
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpNulls.setStatus('current')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpGetattrs.setStatus('current')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSetattrs.setStatus('current')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRoots.setStatus('current')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLookups.setStatus('current')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReadlinks.setStatus('current')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReads.setStatus('current')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrcaches.setStatus('current')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrites.setStatus('current')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpCreates.setStatus('current')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRemoves.setStatus('current')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRenames.setStatus('current')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLinks.setStatus('current')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSymlinks.setStatus('current')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpMkdirs.setStatus('current')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRmdirs.setStatus('current')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReaddirs.setStatus('current')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpStatfss.setStatus('current')
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cNulls.setStatus('current')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cGetattrs.setStatus('current')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSetattrs.setStatus('current')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLookups.setStatus('current')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cAccesss.setStatus('current')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReadlinks.setStatus('current')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReads.setStatus('current')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cWrites.setStatus('current')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCreates.setStatus('current')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMkdirs.setStatus('current')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSymlinks.setStatus('current')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMknods.setStatus('current')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRemoves.setStatus('current')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRmdirs.setStatus('current')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRenames.setStatus('current')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLinks.setStatus('current')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirs.setStatus('current')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirPluss.setStatus('current')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsstats.setStatus('current')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsinfos.setStatus('current')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cPathconfs.setStatus('current')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCommits.setStatus('current')
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pNulls.setStatus('current')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pGetattrs.setStatus('current')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSetattrs.setStatus('current')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLookups.setStatus('current')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pAccesss.setStatus('current')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReadlinks.setStatus('current')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReads.setStatus('current')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pWrites.setStatus('current')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCreates.setStatus('current')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMkdirs.setStatus('current')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSymlinks.setStatus('current')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMknods.setStatus('current')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRemoves.setStatus('current')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRmdirs.setStatus('current')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRenames.setStatus('current')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLinks.setStatus('current')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirs.setStatus('current')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirPluss.setStatus('current')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsstats.setStatus('current')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsinfos.setStatus('current')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pPathconfs.setStatus('current')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCommits.setStatus('current')
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccNulls.setStatus('current')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccGetattrs.setStatus('current')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSetattrs.setStatus('current')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLookups.setStatus('current')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccAccesss.setStatus('current')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReadlinks.setStatus('current')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReads.setStatus('current')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccWrites.setStatus('current')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCreates.setStatus('current')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMkdirs.setStatus('current')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSymlinks.setStatus('current')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMknods.setStatus('current')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRemoves.setStatus('current')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRmdirs.setStatus('current')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRenames.setStatus('current')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLinks.setStatus('current')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirs.setStatus('current')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirPluss.setStatus('current')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsstats.setStatus('current')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsinfos.setStatus('current')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccPathconfs.setStatus('current')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCommits.setStatus('current')
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpNulls.setStatus('current')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpGetattrs.setStatus('current')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSetattrs.setStatus('current')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLookups.setStatus('current')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpAccesss.setStatus('current')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReadlinks.setStatus('current')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReads.setStatus('current')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpWrites.setStatus('current')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCreates.setStatus('current')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMkdirs.setStatus('current')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSymlinks.setStatus('current')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMknods.setStatus('current')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRemoves.setStatus('current')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRmdirs.setStatus('current')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRenames.setStatus('current')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLinks.setStatus('current')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirs.setStatus('current')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirPluss.setStatus('current')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsstats.setStatus('current')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsinfos.setStatus('current')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpPathconfs.setStatus('current')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCommits.setStatus('current')
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcInProgressHits.setStatus('current')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcDelayHits.setStatus('deprecated')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcMisses.setStatus('current')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemDoneHits.setStatus('current')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setStatus('current')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpInProgressHits.setStatus('current')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpDelayHits.setStatus('deprecated')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpMisses.setStatus('current')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setStatus('current')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setStatus('current')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpInProgressHits.setStatus('current')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpDelayHits.setStatus('deprecated')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpMisses.setStatus('current')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setStatus('current')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setStatus('current')
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read512Calls.setStatus('current')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read1KCalls.setStatus('current')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read2KCalls.setStatus('current')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read4KCalls.setStatus('current')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read8KCalls.setStatus('current')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read16KCalls.setStatus('current')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read32KCalls.setStatus('current')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read64KCalls.setStatus('current')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read128KCalls.setStatus('current')
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write512Calls.setStatus('current')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write1KCalls.setStatus('current')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write2KCalls.setStatus('current')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write4KCalls.setStatus('current')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write8KCalls.setStatus('current')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write16KCalls.setStatus('current')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write32KCalls.setStatus('current')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write64KCalls.setStatus('current')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write128KCalls.setStatus('current')
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read512Calls.setStatus('current')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read1KCalls.setStatus('current')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read2KCalls.setStatus('current')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read4KCalls.setStatus('current')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read8KCalls.setStatus('current')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read16KCalls.setStatus('current')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read32KCalls.setStatus('current')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read64KCalls.setStatus('current')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read128KCalls.setStatus('current')
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write512Calls.setStatus('current')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write1KCalls.setStatus('current')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write2KCalls.setStatus('current')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write4KCalls.setStatus('current')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write8KCalls.setStatus('current')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write16KCalls.setStatus('current')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write32KCalls.setStatus('current')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write64KCalls.setStatus('current')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write128KCalls.setStatus('current')
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsIsLicensed.setStatus('current')
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaState.setStatus('deprecated')
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInitPercent.setStatus('deprecated')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3), )
if mibBuilder.loadTexts: qrTable.setStatus('deprecated')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "qrIndex"))
if mibBuilder.loadTexts: qrEntry.setStatus('deprecated')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrIndex.setStatus('deprecated')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrTypeUser", 1), ("qrTypeGroup", 2), ("qrTypeTree", 3), ("qrTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrType.setStatus('deprecated')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrId.setStatus('deprecated')
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesUsed.setStatus('deprecated')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesLimit.setStatus('deprecated')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFilesUsed.setStatus('deprecated')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFileLimit.setStatus('deprecated')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrPathName.setStatus('deprecated')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4), )
if mibBuilder.loadTexts: qvStateTable.setStatus('current')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "qvStateVolume"))
if mibBuilder.loadTexts: qvStateEntry.setStatus('current')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVolume.setStatus('current')
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateName.setStatus('current')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3), ("quotaStateCorrupt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateStat.setStatus('current')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateInitPercent.setStatus('current')
qvStateVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVserver.setStatus('current')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5), )
if mibBuilder.loadTexts: qrVTable.setStatus('deprecated')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "qrVVolume"), (0, "NETAPP-MIB", "qrVIndex"))
if mibBuilder.loadTexts: qrVEntry.setStatus('deprecated')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIndex.setStatus('deprecated')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrVTypeUser", 1), ("qrVTypeGroup", 2), ("qrVTypeTree", 3), ("qrVTypeUserDefault", 4), ("qrVTypeGroupDefault", 5), ("qrVTypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVType.setStatus('deprecated')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVId.setStatus('deprecated')
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesUsed.setStatus('deprecated')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimit.setStatus('deprecated')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFilesUsed.setStatus('deprecated')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimit.setStatus('deprecated')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVPathName.setStatus('deprecated')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVVolume.setStatus('deprecated')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVTree.setStatus('deprecated')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrVIdValid", 1), ("qrVSidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIdType.setStatus('deprecated')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVSid.setStatus('deprecated')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesThreshold.setStatus('deprecated')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setStatus('deprecated')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimitSoft.setStatus('deprecated')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6), )
if mibBuilder.loadTexts: qrV2Table.setStatus('current')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "qrV2Volume"), (0, "NETAPP-MIB", "qrV2Index"))
if mibBuilder.loadTexts: qrV2Entry.setStatus('current')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Index.setStatus('current')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("qrV2TypeUser", 1), ("qrV2TypeGroup", 2), ("qrV2TypeTree", 3), ("qrV2TypeUserDefault", 4), ("qrV2TypeGroupDefault", 5), ("qrV2TypeUnknown", 6), ("qrV2TypeTreeDefault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Type.setStatus('current')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Id.setStatus('current')
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setStatus('deprecated')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setStatus('deprecated')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setStatus('current')
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setStatus('deprecated')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setStatus('deprecated')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FilesUsed.setStatus('current')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setStatus('current')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileLimit.setStatus('current')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2PathName.setStatus('current')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Volume.setStatus('current')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Tree.setStatus('current')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrV2IdValid", 1), ("qrV2SidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2IdType.setStatus('current')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Sid.setStatus('current')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setStatus('current')
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setStatus('deprecated')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setStatus('deprecated')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setStatus('current')
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setStatus('deprecated')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setStatus('deprecated')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setStatus('current')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileLimit.setStatus('current')
qrV264KBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesUsed.setStatus('current')
qrV264KBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesLimit.setStatus('current')
qrV264KBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesThreshold.setStatus('current')
qrV264KBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesSoftLimit.setStatus('current')
qrV2VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2VolumeName.setStatus('current')
qrV2Vserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Vserver.setStatus('current')
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesAvail.setStatus('deprecated')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesUsed.setStatus('deprecated')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesPossible.setStatus('deprecated')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4), )
if mibBuilder.loadTexts: dfTable.setStatus('current')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "dfIndex"))
if mibBuilder.loadTexts: dfEntry.setStatus('current')
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfIndex.setStatus('current')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfFileSys.setStatus('current')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesTotal.setStatus('deprecated')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesUsed.setStatus('deprecated')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesAvail.setStatus('deprecated')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setStatus('current')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesUsed.setStatus('current')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesFree.setStatus('current')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setStatus('current')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMountedOn.setStatus('current')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesAvail.setStatus('current')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesUsed.setStatus('current')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesPossible.setStatus('current')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighTotalKBytes.setStatus('deprecated')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowTotalKBytes.setStatus('deprecated')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighUsedKBytes.setStatus('deprecated')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowUsedKBytes.setStatus('deprecated')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighAvailKBytes.setStatus('deprecated')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowAvailKBytes.setStatus('deprecated')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unmounted", 1), ("mounted", 2), ("frozen", 3), ("destroying", 4), ("creating", 5), ("mounting", 6), ("unmounting", 7), ("nofsinfo", 8), ("replaying", 9), ("replayed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStatus.setStatus('current')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("uninitialized", 2), ("needcpcheck", 3), ("cpcheckwait", 4), ("unmirrored", 5), ("normal", 6), ("degraded", 7), ("resyncing", 8), ("failed", 9), ("limbo", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMirrorStatus.setStatus('current')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPlexCount.setStatus('current')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3), ("stripedAggregate", 4), ("stripedVolume", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfType.setStatus('current')
dfHighSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSharedKBytes.setStatus('deprecated')
dfLowSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSharedKBytes.setStatus('deprecated')
dfHighSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSavedKBytes.setStatus('deprecated')
dfLowSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSavedKBytes.setStatus('deprecated')
dfPerCentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentSaved.setStatus('current')
df64TotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalKBytes.setStatus('current')
df64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64UsedKBytes.setStatus('current')
df64AvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64AvailKBytes.setStatus('current')
df64SisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSharedKBytes.setStatus('current')
df64SisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSavedKBytes.setStatus('current')
dfVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfVserver.setStatus('current')
dfStateOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 35), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStateOnline.setStatus('current')
dfRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfRowInfo.setStatus('current')
df64CompressSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64CompressSaved.setStatus('current')
dfCompressSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfCompressSavedPercent.setStatus('current')
df64DedupeSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64DedupeSaved.setStatus('current')
dfDedupeSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfDedupeSavedPercent.setStatus('current')
df64TotalSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalSaved.setStatus('current')
dfTotalSavedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfTotalSavedPercent.setStatus('current')
df64TotalReservedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalReservedKBytes.setStatus('current')
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1), )
if mibBuilder.loadTexts: slTable.setStatus('deprecated')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "slIndex"))
if mibBuilder.loadTexts: slEntry.setStatus('deprecated')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slIndex.setStatus('deprecated')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMonth.setStatus('deprecated')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDay.setStatus('deprecated')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHour.setStatus('deprecated')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMinutes.setStatus('deprecated')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slName.setStatus('deprecated')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2), )
if mibBuilder.loadTexts: slVTable.setStatus('current')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "slVVolume"), (0, "NETAPP-MIB", "slVIndex"))
if mibBuilder.loadTexts: slVEntry.setStatus('current')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVIndex.setStatus('current')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMonth.setStatus('current')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVDay.setStatus('current')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVHour.setStatus('current')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMinutes.setStatus('current')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVName.setStatus('current')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolume.setStatus('current')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVNumber.setStatus('current')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolumeName.setStatus('current')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVType.setStatus('current')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3), )
if mibBuilder.loadTexts: slQTable.setStatus('current')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "slQVolume"), (0, "NETAPP-MIB", "slQQtree"), (0, "NETAPP-MIB", "slQIndex"))
if mibBuilder.loadTexts: slQEntry.setStatus('current')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQIndex.setStatus('current')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolume.setStatus('current')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtree.setStatus('current')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotName.setStatus('current')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotTime.setStatus('current')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeName.setStatus('current')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replica", 1), ("transitioning", 2), ("original", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeContent.setStatus('current')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSource.setStatus('current')
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSourceTime.setStatus('current')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolumeName.setStatus('current')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfNumber.setStatus('current')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("nearlyFull", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOverallStatus.setStatus('current')
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusMessage.setStatus('current')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setStatus('current')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setStatus('current')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8), )
if mibBuilder.loadTexts: volTable.setStatus('current')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1), ).setIndexNames((0, "NETAPP-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('current')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('current')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('current')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFSID.setStatus('current')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOwningHost.setStatus('current')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volState.setStatus('current')
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('current')
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOptions.setStatus('current')
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volUUID.setStatus('current')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volAggrName.setStatus('current')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traditional", 1), ("flexible", 2), ("striped", 3), ("asis", 4), ("snaplock", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volType.setStatus('current')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volClone.setStatus('current')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneOf.setStatus('current')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneSnap.setStatus('current')
volVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volVserver.setStatus('current')
volMSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMSID.setStatus('current')
volDSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDSID.setStatus('current')
volSpaceGuaranteeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSpaceGuaranteeEnabled.setStatus('current')
volSpaceGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("file", 1), ("volume", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSpaceGuarantee.setStatus('current')
volLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volLanguage.setStatus('current')
volLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volLanguageCode.setStatus('current')
volCloneChildrenList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneChildrenList.setStatus('current')
volJunctionPathActive = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPathActive.setStatus('current')
volJunctionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPath.setStatus('current')
volJunctionPathSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volJunctionPathSource.setStatus('current')
volRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volRowInfo.setStatus('current')
volNvfail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 26), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNvfail.setStatus('current')
volInNvfailedState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 27), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volInNvfailedState.setStatus('current')
volInstanceUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volInstanceUUID.setStatus('current')
volProvenanceUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volProvenanceUUID.setStatus('current')
volDrForceNvfail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 30), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDrForceNvfail.setStatus('current')
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNumber.setStatus('current')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10), )
if mibBuilder.loadTexts: qtreeTable.setStatus('current')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "qtreeVolume"), (0, "NETAPP-MIB", "qtreeIndex"))
if mibBuilder.loadTexts: qtreeEntry.setStatus('current')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIndex.setStatus('current')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolume.setStatus('current')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolumeName.setStatus('current')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeId.setStatus('current')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeName.setStatus('current')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unix", 1), ("ntfs", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStyle.setStatus('current')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStatus.setStatus('current')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeOplock.setStatus('current')
qtreeVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVserver.setStatus('current')
qtreeExportPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeExportPolicy.setStatus('current')
qtreeIsExportPolicyInherited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 11), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIsExportPolicyInherited.setStatus('current')
qtreeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeMode.setStatus('current')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11), )
if mibBuilder.loadTexts: aggrTable.setStatus('current')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "aggrIndex"))
if mibBuilder.loadTexts: aggrEntry.setStatus('current')
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrIndex.setStatus('current')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrName.setStatus('current')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFSID.setStatus('current')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwningHost.setStatus('current')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrState.setStatus('current')
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrStatus.setStatus('current')
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOptions.setStatus('current')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrUUID.setStatus('current')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFlexvollist.setStatus('current')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("traditional", 1), ("aggregate", 2), ("striped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrType.setStatus('current')
aggrRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrRaidType.setStatus('current')
aggrHAType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("cfo", 1), ("sfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrHAType.setStatus('current')
aggrOwners = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwners.setStatus('current')
aggrRowInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("partiallyAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrRowInfo.setStatus('current')
aggrVolumeFootprints = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrVolumeFootprints.setStatus('deprecated')
aggrVolumeFootprintsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrVolumeFootprintsPercent.setStatus('deprecated')
aggrFilesystemMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFilesystemMetadata.setStatus('deprecated')
aggrFilesystemMetadataPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFilesystemMetadataPercent.setStatus('deprecated')
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrNumber.setStatus('current')
volMoveStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 13), )
if mibBuilder.loadTexts: volMoveStatusTable.setStatus('current')
volMoveStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "volMoveIndex"))
if mibBuilder.loadTexts: volMoveStatusEntry.setStatus('current')
volMoveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveIndex.setStatus('current')
volMoveSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveSrcName.setStatus('current')
volMoveDstaggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveDstaggrName.setStatus('current')
volMoveCOattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveCOattempts.setStatus('current')
volMoveCOtime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveCOtime.setStatus('current')
volMoveState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volMoveState.setStatus('current')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1), )
if mibBuilder.loadTexts: raidTable.setStatus('deprecated')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('deprecated')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('deprecated')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskName.setStatus('deprecated')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("addingSpare", 7), ("spare", 8), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('deprecated')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskId.setStatus('deprecated')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiAdapter.setStatus('deprecated')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiId.setStatus('deprecated')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedMb.setStatus('deprecated')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedBlocks.setStatus('deprecated')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalMb.setStatus('deprecated')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalBlocks.setStatus('deprecated')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCompletionPerCent.setStatus('deprecated')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2), )
if mibBuilder.loadTexts: raidVTable.setStatus('current')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "raidVVol"), (0, "NETAPP-MIB", "raidVGroup"), (0, "NETAPP-MIB", "raidVIndex"))
if mibBuilder.loadTexts: raidVEntry.setStatus('current')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVIndex.setStatus('current')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskName.setStatus('current')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVStatus.setStatus('current')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskId.setStatus('deprecated')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiAdapter.setStatus('deprecated')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiId.setStatus('deprecated')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedMb.setStatus('current')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedBlocks.setStatus('deprecated')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalMb.setStatus('current')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalBlocks.setStatus('deprecated')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCompletionPerCent.setStatus('current')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVVol.setStatus('current')
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroup.setStatus('current')
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskNumber.setStatus('current')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroupNumber.setStatus('current')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPort.setStatus('deprecated')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskName.setStatus('deprecated')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setStatus('deprecated')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVShelf.setStatus('current')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVBay.setStatus('current')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlex.setStatus('current')
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexGroup.setStatus('current')
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexNumber.setStatus('current')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexName.setStatus('current')
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSectorSize.setStatus('current')
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskSerialNumber.setStatus('current')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskVendor.setStatus('current')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskModel.setStatus('current')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setStatus('current')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskRPM.setStatus('current')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskType.setStatus('current')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPool.setStatus('current')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setStatus('current')
raidVDiskUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskUID.setStatus('current')
raidV64UsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidV64UsedBlocks.setStatus('current')
raidV64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidV64TotalBlocks.setStatus('current')
raidVCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCarrierID.setStatus('current')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3), )
if mibBuilder.loadTexts: spareTable.setStatus('current')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareEntry.setStatus('current')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('current')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskName.setStatus('current')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("spare", 1), ("addingspare", 2), ("bypassed", 3), ("unknown", 4), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareStatus.setStatus('current')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskId.setStatus('deprecated')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiAdapter.setStatus('deprecated')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiId.setStatus('deprecated')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalMb.setStatus('current')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalBlocks.setStatus('deprecated')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskPort.setStatus('deprecated')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskName.setStatus('deprecated')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskPort.setStatus('deprecated')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareShelf.setStatus('current')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareBay.setStatus('current')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePool.setStatus('current')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSectorSize.setStatus('current')
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskSerialNumber.setStatus('current')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskVendor.setStatus('current')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskModel.setStatus('current')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setStatus('current')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskRPM.setStatus('current')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskType.setStatus('current')
spareDiskUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskUID.setStatus('current')
spare64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spare64TotalBlocks.setStatus('current')
spareCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareCarrierID.setStatus('current')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalCount.setStatus('current')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskActiveCount.setStatus('current')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingCount.setStatus('current')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingParityCount.setStatus('current')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVerifyingParityCount.setStatus('current')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskScrubbingCount.setStatus('current')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedCount.setStatus('current')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSpareCount.setStatus('current')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAddingSpareCount.setStatus('current')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedMessage.setStatus('current')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrefailedCount.setStatus('current')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVNumber.setStatus('current')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumber.setStatus('current')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskNumber.setStatus('current')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPNumber.setStatus('current')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9), )
if mibBuilder.loadTexts: otherDiskTable.setStatus('current')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1), ).setIndexNames((0, "NETAPP-MIB", "otherDiskIndex"))
if mibBuilder.loadTexts: otherDiskEntry.setStatus('current')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskIndex.setStatus('current')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskName.setStatus('current')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broken", 1), ("bypassed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskStatus.setStatus('current')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskId.setStatus('deprecated')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiAdapter.setStatus('deprecated')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiId.setStatus('deprecated')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalMb.setStatus('current')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalBlocks.setStatus('deprecated')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskPort.setStatus('deprecated')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setStatus('deprecated')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setStatus('deprecated')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskShelf.setStatus('current')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskBay.setStatus('current')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskPool.setStatus('current')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSectorSize.setStatus('current')
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSerialNumber.setStatus('current')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskVendor.setStatus('current')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskModel.setStatus('current')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setStatus('current')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskRPM.setStatus('current')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskType.setStatus('current')
otherDisk64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDisk64TotalBlocks.setStatus('current')
otherDiskCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskCarrierID.setStatus('current')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10), )
if mibBuilder.loadTexts: raidPTable.setStatus('current')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "raidPVol"), (0, "NETAPP-MIB", "raidPPlex"), (0, "NETAPP-MIB", "raidPGroup"), (0, "NETAPP-MIB", "raidPIndex"))
if mibBuilder.loadTexts: raidPEntry.setStatus('current')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPIndex.setStatus('current')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPStatus.setStatus('current')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPVol.setStatus('current')
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlex.setStatus('current')
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroup.setStatus('current')
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexNumber.setStatus('current')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroupNumber.setStatus('current')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskNumber.setStatus('current')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexName.setStatus('current')
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskName.setStatus('current')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPort.setStatus('deprecated')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskName.setStatus('deprecated')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setStatus('deprecated')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiAdapter.setStatus('deprecated')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiId.setStatus('deprecated')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskId.setStatus('deprecated')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPShelf.setStatus('current')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPBay.setStatus('current')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSectorSize.setStatus('current')
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedMb.setStatus('current')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedBlocks.setStatus('deprecated')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalMb.setStatus('current')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalBlocks.setStatus('deprecated')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCompletionPerCent.setStatus('current')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskSerialNumber.setStatus('current')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskVendor.setStatus('current')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskModel.setStatus('current')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setStatus('current')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskRPM.setStatus('current')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskType.setStatus('current')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPool.setStatus('current')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setStatus('current')
raidP64UsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidP64UsedBlocks.setStatus('current')
raidP64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidP64TotalBlocks.setStatus('current')
raidPCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCarrierID.setStatus('current')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11), )
if mibBuilder.loadTexts: plexTable.setStatus('current')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "plexIndex"))
if mibBuilder.loadTexts: plexEntry.setStatus('current')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexIndex.setStatus('current')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('current')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexVolName.setStatus('current')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("resyncing", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStatus.setStatus('current')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexPercentResyncing.setStatus('current')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCount.setStatus('current')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13), )
if mibBuilder.loadTexts: outOfDateDiskTable.setStatus('current')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "outOfDateDiskIndex"))
if mibBuilder.loadTexts: outOfDateDiskEntry.setStatus('current')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskIndex.setStatus('current')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskName.setStatus('current')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskId.setStatus('deprecated')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setStatus('deprecated')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiId.setStatus('deprecated')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setStatus('current')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setStatus('deprecated')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setStatus('deprecated')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setStatus('deprecated')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setStatus('deprecated')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskShelf.setStatus('current')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskBay.setStatus('current')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskPool.setStatus('current')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setStatus('current')
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setStatus('current')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskVendor.setStatus('current')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskModel.setStatus('current')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setStatus('current')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskRPM.setStatus('current')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskType.setStatus('current')
outOfDateDisk64TotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDisk64TotalBlocks.setStatus('current')
outOfDateDiskCarrierID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCarrierID.setStatus('current')
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsEnabled.setStatus('current')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLoginEnabled.setStatus('current')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsHostName.setStatus('current')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAltNames.setStatus('current')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainJoined.setStatus('current')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainName.setStatus('current')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWGName.setStatus('current')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDCName.setStatus('current')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsWinsEnabled.setStatus('current')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWinsServers.setStatus('current')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSecurityModel.setStatus('current')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPCGenericUser.setStatus('current')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOplocksEnabled.setStatus('current')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setStatus('current')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPreserveCase", 1), ("preserveCase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPreserveCase.setStatus('current')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinksEnabled.setStatus('current')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setStatus('current')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLicensed.setStatus('current')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setStatus('current')
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatus.setStatus('current')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNeedPW.setStatus('current')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTimeToShutdown.setStatus('current')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxConnections.setStatus('current')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxTrees.setStatus('current')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxShares.setStatus('current')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxFiles.setStatus('current')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxACLs.setStatus('current')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsConnectedUsers.setStatus('current')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTrees.setStatus('current')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNShares.setStatus('current')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNSessions.setStatus('current')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenFiles.setStatus('current')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenDirs.setStatus('current')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setStatus('current')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockAckWaits.setStatus('current')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSuspectOps.setStatus('current')
cifsNDomainControllers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNDomainControllers.setStatus('current')
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalOps.setStatus('current')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalCalls.setStatus('current')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsBadCalls.setStatus('current')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetAttrs.setStatus('current')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReads.setStatus('current')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWrites.setStatus('current')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLocks.setStatus('current')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpens.setStatus('current')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDirOps.setStatus('current')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOthers.setStatus('current')
cifsSetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSetAttrs.setStatus('current')
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProts.setStatus('current')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXs.setStatus('current')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXs.setStatus('current')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXs.setStatus('current')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnects.setStatus('current')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setStatus('current')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchos.setStatus('current')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancels.setStatus('current')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCreateAndXs.setStatus('current')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactCreates.setStatus('current')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaries.setStatus('current')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXs.setStatus('current')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXs.setStatus('current')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXs.setStatus('current')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeeks.setStatus('current')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushes.setStatus('current')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCloses.setStatus('current')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletes.setStatus('current')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenames.setStatus('current')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMoves.setStatus('current')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopies.setStatus('current')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setStatus('current')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setStatus('current')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setStatus('current')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setStatus('current')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirs.setStatus('current')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirs.setStatus('current')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setStatus('current')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2s.setStatus('current')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2s.setStatus('current')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setStatus('current')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setStatus('current')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setStatus('current')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFiles.setStatus('current')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueues.setStatus('current')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctls.setStatus('current')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setStatus('current')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setStatus('current')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirs.setStatus('current')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNs.setStatus('current')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOthers.setStatus('current')
smb2Echos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Echos.setStatus('current')
smb2NegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2NegProts.setStatus('current')
smb2SessionSetups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SessionSetups.setStatus('current')
smb2Logoffs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Logoffs.setStatus('current')
smb2TreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeConnects.setStatus('current')
smb2TreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeDisconnects.setStatus('current')
smb2Cancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Cancels.setStatus('current')
smb2Creates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Creates.setStatus('current')
smb2IpcCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcCreates.setStatus('current')
smb2Reads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Reads.setStatus('current')
smb2Writes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Writes.setStatus('current')
smb2IpcReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcReads.setStatus('current')
smb2IpcWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcWrites.setStatus('current')
smb2Locks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Locks.setStatus('current')
smb2UnLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2UnLocks.setStatus('current')
smb2OplkBrkAck = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2OplkBrkAck.setStatus('current')
smb2Flushs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Flushs.setStatus('current')
smb2Closes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2Closes.setStatus('current')
smb2QueryFileBasicInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileBasicInfos.setStatus('current')
smb2QueryFileStandardInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStandardInfos.setStatus('current')
smb2QueryFileInternalInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInternalInfos.setStatus('current')
smb2QueryFileEAInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileEAInfos.setStatus('current')
smb2QueryFileFullEAInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileFullEAInfos.setStatus('current')
smb2QueryFileModeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileModeInfos.setStatus('current')
smb2QueryFileAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAltNames.setStatus('current')
smb2QueryFileStreamInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStreamInfos.setStatus('current')
smb2QueryFileNetOpenInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfos.setStatus('current')
smb2QueryFileAttrTagInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfos.setStatus('current')
smb2QueryFileUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileUnsupporteds.setStatus('current')
smb2QueryFileInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInvalids.setStatus('current')
smb2QueryFsVolInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsVolInfos.setStatus('current')
smb2QueryFsSizeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsSizeInfos.setStatus('current')
smb2QueryFsDeviceInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsDeviceInfos.setStatus('current')
smb2QueryFsAttrInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsAttrInfos.setStatus('current')
smb2QueryFsFullSizeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfos.setStatus('current')
smb2QueryFsObjectIdInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfos.setStatus('current')
smb2QueryFsInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsInvalids.setStatus('current')
smb2SetBasicInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetBasicInfos.setStatus('current')
smb2SetRenameInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetRenameInfos.setStatus('current')
smb2SetFileLinkInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileLinkInfos.setStatus('current')
smb2SetFileDispInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileDispInfos.setStatus('current')
smb2SetFullEaInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFullEaInfos.setStatus('current')
smb2SetModeInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetModeInfos.setStatus('current')
smb2SetAllocInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetAllocInfos.setStatus('current')
smb2SetEofInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetEofInfos.setStatus('current')
smb2SetInfoUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoUnsupporteds.setStatus('current')
smb2SetInfoInvalids = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoInvalids.setStatus('current')
smb2FsctlPipeTransceives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipeTransceives.setStatus('current')
smb2FsctlPipePeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipePeeks.setStatus('current')
smb2FsctlEnumSnapshotss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotss.setStatus('current')
smb2FsctlDfsReferralss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlDfsReferralss.setStatus('current')
smb2FsctlSetSparses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSetSparses.setStatus('current')
smb2FsctlSecureShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSecureShares.setStatus('current')
smb2FsctlFileUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlFileUnsupporteds.setStatus('current')
smb2FsctlIpcUnsupporteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlIpcUnsupporteds.setStatus('current')
smb2QueryDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryDirs.setStatus('current')
smb2ChgNfys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ChgNfys.setStatus('current')
smb2QuerySecurityInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QuerySecurityInfos.setStatus('current')
smb2SetSecurityInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetSecurityInfos.setStatus('current')
smb2QueryFileAccessInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAccessInfos.setStatus('current')
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setStatus('current')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreates.setStatus('current')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirs.setStatus('current')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNews.setStatus('current')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReads.setStatus('current')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRanges.setStatus('current')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpens.setStatus('current')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXs.setStatus('current')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExits.setStatus('current')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfos.setStatus('current')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setStatus('current')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReads.setStatus('current')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXs.setStatus('current')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRaws.setStatus('current')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchs.setStatus('current')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfos.setStatus('current')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2s.setStatus('current')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setStatus('current')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setStatus('current')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnects.setStatus('current')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setStatus('current')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWrites.setStatus('current')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setStatus('current')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setStatus('current')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXs.setStatus('current')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setStatus('current')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRaws.setStatus('current')
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProtPct.setStatus('current')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setStatus('current')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXPct.setStatus('current')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setStatus('current')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setStatus('current')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setStatus('current')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchoPct.setStatus('current')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelPct.setStatus('current')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateAndXPct.setStatus('current')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTransactCreatePct.setStatus('current')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaryPct.setStatus('current')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXPct.setStatus('current')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXPct.setStatus('current')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXPct.setStatus('current')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeekPct.setStatus('current')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushPct.setStatus('current')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbClosePct.setStatus('current')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletePct.setStatus('current')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenamePct.setStatus('current')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMovePct.setStatus('current')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopyPct.setStatus('current')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setStatus('current')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setStatus('current')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setStatus('current')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setStatus('current')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirPct.setStatus('current')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirPct.setStatus('current')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setStatus('current')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setStatus('current')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2Pct.setStatus('current')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setStatus('current')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setStatus('current')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setStatus('current')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFilePct.setStatus('current')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueuePct.setStatus('current')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setStatus('current')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setStatus('current')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setStatus('current')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setStatus('current')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNPct.setStatus('current')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOtherPct.setStatus('current')
smb2EchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2EchoPct.setStatus('current')
smb2NegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2NegProtPct.setStatus('current')
smb2SessionSetupPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SessionSetupPct.setStatus('current')
smb2LogoffPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2LogoffPct.setStatus('current')
smb2TreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeConnectPct.setStatus('current')
smb2TreeDisconnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2TreeDisconnectPct.setStatus('current')
smb2CancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2CancelPct.setStatus('current')
smb2CreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2CreatePct.setStatus('current')
smb2IpcCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcCreatePct.setStatus('current')
smb2ReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ReadPct.setStatus('current')
smb2WritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2WritePct.setStatus('current')
smb2IpcReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcReadPct.setStatus('current')
smb2IpcWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2IpcWritePct.setStatus('current')
smb2LockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2LockPct.setStatus('current')
smb2UnLockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2UnLockPct.setStatus('current')
smb2OplkBrkAckPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2OplkBrkAckPct.setStatus('current')
smb2FlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FlushPct.setStatus('current')
smb2ClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2ClosePct.setStatus('current')
smb2QueryFileBasicInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileBasicInfoPct.setStatus('current')
smb2QueryFileStandardInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStandardInfoPct.setStatus('current')
smb2QueryFileInternalInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInternalInfoPct.setStatus('current')
smb2QueryFileEAInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileEAInfoPct.setStatus('current')
smb2QueryFileFullEAInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileFullEAInfoPct.setStatus('current')
smb2QueryFileModeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileModeInfoPct.setStatus('current')
smb2QueryFileAltNamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAltNamePct.setStatus('current')
smb2QueryFileStreamInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileStreamInfoPct.setStatus('current')
smb2QueryFileNetOpenInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileNetOpenInfoPct.setStatus('current')
smb2QueryFileAttrTagInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileAttrTagInfoPct.setStatus('current')
smb2QueryFileUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileUnsupportedPct.setStatus('current')
smb2QueryFileInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFileInvalidPct.setStatus('current')
smb2QueryFsVolInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsVolInfoPct.setStatus('current')
smb2QueryFsSizeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsSizeInfoPct.setStatus('current')
smb2QueryFsDeviceInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsDeviceInfoPct.setStatus('current')
smb2QueryFsAttrInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsAttrInfoPct.setStatus('current')
smb2QueryFsFullSizeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsFullSizeInfoPct.setStatus('current')
smb2QueryFsObjectIdInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsObjectIdInfoPct.setStatus('current')
smb2QueryFsInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryFsInvalidPct.setStatus('current')
smb2SetBasicInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetBasicInfoPct.setStatus('current')
smb2SetRenameInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetRenameInfoPct.setStatus('current')
smb2SetFileLinkInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileLinkInfoPct.setStatus('current')
smb2SetFileDispInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFileDispInfoPct.setStatus('current')
smb2SetFullEaInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetFullEaInfoPct.setStatus('current')
smb2SetModeInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetModeInfoPct.setStatus('current')
smb2SetAllocInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetAllocInfoPct.setStatus('current')
smb2SetEofInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetEofInfoPct.setStatus('current')
smb2SetInfoUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoUnsupportedPct.setStatus('current')
smb2SetInfoInvalidPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2SetInfoInvalidPct.setStatus('current')
smb2FsctlPipeTransceivePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipeTransceivePct.setStatus('current')
smb2FsctlPipePeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlPipePeekPct.setStatus('current')
smb2FsctlEnumSnapshotsPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlEnumSnapshotsPct.setStatus('current')
smb2FsctlDfsReferralsPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlDfsReferralsPct.setStatus('current')
smb2FsctlSetSparsePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSetSparsePct.setStatus('current')
smb2FsctlSecureSharePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlSecureSharePct.setStatus('current')
smb2FsctlFileUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlFileUnsupportedPct.setStatus('current')
smb2FsctlIpcUnsupportedPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2FsctlIpcUnsupportedPct.setStatus('current')
smb2QueryDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smb2QueryDirPct.setStatus('current')
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setStatus('current')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreatePct.setStatus('current')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirPct.setStatus('current')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNewPct.setStatus('current')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setStatus('current')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setStatus('current')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenPct.setStatus('current')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setStatus('current')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExitPct.setStatus('current')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setStatus('current')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setStatus('current')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadPct.setStatus('current')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXPct.setStatus('current')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRawPct.setStatus('current')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchPct.setStatus('current')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfoPct.setStatus('current')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setStatus('current')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setStatus('current')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setStatus('current')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setStatus('current')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setStatus('current')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePct.setStatus('current')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setStatus('current')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setStatus('current')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setStatus('current')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setStatus('current')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRawPct.setStatus('current')
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCancelLocks.setStatus('current')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWaitLocks.setStatus('current')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCopyToAligns.setStatus('current')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmalls.setStatus('current')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLarges.setStatus('current')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmallRels.setStatus('current')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLargeRels.setStatus('current')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMbufWaits.setStatus('current')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNbtWaits.setStatus('current')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCwaWaits.setStatus('current')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMultipleVCs.setStatus('current')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPDCUpcalls.setStatus('current')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setStatus('current')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNBTDisconnects.setStatus('current')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSMBDisconnects.setStatus('current')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDupDisconnects.setStatus('current')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setStatus('current')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setStatus('current')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setStatus('current')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setStatus('current')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setStatus('current')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setStatus('current')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharingErrorRetries.setStatus('current')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setStatus('current')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setStatus('current')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setStatus('current')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setStatus('current')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setStatus('current')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClearTextPasswd.setStatus('current')
cifsSmb2MidUsedHash = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidUsedHash.setStatus('current')
cifsSmb2MidUnusedHash = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidUnusedHash.setStatus('current')
cifsSmb2MidInvReject = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2MidInvReject.setStatus('current')
cifsSmb2DurableCreateReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableCreateReceived.setStatus('current')
cifsSmb2DurableCreateSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableCreateSucceeded.setStatus('current')
cifsSmb2DurableReclaimReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableReclaimReceived.setStatus('current')
cifsSmb2DurableReclaimSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableReclaimSucceeded.setStatus('current')
cifsSmb2DurableHandlePreserved = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandlePreserved.setStatus('current')
cifsSmb2DurableHandlePurged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandlePurged.setStatus('current')
cifsSmb2DurableHandleExpired = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2DurableHandleExpired.setStatus('current')
cifsSmb2FileDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileDirInfo.setStatus('current')
cifsSmb2FileFullDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileFullDirInfo.setStatus('current')
cifsSmb2FileIdFullDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileIdFullDirInfo.setStatus('current')
cifsSmb2FileBothDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileBothDirInfo.setStatus('current')
cifsSmb2FileIdBothDirInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileIdBothDirInfo.setStatus('current')
cifsSmb2FileNamesInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileNamesInfo.setStatus('current')
cifsSmb2FileDirUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileDirUnsupported.setStatus('current')
cifsSmb2QueryInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2QueryInfo.setStatus('current')
cifsSmb2SetInfo = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2SetInfo.setStatus('current')
cifsSmb2Ioctl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2Ioctl.setStatus('current')
cifsSmb2RelatedCompRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2RelatedCompRequest.setStatus('current')
cifsSmb2UnRelatedCompRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2UnRelatedCompRequest.setStatus('current')
cifsSmb2FileRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2FileRequest.setStatus('current')
cifsSmb2PipeRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2PipeRequest.setStatus('current')
cifsSmb2Unsupported = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2Unsupported.setStatus('current')
cifsSmb2InvalidSignatures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSmb2InvalidSignatures.setStatus('current')
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsEnabled.setStatus('current')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsLicensed.setStatus('current')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIsEnabled.setStatus('current')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpIsEnabled.setStatus('current')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsEnabled.setStatus('current')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsLicensed.setStatus('current')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setStatus('current')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setStatus('current')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setStatus('current')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setStatus('current')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setStatus('current')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setStatus('current')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setStatus('current')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setStatus('current')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setStatus('current')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsEnabled.setStatus('current')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsLicensed.setStatus('current')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setStatus('current')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setStatus('current')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setStatus('current')
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setStatus('current')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setStatus('current')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCdIsEnabled.setStatus('current')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setStatus('current')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setStatus('current')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCmsIsEnabled.setStatus('current')
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncVersion.setStatus('current')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAdminPort.setStatus('current')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amNumber.setStatus('current')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitor.setStatus('current')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitorString.setStatus('current')
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: amTable.setStatus('current')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "amIndex"))
if mibBuilder.loadTexts: amEntry.setStatus('current')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amIndex.setStatus('current')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amAddress.setStatus('current')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPort.setStatus('current')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("up", 2), ("down", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amStatus.setStatus('current')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigChanged.setStatus('current')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigVersion.setStatus('current')
grmMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitorToggle = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorToggle.setStatus('current')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorString.setStatus('current')
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverAddrs.setStatus('current')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("takingover", 2), ("takenover", 3), ("giveback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverMode.setStatus('current')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("unknown", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverStatus.setStatus('current')
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncObjectsStored.setStatus('current')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToClients.setStatus('current')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromClients.setStatus('current')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToServers.setStatus('current')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromServers.setStatus('current')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRequests.setStatus('current')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHitRequests.setStatus('current')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpMissRequests.setStatus('current')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpServConns.setStatus('current')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpCliConns.setStatus('current')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavings.setStatus('current')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitrate.setStatus('current')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setStatus('current')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgRespTime.setStatus('current')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setStatus('current')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setStatus('current')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setStatus('current')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setStatus('current')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setStatus('current')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRespTime.setStatus('current')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setStatus('current')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setStatus('current')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToClients.setStatus('current')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromClients.setStatus('current')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToServers.setStatus('current')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromServers.setStatus('current')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setStatus('current')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setStatus('current')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setStatus('current')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setStatus('current')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setStatus('current')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setStatus('current')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpReqRate.setStatus('current')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setStatus('current')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setStatus('current')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setStatus('current')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setStatus('current')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setStatus('current')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setStatus('current')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveServConns.setStatus('current')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveCliConns.setStatus('current')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37), )
if mibBuilder.loadTexts: ncHttpAccelTable.setStatus('current')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1), ).setIndexNames((0, "NETAPP-MIB", "ncHttpAccelIndex"))
if mibBuilder.loadTexts: ncHttpAccelEntry.setStatus('current')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelIndex.setStatus('current')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setStatus('current')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setStatus('current')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelHits.setStatus('current')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38), )
if mibBuilder.loadTexts: ncHttpsAccelTable.setStatus('current')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1), ).setIndexNames((0, "NETAPP-MIB", "ncHttpsAccelIndex"))
if mibBuilder.loadTexts: ncHttpsAccelEntry.setStatus('current')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelIndex.setStatus('current')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setStatus('current')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setStatus('current')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelHits.setStatus('current')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpTotalRequests.setStatus('current')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCacheableRequests.setStatus('current')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpProxyRequests.setStatus('current')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpServConns.setStatus('current')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCliConns.setStatus('current')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBWSavings.setStatus('current')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setStatus('current')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToClients.setStatus('current')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromClients.setStatus('current')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToServers.setStatus('current')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromServers.setStatus('current')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpObjHitrate.setStatus('current')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveServConns.setStatus('current')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveCliConns.setStatus('current')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpTotalRequests.setStatus('current')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpHitRequests.setStatus('current')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpMissRequests.setStatus('current')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpServConns.setStatus('current')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpCliConns.setStatus('current')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBWSavings.setStatus('current')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setStatus('current')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToClients.setStatus('current')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromClients.setStatus('current')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToServers.setStatus('current')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromServers.setStatus('current')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpObjHitrate.setStatus('current')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveServConns.setStatus('current')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveCliConns.setStatus('current')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingServConns.setStatus('current')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingCliConns.setStatus('current')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingBWSavings.setStatus('current')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setStatus('current')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingHitRequests.setStatus('current')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMissRequests.setStatus('current')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingTotalRequests.setStatus('current')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setStatus('current')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setStatus('current')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setStatus('current')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setStatus('current')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setStatus('current')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setStatus('current')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setStatus('current')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setStatus('current')
ncStreamingOBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTClients.setStatus('current')
ncStreamingOBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFClients.setStatus('current')
ncStreamingOBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTServers.setStatus('current')
ncStreamingOBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFServers.setStatus('current')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingObjHitrate.setStatus('current')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setStatus('current')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setStatus('current')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setStatus('current')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setStatus('current')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setStatus('current')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setStatus('current')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setStatus('current')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setStatus('current')
ncStreamingQTBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTClients.setStatus('current')
ncStreamingQTBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFClients.setStatus('current')
ncStreamingQTBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTServers.setStatus('current')
ncStreamingQTBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFServers.setStatus('current')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setStatus('current')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setStatus('current')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setStatus('current')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setStatus('current')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setStatus('current')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveServConns.setStatus('current')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setStatus('current')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setStatus('current')
ncStreamingRtspWMBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFClients.setStatus('current')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setStatus('current')
ncStreamingRtspWMBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFServers.setStatus('current')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setStatus('current')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45), )
if mibBuilder.loadTexts: ncStreamingAccelTable.setStatus('current')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1), ).setIndexNames((0, "NETAPP-MIB", "ncStreamingAccelIndex"))
if mibBuilder.loadTexts: ncStreamingAccelEntry.setStatus('current')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelIndex.setStatus('current')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setStatus('current')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setStatus('current')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelHits.setStatus('current')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setStatus('current')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncTotalBWSavings.setStatus('current')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsRequestsReceived.setStatus('current')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheHits.setStatus('current')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheMisses.setStatus('current')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setStatus('current')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setStatus('current')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setStatus('current')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setStatus('current')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setStatus('current')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setStatus('current')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setStatus('current')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setStatus('current')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setStatus('current')
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setStatus('current')
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setStatus('current')
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setStatus('current')
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setStatus('current')
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemTotal.setStatus('current')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemFree.setStatus('current')
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorOn.setStatus('current')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setStatus('current')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setStatus('current')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupNumber.setStatus('current')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setStatus('current')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setStatus('current')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupAborts.setStatus('current')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setStatus('current')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setStatus('current')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setStatus('current')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorReadBytes.setStatus('current')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setStatus('current')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setStatus('current')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setStatus('current')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setStatus('current')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setStatus('current')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setStatus('current')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setStatus('current')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIsLicensed.setStatus('current')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20), )
if mibBuilder.loadTexts: snapmirrorStatusTable.setStatus('current')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorIndex"))
if mibBuilder.loadTexts: snapmirrorStatusEntry.setStatus('current')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIndex.setStatus('current')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSrc.setStatus('current')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorDst.setStatus('current')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("migrating", 5), ("quiescing", 6), ("resyncing", 7), ("waiting", 8), ("syncing", 9), ("inSync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorStatus.setStatus('current')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapmirrored", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorState.setStatus('current')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLag.setStatus('current')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setStatus('current')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setStatus('current')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalFailures.setStatus('current')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setStatus('current')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setStatus('current')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setStatus('current')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorThrottleValue.setStatus('current')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setStatus('current')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setStatus('current')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransType.setStatus('current')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setStatus('current')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setStatus('current')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSchedule.setStatus('current')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setStatus('current')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorArguments.setStatus('current')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setStatus('current')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21), )
if mibBuilder.loadTexts: snapmirrorConnTable.setStatus('current')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorConnIndex"))
if mibBuilder.loadTexts: snapmirrorConnEntry.setStatus('current')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnIndex.setStatus('current')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnName.setStatus('current')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi", 1), ("failover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnType.setStatus('current')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc1.setStatus('current')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst1.setStatus('current')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc2.setStatus('current')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst2.setStatus('current')
snapmirrorRelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 29, 1), )
if mibBuilder.loadTexts: snapmirrorRelStatusTable.setStatus('current')
snapmirrorRelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "snapmirrorRelIndex"))
if mibBuilder.loadTexts: snapmirrorRelStatusEntry.setStatus('current')
snapmirrorRelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelIndex.setStatus('current')
snapmirrorRelSrcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelSrcPath.setStatus('current')
snapmirrorRelDestPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelDestPath.setStatus('current')
snapmirrorRelType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dp", 0), ("ls", 1), ("xdp", 2), ("rst", 3), ("tdp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelType.setStatus('current')
snapmirrorRelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 0), ("transferring", 1), ("restoring", 2), ("checking", 3), ("quiescing", 4), ("quiesced", 5), ("queued", 6), ("preparing", 7), ("waiting", 8), ("finalizing", 9), ("resyncing", 10), ("aborting", 11), ("breaking", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelStatus.setStatus('current')
snapmirrorRelState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uninitialized", 0), ("snapmirrored", 1), ("brokenOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelState.setStatus('current')
snapmirrorRelLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLag.setStatus('current')
snapmirrorRelThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelThrottleValue.setStatus('current')
snapmirrorRelSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelSchedule.setStatus('current')
snapmirrorRelPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelPolicy.setStatus('current')
snapmirrorRelTransferSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTransferSnapshot.setStatus('current')
snapmirrorRelNewestSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshot.setStatus('current')
snapmirrorRelNewestSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelNewestSnapshotTimeStamp.setStatus('current')
snapmirrorRelExportedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshot.setStatus('current')
snapmirrorRelExportedSnapshotTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelExportedSnapshotTimeStamp.setStatus('current')
snapmirrorRelHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelHealthy.setStatus('current')
snapmirrorRelUnHealthyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUnHealthyReason.setStatus('current')
snapmirrorRelLastTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 0), ("update", 1), ("resync", 2), ("restore", 3), ("check", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferType.setStatus('current')
snapmirrorRelLastTransferError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferError.setStatus('current')
snapmirrorRelLastTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferSize.setStatus('current')
snapmirrorRelLastTransferTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelLastTransferTimeSeconds.setStatus('current')
snapmirrorRelGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("flexvol", 0), ("infinitevol-dr", 1), ("vserver-dr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelGroupType.setStatus('current')
snapmirrorRelVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelVserver.setStatus('current')
snapmirrorRelUpdateSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUpdateSuccCnt.setStatus('current')
snapmirrorRelUpdateFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelUpdateFailCnt.setStatus('current')
snapmirrorRelResyncSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelResyncSuccCnt.setStatus('current')
snapmirrorRelResyncFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelResyncFailCnt.setStatus('current')
snapmirrorRelBreakSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelBreakSuccCnt.setStatus('current')
snapmirrorRelBreakFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelBreakFailCnt.setStatus('current')
snapmirrorRelTotalTransBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTotalTransBytes.setStatus('current')
snapmirrorRelTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 29, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRelTotalTransTimeSeconds.setStatus('current')
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svOn.setStatus('current')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveDstNumber.setStatus('current')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setStatus('current')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setStatus('current')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setStatus('current')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setStatus('current')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setStatus('current')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setStatus('current')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrimaryIsLicensed.setStatus('current')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecondaryIsLicensed.setStatus('current')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11), )
if mibBuilder.loadTexts: snapvaultStatusTable.setStatus('current')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "svIndex"))
if mibBuilder.loadTexts: snapvaultStatusEntry.setStatus('current')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svIndex.setStatus('current')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrc.setStatus('current')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDst.setStatus('current')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("quiescing", 6), ("resyncing", 7), ("paused", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatus.setStatus('current')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapvaulted", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6), ("restoring", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svState.setStatus('current')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLag.setStatus('current')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalSuccesses.setStatus('current')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalRestartSuccesses.setStatus('current')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalFailures.setStatus('current')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalDeferments.setStatus('current')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransMBs.setStatus('current')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setStatus('current')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svThrottleValue.setStatus('current')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrcSnapshotTime.setStatus('current')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svBaseSnapshot.setStatus('current')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransType.setStatus('current')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransMBs.setStatus('current')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransTimeSeconds.setStatus('current')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12), )
if mibBuilder.loadTexts: snapvaultHostTable.setStatus('current')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1), ).setIndexNames((0, "NETAPP-MIB", "svHostIndex"))
if mibBuilder.loadTexts: snapvaultHostEntry.setStatus('current')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostIndex.setStatus('current')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostName.setStatus('current')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostType.setStatus('current')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalSuccesses.setStatus('current')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalFailures.setStatus('current')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalDeferments.setStatus('current')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13), )
if mibBuilder.loadTexts: snapvaultSchedTable.setStatus('current')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1), ).setIndexNames((0, "NETAPP-MIB", "svSchedIndex"))
if mibBuilder.loadTexts: snapvaultSchedEntry.setStatus('current')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedIndex.setStatus('current')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedVolume.setStatus('current')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSnapshot.setStatus('current')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("queued", 2), ("active", 3), ("aborting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedStatus.setStatus('current')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("xfer", 2), ("create", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedType.setStatus('current')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSchedule.setStatus('current')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setStatus('current')
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpOn.setStatus('obsolete')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpSessionOpened.setStatus('obsolete')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupActive.setStatus('obsolete')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreActive.setStatus('obsolete')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpTapeActive.setStatus('obsolete')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupSuccesses.setStatus('obsolete')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setStatus('obsolete')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailures.setStatus('obsolete')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailures.setStatus('obsolete')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailureReason.setStatus('obsolete')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setStatus('obsolete')
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdOn.setStatus('current')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdCurrentConns.setStatus('current')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdMaxConns.setStatus('current')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdTotalConns.setStatus('current')
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricInstances.setStatus('current')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2), )
if mibBuilder.loadTexts: fabricTable.setStatus('current')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "fabricIndex"))
if mibBuilder.loadTexts: fabricEntry.setStatus('current')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricIndex.setStatus('current')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatus.setStatus('current')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatusMessage.setStatus('current')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricName.setStatus('current')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("other", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricOwner.setStatus('current')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3), )
if mibBuilder.loadTexts: switchTable.setStatus('current')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "switchFabricIndex"), (0, "NETAPP-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('current')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIndex.setStatus('current')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchName.setStatus('current')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSymbolicName.setStatus('current')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hub", 1), ("switch", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('current')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDomain.setStatus('current')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchManagementId.setStatus('current')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatus.setStatus('current')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatusMessage.setStatus('current')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLinkSpeed.setStatus('current')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsProcessed.setStatus('deprecated')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsProcessed.setStatus('deprecated')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsRejected.setStatus('deprecated')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsRejected.setStatus('deprecated')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFabricIndex.setStatus('current')
switch64PacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsProcessed.setStatus('current')
switch64PacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsRejected.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "portFabricIndex"), (0, "NETAPP-MIB", "portSwitchIndex"), (0, "NETAPP-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchIndex.setStatus('current')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchName.setStatus('current')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unidentified", 1), ("nPort", 2), ("nlPort", 3), ("fPort", 4), ("flPort", 5), ("ePort", 6), ("bPort", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('current')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFabricIndex.setStatus('current')
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpActives.setStatus('obsolete')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpAttempts.setStatus('obsolete')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpSuccesses.setStatus('obsolete')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpFailures.setStatus('obsolete')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5), )
if mibBuilder.loadTexts: dmpTable.setStatus('obsolete')
dmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "dmpIndex"))
if mibBuilder.loadTexts: dmpEntry.setStatus('obsolete')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpIndex.setStatus('obsolete')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStPath.setStatus('obsolete')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStAttempts.setStatus('obsolete')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStSuccesses.setStatus('obsolete')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStFailures.setStatus('obsolete')
dmpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpTime.setStatus('obsolete')
dmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("restartable", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStatus.setStatus('obsolete')
dmpLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpLevel.setStatus('obsolete')
dmpNumFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpNumFiles.setStatus('obsolete')
dmpDataAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDataAmount.setStatus('obsolete')
dmpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStartTime.setStatus('obsolete')
dmpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDuration.setStatus('obsolete')
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstActives.setStatus('obsolete')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstAttempts.setStatus('obsolete')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstSuccesses.setStatus('obsolete')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstFailures.setStatus('obsolete')
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsIsLicensed.setStatus('obsolete')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestsServer.setStatus('obsolete')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequests.setStatus('obsolete')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestSize.setStatus('current')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxResponseSize.setStatus('current')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setStatus('obsolete')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsUseChecksums.setStatus('current')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setStatus('obsolete')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setStatus('current')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerEnabled.setStatus('current')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultUid.setStatus('current')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultGid.setStatus('current')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setStatus('current')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setStatus('current')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2), )
if mibBuilder.loadTexts: dafsNicTable.setStatus('current')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsNicIndex"))
if mibBuilder.loadTexts: dafsNicEntry.setStatus('current')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicIndex.setStatus('current')
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicName.setStatus('current')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDevice.setStatus('current')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicState.setStatus('current')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicListenAddr.setStatus('current')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setStatus('obsolete')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicInBytes.setStatus('current')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectInBytes.setStatus('current')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicOutBytes.setStatus('current')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setStatus('current')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsPendingRequests.setStatus('obsolete')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCurrentRequests.setStatus('obsolete')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCalls.setStatus('current')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientAuths.setStatus('current')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnects.setStatus('current')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnectAuths.setStatus('current')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsConnectBinds.setStatus('current')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDisconnects.setStatus('current')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRegisterCreds.setStatus('current')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReleaseCreds.setStatus('current')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSecinfos.setStatus('current')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerAuths.setStatus('current')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCheckResponses.setStatus('current')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsFetchResponses.setStatus('current')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDiscardResponses.setStatus('current')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAccesses.setStatus('current')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCacheHints.setStatus('current')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCloses.setStatus('current')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCommits.setStatus('current')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCreates.setStatus('current')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegPurges.setStatus('current')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegReturns.setStatus('current')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFsattrs.setStatus('current')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetRootHandles.setStatus('current')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrInlines.setStatus('current')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrDirects.setStatus('current')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLinks.setStatus('current')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLocks.setStatus('current')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockts.setStatus('current')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockus.setStatus('current')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUps.setStatus('current')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUpps.setStatus('current')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNulls.setStatus('current')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNverifys.setStatus('current')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpens.setStatus('current')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenDowngrades.setStatus('current')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenattrs.setStatus('current')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadInlines.setStatus('current')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadDirects.setStatus('current')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirInlines.setStatus('current')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirDirects.setStatus('current')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkInlines.setStatus('current')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkDirects.setStatus('current')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRemoves.setStatus('current')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRenames.setStatus('current')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrInlines.setStatus('current')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrDirects.setStatus('current')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsVerifys.setStatus('current')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBatchSubmits.setStatus('current')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteInlines.setStatus('current')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteDirects.setStatus('current')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcGetattrs.setStatus('current')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcNulls.setStatus('current')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcRecalls.setStatus('current')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcBatchCompletions.setStatus('current')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendInlines.setStatus('current')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendDirects.setStatus('current')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFencingLists.setStatus('current')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetFencingLists.setStatus('current')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsHurryUps.setStatus('current')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsInBytes.setStatus('current')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectInBytes.setStatus('current')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOutBytes.setStatus('current')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectOutBytes.setStatus('current')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5), )
if mibBuilder.loadTexts: dafsSessionTable.setStatus('current')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsSessionIndex"))
if mibBuilder.loadTexts: dafsSessionEntry.setStatus('current')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionIndex.setStatus('current')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionId.setStatus('current')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionEndian.setStatus('current')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setStatus('current')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setStatus('current')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionUseChecksums.setStatus('current')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setStatus('current')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setStatus('current')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setStatus('current')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequests.setStatus('current')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setStatus('current')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientIdString.setStatus('current')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientVerifier.setStatus('current')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumCredentials.setStatus('current')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumRequests.setStatus('current')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6), )
if mibBuilder.loadTexts: dafsExportTable.setStatus('current')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "dafsExportIndex"))
if mibBuilder.loadTexts: dafsExportEntry.setStatus('current')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportIndex.setStatus('current')
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportName.setStatus('current')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportPath.setStatus('current')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportEnabled.setStatus('current')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("readmostly", 2), ("readonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportRwMode.setStatus('current')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportAccessList.setStatus('current')
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNodeSystemName.setStatus('current')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCreated.setStatus('current')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectRequest.setStatus('current')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectWait.setStatus('current')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaDisconnect.setStatus('current')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectTimeOut.setStatus('current')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnected.setStatus('current')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectPending.setStatus('current')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setStatus('current')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnected.setStatus('current')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrError.setStatus('current')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaTotalError.setStatus('current')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInMsgs.setStatus('current')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRdma.setStatus('current')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInBytes.setStatus('current')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAReadBytes.setStatus('current')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setStatus('current')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutMsgs.setStatus('current')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRdma.setStatus('current')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutBytes.setStatus('current')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setStatus('current')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setStatus('current')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23), )
if mibBuilder.loadTexts: viaConnTable.setStatus('current')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1), ).setIndexNames((0, "NETAPP-MIB", "viaConnVINumber"))
if mibBuilder.loadTexts: viaConnEntry.setStatus('current')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("pendingConnect", 2), ("connected", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnState.setStatus('current')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnVINumber.setStatus('current')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setStatus('current')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalNetAddress.setStatus('current')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemotePortNumber.setStatus('current')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalPortNumber.setStatus('current')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalDescriminator.setStatus('current')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setStatus('current')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setStatus('current')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setStatus('current')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setStatus('current')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setStatus('current')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setStatus('current')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setStatus('current')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentMessages.setStatus('current')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setStatus('current')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setStatus('current')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdMessages.setStatus('current')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setStatus('current')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setStatus('current')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrPostDesc.setStatus('current')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrConnLost.setStatus('current')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRecvQEmpty.setStatus('current')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmawProt.setStatus('current')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmarProt.setStatus('current')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrCompProt.setStatus('current')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrorThreshold.setStatus('current')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1), )
if mibBuilder.loadTexts: viaNicTable.setStatus('current')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "viaNicIndex"))
if mibBuilder.loadTexts: viaNicEntry.setStatus('current')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicIndex.setStatus('current')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaName.setStatus('current')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaHardwareVersion.setStatus('current')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaProviderVersion.setStatus('current')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicAddress.setStatus('current')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaThreadSafe.setStatus('current')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setStatus('current')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBytes.setStatus('current')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterRegions.setStatus('current')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setStatus('current')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxVI.setStatus('current')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setStatus('current')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setStatus('current')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQ.setStatus('current')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQEntries.setStatus('current')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxTransferSize.setStatus('current')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNativeMTU.setStatus('current')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxPTags.setStatus('current')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterBytes.setStatus('current')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterRegions.setStatus('current')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrVI.setStatus('current')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrCQ.setStatus('current')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrPTags.setStatus('current')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectionListenPort.setStatus('current')
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfilerIsLicensed.setStatus('current')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFilers.setStatus('current')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3), )
if mibBuilder.loadTexts: vfTable.setStatus('current')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "vfIndex"))
if mibBuilder.loadTexts: vfEntry.setStatus('current')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIndex.setStatus('current')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfName.setStatus('current')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfUuid.setStatus('current')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddresses.setStatus('current')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfStoragePaths.setStatus('current')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpSpace.setStatus('current')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfAllowedProtocols.setStatus('current')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDisallowedProtocols.setStatus('current')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfState.setStatus('current')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4), )
if mibBuilder.loadTexts: vfIpTable.setStatus('current')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFiIndex"), (0, "NETAPP-MIB", "vfIpIndex"))
if mibBuilder.loadTexts: vfIpEntry.setStatus('current')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFiIndex.setStatus('current')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpIndex.setStatus('current')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddr.setStatus('current')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5), )
if mibBuilder.loadTexts: vfSpTable.setStatus('current')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFsIndex"), (0, "NETAPP-MIB", "vfSpIndex"))
if mibBuilder.loadTexts: vfSpEntry.setStatus('current')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFsIndex.setStatus('current')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpIndex.setStatus('current')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpName.setStatus('current')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6), )
if mibBuilder.loadTexts: vfProTable.setStatus('current')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1), ).setIndexNames((0, "NETAPP-MIB", "vfFpIndex"), (0, "NETAPP-MIB", "vfProIndex"))
if mibBuilder.loadTexts: vfProEntry.setStatus('current')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFpIndex.setStatus('current')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProIndex.setStatus('current')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProName.setStatus('current')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProStatus.setStatus('current')
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpIsLicensed.setStatus('current')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIsLicensed.setStatus('current')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowReadBytes.setStatus('deprecated')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighReadBytes.setStatus('deprecated')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowWriteBytes.setStatus('deprecated')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighWriteBytes.setStatus('deprecated')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowReadBytes.setStatus('deprecated')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighReadBytes.setStatus('deprecated')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowWriteBytes.setStatus('deprecated')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighWriteBytes.setStatus('deprecated')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighOps.setStatus('deprecated')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowOps.setStatus('deprecated')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighOps.setStatus('deprecated')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowOps.setStatus('deprecated')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCount.setStatus('current')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('current')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('current')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('current')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('current')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunComment.setStatus('current')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('deprecated')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('deprecated')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapped.setStatus('current')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('current')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunQtreeName.setStatus('current')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOps.setStatus('deprecated')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOps.setStatus('deprecated')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadBytes.setStatus('deprecated')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadBytes.setStatus('deprecated')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteBytes.setStatus('deprecated')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteBytes.setStatus('deprecated')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighErrors.setStatus('deprecated')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowErrors.setStatus('deprecated')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunOnline.setStatus('current')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapStatus.setStatus('current')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("write", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunShareStatus.setStatus('current')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSpaceReserved.setStatus('current')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatsResetTime.setStatus('current')
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadOps.setStatus('deprecated')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadOps.setStatus('deprecated')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteOps.setStatus('deprecated')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteOps.setStatus('deprecated')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOtherOps.setStatus('deprecated')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOtherOps.setStatus('deprecated')
lunSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSize64.setStatus('current')
lun64Ops = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Ops.setStatus('current')
lun64ReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadBytes.setStatus('current')
lun64WriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteBytes.setStatus('current')
lun64Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Errors.setStatus('current')
lun64ReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadOps.setStatus('current')
lun64WriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteOps.setStatus('current')
lun64OtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64OtherOps.setStatus('current')
lunAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunAlignment.setStatus('current')
lunVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunVserver.setStatus('current')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3), )
if mibBuilder.loadTexts: lunMapTable.setStatus('current')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "lunMapLUNIndex"), (0, "NETAPP-MIB", "lunMapInitiatorGroupIndex"))
if mibBuilder.loadTexts: lunMapEntry.setStatus('current')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNIndex.setStatus('current')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setStatus('current')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNName.setStatus('current')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setStatus('current')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setStatus('current')
lunMapVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapVserver.setStatus('current')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1), )
if mibBuilder.loadTexts: initiatorGroupTable.setStatus('current')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorGroupIndex"))
if mibBuilder.loadTexts: initiatorGroupEntry.setStatus('current')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupIndex.setStatus('current')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupName.setStatus('current')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupType.setStatus('current')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 256))).clone(namedValues=NamedValues(("default", 1), ("solaris", 2), ("windows", 3), ("hpux", 4), ("aix", 5), ("linux", 6), ("defaultPartner", 7), ("netware", 8), ("vmware", 9), ("openvms", 10), ("xen", 11), ("hyperv", 12), ("invalid", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupOS.setStatus('current')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setStatus('current')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setStatus('current')
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUsePartner.setStatus('current')
initiatorGroupUseALUA = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUseALUA.setStatus('current')
initiatorGroupVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupVserver.setStatus('current')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2), )
if mibBuilder.loadTexts: initiatorGroupMemberTable.setStatus('current')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorGroupMemberIndex"), (0, "NETAPP-MIB", "initiatorGroupMemberNameIndex"))
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setStatus('current')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setStatus('current')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setStatus('current')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorName.setStatus('current')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3), )
if mibBuilder.loadTexts: initiatorListTable.setStatus('current')
initiatorListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "initiatorListEntryIndex"))
if mibBuilder.loadTexts: initiatorListEntry.setStatus('current')
initiatorListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorListEntryIndex.setStatus('current')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetAdapterName.setStatus('current')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorNodeName.setStatus('current')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortName.setStatus('current')
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorType.setStatus('current')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorIsid.setStatus('current')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setStatus('current')
connectedInitiatorVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorVserver.setStatus('current')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1), )
if mibBuilder.loadTexts: fcpTargetTable.setStatus('current')
fcpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetTableIndex"))
if mibBuilder.loadTexts: fcpTargetEntry.setStatus('current')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTableIndex.setStatus('current')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetName.setStatus('current')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetNN.setStatus('current')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPN.setStatus('current')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetSpeed.setStatus('current')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("startup", 1), ("uninitialized", 2), ("initializingFW", 3), ("linkNotConnected", 4), ("waitingForLinkUp", 5), ("online", 6), ("linkDisconnected", 7), ("resetting", 8), ("offline", 9), ("offlinedByUserSystem", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStatus.setStatus('current')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStandby.setStatus('current')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("pointToPoint", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTopology.setStatus('current')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("physical", 1), ("local", 2), ("standby", 3), ("partner", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetType.setStatus('current')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))).clone(namedValues=NamedValues(("mixed", 1), ("standby", 2), ("partner", 3), ("partnerProxy", 4), ("partnerStandby", 5), ("localPrimary", 6), ("dualFabric", 7), ("ssi", 8), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpCfMode.setStatus('current')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1), )
if mibBuilder.loadTexts: psetTable.setStatus('current')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "psetIndex"))
if mibBuilder.loadTexts: psetEntry.setStatus('current')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetIndex.setStatus('current')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetName.setStatus('current')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetType.setStatus('current')
psetVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetVserver.setStatus('current')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2), )
if mibBuilder.loadTexts: psetMemberTable.setStatus('current')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "psetMemberIndex"), (0, "NETAPP-MIB", "psetMemberNameIndex"))
if mibBuilder.loadTexts: psetMemberEntry.setStatus('current')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberIndex.setStatus('current')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberNameIndex.setStatus('current')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortName.setStatus('current')
psetPortVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortVserver.setStatus('current')
fcp64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64ReadBytes.setStatus('current')
fcp64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64WriteBytes.setStatus('current')
iscsi64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64ReadBytes.setStatus('current')
iscsi64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64WriteBytes.setStatus('current')
iscsi64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64Ops.setStatus('current')
fcp64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64Ops.setStatus('current')
fcpTargetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 26))
fcpTargetPortTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1), )
if mibBuilder.loadTexts: fcpTargetPortTable.setStatus('current')
fcpTargetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetPortNodeName"), (1, "NETAPP-MIB", "fcpTargetPortName"))
if mibBuilder.loadTexts: fcpTargetPortEntry.setStatus('current')
fcpTargetPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortNodeName.setStatus('current')
fcpTargetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortName.setStatus('current')
fcpTargetPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortSpeed.setStatus('current')
fcpTargetPortStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortStandby.setStatus('current')
fcpTargetPortTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("pointToPoint", 3), ("loop", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPortTopology.setStatus('current')
fcpTargetLif = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 27))
fcpTargetLifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1), )
if mibBuilder.loadTexts: fcpTargetLifTable.setStatus('current')
fcpTargetLifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1), ).setIndexNames((0, "NETAPP-MIB", "fcpTargetLifVserver"), (0, "NETAPP-MIB", "fcpTargetLifName"))
if mibBuilder.loadTexts: fcpTargetLifEntry.setStatus('current')
fcpTargetLifVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifVserver.setStatus('current')
fcpTargetLifName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifName.setStatus('current')
fcpTargetLifHomeNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifHomeNode.setStatus('current')
fcpTargetLifHomePort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifHomePort.setStatus('current')
fcpTargetLifNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifNN.setStatus('current')
fcpTargetLifPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifPN.setStatus('current')
fcpTargetLifStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifStatusAdmin.setStatus('current')
fcpTargetLifStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetLifStatusOper.setStatus('current')
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsEnabled.setStatus('current')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsLicensed.setStatus('current')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setStatus('deprecated')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToClients.setStatus('deprecated')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setStatus('deprecated')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToServers.setStatus('deprecated')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheTotalRequests.setStatus('deprecated')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHitRequests.setStatus('deprecated')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissRequests.setStatus('deprecated')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setStatus('current')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setStatus('current')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheEjectRequests.setStatus('current')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setStatus('current')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheRpcRecords.setStatus('current')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBWSavings.setStatus('current')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setStatus('deprecated')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setStatus('deprecated')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setStatus('deprecated')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setStatus('deprecated')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setStatus('deprecated')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setStatus('deprecated')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setStatus('deprecated')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setStatus('deprecated')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setStatus('deprecated')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setStatus('deprecated')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setStatus('deprecated')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setStatus('deprecated')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setStatus('deprecated')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setStatus('deprecated')
nfsCache64BytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromClients.setStatus('current')
nfsCache64BytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToClients.setStatus('current')
nfsCache64BytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromServers.setStatus('current')
nfsCache64BytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToServers.setStatus('current')
nfsCache64TotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64TotalRequests.setStatus('current')
nfsCache64HitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64HitRequests.setStatus('current')
nfsCache64MissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64MissRequests.setStatus('current')
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('current')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2), )
if mibBuilder.loadTexts: enclTable.setStatus('current')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('current')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('current')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("transitioning", 2), ("active", 3), ("inactive", 4), ("reconfiguring", 5), ("nonexistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclContactState.setStatus('current')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannelShelfAddr.setStatus('current')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductLogicalID.setStatus('current')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductID.setStatus('current')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductVendor.setStatus('current')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductModel.setStatus('current')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductRevision.setStatus('current')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductSerialNo.setStatus('current')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberDiskBays.setStatus('current')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDisksPresent.setStatus('current')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setStatus('current')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setStatus('current')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setStatus('current')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setStatus('current')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansMaximum.setStatus('current')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansPresent.setStatus('current')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansFailed.setStatus('current')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsMaximum.setStatus('current')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsPresent.setStatus('current')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setStatus('current')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setStatus('current')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setStatus('current')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setStatus('current')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setStatus('current')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setStatus('current')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setStatus('current')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setStatus('current')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setStatus('current')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsMaximum.setStatus('current')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPresent.setStatus('current')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsSerialNos.setStatus('current')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsFailed.setStatus('current')
enclVoltSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsMaximum.setStatus('current')
enclVoltSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsPresent.setStatus('current')
enclVoltSensorsOverVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFail.setStatus('current')
enclVoltSensorsOverVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarn.setStatus('current')
enclVoltSensorsUnderVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFail.setStatus('current')
enclVoltSensorsUnderVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarn.setStatus('current')
enclVoltSensorsCurrentVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsCurrentVolt.setStatus('current')
enclVoltSensorsOverVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFailThr.setStatus('current')
enclVoltSensorsOverVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarnThr.setStatus('current')
enclVoltSensorsUnderVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFailThr.setStatus('current')
enclVoltSensorsUnderVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarnThr.setStatus('current')
enclCurSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsMaximum.setStatus('current')
enclCurSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsPresent.setStatus('current')
enclCurSensorsOverCurFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFail.setStatus('current')
enclCurSensorsOverCurWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarn.setStatus('current')
enclCurSensorsCurrentCur = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsCurrentCur.setStatus('current')
enclCurSensorsOverCurFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFailThr.setStatus('current')
enclCurSensorsOverCurWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarnThr.setStatus('current')
enclSASConnectMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectMaximum.setStatus('current')
enclSASConnectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectPresent.setStatus('current')
enclSASConnectVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectVendor.setStatus('current')
enclSASConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectType.setStatus('current')
enclSASConnectCableLen = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableLen.setStatus('current')
enclSASConnectCableTech = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableTech.setStatus('current')
enclSASConnectCableEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectCableEnd.setStatus('current')
enclSASConnectSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectSerialNos.setStatus('current')
enclSASConnectPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclSASConnectPartNos.setStatus('current')
enclPowerSuppliesPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPartNos.setStatus('current')
enclFansSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansSpeed.setStatus('current')
enclElectronicsPartNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPartNos.setStatus('current')
enclElectronicsCPLDVers = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 64), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsCPLDVers.setStatus('current')
enclNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNodeName.setStatus('current')
haTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 2), )
if mibBuilder.loadTexts: haTable.setStatus('current')
haEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "haNodeName"))
if mibBuilder.loadTexts: haEntry.setStatus('current')
haNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNodeName.setStatus('current')
haNodeSysid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haNodeSysid.setStatus('current')
haSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haSettings.setStatus('current')
haState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4), ("partialGiveback", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haState.setStatus('current')
haCannotTakeoverCause = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6), ("mailboxIsInDegradedState", 7), ("partnermailboxIsInUninitialisedState", 8), ("mailboxVersionMismatch", 9), ("nvramSizeMismatch", 10), ("kernelVersionMismatch", 11), ("partnerIsInBootingStage", 12), ("diskshelfIsTooHot", 13), ("partnerIsPerformingRevert", 14), ("nodeIsPerformingRevert", 15), ("sametimePartnerIsAlsoTryingToTakeUsOver", 16), ("alreadyInTakenoverMode", 17), ("nvramLogUnsynchronized", 18), ("stateofBackupMailboxIsDoubtful", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haCannotTakeoverCause.setStatus('current')
haPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerStatus.setStatus('current')
haPartnerLastStatusUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerLastStatusUpdate.setStatus('current')
haPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerName.setStatus('current')
haPartnerSysid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: haPartnerSysid.setStatus('current')
haInterconnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: haInterconnectStatus.setStatus('current')
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifNumber.setStatus('current')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2), )
if mibBuilder.loadTexts: netifTable.setStatus('current')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "netifIndex"))
if mibBuilder.loadTexts: netifEntry.setStatus('current')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifIndex.setStatus('current')
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifDescr.setStatus('current')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInOctets.setStatus('deprecated')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInOctets.setStatus('deprecated')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUcastPkts.setStatus('deprecated')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUcastPkts.setStatus('deprecated')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInNUcastPkts.setStatus('deprecated')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInNUcastPkts.setStatus('deprecated')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInDiscards.setStatus('deprecated')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInDiscards.setStatus('deprecated')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInErrors.setStatus('deprecated')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInErrors.setStatus('deprecated')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUnknownProtos.setStatus('deprecated')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUnknownProtos.setStatus('deprecated')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutOctets.setStatus('deprecated')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutOctets.setStatus('deprecated')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutUcastPkts.setStatus('deprecated')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutUcastPkts.setStatus('deprecated')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setStatus('deprecated')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setStatus('deprecated')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutDiscards.setStatus('deprecated')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutDiscards.setStatus('deprecated')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutErrors.setStatus('deprecated')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutErrors.setStatus('deprecated')
if64InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InOctets.setStatus('current')
if64InUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUcastPkts.setStatus('current')
if64InNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InNUcastPkts.setStatus('current')
if64InDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InDiscards.setStatus('current')
if64InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InErrors.setStatus('current')
if64InUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUnknownProtos.setStatus('current')
if64OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutOctets.setStatus('current')
if64OutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutUcastPkts.setStatus('current')
if64OutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutNUcastPkts.setStatus('current')
if64OutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutDiscards.setStatus('current')
if64OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutErrors.setStatus('current')
netportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 2), )
if mibBuilder.loadTexts: netportTable.setStatus('current')
netportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "netportNode"), (0, "NETAPP-MIB", "netportPort"))
if mibBuilder.loadTexts: netportEntry.setStatus('current')
netportNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportNode.setStatus('current')
netportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportPort.setStatus('current')
netportRole = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("cluster", 1), ("data", 2), ("node-mgmt", 3), ("intercluster", 4), ("cluster-mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportRole.setStatus('current')
netportLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("off", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportLinkState.setStatus('current')
netportMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMtu.setStatus('current')
netportAutonegAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 6), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutonegAdmin.setStatus('current')
netportAutonegOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutonegOper.setStatus('current')
netportDuplexAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportDuplexAdmin.setStatus('current')
netportDuplexOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportDuplexOper.setStatus('current')
netportSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("ten-Mb", 2), ("hundred-Mb", 3), ("one-Gb", 4), ("ten-Gb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeedAdmin.setStatus('current')
netportSpeedOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("auto", 1), ("ten-Mb", 2), ("hundred-Mb", 3), ("one-Gb", 4), ("ten-Gb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeedOper.setStatus('current')
netportSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportSpeed.setStatus('current')
netportMac = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMac.setStatus('current')
netportUpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportUpAdmin.setStatus('current')
netportType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("physical", 0), ("if-group", 1), ("vlan", 2), ("undef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportType.setStatus('current')
netportIfgNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgNode.setStatus('current')
netportIfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgPort.setStatus('current')
netportIfgDistrFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("sequential", 2), ("none", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgDistrFunc.setStatus('current')
netportIfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("multimode", 0), ("multimode-lacp", 1), ("singlemode", 2), ("none", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfgMode.setStatus('current')
netportVlanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanNode.setStatus('current')
netportVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanPort.setStatus('current')
netportVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportVlanTag.setStatus('current')
netportFlowcontrolAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undef", 0), ("none", 1), ("receive", 2), ("send", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportFlowcontrolAdmin.setStatus('current')
netportFlowcontrolOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undef", 0), ("none", 1), ("receive", 2), ("send", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportFlowcontrolOper.setStatus('current')
netportAutorevertDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportAutorevertDelay.setStatus('current')
netportRemoteDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportRemoteDeviceId.setStatus('current')
netportIPspace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIPspace.setStatus('current')
netportBroadcastDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportBroadcastDomain.setStatus('current')
netportMtuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportMtuAdmin.setStatus('current')
netportIfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 3), )
if mibBuilder.loadTexts: netportIfGrpTable.setStatus('current')
netportIfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1), ).setIndexNames((0, "NETAPP-MIB", "netportIfGrpNode"), (0, "NETAPP-MIB", "netportIfGrpName"))
if mibBuilder.loadTexts: netportIfGrpEntry.setStatus('current')
netportIfGrpNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpNode.setStatus('current')
netportIfGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpName.setStatus('current')
netportIfGrpDistrFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("sequential", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpDistrFunc.setStatus('current')
netportIfGrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("multimode", 0), ("multimode-lacp", 1), ("singlemode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpMode.setStatus('current')
netportIfGrpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpMac.setStatus('current')
netportIfGrpActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpActivePorts.setStatus('current')
netportIfGrpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpPorts.setStatus('current')
netportIfGrpUpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpUpPorts.setStatus('current')
netportIfGrpDownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netportIfGrpDownPorts.setStatus('current')
logicalInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 4), )
if mibBuilder.loadTexts: logicalInterfaceTable.setStatus('current')
logicalInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1), ).setIndexNames((0, "NETAPP-MIB", "logicalInterfaceServer"), (0, "NETAPP-MIB", "logicalInterfaceVif"))
if mibBuilder.loadTexts: logicalInterfaceEntry.setStatus('current')
logicalInterfaceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceServer.setStatus('current')
logicalInterfaceVif = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceVif.setStatus('current')
logicalInterfaceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undef", 0), ("cluster", 1), ("data", 2), ("node-mgmt", 3), ("intercluster", 4), ("cluster-mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceRole.setStatus('current')
logicalInterfaceHomeNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceHomeNode.setStatus('current')
logicalInterfaceHomePort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceHomePort.setStatus('current')
logicalInterfaceCurrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceCurrNode.setStatus('current')
logicalInterfaceCurrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceCurrPort.setStatus('current')
logicalInterfaceStatusOper = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusOper.setStatus('current')
logicalInterfaceNumericId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNumericId.setStatus('current')
logicalInterfaceIsHome = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 10), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceIsHome.setStatus('current')
logicalInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAddress.setStatus('current')
logicalInterfaceNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNetmask.setStatus('current')
logicalInterfaceNetmaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceNetmaskLength.setStatus('current')
logicalInterfaceRoutingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceRoutingGroup.setStatus('current')
logicalInterfaceStatusAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusAdmin.setStatus('current')
logicalInterfaceFailoverPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("next-avail", 0), ("priority", 1), ("disabled", 2), ("system-defined", 3), ("local-only", 4), ("sfo-partner-only", 5), ("ipspace-wide", 6), ("broadcast-domain-wide", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFailoverPolicy.setStatus('current')
logicalInterfaceFirewallPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFirewallPolicy.setStatus('current')
logicalInterfaceAutoRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAutoRevert.setStatus('current')
logicalInterfaceSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 19), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceSticky.setStatus('current')
logicalInterfaceUseFailoverGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("system-defined", 0), ("disabled", 1), ("enabled", 2), ("unused", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceUseFailoverGroup.setStatus('current')
logicalInterfaceDnsZone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceDnsZone.setStatus('current')
logicalInterfaceAllowLbMigrate = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAllowLbMigrate.setStatus('current')
logicalInterfaceLbWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 100, 101))).clone(namedValues=NamedValues(("min-weight", 0), ("max-weight", 100), ("load", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceLbWeight.setStatus('current')
logicalInterfaceFailoverGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFailoverGroup.setStatus('current')
logicalInterfaceStatusVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceStatusVserver.setStatus('current')
logicalInterfaceDataProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceDataProtocol.setStatus('current')
logicalInterfaceFcpWwpn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceFcpWwpn.setStatus('current')
logicalInterfaceComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceComment.setStatus('current')
logicalInterfaceListenForDnsQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceListenForDnsQuery.setStatus('current')
logicalInterfaceAddressString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalInterfaceAddressString.setStatus('current')
netOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5))
netOptsv6Table = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1))
netOptsv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsv6Enabled.setStatus('current')
netOptsv6RAProcEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 1, 2), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsv6RAProcEnabled.setStatus('current')
netOptsSwitchlessCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 2))
netOptsSwitchlessClusterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 5, 2, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOptsSwitchlessClusterEnabled.setStatus('current')
ipspaceTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 6), )
if mibBuilder.loadTexts: ipspaceTable.setStatus('current')
ipspaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1), ).setIndexNames((1, "NETAPP-MIB", "ipspaceName"))
if mibBuilder.loadTexts: ipspaceEntry.setStatus('current')
ipspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceName.setStatus('current')
ipspaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceID.setStatus('current')
ipspacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspacePorts.setStatus('current')
ipspaceBroadcastDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceBroadcastDomains.setStatus('current')
ipspaceVservers = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipspaceVservers.setStatus('current')
vsRouteTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 7), )
if mibBuilder.loadTexts: vsRouteTable.setStatus('current')
vsRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1), ).setIndexNames((0, "NETAPP-MIB", "vsRouteVserverID"), (1, "NETAPP-MIB", "vsRouteUuid"))
if mibBuilder.loadTexts: vsRouteEntry.setStatus('current')
vsRouteVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteVserverID.setStatus('current')
vsRouteUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteUuid.setStatus('current')
vsRouteDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteDestination.setStatus('current')
vsRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteGateway.setStatus('current')
vsRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteMetric.setStatus('current')
vsRouteAddressFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRouteAddressFamily.setStatus('current')
vsFailoverGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 8), )
if mibBuilder.loadTexts: vsFailoverGroupTable.setStatus('current')
vsFailoverGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1), ).setIndexNames((0, "NETAPP-MIB", "vsFailoverGroupVserverID"), (1, "NETAPP-MIB", "vsFailoverGroupName"))
if mibBuilder.loadTexts: vsFailoverGroupEntry.setStatus('current')
vsFailoverGroupVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupVserverID.setStatus('current')
vsFailoverGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupName.setStatus('current')
vsFailoverGroupTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFailoverGroupTargets.setStatus('current')
vsFirewallPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 9), )
if mibBuilder.loadTexts: vsFirewallPolicyTable.setStatus('current')
vsFirewallPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1), ).setIndexNames((0, "NETAPP-MIB", "vsFirewallPolicyVserverID"), (1, "NETAPP-MIB", "vsFirewallPolicyUuid"))
if mibBuilder.loadTexts: vsFirewallPolicyEntry.setStatus('current')
vsFirewallPolicyVserverID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyVserverID.setStatus('current')
vsFirewallPolicyUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyUuid.setStatus('current')
vsFirewallPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyName.setStatus('current')
vsFirewallPolicyService = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyService.setStatus('current')
vsFirewallPolicyAllowList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsFirewallPolicyAllowList.setStatus('current')
broadcastDomainTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 10), )
if mibBuilder.loadTexts: broadcastDomainTable.setStatus('current')
broadcastDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1), ).setIndexNames((0, "NETAPP-MIB", "broadcastDomainIpspaceName"), (0, "NETAPP-MIB", "broadcastDomainName"))
if mibBuilder.loadTexts: broadcastDomainEntry.setStatus('current')
broadcastDomainIpspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainIpspaceName.setStatus('current')
broadcastDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainName.setStatus('current')
broadcastDomainMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainMTU.setStatus('current')
broadcastDomainPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainPorts.setStatus('current')
broadcastDomainFailoverGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainFailoverGroups.setStatus('current')
broadcastDomainSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastDomainSubnets.setStatus('current')
subnetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 11), )
if mibBuilder.loadTexts: subnetTable.setStatus('current')
subnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1), ).setIndexNames((0, "NETAPP-MIB", "subnetIpspaceName"), (0, "NETAPP-MIB", "subnetName"))
if mibBuilder.loadTexts: subnetEntry.setStatus('current')
subnetIpspaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetIpspaceName.setStatus('current')
subnetBroadcastDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetBroadcastDomainName.setStatus('current')
subnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetName.setStatus('current')
subnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
subnetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetGateway.setStatus('current')
subnetIpRanges = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetIpRanges.setStatus('current')
subnetTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetTotalCount.setStatus('current')
subnetUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetUsedCount.setStatus('current')
subnetAvailableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetAvailableCount.setStatus('current')
sisIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsLicensed.setStatus('current')
sisTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 23, 2), )
if mibBuilder.loadTexts: sisTable.setStatus('current')
sisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "sisIndex"))
if mibBuilder.loadTexts: sisEntry.setStatus('current')
sisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIndex.setStatus('current')
sisPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisPath.setStatus('current')
sisState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisState.setStatus('current')
sisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("undoing", 3), ("pending", 4), ("initializing", 5), ("downgrading", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisStatus.setStatus('current')
sisProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisProgress.setStatus('current')
sisType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("snapvault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisType.setStatus('current')
sisSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisSchedule.setStatus('current')
sisLastOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpBeginTime.setStatus('current')
sisLastOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpEndTime.setStatus('current')
sisHighLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisHighLastOpSize.setStatus('deprecated')
sisLowLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLowLastOpSize.setStatus('deprecated')
sisLastOpError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpError.setStatus('current')
sis64LastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sis64LastOpSize.setStatus('current')
sisIsCompressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 14), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsCompressionEnabled.setStatus('current')
sisIsInlineEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 15), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsInlineEnabled.setStatus('current')
sisVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisVserver.setStatus('current')
sisPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisPolicy.setStatus('current')
sisRowAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisRowAvailable.setStatus('current')
sisMinBlocksShared = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisMinBlocksShared.setStatus('current')
sisBlocksSkippedSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisBlocksSkippedSharing.setStatus('current')
sisChangelogUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisChangelogUsedPercent.setStatus('current')
sisLastSuccessfulOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastSuccessfulOpBeginTime.setStatus('current')
sisLastSuccessfulOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastSuccessfulOpEndTime.setStatus('current')
sisLastOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpState.setStatus('current')
sisLogicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLogicalSize.setStatus('current')
sisLogicalLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLogicalLimit.setStatus('current')
sisQueuedJob = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisQueuedJob.setStatus('current')
sisStaleFpPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisStaleFpPercentage.setStatus('current')
sisIsIddEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsIddEnabled.setStatus('current')
sisQuickCheckFsize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisQuickCheckFsize.setStatus('current')
sisIsConstituent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 31), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsConstituent.setStatus('current')
compressIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIsLicensed.setStatus('deprecated')
compressTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 24, 2), )
if mibBuilder.loadTexts: compressTable.setStatus('deprecated')
compressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1), ).setIndexNames((0, "NETAPP-MIB", "compressIndex"))
if mibBuilder.loadTexts: compressEntry.setStatus('deprecated')
compressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIndex.setStatus('deprecated')
compressFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressFileSys.setStatus('deprecated')
compressHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighUsedKBytes.setStatus('deprecated')
compressLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowUsedKBytes.setStatus('deprecated')
compress64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64UsedKBytes.setStatus('deprecated')
compressHighSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighSavedKBytes.setStatus('deprecated')
compressLowSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowSavedKBytes.setStatus('deprecated')
compress64SavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64SavedKBytes.setStatus('deprecated')
compressPercentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressPercentSaved.setStatus('deprecated')
extcacheType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheType.setStatus('current')
extcacheSubType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheSubType.setStatus('current')
extcache64Uptime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Uptime.setStatus('current')
extcache64Size = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Size.setStatus('current')
extcache64Usedsize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Usedsize.setStatus('current')
extcache64TotalBuffers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64TotalBuffers.setStatus('current')
extcacheOptions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheOptions.setStatus('current')
extcache64Hits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Hits.setStatus('current')
extcache64Misses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Misses.setStatus('current')
extcache64Inserts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Inserts.setStatus('current')
extcache64Evicts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Evicts.setStatus('current')
extcache64Invalidates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64Invalidates.setStatus('current')
extcache64BlocksRef0 = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64BlocksRef0.setStatus('current')
extcache64HitNormalL0 = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64HitNormalL0.setStatus('current')
extcache64MetaData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64MetaData.setStatus('current')
extcache64ReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64ReadLatency.setStatus('current')
extcache64WriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64WriteLatency.setStatus('current')
extcache64RCLength = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64RCLength.setStatus('current')
extcache64WCLength = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcache64WCLength.setStatus('current')
extcacheIsFlexShareOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 26, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extcacheIsFlexShareOn.setStatus('current')
qosWorkloadTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 1), )
if mibBuilder.loadTexts: qosWorkloadTable.setStatus('current')
qosWorkloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1), ).setIndexNames((1, "NETAPP-MIB", "qosWorkloadName"))
if mibBuilder.loadTexts: qosWorkloadEntry.setStatus('current')
qosWorkloadUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadUuid.setStatus('current')
qosWorkloadName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadName.setStatus('current')
qosWorkloadClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3), ("autovolume", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadClass.setStatus('current')
qosWorkloadId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadId.setStatus('current')
qosWorkloadPolicyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadPolicyGroup.setStatus('current')
qosWorkloadVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadVserver.setStatus('current')
qosWorkloadVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadVolume.setStatus('current')
qosWorkloadLun = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadLun.setStatus('current')
qosWorkloadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadFile.setStatus('current')
qosWorkloadQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadQtree.setStatus('current')
qosWorkloadReadAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadReadAhead.setStatus('current')
qosWorkloadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWorkloadCache.setStatus('current')
qosPolicyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 2), )
if mibBuilder.loadTexts: qosPolicyGroupTable.setStatus('current')
qosPolicyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1), ).setIndexNames((1, "NETAPP-MIB", "qosPolicyGroupName"))
if mibBuilder.loadTexts: qosPolicyGroupEntry.setStatus('current')
qosPolicyGroupUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupUuid.setStatus('current')
qosPolicyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupName.setStatus('current')
qosPolicyGroupPgid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupPgid.setStatus('current')
qosPolicyGroupClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupClass.setStatus('current')
qosPolicyGroupMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupMaxThroughput.setStatus('current')
qosPolicyGroupVserver = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyGroupVserver.setStatus('current')
qosReadaheadSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 28, 3), )
if mibBuilder.loadTexts: qosReadaheadSettingsTable.setStatus('current')
qosReadaheadSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1), ).setIndexNames((1, "NETAPP-MIB", "qosReadaheadSettingName"))
if mibBuilder.loadTexts: qosReadaheadSettingsEntry.setStatus('current')
qosReadaheadSettingName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadSettingName.setStatus('current')
qosReadaheadClass = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("preset", 1), ("user-defined", 2), ("system-defined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadClass.setStatus('current')
qosReadaheadDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 3), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDefault.setStatus('current')
qosReadaheadMinBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinBlocks.setStatus('current')
qosReadaheadMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxBlocks.setStatus('current')
qosReadaheadAlignBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadAlignBlocks.setStatus('current')
qosReadaheadMaxGap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxGap.setStatus('current')
qosReadaheadMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 40960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxRange.setStatus('current')
qosReadaheadMinRange = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 40960))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinRange.setStatus('current')
qosReadaheadMaxDeadline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100000, 5000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxDeadline.setStatus('current')
qosReadaheadInterarrivalWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadInterarrivalWeight.setStatus('current')
qosReadaheadDiskResponseWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDiskResponseWeight.setStatus('current')
qosReadaheadMinDiskResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinDiskResponseTime.setStatus('current')
qosReadaheadMaxDiskResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxDiskResponseTime.setStatus('current')
qosReadaheadDiskResponseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadDiskResponseFactor.setStatus('current')
qosReadaheadOvershoot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadOvershoot.setStatus('current')
qosReadaheadUseTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 17), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseTiming.setStatus('current')
qosReadaheadUseAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseAsync.setStatus('current')
qosReadaheadMetadata = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 19), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMetadata.setStatus('current')
qosReadaheadForceDump = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 20), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceDump.setStatus('current')
qosReadaheadForceFull = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 21), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceFull.setStatus('current')
qosReadaheadForceNone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 22), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadForceNone.setStatus('current')
qosReadaheadUseFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 23), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseFeedback.setStatus('current')
qosReadaheadSmallFileBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadSmallFileBlocks.setStatus('current')
qosReadaheadMetadataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMetadataBlocks.setStatus('current')
qosReadaheadEarlyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadEarlyCount.setStatus('current')
qosReadaheadJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadJitter.setStatus('current')
qosReadaheadMinRetireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinRetireTime.setStatus('current')
qosReadaheadMaxRetireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMaxRetireTime.setStatus('current')
qosReadaheadUseHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 30), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadUseHistogram.setStatus('current')
qosReadaheadMinFileHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 28, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 33554432))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReadaheadMinFileHistogram.setStatus('current')
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 2)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: userDefined.setStatus('current')
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 6)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setStatus('current')
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 7)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticePFAEvent.setStatus('current')
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 11)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: emergencyTrap.setStatus('current')
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 12)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alertTrap.setStatus('current')
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 13)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: criticalTrap.setStatus('current')
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 14)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: errorTrap.setStatus('current')
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 15)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: warningTrap.setStatus('current')
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 16)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: notificationTrap.setStatus('current')
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 17)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: informationalTrap.setStatus('current')
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 18)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dbgTrap.setStatus('current')
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 21)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailedShutdown.setStatus('current')
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 22)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailed.setStatus('current')
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 26)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskRepaired.setStatus('current')
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 31)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailureShutdown.setStatus('current')
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 33)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailed.setStatus('current')
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 35)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanWarning.setStatus('current')
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 36)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanRepaired.setStatus('current')
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 41)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setStatus('current')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 43)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailed.setStatus('current')
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 45)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyWarning.setStatus('current')
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 46)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyRepaired.setStatus('current')
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 55)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuTooBusy.setStatus('current')
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 56)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuOk.setStatus('current')
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 62)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryDischarged.setStatus('current')
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 63)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryLow.setStatus('current')
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 72)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeFailed.setStatus('current')
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 75)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeTakenOver.setStatus('current')
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 76)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeRepaired.setStatus('current')
clusterNodeRepairing = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 77)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeRepairing.setStatus('current')
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 82)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeFull.setStatus('current')
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 85)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeNearlyFull.setStatus('current')
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 86)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRepaired.setStatus('current')
volumesStillFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 87)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumesStillFull.setStatus('current')
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 91)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempShutdown.setStatus('current')
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 95)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTemp.setStatus('current')
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 96)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempRepaired.setStatus('current')
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 103)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfFault.setStatus('current')
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 106)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfRepaired.setStatus('current')
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 111)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonRecoverable.setStatus('current')
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 113)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusCritical.setStatus('current')
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 115)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonCritical.setStatus('current')
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 116)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusOk.setStatus('current')
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 126)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaExceeded.setStatus('current')
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 127)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaNormal.setStatus('current')
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 134)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSendError.setStatus('current')
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 135)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportConfigurationError.setStatus('current')
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 136)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSent.setStatus('current')
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 142)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerOff.setStatus('current')
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 143)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryCritical.setStatus('current')
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 144)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsShuttingDown.setStatus('current')
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 145)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryWarning.setStatus('current')
upsLinePowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 146)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerRestored.setStatus('current')
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 151)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appEmergency.setStatus('current')
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 152)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appAlert.setStatus('current')
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 153)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appCritical.setStatus('current')
appError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 154)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appError.setStatus('current')
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 155)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appWarning.setStatus('current')
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 156)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appNotice.setStatus('current')
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 157)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appInfo.setStatus('current')
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 158)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appTrap.setStatus('current')
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 162)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFilewrap.setStatus('current')
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 166)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileSaved.setStatus('current')
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 167)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileNearlyFull.setStatus('current')
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 176)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaExceeded.setStatus('current')
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 177)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaNormal.setStatus('current')
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 187)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: waflDirFull.setStatus('current')
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 192)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccSummary.setStatus('current')
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 195)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccMasked.setStatus('current')
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 204)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdError.setStatus('current')
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 206)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnNotice.setStatus('current')
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 216)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setStatus('current')
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 222)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setStatus('current')
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 224)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setStatus('current')
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 226)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtThrottleNotice.setStatus('current')
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 237)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setStatus('current')
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 238)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifAllLinksFailed.setStatus('current')
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 245)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStopped.setStatus('current')
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 246)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStarted.setStatus('current')
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 254)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanVirusDetectedError.setStatus('current')
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 255)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanDisConnection.setStatus('current')
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 256)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConfigurationChange.setStatus('current')
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 257)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConnection.setStatus('current')
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 266)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanServerUpgrade.setStatus('current')
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 272)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setStatus('current')
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 274)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeInconsistentUmount.setStatus('current')
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 275)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeStateChanged.setStatus('current')
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 276)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOnline.setStatus('current')
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 283)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setStatus('current')
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 284)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardMissingCables.setStatus('current')
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 294)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteUnreachable.setStatus('current')
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 296)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteOk.setStatus('current')
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 297)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestored.setStatus('current')
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 298)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setStatus('current')
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 304)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setStatus('current')
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 314)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOfflineTooBig.setStatus('current')
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 324)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOffline.setStatus('current')
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 334)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestricted.setStatus('current')
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 344)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeDegradedDirty.setStatus('current')
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 354)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeError.setStatus('current')
volumeSelectedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 356)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeSelectedRootConflict.setStatus('current')
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 364)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncFailed.setStatus('current')
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 366)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncOk.setStatus('current')
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 371)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureShutdown.setStatus('current')
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 372)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureWarning.setStatus('current')
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 375)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureUnknown.setStatus('current')
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 376)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureOk.setStatus('current')
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 381)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanStopped.setStatus('current')
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 383)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanSlow.setStatus('current')
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 386)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanOk.setStatus('current')
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 391)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setStatus('current')
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 392)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setStatus('current')
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 393)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setStatus('current')
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 394)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setStatus('current')
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 395)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOff.setStatus('current')
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 396)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setStatus('current')
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 397)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOk.setStatus('current')
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 403)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerDegraded.setStatus('current')
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 406)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerOk.setStatus('current')
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 412)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanDegraded.setStatus('current')
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 413)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanRemoved.setStatus('current')
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 414)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanStopped.setStatus('current')
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 415)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanWarning.setStatus('current')
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 416)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanOk.setStatus('current')
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 424)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: writeVerificationFailed.setStatus('current')
prefDCDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 434)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: prefDCDisconnect.setStatus('current')
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 435)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerDisconnect.setStatus('current')
dcPasswdChangeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 436)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dcPasswdChangeFailed.setStatus('current')
domainControllerConnected = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 437)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerConnected.setStatus('current')
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 444)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexFailed.setStatus('current')
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 454)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexOffline.setStatus('current')
shelfSESElectronicsFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 464)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsFailed.setStatus('current')
shelfSESElectronicsInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 467)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsInfo.setStatus('current')
shelfIFModuleFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 473)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleFailed.setStatus('current')
shelfIFModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 475)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleWarning.setStatus('current')
shelfIFModuleInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 477)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleInfo.setStatus('current')
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 482)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeAlert.setStatus('current')
maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 485)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeWarning.setStatus('current')
cifsStatsExhaustMemCtrlBlk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 497)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cifsStatsExhaustMemCtrlBlk.setStatus('current')
chassisPSRemovedxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 501)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSRemovedxMinShutdown.setStatus('current')
chassisPSUsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 505)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUsMismatch.setStatus('current')
chassisFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 511)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanFailxMinShutdown.setStatus('current')
chassisPSUwrongInput = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 515)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUwrongInput.setStatus('current')
powerSupplyFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 521)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFanFailxMinShutdown.setStatus('current')
remoteSystemMgtAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 532)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgtAlert.setStatus('current')
remoteSystemMgmtWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 535)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtWarning.setStatus('current')
remoteSystemMgmtNotification = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 536)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtNotification.setStatus('current')
remoteSystemMgmtPeriodic = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 547)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtPeriodic.setStatus('current')
remotesystemMgmtTest = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 556)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remotesystemMgmtTest.setStatus('current')
diskMultipathOneSwitch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 562)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathOneSwitch.setStatus('current')
diskMultipathNoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 563)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathNoTakeover.setStatus('current')
diskMultipathWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 565)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathWarning.setStatus('current')
driveDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 574)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: driveDisableErr.setStatus('current')
hbaOfflineInformation = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 587)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: hbaOfflineInformation.setStatus('current')
lunSnapRestoreStatus = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 606)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunSnapRestoreStatus.setStatus('current')
lunCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 616)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneCreate.setStatus('current')
lunCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 626)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitStart.setStatus('current')
lunCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 627)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitComplete.setStatus('current')
flexCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 636)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitStart.setStatus('current')
flexCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 637)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitComplete.setStatus('current')
volumeCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 646)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeCloneCreate.setStatus('current')
snapAutoDelete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 656)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapAutoDelete.setStatus('current')
volumeAutogrow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 666)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeAutogrow.setStatus('current')
timedTargetNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 674)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: timedTargetNotResponding.setStatus('current')
extcacheCardError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 676)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: extcacheCardError.setStatus('current')
extcacheCardOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 686)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: extcacheCardOffline.setStatus('current')
svBackupSnapWarningLimit = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 695)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: svBackupSnapWarningLimit.setStatus('current')
avTrendLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 705)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avTrendLicenseExpired.setStatus('current')
avTrendLicenseExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 706)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avTrendLicenseExpiring.setStatus('current')
rebootAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 712)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rebootAbnormal.setStatus('current')
rebootNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 716)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rebootNormal.setStatus('current')
volMoveCutoverDeferred = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 724)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverDeferred.setStatus('current')
volMoveCutoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 734)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverFailed.setStatus('current')
volMoveDone = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 736)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveDone.setStatus('current')
volMoveCutoverDeferredWait = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 737)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volMoveCutoverDeferredWait.setStatus('current')
scsibladeOutOfQuorum = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 741)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsibladeOutOfQuorum.setStatus('current')
scsibladeInQuorum = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 746)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsibladeInQuorum.setStatus('current')
qosMonitorMemoryMaxed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 755)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: qosMonitorMemoryMaxed.setStatus('current')
qosMonitorMemoryAbated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 757)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: qosMonitorMemoryAbated.setStatus('current')
sfoAggregateRelocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 767)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: sfoAggregateRelocated.setStatus('current')
avUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 773)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avUpdateFailed.setStatus('current')
avLicenseCheckFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 774)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avLicenseCheckFailed.setStatus('current')
avMcAfeeProductExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 775)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeProductExpired.setStatus('current')
avRemedy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 776)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRemedy.setStatus('current')
avLicenseCheck = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 777)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avLicenseCheck.setStatus('current')
avRemedyFailure = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 783)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRemedyFailure.setStatus('current')
avMcAfeeEngineExpired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 785)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeEngineExpired.setStatus('current')
avMcAfeeProductExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 786)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeProductExpiring.setStatus('current')
av2gbFileNotScanned = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 793)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: av2gbFileNotScanned.setStatus('current')
avMcAfeeEngineExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 796)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeEngineExpiring.setStatus('current')
avVirusfound = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 802)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avVirusfound.setStatus('current')
avMcAfeeLicenseFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 803)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeLicenseFailed.setStatus('current')
avDisableFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 804)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avDisableFailed.setStatus('current')
avDisable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 805)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avDisable.setStatus('current')
avMcAfeeLicenseExpiring = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 806)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avMcAfeeLicenseExpiring.setStatus('current')
avEnable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 807)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avEnable.setStatus('current')
avSpywareFound = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 812)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avSpywareFound.setStatus('current')
avEnableFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 813)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avEnableFailed.setStatus('current')
avRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 814)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRollbackFailed.setStatus('current')
avRollback = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 816)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avRollback.setStatus('current')
avUpdate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 817)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: avUpdate.setStatus('current')
snmpBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 824)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snmpBusy.setStatus('current')
lunDestroy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 837)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunDestroy.setStatus('current')
healthMonitorAlertRaised = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 862)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: healthMonitorAlertRaised.setStatus('current')
healthMonitorAlertCleared = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 867)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: healthMonitorAlertCleared.setStatus('current')
volumeLogicalOverallocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 873)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeLogicalOverallocated.setStatus('current')
volumeReserveGrew = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 875)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeReserveGrew.setStatus('current')
volumePhysicalOverallocated = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 882)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumePhysicalOverallocated.setStatus('current')
smVaultSnapWarnLimit = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 895)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: smVaultSnapWarnLimit.setStatus('current')
lunRelocationCompletion = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 896)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunRelocationCompletion.setStatus('current')
clusterLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 973)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterLinkDown.setStatus('current')
clusterL2ConnFail = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 983)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterL2ConnFail.setStatus('current')
clusterPingDropLarge = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 993)).setObjects(("NETAPP-MIB", "productTrapData"), ("NETAPP-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterPingDropLarge.setStatus('current')
mibBuilder.exportSymbols("NETAPP-MIB", v2cpRoots=v2cpRoots, snapmirrorRelVserver=snapmirrorRelVserver, v2cpRenames=v2cpRenames, rcUdpDelayHits=rcUdpDelayHits, obsSmbSetInfos=obsSmbSetInfos, ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, initiatorGroupName=initiatorGroupName, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, tv3cRemoves=tv3cRemoves, pclNfsV2Roots=pclNfsV2Roots, cifsSmb2RelatedCompRequest=cifsSmb2RelatedCompRequest, v2Write1KCalls=v2Write1KCalls, pclRpcNullRecvs=pclRpcNullRecvs, cfInterconnectStatus=cfInterconnectStatus, netportIfGrpPorts=netportIfGrpPorts, qrId=qrId, tv2Write8KCalls=tv2Write8KCalls, miscHighHttpOps=miscHighHttpOps, enclDisksPresent=enclDisksPresent, pclNfsV3Symlinks=pclNfsV3Symlinks, volMoveSrcName=volMoveSrcName, tv3cpAccesss=tv3cpAccesss, smb2FsctlIpcUnsupportedPct=smb2FsctlIpcUnsupportedPct, obsSmbWritePrintFiles=obsSmbWritePrintFiles, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, dafsSetFencingLists=dafsSetFencingLists, v3Read32KCalls=v3Read32KCalls, dmpSuccesses=dmpSuccesses, ndmpBackupSuccesses=ndmpBackupSuccesses, miscLowDiskWriteBytes=miscLowDiskWriteBytes, rpcServXDRCalls=rpcServXDRCalls, ncBytesFromClients=ncBytesFromClients, sisIsLicensed=sisIsLicensed, otherDiskNumber=otherDiskNumber, obsSmbOpenAndXs=obsSmbOpenAndXs, enclPowerSuppliesPresent=enclPowerSuppliesPresent, dfFileSys=dfFileSys, otherDiskVendor=otherDiskVendor, shelfSESElectronicsInfo=shelfSESElectronicsInfo, slVTable=slVTable, cpuIdleTime=cpuIdleTime, raidVPlexName=raidVPlexName, otherDiskSerialNumber=otherDiskSerialNumber, v2ccReaddirs=v2ccReaddirs, sisLastSuccessfulOpEndTime=sisLastSuccessfulOpEndTime, qosReadaheadMaxDiskResponseTime=qosReadaheadMaxDiskResponseTime, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, avUpdate=avUpdate, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, viaInRdma=viaInRdma, cpuCPInterruptPercent=cpuCPInterruptPercent, rcTcpDelayHits=rcTcpDelayHits, ftpd=ftpd, nvramBatteryLow=nvramBatteryLow, outOfDateDisk64TotalBlocks=outOfDateDisk64TotalBlocks, cifsSmb2FileFullDirInfo=cifsSmb2FileFullDirInfo, otherDiskScsiId=otherDiskScsiId, smb2Cancels=smb2Cancels, smbNTCancelPct=smbNTCancelPct, dafsOptions=dafsOptions, enclVoltSensorsOverVoltFail=enclVoltSensorsOverVoltFail, qosWorkloadLun=qosWorkloadLun, v3ccAccesss=v3ccAccesss, spareShelf=spareShelf, broadcastDomainPorts=broadcastDomainPorts, slVVolumeName=slVVolumeName, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, rpcBadCalls=rpcBadCalls, rpcServ=rpcServ, tv2pGetattrs=tv2pGetattrs, dfInodesFree=dfInodesFree, fcpTargetEntry=fcpTargetEntry, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, remoteSystemMgmtNotification=remoteSystemMgmtNotification, licenseTable=licenseTable, dafsCacheHints=dafsCacheHints, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, logicalInterfaceNumericId=logicalInterfaceNumericId, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, spareBay=spareBay, ifHighInOctets=ifHighInOctets, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, snapmirrorBackupNumber=snapmirrorBackupNumber, cfPartnerStatus=cfPartnerStatus, tv2Read8KCalls=tv2Read8KCalls, cifsMaxFiles=cifsMaxFiles, tv3cpGetattrs=tv3cpGetattrs, obsSmbWriteRawPct=obsSmbWriteRawPct, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, dafsSessionTable=dafsSessionTable, lunCloneSplitComplete=lunCloneSplitComplete, v3Read128KCalls=v3Read128KCalls, smb2Reads=smb2Reads, dafsLookUpps=dafsLookUpps, v3cReaddirs=v3cReaddirs, dafsExportEntry=dafsExportEntry, smb2FsctlPipePeeks=smb2FsctlPipePeeks, dafsLockus=dafsLockus, pclNfsV2Nulls=pclNfsV2Nulls, smbOpenPrintFilePct=smbOpenPrintFilePct, smbDeleteDirs=smbDeleteDirs, smbEchos=smbEchos, licenseEntry=licenseEntry, tv3CachedPerCent=tv3CachedPerCent, smb2QueryFileModeInfos=smb2QueryFileModeInfos, dafsSecinfos=dafsSecinfos, miscLowNetRcvdBytes=miscLowNetRcvdBytes, v2Read2KCalls=v2Read2KCalls, slHour=slHour, fcpTargetSpeed=fcpTargetSpeed, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, cifsDirOps=cifsDirOps, cpuTotalDomainSwitches=cpuTotalDomainSwitches, initiatorListEntry=initiatorListEntry, qosPolicyGroupPgid=qosPolicyGroupPgid, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, dmpAttempts=dmpAttempts, nfsCacheHighMissRequests=nfsCacheHighMissRequests, pclTable=pclTable, smb2QueryFileFullEAInfos=smb2QueryFileFullEAInfos, sis64LastOpSize=sis64LastOpSize, smb2FsctlSetSparses=smb2FsctlSetSparses, dfHighAvailKBytes=dfHighAvailKBytes, volumeDegradedDirty=volumeDegradedDirty, nfscache=nfscache, tv3pPathconfs=tv3pPathconfs, enclCurSensorsOverCurWarnThr=enclCurSensorsOverCurWarnThr, clusterLicenseLimit=clusterLicenseLimit, raidVPlexGroup=raidVPlexGroup, dafsAppendDirects=dafsAppendDirects, v3ccRmdirs=v3ccRmdirs, cifsAlignedLargeRels=cifsAlignedLargeRels, viaCurrRegisterBytes=viaCurrRegisterBytes, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, sisState=sisState, cDOTCpTotalOps=cDOTCpTotalOps, tv3pFsinfos=tv3pFsinfos, smb2Locks=smb2Locks, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, diskSummary=diskSummary, dafsMaxIdleSeconds=dafsMaxIdleSeconds, smb2QueryFileBasicInfos=smb2QueryFileBasicInfos, enclElectronicsPresent=enclElectronicsPresent, haState=haState, v3ccWrites=v3ccWrites, plexIndex=plexIndex, v2Write128KCalls=v2Write128KCalls, v3Read512Calls=v3Read512Calls, tv3pMknods=tv3pMknods, if64InDiscards=if64InDiscards, hbaOfflineInformation=hbaOfflineInformation, vscanConfigurationChange=vscanConfigurationChange, pclPerCent=pclPerCent, smb2QueryFsObjectIdInfos=smb2QueryFsObjectIdInfos, nfsCache64MissRequests=nfsCache64MissRequests, qosReadaheadMetadata=qosReadaheadMetadata, nfsrwStats=nfsrwStats, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, fcpHighReadBytes=fcpHighReadBytes, sisStaleFpPercentage=sisStaleFpPercentage, volumeRepaired=volumeRepaired, raidPScsiAdapter=raidPScsiAdapter, raidV64TotalBlocks=raidV64TotalBlocks, qrV2Id=qrV2Id, v3pReaddirPluss=v3pReaddirPluss, tv2pSetattrs=tv2pSetattrs, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, ncOptions=ncOptions, svDst=svDst, pclNfsV2WritePerCent=pclNfsV2WritePerCent, fcpLowReadBytes=fcpLowReadBytes, sisLowLastOpSize=sisLowLastOpSize, TimeTicks64=TimeTicks64, writeVerificationFailed=writeVerificationFailed, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, lun64Errors=lun64Errors, trcUdpMisses=trcUdpMisses, rpcUdpBadCalls=rpcUdpBadCalls, qosWorkloadClass=qosWorkloadClass, slVHour=slVHour, enclTempSensorsMaximum=enclTempSensorsMaximum, domainControllerConnected=domainControllerConnected, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, spareScsiId=spareScsiId, nodeNvramBatteryStatus=nodeNvramBatteryStatus, svTotalTransMBs=svTotalTransMBs, volumeNearlyFull=volumeNearlyFull, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, netifTable=netifTable, overTempRepaired=overTempRepaired, ncHttpBWSavings=ncHttpBWSavings, raidPDiskId=raidPDiskId, Boolean=Boolean, volMoveState=volMoveState, snapvaultSchedEntry=snapvaultSchedEntry, fcpTargetPort=fcpTargetPort, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, fabricName=fabricName, dafsWriteDirects=dafsWriteDirects, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, notificationTrap=notificationTrap, lunAlignment=lunAlignment, v2pNulls=v2pNulls, smb2SetAllocInfoPct=smb2SetAllocInfoPct, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, v2cpGetattrs=v2cpGetattrs, errorTrap=errorTrap, tv3pRmdirs=tv3pRmdirs, maxDirSizeAlert=maxDirSizeAlert, v2CachedPerCent=v2CachedPerCent, qrVVolume=qrVVolume, smbNTTransactIoctls=smbNTTransactIoctls, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, v3cpRmdirs=v3cpRmdirs, tv3cpReaddirPluss=tv3cpReaddirPluss, ifLowOutOctets=ifLowOutOctets, netportIfGrpMac=netportIfGrpMac, lunSizeLow=lunSizeLow, slVMonth=slVMonth, cDOTCpFromLowDatavecsOps=cDOTCpFromLowDatavecsOps, v3pRmdirs=v3pRmdirs, miscHighDiskWriteBytes=miscHighDiskWriteBytes, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, dmpEntry=dmpEntry, avMcAfeeLicenseExpiring=avMcAfeeLicenseExpiring, raidVDiskSerialNumber=raidVDiskSerialNumber, vfProEntry=vfProEntry, nodeNvramId=nodeNvramId, df64CompressSaved=df64CompressSaved, rmcCardNeedsReplacement=rmcCardNeedsReplacement, fcp64ReadBytes=fcp64ReadBytes, smbTrans2CreateDirs=smbTrans2CreateDirs, dmpStatus=dmpStatus, v3cFsinfos=v3cFsinfos, tv3Read128KCalls=tv3Read128KCalls, tv2pStatfss=tv2pStatfss, volSpaceGuaranteeEnabled=volSpaceGuaranteeEnabled, spareDiskModel=spareDiskModel, ncTotalBWSavings=ncTotalBWSavings, nodeModel=nodeModel, snapmirrorRelDestPath=snapmirrorRelDestPath, qrType=qrType, avUpdateFailed=avUpdateFailed, raidPUsedBlocks=raidPUsedBlocks, licenseType=licenseType, viaConnRemotePortNumber=viaConnRemotePortNumber, trcTcpInProgressHits=trcTcpInProgressHits, lunSpaceReserved=lunSpaceReserved, logicalInterfaceNetmask=logicalInterfaceNetmask, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed)
mibBuilder.exportSymbols("NETAPP-MIB", dfLowUsedKBytes=dfLowUsedKBytes, clusterLicenseDescription=clusterLicenseDescription, outOfDateDiskRPM=outOfDateDiskRPM, cifsOps=cifsOps, vserverTable=vserverTable, netappProducts=netappProducts, diskVerifyingParityCount=diskVerifyingParityCount, logicalInterfaceFailoverPolicy=logicalInterfaceFailoverPolicy, fcpHighWriteBytes=fcpHighWriteBytes, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, smb2QueryFileEAInfos=smb2QueryFileEAInfos, tv3ccRenames=tv3ccRenames, spareDiskFirmwareRevision=spareDiskFirmwareRevision, volMoveStatusEntry=volMoveStatusEntry, v3cpCreates=v3cpCreates, tv3cFsinfos=tv3cFsinfos, obsSmbProcessExits=obsSmbProcessExits, pclNfsV3Fsinfos=pclNfsV3Fsinfos, qrV2Sid=qrV2Sid, df64UsedKBytes=df64UsedKBytes, pclRpcBadCalls=pclRpcBadCalls, ncDnsCacheMisses=ncDnsCacheMisses, netportVlanTag=netportVlanTag, v3cpAccesss=v3cpAccesss, viaConnLocalNetAddress=viaConnLocalNetAddress, qosPolicyGroupEntry=qosPolicyGroupEntry, clusterL2ConnFail=clusterL2ConnFail, rpcCalls=rpcCalls, vscanDisConnection=vscanDisConnection, vsRouteAddressFamily=vsRouteAddressFamily, obsSmbReadMPXPct=obsSmbReadMPXPct, volNvfail=volNvfail, outOfDateDiskPool=outOfDateDiskPool, clusterNodeRepairing=clusterNodeRepairing, qosWorkloadVserver=qosWorkloadVserver, ncStreamingOBTServers=ncStreamingOBTServers, lunComment=lunComment, ncStreamingServConns=ncStreamingServConns, licenseLegacy=licenseLegacy, tv3ccLookups=tv3ccLookups, nfsCacheBytesToClients=nfsCacheBytesToClients, v3cGetattrs=v3cGetattrs, obsSmbQueryInfos=obsSmbQueryInfos, nfsCacheIsLicensed=nfsCacheIsLicensed, sisQuickCheckFsize=sisQuickCheckFsize, tv2ccStatfss=tv2ccStatfss, chassisFanRemoved=chassisFanRemoved, v3cpReaddirs=v3cpReaddirs, avEnableFailed=avEnableFailed, misc64TapeReadBytes=misc64TapeReadBytes, ftpdTotalConns=ftpdTotalConns, dafsDelegReturns=dafsDelegReturns, licenseCustomerID=licenseCustomerID, haNodeName=haNodeName, pclNfsV2Removes=pclNfsV2Removes, licenseDescription=licenseDescription, aggrRowInfo=aggrRowInfo, cifsNOpenDirs=cifsNOpenDirs, ncBytesFromServers=ncBytesFromServers, nodeAssetTag=nodeAssetTag, qosWorkloadName=qosWorkloadName, tv3cpRmdirs=tv3cpRmdirs, smb2QueryFileModeInfoPct=smb2QueryFileModeInfoPct, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, scsibladeOutOfQuorum=scsibladeOutOfQuorum, smbNegProtPct=smbNegProtPct, nodeStatInstanceIndex=nodeStatInstanceIndex, viaConnectRequest=viaConnectRequest, snapmirrorIsLicensed=snapmirrorIsLicensed, cDOTCpuTotalDomainSwitches=cDOTCpuTotalDomainSwitches, maxDirSizeWarning=maxDirSizeWarning, ndmp=ndmp, qosReadaheadForceNone=qosReadaheadForceNone, extcache64Misses=extcache64Misses, fabricOwner=fabricOwner, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, vserverAllowedProtocolList=vserverAllowedProtocolList, dmpStSuccesses=dmpStSuccesses, rcpTcpNullRecvs=rcpTcpNullRecvs, enclElectronicsPartNos=enclElectronicsPartNos, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, tv3ccMkdirs=tv3ccMkdirs, dafsReadlinkDirects=dafsReadlinkDirects, volJunctionPathActive=volJunctionPathActive, fcpTargetName=fcpTargetName, ncFtp=ncFtp, qtreeStyle=qtreeStyle, tv3cGetattrs=tv3cGetattrs, smbCopyPct=smbCopyPct, dafsCloses=dafsCloses, vserverLdapClient=vserverLdapClient, chassisPSRemovedxMinShutdown=chassisPSRemovedxMinShutdown, cDOTCpuNonCPInterrupts=cDOTCpuNonCPInterrupts, v2ccLinks=v2ccLinks, spareDiskSerialNumber=spareDiskSerialNumber, snapmirrorRelStatus=snapmirrorRelStatus, portSwitchName=portSwitchName, volMoveCutoverDeferredWait=volMoveCutoverDeferredWait, vfStoragePaths=vfStoragePaths, ipspaceName=ipspaceName, snapmirrorRelGroupType=snapmirrorRelGroupType, if64InNUcastPkts=if64InNUcastPkts, netportLinkState=netportLinkState, v2pReads=v2pReads, tv2pRmdirs=tv2pRmdirs, smb2WritePct=smb2WritePct, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, cifsLocks=cifsLocks, dafsSessionEntry=dafsSessionEntry, smb2QueryFsFullSizeInfos=smb2QueryFsFullSizeInfos, viaCurrConnectPending=viaCurrConnectPending, qrV2Index=qrV2Index, dmpIndex=dmpIndex, logicalInterfaceFirewallPolicy=logicalInterfaceFirewallPolicy, dmpStFailures=dmpStFailures, switch64PacketsRejected=switch64PacketsRejected, tv3cReads=tv3cReads, raidTotalBlocks=raidTotalBlocks, cifsSmb2MidUsedHash=cifsSmb2MidUsedHash, v2pRoots=v2pRoots, qosWorkloadId=qosWorkloadId, sisVserver=sisVserver, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, v3pLinks=v3pLinks, dafsCalls=dafsCalls, svHostIndex=svHostIndex, miscHighDiskReadBytes=miscHighDiskReadBytes, psetVserver=psetVserver, dafsCommits=dafsCommits, nodeLocation=nodeLocation, rmcCardMissingCables=rmcCardMissingCables, tv3cpReads=tv3cpReads, vserverName=vserverName, cifsSmb2FileIdBothDirInfo=cifsSmb2FileIdBothDirInfo, diskMultipathNoTakeover=diskMultipathNoTakeover, prefDCDisconnect=prefDCDisconnect, tv2cSymlinks=tv2cSymlinks, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, fcpLowOps=fcpLowOps, logicalInterfaceComment=logicalInterfaceComment, misc64CifsOps=misc64CifsOps, obsSmbOpenAndXPct=obsSmbOpenAndXPct, snapmirrorRelExportedSnapshotTimeStamp=snapmirrorRelExportedSnapshotTimeStamp, viaNodeSystemName=viaNodeSystemName, initiatorGroupMemberEntry=initiatorGroupMemberEntry, v2cpCreates=v2cpCreates, v3pMkdirs=v3pMkdirs, volMoveIndex=volMoveIndex, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, cifsSmb2Ioctl=cifsSmb2Ioctl, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, obsSmbCreateNews=obsSmbCreateNews, pclNfsV2Setattrs=pclNfsV2Setattrs, dfPerCentSaved=dfPerCentSaved, qtreeId=qtreeId, ncHttpHitRequests=ncHttpHitRequests, ifHighOutOctets=ifHighOutOctets, qosReadaheadMaxRetireTime=qosReadaheadMaxRetireTime, snapmirrorSyncFailed=snapmirrorSyncFailed, v3pLookups=v3pLookups, viaConnLocalPortNumber=viaConnLocalPortNumber, snapmirrorConnSrc2=snapmirrorConnSrc2, cpFromHighWaterOps=cpFromHighWaterOps, initiatorGroupMemberTable=initiatorGroupMemberTable, smb2NegProts=smb2NegProts, fcpCfMode=fcpCfMode, smbWriteAndXPct=smbWriteAndXPct, vfStopped=vfStopped, vfSpEntry=vfSpEntry, dmpLevel=dmpLevel, tv3ccCommits=tv3ccCommits, vserver=vserver, smbTrans2CreateDirPct=smbTrans2CreateDirPct, switchSymbolicName=switchSymbolicName, enclVoltSensorsPresent=enclVoltSensorsPresent, raidPEntry=raidPEntry, upsBatteryWarning=upsBatteryWarning, cpFromSyncOps=cpFromSyncOps, tv3Read4KCalls=tv3Read4KCalls, tv3cpPathconfs=tv3cpPathconfs, plexFailed=plexFailed, tv2ccWrites=tv2ccWrites, netportAutonegOper=netportAutonegOper, userDefined=userDefined, vfFpIndex=vfFpIndex, logicalInterfaceAddress=logicalInterfaceAddress, sisQueuedJob=sisQueuedJob, qvStateName=qvStateName, cifsSmb2FileDirInfo=cifsSmb2FileDirInfo, nodeEligibility=nodeEligibility, dafsSessionNumRequests=dafsSessionNumRequests, accelmonitor=accelmonitor, cifsDomainJoined=cifsDomainJoined, psetPortVserver=psetPortVserver, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, slVEntry=slVEntry, cifsPDCUpcalls=cifsPDCUpcalls, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, lunSerialNumber=lunSerialNumber, raidVDiskUID=raidVDiskUID, tv2pReaddirs=tv2pReaddirs, chassisTemperatureOk=chassisTemperatureOk, cifsOthers=cifsOthers, dafsRegisterCreds=dafsRegisterCreds, dfLowSisSavedKBytes=dfLowSisSavedKBytes, extcache64Invalidates=extcache64Invalidates, aggrState=aggrState, qosReadaheadDiskResponseFactor=qosReadaheadDiskResponseFactor, cifsMaxTrees=cifsMaxTrees, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, df64TotalSaved=df64TotalSaved, raidVDiskPort=raidVDiskPort, cifsInfo=cifsInfo, logicalInterfaceStatusOper=logicalInterfaceStatusOper, cpTime=cpTime, smb2SetFileDispInfoPct=smb2SetFileDispInfoPct, lunLowOps=lunLowOps, obsSmbWritePct=obsSmbWritePct, raidVUsedMb=raidVUsedMb, dafsReadDirects=dafsReadDirects, netportIfGrpNode=netportIfGrpNode, volInNvfailedState=volInNvfailedState, aggrOwningHost=aggrOwningHost, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, raidVDiskName=raidVDiskName, dmpStAttempts=dmpStAttempts, ncDnsIsEnabled=ncDnsIsEnabled, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct, v3cpLinks=v3cpLinks, viaNicTable=viaNicTable, ifLowInUnknownProtos=ifLowInUnknownProtos, pclNfsV2Rmdirs=pclNfsV2Rmdirs, initiatorGroupUsePartner=initiatorGroupUsePartner, volTable=volTable, slVNumber=slVNumber, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, v2ccWrcaches=v2ccWrcaches, fsStatus=fsStatus, fanFailed=fanFailed, clusterNodeTakenOver=clusterNodeTakenOver, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, sisStatus=sisStatus, raidVShelf=raidVShelf, v2cpRemoves=v2cpRemoves, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, cifsObsPercent=cifsObsPercent, smb2QueryFileNetOpenInfoPct=smb2QueryFileNetOpenInfoPct, cDOTCpFromTimerOps=cDOTCpFromTimerOps, initiatorGroupVserver=initiatorGroupVserver, dfHighTotalKBytes=dfHighTotalKBytes, tv3ccSetattrs=tv3ccSetattrs, v2Read512Calls=v2Read512Calls)
mibBuilder.exportSymbols("NETAPP-MIB", ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, fcpTargetLifHomeNode=fcpTargetLifHomeNode, vsFirewallPolicyName=vsFirewallPolicyName, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, svHostType=svHostType, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, volumeOfflineTooBig=volumeOfflineTooBig, tv3cNulls=tv3cNulls, dafsReleaseCreds=dafsReleaseCreds, nfsCacheMissRequests=nfsCacheMissRequests, enclCurSensorsOverCurWarn=enclCurSensorsOverCurWarn, netportVlanNode=netportVlanNode, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, tv3Read1KCalls=tv3Read1KCalls, snapmirrorConnEntry=snapmirrorConnEntry, dfStateOnline=dfStateOnline, vfFiIndex=vfFiIndex, enclVoltSensorsUnderVoltWarn=enclVoltSensorsUnderVoltWarn, v3Write128KCalls=v3Write128KCalls, v3ReadStats=v3ReadStats, obsSmbReadMPXs=obsSmbReadMPXs, clusterLinkDown=clusterLinkDown, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, fcpTargetStatus=fcpTargetStatus, v2Read4KCalls=v2Read4KCalls, sisTable=sisTable, smb2SetInfoInvalids=smb2SetInfoInvalids, PYSNMP_MODULE_ID=netappModuleId, vfFilers=vfFilers, lunSnapRestoreStatus=lunSnapRestoreStatus, qrVEntry=qrVEntry, vserverNsSwitch=vserverNsSwitch, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, otherDiskIndex=otherDiskIndex, netappFiler=netappFiler, vsFailoverGroupVserverID=vsFailoverGroupVserverID, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex, snapmirrorConnType=snapmirrorConnType, haEntry=haEntry, switchStatus=switchStatus, vfProName=vfProName, extcache64HitNormalL0=extcache64HitNormalL0, lunEntry=lunEntry, raidVNumber=raidVNumber, enclSASConnectVendor=enclSASConnectVendor, snapmirror=snapmirror, snapmirrorLastTransType=snapmirrorLastTransType, cpuCount=cpuCount, ifLowOutDiscards=ifLowOutDiscards, takeoverinfo=takeoverinfo, vfUuid=vfUuid, v3cPathconfs=v3cPathconfs, smb2FsctlEnumSnapshotsPct=smb2FsctlEnumSnapshotsPct, netportUpAdmin=netportUpAdmin, ncNntpBytesToClients=ncNntpBytesToClients, v3cNulls=v3cNulls, tv3ccReaddirs=tv3ccReaddirs, smbFindClose2s=smbFindClose2s, cifsCancelLocks=cifsCancelLocks, pclNfsV3Removes=pclNfsV3Removes, v3cSetattrs=v3cSetattrs, trcUdpInProgressHits=trcUdpInProgressHits, smbNTCancels=smbNTCancels, dafsLocks=dafsLocks, tv3ccReaddirPluss=tv3ccReaddirPluss, obsSmbWrites=obsSmbWrites, raidVGroupNumber=raidVGroupNumber, netportType=netportType, svThrottleValue=svThrottleValue, rcNonIdemDoneHits=rcNonIdemDoneHits, pclNumber=pclNumber, psetMemberEntry=psetMemberEntry, cifsTotalOps=cifsTotalOps, ifHighInErrors=ifHighInErrors, trcTcpMisses=trcTcpMisses, tv3WriteStats=tv3WriteStats, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, subnetAvailableCount=subnetAvailableCount, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, ncStreamingOptions=ncStreamingOptions, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, nodeStatValues=nodeStatValues, volMoveStatusTable=volMoveStatusTable, qrV2Vserver=qrV2Vserver, qtreeVolume=qtreeVolume, cifsTotalCalls=cifsTotalCalls, rpcUdpBadLens=rpcUdpBadLens, cifsMaxACLs=cifsMaxACLs, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, ncDnsIresReverseLookups=ncDnsIresReverseLookups, vscanVirusDetectedError=vscanVirusDetectedError, remoteSystemMgmtPeriodic=remoteSystemMgmtPeriodic, dafsWriteInlines=dafsWriteInlines, enclContactState=enclContactState, qrVSid=qrVSid, ncNntpServConns=ncNntpServConns, tv3pRenames=tv3pRenames, volFSID=volFSID, dafsCreates=dafsCreates, qtreeMode=qtreeMode, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, fcpTargetType=fcpTargetType, v2Write2KCalls=v2Write2KCalls, enclCurSensorsCurrentCur=enclCurSensorsCurrentCur, smb2SetFullEaInfos=smb2SetFullEaInfos, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, slName=slName, cDOTCpEntry=cDOTCpEntry, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, qtreeExportPolicy=qtreeExportPolicy, dafsInBytes=dafsInBytes, ncRM=ncRM, pclNfsV3NullPerCent=pclNfsV3NullPerCent, avMcAfeeProductExpired=avMcAfeeProductExpired, v3ccCreates=v3ccCreates, productId=productId, cDOTCpFromLogFullOps=cDOTCpFromLogFullOps, vfSpIndex=vfSpIndex, v3pRemoves=v3pRemoves, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, raidPDiskNumber=raidPDiskNumber, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, v3cpMknods=v3cpMknods, ifLowInOctets=ifLowInOctets, smbDeletes=smbDeletes, snapvault=snapvault, raidVIndex=raidVIndex, viaProviderVersion=viaProviderVersion, cDOTCpuCPInterruptPercent=cDOTCpuCPInterruptPercent, dafsGetFsattrs=dafsGetFsattrs, raid=raid, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, raidPIndex=raidPIndex, iscsiIsLicensed=iscsiIsLicensed, svSecondaryIsLicensed=svSecondaryIsLicensed, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, cifsSmb2FileRequest=cifsSmb2FileRequest, lunCloneSplitStart=lunCloneSplitStart, pclNfsV2Lookups=pclNfsV2Lookups, cpFromNvlogReplayTakeoverTime=cpFromNvlogReplayTakeoverTime, smb2QueryFileNetOpenInfos=smb2QueryFileNetOpenInfos, tv3pNulls=tv3pNulls, cifsSmb2QueryInfo=cifsSmb2QueryInfo, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, amTable=amTable, smb2CancelPct=smb2CancelPct, cifsAltNames=cifsAltNames, smbCheckDirs=smbCheckDirs, dafsOpenattrs=dafsOpenattrs, trcNonIdemDoneHits=trcNonIdemDoneHits, snapshot=snapshot, ncCmsOptions=ncCmsOptions, v2cSetattrs=v2cSetattrs, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, clusterLicenseExpirationDate=clusterLicenseExpirationDate, cpFromLowVbufOps=cpFromLowVbufOps, slVName=slVName, subnetUsedCount=subnetUsedCount, tv3cpMknods=tv3cpMknods, qtreeIndex=qtreeIndex, snapmirrorDst=snapmirrorDst, cifsAlignedSmalls=cifsAlignedSmalls, v2ccRmdirs=v2ccRmdirs, tv2cNulls=tv2cNulls, ndmpBackupFailures=ndmpBackupFailures, dafsCurrentRequests=dafsCurrentRequests, qrVType=qrVType, lunName=lunName, tv3Write64KCalls=tv3Write64KCalls, dafsSessionNumCredentials=dafsSessionNumCredentials, trpcNullRecvs=trpcNullRecvs, netportMac=netportMac, raidVSecondaryDiskName=raidVSecondaryDiskName, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, extcache64MetaData=extcache64MetaData, v2ccMkdirs=v2ccMkdirs, v3ccReads=v3ccReads, v2cRemoves=v2cRemoves, nfsCacheIsEnabled=nfsCacheIsEnabled, remoteSystemMgmtWarning=remoteSystemMgmtWarning, enclSASConnectCableLen=enclSASConnectCableLen, tv2Write2KCalls=tv2Write2KCalls, haCannotTakeoverCause=haCannotTakeoverCause, dhmNoticeDegradedIO=dhmNoticeDegradedIO, appAlert=appAlert, miscCacheAge=miscCacheAge, cifsNDomainControllers=cifsNDomainControllers, obsSmbWriteRaws=obsSmbWriteRaws, ncDnsIresIsEnabled=ncDnsIresIsEnabled, chassisPowerSupplyFailed=chassisPowerSupplyFailed, cpuBusyTimePerCent=cpuBusyTimePerCent, ifHighOutUcastPkts=ifHighOutUcastPkts, miscHighCifsOps=miscHighCifsOps, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, volState=volState, cfCannotTakeoverCause=cfCannotTakeoverCause, cfPartnerSysid=cfPartnerSysid, v3ccLinks=v3ccLinks, vifPrimaryLinkFailed=vifPrimaryLinkFailed, v3cpWrites=v3cpWrites, smb2SetFileLinkInfoPct=smb2SetFileLinkInfoPct, dafsReaddirDirects=dafsReaddirDirects, overTempShutdown=overTempShutdown, extcacheSubType=extcacheSubType, dfHighSisSavedKBytes=dfHighSisSavedKBytes, nfsCache64BytesFromClients=nfsCache64BytesFromClients, raidPDiskModel=raidPDiskModel, snapmirrorStatus=snapmirrorStatus, dmpTable=dmpTable, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, netportIfGrpDistrFunc=netportIfGrpDistrFunc, ncNntpTotalRequests=ncNntpTotalRequests, upsBatteryCritical=upsBatteryCritical, smb2SetModeInfoPct=smb2SetModeInfoPct, sisLastOpError=sisLastOpError, portNumber=portNumber, tv3cMknods=tv3cMknods, ipspaceBroadcastDomains=ipspaceBroadcastDomains, smbGetPrintQueues=smbGetPrintQueues, lun64ReadOps=lun64ReadOps, svBackupSnapWarningLimit=svBackupSnapWarningLimit, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, v2ccRoots=v2ccRoots, svSystemActiveDstNumber=svSystemActiveDstNumber, fsOverallStatus=fsOverallStatus, smb2QueryFileAltNamePct=smb2QueryFileAltNamePct, smbNegProts=smbNegProts, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, netportRemoteDeviceId=netportRemoteDeviceId, av2gbFileNotScanned=av2gbFileNotScanned, logicalInterfaceSticky=logicalInterfaceSticky, fcpTargetLifEntry=fcpTargetLifEntry, qosReadaheadInterarrivalWeight=qosReadaheadInterarrivalWeight, netportRole=netportRole, cifsNSessions=cifsNSessions, viaErrCompProt=viaErrCompProt, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, dafsMaxRequests=dafsMaxRequests, cDOTCpuUpTime=cDOTCpuUpTime, cifsIsEnabled=cifsIsEnabled, dafsNulls=dafsNulls, volMoveCOtime=volMoveCOtime, volumeRemoteRestored=volumeRemoteRestored, logicalInterfaceEntry=logicalInterfaceEntry, ncNntpCliConns=ncNntpCliConns, grmMonitorToggle=grmMonitorToggle, viaNicAddress=viaNicAddress, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, rcUdpMisses=rcUdpMisses, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, dafsOpens=dafsOpens)
mibBuilder.exportSymbols("NETAPP-MIB", otherDiskType=otherDiskType, v3pSetattrs=v3pSetattrs, otherDiskDiskPort=otherDiskDiskPort, sisLastSuccessfulOpBeginTime=sisLastSuccessfulOpBeginTime, enclSASConnectType=enclSASConnectType, raidVSecondaryDiskPort=raidVSecondaryDiskPort, dfCompressSavedPercent=dfCompressSavedPercent, spareSectorSize=spareSectorSize, cifsConnectedUsers=cifsConnectedUsers, scsitgtThrottleNotice=scsitgtThrottleNotice, netifIndex=netifIndex, volumeReserveGrew=volumeReserveGrew, obsSmbCreates=obsSmbCreates, cifsWaitLocks=cifsWaitLocks, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, tv3Read2KCalls=tv3Read2KCalls, nfsCacheRpcRecords=nfsCacheRpcRecords, ncHttpsAccelTable=ncHttpsAccelTable, qosReadaheadUseHistogram=qosReadaheadUseHistogram, psetType=psetType, dfHighUsedKBytes=dfHighUsedKBytes, informationalTrap=informationalTrap, svHostTotalDeferments=svHostTotalDeferments, volRowInfo=volRowInfo, smb2QueryFsVolInfoPct=smb2QueryFsVolInfoPct, dafsAppendInlines=dafsAppendInlines, cDOTCpFromCpOps=cDOTCpFromCpOps, lunMapTable=lunMapTable, avDisable=avDisable, smb2SetFullEaInfoPct=smb2SetFullEaInfoPct, v2cpStatfss=v2cpStatfss, v3cReadlinks=v3cReadlinks, tv2cMkdirs=tv2cMkdirs, v2pRemoves=v2pRemoves, licenseExpiration=licenseExpiration, volSpaceGuarantee=volSpaceGuarantee, smb2QueryFileAccessInfos=smb2QueryFileAccessInfos, tv2cpLinks=tv2cpLinks, trpcServ=trpcServ, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, extcache64RCLength=extcache64RCLength, smb2QueryFileAltNames=smb2QueryFileAltNames, obsSmbTrans2Open2s=obsSmbTrans2Open2s, snapmirrorRelTotalTransTimeSeconds=snapmirrorRelTotalTransTimeSeconds, snapmirrorRelBreakFailCnt=snapmirrorRelBreakFailCnt, powerSupplyFailed=powerSupplyFailed, tv3pLookups=tv3pLookups, cpFromLowWaterOps=cpFromLowWaterOps, v3cReads=v3cReads, ncNntpIsEnabled=ncNntpIsEnabled, nfsServBadCalls=nfsServBadCalls, dafsLinks=dafsLinks, aggrFlexvollist=aggrFlexvollist, v2cpMkdirs=v2cpMkdirs, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures, lunSizeHigh=lunSizeHigh, ncNntp=ncNntp, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, tv2cpStatfss=tv2cpStatfss, sisIndex=sisIndex, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, dfKBytesAvail=dfKBytesAvail, nfsCacheHitRequests=nfsCacheHitRequests, tv2Write32KCalls=tv2Write32KCalls, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, amMonitor=amMonitor, v3ccPathconfs=v3ccPathconfs, slQVolume=slQVolume, ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, snapmirrorRelUpdateSuccCnt=snapmirrorRelUpdateSuccCnt, v3cLookups=v3cLookups, sysStat=sysStat, svTotalTransTimeSeconds=svTotalTransTimeSeconds, slVDay=slVDay, vsFirewallPolicyUuid=vsFirewallPolicyUuid, smb2IpcWrites=smb2IpcWrites, vserverQuotaPolicy=vserverQuotaPolicy, vserverDisallowedProtocolList=vserverDisallowedProtocolList, obsSmbClosePrintFiles=obsSmbClosePrintFiles, vfProIndex=vfProIndex, nodeName=nodeName, ncHttpAvgRespTime=ncHttpAvgRespTime, obsSmbCreateDirPct=obsSmbCreateDirPct, initiatorName=initiatorName, snapmirrorArguments=snapmirrorArguments, clusterLicenseFeature=clusterLicenseFeature, v3Write8KCalls=v3Write8KCalls, switchLowPacketsRejected=switchLowPacketsRejected, tv3cpLinks=tv3cpLinks, quotaState=quotaState, enclCurSensorsOverCurFail=enclCurSensorsOverCurFail, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, subnetBroadcastDomainName=subnetBroadcastDomainName, snapmirrorRelStatusTable=snapmirrorRelStatusTable, ncCmsIsEnabled=ncCmsIsEnabled, qosReadaheadOvershoot=qosReadaheadOvershoot, cifsIsLicensed=cifsIsLicensed, v2cReadlinks=v2cReadlinks, raidVScsiId=raidVScsiId, v3pRenames=v3pRenames, vserverEntry=vserverEntry, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers, smb2IpcCreates=smb2IpcCreates, qosPolicyGroupMaxThroughput=qosPolicyGroupMaxThroughput, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, diskAddingSpareCount=diskAddingSpareCount, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, cpTotalOps=cpTotalOps, tv3ccReadlinks=tv3ccReadlinks, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds, viaInRDMAReadBytes=viaInRDMAReadBytes, portFabricIndex=portFabricIndex, cifsPCGenericUser=cifsPCGenericUser, otherDiskStatus=otherDiskStatus, logicalInterfaceServer=logicalInterfaceServer, avSpywareFound=avSpywareFound, tv2cGetattrs=tv2cGetattrs, smbNTCreateAndXs=smbNTCreateAndXs, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, ncDnsIresForwardLookups=ncDnsIresForwardLookups, ncAuth=ncAuth, subnetTable=subnetTable, vfiler=vfiler, ncNtlm=ncNtlm, ncStreaming=ncStreaming, pclNfsV2RootPerCent=pclNfsV2RootPerCent, iscsiLowOps=iscsiLowOps, ftpdMaxConns=ftpdMaxConns, tv3Read16KCalls=tv3Read16KCalls, tv3pSymlinks=tv3pSymlinks, trpcCalls=trpcCalls, smbCreateTemporaryPct=smbCreateTemporaryPct, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, tv2cRemoves=tv2cRemoves, fcp64Ops=fcp64Ops, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, smb2QueryFileStreamInfoPct=smb2QueryFileStreamInfoPct, switchName=switchName, ncStreamingAccelTable=ncStreamingAccelTable, dafsOutBytes=dafsOutBytes, obsSmbCreateNewPct=obsSmbCreateNewPct, rstActives=rstActives, dafsReadlinkInlines=dafsReadlinkInlines, qosReadaheadClass=qosReadaheadClass, targetAdapterName=targetAdapterName, autosupport=autosupport, otherDiskCarrierID=otherDiskCarrierID, enclProductRevision=enclProductRevision, dafsGetFencingLists=dafsGetFencingLists, netportBroadcastDomain=netportBroadcastDomain, qosWorkloadTable=qosWorkloadTable, smb2Echos=smb2Echos, tv3pCommits=tv3pCommits, smbNTCancelOthers=smbNTCancelOthers, dafsSetattrInlines=dafsSetattrInlines, pclNfsV2Statfss=pclNfsV2Statfss, df64TotalReservedKBytes=df64TotalReservedKBytes, smb2UnLockPct=smb2UnLockPct, tv2cRmdirs=tv2cRmdirs, tv2WriteStats=tv2WriteStats, pclIpAddr=pclIpAddr, volAggrName=volAggrName, rcInProgressHits=rcInProgressHits, v3pCreates=v3pCreates, smbDeleteDirPct=smbDeleteDirPct, productPartnerSerialNum=productPartnerSerialNum, slVIndex=slVIndex, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, smb2IpcCreatePct=smb2IpcCreatePct, sisLogicalLimit=sisLogicalLimit, appWarning=appWarning, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, trcUdpDelayHits=trcUdpDelayHits, snapvaultHostEntry=snapvaultHostEntry, sisMinBlocksShared=sisMinBlocksShared, filesys=filesys, v3ccNulls=v3ccNulls, qosReadaheadMaxRange=qosReadaheadMaxRange, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, vserverNisDomain=vserverNisDomain, outOfDateDiskShelf=outOfDateDiskShelf, v3cpRenames=v3cpRenames, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, netportFlowcontrolAdmin=netportFlowcontrolAdmin, snapmirrorRelPolicy=snapmirrorRelPolicy, diskSpareCount=diskSpareCount, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, outOfDateDiskScsiId=outOfDateDiskScsiId, ncHttpActiveCliConns=ncHttpActiveCliConns, broadcastDomainTable=broadcastDomainTable, tv3cpCreates=tv3cpCreates, v2cWrites=v2cWrites, slTable=slTable, v2Write512Calls=v2Write512Calls, dafsMaxResponseSize=dafsMaxResponseSize, qrV264KBytesLimit=qrV264KBytesLimit, productLicenseEntry=productLicenseEntry, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, criticalTrap=criticalTrap, smbClosePct=smbClosePct, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, ncIcapv1IsEnabled=ncIcapv1IsEnabled, qrV2Type=qrV2Type, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, qrVIndex=qrVIndex, v3pGetattrs=v3pGetattrs, smbTrans2FindFirst2s=smbTrans2FindFirst2s, cifsQueuedWriteRaws=cifsQueuedWriteRaws, snapmirrorStatusTable=snapmirrorStatusTable, cifsObsReqs=cifsObsReqs, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, volType=volType, spare64TotalBlocks=spare64TotalBlocks, tv2Write4KCalls=tv2Write4KCalls, snapmirrorRelLastTransferTimeSeconds=snapmirrorRelLastTransferTimeSeconds, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, cDOTCpFromSyncOps=cDOTCpFromSyncOps, smb2SetFileLinkInfos=smb2SetFileLinkInfos, tv2CachedCalls=tv2CachedCalls, tv3ccCreates=tv3ccCreates, sisIsCompressionEnabled=sisIsCompressionEnabled, rpcUdpServXDRCalls=rpcUdpServXDRCalls, netOptsv6RAProcEnabled=netOptsv6RAProcEnabled, nodeStatProperties=nodeStatProperties, iscsiHighWriteBytes=iscsiHighWriteBytes, sisChangelogUsedPercent=sisChangelogUsedPercent, nodeStatEntry=nodeStatEntry, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, raidVStatus=raidVStatus, v3ccSymlinks=v3ccSymlinks, dafsNicNumRqstDemons=dafsNicNumRqstDemons, iscsiLowWriteBytes=iscsiLowWriteBytes, raidPCompletionPerCent=raidPCompletionPerCent, v2pGetattrs=v2pGetattrs, v3ccMknods=v3ccMknods, enclosure=enclosure, dafsNicNumRequestDemons=dafsNicNumRequestDemons, treplyCache=treplyCache, switchDomain=switchDomain, v3Write32KCalls=v3Write32KCalls, pclNfsV3Renames=pclNfsV3Renames, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, viaCreated=viaCreated, sisIsInlineEnabled=sisIsInlineEnabled, smb2NegProtPct=smb2NegProtPct, outOfDateDiskDiskPort=outOfDateDiskDiskPort, enclSASConnectCableTech=enclSASConnectCableTech, miscLowCifsOps=miscLowCifsOps, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, tv2pWrcaches=tv2pWrcaches)
mibBuilder.exportSymbols("NETAPP-MIB", pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, tv2pRenames=tv2pRenames, diskFailedCount=diskFailedCount, v3cpSetattrs=v3cpSetattrs, rcMisses=rcMisses, cDOTCpuIdleTime=cDOTCpuIdleTime, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, extcache=extcache, qrV2Volume=qrV2Volume, aggrVolumeFootprints=aggrVolumeFootprints, shelfFault=shelfFault, ncHttpAccelIndex=ncHttpAccelIndex, productApiUrl=productApiUrl, tv3cpCommits=tv3cpCommits, rebootAbnormal=rebootAbnormal, viaMaxTransferSize=viaMaxTransferSize, volumeInconsistentUmount=volumeInconsistentUmount, Uuid=Uuid, diskScrubbingCount=diskScrubbingCount, qrVFileLimitSoft=qrVFileLimitSoft, dafsSetattrDirects=dafsSetattrDirects, smb2SetFileDispInfos=smb2SetFileDispInfos, switchTable=switchTable, snapmirrorRelExportedSnapshot=snapmirrorRelExportedSnapshot, cifsNeedPW=cifsNeedPW, obsSmbReadPct=obsSmbReadPct, snapmirrorRelLastTransferType=snapmirrorRelLastTransferType, pclNfsV2Readdirs=pclNfsV2Readdirs, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, snapvaultStatusTable=snapvaultStatusTable, cifsMaxShares=cifsMaxShares, volJunctionPath=volJunctionPath, dafsGetattrDirects=dafsGetattrDirects, vsFirewallPolicyVserverID=vsFirewallPolicyVserverID, smb2QueryFileInvalids=smb2QueryFileInvalids, pclNfsV3Accesss=pclNfsV3Accesss, volProvenanceUUID=volProvenanceUUID, ndmpTapeActive=ndmpTapeActive, ncRMMem=ncRMMem, pclNfsV2Getattrs=pclNfsV2Getattrs, smbNTTransactIoctlPct=smbNTTransactIoctlPct, initiatorGroupOS=initiatorGroupOS, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, v2cLinks=v2cLinks, tv2pSymlinks=tv2pSymlinks, spareSecondaryDiskName=spareSecondaryDiskName, smb2QueryFileUnsupporteds=smb2QueryFileUnsupporteds, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, portIndex=portIndex, ncHttpOptions=ncHttpOptions, raidPCarrierID=raidPCarrierID, ncNntpCacheableRequests=ncNntpCacheableRequests, licenseIsAutoEnabled=licenseIsAutoEnabled, tv3cpMkdirs=tv3cpMkdirs, qrV2Tree=qrV2Tree, productLicenseIndex=productLicenseIndex, netifEntry=netifEntry, smb2TreeDisconnectPct=smb2TreeDisconnectPct, dafsGetattrInlines=dafsGetattrInlines, ncGrmServerOptions=ncGrmServerOptions, tv2cpCreates=tv2cpCreates, netapp=netapp, cifsSecurityModel=cifsSecurityModel, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, curNfs=curNfs, smb2TreeDisconnects=smb2TreeDisconnects, enclEntry=enclEntry, fabric=fabric, vserverAggregate=vserverAggregate, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, qrVFilesUsed=qrVFilesUsed, diskTotalCount=diskTotalCount, extcacheOptions=extcacheOptions, haPartnerLastStatusUpdate=haPartnerLastStatusUpdate, tv3cpReadlinks=tv3cpReadlinks, raidPDiskName=raidPDiskName, alfFilewrap=alfFilewrap, smbMovePct=smbMovePct, pclNfsV3Pathconfs=pclNfsV3Pathconfs, raidVDiskId=raidVDiskId, aggrOwners=aggrOwners, cifsSmb2DurableCreateSucceeded=cifsSmb2DurableCreateSucceeded, ncFtpActiveCliConns=ncFtpActiveCliConns, cifsPercent=cifsPercent, tv3ccFsinfos=tv3ccFsinfos, viaCurrVI=viaCurrVI, v3Percent=v3Percent, cDOTCpuSwitchInvocations=cDOTCpuSwitchInvocations, subnetTotalCount=subnetTotalCount, lunTable=lunTable, ncHttpBytesFromClients=ncHttpBytesFromClients, qosReadaheadUseFeedback=qosReadaheadUseFeedback, smb2QueryFsDeviceInfoPct=smb2QueryFsDeviceInfoPct, nfsCacheBytesFromClients=nfsCacheBytesFromClients, qosWorkloadReadAhead=qosWorkloadReadAhead, v3ccMkdirs=v3ccMkdirs, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, sisRowAvailable=sisRowAvailable, raidIndex=raidIndex, tv2cpWrites=tv2cpWrites, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, productVersion=productVersion, smbRenamePct=smbRenamePct, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, dafsBcNulls=dafsBcNulls, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent, v3cCreates=v3cCreates, dafsDirectOutBytes=dafsDirectOutBytes, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, smbLogoffAndXPct=smbLogoffAndXPct, ncHttpBytesFromServers=ncHttpBytesFromServers, compressIndex=compressIndex, raidP64TotalBlocks=raidP64TotalBlocks, qosWorkloadQtree=qosWorkloadQtree, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, pclNfsV2Readlinks=pclNfsV2Readlinks, dfMountedOn=dfMountedOn, v2cpReaddirs=v2cpReaddirs, cifsNOplockBreakWaits=cifsNOplockBreakWaits, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, qosReadaheadUseTiming=qosReadaheadUseTiming, tv3pRemoves=tv3pRemoves, qrV264KBytesSoftLimit=qrV264KBytesSoftLimit, miscLowTapeReadBytes=miscLowTapeReadBytes, takeoverStatus=takeoverStatus, viaConnectWait=viaConnectWait, misc64DiskWriteBytes=misc64DiskWriteBytes, v3ccReadlinks=v3ccReadlinks, avRollback=avRollback, qosMonitorMemoryMaxed=qosMonitorMemoryMaxed, logicalInterfaceTable=logicalInterfaceTable, ifLowInDiscards=ifLowInDiscards, chassisFanWarning=chassisFanWarning, cifsSmb2MidInvReject=cifsSmb2MidInvReject, ncHttpAccelHits=ncHttpAccelHits, volumeSelectedRootConflict=volumeSelectedRootConflict, totNfs=totNfs, lunOnline=lunOnline, smb2QuerySecurityInfos=smb2QuerySecurityInfos, snapmirrorRelLastTransferError=snapmirrorRelLastTransferError, cifsSmb2FileIdFullDirInfo=cifsSmb2FileIdFullDirInfo, netportIfGrpActivePorts=netportIfGrpActivePorts, sisLastOpBeginTime=sisLastOpBeginTime, if64InUcastPkts=if64InUcastPkts, dafsRemoves=dafsRemoves, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, v3Write16KCalls=v3Write16KCalls, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, shelfIFModuleFailed=shelfIFModuleFailed, dafsClientAuths=dafsClientAuths, dafsExportIndex=dafsExportIndex, smb2Writes=smb2Writes, qosWorkloadCache=qosWorkloadCache, dfType=dfType, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, raidVDiskRPM=raidVDiskRPM, smb2FsctlEnumSnapshotss=smb2FsctlEnumSnapshotss, ifHighOutErrors=ifHighOutErrors, fcpTargetNN=fcpTargetNN, svSchedSchedule=svSchedSchedule, qosReadaheadSettingsTable=qosReadaheadSettingsTable, qosReadaheadUseAsync=qosReadaheadUseAsync, raidPStatus=raidPStatus, productVendor=productVendor, svTotalSuccesses=svTotalSuccesses, nodeStatCategoryName=nodeStatCategoryName, ifLowOutNUcastPkts=ifLowOutNUcastPkts, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, smb2SetRenameInfos=smb2SetRenameInfos, logicalInterfaceIsHome=logicalInterfaceIsHome, tv2cRoots=tv2cRoots, cDOTCpFromHighWaterOps=cDOTCpFromHighWaterOps, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, v3cpReaddirPluss=v3cpReaddirPluss, nodeEnvFailedFanMessage=nodeEnvFailedFanMessage, nodeEnvFailedPowerSupplyCount=nodeEnvFailedPowerSupplyCount, svLag=svLag, avEnable=avEnable, v3Read2KCalls=v3Read2KCalls, obsSmbOpenPct=obsSmbOpenPct, licenseIsSite=licenseIsSite, qrEntry=qrEntry, lunCount=lunCount, raidScsiAdapter=raidScsiAdapter, v3cpRemoves=v3cpRemoves, dafsDirectInBytes=dafsDirectInBytes, dafsDefaultUid=dafsDefaultUid, if64OutNUcastPkts=if64OutNUcastPkts, smbNTTransactCreates=smbNTTransactCreates, tv3cpReaddirs=tv3cpReaddirs, otherDiskModel=otherDiskModel, tv3Write8KCalls=tv3Write8KCalls, enclFansFailed=enclFansFailed, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, clusterLicenseTable=clusterLicenseTable, extcache64Size=extcache64Size, quota=quota, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, tv2cpWrcaches=tv2cpWrcaches, pclNfsV3Fsstats=pclNfsV3Fsstats, cifsCopyToAligns=cifsCopyToAligns, v3Read16KCalls=v3Read16KCalls, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, cifsSmb2DurableHandlePurged=cifsSmb2DurableHandlePurged, miscGlobalStatusMessage=miscGlobalStatusMessage, v3ccReaddirPluss=v3ccReaddirPluss, dfVserver=dfVserver, ncHttpsAccelIndex=ncHttpsAccelIndex, initiatorGroupTable=initiatorGroupTable, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, dafsNicEntry=dafsNicEntry, qrV2Entry=qrV2Entry, netportSpeedAdmin=netportSpeedAdmin, ncHttpServConns=ncHttpServConns, qrV2FileLimit=qrV2FileLimit, portEntry=portEntry, qvStateStat=qvStateStat, driveDisableErr=driveDisableErr, viaErrorThreshold=viaErrorThreshold, smb2QueryFileInvalidPct=smb2QueryFileInvalidPct, otherDiskEntry=otherDiskEntry, qosReadaheadMinRetireTime=qosReadaheadMinRetireTime, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, ncCdOptions=ncCdOptions, slEntry=slEntry, dfInodesUsed=dfInodesUsed, ncStreamingBWSavings=ncStreamingBWSavings, ndmpRestoreActive=ndmpRestoreActive, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, netportIPspace=netportIPspace, envOverTemperature=envOverTemperature, tv2pNulls=tv2pNulls, chassisPSUsMismatch=chassisPSUsMismatch, storage=storage, raidP64UsedBlocks=raidP64UsedBlocks, qrV2SoftFileLimit=qrV2SoftFileLimit, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, viaErrRdmarProt=viaErrRdmarProt, fcpTargetPortTopology=fcpTargetPortTopology, connectedInitiatorNodeName=connectedInitiatorNodeName, rstSuccesses=rstSuccesses, ncAdminPort=ncAdminPort, v3pPathconfs=v3pPathconfs, tv2Write512Calls=tv2Write512Calls, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, miscGlobalStatus=miscGlobalStatus, cpFromCpDeferredOps=cpFromCpDeferredOps, raidPDiskPool=raidPDiskPool, ncRMMemTotal=ncRMMemTotal, lunStatsResetTime=lunStatsResetTime, smb2SessionSetups=smb2SessionSetups, sisIsConstituent=sisIsConstituent, viaMaxCQ=viaMaxCQ, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent)
mibBuilder.exportSymbols("NETAPP-MIB", logicalInterfaceNetmaskLength=logicalInterfaceNetmaskLength, rcpTcpServXDRCalls=rcpTcpServXDRCalls, cDOTCpuNodeName=cDOTCpuNodeName, cDOTCpFromNvlogReplayTakeoverTime=cDOTCpFromNvlogReplayTakeoverTime, smb2SetInfoUnsupportedPct=smb2SetInfoUnsupportedPct, vfTable=vfTable, qosPolicyGroupTable=qosPolicyGroupTable, volumeRestrictedRootConflict=volumeRestrictedRootConflict, v2ccNulls=v2ccNulls, plexTable=plexTable, tv3Write1KCalls=tv3Write1KCalls, cifsSmb2InvalidSignatures=cifsSmb2InvalidSignatures, viaOutRDMAReadBytes=viaOutRDMAReadBytes, dhmNoticePFAEvent=dhmNoticePFAEvent, smb2IpcWritePct=smb2IpcWritePct, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, smbCheckDirPct=smbCheckDirPct, ncFtpCliConns=ncFtpCliConns, ncLocalConfigChanged=ncLocalConfigChanged, qtreeStatus=qtreeStatus, tv3cpSymlinks=tv3cpSymlinks, smbTrans2SetFileInfos=smbTrans2SetFileInfos, smbFindClose2Pct=smbFindClose2Pct, ncHttpAccelTable=ncHttpAccelTable, vfIndex=vfIndex, healthMonitorAlertRaised=healthMonitorAlertRaised, cifsNbtWaits=cifsNbtWaits, ncHttpCliConns=ncHttpCliConns, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, dafsLockts=dafsLockts, cpuUpTime=cpuUpTime, dafsSessionMaxCredentials=dafsSessionMaxCredentials, tv3cWrites=tv3cWrites, enclSASConnectPresent=enclSASConnectPresent, volNumber=volNumber, pclNfsV3Commits=pclNfsV3Commits, tv2cpGetattrs=tv2cpGetattrs, v2cRoots=v2cRoots, obsSmbTreeConnects=obsSmbTreeConnects, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, enclTable=enclTable, portName=portName, tv3ccGetattrs=tv3ccGetattrs, nfsServ=nfsServ, cDOTCpNodeName=cDOTCpNodeName, ifLowInUcastPkts=ifLowInUcastPkts, slQQtreeContent=slQQtreeContent, nodeCpuBusyTime=nodeCpuBusyTime, viaConnState=viaConnState, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, qrVTree=qrVTree, ncFtpActiveServConns=ncFtpActiveServConns, snapmirrorConnSrc1=snapmirrorConnSrc1, smb2QueryFileBasicInfoPct=smb2QueryFileBasicInfoPct, volJunctionPathSource=volJunctionPathSource, autosupportStatus=autosupportStatus, smbGetPrintQueuePct=smbGetPrintQueuePct, raidDiskName=raidDiskName, qrV2HighKBytesLimit=qrV2HighKBytesLimit, lunSnapStatus=lunSnapStatus, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, pclRpcBadLens=pclRpcBadLens, appCritical=appCritical, raidVEntry=raidVEntry, v3CachedCalls=v3CachedCalls, compressPercentSaved=compressPercentSaved, pclNfsV2Wrcaches=pclNfsV2Wrcaches, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, nodeFirmwareVersion=nodeFirmwareVersion, cifsSmb2FileDirUnsupported=cifsSmb2FileDirUnsupported, compressEntry=compressEntry, logicalInterfaceDnsZone=logicalInterfaceDnsZone, licenseExpirationTimeStamp=licenseExpirationTimeStamp, backup=backup, pclNfsV2Reads=pclNfsV2Reads, v3pReaddirs=v3pReaddirs, svStatus=svStatus, tv3pReaddirPluss=tv3pReaddirPluss, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, volVserver=volVserver, v2cRenames=v2cRenames, diskPrefailedCount=diskPrefailedCount, cpFromSnapshotOps=cpFromSnapshotOps, qtreeOplock=qtreeOplock, outOfDateDiskEntry=outOfDateDiskEntry, extcache64Evicts=extcache64Evicts, otherDiskTotalBlocks=otherDiskTotalBlocks, misc64HttpOps=misc64HttpOps, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, volOwningHost=volOwningHost, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, cifsSmb2MidUnusedHash=cifsSmb2MidUnusedHash, vserverState=vserverState, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, smb2QueryFsVolInfos=smb2QueryFsVolInfos, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, snapmirrorRelLag=snapmirrorRelLag, cifsSmb2Unsupported=cifsSmb2Unsupported, sparePool=sparePool, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, chassisTemperatureWarning=chassisTemperatureWarning, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, ifLowOutUcastPkts=ifLowOutUcastPkts, v3pFsstats=v3pFsstats, haPartnerSysid=haPartnerSysid, dafsBcGetattrs=dafsBcGetattrs, netappSupportConsole=netappSupportConsole, diskFailedMessage=diskFailedMessage, nodeSystemId=nodeSystemId, dafsExportRwMode=dafsExportRwMode, enclIndex=enclIndex, tv2Calls=tv2Calls, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, qrVIdType=qrVIdType, qtreeIsExportPolicyInherited=qtreeIsExportPolicyInherited, smb2Creates=smb2Creates, ncIsEnabled=ncIsEnabled, switchIndex=switchIndex, productType=productType, obsSmbLockByteRanges=obsSmbLockByteRanges, fcpTargetLifTable=fcpTargetLifTable, netportIfGrpTable=netportIfGrpTable, fabricStatus=fabricStatus, snapmirrorRelState=snapmirrorRelState, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, emergencyTrap=emergencyTrap, chassisPowerSuppliesOk=chassisPowerSuppliesOk, dafsNverifys=dafsNverifys, pclNfsV3Readdirs=pclNfsV3Readdirs, nfsCache64BytesFromServers=nfsCache64BytesFromServers, chassisPowerSupplyOk=chassisPowerSupplyOk, tv3cpNulls=tv3cpNulls, snapmirrorRelHealthy=snapmirrorRelHealthy, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, tv3cpLookups=tv3cpLookups, vsFirewallPolicyEntry=vsFirewallPolicyEntry, ncNntpActiveCliConns=ncNntpActiveCliConns, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, ifHighInNUcastPkts=ifHighInNUcastPkts, ncDnsCacheHits=ncDnsCacheHits, viaOutBytes=viaOutBytes, raidDiskId=raidDiskId, cpuContextSwitches=cpuContextSwitches, rcpTcpBadCalls=rcpTcpBadCalls, dmpDuration=dmpDuration, volumeStateChanged=volumeStateChanged, dafsServerAuths=dafsServerAuths, diskMultipathOneSwitch=diskMultipathOneSwitch, ncHttpsProxyOptions=ncHttpsProxyOptions, v3cRemoves=v3cRemoves, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, ndmpRestoreFailures=ndmpRestoreFailures, ncHttpTotalRespTime=ncHttpTotalRespTime, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, tv2cpMkdirs=tv2cpMkdirs, tv3pMkdirs=tv3pMkdirs, dafsNicState=dafsNicState, extcache64WriteLatency=extcache64WriteLatency, pclNfsV3Mknods=pclNfsV3Mknods, spareIndex=spareIndex, ndmpRestoreFailureReason=ndmpRestoreFailureReason, dfTotalSavedPercent=dfTotalSavedPercent, nfsCache64TotalRequests=nfsCache64TotalRequests, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, ncStreamingTotalRequests=ncStreamingTotalRequests, logicalInterfaceRoutingGroup=logicalInterfaceRoutingGroup, nodeStats=nodeStats, fcpTarget=fcpTarget, qosReadaheadMaxBlocks=qosReadaheadMaxBlocks, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, dafsUseChecksums=dafsUseChecksums, snapvaultStatusEntry=snapvaultStatusEntry, licenseIsExpired=licenseIsExpired, qtreeVserver=qtreeVserver, pclNfsV3WritePerCent=pclNfsV3WritePerCent, obsSmbProcessExitPct=obsSmbProcessExitPct, tv2cpRmdirs=tv2cpRmdirs, spareNumber=spareNumber, smb2FsctlPipeTransceivePct=smb2FsctlPipeTransceivePct, viaErrPostDesc=viaErrPostDesc, nfsCacheHighHitRequests=nfsCacheHighHitRequests, viaNodeConnection=viaNodeConnection, smb2Closes=smb2Closes, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, netcache=netcache, pclNfsV2Mkdirs=pclNfsV2Mkdirs, ncRMMemFree=ncRMMemFree, tv2ccNulls=tv2ccNulls, lun64WriteBytes=lun64WriteBytes, qosReadaheadEarlyCount=qosReadaheadEarlyCount, v3Read1KCalls=v3Read1KCalls, sisPolicy=sisPolicy, compress=compress, dafsAnonymousAuthentication=dafsAnonymousAuthentication, v2cMkdirs=v2cMkdirs, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, tv2ccRmdirs=tv2ccRmdirs, extcache64BlocksRef0=extcache64BlocksRef0, plexName=plexName, ncStats=ncStats, avRemedy=avRemedy, v3cCommits=v3cCommits, netappNode=netappNode, trpcServXDRCalls=trpcServXDRCalls, netportIfGrpMode=netportIfGrpMode, autosupportStatusMessage=autosupportStatusMessage, snapmirrorRelNewestSnapshotTimeStamp=snapmirrorRelNewestSnapshotTimeStamp, viaConnRcvdMessages=viaConnRcvdMessages, nfsCacheOptions=nfsCacheOptions, qrVFileLimit=qrVFileLimit, raidVDiskVendor=raidVDiskVendor, powerSupplyRepaired=powerSupplyRepaired, dmpTime=dmpTime, v3pCommits=v3pCommits, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, replyCache=replyCache, ifHighInUcastPkts=ifHighInUcastPkts, initiatorGroupUseALUA=initiatorGroupUseALUA, if64InUnknownProtos=if64InUnknownProtos, netOptsv6Enabled=netOptsv6Enabled, v3Read4KCalls=v3Read4KCalls, qosPolicyGroupClass=qosPolicyGroupClass, trpcBadLens=trpcBadLens, diskActiveCount=diskActiveCount, tv3cFsstats=tv3cFsstats, tv3cpRenames=tv3cpRenames, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, netportDuplexAdmin=netportDuplexAdmin, v2pSetattrs=v2pSetattrs, tv3cReadlinks=tv3cReadlinks, qrVTable=qrVTable, svTotalRestartSuccesses=svTotalRestartSuccesses, v2ccReadlinks=v2ccReadlinks, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, tv2CachedPerCent=tv2CachedPerCent, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, smb2QueryFileFullEAInfoPct=smb2QueryFileFullEAInfoPct, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, v2ReadStats=v2ReadStats, obsSmbLockAndReads=obsSmbLockAndReads, chassisPowerOk=chassisPowerOk, ncIsLicensed=ncIsLicensed, netportIfGrpDownPorts=netportIfGrpDownPorts, clusterIdentity=clusterIdentity, svHostTotalFailures=svHostTotalFailures, miscLowDiskReadBytes=miscLowDiskReadBytes, miscHighTapeWriteBytes=miscHighTapeWriteBytes, viaCurrPTags=viaCurrPTags, qtreeName=qtreeName, nodeStatUnits=nodeStatUnits, obsSmbReads=obsSmbReads, cDOTCpuCount=cDOTCpuCount)
mibBuilder.exportSymbols("NETAPP-MIB", remotesystemMgmtTest=remotesystemMgmtTest, qrVKBytesThreshold=qrVKBytesThreshold, netportTable=netportTable, productFirmwareVersion=productFirmwareVersion, v2cStatfss=v2cStatfss, v3pReadlinks=v3pReadlinks, ncStreamingQTBFServers=ncStreamingQTBFServers, v3pSymlinks=v3pSymlinks, overTemp=overTemp, autosupportSuccessfulSends=autosupportSuccessfulSends, raidPDiskVendor=raidPDiskVendor, volumeOffline=volumeOffline, tv2pReads=tv2pReads, smb2QueryFileStreamInfos=smb2QueryFileStreamInfos, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, qosWorkloadUuid=qosWorkloadUuid, obsSmbWriteMPXs=obsSmbWriteMPXs, dbgTrap=dbgTrap, logicalInterfaceUseFailoverGroup=logicalInterfaceUseFailoverGroup, avRemedyFailure=avRemedyFailure, vsRouteMetric=vsRouteMetric, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, raidPDiskSerialNumber=raidPDiskSerialNumber, dafsNicIndex=dafsNicIndex, extcacheIsFlexShareOn=extcacheIsFlexShareOn, netInterfaces=netInterfaces, netportSpeedOper=netportSpeedOper, smb2QueryFileAttrTagInfos=smb2QueryFileAttrTagInfos, sisEntry=sisEntry, cpu=cpu, logicalInterfaceFailoverGroup=logicalInterfaceFailoverGroup, v2cLookups=v2cLookups, viaConnVINumber=viaConnVINumber, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, broadcastDomainEntry=broadcastDomainEntry, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, svBaseSnapshot=svBaseSnapshot, ncLocalConfigVersion=ncLocalConfigVersion, enclFansPresent=enclFansPresent, tv3ccPathconfs=tv3ccPathconfs, takeoverMode=takeoverMode, amMonitorString=amMonitorString, plexOffline=plexOffline, dafs=dafs, nfsOptions=nfsOptions, v2ccSetattrs=v2ccSetattrs, raidTable=raidTable, pclNfsV2Renames=pclNfsV2Renames, tv2cLookups=tv2cLookups, v2Read32KCalls=v2Read32KCalls, snapmirrorSchedule=snapmirrorSchedule, outOfDateDiskDiskId=outOfDateDiskDiskId, aggrOptions=aggrOptions, chassisFanStopped=chassisFanStopped, viaHardwareVersion=viaHardwareVersion, haPartnerName=haPartnerName, netappNetCache=netappNetCache, smb2QueryFsAttrInfos=smb2QueryFsAttrInfos, fcpTargetTopology=fcpTargetTopology, volMoveCOattempts=volMoveCOattempts, qrV2LowKBytesLimit=qrV2LowKBytesLimit, v2cSymlinks=v2cSymlinks, volLanguage=volLanguage, trcDelayHits=trcDelayHits, dafsNicDevice=dafsNicDevice, netapp1=netapp1, filesysMaxfilesUsed=filesysMaxfilesUsed, netOptsv6Table=netOptsv6Table, lun=lun, snapmirrorRelThrottleValue=snapmirrorRelThrottleValue, cifsDupDisconnects=cifsDupDisconnects, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, v3ccRemoves=v3ccRemoves, vsFirewallPolicyAllowList=vsFirewallPolicyAllowList, cfState=cfState, diskMultipathWarning=diskMultipathWarning, tv3pFsstats=tv3pFsstats, svSchedType=svSchedType, spareDiskPort=spareDiskPort, broadcastDomainName=broadcastDomainName, tv2cStatfss=tv2cStatfss, snapmirrorWrittenBytes=snapmirrorWrittenBytes, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, globalStatusCritical=globalStatusCritical, viaOutMsgs=viaOutMsgs, volumeRestricted=volumeRestricted, vifAllLinksFailed=vifAllLinksFailed, portTable=portTable, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, v2pWrites=v2pWrites, rpcBadLens=rpcBadLens, viaConnLocalDescriminator=viaConnLocalDescriminator, eccSummary=eccSummary, volumeRemoteOk=volumeRemoteOk, snapmirrorRelTransferSnapshot=snapmirrorRelTransferSnapshot, cDOTCpuInterrupts=cDOTCpuInterrupts, v2ccRemoves=v2ccRemoves, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, haSettings=haSettings, autosupportSent=autosupportSent, fanRepaired=fanRepaired, miscLowNetSentBytes=miscLowNetSentBytes, cifsNOpenFiles=cifsNOpenFiles, miscHighNetSentBytes=miscHighNetSentBytes, aggrEntry=aggrEntry, sis=sis, nodeStatTable=nodeStatTable, qrV2FilesUsed=qrV2FilesUsed, snapmirrorRelBreakSuccCnt=snapmirrorRelBreakSuccCnt, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, raidVDiskType=raidVDiskType, tv3cReaddirPluss=tv3cReaddirPluss, viaErrors=viaErrors, vfState=vfState, clusterIdentityName=clusterIdentityName, tv3pGetattrs=tv3pGetattrs, volName=volName, v2Read8KCalls=v2Read8KCalls, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, volumeAutogrow=volumeAutogrow, ifHighOutDiscards=ifHighOutDiscards, dafsNicName=dafsNicName, snapmirrorConnTable=snapmirrorConnTable, fcpTargetPortName=fcpTargetPortName, smbRenames=smbRenames, dafsExportName=dafsExportName, lunMapInitiatorGroupName=lunMapInitiatorGroupName, enclSASConnectCableEnd=enclSASConnectCableEnd, tv3Write128KCalls=tv3Write128KCalls, initiatorGroupEntry=initiatorGroupEntry, shelfSESElectronicsFailed=shelfSESElectronicsFailed, otherDiskTotalMb=otherDiskTotalMb, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages, cifsOplocksEnabled=cifsOplocksEnabled, fabricIndex=fabricIndex, diskFailedShutdown=diskFailedShutdown, cDOTCpFromCpDeferredOps=cDOTCpFromCpDeferredOps, waflDirFull=waflDirFull, viaCurrCQ=viaCurrCQ, ncNntpObjHitrate=ncNntpObjHitrate, v2cpWrcaches=v2cpWrcaches, dfKBytesTotal=dfKBytesTotal, trpcBadCalls=trpcBadCalls, tv2ccRoots=tv2ccRoots, smbLogoffAndXs=smbLogoffAndXs, tv2Read128KCalls=tv2Read128KCalls, v2pStatfss=v2pStatfss, clusterIdentitySerialNumber=clusterIdentitySerialNumber, switchStatusMessage=switchStatusMessage, compressIsLicensed=compressIsLicensed, slQQtreeName=slQQtreeName, enclPowerSuppliesFailed=enclPowerSuppliesFailed, tv2cpReadlinks=tv2cpReadlinks, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, raidVTable=raidVTable, plexPercentResyncing=plexPercentResyncing, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, smbOpenPrintFiles=smbOpenPrintFiles, logicalInterfaceListenForDnsQuery=logicalInterfaceListenForDnsQuery, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, ipspaceID=ipspaceID, snapAutoDelete=snapAutoDelete, enclVoltSensorsOverVoltWarn=enclVoltSensorsOverVoltWarn, grmMonitorString=grmMonitorString, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, fcpTargetPortTable=fcpTargetPortTable, tv2cWrcaches=tv2cWrcaches, tv2cReadlinks=tv2cReadlinks, volClone=volClone, rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, ncStreamingRtspWMBFServers=ncStreamingRtspWMBFServers, lun64WriteOps=lun64WriteOps, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, ncStreamingAccelHits=ncStreamingAccelHits, outOfDateDiskTotalMb=outOfDateDiskTotalMb, cifsOptions=cifsOptions, cifsMultipleVCs=cifsMultipleVCs, v3cpFsstats=v3cpFsstats, viaMaxRegisterBytes=viaMaxRegisterBytes, v2pMkdirs=v2pMkdirs, ncHttpsAccelHits=ncHttpsAccelHits, smb2FsctlFileUnsupportedPct=smb2FsctlFileUnsupportedPct, initiator=initiator, pclNfsV3Nulls=pclNfsV3Nulls, raidPDiskRPM=raidPDiskRPM, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, v2ccRenames=v2ccRenames, lunHighErrors=lunHighErrors, enclElectronicsMaximum=enclElectronicsMaximum, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, licenseService=licenseService, extcache64WCLength=extcache64WCLength, qrVKBytesLimit=qrVKBytesLimit, tv3cpFsinfos=tv3cpFsinfos, qrVPathName=qrVPathName, vserverLanguage=vserverLanguage, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, v3cLinks=v3cLinks, cifsWGName=cifsWGName, ncDns=ncDns, cDOTCpuTable=cDOTCpuTable, df64SisSharedKBytes=df64SisSharedKBytes, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, extcacheCardError=extcacheCardError, smb2SetAllocInfos=smb2SetAllocInfos, broadcastDomainMTU=broadcastDomainMTU, dfTable=dfTable, cifsIsWinsEnabled=cifsIsWinsEnabled, qosReadaheadMinDiskResponseTime=qosReadaheadMinDiskResponseTime, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, vfProStatus=vfProStatus, dfPlexCount=dfPlexCount, tv2Read32KCalls=tv2Read32KCalls, obsSmbTreeConnectPct=obsSmbTreeConnectPct, netportAutonegAdmin=netportAutonegAdmin, lunLowReadOps=lunLowReadOps, powerSupplyWarning=powerSupplyWarning, extcache64Inserts=extcache64Inserts, diskFailed=diskFailed, v3WriteStats=v3WriteStats, tv3ccWrites=tv3ccWrites, raidPPlex=raidPPlex, vserverIPspace=vserverIPspace, smb2QueryDirs=smb2QueryDirs, dafsSessionId=dafsSessionId, snapmirrorStatusEntry=snapmirrorStatusEntry, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, v3ccSetattrs=v3ccSetattrs, nodeStatNode=nodeStatNode, cDOTCpTime=cDOTCpTime, v2cpReads=v2cpReads, shelfRepaired=shelfRepaired, miscLowTapeWriteBytes=miscLowTapeWriteBytes, v3cRmdirs=v3cRmdirs, portState=portState, raidPVol=raidPVol, v3ccRenames=v3ccRenames, v2Calls=v2Calls, v3pAccesss=v3pAccesss, clusterIdentityUuid=clusterIdentityUuid, dafsNicTable=dafsNicTable, ifLowInNUcastPkts=ifLowInNUcastPkts, volumeFull=volumeFull, tv2ReadStats=tv2ReadStats, aggrStatus=aggrStatus, sisType=sisType, ncIcapIsLicensed=ncIcapIsLicensed, ncStreamingActiveCliConns=ncStreamingActiveCliConns, dfHighSisSharedKBytes=dfHighSisSharedKBytes, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, raidPPlexName=raidPPlexName, cpuInterrupts=cpuInterrupts)
mibBuilder.exportSymbols("NETAPP-MIB", lunLowOtherOps=lunLowOtherOps, chassisCPUFanStopped=chassisCPUFanStopped, clusterLicenseEntry=clusterLicenseEntry, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, ncNntpProxyRequests=ncNntpProxyRequests, v2cRmdirs=v2cRmdirs, slIndex=slIndex, tv2pLinks=tv2pLinks, dafsSessionMaxRequests=dafsSessionMaxRequests, upsLinePowerRestored=upsLinePowerRestored, netportEntry=netportEntry, raidPScsiId=raidPScsiId, connectedInitiatorVserver=connectedInitiatorVserver, slQTable=slQTable, nfsPerClient=nfsPerClient, smb2QueryFsDeviceInfos=smb2QueryFsDeviceInfos, smb2OplkBrkAckPct=smb2OplkBrkAckPct, nfsCacheBWSavings=nfsCacheBWSavings, chassisPowerDegraded=chassisPowerDegraded, appError=appError, netportMtu=netportMtu, psetName=psetName, misc64NfsOps=misc64NfsOps, vserverAntiVirusOnAccessPolicy=vserverAntiVirusOnAccessPolicy, nfsCacheEjectRequests=nfsCacheEjectRequests, dfLowSisSharedKBytes=dfLowSisSharedKBytes, switch64PacketsProcessed=switch64PacketsProcessed, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, flexCloneSplitStart=flexCloneSplitStart, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, enclSASConnectPartNos=enclSASConnectPartNos, qtreeTable=qtreeTable, smb2FsctlPipeTransceives=smb2FsctlPipeTransceives, lunHighReadOps=lunHighReadOps, vserverType=vserverType, miscHighNetRcvdBytes=miscHighNetRcvdBytes, avLicenseCheck=avLicenseCheck, aggrUUID=aggrUUID, nodeEnvFailedPowerSupplyMessage=nodeEnvFailedPowerSupplyMessage, aggrNumber=aggrNumber, fcpTargetLifStatusOper=fcpTargetLifStatusOper, ncStreamingRealBWSavings=ncStreamingRealBWSavings, v2pSymlinks=v2pSymlinks, globalStatusOk=globalStatusOk, v3cpNulls=v3cpNulls, v2Read128KCalls=v2Read128KCalls, pclNfsV2Creates=pclNfsV2Creates, pclNfsV3Write512Calls=pclNfsV3Write512Calls, nfsCache64BytesToClients=nfsCache64BytesToClients, aggrRaidType=aggrRaidType, smb2SetSecurityInfos=smb2SetSecurityInfos, viaNicEntry=viaNicEntry, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, rebootNormal=rebootNormal, nfsCache64BytesToServers=nfsCache64BytesToServers, viaNicAttributes=viaNicAttributes, dafsBcBatchCompletions=dafsBcBatchCompletions, vscanServerUpgrade=vscanServerUpgrade, lunMapLUNIndex=lunMapLUNIndex, slMinutes=slMinutes, enclElectronicsFailed=enclElectronicsFailed, dafsDiscardResponses=dafsDiscardResponses, v2Write64KCalls=v2Write64KCalls, switchLinkSpeed=switchLinkSpeed, vsRouteVserverID=vsRouteVserverID, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, nodeStatValue=nodeStatValue, v3cpSymlinks=v3cpSymlinks, v2ccWrites=v2ccWrites, avTrendLicenseExpired=avTrendLicenseExpired, envFailedFanMessage=envFailedFanMessage, clusterLicenseSerialNumber=clusterLicenseSerialNumber, enclVoltSensorsMaximum=enclVoltSensorsMaximum, smbSeeks=smbSeeks, ncStreamingMissRequests=ncStreamingMissRequests, viaErrConnLost=viaErrConnLost, smb2SetInfoUnsupporteds=smb2SetInfoUnsupporteds, enclNumberDiskBays=enclNumberDiskBays, ncStreamingOBFClients=ncStreamingOBFClients, volMoveDone=volMoveDone, rpcUdpNullRecvs=rpcUdpNullRecvs, ncStreamingCliConns=ncStreamingCliConns, nodeStatLabels=nodeStatLabels, tv2ccRemoves=tv2ccRemoves, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, svSchedVolume=svSchedVolume, pset=pset, fcpTargetPortNodeName=fcpTargetPortNodeName, fabricInstances=fabricInstances, cDOTCpFromLowWaterOps=cDOTCpFromLowWaterOps, ndmpOn=ndmpOn, netifDescr=netifDescr, dfRowInfo=dfRowInfo, cifsSharingErrorRetries=cifsSharingErrorRetries, raidUsedBlocks=raidUsedBlocks, netportVlanPort=netportVlanPort, portSwitchIndex=portSwitchIndex, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, enclSASConnectSerialNos=enclSASConnectSerialNos, v3Write4KCalls=v3Write4KCalls, tv2ccMkdirs=tv2ccMkdirs, tv2cpReads=tv2cpReads, viaTotalError=viaTotalError, slQSnapshotName=slQSnapshotName, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, qrVKBytesLimitSoft=qrVKBytesLimitSoft, cifsOpens=cifsOpens, qrFileLimit=qrFileLimit, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, logicalInterfaceHomeNode=logicalInterfaceHomeNode, rcDelayHits=rcDelayHits, cifsSmb2DurableCreateReceived=cifsSmb2DurableCreateReceived, svTotalDeferments=svTotalDeferments, pclNfsV3Rmdirs=pclNfsV3Rmdirs, licenseSerialNumber=licenseSerialNumber, smbReadAndXs=smbReadAndXs, ncGrmServerIsLicensed=ncGrmServerIsLicensed, qosReadaheadMaxGap=qosReadaheadMaxGap, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, dafsMaxRequestSize=dafsMaxRequestSize, v2Write4KCalls=v2Write4KCalls, smb2QueryDirPct=smb2QueryDirPct, lunHighReadBytes=lunHighReadBytes, extcacheType=extcacheType, smb2QueryFileAttrTagInfoPct=smb2QueryFileAttrTagInfoPct, qvStateTable=qvStateTable, cifsNTrees=cifsNTrees, ncFtpBytesFromServers=ncFtpBytesFromServers, snapmirrorRelNewestSnapshot=snapmirrorRelNewestSnapshot, haInterconnectStatus=haInterconnectStatus, viaMaxRegisterRegions=viaMaxRegisterRegions, slQSourceTime=slQSourceTime, v2cReaddirs=v2cReaddirs, snapmirrorTotalDeferments=snapmirrorTotalDeferments, otherDiskFirmwareRevision=otherDiskFirmwareRevision, snapmirrorRelStatusEntry=snapmirrorRelStatusEntry, cifsSmb2FileNamesInfo=cifsSmb2FileNamesInfo, dafsHurryUps=dafsHurryUps, clusterNodeRepaired=clusterNodeRepaired, psetTable=psetTable, tv2cWrites=tv2cWrites, tv3pReads=tv3pReads, v3Read8KCalls=v3Read8KCalls, pclNfsV3Getattrs=pclNfsV3Getattrs, tv2cReaddirs=tv2cReaddirs, smbTrans2SetPathInfos=smbTrans2SetPathInfos, rcTcpInProgressHits=rcTcpInProgressHits, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, snapmirrorThrottleValue=snapmirrorThrottleValue, v3cRenames=v3cRenames, v3Write1KCalls=v3Write1KCalls, subnetIpRanges=subnetIpRanges, if64InOctets=if64InOctets, misc64NetSentBytes=misc64NetSentBytes, snapmirrorSrc=snapmirrorSrc, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, smb2FsctlIpcUnsupporteds=smb2FsctlIpcUnsupporteds, volCloneSnap=volCloneSnap, svSrc=svSrc, enclNumber=enclNumber, tv3Read32KCalls=tv3Read32KCalls, qosReadaheadForceDump=qosReadaheadForceDump, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, dmpFailures=dmpFailures, dfNumber=dfNumber, smbEchoPct=smbEchoPct, avDisableFailed=avDisableFailed, obsSmbOpens=obsSmbOpens, tv3cPathconfs=tv3cPathconfs, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, nodeStatCategoryIndex=nodeStatCategoryIndex, viaCurrRegisterRegions=viaCurrRegisterRegions, qosPolicyGroupName=qosPolicyGroupName, quotaNormal=quotaNormal, tv3Write512Calls=tv3Write512Calls, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, v2cNulls=v2cNulls, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, viaCurrConnectWaitPending=viaCurrConnectWaitPending, subnetGateway=subnetGateway, ncFtpObjHitrate=ncFtpObjHitrate, ndmpRestoreSuccesses=ndmpRestoreSuccesses, dafsMaxRequestsServer=dafsMaxRequestsServer, qvStateEntry=qvStateEntry, subnetName=subnetName, licensePackage=licensePackage, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, v3Write512Calls=v3Write512Calls, tv2cpSymlinks=tv2cpSymlinks, smbTreeConnectAndXPct=smbTreeConnectAndXPct, nfsIsLicensed=nfsIsLicensed, tv3cReaddirs=tv3cReaddirs, ncDnsRequestsReceived=ncDnsRequestsReceived, dfKBytesUsed=dfKBytesUsed, ifHighOutNUcastPkts=ifHighOutNUcastPkts, cifsTimeToShutdown=cifsTimeToShutdown, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, smbNTCancelCNPct=smbNTCancelCNPct, netportIfgNode=netportIfgNode, nodeSerialNumber=nodeSerialNumber, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, v2CachedCalls=v2CachedCalls, if64OutUcastPkts=if64OutUcastPkts, appEmergency=appEmergency, viaCurrConnected=viaCurrConnected, dafsExportEnabled=dafsExportEnabled, smbCloses=smbCloses, cifsNBTDisconnects=cifsNBTDisconnects, qrTable=qrTable, tv2cReads=tv2cReads, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, otherDiskRPM=otherDiskRPM, nodeStatCounterName=nodeStatCounterName, tv3ccNulls=tv3ccNulls, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, appNotice=appNotice, otherDiskPool=otherDiskPool, tv3pAccesss=tv3pAccesss, cifsDomainName=cifsDomainName, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, enclProductModel=enclProductModel, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, ncObjectsStored=ncObjectsStored, viaMaxPTags=viaMaxPTags, smb2SetRenameInfoPct=smb2SetRenameInfoPct, viaMaxCQEntries=viaMaxCQEntries, v2cReads=v2cReads, v2ccReads=v2ccReads, tnfsServ=tnfsServ, viaErrRdmawProt=viaErrRdmawProt, enclProductVendor=enclProductVendor, nvramBatteryDischarged=nvramBatteryDischarged, tv3cLookups=tv3cLookups, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, v2WriteStats=v2WriteStats, spareTable=spareTable, tv3cCreates=tv3cCreates, dfMaxFilesAvail=dfMaxFilesAvail, df64SisSavedKBytes=df64SisSavedKBytes, snapmirrorConnName=snapmirrorConnName, ncNntpBytesToServers=ncNntpBytesToServers, netappDataFabricManager=netappDataFabricManager, cpuIdleTimePerCent=cpuIdleTimePerCent, qosReadaheadSettingName=qosReadaheadSettingName, upsLinePowerOff=upsLinePowerOff, aggrFilesystemMetadata=aggrFilesystemMetadata, netportSpeed=netportSpeed, tnfsV2=tnfsV2, cpuSwitchInvocations=cpuSwitchInvocations, enclCurSensorsOverCurFailThr=enclCurSensorsOverCurFailThr, ncDnsOptions=ncDnsOptions, amEntry=amEntry)
mibBuilder.exportSymbols("NETAPP-MIB", nfs=nfs, miscLowNfsOps=miscLowNfsOps, smbCreateAndXPct=smbCreateAndXPct, trcInProgressHits=trcInProgressHits, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, snapmirrorRelType=snapmirrorRelType, smb2ClosePct=smb2ClosePct, slDay=slDay, tv2cCreates=tv2cCreates, snapmirrorRelLastTransferSize=snapmirrorRelLastTransferSize, vserverSnapshotPolicy=vserverSnapshotPolicy, productSerialNum=productSerialNum, cifsStats=cifsStats, fcpTargetPN=fcpTargetPN, aggrTable=aggrTable, logicalInterfaceFcpWwpn=logicalInterfaceFcpWwpn, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, v3cMkdirs=v3cMkdirs, outOfDateDiskCarrierID=outOfDateDiskCarrierID, chassisCPUFanOk=chassisCPUFanOk, raidPSecondaryDiskName=raidPSecondaryDiskName, cpuBusyTime=cpuBusyTime, vsFailoverGroupTable=vsFailoverGroupTable, outOfDateDiskCount=outOfDateDiskCount, psetEntry=psetEntry, logicalInterfaceAutoRevert=logicalInterfaceAutoRevert, extcache64TotalBuffers=extcache64TotalBuffers, ncStreamingQTBFClients=ncStreamingQTBFClients, vserverUuid=vserverUuid, snapmirrorState=snapmirrorState, fabricStatusMessage=fabricStatusMessage, v3cWrites=v3cWrites, sisPath=sisPath, raidCompletionPerCent=raidCompletionPerCent, spareDiskId=spareDiskId, volMSID=volMSID, smbSessionSetupAndXPct=smbSessionSetupAndXPct, spareTotalMb=spareTotalMb, ncHttpRespTimePerByte=ncHttpRespTimePerByte, cDOTCpFromSnapshotOps=cDOTCpFromSnapshotOps, smbNTCancelCNs=smbNTCancelCNs, amPort=amPort, rstFailures=rstFailures, softQuotaExceeded=softQuotaExceeded, v2pWrcaches=v2pWrcaches, qosPolicyGroupUuid=qosPolicyGroupUuid, slQEntry=slQEntry, switchEntry=switchEntry, tv2Read4KCalls=tv2Read4KCalls, v3cFsstats=v3cFsstats, switchLowPacketsProcessed=switchLowPacketsProcessed, nvram=nvram, smb2FsctlDfsReferralsPct=smb2FsctlDfsReferralsPct, snapmirrorScheduleDesc=snapmirrorScheduleDesc, dafsLookUps=dafsLookUps, aggrFilesystemMetadataPercent=aggrFilesystemMetadataPercent, volMoveCutoverFailed=volMoveCutoverFailed, ftpdMaxConnNotice=ftpdMaxConnNotice, tv2pCreates=tv2pCreates, smb2LockPct=smb2LockPct, slVVolume=slVVolume, dafsNicDirectOutBytes=dafsNicDirectOutBytes, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, obsSmbReadRaws=obsSmbReadRaws, compressLowUsedKBytes=compressLowUsedKBytes, vfStarted=vfStarted, cDOTCpFromLowMbufOps=cDOTCpFromLowMbufOps, avVirusfound=avVirusfound, alfFileNearlyFull=alfFileNearlyFull, powerSupplyFanFailxMinShutdown=powerSupplyFanFailxMinShutdown, svOn=svOn, switchManagementId=switchManagementId, chassisCPUFanSlow=chassisCPUFanSlow, misc64TapeWriteBytes=misc64TapeWriteBytes, logicalInterfaceRole=logicalInterfaceRole, if64OutErrors=if64OutErrors, tv2ccRenames=tv2ccRenames, lunLowReadBytes=lunLowReadBytes, initiatorListTable=initiatorListTable, ncHttpIsEnabled=ncHttpIsEnabled, vserverRootVolumeSecurityStyle=vserverRootVolumeSecurityStyle, tv2cpReaddirs=tv2cpReaddirs, miscNetRcvdKB=miscNetRcvdKB, vscanConnection=vscanConnection, ncGrmServerIsEnabled=ncGrmServerIsEnabled, v2ccLookups=v2ccLookups, qosMonitorMemoryAbated=qosMonitorMemoryAbated, raidPSectorSize=raidPSectorSize, cDOTCpuContextSwitches=cDOTCpuContextSwitches, alertTrap=alertTrap, tv3Write32KCalls=tv3Write32KCalls, smb2QueryFileInternalInfoPct=smb2QueryFileInternalInfoPct, tv2pWrites=tv2pWrites, dafsExportPath=dafsExportPath, spareDiskVendor=spareDiskVendor, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, viaErrRecvQEmpty=viaErrRecvQEmpty, psetPortName=psetPortName, nodeEpsilon=nodeEpsilon, tv3pWrites=tv3pWrites, cifsMbufWaits=cifsMbufWaits, smbNTCancelOtherPct=smbNTCancelOtherPct, avMcAfeeEngineExpired=avMcAfeeEngineExpired, dfMaxFilesPossible=dfMaxFilesPossible, productModel=productModel, v2pRmdirs=v2pRmdirs, cifsSymlinksEnabled=cifsSymlinksEnabled, autosupportConfigurationError=autosupportConfigurationError, qosWorkloadPolicyGroup=qosWorkloadPolicyGroup, diskRepaired=diskRepaired, psetMemberIndex=psetMemberIndex, volCloneOf=volCloneOf, eccMasked=eccMasked, svState=svState, raidVCarrierID=raidVCarrierID, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, qosWorkloadEntry=qosWorkloadEntry, tv2ccReaddirs=tv2ccReaddirs, tv2cLinks=tv2cLinks, vsFailoverGroupEntry=vsFailoverGroupEntry, qrFilesUsed=qrFilesUsed, ncStreamingHitRequests=ncStreamingHitRequests, dafsExportAccessList=dafsExportAccessList, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, switchFabricIndex=switchFabricIndex, viaConnectionListenPort=viaConnectionListenPort, dfMirrorStatus=dfMirrorStatus, tv3cAccesss=tv3cAccesss, aggrFSID=aggrFSID, takeoverAddrs=takeoverAddrs, aggrName=aggrName, ncHttpBytesToServers=ncHttpBytesToServers, clusterLicenseCode=clusterLicenseCode, cDOTCpuEntry=cDOTCpuEntry, ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, enclProductLogicalID=enclProductLogicalID, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, ftpdCurrentConns=ftpdCurrentConns, domainControllerDisconnect=domainControllerDisconnect, qosReadaheadMinFileHistogram=qosReadaheadMinFileHistogram, chassisTemperatureUnknown=chassisTemperatureUnknown, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, raidVPlex=raidVPlex, tv3Read64KCalls=tv3Read64KCalls, cifsSuspectOps=cifsSuspectOps, vsFirewallPolicyService=vsFirewallPolicyService, vserverComment=vserverComment, ipspacePorts=ipspacePorts, autosupportSendError=autosupportSendError, cDOTCpTable=cDOTCpTable, v3pReads=v3pReads, raidPTable=raidPTable, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, smb2QueryFsInvalids=smb2QueryFsInvalids, obsSmbSearchs=obsSmbSearchs, vi=vi, misc64NetRcvdBytes=misc64NetRcvdBytes, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, psetMemberNameIndex=psetMemberNameIndex, dfStatus=dfStatus, raidPSecondaryDiskPort=raidPSecondaryDiskPort, smb2ReadPct=smb2ReadPct, spareStatus=spareStatus, obsSmbCreatePct=obsSmbCreatePct, cifsAlignedLarges=cifsAlignedLarges, cifsSmb2DurableHandleExpired=cifsSmb2DurableHandleExpired, v3cpMkdirs=v3cpMkdirs, healthMonitorAlertCleared=healthMonitorAlertCleared, tv2Percent=tv2Percent, lunDestroy=lunDestroy, fcpTargetLifVserver=fcpTargetLifVserver, smb2SetBasicInfos=smb2SetBasicInfos, sisLastOpEndTime=sisLastOpEndTime, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, snapmirrorLastTransMBs=snapmirrorLastTransMBs, sm=sm, tv3ccLinks=tv3ccLinks, vsFailoverGroupTargets=vsFailoverGroupTargets, compressTable=compressTable, qosPolicyGroupVserver=qosPolicyGroupVserver, pclNfsV3Readlinks=pclNfsV3Readlinks, raidVVol=raidVVol, smb2TreeConnects=smb2TreeConnects, smb2LogoffPct=smb2LogoffPct, qrV264KBytesThreshold=qrV264KBytesThreshold, dafsReaddirInlines=dafsReaddirInlines, vfIpTable=vfIpTable, iscsi64Ops=iscsi64Ops, smb2QueryFileStandardInfos=smb2QueryFileStandardInfos, logicalInterfaceVif=logicalInterfaceVif, vsRouteDestination=vsRouteDestination, raidV64UsedBlocks=raidV64UsedBlocks, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, ncFtpServConns=ncFtpServConns, fabricEntry=fabricEntry, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, dmpStPath=dmpStPath, smbCreateTemporaries=smbCreateTemporaries, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, ncNntpRespTimePerByte=ncNntpRespTimePerByte, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, v2Percent=v2Percent, smb2SetEofInfos=smb2SetEofInfos, v3ccFsstats=v3ccFsstats, snapmirrorRelUnHealthyReason=snapmirrorRelUnHealthyReason, aggrIndex=aggrIndex, smb2Logoffs=smb2Logoffs, ncFtpTotalRequests=ncFtpTotalRequests, avMcAfeeLicenseFailed=avMcAfeeLicenseFailed, nfsCacheTotalRequests=nfsCacheTotalRequests, volumeCloneCreate=volumeCloneCreate, vfIpIndex=vfIpIndex, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, netportIfGrpUpPorts=netportIfGrpUpPorts, rcTcpMisses=rcTcpMisses, spareDiskUID=spareDiskUID, cifsClearTextPasswd=cifsClearTextPasswd, dafsBcRecalls=dafsBcRecalls, slQVolumeName=slQVolumeName, vfAllowedProtocols=vfAllowedProtocols, slVType=slVType, netappOnCommand=netappOnCommand, enclElectronicsSerialNos=enclElectronicsSerialNos, tv3CachedCalls=tv3CachedCalls, nodeUuid=nodeUuid, v3cpPathconfs=v3cpPathconfs, tv2ccSetattrs=tv2ccSetattrs, tv3ccRmdirs=tv3ccRmdirs, smbWriteAndXs=smbWriteAndXs, tv2ccGetattrs=tv2ccGetattrs, ncBytesToClients=ncBytesToClients, cpuTooBusy=cpuTooBusy, cDOTCpuIdleTimePerCent=cDOTCpuIdleTimePerCent, outOfDateDiskDiskName=outOfDateDiskDiskName, netOpts=netOpts, logicalInterfaceHomePort=logicalInterfaceHomePort, ncNntpBytesFromClients=ncNntpBytesFromClients, logicalInterfaceCurrPort=logicalInterfaceCurrPort, enclChannelShelfAddr=enclChannelShelfAddr, filesysMaxfilesAvail=filesysMaxfilesAvail, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, svLastTransType=svLastTransType, fcpTargetPortStandby=fcpTargetPortStandby, raidPTotalMb=raidPTotalMb, avMcAfeeProductExpiring=avMcAfeeProductExpiring, logicalInterfaceCurrNode=logicalInterfaceCurrNode, autosupportFailedSends=autosupportFailedSends, smb2FsctlDfsReferralss=smb2FsctlDfsReferralss, tv3pSetattrs=tv3pSetattrs, ncInfo=ncInfo, tv2cSetattrs=tv2cSetattrs, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, logicalInterfaceDataProtocol=logicalInterfaceDataProtocol)
mibBuilder.exportSymbols("NETAPP-MIB", qosReadaheadDiskResponseWeight=qosReadaheadDiskResponseWeight, spareDiskRPM=spareDiskRPM, smbMoves=smbMoves, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, scsibladeInQuorum=scsibladeInQuorum, qrV2Table=qrV2Table, cpFromFlushOps=cpFromFlushOps, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, smb2QueryFsObjectIdInfoPct=smb2QueryFsObjectIdInfoPct, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, ipspaceEntry=ipspaceEntry, vsFirewallPolicyTable=vsFirewallPolicyTable, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, smbLockingAndXPct=smbLockingAndXPct, tv2Write64KCalls=tv2Write64KCalls, enclSASConnectMaximum=enclSASConnectMaximum, viaConnected=viaConnected, smb2ChgNfys=smb2ChgNfys, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, cifsSmb2DurableReclaimSucceeded=cifsSmb2DurableReclaimSucceeded, fcp64WriteBytes=fcp64WriteBytes, v3CachedPerCent=v3CachedPerCent, dump=dump, sisLogicalSize=sisLogicalSize, broadcastDomainFailoverGroups=broadcastDomainFailoverGroups, v2Read1KCalls=v2Read1KCalls, dfDedupeSavedPercent=dfDedupeSavedPercent, dafsReadInlines=dafsReadInlines, tv3ccReads=tv3ccReads, raidVCompletionPerCent=raidVCompletionPerCent, quotaExceeded=quotaExceeded, volDSID=volDSID, nodeVendor=nodeVendor, fcpTargetLifStatusAdmin=fcpTargetLifStatusAdmin, lunHighWriteBytes=lunHighWriteBytes, tv3Write16KCalls=tv3Write16KCalls, compressFileSys=compressFileSys, tv3ccRemoves=tv3ccRemoves, clusterNodeFailed=clusterNodeFailed, volumeError=volumeError, qrV2QuotaUnlimited=qrV2QuotaUnlimited, trcTcpDelayHits=trcTcpDelayHits, svSchedIndex=svSchedIndex, cifsAlignedSmallRels=cifsAlignedSmallRels, diskReconstructingCount=diskReconstructingCount, tv3pReaddirs=tv3pReaddirs, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, obsSmbReadRawPct=obsSmbReadRawPct, outOfDateDiskVendor=outOfDateDiskVendor, vserverIndex=vserverIndex, cfPartnerName=cfPartnerName, obsSmbSetInfoPct=obsSmbSetInfoPct, ncNntpActiveServConns=ncNntpActiveServConns, qosWorkloadVolume=qosWorkloadVolume, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, miscHighTapeReadBytes=miscHighTapeReadBytes, vsFailoverGroupName=vsFailoverGroupName, tv3Calls=tv3Calls, smbReadAndXPct=smbReadAndXPct, obsSmbQueryInfoPct=obsSmbQueryInfoPct, svIndex=svIndex, cifsReqs=cifsReqs, lunVserver=lunVserver, chassisFanDegraded=chassisFanDegraded, lunCloneCreate=lunCloneCreate, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, vsRouteGateway=vsRouteGateway, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, tv3Read512Calls=tv3Read512Calls, v3Write64KCalls=v3Write64KCalls, slQSnapshotTime=slQSnapshotTime, dcPasswdChangeFailed=dcPasswdChangeFailed, licenseOwner=licenseOwner, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, compressHighSavedKBytes=compressHighSavedKBytes, rcpTcpCalls=rcpTcpCalls, obsSmbWriteMPXPct=obsSmbWriteMPXPct, netOptsSwitchlessCluster=netOptsSwitchlessCluster, upsShuttingDown=upsShuttingDown, blocks=blocks, tv2pRemoves=tv2pRemoves, tv2Read2KCalls=tv2Read2KCalls, plexStatus=plexStatus, ncGrmOptions=ncGrmOptions, lunHighOtherOps=lunHighOtherOps, dafsBatchSubmits=dafsBatchSubmits, v2ccSymlinks=v2ccSymlinks, grmMonitor=grmMonitor, dafsSessionClientIdString=dafsSessionClientIdString, netportIfGrpName=netportIfGrpName, qosReadaheadSettingsEntry=qosReadaheadSettingsEntry, dfMaxFilesUsed=dfMaxFilesUsed, tv3Percent=tv3Percent, lunHighWriteOps=lunHighWriteOps, vfName=vfName, snapmirrorConnIndex=snapmirrorConnIndex, ncFtpMissRequests=ncFtpMissRequests, if64InErrors=if64InErrors, ncGrmAgentOptions=ncGrmAgentOptions, raidVDiskNumber=raidVDiskNumber, snapmirrorTotalFailures=snapmirrorTotalFailures, v3cSymlinks=v3cSymlinks, dafsNicListenAddr=dafsNicListenAddr, tv3ReadStats=tv3ReadStats, initiatorGroupType=initiatorGroupType, cifsReads=cifsReads, alfFileSaved=alfFileSaved, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, tv2cpRenames=tv2cpRenames, dfIndex=dfIndex, sisSchedule=sisSchedule, v2cpLookups=v2cpLookups, v3pFsinfos=v3pFsinfos, tv2Read64KCalls=tv2Read64KCalls, smb2FlushPct=smb2FlushPct, cDOTCpuBusyTimePerCent=cDOTCpuBusyTimePerCent, cpFromLogFullOps=cpFromLogFullOps, viaOutRdma=viaOutRdma, connectedInitiatorIsid=connectedInitiatorIsid, if64OutDiscards=if64OutDiscards, outOfDateDiskSectorSize=outOfDateDiskSectorSize, fcpIsLicensed=fcpIsLicensed, v2cGetattrs=v2cGetattrs, obsSmbQueryInfo2s=obsSmbQueryInfo2s, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo, tv3cpWrites=tv3cpWrites, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, sisProgress=sisProgress, pclNfsCalls=pclNfsCalls, vfIpAddr=vfIpAddr, outOfDateDiskIndex=outOfDateDiskIndex, smb2SetInfoInvalidPct=smb2SetInfoInvalidPct, smb2QueryFsSizeInfos=smb2QueryFsSizeInfos, df64DedupeSaved=df64DedupeSaved, smb2QueryFileInternalInfos=smb2QueryFileInternalInfos, logicalInterfaceStatusVserver=logicalInterfaceStatusVserver, ncStreamingAccelEntry=ncStreamingAccelEntry, vserverRootVolume=vserverRootVolume, cDOTCpuNonCPInterruptPercent=cDOTCpuNonCPInterruptPercent, qrVKBytesUsed=qrVKBytesUsed, otherDiskSectorSize=otherDiskSectorSize, v3pWrites=v3pWrites, netportIfgPort=netportIfgPort, vsRouteUuid=vsRouteUuid, tv2pRoots=tv2pRoots, ncFtpBytesFromClients=ncFtpBytesFromClients, if64OutOctets=if64OutOctets, cpuNonCPInterrupts=cpuNonCPInterrupts, pclRpcServXDRCalls=pclRpcServXDRCalls, tv2pReadlinks=tv2pReadlinks, tv3cLinks=tv3cLinks, ncDnsIres=ncDnsIres, fcpTargetPortEntry=fcpTargetPortEntry, dafsNicDirectInBytes=dafsNicDirectInBytes, qrIndex=qrIndex, cifsHostName=cifsHostName, iscsiHighReadBytes=iscsiHighReadBytes, fcpTargetTableIndex=fcpTargetTableIndex, ncNtlmPossibleProblem=ncNtlmPossibleProblem, cpFromLowDatavecsOps=cpFromLowDatavecsOps, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, enclVoltSensorsCurrentVolt=enclVoltSensorsCurrentVolt, appTrap=appTrap, snmpBusy=snmpBusy, dafsSessionClientVerifier=dafsSessionClientVerifier, cifsStatus=cifsStatus, productTrapData=productTrapData, chassisTemperatureShutdown=chassisTemperatureShutdown, chassisFanOk=chassisFanOk, dafsClientConnectAuths=dafsClientConnectAuths, tv3cRmdirs=tv3cRmdirs, cpFromTimerOps=cpFromTimerOps, tv2ccCreates=tv2ccCreates, snapmirrorSyncToAsync=snapmirrorSyncToAsync, dafsAccesses=dafsAccesses, psetIndex=psetIndex, tv2cpRemoves=tv2cpRemoves, vfIpAddresses=vfIpAddresses, dfLowTotalKBytes=dfLowTotalKBytes, qvStateInitPercent=qvStateInitPercent, psetMemberTable=psetMemberTable, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, raidPPlexNumber=raidPPlexNumber, raidVTotalBlocks=raidVTotalBlocks, rpcUdpCalls=rpcUdpCalls, slQSource=slQSource, snapvaultHostTable=snapvaultHostTable, subnetIpspaceName=subnetIpspaceName, vserverMaxVolumes=vserverMaxVolumes, tv2ccReads=tv2ccReads, dafsOpenDowngrades=dafsOpenDowngrades, cifsBadCalls=cifsBadCalls, cDOTCpFromFlushOps=cDOTCpFromFlushOps, qosReadaheadMaxDeadline=qosReadaheadMaxDeadline, v2cpSetattrs=v2cpSetattrs, iscsiLowReadBytes=iscsiLowReadBytes, tv3cpRemoves=tv3cpRemoves, tv3ccMknods=tv3ccMknods, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, globalStatusNonRecoverable=globalStatusNonRecoverable, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, cpuOk=cpuOk, smb2QueryFileStandardInfoPct=smb2QueryFileStandardInfoPct, haNodeSysid=haNodeSysid, smbFlushes=smbFlushes, qrKBytesUsed=qrKBytesUsed, smbCopies=smbCopies, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, ncStreamingQTBTServers=ncStreamingQTBTServers, dafsSessionIndex=dafsSessionIndex, ifHighInDiscards=ifHighInDiscards, remoteSystemMgtAlert=remoteSystemMgtAlert, fcpTargetPortSpeed=fcpTargetPortSpeed, rpcNullRecvs=rpcNullRecvs, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, viaConnRemoteDescriminator=viaConnRemoteDescriminator, ncHttpActiveServConns=ncHttpActiveServConns, slQIndex=slQIndex, fcpHighOps=fcpHighOps, v3cpLookups=v3cpLookups, pclNfsV3Creates=pclNfsV3Creates, viaConnSentMessages=viaConnSentMessages, v2Read16KCalls=v2Read16KCalls, netportNode=netportNode, smb2UnLocks=smb2UnLocks, nfsCacheStats=nfsCacheStats, ncNntpBytesFromServers=ncNntpBytesFromServers, v2cpWrites=v2cpWrites, extcache64Uptime=extcache64Uptime, appInfo=appInfo, smbDeletePct=smbDeletePct, otherDiskBay=otherDiskBay, cluster=cluster, ftpdError=ftpdError, snapmirrorIndex=snapmirrorIndex, haPartnerStatus=haPartnerStatus, cDOTCpuBusyTime=cDOTCpuBusyTime, v3cpReads=v3cpReads, cifsOpLkL2ToNones=cifsOpLkL2ToNones, volEntry=volEntry, sfoAggregateRelocated=sfoAggregateRelocated, qrV2IdType=qrV2IdType, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, ncCdIsEnabled=ncCdIsEnabled, nodeStatDescription=nodeStatDescription, viaNicIndex=viaNicIndex, productCPUArch=productCPUArch, totDafs=totDafs, misc64DiskReadBytes=misc64DiskReadBytes, snapmirrorRelIndex=snapmirrorRelIndex, chassisPowerSupplyOff=chassisPowerSupplyOff, plexEntry=plexEntry)
mibBuilder.exportSymbols("NETAPP-MIB", lunLowWriteBytes=lunLowWriteBytes, snapmirrorReadBytes=snapmirrorReadBytes, flexCloneSplitComplete=flexCloneSplitComplete, haTable=haTable, lun64Ops=lun64Ops, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, vfIpSpace=vfIpSpace, dafsDefaultGid=dafsDefaultGid, raidVDiskModel=raidVDiskModel, fabricTable=fabricTable, dfLowAvailKBytes=dfLowAvailKBytes, spareEntry=spareEntry, enclCurSensorsPresent=enclCurSensorsPresent, viaConnRemoteNetAddress=viaConnRemoteNetAddress, vsRouteTable=vsRouteTable, broadcastDomainIpspaceName=broadcastDomainIpspaceName, tv2ccWrcaches=tv2ccWrcaches, amNumber=amNumber, environment=environment, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, sisHighLastOpSize=sisHighLastOpSize, qosReadaheadMinBlocks=qosReadaheadMinBlocks, lun64ReadBytes=lun64ReadBytes, snapmirrorRelResyncFailCnt=snapmirrorRelResyncFailCnt, df64AvailKBytes=df64AvailKBytes, logicalInterfaceStatusAdmin=logicalInterfaceStatusAdmin, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, v2cCreates=v2cCreates, rcpTcpBadLens=rcpTcpBadLens, tv2pLookups=tv2pLookups, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct, nodeOwner=nodeOwner, nodeEnvOverTemperature=nodeEnvOverTemperature, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent, ftpdOn=ftpdOn, aggrVolumeFootprintsPercent=aggrVolumeFootprintsPercent, dafsDisconnects=dafsDisconnects, extcache64ReadLatency=extcache64ReadLatency, v2pReadlinks=v2pReadlinks, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, nvramBatteryStatus=nvramBatteryStatus, cifsSmb2PipeRequest=cifsSmb2PipeRequest, vfIpEntry=vfIpEntry, qos=qos, sisBlocksSkippedSharing=sisBlocksSkippedSharing, qrV2PathName=qrV2PathName, miscLowHttpOps=miscLowHttpOps, v3pNulls=v3pNulls, rstAttempts=rstAttempts, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, smb2FsctlSecureSharePct=smb2FsctlSecureSharePct, smb2IpcReadPct=smb2IpcReadPct, volumePhysicalOverallocated=volumePhysicalOverallocated, obsSmbWriteAndCloses=obsSmbWriteAndCloses, netappVserver=netappVserver, cf=cf, aggrHAType=aggrHAType, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, v2Write8KCalls=v2Write8KCalls, amIndex=amIndex, cifs=cifs, v2pLinks=v2pLinks, tv3Write4KCalls=tv3Write4KCalls, vfDisallowedProtocols=vfDisallowedProtocols, raidScsiId=raidScsiId, cp=cp, v3Calls=v3Calls, tv2ccLinks=tv2ccLinks, ncStreamingAccelIndex=ncStreamingAccelIndex, cfSettings=cfSettings, qosReadaheadJitter=qosReadaheadJitter, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent, spareCarrierID=spareCarrierID, raidVScsiAdapter=raidVScsiAdapter, enclVoltSensorsOverVoltFailThr=enclVoltSensorsOverVoltFailThr, netportFlowcontrolOper=netportFlowcontrolOper, switchHighPacketsRejected=switchHighPacketsRejected, outOfDateDiskModel=outOfDateDiskModel, volCloneChildrenList=volCloneChildrenList, tv3pLinks=tv3pLinks, ipspaceVservers=ipspaceVservers, ifLowInErrors=ifLowInErrors, obsSmbLockAndReadPct=obsSmbLockAndReadPct, smb2QueryFsAttrInfoPct=smb2QueryFsAttrInfoPct, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, tv3ccAccesss=tv3ccAccesss, tv2Read512Calls=tv2Read512Calls, netportPort=netportPort, raidVTotalMb=raidVTotalMb, initiatorGroupIndex=initiatorGroupIndex, ncBytesToServers=ncBytesToServers, tnfsCalls=tnfsCalls, nodeStatCounterIndex=nodeStatCounterIndex, amStatus=amStatus, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, tv2pMkdirs=tv2pMkdirs, lun64OtherOps=lun64OtherOps, fcpTargetLifName=fcpTargetLifName, v2cpLinks=v2cpLinks, pclNfsV3Lookups=pclNfsV3Lookups, envFailedFanCount=envFailedFanCount, lunSize64=lunSize64, softQuotaNormal=softQuotaNormal, volMoveDstaggrName=volMoveDstaggrName, ifLowOutErrors=ifLowOutErrors, snapmirrorConnDst1=snapmirrorConnDst1, qvStateVolume=qvStateVolume, powerSupplyFailureShutdown=powerSupplyFailureShutdown, raidUsedMb=raidUsedMb, extcache64Hits=extcache64Hits, spareScsiAdapter=spareScsiAdapter, tnfsrwStats=tnfsrwStats, avLicenseCheckFailed=avLicenseCheckFailed, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, ncIcapOptions=ncIcapOptions, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, tv2ccReadlinks=tv2ccReadlinks, ncIcapIsEnabled=ncIcapIsEnabled, pclNfsV2Writes=pclNfsV2Writes, viaDisconnect=viaDisconnect, fcpTargetStandby=fcpTargetStandby, lunRelocationCompletion=lunRelocationCompletion, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, otherDiskDiskId=otherDiskDiskId, dafsExportTable=dafsExportTable, raidPGroupNumber=raidPGroupNumber, smb2IpcReads=smb2IpcReads, logicalInterfaceAddressString=logicalInterfaceAddressString, switchHighPacketsProcessed=switchHighPacketsProcessed, dafsGetRootHandles=dafsGetRootHandles, cifsNOplockAckWaits=cifsNOplockAckWaits, vsRouteEntry=vsRouteEntry, smbSeekPct=smbSeekPct, ncHttpAccelEntry=ncHttpAccelEntry, vserverOperationalState=vserverOperationalState, fanFailureShutdown=fanFailureShutdown, v2ccStatfss=v2ccStatfss, v2cWrcaches=v2cWrcaches, pclRpcCalls=pclRpcCalls, fanWarning=fanWarning, dafsNicOutBytes=dafsNicOutBytes, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, qosReadaheadForceFull=qosReadaheadForceFull, smVaultSnapWarnLimit=smVaultSnapWarnLimit, nfsCacheBytesToServers=nfsCacheBytesToServers, timedTargetNotResponding=timedTargetNotResponding, pclNfsV3Reads=pclNfsV3Reads, tv3cSetattrs=tv3cSetattrs, logicalInterfaceAllowLbMigrate=logicalInterfaceAllowLbMigrate, dafsRenames=dafsRenames, cifsIsLoginEnabled=cifsIsLoginEnabled, tv2cRenames=tv2cRenames, cifsOpLkBatchToNones=cifsOpLkBatchToNones, enclCurSensorsMaximum=enclCurSensorsMaximum, smb2QueryFsSizeInfoPct=smb2QueryFsSizeInfoPct, enclPowerSuppliesPartNos=enclPowerSuppliesPartNos, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, miscHighNfsOps=miscHighNfsOps, netportIfgMode=netportIfgMode, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, tv2cpNulls=tv2cpNulls, fsStatusMessage=fsStatusMessage, slVMinutes=slVMinutes, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, lunQtreeName=lunQtreeName, svLastTransTimeSeconds=svLastTransTimeSeconds, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, pclNfsV3Mkdirs=pclNfsV3Mkdirs, chassisPSUwrongInput=chassisPSUwrongInput, cifsPreserveCase=cifsPreserveCase, qrV2VolumeName=qrV2VolumeName, cifsDCName=cifsDCName, v3ccReaddirs=v3ccReaddirs, ncVersion=ncVersion, nfsCalls=nfsCalls, avMcAfeeEngineExpiring=avMcAfeeEngineExpiring, v3ccCommits=v3ccCommits, sisLastOpState=sisLastOpState, tv2ccSymlinks=tv2ccSymlinks, cifsWinsServers=cifsWinsServers, raidPUsedMb=raidPUsedMb, v3Write2KCalls=v3Write2KCalls, netappClusteredFiler=netappClusteredFiler, chassisFanFailxMinShutdown=chassisFanFailxMinShutdown, outOfDateDiskBay=outOfDateDiskBay, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, pclNfsV3Read512Calls=pclNfsV3Read512Calls, vfProTable=vfProTable, subnetEntry=subnetEntry, portType=portType, tv3cRenames=tv3cRenames, otherDisk64TotalBlocks=otherDisk64TotalBlocks, dafsVerifys=dafsVerifys, vserverIsRepository=vserverIsRepository, snapmirrorOn=snapmirrorOn, ncHttpTotalRequests=ncHttpTotalRequests, iscsi64ReadBytes=iscsi64ReadBytes, broadcastDomainSubnets=broadcastDomainSubnets, compressLowSavedKBytes=compressLowSavedKBytes, tv2Write128KCalls=tv2Write128KCalls, pclNfsV2Read512Calls=pclNfsV2Read512Calls, nodeTable=nodeTable, netportIfgDistrFunc=netportIfgDistrFunc, smb2FsctlPipePeekPct=smb2FsctlPipePeekPct, lunMapped=lunMapped, smb2EchoPct=smb2EchoPct, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, cifsSetAttrs=cifsSetAttrs, v2cpRmdirs=v2cpRmdirs, snapmirrorRelUpdateFailCnt=snapmirrorRelUpdateFailCnt, tnfsServBadCalls=tnfsServBadCalls, raidVUsedBlocks=raidVUsedBlocks, outOfDateDiskTable=outOfDateDiskTable, avRollbackFailed=avRollbackFailed, restore=restore, raidEntry=raidEntry, obsSmbSearchPct=obsSmbSearchPct, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, v2cpReadlinks=v2cpReadlinks, pclEntry=pclEntry, smb2QueryFsInvalidPct=smb2QueryFsInvalidPct, ndmpSessionOpened=ndmpSessionOpened, snapmirrorRelResyncSuccCnt=snapmirrorRelResyncSuccCnt, smb2CreatePct=smb2CreatePct, dmpDataAmount=dmpDataAmount, miscNetSentKB=miscNetSentKB, tv3cpFsstats=tv3cpFsstats, nfsCacheLowMissRequests=nfsCacheLowMissRequests, viaCurrError=viaCurrError, snapvaultSchedTable=snapvaultSchedTable, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, fcpTargetLif=fcpTargetLif, obsSmbLockByteRangePct=obsSmbLockByteRangePct, v3cpFsinfos=v3cpFsinfos, dafsFetchResponses=dafsFetchResponses, smb2FsctlFileUnsupporteds=smb2FsctlFileUnsupporteds, v3pMknods=v3pMknods, cifsSmb2UnRelatedCompRequest=cifsSmb2UnRelatedCompRequest, connectedInitiatorPortName=connectedInitiatorPortName, product=product, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, licenseIsLicensed=licenseIsLicensed, tv2cpRoots=tv2cpRoots, v2ccGetattrs=v2ccGetattrs, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, otherDiskTable=otherDiskTable, enclProductSerialNo=enclProductSerialNo, dafsIsLicensed=dafsIsLicensed, otherDiskShelf=otherDiskShelf, lunLowErrors=lunLowErrors, pclNfsV2Symlinks=pclNfsV2Symlinks, qrKBytesLimit=qrKBytesLimit)
mibBuilder.exportSymbols("NETAPP-MIB", raidStatus=raidStatus, dmpStartTime=dmpStartTime, snapmirrorBackupAborts=snapmirrorBackupAborts, qosReadaheadMinRange=qosReadaheadMinRange, nodeCpuUptime=nodeCpuUptime, curDafs=curDafs, nodeUptime=nodeUptime, smb2TreeConnectPct=smb2TreeConnectPct, v2Write16KCalls=v2Write16KCalls, productMachineType=productMachineType, tv2cpLookups=tv2cpLookups, diskReconstructingParityCount=diskReconstructingParityCount, cifsSmb2SetInfo=cifsSmb2SetInfo, ncStreamingRtspWMBFClients=ncStreamingRtspWMBFClients, enclProductID=enclProductID, vfSpTable=vfSpTable, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, tv3ccSymlinks=tv3ccSymlinks, dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, slQQtree=slQQtree, pclNfsV2NullPerCent=pclNfsV2NullPerCent, cifsSMBDisconnects=cifsSMBDisconnects, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, qrV264KBytesUsed=qrV264KBytesUsed, lunHighOps=lunHighOps, dafsSessionUseChecksums=dafsSessionUseChecksums, enclNodeName=enclNodeName, obsSmbSetInfo2s=obsSmbSetInfo2s, dafsDelegPurges=dafsDelegPurges, cifsSmb2FileBothDirInfo=cifsSmb2FileBothDirInfo, snapmirrorRelTotalTransBytes=snapmirrorRelTotalTransBytes, compress64SavedKBytes=compress64SavedKBytes, netifNumber=netifNumber, ncFtpBytesToClients=ncFtpBytesToClients, ncFtpBWSavings=ncFtpBWSavings, pclNfsServBadCalls=pclNfsServBadCalls, cifsGetAttrs=cifsGetAttrs, volUUID=volUUID, smb2FsctlSetSparsePct=smb2FsctlSetSparsePct, vfFsIndex=vfFsIndex, cpFromLowMbufOps=cpFromLowMbufOps, vserverAggrList=vserverAggrList, switchType=switchType, connectedInitiatorType=connectedInitiatorType, sisIsIddEnabled=sisIsIddEnabled, volumeLogicalOverallocated=volumeLogicalOverallocated, quotaInitPercent=quotaInitPercent, smbTreeDisconnects=smbTreeDisconnects, cifsServ=cifsServ, nfsV3=nfsV3, viaNativeMTU=viaNativeMTU, v3cMknods=v3cMknods, tv2Write16KCalls=tv2Write16KCalls, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, misc=misc, qosWorkloadFile=qosWorkloadFile, ncStreamingQTBTClients=ncStreamingQTBTClients, lunMapLUNName=lunMapLUNName, v3cReaddirPluss=v3cReaddirPluss, enclVoltSensorsUnderVoltWarnThr=enclVoltSensorsUnderVoltWarnThr, tv2Read1KCalls=tv2Read1KCalls, ifHighInUnknownProtos=ifHighInUnknownProtos, vfilerIsLicensed=vfilerIsLicensed, filesysMaxfilesPossible=filesysMaxfilesPossible, v3ccGetattrs=v3ccGetattrs, raidPShelf=raidPShelf, ndmpBackupActive=ndmpBackupActive, compress64UsedKBytes=compress64UsedKBytes, amAddress=amAddress, cifsSmb2DurableHandlePreserved=cifsSmb2DurableHandlePreserved, ipspaceTable=ipspaceTable, v2cpSymlinks=v2cpSymlinks, cifsCwaWaits=cifsCwaWaits, qosReadaheadDefault=qosReadaheadDefault, nfsV2=nfsV2, avTrendLicenseExpiring=avTrendLicenseExpiring, v3cpCommits=v3cpCommits, fcpTargetLifPN=fcpTargetLifPN, volOptions=volOptions, nfsCacheVerifyRequests=nfsCacheVerifyRequests, volInstanceUUID=volInstanceUUID, v3ccLookups=v3ccLookups, dafsSessionEndian=dafsSessionEndian, dafsServerEnabled=dafsServerEnabled, cifsSmb2DurableReclaimReceived=cifsSmb2DurableReclaimReceived, viaName=viaName, smb2QueryFileUnsupportedPct=smb2QueryFileUnsupportedPct, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, pclNfsV3Writes=pclNfsV3Writes, raidPBay=raidPBay, nfsCacheBytesFromServers=nfsCacheBytesFromServers, vfEntry=vfEntry, extcache64Usedsize=extcache64Usedsize, ncHttpReqRate=ncHttpReqRate, svSrcSnapshotTime=svSrcSnapshotTime, initiatorListEntryIndex=initiatorListEntryIndex, tnfsV3=tnfsV3, ncHttp=ncHttp, nodeEnvFailedFanCount=nodeEnvFailedFanCount, viaConnEntry=viaConnEntry, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, tv3cSymlinks=tv3cSymlinks, svLastTransMBs=svLastTransMBs, volDrForceNvfail=volDrForceNvfail, v3cpGetattrs=v3cpGetattrs, smb2SetModeInfos=smb2SetModeInfos, clusterPingDropLarge=clusterPingDropLarge, smbTrans2FindNext2s=smbTrans2FindNext2s, fcpLowWriteBytes=fcpLowWriteBytes, netOptsSwitchlessClusterEnabled=netOptsSwitchlessClusterEnabled, network=network, smb2SetBasicInfoPct=smb2SetBasicInfoPct, smbTreeConnectAndXs=smbTreeConnectAndXs, qrPathName=qrPathName, lunMapEntry=lunMapEntry, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, nodeStatInstanceName=nodeStatInstanceName, pclNfsV2Write512Calls=pclNfsV2Write512Calls, v2cpNulls=v2cpNulls, productGuiUrl=productGuiUrl, qosReadaheadSmallFileBlocks=qosReadaheadSmallFileBlocks, vserverNumVolumes=vserverNumVolumes, snapmirrorLag=snapmirrorLag, raidPDiskPort=raidPDiskPort, enclVoltSensorsUnderVoltFail=enclVoltSensorsUnderVoltFail, nfsCacheLowHitRequests=nfsCacheLowHitRequests, lunMapVserver=lunMapVserver, fcpTargetLifNN=fcpTargetLifNN, netportIfGrpEntry=netportIfGrpEntry, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, tv3cMkdirs=tv3cMkdirs, dfEntry=dfEntry, tv2ccLookups=tv2ccLookups, raidVPlexNumber=raidVPlexNumber, smbTransactCreatePct=smbTransactCreatePct, smb2SetEofInfoPct=smb2SetEofInfoPct, dafsConnectBinds=dafsConnectBinds, df64TotalKBytes=df64TotalKBytes, volumeRemoteUnreachable=volumeRemoteUnreachable, volumeOnline=volumeOnline, smb2QueryFsFullSizeInfoPct=smb2QueryFsFullSizeInfoPct, lunIndex=lunIndex, tv3pCreates=tv3pCreates, aggrType=aggrType, qrVId=qrVId, volumesStillFull=volumesStillFull, ncNntpBWSavings=ncNntpBWSavings, spareDiskName=spareDiskName, raidTotalMb=raidTotalMb, fcpTargetTable=fcpTargetTable, netappModuleId=netappModuleId, ncFtpHitRequests=ncFtpHitRequests, warningTrap=warningTrap, viaConnTable=viaConnTable, ndmpBackupFailureReason=ndmpBackupFailureReason, obsSmbCreateDirs=obsSmbCreateDirs, dmpNumFiles=dmpNumFiles, pclNfsV3Setattrs=pclNfsV3Setattrs, ncDnsIresIsInitialised=ncDnsIresIsInitialised, v2pCreates=v2pCreates, tv2cpSetattrs=tv2cpSetattrs, qosReadaheadAlignBlocks=qosReadaheadAlignBlocks, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, qosReadaheadMetadataBlocks=qosReadaheadMetadataBlocks, smb2SessionSetupPct=smb2SessionSetupPct, svTotalFailures=svTotalFailures, extcacheCardOffline=extcacheCardOffline, raidPNumber=raidPNumber, volMoveCutoverDeferred=volMoveCutoverDeferred, v3cAccesss=v3cAccesss, enclVoltSensorsUnderVoltFailThr=enclVoltSensorsUnderVoltFailThr, raidPGroup=raidPGroup, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, ncNntpIsLicensed=ncNntpIsLicensed, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, netportMtuAdmin=netportMtuAdmin, dafsClientConnects=dafsClientConnects, vfSpName=vfSpName, v2ccCreates=v2ccCreates, dafsCheckResponses=dafsCheckResponses, v2Write32KCalls=v2Write32KCalls, snapmirrorRelSchedule=snapmirrorRelSchedule, ncFtpRespTimePerByte=ncFtpRespTimePerByte, ncStreamingOBTClients=ncStreamingOBTClients, viaThreadSafe=viaThreadSafe, plexVolName=plexVolName, tv3cCommits=tv3cCommits, v2Read64KCalls=v2Read64KCalls, netapp0=netapp0, cpFromCpOps=cpFromCpOps, volLanguageCode=volLanguageCode, smbSessionSetupAndXs=smbSessionSetupAndXs, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, svHostTotalSuccesses=svHostTotalSuccesses, svSystemActiveSrcNumber=svSystemActiveSrcNumber, trcMisses=trcMisses, ncHttpMissRequests=ncHttpMissRequests, raidPDiskType=raidPDiskType, globalStatusNonCritical=globalStatusNonCritical, otherDiskScsiAdapter=otherDiskScsiAdapter, cifsMisc=cifsMisc, smb2OplkBrkAck=smb2OplkBrkAck, nodeEntry=nodeEntry, dafsNicInBytes=dafsNicInBytes, raidPTotalBlocks=raidPTotalBlocks, enclFansSpeed=enclFansSpeed, raidVDiskPool=raidVDiskPool, tv3Read8KCalls=tv3Read8KCalls, raidVSectorSize=raidVSectorSize, ncStreamingOBFServers=ncStreamingOBFServers, volIndex=volIndex, viaMaxVI=viaMaxVI, slMonth=slMonth, outOfDateDiskType=outOfDateDiskType, smb2Flushs=smb2Flushs, qtreeVolumeName=qtreeVolumeName, v3Read64KCalls=v3Read64KCalls, ncHttpObjHitrate=ncHttpObjHitrate, netportAutorevertDelay=netportAutorevertDelay, fcpTargetLifHomePort=fcpTargetLifHomePort, ncNntpOptions=ncNntpOptions, subnetMask=subnetMask, ncStreamingActiveServConns=ncStreamingActiveServConns, svHostName=svHostName, iscsiHighOps=iscsiHighOps, spareTotalBlocks=spareTotalBlocks, viaInRDMAWriteBytes=viaInRDMAWriteBytes, netappCluster=netappCluster, enclVoltSensorsOverVoltWarnThr=enclVoltSensorsOverVoltWarnThr, nodeHealth=nodeHealth, enclElectronicsCPLDVers=enclElectronicsCPLDVers, svPrimaryIsLicensed=svPrimaryIsLicensed, qrV2LowKBytesUsed=qrV2LowKBytesUsed, rcUdpInProgressHits=rcUdpInProgressHits, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, tv3cpSetattrs=tv3cpSetattrs, ncHttpBytesToClients=ncHttpBytesToClients, dmpActives=dmpActives, miscNfsOps=miscNfsOps, nfsCache64HitRequests=nfsCache64HitRequests, cifsWrites=cifsWrites, viaConnectTimeOut=viaConnectTimeOut, shelfIFModuleWarning=shelfIFModuleWarning, v2pReaddirs=v2pReaddirs, iscsi64WriteBytes=iscsi64WriteBytes, netportDuplexOper=netportDuplexOper, snapmirrorRelSrcPath=snapmirrorRelSrcPath, productLicenseTable=productLicenseTable, lunShareStatus=lunShareStatus, svSchedStatus=svSchedStatus, tv2Write1KCalls=tv2Write1KCalls, qtreeEntry=qtreeEntry, smbLockingAndXs=smbLockingAndXs)
mibBuilder.exportSymbols("NETAPP-MIB", smbFlushPct=smbFlushPct, logicalInterfaceLbWeight=logicalInterfaceLbWeight, enclTempSensorsPresent=enclTempSensorsPresent, tv3Write2KCalls=tv3Write2KCalls, v3ccFsinfos=v3ccFsinfos, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, tv3ccFsstats=tv3ccFsstats, miscCorrectedMachineChecks=miscCorrectedMachineChecks, pclNfsV2Links=pclNfsV2Links, volStatus=volStatus, viaInMsgs=viaInMsgs, envFailedPowerSupplyCount=envFailedPowerSupplyCount, raidVGroup=raidVGroup, raidVBay=raidVBay, cifsStatsExhaustMemCtrlBlk=cifsStatsExhaustMemCtrlBlk, svSchedSnapshot=svSchedSnapshot, smb2QueryFileEAInfoPct=smb2QueryFileEAInfoPct, ncFtpBytesToServers=ncFtpBytesToServers, spareDiskType=spareDiskType, shelfIFModuleInfo=shelfIFModuleInfo, v2pLookups=v2pLookups, nodeProductVersion=nodeProductVersion, smb2FsctlSecureShares=smb2FsctlSecureShares, cifsMaxConnections=cifsMaxConnections, otherDiskDiskName=otherDiskDiskName, compressHighUsedKBytes=compressHighUsedKBytes, dfPerCentInodeCapacity=dfPerCentInodeCapacity, snapmirrorSyncOk=snapmirrorSyncOk, snapmirrorConnDst2=snapmirrorConnDst2, spareSecondaryDiskPort=spareSecondaryDiskPort, initiatorGroupMemberIndex=initiatorGroupMemberIndex, v3cpReadlinks=v3cpReadlinks, tv3pReadlinks=tv3pReadlinks, tv2Read16KCalls=tv2Read16KCalls, v2pRenames=v2pRenames, ncHttpsAccelEntry=ncHttpsAccelEntry, cifsNShares=cifsNShares, ncStreamingObjHitrate=ncStreamingObjHitrate, dafsPendingRequests=dafsPendingRequests, qrV2HighKBytesUsed=qrV2HighKBytesUsed, viaInBytes=viaInBytes, enclFansMaximum=enclFansMaximum, lunLowWriteOps=lunLowWriteOps, qvStateVserver=qvStateVserver, pclNfsV3Links=pclNfsV3Links)
