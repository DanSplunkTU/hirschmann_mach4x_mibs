#
# PySNMP MIB module PRVT-EGRESS-COUNTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-EGRESS-COUNTERS-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 16:38:54 2021
# On host fv-az33-471 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, MibIdentifier, ModuleIdentity, Bits, Counter64, iso, IpAddress, Integer32, ObjectIdentity, NotificationType, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "MibIdentifier", "ModuleIdentity", "Bits", "Counter64", "iso", "IpAddress", "Integer32", "ObjectIdentity", "NotificationType", "TimeTicks", "Gauge32")
TimeStamp, DisplayString, TruthValue, TextualConvention, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TruthValue", "TextualConvention", "RowStatus", "StorageType")
prvtEgressCounterMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 160))
prvtEgressCounterMib.setRevisions(('2010-05-21 00:00',))
if mibBuilder.loadTexts: prvtEgressCounterMib.setLastUpdated('201005210000Z')
if mibBuilder.loadTexts: prvtEgressCounterMib.setOrganization('BATM Advanced Communication')
prvtEgressCntNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 0))
prvtEgressCntObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1))
prvtEgressCntConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2))
prvtEgressCntCounterSetTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1), )
if mibBuilder.loadTexts: prvtEgressCntCounterSetTable.setStatus('current')
prvtEgressCntCounterSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1), ).setIndexNames((0, "PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetID"))
if mibBuilder.loadTexts: prvtEgressCntCounterSetEntry.setStatus('current')
prvtEgressCntCounterSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: prvtEgressCntCounterSetID.setStatus('current')
prvtEgressCntAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllPriorities.setStatus('current')
prvtEgressCntPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntPriority.setStatus('current')
prvtEgressCntAllDropLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllDropLevels.setStatus('current')
prvtEgressCntDropLevelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntDropLevelMode.setStatus('current')
prvtEgressCntAllVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllVlans.setStatus('current')
prvtEgressCntVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntVlan.setStatus('current')
prvtEgressCntAllInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllInterfaces.setStatus('current')
prvtEgressCntInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 9), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntInterfaces.setStatus('current')
prvtEgressCntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("set", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntPort.setStatus('current')
prvtEgressCntClearCounterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntClearCounterSet.setStatus('current')
prvtEgressCntCounterSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEgressCntCounterSetRowStatus.setStatus('current')
prvtEgressCntCountersTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2), )
if mibBuilder.loadTexts: prvtEgressCntCountersTable.setStatus('current')
prvtEgressCntCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1), ).setIndexNames((0, "PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetID"))
if mibBuilder.loadTexts: prvtEgressCntCountersEntry.setStatus('current')
prvtEgressCntOutBcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutBcFrames.setStatus('current')
prvtEgressCntOutNUcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutNUcFrames.setStatus('current')
prvtEgressCntOutUcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutUcFrames.setStatus('current')
prvtEgressCntEgrFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntEgrFilterDisc.setStatus('current')
prvtEgressCntTxqFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntTxqFilterDisc.setStatus('current')
prvtEgressCntOutCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutCtrlFrames.setStatus('current')
prvtEgressCntEgrFrwFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntEgrFrwFilterDisc.setStatus('current')
prvtEgressCntClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntClearCounters.setStatus('current')
prvtEgressCntQosCountersTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3), )
if mibBuilder.loadTexts: prvtEgressCntQosCountersTable.setStatus('current')
prvtEgressCntQosCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEgressCntQosCountersEntry.setStatus('current')
prvtEgressCntQosYellowPacketCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosYellowPacketCounters.setStatus('current')
prvtEgressCntQosRedPacketCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosRedPacketCounters.setStatus('current')
prvtEgressCntQosMaximumRateReached = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosMaximumRateReached.setStatus('current')
prvtEgressCntCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 1))
prvtEgressCntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2))
prvtEgressCntCounterSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 1)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllPriorities"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntPriority"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllDropLevels"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntDropLevelMode"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllVlans"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntVlan"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllInterfaces"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntInterfaces"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntPort"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntClearCounterSet"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCounterSetGroup = prvtEgressCntCounterSetGroup.setStatus('current')
prvtEgressCntCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 2)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutBcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutNUcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutUcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntEgrFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntTxqFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutCtrlFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntEgrFrwFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntClearCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCountersGroup = prvtEgressCntCountersGroup.setStatus('current')
prvtEgressCntQosCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 3)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosYellowPacketCounters"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosRedPacketCounters"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosMaximumRateReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntQosCountersGroup = prvtEgressCntQosCountersGroup.setStatus('current')
prvtEgressCntCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 1, 1)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetGroup"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCountersGroup"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCompliance = prvtEgressCntCompliance.setStatus('current')
mibBuilder.exportSymbols("PRVT-EGRESS-COUNTERS-MIB", prvtEgressCntQosCountersGroup=prvtEgressCntQosCountersGroup, prvtEgressCntCompliance=prvtEgressCntCompliance, prvtEgressCntCountersEntry=prvtEgressCntCountersEntry, prvtEgressCntPort=prvtEgressCntPort, prvtEgressCntNotifications=prvtEgressCntNotifications, prvtEgressCntOutCtrlFrames=prvtEgressCntOutCtrlFrames, prvtEgressCntCounterSetEntry=prvtEgressCntCounterSetEntry, prvtEgressCntCounterSetRowStatus=prvtEgressCntCounterSetRowStatus, prvtEgressCntAllInterfaces=prvtEgressCntAllInterfaces, prvtEgressCntCounterSetID=prvtEgressCntCounterSetID, prvtEgressCntOutNUcFrames=prvtEgressCntOutNUcFrames, prvtEgressCntGroups=prvtEgressCntGroups, prvtEgressCntAllVlans=prvtEgressCntAllVlans, prvtEgressCntQosYellowPacketCounters=prvtEgressCntQosYellowPacketCounters, prvtEgressCntClearCounters=prvtEgressCntClearCounters, prvtEgressCntQosCountersEntry=prvtEgressCntQosCountersEntry, prvtEgressCntQosRedPacketCounters=prvtEgressCntQosRedPacketCounters, prvtEgressCntEgrFrwFilterDisc=prvtEgressCntEgrFrwFilterDisc, prvtEgressCntInterfaces=prvtEgressCntInterfaces, prvtEgressCntDropLevelMode=prvtEgressCntDropLevelMode, prvtEgressCntOutBcFrames=prvtEgressCntOutBcFrames, prvtEgressCntQosMaximumRateReached=prvtEgressCntQosMaximumRateReached, prvtEgressCntConformance=prvtEgressCntConformance, prvtEgressCntObjects=prvtEgressCntObjects, prvtEgressCntCounterSetTable=prvtEgressCntCounterSetTable, PYSNMP_MODULE_ID=prvtEgressCounterMib, prvtEgressCntCountersGroup=prvtEgressCntCountersGroup, prvtEgressCntEgrFilterDisc=prvtEgressCntEgrFilterDisc, prvtEgressCntCounterSetGroup=prvtEgressCntCounterSetGroup, prvtEgressCntCountersTable=prvtEgressCntCountersTable, prvtEgressCntAllPriorities=prvtEgressCntAllPriorities, prvtEgressCntPriority=prvtEgressCntPriority, prvtEgressCounterMib=prvtEgressCounterMib, prvtEgressCntAllDropLevels=prvtEgressCntAllDropLevels, prvtEgressCntQosCountersTable=prvtEgressCntQosCountersTable, prvtEgressCntVlan=prvtEgressCntVlan, prvtEgressCntClearCounterSet=prvtEgressCntClearCounterSet, prvtEgressCntOutUcFrames=prvtEgressCntOutUcFrames, prvtEgressCntCompliances=prvtEgressCntCompliances, prvtEgressCntTxqFilterDisc=prvtEgressCntTxqFilterDisc)
