#
# PySNMP MIB module PRVT-TWAMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-TWAMP-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:46:26 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, NotificationType, Integer32, IpAddress, ObjectIdentity, Counter32, Bits, TimeTicks, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "Integer32", "IpAddress", "ObjectIdentity", "Counter32", "Bits", "TimeTicks", "Counter64", "ModuleIdentity")
TextualConvention, TruthValue, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress", "RowStatus")
prvtTwampMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 240))
prvtTwampMIB.setRevisions(('2010-05-27 00:00',))
if mibBuilder.loadTexts: prvtTwampMIB.setLastUpdated('201405160000Z')
if mibBuilder.loadTexts: prvtTwampMIB.setOrganization('BATM Advanced Communication')
class PrvtTwampTestNameType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtTwampDecimalPercent(TextualConvention, OctetString):
    status = 'current'
    displayHint = '3d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

prvtTwampNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 0))
prvtTwampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1))
prvtTwampTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1))
prvtTwampTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1), )
if mibBuilder.loadTexts: prvtTwampTestTable.setStatus('current')
prvtTwampTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampTestName"))
if mibBuilder.loadTexts: prvtTwampTestEntry.setStatus('current')
prvtTwampTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 1), PrvtTwampTestNameType())
if mibBuilder.loadTexts: prvtTwampTestName.setStatus('current')
prvtTwampTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setStatus('current')
prvtTwampTestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestServer.setStatus('current')
prvtTwampTestSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setStatus('current')
prvtTwampTestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestPackets.setStatus('current')
prvtTwampTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestTimeout.setStatus('current')
prvtTwampTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestDelay.setStatus('current')
prvtTwampTestExecuteNow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setStatus('current')
prvtTwampServer = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2))
prvtTwampServerInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setStatus('current')
prvtTwampServerSessionInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setStatus('current')
prvtTwampServerMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setStatus('current')
prvtTwampServerMaxParallelSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setStatus('current')
prvtTwampServerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerShutdown.setStatus('current')
prvtTwampClientTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7), )
if mibBuilder.loadTexts: prvtTwampClientTable.setStatus('current')
prvtTwampClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampClientIp"))
if mibBuilder.loadTexts: prvtTwampClientEntry.setStatus('current')
prvtTwampClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtTwampClientIp.setStatus('current')
prvtTwampClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setStatus('current')
prvtTwampServerControlSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setStatus('current')
prvtTwampServerTestSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setStatus('current')
prvtTwampTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3))
prvtTwampTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1), )
if mibBuilder.loadTexts: prvtTwampTestResultTable.setStatus('current')
prvtTwampTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampTestId"), (0, "PRVT-TWAMP-MIB", "prvtTwampTestResultName"))
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setStatus('current')
prvtTwampTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestId.setStatus('current')
prvtTwampTestResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 2), PrvtTwampTestNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestResultName.setStatus('current')
prvtTwampTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestStartTime.setStatus('current')
prvtTwampTestServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setStatus('current')
prvtTwampTestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestSessions.setStatus('current')
prvtTwampTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 1), ("running", 2), ("stopped", 3), ("finished", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestState.setStatus('current')
prvtTwampTestRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestRtt.setStatus('current')
prvtTwampTestMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setStatus('current')
prvtTwampTestMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setStatus('current')
prvtTwampTestPcktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setStatus('current')
prvtTwampTestPcktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setStatus('current')
prvtTwampTestPcktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setStatus('current')
prvtTwampTestVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariation.setStatus('current')
prvtTwampTestVariationLow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 14), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setStatus('current')
prvtTwampTestVariationMiddle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 15), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setStatus('current')
prvtTwampTestVariationHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 16), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setStatus('current')
mibBuilder.exportSymbols("PRVT-TWAMP-MIB", prvtTwampTestSessionsCount=prvtTwampTestSessionsCount, prvtTwampTestExecuteNow=prvtTwampTestExecuteNow, prvtTwampNotifications=prvtTwampNotifications, prvtTwampServerShutdown=prvtTwampServerShutdown, prvtTwampTestResult=prvtTwampTestResult, PrvtTwampTestNameType=PrvtTwampTestNameType, prvtTwampServerMaxParallelSessions=prvtTwampServerMaxParallelSessions, prvtTwampServer=prvtTwampServer, prvtTwampTestResultTable=prvtTwampTestResultTable, prvtTwampTestResultName=prvtTwampTestResultName, prvtTwampTestRowStatus=prvtTwampTestRowStatus, prvtTwampTestServer=prvtTwampTestServer, prvtTwampServerControlSessions=prvtTwampServerControlSessions, prvtTwampTestMaxRtt=prvtTwampTestMaxRtt, prvtTwampObjects=prvtTwampObjects, prvtTwampServerSessionInnactivity=prvtTwampServerSessionInnactivity, prvtTwampTestName=prvtTwampTestName, prvtTwampTestTimeout=prvtTwampTestTimeout, prvtTwampTestDelay=prvtTwampTestDelay, prvtTwampTestStartTime=prvtTwampTestStartTime, prvtTwampClientTable=prvtTwampClientTable, prvtTwampTestPcktDrop=prvtTwampTestPcktDrop, prvtTwampServerMaxSessions=prvtTwampServerMaxSessions, prvtTwampTestState=prvtTwampTestState, prvtTwampTestId=prvtTwampTestId, prvtTwampMIB=prvtTwampMIB, prvtTwampTestEntry=prvtTwampTestEntry, prvtTwampTestMinRtt=prvtTwampTestMinRtt, PYSNMP_MODULE_ID=prvtTwampMIB, prvtTwampTest=prvtTwampTest, prvtTwampTestSessions=prvtTwampTestSessions, prvtTwampTestPackets=prvtTwampTestPackets, prvtTwampClientEntry=prvtTwampClientEntry, prvtTwampServerInnactivity=prvtTwampServerInnactivity, prvtTwampTestRtt=prvtTwampTestRtt, prvtTwampTestVariationLow=prvtTwampTestVariationLow, prvtTwampTestVariationMiddle=prvtTwampTestVariationMiddle, prvtTwampTestPcktLost=prvtTwampTestPcktLost, prvtTwampTestVariationHigh=prvtTwampTestVariationHigh, prvtTwampTestPcktSent=prvtTwampTestPcktSent, prvtTwampServerTestSessions=prvtTwampServerTestSessions, prvtTwampClientRowStatus=prvtTwampClientRowStatus, prvtTwampTestVariation=prvtTwampTestVariation, prvtTwampClientIp=prvtTwampClientIp, PrvtTwampDecimalPercent=PrvtTwampDecimalPercent, prvtTwampTestResultEntry=prvtTwampTestResultEntry, prvtTwampTestServerAddress=prvtTwampTestServerAddress, prvtTwampTestTable=prvtTwampTestTable)
