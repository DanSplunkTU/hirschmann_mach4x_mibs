#
# PySNMP MIB module PRVT-PORTS-AGGREGATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-PORTS-AGGREGATION-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:02:12 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifAdminStatus, ifIndex, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifIndex", "ifOperStatus")
switch, configL2IfaceUnit, configL2IfacePort, configL2IfaceSlot = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch", "configL2IfaceUnit", "configL2IfacePort", "configL2IfaceSlot")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, ObjectIdentity, Unsigned32, Counter32, Counter64, Integer32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32", "Counter64", "Integer32", "NotificationType", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
prvtPortsAggregationMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 106))
prvtPortsAggregationMib.setRevisions(('2008-09-20 00:00', '2005-02-16 00:00', '2004-10-29 00:00', '2003-05-06 00:00', '2002-12-24 00:00', '2002-11-11 00:00',))
if mibBuilder.loadTexts: prvtPortsAggregationMib.setLastUpdated('200809200000Z')
if mibBuilder.loadTexts: prvtPortsAggregationMib.setOrganization('BATM Advanced Communication')
portsAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1))
portsAggregationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2))
portsAggregationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3))
maxAggregatorId = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAggregatorId.setStatus('current')
aggregationLacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpSystemPriority.setStatus('current')
portsAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3), )
if mibBuilder.loadTexts: portsAggregationTable.setStatus('current')
portsAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1), ).setIndexNames((0, "PRVT-PORTS-AGGREGATION-MIB", "aggregatorId"))
if mibBuilder.loadTexts: portsAggregationEntry.setStatus('current')
aggregatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: aggregatorId.setStatus('current')
aggregatorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorIfIndex.setStatus('current')
aggregatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticTrunk", 1), ("protocol-802-1ad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorType.setStatus('current')
aggregatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregatorName.setStatus('current')
aggregatorPortsMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorPortsMembers.setStatus('current')
aggregatorPortsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorPortsActive.setStatus('current')
aggregatorL2DropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2DropEvents.setStatus('current')
aggregatorL2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Octets.setStatus('current')
aggregatorL2Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts.setStatus('current')
aggregatorL2BroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2BroadcastPkts.setStatus('current')
aggregatorL2MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2MulticastPkts.setStatus('current')
aggregatorL2CRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2CRCAlignErrors.setStatus('current')
aggregatorL2UndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2UndersizePkts.setStatus('current')
aggregatorL2OversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2OversizePkts.setStatus('current')
aggregatorL2Fragments = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Fragments.setStatus('current')
aggregatorL2Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Jabbers.setStatus('current')
aggregatorL2Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Collisions.setStatus('current')
aggregatorL2Pkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts64Octets.setStatus('current')
aggregatorL2Pkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts65to127Octets.setStatus('current')
aggregatorL2Pkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts128to255Octets.setStatus('current')
aggregatorL2Pkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts256to511Octets.setStatus('current')
aggregatorL2Pkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts512to1023Octets.setStatus('current')
aggregatorL2Pkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts1024to1518Octets.setStatus('current')
aggregationLacpSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpSystemEnable.setStatus('current')
portsAggregationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1), )
if mibBuilder.loadTexts: portsAggregationConfigTable.setStatus('current')
portsAggregationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "configL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "configL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "configL2IfacePort"))
if mibBuilder.loadTexts: portsAggregationConfigEntry.setStatus('current')
staticAggregationID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAggregationID.setStatus('current')
dynamicAggregationID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicAggregationID.setStatus('current')
aggregationType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("static", 2), ("protocol-802-1adAcive", 3), ("protocol-802-1adPassive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationType.setStatus('current')
aggregationLacpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpPortPriority.setStatus('current')
aggregationLacpPortKey = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpPortKey.setStatus('current')
lagMemberLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: lagMemberLinkUp.setStatus('current')
lagMemberLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: lagMemberLinkDown.setStatus('current')
lagMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lagMemberAdd.setStatus('current')
lagMemberRemove = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lagMemberRemove.setStatus('current')
mibBuilder.exportSymbols("PRVT-PORTS-AGGREGATION-MIB", prvtPortsAggregationMib=prvtPortsAggregationMib, aggregatorL2Pkts512to1023Octets=aggregatorL2Pkts512to1023Octets, aggregatorName=aggregatorName, aggregationLacpSystemPriority=aggregationLacpSystemPriority, aggregatorL2Pkts1024to1518Octets=aggregatorL2Pkts1024to1518Octets, portsAggregation=portsAggregation, aggregationLacpPortPriority=aggregationLacpPortPriority, PYSNMP_MODULE_ID=prvtPortsAggregationMib, aggregatorL2BroadcastPkts=aggregatorL2BroadcastPkts, portsAggregationTraps=portsAggregationTraps, aggregatorL2UndersizePkts=aggregatorL2UndersizePkts, staticAggregationID=staticAggregationID, aggregatorL2Pkts256to511Octets=aggregatorL2Pkts256to511Octets, lagMemberRemove=lagMemberRemove, dynamicAggregationID=dynamicAggregationID, aggregatorL2MulticastPkts=aggregatorL2MulticastPkts, lagMemberAdd=lagMemberAdd, aggregatorL2Jabbers=aggregatorL2Jabbers, aggregationLacpSystemEnable=aggregationLacpSystemEnable, aggregatorPortsActive=aggregatorPortsActive, lagMemberLinkUp=lagMemberLinkUp, aggregatorL2OversizePkts=aggregatorL2OversizePkts, portsAggregationConfig=portsAggregationConfig, aggregationType=aggregationType, aggregatorL2Pkts64Octets=aggregatorL2Pkts64Octets, aggregatorL2Pkts128to255Octets=aggregatorL2Pkts128to255Octets, aggregationLacpPortKey=aggregationLacpPortKey, aggregatorL2Collisions=aggregatorL2Collisions, lagMemberLinkDown=lagMemberLinkDown, aggregatorL2Pkts=aggregatorL2Pkts, aggregatorL2CRCAlignErrors=aggregatorL2CRCAlignErrors, maxAggregatorId=maxAggregatorId, portsAggregationTable=portsAggregationTable, aggregatorL2Pkts65to127Octets=aggregatorL2Pkts65to127Octets, aggregatorL2Fragments=aggregatorL2Fragments, aggregatorPortsMembers=aggregatorPortsMembers, aggregatorL2Octets=aggregatorL2Octets, portsAggregationConfigTable=portsAggregationConfigTable, aggregatorType=aggregatorType, aggregatorId=aggregatorId, aggregatorL2DropEvents=aggregatorL2DropEvents, aggregatorIfIndex=aggregatorIfIndex, portsAggregationEntry=portsAggregationEntry, portsAggregationConfigEntry=portsAggregationConfigEntry)
