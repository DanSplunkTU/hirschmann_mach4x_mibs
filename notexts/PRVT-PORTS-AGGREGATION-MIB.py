#
# PySNMP MIB module PRVT-PORTS-AGGREGATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-PORTS-AGGREGATION-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 21:26:17 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifAdminStatus, ifOperStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifOperStatus", "ifIndex")
configL2IfaceUnit, configL2IfaceSlot, switch, configL2IfacePort = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "configL2IfaceUnit", "configL2IfaceSlot", "switch", "configL2IfacePort")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, Gauge32, ObjectIdentity, Integer32, iso, IpAddress, TimeTicks, Bits, Counter64, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Gauge32", "ObjectIdentity", "Integer32", "iso", "IpAddress", "TimeTicks", "Bits", "Counter64", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
prvtPortsAggregationMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 106))
prvtPortsAggregationMib.setRevisions(('2008-09-20 00:00', '2005-02-16 00:00', '2004-10-29 00:00', '2003-05-06 00:00', '2002-12-24 00:00', '2002-11-11 00:00',))
if mibBuilder.loadTexts: prvtPortsAggregationMib.setLastUpdated('200809200000Z')
if mibBuilder.loadTexts: prvtPortsAggregationMib.setOrganization('BATM Advanced Communication')
portsAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1))
portsAggregationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2))
portsAggregationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3))
maxAggregatorId = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAggregatorId.setStatus('current')
aggregationLacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpSystemPriority.setStatus('current')
portsAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3), )
if mibBuilder.loadTexts: portsAggregationTable.setStatus('current')
portsAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1), ).setIndexNames((0, "PRVT-PORTS-AGGREGATION-MIB", "aggregatorId"))
if mibBuilder.loadTexts: portsAggregationEntry.setStatus('current')
aggregatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: aggregatorId.setStatus('current')
aggregatorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorIfIndex.setStatus('current')
aggregatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticTrunk", 1), ("protocol-802-1ad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorType.setStatus('current')
aggregatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregatorName.setStatus('current')
aggregatorPortsMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorPortsMembers.setStatus('current')
aggregatorPortsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorPortsActive.setStatus('current')
aggregatorL2DropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2DropEvents.setStatus('current')
aggregatorL2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Octets.setStatus('current')
aggregatorL2Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts.setStatus('current')
aggregatorL2BroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2BroadcastPkts.setStatus('current')
aggregatorL2MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2MulticastPkts.setStatus('current')
aggregatorL2CRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2CRCAlignErrors.setStatus('current')
aggregatorL2UndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2UndersizePkts.setStatus('current')
aggregatorL2OversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2OversizePkts.setStatus('current')
aggregatorL2Fragments = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Fragments.setStatus('current')
aggregatorL2Jabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Jabbers.setStatus('current')
aggregatorL2Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Collisions.setStatus('current')
aggregatorL2Pkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts64Octets.setStatus('current')
aggregatorL2Pkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts65to127Octets.setStatus('current')
aggregatorL2Pkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts128to255Octets.setStatus('current')
aggregatorL2Pkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts256to511Octets.setStatus('current')
aggregatorL2Pkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts512to1023Octets.setStatus('current')
aggregatorL2Pkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregatorL2Pkts1024to1518Octets.setStatus('current')
aggregationLacpSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpSystemEnable.setStatus('current')
portsAggregationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1), )
if mibBuilder.loadTexts: portsAggregationConfigTable.setStatus('current')
portsAggregationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "configL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "configL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "configL2IfacePort"))
if mibBuilder.loadTexts: portsAggregationConfigEntry.setStatus('current')
staticAggregationID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAggregationID.setStatus('current')
dynamicAggregationID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicAggregationID.setStatus('current')
aggregationType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("static", 2), ("protocol-802-1adAcive", 3), ("protocol-802-1adPassive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationType.setStatus('current')
aggregationLacpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpPortPriority.setStatus('current')
aggregationLacpPortKey = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggregationLacpPortKey.setStatus('current')
lagMemberLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: lagMemberLinkUp.setStatus('current')
lagMemberLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: lagMemberLinkDown.setStatus('current')
lagMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lagMemberAdd.setStatus('current')
lagMemberRemove = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 106, 3, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lagMemberRemove.setStatus('current')
mibBuilder.exportSymbols("PRVT-PORTS-AGGREGATION-MIB", aggregatorPortsMembers=aggregatorPortsMembers, aggregatorType=aggregatorType, aggregatorL2Pkts512to1023Octets=aggregatorL2Pkts512to1023Octets, aggregatorL2Pkts128to255Octets=aggregatorL2Pkts128to255Octets, aggregatorL2Pkts1024to1518Octets=aggregatorL2Pkts1024to1518Octets, lagMemberLinkDown=lagMemberLinkDown, staticAggregationID=staticAggregationID, aggregatorName=aggregatorName, portsAggregationConfig=portsAggregationConfig, aggregationLacpPortPriority=aggregationLacpPortPriority, aggregatorL2BroadcastPkts=aggregatorL2BroadcastPkts, aggregationLacpSystemPriority=aggregationLacpSystemPriority, aggregatorL2Collisions=aggregatorL2Collisions, maxAggregatorId=maxAggregatorId, aggregatorL2CRCAlignErrors=aggregatorL2CRCAlignErrors, aggregatorL2Jabbers=aggregatorL2Jabbers, lagMemberAdd=lagMemberAdd, aggregatorIfIndex=aggregatorIfIndex, aggregatorId=aggregatorId, aggregatorL2Pkts64Octets=aggregatorL2Pkts64Octets, aggregationLacpSystemEnable=aggregationLacpSystemEnable, aggregationLacpPortKey=aggregationLacpPortKey, aggregatorPortsActive=aggregatorPortsActive, aggregatorL2MulticastPkts=aggregatorL2MulticastPkts, aggregatorL2Pkts65to127Octets=aggregatorL2Pkts65to127Octets, aggregatorL2Pkts=aggregatorL2Pkts, portsAggregationTable=portsAggregationTable, aggregatorL2Fragments=aggregatorL2Fragments, aggregatorL2Pkts256to511Octets=aggregatorL2Pkts256to511Octets, portsAggregationConfigTable=portsAggregationConfigTable, aggregationType=aggregationType, aggregatorL2DropEvents=aggregatorL2DropEvents, portsAggregationEntry=portsAggregationEntry, aggregatorL2OversizePkts=aggregatorL2OversizePkts, prvtPortsAggregationMib=prvtPortsAggregationMib, PYSNMP_MODULE_ID=prvtPortsAggregationMib, portsAggregationConfigEntry=portsAggregationConfigEntry, lagMemberLinkUp=lagMemberLinkUp, lagMemberRemove=lagMemberRemove, dynamicAggregationID=dynamicAggregationID, portsAggregationTraps=portsAggregationTraps, portsAggregation=portsAggregation, aggregatorL2Octets=aggregatorL2Octets, aggregatorL2UndersizePkts=aggregatorL2UndersizePkts)
