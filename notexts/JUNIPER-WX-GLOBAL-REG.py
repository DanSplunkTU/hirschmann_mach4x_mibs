#
# PySNMP MIB module JUNIPER-WX-GLOBAL-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/JUNIPER-WX-MIB
# Produced by pysmi-1.1.3 at Tue Nov 30 02:37:16 2021
# On host fv-az33-471 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Gauge32, MibIdentifier, iso, enterprises, TimeTicks, Unsigned32, NotificationType, Counter64, ModuleIdentity, Counter32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "MibIdentifier", "iso", "enterprises", "TimeTicks", "Unsigned32", "NotificationType", "Counter64", "ModuleIdentity", "Counter32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxWxGlobalRegModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 1))
jnxWxGlobalRegModule.setRevisions(('2007-11-17 10:00', '2007-11-17 10:00', '2007-11-14 01:30', '2006-06-08 18:00', '2005-05-09 10:12', '2004-03-15 14:00', '2003-06-26 20:00', '2001-07-29 22:00',))
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setLastUpdated('200107292200Z')
if mibBuilder.loadTexts: jnxWxGlobalRegModule.setOrganization('Juniper Networks, Inc')
juniperWxRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239))
if mibBuilder.loadTexts: juniperWxRoot.setStatus('current')
jnxWxReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1))
if mibBuilder.loadTexts: jnxWxReg.setStatus('current')
jnxWxModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1))
if mibBuilder.loadTexts: jnxWxModules.setStatus('current')
jnxWxMibs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2))
if mibBuilder.loadTexts: jnxWxMibs.setStatus('current')
jnxWxCaps = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 3))
if mibBuilder.loadTexts: jnxWxCaps.setStatus('current')
jnxWxReqs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 4))
if mibBuilder.loadTexts: jnxWxReqs.setStatus('current')
jnxWxExpr = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 5))
if mibBuilder.loadTexts: jnxWxExpr.setStatus('current')
jnxWxCommonMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1))
if mibBuilder.loadTexts: jnxWxCommonMib.setStatus('current')
jnxWxSpecificMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2))
if mibBuilder.loadTexts: jnxWxSpecificMib.setStatus('current')
jnxWxProduct = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2))
if mibBuilder.loadTexts: jnxWxProduct.setStatus('current')
jnxWxProductWx50 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 1))
if mibBuilder.loadTexts: jnxWxProductWx50.setStatus('current')
jnxWxProductWx55 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 2))
if mibBuilder.loadTexts: jnxWxProductWx55.setStatus('current')
jnxWxProductWx20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 3))
if mibBuilder.loadTexts: jnxWxProductWx20.setStatus('current')
jnxWxProductWx80 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 4))
if mibBuilder.loadTexts: jnxWxProductWx80.setStatus('current')
jnxWxProductWx100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 5))
if mibBuilder.loadTexts: jnxWxProductWx100.setStatus('current')
jnxWxProductWxc500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 6))
if mibBuilder.loadTexts: jnxWxProductWxc500.setStatus('current')
jnxWxProductWx15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 7))
if mibBuilder.loadTexts: jnxWxProductWx15.setStatus('current')
jnxWxProductWxc250 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 8))
if mibBuilder.loadTexts: jnxWxProductWxc250.setStatus('current')
jnxWxProductWx60 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 9))
if mibBuilder.loadTexts: jnxWxProductWx60.setStatus('current')
jnxWxProductWxc590 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 10))
if mibBuilder.loadTexts: jnxWxProductWxc590.setStatus('current')
jnxWxProductIsm200Wxc = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 11))
if mibBuilder.loadTexts: jnxWxProductIsm200Wxc.setStatus('current')
jnxWxProductWxc1800 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 12))
if mibBuilder.loadTexts: jnxWxProductWxc1800.setStatus('current')
jnxWxProductWxc2600 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 13))
if mibBuilder.loadTexts: jnxWxProductWxc2600.setStatus('current')
jnxWxProductWxc3400 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 2, 14))
if mibBuilder.loadTexts: jnxWxProductWxc3400.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-WX-GLOBAL-REG", jnxWxProductWx15=jnxWxProductWx15, jnxWxReqs=jnxWxReqs, jnxWxProductWxc250=jnxWxProductWxc250, jnxWxCommonMib=jnxWxCommonMib, PYSNMP_MODULE_ID=jnxWxGlobalRegModule, jnxWxCaps=jnxWxCaps, jnxWxProductWxc1800=jnxWxProductWxc1800, juniperWxRoot=juniperWxRoot, jnxWxProductWx50=jnxWxProductWx50, jnxWxProduct=jnxWxProduct, jnxWxProductIsm200Wxc=jnxWxProductIsm200Wxc, jnxWxProductWxc500=jnxWxProductWxc500, jnxWxMibs=jnxWxMibs, jnxWxProductWxc2600=jnxWxProductWxc2600, jnxWxProductWxc3400=jnxWxProductWxc3400, jnxWxProductWx80=jnxWxProductWx80, jnxWxGlobalRegModule=jnxWxGlobalRegModule, jnxWxSpecificMib=jnxWxSpecificMib, jnxWxProductWx60=jnxWxProductWx60, jnxWxExpr=jnxWxExpr, jnxWxProductWx100=jnxWxProductWx100, jnxWxProductWxc590=jnxWxProductWxc590, jnxWxProductWx55=jnxWxProductWx55, jnxWxModules=jnxWxModules, jnxWxProductWx20=jnxWxProductWx20, jnxWxReg=jnxWxReg)
