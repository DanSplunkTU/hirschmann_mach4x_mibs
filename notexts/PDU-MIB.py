#
# PySNMP MIB module PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/PDU-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 19:45:33 2021
# On host fv-az83-233 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
enterprises, Counter32, Gauge32, Unsigned32, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, Counter64, ObjectIdentity, ModuleIdentity, TimeTicks, Integer32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "Gauge32", "Unsigned32", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "Counter64", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Integer32", "MibIdentifier", "iso")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
eaton = ModuleIdentity((1, 3, 6, 1, 4, 1, 534))
eaton.setRevisions(('2008-03-14 00:00', '2007-02-14 00:00',))
if mibBuilder.loadTexts: eaton.setLastUpdated('200803140000Z')
if mibBuilder.loadTexts: eaton.setOrganization('Eaton Corporation')
product = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6))
pduagent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3))
unitReadings = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 1, 1)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroup"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
infoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 1)).setObjects(("PDU-MIB", "firmwareVersion"), ("PDU-MIB", "serialNumber"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "netmask"), ("PDU-MIB", "gateway"), ("PDU-MIB", "mac"), ("PDU-MIB", "hardwareRev"), ("PDU-MIB", "userName"), ("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "groupName"), ("PDU-MIB", "imageVersion"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"), ("PDU-MIB", "status"), ("PDU-MIB", "slaveIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroup = infoGroup.setStatus('current')
outletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 2)).setObjects(("PDU-MIB", "outletCount"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletOperationalState"), ("PDU-MIB", "outletCurrent"), ("PDU-MIB", "outletMaxCurrent"), ("PDU-MIB", "outletVoltage"), ("PDU-MIB", "outletActivePower"), ("PDU-MIB", "outletApparentPower"), ("PDU-MIB", "outletPowerFactor"), ("PDU-MIB", "outletCurrentUpperWarning"), ("PDU-MIB", "outletCurrentUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outletsGroup = outletsGroup.setStatus('current')
unitSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 4)).setObjects(("PDU-MIB", "unitCurrent"), ("PDU-MIB", "unitVoltage"), ("PDU-MIB", "unitActivePower"), ("PDU-MIB", "unitApparentPower"), ("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitCircuitBreak0State"), ("PDU-MIB", "unitCircuitBreak1State"), ("PDU-MIB", "unitCircuitBreak2State"), ("PDU-MIB", "unitCircuitBreak0Current"), ("PDU-MIB", "unitCircuitBreak1Current"), ("PDU-MIB", "unitCircuitBreak2Current"), ("PDU-MIB", "unitVoltageLowerWarning"), ("PDU-MIB", "unitVoltageUpperWarning"), ("PDU-MIB", "unitVoltageLowerCritical"), ("PDU-MIB", "unitVoltageUpperCritical"), ("PDU-MIB", "unitCurrentUpperWarning"), ("PDU-MIB", "unitCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroup = unitSensorsGroup.setStatus('current')
externalTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 6)).setObjects(("PDU-MIB", "tempSensorCount"), ("PDU-MIB", "tempSensorLabel"), ("PDU-MIB", "temperature"), ("PDU-MIB", "tempLowerWarning"), ("PDU-MIB", "tempUpperWarning"), ("PDU-MIB", "tempLowerCritical"), ("PDU-MIB", "tempUpperCritical"), ("PDU-MIB", "tempLowerWarningReset"), ("PDU-MIB", "tempUpperWarningReset"), ("PDU-MIB", "tempLowerCriticalReset"), ("PDU-MIB", "tempUpperCriticalReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalTemperatureGroup = externalTemperatureGroup.setStatus('current')
externalHumidityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 7)).setObjects(("PDU-MIB", "humiditySensorCount"), ("PDU-MIB", "humiditySensorLabel"), ("PDU-MIB", "humidity"), ("PDU-MIB", "humidityLowerWarning"), ("PDU-MIB", "humidityUpperWarning"), ("PDU-MIB", "humidityLowerCritical"), ("PDU-MIB", "humidityUpperCritical"), ("PDU-MIB", "humidityLowerWarningReset"), ("PDU-MIB", "humidityUpperWarningReset"), ("PDU-MIB", "humidityLowerCriticalReset"), ("PDU-MIB", "humidityUpperCriticalReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalHumidityGroup = externalHumidityGroup.setStatus('current')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 9)).setObjects(("PDU-MIB", "rebootStarted"), ("PDU-MIB", "rebootCompleted"), ("PDU-MIB", "userLogin"), ("PDU-MIB", "userLogout"), ("PDU-MIB", "userAuthenticationFailure"), ("PDU-MIB", "userSessionTimeout"), ("PDU-MIB", "userAdded"), ("PDU-MIB", "userModified"), ("PDU-MIB", "userDeleted"), ("PDU-MIB", "groupAdded"), ("PDU-MIB", "groupModified"), ("PDU-MIB", "groupDeleted"), ("PDU-MIB", "deviceUpdateStarted"), ("PDU-MIB", "userBlocked"), ("PDU-MIB", "powerControl"), ("PDU-MIB", "userPasswordChanged"), ("PDU-MIB", "passwordSettingsChanged"), ("PDU-MIB", "firmwareFileDiscarded"), ("PDU-MIB", "firmwareValidationFailed"), ("PDU-MIB", "securityViolation"), ("PDU-MIB", "logFileCleared"), ("PDU-MIB", "thresholdAlarm"), ("PDU-MIB", "outletGroupingConnectivityLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
class MilliAmps(TextualConvention, Unsigned32):
    status = 'current'

class MilliVolts(TextualConvention, Unsigned32):
    status = 'current'

class Watts(TextualConvention, Unsigned32):
    status = 'current'

class VoltAmps(TextualConvention, Unsigned32):
    status = 'current'

class DegreesCelsius(TextualConvention, Unsigned32):
    status = 'current'

class Hertz(TextualConvention, Unsigned32):
    status = 'current'

class RelativeHumidity(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class PowerFactorPercentage(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class SensorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 200, 201, 202, 203, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 500, 501, 502, 503, 504, 505, 550, 551, 552, 600, 601, 602))
    namedValues = NamedValues(("outletCurrent", 0), ("outletMaxCurrent", 1), ("outletVoltage", 2), ("outletActivePower", 3), ("outletApparentPower", 4), ("outletMaxActivePower", 5), ("outletAverageActivePower", 6), ("outletPowerFactor", 7), ("powerBranchVoltage", 200), ("powerBranchFrequency", 201), ("powerBranchTemperature", 202), ("powerBranchCurrent", 203), ("environmentalTemp1", 300), ("environmentalTemp2", 301), ("environmentalTemp3", 302), ("environmentalTemp4", 303), ("environmentalTemp5", 304), ("environmentalTemp6", 305), ("environmentalTemp7", 306), ("environmentalTemp8", 307), ("environmentalHumidity1", 400), ("environmentalHumidity2", 401), ("environmentalHumidity3", 402), ("environmentalHumidity4", 403), ("environmentalHumidity5", 404), ("environmentalHumidity6", 405), ("environmentalHumidity7", 406), ("environmentalHumidity8", 407), ("unitRmsCurrent", 500), ("unitMaxRmsCurrent", 501), ("unitVoltage", 502), ("unitCpuTemp", 503), ("unitActivePower", 504), ("unitApparentPower", 505), ("unitCircuitBreak0State", 550), ("unitCircuitBreak1State", 551), ("unitCircuitBreak2State", 552), ("unitCircuitBreak0Current", 600), ("unitCircuitBreak1Current", 601), ("unitCircuitBreak2Current", 602))

class SensorStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("unavailable", -1), ("ok", 0), ("belowLowerWarning", 1), ("aboveUpperWarning", 2), ("belowLowerCritical", 3), ("aboveUpperCritical", 4))

firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
mac = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
hardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRev.setStatus('current')
userName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectName.setStatus('current')
objectInstance = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectInstance.setStatus('current')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: targetUser.setStatus('current')
groupName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupName.setStatus('current')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
sensorDescr = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorDescr.setStatus('current')
thresholdDescr = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdDescr.setStatus('current')
thresholdSeverity = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdSeverity.setStatus('current')
thresholdEventType = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdEventType.setStatus('current')
status = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
slaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveIpAddress.setStatus('current')
outletCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIndex.setStatus('current')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
outletOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("error", -1), ("off", 0), ("on", 1), ("cycling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOperationalState.setStatus('current')
outletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrent.setStatus('current')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 6), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
outletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletActivePower.setStatus('current')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
outletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperWarning.setStatus('current')
outletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperCritical.setStatus('current')
unitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 1), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrent.setStatus('current')
unitVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 2), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitVoltage.setStatus('current')
unitActivePower = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitActivePower.setStatus('current')
unitApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 4), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitApparentPower.setStatus('current')
unitCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 5), DegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCpuTemp.setStatus('current')
unitCircuitBreak0State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak0State.setStatus('current')
unitCircuitBreak1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak1State.setStatus('current')
unitCircuitBreak2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak2State.setStatus('current')
unitCircuitBreak0Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 40), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak0Current.setStatus('current')
unitCircuitBreak1Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 41), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak1Current.setStatus('current')
unitCircuitBreak2Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 42), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak2Current.setStatus('current')
unitVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 60), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerWarning.setStatus('current')
unitVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 61), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerCritical.setStatus('current')
unitVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 62), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperWarning.setStatus('current')
unitVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 63), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperCritical.setStatus('current')
unitCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 70), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitCurrentUpperWarning.setStatus('current')
unitCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 71), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrentUpperCritical.setStatus('current')
unitTempLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 80), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerWarning.setStatus('current')
unitTempLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 81), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerCritical.setStatus('current')
unitTempUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 82), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperWarning.setStatus('current')
unitTempUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 83), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperCritical.setStatus('current')
tempSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorCount.setStatus('current')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('current')
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 3), DegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('current')
tempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 4), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarning.setStatus('current')
tempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 5), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarning.setStatus('current')
tempLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 6), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCritical.setStatus('current')
tempUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 7), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCritical.setStatus('current')
tempLowerWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 8), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarningReset.setStatus('current')
tempUpperWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 9), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarningReset.setStatus('current')
tempLowerCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 10), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCriticalReset.setStatus('current')
tempUpperCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 11), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCriticalReset.setStatus('current')
humiditySensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorCount.setStatus('current')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('current')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1), ).setIndexNames((0, "PDU-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('current')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('current')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('current')
humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 3), RelativeHumidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('current')
humidityLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 4), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarning.setStatus('current')
humidityUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 5), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarning.setStatus('current')
humidityLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 6), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCritical.setStatus('current')
humidityUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 7), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCritical.setStatus('current')
humidityLowerWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 8), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarningReset.setStatus('current')
humidityUpperWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 9), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarningReset.setStatus('current')
humidityLowerCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 10), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCriticalReset.setStatus('current')
humidityUpperCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 11), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCriticalReset.setStatus('current')
rebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 1)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: rebootStarted.setStatus('current')
rebootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 2)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"))
if mibBuilder.loadTexts: rebootCompleted.setStatus('current')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 3)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 4)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 5)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 8)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 11)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 12)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userModified.setStatus('current')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 13)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
groupAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 14)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupAdded.setStatus('current')
groupModified = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 15)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupModified.setStatus('current')
groupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 16)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupDeleted.setStatus('current')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 20)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "imageVersion"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 22)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 23)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletOperationalState"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 24)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 28)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "status"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
firmwareFileDiscarded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 36)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareFileDiscarded.setStatus('current')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 38)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 39)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 41)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
thresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 45)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"))
if mibBuilder.loadTexts: thresholdAlarm.setStatus('current')
outletGroupingConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 50)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "slaveIpAddress"))
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setStatus('current')
mibBuilder.exportSymbols("PDU-MIB", humidityLowerWarningReset=humidityLowerWarningReset, humidityUpperCriticalReset=humidityUpperCriticalReset, gateway=gateway, tempUpperWarning=tempUpperWarning, tempSensorTable=tempSensorTable, outletsGroup=outletsGroup, firmwareFileDiscarded=firmwareFileDiscarded, MilliVolts=MilliVolts, thresholdAlarm=thresholdAlarm, pdu=pdu, netmask=netmask, board=board, eaton=eaton, humidityLowerWarning=humidityLowerWarning, outletIndex=outletIndex, groupName=groupName, serialNumber=serialNumber, outletApparentPower=outletApparentPower, unitCircuitBreak1State=unitCircuitBreak1State, userSessionTimeout=userSessionTimeout, VoltAmps=VoltAmps, unitTempLowerCritical=unitTempLowerCritical, humiditySensorTable=humiditySensorTable, humiditySensorEntry=humiditySensorEntry, humiditySensorLabel=humiditySensorLabel, humidity=humidity, outletCurrent=outletCurrent, Hertz=Hertz, userDeleted=userDeleted, unitCircuitBreak0State=unitCircuitBreak0State, unitCurrentUpperCritical=unitCurrentUpperCritical, userBlocked=userBlocked, outletTable=outletTable, tempSensorIndex=tempSensorIndex, userPasswordChanged=userPasswordChanged, tempUpperCritical=tempUpperCritical, deviceUpdateStarted=deviceUpdateStarted, userAuthenticationFailure=userAuthenticationFailure, outletCurrentUpperWarning=outletCurrentUpperWarning, passwordSettingsChanged=passwordSettingsChanged, tempSensorEntry=tempSensorEntry, unitTempLowerWarning=unitTempLowerWarning, tempLowerWarningReset=tempLowerWarningReset, tempLowerWarning=tempLowerWarning, compliances=compliances, info=info, outletMaxCurrent=outletMaxCurrent, hardwareRev=hardwareRev, userName=userName, Watts=Watts, groupDeleted=groupDeleted, unitCircuitBreak1Current=unitCircuitBreak1Current, unitVoltageUpperCritical=unitVoltageUpperCritical, tempUpperCriticalReset=tempUpperCriticalReset, rebootStarted=rebootStarted, unitCircuitBreak2State=unitCircuitBreak2State, conformance=conformance, tempSensorLabel=tempSensorLabel, unitTempUpperWarning=unitTempUpperWarning, firmwareVersion=firmwareVersion, status=status, unitReadings=unitReadings, unitVoltageLowerWarning=unitVoltageLowerWarning, SensorTypeEnumeration=SensorTypeEnumeration, infoGroup=infoGroup, compliance=compliance, outletGroupingConnectivityLost=outletGroupingConnectivityLost, groupModified=groupModified, externalTemperatureGroup=externalTemperatureGroup, unitVoltage=unitVoltage, DegreesCelsius=DegreesCelsius, humidityLowerCritical=humidityLowerCritical, slaveIpAddress=slaveIpAddress, pduagent=pduagent, imageVersion=imageVersion, objectInstance=objectInstance, outletEntry=outletEntry, unitCircuitBreak2Current=unitCircuitBreak2Current, objectName=objectName, unitTempUpperCritical=unitTempUpperCritical, thresholdEventType=thresholdEventType, temperature=temperature, firmwareValidationFailed=firmwareValidationFailed, outletActivePower=outletActivePower, humidityLowerCriticalReset=humidityLowerCriticalReset, ipAddress=ipAddress, userLogout=userLogout, PYSNMP_MODULE_ID=eaton, unitSensorsGroup=unitSensorsGroup, userModified=userModified, thresholdSeverity=thresholdSeverity, powerControl=powerControl, humidityUpperWarningReset=humidityUpperWarningReset, product=product, thresholdDescr=thresholdDescr, userLogin=userLogin, unitVoltageUpperWarning=unitVoltageUpperWarning, securityViolation=securityViolation, humiditySensorIndex=humiditySensorIndex, unitCircuitBreak0Current=unitCircuitBreak0Current, traps=traps, externalHumidityGroup=externalHumidityGroup, unitCpuTemp=unitCpuTemp, MilliAmps=MilliAmps, environmental=environmental, sensorDescr=sensorDescr, outletLabel=outletLabel, outletOperationalState=outletOperationalState, tempLowerCritical=tempLowerCritical, tempUpperWarningReset=tempUpperWarningReset, outletCount=outletCount, humidityUpperCritical=humidityUpperCritical, unitActivePower=unitActivePower, unit=unit, unitVoltageLowerCritical=unitVoltageLowerCritical, humiditySensorCount=humiditySensorCount, SensorStateEnumeration=SensorStateEnumeration, tempLowerCriticalReset=tempLowerCriticalReset, outletPowerFactor=outletPowerFactor, rebootCompleted=rebootCompleted, mac=mac, groups=groups, RelativeHumidity=RelativeHumidity, unitCurrent=unitCurrent, outletCurrentUpperCritical=outletCurrentUpperCritical, targetUser=targetUser, humidityUpperWarning=humidityUpperWarning, outletVoltage=outletVoltage, unitCurrentUpperWarning=unitCurrentUpperWarning, userAdded=userAdded, groupAdded=groupAdded, unitApparentPower=unitApparentPower, trapsGroup=trapsGroup, tempSensorCount=tempSensorCount, logFileCleared=logFileCleared, PowerFactorPercentage=PowerFactorPercentage, outlets=outlets)
