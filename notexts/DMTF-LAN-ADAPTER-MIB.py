#
# PySNMP MIB module DMTF-LAN-ADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DMTF-LAN-ADAPTER-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 16:24:44 2022
# On host fv-az126-328 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
dmiEventAssociatedGroup, dmiEventSystem, dmiCompId, dmiEventStateKey, dmiEventSeverity, dmiEventDateTime, DmiString, dmiEventSubSystem = mibBuilder.importSymbols("DMTF-DMI-MIB", "dmiEventAssociatedGroup", "dmiEventSystem", "dmiCompId", "dmiEventStateKey", "dmiEventSeverity", "dmiEventDateTime", "DmiString", "dmiEventSubSystem")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, ModuleIdentity, enterprises, Gauge32, Counter32, Integer32, IpAddress, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "ModuleIdentity", "enterprises", "Gauge32", "Counter32", "Integer32", "IpAddress", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter64", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfLANAdapterMIF = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 2, 2))
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setOrganization('Desktop Management Task Force')
dmtf802AlternateAddressTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 2), )
if mibBuilder.loadTexts: dmtf802AlternateAddressTable.setStatus('current')
dmtf802AlternateAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "alternateAddressIndex"))
if mibBuilder.loadTexts: dmtf802AlternateAddressEntry.setStatus('current')
dmtf802AlternateAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtf802AlternateAddressState.setStatus('current')
alternateAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateAddressIndex.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
addressType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multicast", 1), ("functional", 2), ("group", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressType.setStatus('current')
alternateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateAddress.setStatus('current')
dmtfBootROMCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 6), )
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesTable.setStatus('current')
dmtfBootROMCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "capabilityIndex"))
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesEntry.setStatus('current')
dmtfBootROMCapabilitiesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesState.setStatus('current')
capabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityIndex.setStatus('current')
capabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityDescription.setStatus('current')
capabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityStatus.setStatus('current')
dmtfBootROMConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 5), )
if mibBuilder.loadTexts: dmtfBootROMConfigurationTable.setStatus('current')
dmtfBootROMConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfBootROMConfigurationEntry.setStatus('current')
bootROMDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 1), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootROMDescription.setStatus('current')
bootROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootROMVersion.setStatus('current')
remoteBootProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("rPL", 3), ("bootP", 4), ("dECMOP", 5), ("nativeNetWare", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteBootProtocolType.setStatus('current')
remoteBootProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteBootProtocolVersion.setStatus('current')
dmtfNetworkAdapter802PortTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 1), )
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortTable.setStatus('current')
dmtfNetworkAdapter802PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "portIndex"))
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortEntry.setStatus('current')
dmtfNetworkAdapter802PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortState.setStatus('current')
portIndex2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex2.setStatus('current')
permanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentNetworkAddress.setStatus('current')
currentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentNetworkAddress.setStatus('current')
connectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("aUI", 2), ("uTPCategory3", 3), ("uTPCategory4", 4), ("uTPCategory5", 5), ("bNC", 6), ("sTPRJ45", 7), ("sTPDB9", 8), ("fiberMIC", 9), ("appleAUI", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorType.setStatus('current')
dataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataRate.setStatus('current')
totalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 6), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsTransmitted.setStatus('current')
totalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 7), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesTransmitted.setStatus('current')
totalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 8), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsReceived.setStatus('current')
totalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 9), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesReceived.setStatus('current')
totalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 10), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTransmitErrors.setStatus('current')
totalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 11), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalReceiveErrors.setStatus('current')
totalHostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 12), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalHostErrors.setStatus('current')
totalWireErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 13), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalWireErrors.setStatus('current')
dmtfNetworkAdapterDriverTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 3), )
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverTable.setStatus('current')
dmtfNetworkAdapterDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "driverIndex"))
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverEntry.setStatus('current')
dmtfNetworkAdapterDriverState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverState.setStatus('current')
driverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIndex.setStatus('current')
driverSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareName.setStatus('current')
driverSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareVersion.setStatus('current')
driverSoftwareDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareDescription.setStatus('current')
driverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSize.setStatus('current')
driverInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("iPX", 2), ("oDI", 3), ("nDIS", 4), ("packetDriver", 5), ("lANtastic", 6), ("uNIX", 7), ("appletalk", 8), ("iBMLanSupportProgram", 9), ("lLC", 10), ("netbios", 11), ("pathworksDLL", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceType.setStatus('current')
driverInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceVersion.setStatus('current')
driverInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 8), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceDescription.setStatus('current')
dmtfNetworkAdapterHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 4), )
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareTable.setStatus('current')
dmtfNetworkAdapterHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareEntry.setStatus('current')
networkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("x10MbpsEthernet", 2), ("x100MbpsEthernet", 3), ("x10010MbpsEthernet", 4), ("x100MbpsVGAnyLAN", 5), ("x4MbpsTokenRing", 6), ("x16MbpsTokenRing", 7), ("x164MbpsTokenRing", 8), ("x2MbpsArcnet", 9), ("x20MbpsArcnet", 10), ("fDDI", 11), ("aTM", 12), ("appleTalk", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTopology.setStatus('current')
transmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmissionCapability.setStatus('current')
networkAdapterRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAdapterRAMSize.setStatus('current')
busType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("other", 1), ("iSA", 2), ("eISA", 3), ("mCA", 4), ("pCI", 5), ("vL", 6), ("pCMCIA", 7), ("parallel", 8), ("nEC98", 9), ("motherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busType.setStatus('current')
busWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitCard", 3), ("x16BitCard", 4), ("x32BitCard", 5), ("x64BitCard", 6), ("x128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busWidth.setStatus('current')
mibBuilder.exportSymbols("DMTF-LAN-ADAPTER-MIB", remoteBootProtocolVersion=remoteBootProtocolVersion, PYSNMP_MODULE_ID=dmtfLANAdapterMIF, transmissionCapability=transmissionCapability, busWidth=busWidth, dmtfNetworkAdapter802PortTable=dmtfNetworkAdapter802PortTable, dmtfDynOids=dmtfDynOids, totalBytesReceived=totalBytesReceived, driverIndex=driverIndex, driverSize=driverSize, dmtf=dmtf, dmtfNetworkAdapterDriverEntry=dmtfNetworkAdapterDriverEntry, dmtfLANAdapterMIF=dmtfLANAdapterMIF, driverInterfaceType=driverInterfaceType, dmtfBootROMCapabilitiesState=dmtfBootROMCapabilitiesState, dmtfBootROMConfigurationTable=dmtfBootROMConfigurationTable, DmiCounter=DmiCounter, totalReceiveErrors=totalReceiveErrors, driverSoftwareVersion=driverSoftwareVersion, busType=busType, connectorType=connectorType, addressType=addressType, dmtfStdMifs=dmtfStdMifs, dmtfNetworkAdapterHardwareTable=dmtfNetworkAdapterHardwareTable, driverSoftwareName=driverSoftwareName, DmiCompId=DmiCompId, dmtfBootROMConfigurationEntry=dmtfBootROMConfigurationEntry, totalWireErrors=totalWireErrors, dmtfNetworkAdapterHardwareEntry=dmtfNetworkAdapterHardwareEntry, totalPacketsTransmitted=totalPacketsTransmitted, driverInterfaceVersion=driverInterfaceVersion, totalTransmitErrors=totalTransmitErrors, portIndex=portIndex, alternateAddress=alternateAddress, totalPacketsReceived=totalPacketsReceived, driverSoftwareDescription=driverSoftwareDescription, networkTopology=networkTopology, DmiCounter64=DmiCounter64, DmiGauge=DmiGauge, capabilityIndex=capabilityIndex, remoteBootProtocolType=remoteBootProtocolType, permanentNetworkAddress=permanentNetworkAddress, DmiOctetstring=DmiOctetstring, networkAdapterRAMSize=networkAdapterRAMSize, currentNetworkAddress=currentNetworkAddress, capabilityStatus=capabilityStatus, dmtfNetworkAdapterDriverState=dmtfNetworkAdapterDriverState, alternateAddressIndex=alternateAddressIndex, DmiGroupId=DmiGroupId, dmtfBootROMCapabilitiesTable=dmtfBootROMCapabilitiesTable, dmtfNetworkAdapter802PortEntry=dmtfNetworkAdapter802PortEntry, dmtfNetworkAdapter802PortState=dmtfNetworkAdapter802PortState, dataRate=dataRate, dmtf802AlternateAddressEntry=dmtf802AlternateAddressEntry, dmtf802AlternateAddressTable=dmtf802AlternateAddressTable, bootROMVersion=bootROMVersion, capabilityDescription=capabilityDescription, dmtfBootROMCapabilitiesEntry=dmtfBootROMCapabilitiesEntry, driverInterfaceDescription=driverInterfaceDescription, totalHostErrors=totalHostErrors, portIndex2=portIndex2, dmtf802AlternateAddressState=dmtf802AlternateAddressState, bootROMDescription=bootROMDescription, dmtfNetworkAdapterDriverTable=dmtfNetworkAdapterDriverTable, DmiInteger=DmiInteger, totalBytesTransmitted=totalBytesTransmitted)
