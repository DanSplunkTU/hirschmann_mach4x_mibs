#
# PySNMP MIB module ALCATEL-IND1-PORT-MAPPING (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-PORT-MAPPING
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:27 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1PortMapping, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1PortMapping")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Counter64, Integer32, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, IpAddress, MibIdentifier, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Integer32", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "IpAddress", "MibIdentifier", "ObjectIdentity", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1PortMappingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1))
alcatelIND1PortMappingMIB.setRevisions(('2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1PortMappingMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1PortMappingMIB.setOrganization('Alcatel-Lucent')
alcatelIND1PortMappingMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1))
if mibBuilder.loadTexts: alcatelIND1PortMappingMIBObjects.setStatus('current')
portMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1))
portMappingSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1), )
if mibBuilder.loadTexts: portMappingSessionTable.setStatus('current')
pmapSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MAPPING", "pmapSessionNumber"))
if mibBuilder.loadTexts: pmapSessionEntry.setStatus('current')
pmapSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1))
if mibBuilder.loadTexts: pmapSessionNumber.setStatus('current')
pmapSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapSessionStatus.setStatus('current')
pmapSessionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("bi", 2))).clone('bi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapSessionDirection.setStatus('current')
pmapSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapSessionRowStatus.setStatus('current')
pmapSessionUnknownUnicastFloodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapSessionUnknownUnicastFloodStatus.setStatus('current')
pmapSessionDynProxyARP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapSessionDynProxyARP.setStatus('current')
portMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 2), )
if mibBuilder.loadTexts: portMappingTable.setStatus('current')
pmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MAPPING", "pmapSessionNumber"), (0, "ALCATEL-IND1-PORT-MAPPING", "pmapPortIfIndex"))
if mibBuilder.loadTexts: pmapEntry.setStatus('current')
pmapPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 2, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: pmapPortIfIndex.setStatus('current')
pmapPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('user')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapPortType.setStatus('current')
pmapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmapRowStatus.setStatus('current')
pmapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2))
pmapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2, 1))
pmapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2, 2))
pmapSessionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PORT-MAPPING", "pmapSessionStatus"), ("ALCATEL-IND1-PORT-MAPPING", "pmapSessionDirection"), ("ALCATEL-IND1-PORT-MAPPING", "pmapSessionRowStatus"), ("ALCATEL-IND1-PORT-MAPPING", "pmapSessionUnknownUnicastFloodStatus"), ("ALCATEL-IND1-PORT-MAPPING", "pmapSessionDynProxyARP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmapSessionTableGroup = pmapSessionTableGroup.setStatus('current')
pmapTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PORT-MAPPING", "pmapPortType"), ("ALCATEL-IND1-PORT-MAPPING", "pmapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmapTableGroup = pmapTableGroup.setStatus('current')
pmapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 33, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PORT-MAPPING", "pmapSessionTableGroup"), ("ALCATEL-IND1-PORT-MAPPING", "pmapTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pmapCompliance = pmapCompliance.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MAPPING", pmapEntry=pmapEntry, pmapSessionUnknownUnicastFloodStatus=pmapSessionUnknownUnicastFloodStatus, pmapSessionNumber=pmapSessionNumber, portMapping=portMapping, PYSNMP_MODULE_ID=alcatelIND1PortMappingMIB, pmapSessionEntry=pmapSessionEntry, pmapSessionTableGroup=pmapSessionTableGroup, portMappingSessionTable=portMappingSessionTable, pmapSessionDynProxyARP=pmapSessionDynProxyARP, portMappingTable=portMappingTable, pmapSessionRowStatus=pmapSessionRowStatus, pmapCompliance=pmapCompliance, pmapGroups=pmapGroups, pmapRowStatus=pmapRowStatus, pmapTableGroup=pmapTableGroup, pmapPortIfIndex=pmapPortIfIndex, alcatelIND1PortMappingMIBObjects=alcatelIND1PortMappingMIBObjects, pmapSessionDirection=pmapSessionDirection, pmapPortType=pmapPortType, pmapCompliances=pmapCompliances, alcatelIND1PortMappingMIB=alcatelIND1PortMappingMIB, pmapConformance=pmapConformance, pmapSessionStatus=pmapSessionStatus)
