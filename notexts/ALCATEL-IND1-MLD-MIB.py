#
# PySNMP MIB module ALCATEL-IND1-MLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-MLD-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:27 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Mld, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Mld")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, InetAddressType, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressIPv6")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, ObjectIdentity, Counter64, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, IpAddress, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1MldMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1))
alcatelIND1MldMIB.setRevisions(('2016-02-18 00:00', '2015-09-17 00:00', '2013-11-26 00:00', '2011-02-23 00:00', '2008-09-10 00:00', '2008-08-08 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1MldMIB.setLastUpdated('201509170000Z')
if mibBuilder.loadTexts: alcatelIND1MldMIB.setOrganization('Alcatel-Lucent')
alcatelIND1MldMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1))
alaMld = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1))
alaMldStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldStatus.setStatus('deprecated')
alaMldQuerying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerying.setStatus('deprecated')
alaMldSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSpoofing.setStatus('deprecated')
alaMldZapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZapping.setStatus('deprecated')
alaMldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 5), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVersion.setStatus('deprecated')
alaMldRobustness = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRobustness.setStatus('deprecated')
alaMldQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 7), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryInterval.setStatus('deprecated')
alaMldQueryResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 8), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryResponseInterval.setStatus('deprecated')
alaMldLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 9), Unsigned32().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldLastMemberQueryInterval.setStatus('deprecated')
alaMldRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 10), Unsigned32().clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRouterTimeout.setStatus('deprecated')
alaMldSourceTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 11), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSourceTimeout.setStatus('deprecated')
alaMldProxying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldProxying.setStatus('deprecated')
alaMldUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 13), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldUnsolicitedReportInterval.setStatus('deprecated')
alaMldQuerierForwarding = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerierForwarding.setStatus('deprecated')
alaMldMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupLimit.setStatus('deprecated')
alaMldMaxGroupExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupExceedAction.setStatus('deprecated')
alaMldFloodUnknown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldFloodUnknown.setStatus('deprecated')
alaMldHelperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 18), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddressType.setStatus('deprecated')
alaMldHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 19), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddress.setStatus('deprecated')
alaMldZeroBasedQuery = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZeroBasedQuery.setStatus('deprecated')
alaMldInitialPacketBuffer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldInitialPacketBuffer.setStatus('deprecated')
alaMldInitialPacketBufferMaxPacket = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 22), Unsigned32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldInitialPacketBufferMaxPacket.setStatus('deprecated')
alaMldInitialPacketBufferMaxFlow = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 23), Unsigned32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldInitialPacketBufferMaxFlow.setStatus('deprecated')
alaMldInitialPacketBufferTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 24), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldInitialPacketBufferTimeout.setStatus('deprecated')
alaMldInitialPacketBufferMinDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 25), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldInitialPacketBufferMinDelay.setStatus('deprecated')
alaMldVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2))
alaMldVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaMldVlanTable.setStatus('deprecated')
alaMldVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanIndex"))
if mibBuilder.loadTexts: alaMldVlanEntry.setStatus('deprecated')
alaMldVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanIndex.setStatus('deprecated')
alaMldVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanStatus.setStatus('deprecated')
alaMldVlanQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerying.setStatus('deprecated')
alaMldVlanSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSpoofing.setStatus('deprecated')
alaMldVlanZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZapping.setStatus('deprecated')
alaMldVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanVersion.setStatus('deprecated')
alaMldVlanRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRobustness.setStatus('deprecated')
alaMldVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryInterval.setStatus('deprecated')
alaMldVlanQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryResponseInterval.setStatus('deprecated')
alaMldVlanLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanLastMemberQueryInterval.setStatus('deprecated')
alaMldVlanRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRouterTimeout.setStatus('deprecated')
alaMldVlanSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSourceTimeout.setStatus('deprecated')
alaMldVlanProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanProxying.setStatus('deprecated')
alaMldVlanUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanUnsolicitedReportInterval.setStatus('deprecated')
alaMldVlanQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerierForwarding.setStatus('deprecated')
alaMldVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupLimit.setStatus('deprecated')
alaMldVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupExceedAction.setStatus('deprecated')
alaMldVlanZeroBasedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZeroBasedQuery.setStatus('deprecated')
alaMldMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3))
alaMldMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaMldMemberTable.setStatus('deprecated')
alaMldMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberSourceAddress"))
if mibBuilder.loadTexts: alaMldMemberEntry.setStatus('deprecated')
alaMldMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldMemberVlan.setStatus('deprecated')
alaMldMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldMemberIfIndex.setStatus('deprecated')
alaMldMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberGroupAddress.setStatus('deprecated')
alaMldMemberSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberSourceAddress.setStatus('deprecated')
alaMldMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberMode.setStatus('deprecated')
alaMldMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberCount.setStatus('deprecated')
alaMldMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberTimeout.setStatus('deprecated')
alaMldStaticMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4))
alaMldStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaMldStaticMemberTable.setStatus('deprecated')
alaMldStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroupAddress"))
if mibBuilder.loadTexts: alaMldStaticMemberEntry.setStatus('deprecated')
alaMldStaticMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticMemberVlan.setStatus('deprecated')
alaMldStaticMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticMemberIfIndex.setStatus('deprecated')
alaMldStaticMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldStaticMemberGroupAddress.setStatus('deprecated')
alaMldStaticMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticMemberRowStatus.setStatus('deprecated')
alaMldNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5))
alaMldNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaMldNeighborTable.setStatus('deprecated')
alaMldNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborHostAddress"))
if mibBuilder.loadTexts: alaMldNeighborEntry.setStatus('deprecated')
alaMldNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldNeighborVlan.setStatus('deprecated')
alaMldNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldNeighborIfIndex.setStatus('deprecated')
alaMldNeighborHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldNeighborHostAddress.setStatus('deprecated')
alaMldNeighborCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborCount.setStatus('deprecated')
alaMldNeighborTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborTimeout.setStatus('deprecated')
alaMldStaticNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6))
alaMldStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaMldStaticNeighborTable.setStatus('deprecated')
alaMldStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborIfIndex"))
if mibBuilder.loadTexts: alaMldStaticNeighborEntry.setStatus('deprecated')
alaMldStaticNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticNeighborVlan.setStatus('deprecated')
alaMldStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticNeighborIfIndex.setStatus('deprecated')
alaMldStaticNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticNeighborRowStatus.setStatus('deprecated')
alaMldQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7))
alaMldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaMldQuerierTable.setStatus('deprecated')
alaMldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierHostAddress"))
if mibBuilder.loadTexts: alaMldQuerierEntry.setStatus('deprecated')
alaMldQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldQuerierVlan.setStatus('deprecated')
alaMldQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldQuerierIfIndex.setStatus('deprecated')
alaMldQuerierHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldQuerierHostAddress.setStatus('deprecated')
alaMldQuerierCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierCount.setStatus('deprecated')
alaMldQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierTimeout.setStatus('deprecated')
alaMldStaticQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8))
alaMldStaticQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaMldStaticQuerierTable.setStatus('deprecated')
alaMldStaticQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierIfIndex"))
if mibBuilder.loadTexts: alaMldStaticQuerierEntry.setStatus('deprecated')
alaMldStaticQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticQuerierVlan.setStatus('deprecated')
alaMldStaticQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticQuerierIfIndex.setStatus('deprecated')
alaMldStaticQuerierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticQuerierRowStatus.setStatus('deprecated')
alaMldSource = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9))
alaMldSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaMldSourceTable.setStatus('deprecated')
alaMldSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceOrigAddress"))
if mibBuilder.loadTexts: alaMldSourceEntry.setStatus('deprecated')
alaMldSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldSourceVlan.setStatus('deprecated')
alaMldSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceIfIndex.setStatus('deprecated')
alaMldSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceGroupAddress.setStatus('deprecated')
alaMldSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceHostAddress.setStatus('deprecated')
alaMldSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceDestAddress.setStatus('deprecated')
alaMldSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceOrigAddress.setStatus('deprecated')
alaMldSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceType.setStatus('deprecated')
alaMldForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10))
alaMldForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaMldForwardTable.setStatus('deprecated')
alaMldForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextIfIndex"))
if mibBuilder.loadTexts: alaMldForwardEntry.setStatus('deprecated')
alaMldForwardVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardVlan.setStatus('deprecated')
alaMldForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardIfIndex.setStatus('deprecated')
alaMldForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardGroupAddress.setStatus('deprecated')
alaMldForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardHostAddress.setStatus('deprecated')
alaMldForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardDestAddress.setStatus('deprecated')
alaMldForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardOrigAddress.setStatus('deprecated')
alaMldForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardType.setStatus('deprecated')
alaMldForwardNextVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardNextVlan.setStatus('deprecated')
alaMldForwardNextIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 9), InterfaceIndex())
if mibBuilder.loadTexts: alaMldForwardNextIfIndex.setStatus('deprecated')
alaMldForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardNextType.setStatus('deprecated')
alaMldTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11))
alaMldTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaMldTunnelTable.setStatus('deprecated')
alaMldTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextDestAddress"))
if mibBuilder.loadTexts: alaMldTunnelEntry.setStatus('deprecated')
alaMldTunnelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldTunnelVlan.setStatus('deprecated')
alaMldTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelIfIndex.setStatus('deprecated')
alaMldTunnelGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelGroupAddress.setStatus('deprecated')
alaMldTunnelHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelHostAddress.setStatus('deprecated')
alaMldTunnelDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelDestAddress.setStatus('deprecated')
alaMldTunnelOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelOrigAddress.setStatus('deprecated')
alaMldTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelType.setStatus('deprecated')
alaMldTunnelNextDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 8), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelNextDestAddress.setStatus('deprecated')
alaMldTunnelNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelNextType.setStatus('deprecated')
alaMldPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12))
alaMldPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1), )
if mibBuilder.loadTexts: alaMldPortTable.setStatus('deprecated')
alaMldPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"))
if mibBuilder.loadTexts: alaMldPortEntry.setStatus('deprecated')
alaMldPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMldPortIfIndex.setStatus('deprecated')
alaMldPortMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupLimit.setStatus('deprecated')
alaMldPortMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupExceedAction.setStatus('deprecated')
alaMldPortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13))
alaMldPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1), )
if mibBuilder.loadTexts: alaMldPortVlanTable.setStatus('deprecated')
alaMldPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanId"))
if mibBuilder.loadTexts: alaMldPortVlanEntry.setStatus('deprecated')
alaMldVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanId.setStatus('deprecated')
alaMldPortVlanCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanCurrentGroupCount.setStatus('deprecated')
alaMldPortVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupLimit.setStatus('deprecated')
alaMldPortVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupExceedAction.setStatus('deprecated')
alcatelIND1MldMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2))
alcatelIND1MldMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1))
alaMldCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldCompliance = alaMldCompliance.setStatus('current')
alcatelIND1MldMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2))
alaMldGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldFloodUnknown"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddressType"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddress"), ("ALCATEL-IND1-MLD-MIB", "alaMldZeroBasedQuery"), ("ALCATEL-IND1-MLD-MIB", "alaMldInitialPacketBuffer"), ("ALCATEL-IND1-MLD-MIB", "alaMldInitialPacketBufferMaxPacket"), ("ALCATEL-IND1-MLD-MIB", "alaMldInitialPacketBufferMaxFlow"), ("ALCATEL-IND1-MLD-MIB", "alaMldInitialPacketBufferTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldInitialPacketBufferMinDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldGroup = alaMldGroup.setStatus('current')
alaMldVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldVlanStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldVlanGroup = alaMldVlanGroup.setStatus('current')
alaMldMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldMemberMode"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldMemberGroup = alaMldMemberGroup.setStatus('current')
alaMldStaticMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticMemberGroup = alaMldStaticMemberGroup.setStatus('current')
alaMldNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldNeighborCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldNeighborGroup = alaMldNeighborGroup.setStatus('current')
alaMldStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticNeighborGroup = alaMldStaticNeighborGroup.setStatus('current')
alaMldQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldQuerierCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldQuerierGroup = alaMldQuerierGroup.setStatus('current')
alaMldStaticQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticQuerierGroup = alaMldStaticQuerierGroup.setStatus('current')
alaMldSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldSourceIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldSourceGroup = alaMldSourceGroup.setStatus('current')
alaMldForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldForwardIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardType"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldForwardGroup = alaMldForwardGroup.setStatus('current')
alaMldTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldTunnelIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelType"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldTunnelGroup = alaMldTunnelGroup.setStatus('current')
alaMldPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortGroup = alaMldPortGroup.setStatus('current')
alaMldPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanCurrentGroupCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortVlanGroup = alaMldPortVlanGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-MLD-MIB", alaMldTunnel=alaMldTunnel, alaMldVersion=alaMldVersion, alaMldVlanMaxGroupExceedAction=alaMldVlanMaxGroupExceedAction, alaMldForward=alaMldForward, alaMldPortVlanCurrentGroupCount=alaMldPortVlanCurrentGroupCount, alaMldPortEntry=alaMldPortEntry, alaMldMemberSourceAddress=alaMldMemberSourceAddress, alaMldNeighborGroup=alaMldNeighborGroup, alaMldInitialPacketBufferMaxPacket=alaMldInitialPacketBufferMaxPacket, alaMldVlanTable=alaMldVlanTable, alaMldPortVlanGroup=alaMldPortVlanGroup, alaMldVlanProxying=alaMldVlanProxying, alaMldPortGroup=alaMldPortGroup, alaMldHelperAddressType=alaMldHelperAddressType, alaMldVlanGroup=alaMldVlanGroup, alaMldPortVlanTable=alaMldPortVlanTable, alaMldPortMaxGroupExceedAction=alaMldPortMaxGroupExceedAction, alaMldTunnelVlan=alaMldTunnelVlan, alaMldVlanSpoofing=alaMldVlanSpoofing, alaMldVlanLastMemberQueryInterval=alaMldVlanLastMemberQueryInterval, alaMldUnsolicitedReportInterval=alaMldUnsolicitedReportInterval, alaMldStaticNeighborEntry=alaMldStaticNeighborEntry, alaMldTunnelTable=alaMldTunnelTable, alaMldForwardTable=alaMldForwardTable, alaMldQuerierVlan=alaMldQuerierVlan, alaMldMemberEntry=alaMldMemberEntry, alaMldMemberMode=alaMldMemberMode, alaMldRobustness=alaMldRobustness, alaMldStaticMemberGroup=alaMldStaticMemberGroup, alaMldQuerierGroup=alaMldQuerierGroup, alaMldTunnelOrigAddress=alaMldTunnelOrigAddress, alaMldMemberCount=alaMldMemberCount, alaMldStaticNeighborGroup=alaMldStaticNeighborGroup, alaMldMemberTable=alaMldMemberTable, alaMldInitialPacketBuffer=alaMldInitialPacketBuffer, alaMldNeighborVlan=alaMldNeighborVlan, alaMldVlanUnsolicitedReportInterval=alaMldVlanUnsolicitedReportInterval, alaMldVlanQuerying=alaMldVlanQuerying, alaMldStaticQuerierTable=alaMldStaticQuerierTable, alaMldSpoofing=alaMldSpoofing, alaMldQuerierEntry=alaMldQuerierEntry, alaMldForwardDestAddress=alaMldForwardDestAddress, alaMldQuerierTable=alaMldQuerierTable, alaMldStaticNeighbor=alaMldStaticNeighbor, alaMldNeighborCount=alaMldNeighborCount, alaMldStaticQuerierRowStatus=alaMldStaticQuerierRowStatus, alaMldVlanIndex=alaMldVlanIndex, alaMldVlanVersion=alaMldVlanVersion, alaMldGroup=alaMldGroup, alaMldSourceHostAddress=alaMldSourceHostAddress, alaMldPortMaxGroupLimit=alaMldPortMaxGroupLimit, alcatelIND1MldMIBObjects=alcatelIND1MldMIBObjects, alaMldMember=alaMldMember, alaMldNeighborEntry=alaMldNeighborEntry, alaMldNeighborIfIndex=alaMldNeighborIfIndex, alaMldStaticQuerierEntry=alaMldStaticQuerierEntry, alaMldStaticNeighborTable=alaMldStaticNeighborTable, alaMldForwardVlan=alaMldForwardVlan, alaMldTunnelType=alaMldTunnelType, alaMldTunnelHostAddress=alaMldTunnelHostAddress, alaMldPortVlanEntry=alaMldPortVlanEntry, alaMldSource=alaMldSource, alaMldStaticNeighborIfIndex=alaMldStaticNeighborIfIndex, alaMldStaticMember=alaMldStaticMember, alaMldSourceDestAddress=alaMldSourceDestAddress, alaMldRouterTimeout=alaMldRouterTimeout, alaMldMemberIfIndex=alaMldMemberIfIndex, alaMldForwardNextIfIndex=alaMldForwardNextIfIndex, alaMldQuerierTimeout=alaMldQuerierTimeout, alaMldStaticNeighborVlan=alaMldStaticNeighborVlan, alaMldStatus=alaMldStatus, alaMldSourceGroup=alaMldSourceGroup, alaMldSourceVlan=alaMldSourceVlan, alaMldForwardNextType=alaMldForwardNextType, alaMldStaticQuerierGroup=alaMldStaticQuerierGroup, alaMldPortVlanMaxGroupLimit=alaMldPortVlanMaxGroupLimit, alaMldQuerierIfIndex=alaMldQuerierIfIndex, alaMldQueryInterval=alaMldQueryInterval, alaMldForwardHostAddress=alaMldForwardHostAddress, alaMldTunnelIfIndex=alaMldTunnelIfIndex, alaMldStaticMemberTable=alaMldStaticMemberTable, PYSNMP_MODULE_ID=alcatelIND1MldMIB, alaMldMemberVlan=alaMldMemberVlan, alaMldQuerierForwarding=alaMldQuerierForwarding, alaMldStaticNeighborRowStatus=alaMldStaticNeighborRowStatus, alaMldCompliance=alaMldCompliance, alaMldSourceOrigAddress=alaMldSourceOrigAddress, alaMldPort=alaMldPort, alaMldVlanSourceTimeout=alaMldVlanSourceTimeout, alaMldVlanId=alaMldVlanId, alcatelIND1MldMIBConformance=alcatelIND1MldMIBConformance, alaMldQueryResponseInterval=alaMldQueryResponseInterval, alaMldStaticMemberRowStatus=alaMldStaticMemberRowStatus, alaMldMemberGroupAddress=alaMldMemberGroupAddress, alaMldQuerierHostAddress=alaMldQuerierHostAddress, alaMldNeighbor=alaMldNeighbor, alaMldVlanStatus=alaMldVlanStatus, alaMldStaticMemberIfIndex=alaMldStaticMemberIfIndex, alaMldStaticQuerierVlan=alaMldStaticQuerierVlan, alaMldStaticMemberEntry=alaMldStaticMemberEntry, alcatelIND1MldMIBCompliances=alcatelIND1MldMIBCompliances, alaMldPortIfIndex=alaMldPortIfIndex, alaMldVlanZeroBasedQuery=alaMldVlanZeroBasedQuery, alaMld=alaMld, alaMldZapping=alaMldZapping, alaMldPortTable=alaMldPortTable, alaMldSourceTable=alaMldSourceTable, alaMldTunnelNextDestAddress=alaMldTunnelNextDestAddress, alaMldVlanRobustness=alaMldVlanRobustness, alaMldSourceType=alaMldSourceType, alaMldTunnelGroupAddress=alaMldTunnelGroupAddress, alaMldMaxGroupLimit=alaMldMaxGroupLimit, alaMldVlan=alaMldVlan, alaMldMaxGroupExceedAction=alaMldMaxGroupExceedAction, alaMldStaticQuerierIfIndex=alaMldStaticQuerierIfIndex, alaMldTunnelNextType=alaMldTunnelNextType, alaMldVlanQueryInterval=alaMldVlanQueryInterval, alaMldZeroBasedQuery=alaMldZeroBasedQuery, alaMldHelperAddress=alaMldHelperAddress, alaMldStaticQuerier=alaMldStaticQuerier, alcatelIND1MldMIBGroups=alcatelIND1MldMIBGroups, alaMldVlanZapping=alaMldVlanZapping, alaMldSourceGroupAddress=alaMldSourceGroupAddress, alaMldForwardIfIndex=alaMldForwardIfIndex, alaMldQuerier=alaMldQuerier, alaMldVlanQuerierForwarding=alaMldVlanQuerierForwarding, alaMldInitialPacketBufferMinDelay=alaMldInitialPacketBufferMinDelay, alaMldNeighborTable=alaMldNeighborTable, alaMldMemberGroup=alaMldMemberGroup, alaMldVlanEntry=alaMldVlanEntry, alaMldForwardGroup=alaMldForwardGroup, alaMldInitialPacketBufferTimeout=alaMldInitialPacketBufferTimeout, alaMldVlanRouterTimeout=alaMldVlanRouterTimeout, alaMldSourceIfIndex=alaMldSourceIfIndex, alaMldProxying=alaMldProxying, alaMldNeighborTimeout=alaMldNeighborTimeout, alaMldNeighborHostAddress=alaMldNeighborHostAddress, alaMldQuerierCount=alaMldQuerierCount, alaMldForwardOrigAddress=alaMldForwardOrigAddress, alaMldVlanQueryResponseInterval=alaMldVlanQueryResponseInterval, alaMldSourceEntry=alaMldSourceEntry, alaMldForwardType=alaMldForwardType, alaMldStaticMemberGroupAddress=alaMldStaticMemberGroupAddress, alaMldInitialPacketBufferMaxFlow=alaMldInitialPacketBufferMaxFlow, alaMldPortVlanMaxGroupExceedAction=alaMldPortVlanMaxGroupExceedAction, alaMldStaticMemberVlan=alaMldStaticMemberVlan, alaMldTunnelGroup=alaMldTunnelGroup, alaMldLastMemberQueryInterval=alaMldLastMemberQueryInterval, alaMldVlanMaxGroupLimit=alaMldVlanMaxGroupLimit, alaMldFloodUnknown=alaMldFloodUnknown, alaMldForwardEntry=alaMldForwardEntry, alaMldForwardNextVlan=alaMldForwardNextVlan, alaMldTunnelDestAddress=alaMldTunnelDestAddress, alaMldQuerying=alaMldQuerying, alaMldForwardGroupAddress=alaMldForwardGroupAddress, alaMldSourceTimeout=alaMldSourceTimeout, alaMldPortVlan=alaMldPortVlan, alaMldTunnelEntry=alaMldTunnelEntry, alcatelIND1MldMIB=alcatelIND1MldMIB, alaMldMemberTimeout=alaMldMemberTimeout)
