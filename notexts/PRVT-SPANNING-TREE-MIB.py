#
# PySNMP MIB module PRVT-SPANNING-TREE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SPANNING-TREE-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 19:59:15 2021
# On host fv-az83-233 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, MibIdentifier, Gauge32, ObjectIdentity, Counter32, TimeTicks, Counter64, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibIdentifier", "Gauge32", "ObjectIdentity", "Counter32", "TimeTicks", "Counter64", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Unsigned32")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
prvtSpanningTreeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 107))
prvtSpanningTreeMIB.setRevisions(('2010-04-06 00:00',))
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setLastUpdated('201004060000Z')
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setOrganization('BATM Advanced Communication')
class PrvtStInstIdTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class PrvtStInstIdExceptZeroTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 15)

class PrvtStPortIdTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PrvtStBridgeIdTC(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d.1x:1x:1x:1x:1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PrvtStLearnModeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("standard", 1), ("temporary-disabled", 2))

class PrvtStLinkTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("pointToPoint", 2), ("shared", 3))

class PrvtStPortRoleTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6))

class PrvtStPortStateTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forward", 1), ("block", 2), ("learn", 3))

class PrvtStPortPriorityTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), )
class PrvtStBridgePriorityTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(12288, 12288), ValueRangeConstraint(16384, 16384), ValueRangeConstraint(20480, 20480), ValueRangeConstraint(24576, 24576), ValueRangeConstraint(28672, 28672), ValueRangeConstraint(32768, 32768), ValueRangeConstraint(36864, 36864), ValueRangeConstraint(40960, 40960), ValueRangeConstraint(45056, 45056), ValueRangeConstraint(49152, 49152), ValueRangeConstraint(53248, 53248), ValueRangeConstraint(57344, 57344), ValueRangeConstraint(61440, 61440), )
prvtStNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0))
prvtStObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1))
prvtStCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1))
prvtStProviderBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1d", 0), ("dot1ad", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStProviderBridgeAddress.setStatus('current')
prvtStMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMaxAge.setStatus('current')
prvtStHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStHelloTime.setStatus('current')
prvtStForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStForwardDelay.setStatus('current')
prvtStPriority = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 5), PrvtStBridgePriorityTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStPriority.setStatus('current')
prvtStTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStTimeSinceTopologyChange.setStatus('current')
prvtStTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStTopChanges.setStatus('current')
prvtStPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8), )
if mibBuilder.loadTexts: prvtStPortTable.setStatus('current')
prvtStPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStPortIfName"))
if mibBuilder.loadTexts: prvtStPortEntry.setStatus('current')
prvtStPortIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortIfName.setStatus('current')
prvtStPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRowStatus.setStatus('current')
prvtStPortBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortBpduTx.setStatus('current')
prvtStPortBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortBpduRx.setStatus('current')
prvtStPortDetectBpduLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortDetectBpduLoss.setStatus('current')
prvtStPortCiscoCompliant = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortCiscoCompliant.setStatus('current')
prvtStPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortEdge.setStatus('current')
prvtStPortEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortEdgeStatus.setStatus('current')
prvtStPortEdgeFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortEdgeFlush.setStatus('current')
prvtStPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 10), PrvtStLinkTypeTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortLinkType.setStatus('current')
prvtStPortLinkTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 11), PrvtStLinkTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortLinkTypeStatus.setStatus('current')
prvtStPortRestrictedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRestrictedRoot.setStatus('current')
prvtStPortRestrictedTcn = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRestrictedTcn.setStatus('current')
prvtStPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortPathCost.setStatus('current')
prvtStPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 15), PrvtStPortPriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortPriority.setStatus('current')
prvtStPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortAdminStatus.setStatus('current')
prvtStPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 17), PrvtStPortStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortState.setStatus('current')
prvtStPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 18), PrvtStPortRoleTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortRole.setStatus('current')
prvtStPortDesPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesPCost.setStatus('current')
prvtStPortDesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesBridgeID.setStatus('current')
prvtStPortDesPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 21), PrvtStPortIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesPortID.setStatus('current')
prvtStTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStTxHoldCount.setStatus('current')
prvtStLearnMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 10), PrvtStLearnModeTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStLearnMode.setStatus('current')
prvtStStp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 2))
prvtStStpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStStpProtocolDisabled.setStatus('current')
prvtStRstp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 3))
prvtStRstpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStRstpProtocolDisabled.setStatus('current')
prvtStMstp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4))
prvtStMstpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpProtocolDisabled.setStatus('current')
prvtStMstpRegionName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpRegionName.setStatus('current')
prvtStMstpRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpRegionRevision.setStatus('current')
prvtStMstpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpMaxHops.setStatus('current')
prvtStMstpMigrationDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpMigrationDelay.setStatus('current')
prvtStMstpInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8), )
if mibBuilder.loadTexts: prvtStMstpInstTable.setStatus('current')
prvtStMstpInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpInstId"))
if mibBuilder.loadTexts: prvtStMstpInstEntry.setStatus('current')
prvtStMstpInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 1), PrvtStInstIdExceptZeroTC())
if mibBuilder.loadTexts: prvtStMstpInstId.setStatus('current')
prvtStMstpInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpInstRowStatus.setStatus('current')
prvtStMstpInstPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 3), PrvtStBridgePriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpInstPriority.setStatus('current')
prvtStMstpInstTimeSinceTopChng = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstTimeSinceTopChng.setStatus('current')
prvtStMstpInstTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstTopChanges.setStatus('current')
prvtStMstpInstStatTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9), )
if mibBuilder.loadTexts: prvtStMstpInstStatTable.setStatus('current')
prvtStMstpInstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpInstId"))
if mibBuilder.loadTexts: prvtStMstpInstStatEntry.setStatus('current')
prvtStMstpInstStatRRootID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstStatRRootID.setStatus('current')
prvtStMstpInstStatRemHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstStatRemHopCount.setStatus('current')
prvtStMstpVlanPerInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10), )
if mibBuilder.loadTexts: prvtStMstpVlanPerInstTable.setStatus('current')
prvtStMstpVlanPerInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpVlanPerInstVlanId"))
if mibBuilder.loadTexts: prvtStMstpVlanPerInstEntry.setStatus('current')
prvtStMstpVlanPerInstVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: prvtStMstpVlanPerInstVlanId.setStatus('current')
prvtStMstpVlanPerInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpVlanPerInstRowStatus.setStatus('current')
prvtStMstpVlanPerInstMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 3), PrvtStInstIdTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpVlanPerInstMstId.setStatus('current')
prvtStMstpInstPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12), )
if mibBuilder.loadTexts: prvtStMstpInstPortTable.setStatus('current')
prvtStMstpInstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStPortIfName"), (0, "PRVT-SPANNING-TREE-MIB", "prvtStMInstPortInstId"))
if mibBuilder.loadTexts: prvtStMstpInstPortEntry.setStatus('current')
prvtStMInstPortInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 2), PrvtStInstIdExceptZeroTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortInstId.setStatus('current')
prvtStMInstPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortRowStatus.setStatus('current')
prvtStMInstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortPathCost.setStatus('current')
prvtStMInstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 5), PrvtStPortPriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortPriority.setStatus('current')
prvtStMInstPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortAdminStatus.setStatus('current')
prvtStMInstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 7), PrvtStPortStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortState.setStatus('current')
prvtStMInstPortFwdTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortFwdTrans.setStatus('current')
prvtStMInstPortStatRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 9), PrvtStPortRoleTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortStatRole.setStatus('current')
prvtStMInstPortDesPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesPCost.setStatus('current')
prvtStMInstPortDesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesBridgeID.setStatus('current')
prvtStMInstPortDesPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 12), PrvtStPortIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesPortID.setStatus('current')
prvtStFRing = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5))
prvtStFRingProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStFRingProtocolDisabled.setStatus('current')
prvtStFRingPrefLink = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStFRingPrefLink.setStatus('current')
prvtStFRingInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3), )
if mibBuilder.loadTexts: prvtStFRingInstTable.setStatus('current')
prvtStFRingInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStFRingInstPort1"), (0, "PRVT-SPANNING-TREE-MIB", "prvtStFRingInstPort2"))
if mibBuilder.loadTexts: prvtStFRingInstEntry.setStatus('current')
prvtStFRingInstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtStFRingInstPort1.setStatus('current')
prvtStFRingInstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 2), OctetString())
if mibBuilder.loadTexts: prvtStFRingInstPort2.setStatus('current')
prvtStFRingInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStFRingInstRowStatus.setStatus('current')
stTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 1))
if mibBuilder.loadTexts: stTopologyChange.setStatus('current')
stNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 2))
if mibBuilder.loadTexts: stNewRoot.setStatus('current')
mstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 3)).setObjects(("PRVT-SPANNING-TREE-MIB", "prvtStMInstPortStatRole"), ("PRVT-SPANNING-TREE-MIB", "prvtStTimeSinceTopologyChange"))
if mibBuilder.loadTexts: mstTopologyChange.setStatus('current')
mstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 4)).setObjects(("PRVT-SPANNING-TREE-MIB", "prvtStMInstPortStatRole"))
if mibBuilder.loadTexts: mstNewRoot.setStatus('current')
mibBuilder.exportSymbols("PRVT-SPANNING-TREE-MIB", prvtStPortRowStatus=prvtStPortRowStatus, PrvtStPortStateTC=PrvtStPortStateTC, prvtStPortDesPortID=prvtStPortDesPortID, prvtStMInstPortPriority=prvtStMInstPortPriority, prvtStPortState=prvtStPortState, prvtStMstpVlanPerInstTable=prvtStMstpVlanPerInstTable, prvtStPortBpduTx=prvtStPortBpduTx, prvtStMInstPortDesBridgeID=prvtStMInstPortDesBridgeID, prvtStPortRole=prvtStPortRole, prvtStPortIfName=prvtStPortIfName, prvtStMstpInstStatRRootID=prvtStMstpInstStatRRootID, prvtStMstpProtocolDisabled=prvtStMstpProtocolDisabled, prvtStPortEdgeFlush=prvtStPortEdgeFlush, PrvtStBridgeIdTC=PrvtStBridgeIdTC, prvtStPortBpduRx=prvtStPortBpduRx, prvtStPortDesPCost=prvtStPortDesPCost, prvtStPortLinkTypeStatus=prvtStPortLinkTypeStatus, prvtStMInstPortState=prvtStMInstPortState, prvtStFRingInstPort2=prvtStFRingInstPort2, prvtStMstpInstTopChanges=prvtStMstpInstTopChanges, prvtStMstpInstPortEntry=prvtStMstpInstPortEntry, prvtStMaxAge=prvtStMaxAge, prvtStMstpVlanPerInstEntry=prvtStMstpVlanPerInstEntry, prvtStTxHoldCount=prvtStTxHoldCount, prvtSpanningTreeMIB=prvtSpanningTreeMIB, prvtStMstpInstRowStatus=prvtStMstpInstRowStatus, PrvtStPortIdTC=PrvtStPortIdTC, prvtStMstpInstEntry=prvtStMstpInstEntry, prvtStNotifications=prvtStNotifications, prvtStPortPriority=prvtStPortPriority, prvtStHelloTime=prvtStHelloTime, prvtStFRingProtocolDisabled=prvtStFRingProtocolDisabled, prvtStMstpMaxHops=prvtStMstpMaxHops, prvtStMstpVlanPerInstVlanId=prvtStMstpVlanPerInstVlanId, prvtStMInstPortPathCost=prvtStMInstPortPathCost, prvtStPriority=prvtStPriority, prvtStPortCiscoCompliant=prvtStPortCiscoCompliant, prvtStCommon=prvtStCommon, prvtStProviderBridgeAddress=prvtStProviderBridgeAddress, stNewRoot=stNewRoot, PrvtStLearnModeTC=PrvtStLearnModeTC, prvtStMstpVlanPerInstRowStatus=prvtStMstpVlanPerInstRowStatus, mstTopologyChange=mstTopologyChange, prvtStMInstPortAdminStatus=prvtStMInstPortAdminStatus, prvtStTimeSinceTopologyChange=prvtStTimeSinceTopologyChange, prvtStMInstPortDesPortID=prvtStMInstPortDesPortID, prvtStPortTable=prvtStPortTable, prvtStMInstPortInstId=prvtStMInstPortInstId, prvtStPortRestrictedTcn=prvtStPortRestrictedTcn, prvtStMstpInstId=prvtStMstpInstId, prvtStMstpInstTable=prvtStMstpInstTable, prvtStFRing=prvtStFRing, prvtStMInstPortRowStatus=prvtStMInstPortRowStatus, prvtStStpProtocolDisabled=prvtStStpProtocolDisabled, prvtStPortEdge=prvtStPortEdge, prvtStMstpInstStatTable=prvtStMstpInstStatTable, stTopologyChange=stTopologyChange, prvtStPortDetectBpduLoss=prvtStPortDetectBpduLoss, prvtStMstpMigrationDelay=prvtStMstpMigrationDelay, prvtStForwardDelay=prvtStForwardDelay, prvtStMstpVlanPerInstMstId=prvtStMstpVlanPerInstMstId, prvtStMstpInstPortTable=prvtStMstpInstPortTable, prvtStFRingInstRowStatus=prvtStFRingInstRowStatus, prvtStPortEntry=prvtStPortEntry, mstNewRoot=mstNewRoot, PrvtStInstIdTC=PrvtStInstIdTC, PrvtStBridgePriorityTC=PrvtStBridgePriorityTC, prvtStMstpInstPriority=prvtStMstpInstPriority, prvtStMstpInstStatEntry=prvtStMstpInstStatEntry, prvtStFRingPrefLink=prvtStFRingPrefLink, prvtStMstpInstTimeSinceTopChng=prvtStMstpInstTimeSinceTopChng, prvtStMInstPortFwdTrans=prvtStMInstPortFwdTrans, prvtStPortAdminStatus=prvtStPortAdminStatus, prvtStPortRestrictedRoot=prvtStPortRestrictedRoot, prvtStPortDesBridgeID=prvtStPortDesBridgeID, prvtStMstp=prvtStMstp, prvtStRstpProtocolDisabled=prvtStRstpProtocolDisabled, prvtStStp=prvtStStp, prvtStMInstPortStatRole=prvtStMInstPortStatRole, prvtStMstpRegionName=prvtStMstpRegionName, PrvtStPortPriorityTC=PrvtStPortPriorityTC, prvtStLearnMode=prvtStLearnMode, prvtStMInstPortDesPCost=prvtStMInstPortDesPCost, prvtStPortLinkType=prvtStPortLinkType, prvtStTopChanges=prvtStTopChanges, prvtStPortEdgeStatus=prvtStPortEdgeStatus, prvtStPortPathCost=prvtStPortPathCost, PrvtStInstIdExceptZeroTC=PrvtStInstIdExceptZeroTC, PrvtStPortRoleTC=PrvtStPortRoleTC, PYSNMP_MODULE_ID=prvtSpanningTreeMIB, prvtStFRingInstEntry=prvtStFRingInstEntry, prvtStFRingInstTable=prvtStFRingInstTable, prvtStMstpRegionRevision=prvtStMstpRegionRevision, prvtStObjects=prvtStObjects, prvtStRstp=prvtStRstp, prvtStFRingInstPort1=prvtStFRingInstPort1, prvtStMstpInstStatRemHopCount=prvtStMstpInstStatRemHopCount, PrvtStLinkTypeTC=PrvtStLinkTypeTC)
