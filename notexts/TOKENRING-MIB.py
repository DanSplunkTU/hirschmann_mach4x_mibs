#
# PySNMP MIB module TOKENRING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/TOKENRING-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 04:27:40 2022
# On host fv-az83-73 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, transmission, NotificationType, Integer32, ModuleIdentity, Counter32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "transmission", "NotificationType", "Integer32", "ModuleIdentity", "Counter32", "Counter64", "IpAddress")
MacAddress, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TimeStamp")
dot5 = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 9))
if mibBuilder.loadTexts: dot5.setLastUpdated('9410231150Z')
if mibBuilder.loadTexts: dot5.setOrganization('IETF Interfaces MIB Working Group')
dot5Table = MibTable((1, 3, 6, 1, 2, 1, 10, 9, 1), )
if mibBuilder.loadTexts: dot5Table.setStatus('current')
dot5Entry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 9, 1, 1), ).setIndexNames((0, "TOKENRING-MIB", "dot5IfIndex"))
if mibBuilder.loadTexts: dot5Entry.setStatus('current')
dot5IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5IfIndex.setStatus('current')
dot5Commands = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("open", 2), ("reset", 3), ("close", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5Commands.setStatus('current')
dot5RingStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingStatus.setStatus('current')
dot5RingState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingState.setStatus('current')
dot5RingOpenStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMAC", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingOpenStatus.setStatus('current')
dot5RingSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5RingSpeed.setStatus('current')
dot5UpStream = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5UpStream.setStatus('current')
dot5ActMonParticipate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5ActMonParticipate.setStatus('current')
dot5Functional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5Functional.setStatus('current')
dot5LastBeaconSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5LastBeaconSent.setStatus('current')
dot5StatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 9, 2), )
if mibBuilder.loadTexts: dot5StatsTable.setStatus('current')
dot5StatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 9, 2, 1), ).setIndexNames((0, "TOKENRING-MIB", "dot5StatsIfIndex"))
if mibBuilder.loadTexts: dot5StatsEntry.setStatus('current')
dot5StatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsIfIndex.setStatus('current')
dot5StatsLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLineErrors.setStatus('current')
dot5StatsBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsBurstErrors.setStatus('current')
dot5StatsACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsACErrors.setStatus('current')
dot5StatsAbortTransErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsAbortTransErrors.setStatus('current')
dot5StatsInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsInternalErrors.setStatus('current')
dot5StatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLostFrameErrors.setStatus('current')
dot5StatsReceiveCongestions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsReceiveCongestions.setStatus('current')
dot5StatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsFrameCopiedErrors.setStatus('current')
dot5StatsTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsTokenErrors.setStatus('current')
dot5StatsSoftErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSoftErrors.setStatus('current')
dot5StatsHardErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsHardErrors.setStatus('current')
dot5StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSignalLoss.setStatus('current')
dot5StatsTransmitBeacons = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsTransmitBeacons.setStatus('current')
dot5StatsRecoverys = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsRecoverys.setStatus('current')
dot5StatsLobeWires = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLobeWires.setStatus('current')
dot5StatsRemoves = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsRemoves.setStatus('current')
dot5StatsSingles = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSingles.setStatus('current')
dot5StatsFreqErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsFreqErrors.setStatus('current')
dot5TimerTable = MibTable((1, 3, 6, 1, 2, 1, 10, 9, 5), )
if mibBuilder.loadTexts: dot5TimerTable.setStatus('obsolete')
dot5TimerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 9, 5, 1), ).setIndexNames((0, "TOKENRING-MIB", "dot5TimerIfIndex"))
if mibBuilder.loadTexts: dot5TimerEntry.setStatus('obsolete')
dot5TimerIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerIfIndex.setStatus('obsolete')
dot5TimerReturnRepeat = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerReturnRepeat.setStatus('obsolete')
dot5TimerHolding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerHolding.setStatus('obsolete')
dot5TimerQueuePDU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerQueuePDU.setStatus('obsolete')
dot5TimerValidTransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerValidTransmit.setStatus('obsolete')
dot5TimerNoToken = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerNoToken.setStatus('obsolete')
dot5TimerActiveMon = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerActiveMon.setStatus('obsolete')
dot5TimerStandbyMon = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerStandbyMon.setStatus('obsolete')
dot5TimerErrorReport = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerErrorReport.setStatus('obsolete')
dot5TimerBeaconTransmit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerBeaconTransmit.setStatus('obsolete')
dot5TimerBeaconReceive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 9, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerBeaconReceive.setStatus('obsolete')
dot5Tests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 9, 3))
dot5TestInsertFunc = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 9, 3, 1))
if mibBuilder.loadTexts: dot5TestInsertFunc.setStatus('current')
dot5TestFullDuplexLoopBack = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 9, 3, 2))
if mibBuilder.loadTexts: dot5TestFullDuplexLoopBack.setStatus('current')
dot5ChipSets = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 9, 4))
dot5ChipSetIBM16 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 9, 4, 1))
if mibBuilder.loadTexts: dot5ChipSetIBM16.setStatus('current')
dot5ChipSetTItms380 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 9, 4, 2))
if mibBuilder.loadTexts: dot5ChipSetTItms380.setStatus('current')
dot5ChipSetTItms380c16 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 9, 4, 3))
if mibBuilder.loadTexts: dot5ChipSetTItms380c16.setStatus('current')
dot5Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 9, 6))
dot5Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 9, 6, 1))
dot5Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 9, 6, 2))
dot5Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 9, 6, 2, 1)).setObjects(("TOKENRING-MIB", "dot5StateGroup"), ("TOKENRING-MIB", "dot5StatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot5Compliance = dot5Compliance.setStatus('current')
dot5StateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 9, 6, 1, 1)).setObjects(("TOKENRING-MIB", "dot5Commands"), ("TOKENRING-MIB", "dot5RingStatus"), ("TOKENRING-MIB", "dot5RingState"), ("TOKENRING-MIB", "dot5RingOpenStatus"), ("TOKENRING-MIB", "dot5RingSpeed"), ("TOKENRING-MIB", "dot5UpStream"), ("TOKENRING-MIB", "dot5ActMonParticipate"), ("TOKENRING-MIB", "dot5Functional"), ("TOKENRING-MIB", "dot5LastBeaconSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot5StateGroup = dot5StateGroup.setStatus('current')
dot5StatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 9, 6, 1, 2)).setObjects(("TOKENRING-MIB", "dot5StatsLineErrors"), ("TOKENRING-MIB", "dot5StatsBurstErrors"), ("TOKENRING-MIB", "dot5StatsACErrors"), ("TOKENRING-MIB", "dot5StatsAbortTransErrors"), ("TOKENRING-MIB", "dot5StatsInternalErrors"), ("TOKENRING-MIB", "dot5StatsLostFrameErrors"), ("TOKENRING-MIB", "dot5StatsReceiveCongestions"), ("TOKENRING-MIB", "dot5StatsFrameCopiedErrors"), ("TOKENRING-MIB", "dot5StatsTokenErrors"), ("TOKENRING-MIB", "dot5StatsSoftErrors"), ("TOKENRING-MIB", "dot5StatsHardErrors"), ("TOKENRING-MIB", "dot5StatsSignalLoss"), ("TOKENRING-MIB", "dot5StatsTransmitBeacons"), ("TOKENRING-MIB", "dot5StatsRecoverys"), ("TOKENRING-MIB", "dot5StatsLobeWires"), ("TOKENRING-MIB", "dot5StatsRemoves"), ("TOKENRING-MIB", "dot5StatsSingles"), ("TOKENRING-MIB", "dot5StatsFreqErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot5StatsGroup = dot5StatsGroup.setStatus('current')
mibBuilder.exportSymbols("TOKENRING-MIB", dot5Conformance=dot5Conformance, dot5Functional=dot5Functional, dot5StatsLostFrameErrors=dot5StatsLostFrameErrors, dot5StatsTable=dot5StatsTable, dot5TimerErrorReport=dot5TimerErrorReport, dot5StatsInternalErrors=dot5StatsInternalErrors, dot5StatsTransmitBeacons=dot5StatsTransmitBeacons, dot5Compliance=dot5Compliance, dot5TimerTable=dot5TimerTable, dot5ChipSetIBM16=dot5ChipSetIBM16, dot5ChipSetTItms380c16=dot5ChipSetTItms380c16, dot5StatsLineErrors=dot5StatsLineErrors, dot5TimerIfIndex=dot5TimerIfIndex, dot5TimerStandbyMon=dot5TimerStandbyMon, dot5StatsHardErrors=dot5StatsHardErrors, dot5RingState=dot5RingState, dot5TimerQueuePDU=dot5TimerQueuePDU, dot5TimerActiveMon=dot5TimerActiveMon, dot5StatsGroup=dot5StatsGroup, dot5StateGroup=dot5StateGroup, dot5StatsReceiveCongestions=dot5StatsReceiveCongestions, dot5IfIndex=dot5IfIndex, dot5ActMonParticipate=dot5ActMonParticipate, dot5StatsSignalLoss=dot5StatsSignalLoss, dot5RingStatus=dot5RingStatus, dot5StatsTokenErrors=dot5StatsTokenErrors, dot5StatsRemoves=dot5StatsRemoves, dot5StatsBurstErrors=dot5StatsBurstErrors, dot5StatsAbortTransErrors=dot5StatsAbortTransErrors, dot5ChipSets=dot5ChipSets, dot5Groups=dot5Groups, dot5TimerNoToken=dot5TimerNoToken, dot5TestInsertFunc=dot5TestInsertFunc, dot5TimerHolding=dot5TimerHolding, dot5StatsFrameCopiedErrors=dot5StatsFrameCopiedErrors, dot5Compliances=dot5Compliances, dot5UpStream=dot5UpStream, dot5RingSpeed=dot5RingSpeed, dot5TimerBeaconTransmit=dot5TimerBeaconTransmit, dot5StatsACErrors=dot5StatsACErrors, dot5Commands=dot5Commands, dot5StatsEntry=dot5StatsEntry, dot5TimerReturnRepeat=dot5TimerReturnRepeat, dot5StatsSoftErrors=dot5StatsSoftErrors, dot5Entry=dot5Entry, dot5StatsSingles=dot5StatsSingles, dot5StatsLobeWires=dot5StatsLobeWires, dot5ChipSetTItms380=dot5ChipSetTItms380, dot5TimerEntry=dot5TimerEntry, dot5Table=dot5Table, dot5RingOpenStatus=dot5RingOpenStatus, dot5=dot5, PYSNMP_MODULE_ID=dot5, dot5StatsFreqErrors=dot5StatsFreqErrors, dot5StatsRecoverys=dot5StatsRecoverys, dot5TestFullDuplexLoopBack=dot5TestFullDuplexLoopBack, dot5TimerValidTransmit=dot5TimerValidTransmit, dot5Tests=dot5Tests, dot5TimerBeaconReceive=dot5TimerBeaconReceive, dot5LastBeaconSent=dot5LastBeaconSent, dot5StatsIfIndex=dot5StatsIfIndex)
