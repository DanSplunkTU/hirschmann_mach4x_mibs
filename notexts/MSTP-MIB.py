#
# PySNMP MIB module MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/MSTP-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:32:39 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
BridgeId, dot1dBridge, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "dot1dBridge", "Timeout")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, iso, Integer32, ObjectIdentity, IpAddress, Bits, MibIdentifier, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "iso", "Integer32", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "Counter64", "Unsigned32", "TimeTicks")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
mstpMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 17, 8))
mstpMib.setRevisions(('1904-12-05 00:00',))
if mibBuilder.loadTexts: mstpMib.setLastUpdated('0412050000Z')
if mibBuilder.loadTexts: mstpMib.setOrganization('IETF Bridge MIB Working Group')
mstpMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1))
dot1sStp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1))
dot1sStpName = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpName.setStatus('current')
dot1sStpRevision = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpRevision.setStatus('current')
dot1sStpEnable = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 3), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpEnable.setStatus('current')
dot1sStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeMaxAge.setStatus('current')
dot1sStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeHelloTime.setStatus('current')
dot1sStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeForwardDelay.setStatus('current')
dot1sStpBridgeMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeMaxHops.setStatus('current')
dot1sStpTxHoldCount = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpTxHoldCount.setStatus('current')
dot1sStpProtocolSpecification = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3), ("ieee8021w", 4), ("ieee8021s", 5))).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpProtocolSpecification.setStatus('current')
dot1sStpInstTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10), )
if mibBuilder.loadTexts: dot1sStpInstTable.setStatus('current')
dot1sStpInstEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpInstId"))
if mibBuilder.loadTexts: dot1sStpInstEntry.setStatus('current')
dot1sStpInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: dot1sStpInstId.setStatus('current')
dot1sStpPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPriority.setStatus('current')
dot1sStpInstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstTimeSinceTopologyChange.setStatus('current')
dot1sStpInstTopChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstTopChanges.setStatus('current')
dot1sStpInstDesignatedRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstDesignatedRoot.setStatus('current')
dot1sStpInstRootCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstRootCost.setStatus('current')
dot1sStpInstRootPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstRootPort.setStatus('current')
dot1sStpInstMaxAge = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstMaxAge.setStatus('current')
dot1sStpInstHelloTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstHelloTime.setStatus('current')
dot1sStpInstForwardDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstForwardDelay.setStatus('current')
dot1sStpInstAdminEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 11), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstAdminEnable.setStatus('current')
dot1sStpInstOperEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 12), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstOperEnable.setStatus('current')
dot1sStpPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11), )
if mibBuilder.loadTexts: dot1sStpPortTable.setStatus('current')
dot1sStpPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpPortEntry.setStatus('current')
dot1sStpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dot1sStpPort.setStatus('current')
dot1sStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortAdminEdgePort.setStatus('current')
dot1sStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortAdminPointToPoint.setStatus('current')
dot1sStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpPortOperEdgePort.setStatus('current')
dot1sStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpPortOperPointToPoint.setStatus('current')
dot1sStpPortExterPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortExterPathCost.setStatus('current')
dot1sStpVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp-mstp", 2))).clone('rstp-mstp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpVersion.setStatus('current')
dot1sStpInstPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12), )
if mibBuilder.loadTexts: dot1sStpInstPortTable.setStatus('current')
dot1sStpInstPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpInstId"), (0, "MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpInstPortEntry.setStatus('current')
dot1sStpInstPortPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortPriority.setStatus('current')
dot1sStpInstPortState = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortState.setStatus('current')
dot1sStpInstPortPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortPathCost.setStatus('current')
dot1sStpInstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedRoot.setStatus('current')
dot1sStpInstPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedCost.setStatus('current')
dot1sStpInstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedBridge.setStatus('current')
dot1sStpInstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedPort.setStatus('current')
dot1sStpInstPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortForwardTransitions.setStatus('current')
dot1sStpInstPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("master", 0), ("alternate-backup", 1), ("root", 2), ("designated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortRole.setStatus('current')
dot1sStpVlanTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13), )
if mibBuilder.loadTexts: dot1sStpVlanTable.setStatus('current')
dot1sStpVlanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpVlanIndex"))
if mibBuilder.loadTexts: dot1sStpVlanEntry.setStatus('current')
dot1sStpVlanIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dot1sStpVlanIndex.setStatus('current')
dot1sStpVlanInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpVlanInstId.setStatus('current')
dot1sStpPortSnoopingEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortSnoopingEnable.setStatus('current')
dot1sStpTrapTable = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14))
dot1sStpTrapEntry = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1))
dot1sStpInstNewRoot = NotificationType((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1, 1)).setObjects(("MSTP-MIB", "dot1sStpInstDesignatedRoot"))
if mibBuilder.loadTexts: dot1sStpInstNewRoot.setStatus('current')
dot1sStpInstPortForwarding = NotificationType((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1, 2)).setObjects(("MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpInstPortForwarding.setStatus('current')
mibBuilder.exportSymbols("MSTP-MIB", dot1sStpInstForwardDelay=dot1sStpInstForwardDelay, dot1sStpInstPortDesignatedRoot=dot1sStpInstPortDesignatedRoot, dot1sStpVlanTable=dot1sStpVlanTable, dot1sStpInstRootCost=dot1sStpInstRootCost, dot1sStpInstPortPriority=dot1sStpInstPortPriority, dot1sStpPortAdminEdgePort=dot1sStpPortAdminEdgePort, dot1sStpInstPortForwardTransitions=dot1sStpInstPortForwardTransitions, dot1sStpName=dot1sStpName, dot1sStpInstOperEnable=dot1sStpInstOperEnable, PYSNMP_MODULE_ID=mstpMib, dot1sStpInstPortDesignatedCost=dot1sStpInstPortDesignatedCost, dot1sStpPortAdminPointToPoint=dot1sStpPortAdminPointToPoint, dot1sStpBridgeForwardDelay=dot1sStpBridgeForwardDelay, dot1sStpBridgeMaxHops=dot1sStpBridgeMaxHops, dot1sStpInstAdminEnable=dot1sStpInstAdminEnable, dot1sStpPortTable=dot1sStpPortTable, dot1sStpEnable=dot1sStpEnable, dot1sStpInstTable=dot1sStpInstTable, dot1sStpPortExterPathCost=dot1sStpPortExterPathCost, dot1sStpInstPortTable=dot1sStpInstPortTable, dot1sStpInstPortPathCost=dot1sStpInstPortPathCost, dot1sStpRevision=dot1sStpRevision, dot1sStpTrapEntry=dot1sStpTrapEntry, dot1sStp=dot1sStp, dot1sStpPortOperPointToPoint=dot1sStpPortOperPointToPoint, dot1sStpInstHelloTime=dot1sStpInstHelloTime, dot1sStpVersion=dot1sStpVersion, dot1sStpInstPortDesignatedBridge=dot1sStpInstPortDesignatedBridge, dot1sStpInstPortRole=dot1sStpInstPortRole, dot1sStpInstPortEntry=dot1sStpInstPortEntry, dot1sStpVlanEntry=dot1sStpVlanEntry, dot1sStpPortOperEdgePort=dot1sStpPortOperEdgePort, dot1sStpInstEntry=dot1sStpInstEntry, dot1sStpProtocolSpecification=dot1sStpProtocolSpecification, dot1sStpTrapTable=dot1sStpTrapTable, dot1sStpBridgeHelloTime=dot1sStpBridgeHelloTime, dot1sStpBridgeMaxAge=dot1sStpBridgeMaxAge, dot1sStpVlanInstId=dot1sStpVlanInstId, dot1sStpInstId=dot1sStpInstId, dot1sStpInstMaxAge=dot1sStpInstMaxAge, dot1sStpInstPortDesignatedPort=dot1sStpInstPortDesignatedPort, dot1sStpInstNewRoot=dot1sStpInstNewRoot, dot1sStpPortEntry=dot1sStpPortEntry, dot1sStpPriority=dot1sStpPriority, dot1sStpPort=dot1sStpPort, dot1sStpInstPortState=dot1sStpInstPortState, dot1sStpPortSnoopingEnable=dot1sStpPortSnoopingEnable, dot1sStpInstTopChanges=dot1sStpInstTopChanges, dot1sStpVlanIndex=dot1sStpVlanIndex, dot1sStpTxHoldCount=dot1sStpTxHoldCount, mstpMib=mstpMib, mstpMIBObjects=mstpMIBObjects, dot1sStpInstDesignatedRoot=dot1sStpInstDesignatedRoot, dot1sStpInstRootPort=dot1sStpInstRootPort, dot1sStpInstPortForwarding=dot1sStpInstPortForwarding, dot1sStpInstTimeSinceTopologyChange=dot1sStpInstTimeSinceTopologyChange)
