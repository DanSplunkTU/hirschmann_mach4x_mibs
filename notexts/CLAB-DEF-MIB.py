#
# PySNMP MIB module CLAB-DEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/CLAB-DEF-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 05:10:45 2022
# On host fv-az77-149 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
DocsX509ASN1DEREncodedCertificate, = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsX509ASN1DEREncodedCertificate")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, IpAddress, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Gauge32, TimeTicks, Counter64, Bits, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Gauge32", "TimeTicks", "Counter64", "Bits", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cableLabs = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491))
cableLabs.setRevisions(('2017-04-13 00:00', '2016-07-28 00:00', '2016-03-16 00:00', '2012-08-09 00:00', '2011-02-10 00:00', '2009-08-11 00:00', '2008-03-06 00:00', '2007-01-19 17:00', '2005-04-08 17:00',))
if mibBuilder.loadTexts: cableLabs.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: cableLabs.setOrganization('Cable Television Laboratories, Inc.')
clabFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1))
clabFuncMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 1))
clabFuncProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 2))
clabProject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2))
clabProjDocsis = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1))
clabProjPacketCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2))
clabProjOpenCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 3))
clabProjCableHome = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4))
clabProjWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5))
clabSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3))
clabSecCertObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 1))
clabSecOlcaObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 2))
clabCommonMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4))
pktcSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 4))
pktcLawfulIntercept = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 5))
pktcEnhancements = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 6))
pktcPACMMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7))
pktcApplicationMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 8))
pktcSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9))
pktcEUEMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10))
pktcSMAMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 11))
pktcPACMTC = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 1))
pktcPACMUEMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 2))
pktcPACMUserMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 3))
pktcESSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1))
pktcEUEDeviceMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10, 1))
clabSrvcPrvdrRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 1), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabSrvcPrvdrRootCACert.setStatus('current')
clabCVCRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 2), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCRootCACert.setStatus('current')
clabCVCCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 3), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCCACert.setStatus('current')
clabMfgCVCCert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 4), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCVCCert.setStatus('current')
clabMfgCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 5), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCACert.setStatus('current')
clabUpsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 1))
clabTopoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 2))
clabGREMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 3))
clabMAPMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 4))
clabDNSMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 5))
clabGWMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6))
clabAniDevMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 7))
class DocsL2vpnIfList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("eCm", 0), ("cmci", 1), ("docsCableMacLayer", 2), ("docsCableDownstream", 3), ("docsCableUpstream", 4), ("eMta", 16), ("eStbIp", 17), ("eStbDsg", 18))

mibBuilder.exportSymbols("CLAB-DEF-MIB", pktcPACMMibs=pktcPACMMibs, pktcEUEMibs=pktcEUEMibs, clabGWMib=clabGWMib, pktcPACMUserMib=pktcPACMUserMib, clabSecOlcaObject=clabSecOlcaObject, clabMfgCVCCert=clabMfgCVCCert, clabFuncMib2=clabFuncMib2, pktcSMAMibs=pktcSMAMibs, cableLabs=cableLabs, clabMfgCACert=clabMfgCACert, clabSrvcPrvdrRootCACert=clabSrvcPrvdrRootCACert, clabUpsMib=clabUpsMib, pktcEnhancements=pktcEnhancements, clabDNSMib=clabDNSMib, clabProjCableHome=clabProjCableHome, clabProject=clabProject, clabSecurity=clabSecurity, clabGREMib=clabGREMib, clabProjOpenCable=clabProjOpenCable, clabProjPacketCable=clabProjPacketCable, clabCVCCACert=clabCVCCACert, clabAniDevMib=clabAniDevMib, clabFunction=clabFunction, pktcEUEDeviceMibs=pktcEUEDeviceMibs, clabCommonMibs=clabCommonMibs, pktcPACMUEMib=pktcPACMUEMib, pktcPACMTC=pktcPACMTC, pktcSecurity=pktcSecurity, clabProjDocsis=clabProjDocsis, PYSNMP_MODULE_ID=cableLabs, clabCVCRootCACert=clabCVCRootCACert, clabSecCertObject=clabSecCertObject, DocsL2vpnIfList=DocsL2vpnIfList, pktcApplicationMibs=pktcApplicationMibs, clabTopoMib=clabTopoMib, pktcESSupportMibs=pktcESSupportMibs, pktcLawfulIntercept=pktcLawfulIntercept, pktcSupportMibs=pktcSupportMibs, clabFuncProprietary=clabFuncProprietary, clabProjWireless=clabProjWireless, clabMAPMib=clabMAPMib)
