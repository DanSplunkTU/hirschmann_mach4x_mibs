#
# PySNMP MIB module CLAB-DEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/CLAB-DEF-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:15:14 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
DocsX509ASN1DEREncodedCertificate, = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsX509ASN1DEREncodedCertificate")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter32, ModuleIdentity, Bits, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, IpAddress, TimeTicks, NotificationType, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "ModuleIdentity", "Bits", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "IpAddress", "TimeTicks", "NotificationType", "Unsigned32", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cableLabs = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491))
cableLabs.setRevisions(('2017-04-13 00:00', '2016-07-28 00:00', '2016-03-16 00:00', '2012-08-09 00:00', '2011-02-10 00:00', '2009-08-11 00:00', '2008-03-06 00:00', '2007-01-19 17:00', '2005-04-08 17:00',))
if mibBuilder.loadTexts: cableLabs.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: cableLabs.setOrganization('Cable Television Laboratories, Inc.')
clabFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1))
clabFuncMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 1))
clabFuncProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 2))
clabProject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2))
clabProjDocsis = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1))
clabProjPacketCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2))
clabProjOpenCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 3))
clabProjCableHome = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4))
clabProjWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5))
clabSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3))
clabSecCertObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 1))
clabSecOlcaObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 2))
clabCommonMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4))
pktcSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 4))
pktcLawfulIntercept = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 5))
pktcEnhancements = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 6))
pktcPACMMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7))
pktcApplicationMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 8))
pktcSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9))
pktcEUEMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10))
pktcSMAMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 11))
pktcPACMTC = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 1))
pktcPACMUEMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 2))
pktcPACMUserMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 3))
pktcESSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1))
pktcEUEDeviceMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10, 1))
clabSrvcPrvdrRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 1), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabSrvcPrvdrRootCACert.setStatus('current')
clabCVCRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 2), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCRootCACert.setStatus('current')
clabCVCCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 3), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCCACert.setStatus('current')
clabMfgCVCCert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 4), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCVCCert.setStatus('current')
clabMfgCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 5), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCACert.setStatus('current')
clabUpsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 1))
clabTopoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 2))
clabGREMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 3))
clabMAPMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 4))
clabDNSMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 5))
clabGWMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6))
clabAniDevMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 7))
class DocsL2vpnIfList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("eCm", 0), ("cmci", 1), ("docsCableMacLayer", 2), ("docsCableDownstream", 3), ("docsCableUpstream", 4), ("eMta", 16), ("eStbIp", 17), ("eStbDsg", 18))

mibBuilder.exportSymbols("CLAB-DEF-MIB", pktcEUEMibs=pktcEUEMibs, pktcPACMTC=pktcPACMTC, clabUpsMib=clabUpsMib, clabFuncMib2=clabFuncMib2, pktcPACMUEMib=pktcPACMUEMib, clabProjCableHome=clabProjCableHome, pktcSMAMibs=pktcSMAMibs, pktcEUEDeviceMibs=pktcEUEDeviceMibs, clabAniDevMib=clabAniDevMib, clabFuncProprietary=clabFuncProprietary, pktcESSupportMibs=pktcESSupportMibs, clabCVCRootCACert=clabCVCRootCACert, pktcEnhancements=pktcEnhancements, PYSNMP_MODULE_ID=cableLabs, clabSecOlcaObject=clabSecOlcaObject, clabSrvcPrvdrRootCACert=clabSrvcPrvdrRootCACert, pktcSupportMibs=pktcSupportMibs, cableLabs=cableLabs, clabDNSMib=clabDNSMib, clabCVCCACert=clabCVCCACert, clabProjOpenCable=clabProjOpenCable, clabGREMib=clabGREMib, clabProject=clabProject, clabMAPMib=clabMAPMib, pktcLawfulIntercept=pktcLawfulIntercept, clabProjWireless=clabProjWireless, clabProjDocsis=clabProjDocsis, pktcSecurity=pktcSecurity, clabProjPacketCable=clabProjPacketCable, clabTopoMib=clabTopoMib, DocsL2vpnIfList=DocsL2vpnIfList, clabMfgCVCCert=clabMfgCVCCert, clabMfgCACert=clabMfgCACert, clabSecurity=clabSecurity, clabFunction=clabFunction, pktcPACMMibs=pktcPACMMibs, clabSecCertObject=clabSecCertObject, pktcPACMUserMib=pktcPACMUserMib, pktcApplicationMibs=pktcApplicationMibs, clabCommonMibs=clabCommonMibs, clabGWMib=clabGWMib)
