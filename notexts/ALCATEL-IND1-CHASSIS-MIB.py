#
# PySNMP MIB module ALCATEL-IND1-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-CHASSIS-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:55:51 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
hardentIND1Chassis, hardentIND1Physical = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1Chassis", "hardentIND1Physical")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, ObjectIdentity, IpAddress, NotificationType, Bits, MibIdentifier, Counter32, ModuleIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "Bits", "MibIdentifier", "Counter32", "ModuleIdentity", "TimeTicks", "iso")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
alcatelIND1ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1))
alcatelIND1ChassisMIB.setRevisions(('2014-09-02 00:00', '2011-10-31 00:00', '2011-10-14 00:00', '2011-08-05 00:00', '2011-03-23 00:00', '2010-05-13 00:00', '2007-06-18 00:00',))
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setLastUpdated('201103230000Z')
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
alcatelIND1ChassisMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBNotifications.setStatus('current')
alcatelIND1ChassisMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBObjects.setStatus('current')
alcatelIND1ChassisMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBConformance.setStatus('current')
alcatelIND1ChassisMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBGroups.setStatus('current')
alcatelIND1ChassisMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBCompliances.setStatus('current')
alcatelIND1ChassisPhysMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBObjects.setStatus('current')
alcatelIND1ChassisPhysMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBConformance.setStatus('current')
alcatelIND1ChassisPhysMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBGroups.setStatus('current')
alcatelIND1ChassisPhysMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBCompliances.setStatus('current')
class AlaChasBpsShelfId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class ChasTrapsBPSPowerSupply(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("bpsSysPower1", 1), ("bpsSysPower2", 2), ("bpsPoePower1", 3), ("bpsPoePower2", 4), ("bpsPoePower3", 5), ("notApplicable", 6))

class ChasTrapsBPSFetState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("on", 1), ("off", 2), ("notApplicable", 3))

class ChasTrapsBPSEventAlert(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bpsPsPlugged", 1), ("bpsPsUnPlugged", 2), ("bpsModeChanged", 3), ("notApplicable", 4))

class ChasTrapsBPSFwType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bpsFwCmcu", 1), ("bpsFwMmcu", 2), ("bpsFwCpld", 3), ("notApplicable", 4))

chasControlModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: chasControlModuleTable.setStatus('current')
chasControlModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasControlModuleEntry.setStatus('current')
chasControlActivateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlActivateTimeout.setStatus('current')
chasControlVersionMngt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSignificant", 1), ("certifySynchro", 2), ("certifyNoSynchro", 3), ("flashSynchro", 4), ("restore", 5), ("activate", 6), ("issu", 7), ("shutdown", 8), ("vcConvert", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlVersionMngt.setStatus('current')
chasControlDelayedActivateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31622400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedActivateTimer.setStatus('current')
chasControlCertifyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("needCertify", 2), ("certified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlCertifyStatus.setStatus('current')
chasControlSynchronizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoControlModule", 2), ("notSynchronized", 3), ("synchronized", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlSynchronizationStatus.setStatus('current')
chasControlAcrossCmmWorkingSynchroStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoCMM", 2), ("no", 3), ("yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlAcrossCmmWorkingSynchroStatus.setStatus('current')
chasControlAcrossCmmCertifiedSynchroStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoCMM", 2), ("no", 3), ("yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlAcrossCmmCertifiedSynchroStatus.setStatus('current')
chasControlNextRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlNextRunningVersion.setStatus('current')
chasControlCurrentRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlCurrentRunningVersion.setStatus('current')
chasControlWorkingVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlWorkingVersion.setStatus('current')
chasControlRedundancyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlRedundancyTime.setStatus('current')
chasControlEmpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEmpIpAddress.setStatus('deprecated')
chasControlEmpIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEmpIpMask.setStatus('deprecated')
chasControlChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlChassisId.setStatus('current')
chasControlRedundantTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: chasControlRedundantTable.setStatus('current')
chasControlRedundantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasControlRedundantEntry.setStatus('current')
chasControlNumberOfTakeover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlNumberOfTakeover.setStatus('current')
chasControlDelayedRebootTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31622400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedRebootTimer.setStatus('current')
chasControlDelayedResetAll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedResetAll.setStatus('current')
chasChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: chasChassisTable.setStatus('current')
chasChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasChassisEntry.setStatus('current')
chasFreeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFreeSlots.setStatus('current')
chasPowerLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerLeft.setStatus('current')
chasNumberOfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumberOfResets.setStatus('current')
chasTempRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notPresent", 2), ("underThreshold", 3), ("overFirstThreshold", 4), ("overDangerThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTempRange.setStatus('current')
chasTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTempThreshold.setStatus('current')
chasDangerTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasDangerTempThreshold.setStatus('current')
chasPrimaryPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPrimaryPhysicalIndex.setStatus('current')
chasCPMAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCPMAHardwareBoardTemp.setStatus('current')
chasCFMAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMAHardwareBoardTemp.setStatus('current')
chasCPMBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCPMBHardwareBoardTemp.setStatus('current')
chasCFMBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMBHardwareBoardTemp.setStatus('current')
chasCFMCHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMCHardwareBoardTemp.setStatus('current')
chasCFMDHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMDHardwareBoardTemp.setStatus('current')
chasFTAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFTAHardwareBoardTemp.setStatus('current')
chasFTBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFTBHardwareBoardTemp.setStatus('current')
chasNI1HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI1HardwareBoardTemp.setStatus('current')
chasNI2HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI2HardwareBoardTemp.setStatus('current')
chasNI3HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI3HardwareBoardTemp.setStatus('current')
chasNI4HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI4HardwareBoardTemp.setStatus('current')
chasNI5HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI5HardwareBoardTemp.setStatus('current')
chasNI6HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI6HardwareBoardTemp.setStatus('current')
chasNI7HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI7HardwareBoardTemp.setStatus('current')
chasNI8HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI8HardwareBoardTemp.setStatus('current')
chasPowerSupplyRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPowerSupplyRedundancy.setStatus('current')
chasPowerSupplyRedundancyReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPowerSupplyRedundancyReserve.setStatus('current')
chasEntPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: chasEntPhysicalTable.setStatus('current')
chasEntPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasEntPhysicalEntry.setStatus('current')
class ChasEntPhysLed(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("off", 1), ("greenOn", 2), ("greenBlink", 3), ("amberOn", 4), ("amberBlink", 5))

chasEntPhysAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("powerOff", 2), ("powerOn", 3), ("reset", 4), ("takeover", 5), ("resetAll", 6), ("standby", 7), ("resetWithFabric", 8), ("takeoverWithFabrc", 9), ("vcTakeover", 10), ("resetVcAll", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasEntPhysAdminStatus.setStatus('current')
chasEntPhysOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("secondary", 5), ("notPresent", 6), ("unpowered", 7), ("master", 8), ("idle", 9), ("pwrsave", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysOperStatus.setStatus('current')
chasEntPhysPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPower.setStatus('current')
chasEntPhysModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysModuleType.setStatus('current')
chasEntPhysPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPartNumber.setStatus('current')
chasEntPhysLedStatusOk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 6), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusOk1.setStatus('current')
chasEntPhysLedStatusOk2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 7), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusOk2.setStatus('current')
chasEntPhysLedStatusPrimaryCMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 8), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusPrimaryCMM.setStatus('current')
chasEntPhysLedStatusSecondaryCMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 9), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusSecondaryCMM.setStatus('current')
chasEntPhysLedStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 10), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusTemperature.setStatus('current')
chasEntPhysLedStatusFan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 11), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusFan.setStatus('current')
chasEntPhysLedStatusBackupPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 12), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusBackupPS.setStatus('current')
chasEntPhysLedStatusInternalPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 13), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusInternalPS.setStatus('current')
chasEntPhysLedStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 14), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusControl.setStatus('current')
chasEntPhysLedStatusFabric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 15), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusFabric.setStatus('current')
chasEntPhysLedStatusPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 16), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusPS.setStatus('current')
chasEntPhysAsic1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic1Rev.setStatus('current')
chasEntPhysAsic2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic2Rev.setStatus('current')
chasEntPhysAsic3Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic3Rev.setStatus('current')
chasEntPhysAsic4Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic4Rev.setStatus('current')
chasEntPhysAsic5Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic5Rev.setStatus('current')
chasEntPhysAsic6Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic6Rev.setStatus('current')
chasEntPhysCpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysCpldRev.setStatus('current')
chasEntPhysDaughterFpga1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysDaughterFpga1Rev.setStatus('current')
chasEntPhysDaughterFpga2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysDaughterFpga2Rev.setStatus('current')
chasEntPhysNiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysNiNum.setStatus('current')
chasEntPhysGbicNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysGbicNum.setStatus('current')
chasEntPhysWaveLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysWaveLen.setStatus('current')
chasEntPhysUbootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysUbootRev.setStatus('current')
chasEntPhysUbootMinibootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysUbootMinibootRev.setStatus('current')
chasEntPhysMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysMacAddress.setStatus('current')
chasEntPhysCpuModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysCpuModel.setStatus('current')
chasEntPhysAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("frontToRear", 0), ("rearToFront", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAirflow.setStatus('current')
chasEntPhysPowerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPowerUsed.setStatus('current')
chasEntPhysPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("ac", 1), ("dc", 2), ("bps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPowerType.setStatus('current')
chasEntTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: chasEntTemperatureTable.setStatus('current')
chasEntTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasEntTemperatureEntry.setStatus('current')
chasEntTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempCurrent.setStatus('current')
chasEntTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempThreshold.setStatus('current')
chasEntTempDangerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempDangerThreshold.setStatus('current')
chasEntTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notPresent", 2), ("underThreshold", 3), ("overFirstThreshold", 4), ("overDangerThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempStatus.setStatus('current')
chasSupervisionRfsLsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: chasSupervisionRfsLsTable.setStatus('current')
chasSupervisionRfsLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileIndex"))
if mibBuilder.loadTexts: chasSupervisionRfsLsEntry.setStatus('current')
chasSupervisionRfsLsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileIndex.setStatus('current')
chasSupervisionRfsLsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsSlot.setStatus('current')
chasSupervisionRfsLsDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsDirName.setStatus('current')
chasSupervisionRfsLsFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileName.setStatus('current')
chasSupervisionRfsLsFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("file", 1), ("directory", 2), ("undefined", 3), ("tarArchive", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileType.setStatus('current')
chasSupervisionRfsLsFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileSize.setStatus('current')
chasSupervisionRfsLsFileAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileAttr.setStatus('current')
chasSupervisionRfsLsFileDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileDateTime.setStatus('current')
chasSupervisionRfsDfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: chasSupervisionRfsDfTable.setStatus('current')
chasSupervisionRfsDfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfSlot"))
if mibBuilder.loadTexts: chasSupervisionRfsDfEntry.setStatus('current')
chasSupervisionRfsDfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionRfsDfSlot.setStatus('current')
chasSupervisionRfsDfFlashFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashFree.setStatus('current')
chasSupervisionRfsDfFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashSize.setStatus('current')
chasSupervisionRfsDfUsbFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 4), Unsigned32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbFree.setStatus('current')
chasSupervisionRfsDfUsbSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 5), Unsigned32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbSize.setStatus('current')
chasSupervisionFlashMemTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9), )
if mibBuilder.loadTexts: chasSupervisionFlashMemTable.setStatus('current')
chasSupervisionFlashMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionSlot"))
if mibBuilder.loadTexts: chasSupervisionFlashMemEntry.setStatus('current')
chasSupervisionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionSlot.setStatus('current')
chasSupervisionFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashSize.setStatus('current')
chasSupervisionFlashFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashFree.setStatus('current')
chasSupervisionFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashUsed.setStatus('current')
chasSupervisionCmmCertifiedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedTable.setStatus('current')
chasSupervisionCmmCertifiedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmNum"))
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedEntry.setStatus('current')
chasSupervisionCmmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionCmmNum.setStatus('current')
chasSupervisionCmmCertifiedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedStatus.setStatus('current')
alaChasEntPhysFanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: alaChasEntPhysFanTable.setStatus('current')
alaChasEntPhysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanLocalIndex"))
if mibBuilder.loadTexts: alaChasEntPhysFanEntry.setStatus('current')
alaChasEntPhysFanLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaChasEntPhysFanLocalIndex.setStatus('current')
alaChasEntPhysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noStatus", 0), ("notRunning", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanStatus.setStatus('current')
alaChasEntPhysFanAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("frontToRear", 0), ("rearToFront", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanAirflow.setStatus('current')
alaChasEntPhysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 4), Unsigned32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanSpeed.setStatus('current')
alcatelIND1ChassisSupervisionRfsCommands = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5))
if mibBuilder.loadTexts: alcatelIND1ChassisSupervisionRfsCommands.setStatus('current')
chasSupervisionRfsCommandsSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSlot.setStatus('current')
chasSupervisionRfsCommandsCommand = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSignificant", 0), ("rrm", 1), ("rcp", 2), ("rls", 3), ("rdf", 4), ("rget", 5), ("rput", 6), ("reserved", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsCommand.setStatus('current')
chasSupervisionRfsCommandsSrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSrcFileName.setStatus('current')
chasSupervisionRfsCommandsDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsDestFileName.setStatus('current')
chasSupervisionRfsCommandsRlsDirName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsDirName.setStatus('current')
chasSupervisionRfsCommandsRlsFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsFileName.setStatus('current')
chasSupervisionRfsCommandsProcessingState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inProgress", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsProcessingState.setStatus('current')
chasSupervisionRfsCommandsStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("success", 1), ("slotIsPrimary", 2), ("slotNotExist", 3), ("directoryNotExist", 4), ("fileNotExist", 5), ("maximumFilesExceed", 6), ("noDiskSpace", 7), ("systemBusy", 8), ("systemError", 9), ("directoryNotAllowToRemove", 10), ("permissionDenied", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsStatusCode.setStatus('current')
chasControlReloadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: chasControlReloadStatusTable.setStatus('current')
chasControlReloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadIndex"))
if mibBuilder.loadTexts: chasControlReloadEntry.setStatus('current')
chasControlReloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: chasControlReloadIndex.setStatus('current')
chasControlReloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reloadEnabled", 1), ("reloadDisabled", 2), ("noInterface", 3), ("unknown", 4))).clone('reloadDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlReloadStatus.setStatus('current')
chasGlobalControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7))
chasGlobalControlDelayedResetAll = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlDelayedResetAll.setStatus('current')
chasGlobalControlLongCommand = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("certifySynchro", 2), ("certifyNoSynchro", 3), ("flashSynchro", 4), ("restore", 5), ("reload", 6), ("rfs", 7), ("issu", 8), ("shutdown", 9), ("vcConvert", 10), ("macRelease", 11))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlLongCommand.setStatus('current')
chasGlobalControlLongCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completeSuccess", 3), ("completeFailure", 4), ("confirmationRequired", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlLongCommandStatus.setStatus('current')
chasGlobalControlUpdateFirmware = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("ubootCmm", 2), ("ubootNi", 3), ("ubootNiAll", 4), ("ubootCmmAll", 5), ("fpgaCmm", 6), ("fpgaNi", 7), ("fpgaNiDaughterBoard1", 8), ("fpgaNiDaughterBoard2", 9), ("fpgaCmmAll", 10), ("fpgaCmmPower", 11), ("fpgaNiPower", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateFirmware.setStatus('current')
chasGlobalControlUpdateSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateSlot.setStatus('current')
chasGlobalControlUpdateFilename = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateFilename.setStatus('current')
chasGlobalControlUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noUpdate", 1), ("updateInProgress", 2), ("updateSuccess", 3), ("updateFailed", 4))).clone('noUpdate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlUpdateStatus.setStatus('current')
chasGlobalControlConfirmOperation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlConfirmOperation.setStatus('current')
chasGlobalControlConfirmMessage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlConfirmMessage.setStatus('current')
alaChasBpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14))
alaChasBpsFwTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1), )
if mibBuilder.loadTexts: alaChasBpsFwTable.setStatus('current')
alaChasBpsFwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsFwEntry.setStatus('current')
alaChasBpsShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 1), AlaChasBpsShelfId())
if mibBuilder.loadTexts: alaChasBpsShelfId.setStatus('current')
alaChasBpsUpdateFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsUpdateFirmware.setStatus('current')
alaChasBpsCpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsCpldRev.setStatus('current')
alaChasBpsMmcuRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsMmcuRev.setStatus('current')
alaChasBpsCmcuRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsCmcuRev.setStatus('current')
alaChasBpsConnectorPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2), )
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityTable.setStatus('current')
alaChasBpsConnectorPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsChassisId"))
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityEntry.setStatus('current')
alaChasBpsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaChasBpsChassisId.setStatus('current')
alaChasBpsConnectorShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 2), AlaChasBpsShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsConnectorShelfId.setStatus('current')
alaChasBpsConnectorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsConnectorPriority.setStatus('current')
alaChasBpsConnectorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsConnectorNum.setStatus('current')
alaChasBpsSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSerialNum.setStatus('current')
alaChasBpsModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3), )
if mibBuilder.loadTexts: alaChasBpsModeTable.setStatus('current')
alaChasBpsModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsModeEntry.setStatus('current')
alaChasBpsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("full", 2), ("notApplicable", 3))).clone('single')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsMode.setStatus('current')
alaChasBpsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4), )
if mibBuilder.loadTexts: alaChasBpsPowerSupplyTable.setStatus('current')
alaChasBpsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyShelfId"), (0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyIndex"))
if mibBuilder.loadTexts: alaChasBpsPowerSupplyEntry.setStatus('current')
alaChasBpsPowerSupplyShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 1), AlaChasBpsShelfId())
if mibBuilder.loadTexts: alaChasBpsPowerSupplyShelfId.setStatus('current')
alaChasBpsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: alaChasBpsPowerSupplyIndex.setStatus('current')
alaChasBpsPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyName.setStatus('current')
alaChasBpsPowerSupplyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyDescr.setStatus('current')
alaChasBpsPowerSupplyModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyModuleType.setStatus('current')
alaChasBpsPowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPartNumber.setStatus('current')
alaChasBpsPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyHardwareRev.setStatus('current')
alaChasBpsPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplySerialNum.setStatus('current')
alaChasBpsPowerSupplyMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyMfgDate.setStatus('current')
alaChasBpsPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyOperStatus.setStatus('current')
alaChasBpsPowerSupplyPowerProv = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPowerProv.setStatus('current')
alaChasBpsTotalPowerAllocTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5), )
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocTable.setStatus('current')
alaChasBpsTotalPowerAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocEntry.setStatus('current')
alaChasBpsSysTotalAvailablePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSysTotalAvailablePower.setStatus('current')
alaChasBpsSysTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSysTotalAllocation.setStatus('current')
alaChasBpsPoeTotalAvailablePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPoeTotalAvailablePower.setStatus('current')
alaChasBpsPoeTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPoeTotalAllocation.setStatus('current')
chassisTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13))
class ChassisTrapsStrLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("strNotFatal", 1), ("strApplicationFatal", 2), ("strFatal", 3))

class ChassisTrapsStrAppID(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsStrSnapID(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsStrfileLineNb(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class ChassisTrapsStrErrorNb(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class ChassisTrapsStrdataInfo(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 63)

class ChassisTrapsObjectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassis", 1), ("ni", 2), ("powerSuply", 3), ("fan", 4), ("cmm", 5), ("fabric", 6), ("gbic", 7))

class ChassisTrapsObjectNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsAlertNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62))
    namedValues = NamedValues(("runningWorking", 1), ("runningCertified", 2), ("certifyStarted", 3), ("certifyFlashSyncStarted", 4), ("certifyCompleted", 5), ("certifyFailed", 6), ("synchroStarted", 7), ("synchroCompleted", 8), ("synchroFailed", 9), ("restoreStarted", 10), ("restoreCompleted", 11), ("restoreFailed", 12), ("takeoverStarted", 13), ("takeoverDeferred", 14), ("takeoverCompleted", 15), ("macAllocFailed", 16), ("macRangeFailed", 17), ("fanFailed", 18), ("fanOk", 19), ("fansOk", 20), ("tempOverThreshold", 21), ("tempUnderThreshold", 22), ("tempOverDangerThreshold", 23), ("powerMissing", 24), ("psNotOperational", 25), ("psOperational", 26), ("psAllOperational", 27), ("redundancyNotSupported", 28), ("redundancyDisabledCertifyNeeded", 29), ("cmmStartingAsPrimary", 30), ("cmmStartingAsSecondary", 31), ("cmmStartupCompleted", 32), ("cmmAPlugged", 33), ("cmmBPlugged", 34), ("cmmAUnPlugged", 35), ("cmmBUnPlugged", 36), ("lowNvramBattery", 37), ("notEnoughFabricsOperational", 38), ("simplexNoSynchro", 39), ("secAutoActivate", 40), ("secAutoCertifyStarted", 41), ("secAutoCertifyCompleted", 42), ("secInactiveReset", 43), ("activateScheduled", 44), ("activateStarted", 45), ("getAfileCompleted", 46), ("getAfileFailed", 47), ("sysUpdateStart", 48), ("sysUpdateInProgress", 49), ("sysUpdateError", 50), ("sysUpdateEnd", 51), ("reloadInProgress", 52), ("c20UpgradeOk", 53), ("c20UpgradeFailed", 54), ("c20RestoreOk", 55), ("c20RestoreFailed", 56), ("c20NiFailed", 57), ("airflowReverse", 58), ("tempSWHigh", 59), ("tempHWHigh", 60), ("tempDanger", 61), ("imageFileChecksumChanged", 62))

chassisTrapsStr = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrLevel"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrAppID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrSnapID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileLineNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrErrorNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrcomments"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrdataInfo"))
if mibBuilder.loadTexts: chassisTrapsStr.setStatus('current')
chassisTrapsAlert = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertDescr"))
if mibBuilder.loadTexts: chassisTrapsAlert.setStatus('current')
chassisTrapsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysOperStatus"))
if mibBuilder.loadTexts: chassisTrapsStateChange.setStatus('current')
chasTrapsBPSLessAllocSysPwr = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 4)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiRqstdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiGrantdBpsSysPower"))
if mibBuilder.loadTexts: chasTrapsBPSLessAllocSysPwr.setStatus('current')
chasTrapsBPSStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 5)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPowerSupply"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSEventAlert"))
if mibBuilder.loadTexts: chasTrapsBPSStateChange.setStatus('current')
chasTrapsNiBPSFETStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 6)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSSystemFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPoeFETChange"))
if mibBuilder.loadTexts: chasTrapsNiBPSFETStateChange.setStatus('current')
chasTrapsBPSFwUpgradeAlert = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 7)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwVersion"))
if mibBuilder.loadTexts: chasTrapsBPSFwUpgradeAlert.setStatus('current')
chassisTrapsStrLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 1), ChassisTrapsStrLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrLevel.setStatus('current')
chassisTrapsStrAppID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 2), ChassisTrapsStrAppID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrAppID.setStatus('current')
chassisTrapsStrSnapID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 3), ChassisTrapsStrSnapID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrSnapID.setStatus('current')
chassisTrapsStrfileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrfileName.setStatus('current')
chassisTrapsStrfileLineNb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 5), ChassisTrapsStrfileLineNb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrfileLineNb.setStatus('current')
chassisTrapsStrErrorNb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 6), ChassisTrapsStrErrorNb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrErrorNb.setStatus('current')
chassisTrapsStrcomments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrcomments.setStatus('current')
chassisTrapsStrdataInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 8), ChassisTrapsStrdataInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrdataInfo.setStatus('current')
chassisTrapsObjectType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 9), ChassisTrapsObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsObjectType.setStatus('current')
chassisTrapsObjectNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 10), ChassisTrapsObjectNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsObjectNumber.setStatus('current')
chassisTrapsAlertNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 11), ChassisTrapsAlertNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsAlertNumber.setStatus('current')
chassisTrapsAlertDescr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsAlertDescr.setStatus('current')
physicalIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 13), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIndex.setStatus('current')
chasTrapsNiRqstdBpsSysPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsNiRqstdBpsSysPower.setStatus('current')
chasTrapsNiGrantdBpsSysPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsNiGrantdBpsSysPower.setStatus('current')
chasTrapBPSShelfId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapBPSShelfId.setStatus('current')
chasTrapsBPSPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 17), ChasTrapsBPSPowerSupply()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSPowerSupply.setStatus('current')
chasTrapsBPSEventAlert = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 18), ChasTrapsBPSEventAlert()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSEventAlert.setStatus('current')
chasTrapsBPSSystemFETChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 19), ChasTrapsBPSFetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSSystemFETChange.setStatus('current')
chasTrapsBPSPoeFETChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 20), ChasTrapsBPSFetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSPoeFETChange.setStatus('current')
chasTrapsBPSFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSFwVersion.setStatus('current')
chasTrapsBPSFwType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 22), ChasTrapsBPSFwType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSFwType.setStatus('current')
alcatelIND1ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlModuleGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlRedundantGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasChassisGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadStatusGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisNotificationGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasNotificationObjectGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisSupervisionRfsCommandsGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmCertifiedEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashMemEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsFwGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorPriorityGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsModeGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsTotalPowerAllocGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ChassisMIBCompliance = alcatelIND1ChassisMIBCompliance.setStatus('current')
alcatelIND1ChassisPhysMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysicalGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisPhysNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ChassisPhysMIBCompliance = alcatelIND1ChassisPhysMIBCompliance.setStatus('current')
chasControlModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlActivateTimeout"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlVersionMngt"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedActivateTimer"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlCertifyStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlSynchronizationStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlAcrossCmmWorkingSynchroStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlAcrossCmmCertifiedSynchroStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlNextRunningVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlCurrentRunningVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlWorkingVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlRedundancyTime"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlEmpIpAddress"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlEmpIpMask"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlChassisId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlModuleGroup = chasControlModuleGroup.setStatus('current')
chasControlRedundantGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlNumberOfTakeover"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedRebootTimer"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedResetAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlRedundantGroup = chasControlRedundantGroup.setStatus('current')
chasChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasFreeSlots"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerLeft"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNumberOfResets"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTempRange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTempThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasDangerTempThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPrimaryPhysicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCPMAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCPMBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMCHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMDHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasFTAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasFTBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI1HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI2HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI3HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI4HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI5HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI6HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI7HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI8HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerSupplyRedundancy"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerSupplyRedundancyReserve"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasChassisGroup = chasChassisGroup.setStatus('current')
chasControlReloadStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlReloadStatusGroup = chasControlReloadStatusGroup.setStatus('current')
chasGlobalControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlDelayedResetAll"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlLongCommand"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlLongCommandStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateFirmware"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateFilename"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlConfirmOperation"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlConfirmMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasGlobalControlGroup = chasGlobalControlGroup.setStatus('current')
chassisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStr"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSLessAllocSysPwr"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSStateChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiBPSFETStateChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwUpgradeAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisNotificationGroup = chassisNotificationGroup.setStatus('current')
alaChasEntPhysFanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanAirflow"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasEntPhysFanGroup = alaChasEntPhysFanGroup.setStatus('current')
alaChasNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrLevel"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrAppID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrSnapID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileLineNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrErrorNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrcomments"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrdataInfo"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertDescr"), ("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiRqstdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiGrantdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPowerSupply"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSEventAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSSystemFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPoeFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasNotificationObjectGroup = alaChasNotificationObjectGroup.setStatus('current')
chassisSupervisionRfsCommandsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsCommand"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsSrcFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsDestFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsRlsDirName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsRlsFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsProcessingState"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsStatusCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisSupervisionRfsCommandsGroup = chassisSupervisionRfsCommandsGroup.setStatus('current')
chasSupervisionCmmCertifiedEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmCertifiedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionCmmCertifiedEntryGroup = chasSupervisionCmmCertifiedEntryGroup.setStatus('current')
chasSupervisionFlashMemEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionFlashMemEntryGroup = chasSupervisionFlashMemEntryGroup.setStatus('current')
chasSupervisionRfsDfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfFlashFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfFlashSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfUsbFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfUsbSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionRfsDfEntryGroup = chasSupervisionRfsDfEntryGroup.setStatus('current')
chasSupervisionRfsLsEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsDirName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileAttr"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionRfsLsEntryGroup = chasSupervisionRfsLsEntryGroup.setStatus('current')
alaChasBpsFwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsUpdateFirmware"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsCpldRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsMmcuRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsCmcuRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsFwGroup = alaChasBpsFwGroup.setStatus('current')
alaChasBpsConnectorPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorPriority"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorNum"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsConnectorPriorityGroup = alaChasBpsConnectorPriorityGroup.setStatus('current')
alaChasBpsModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsModeGroup = alaChasBpsModeGroup.setStatus('current')
alaChasBpsPowerSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyName"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyDescr"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyModuleType"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyPartNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyHardwareRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplySerialNum"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyMfgDate"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyOperStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyPowerProv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsPowerSupplyGroup = alaChasBpsPowerSupplyGroup.setStatus('current')
alaChasBpsTotalPowerAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSysTotalAvailablePower"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSysTotalAllocation"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPoeTotalAvailablePower"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPoeTotalAllocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsTotalPowerAllocGroup = alaChasBpsTotalPowerAllocGroup.setStatus('current')
chasEntPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAdminStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysOperStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysModuleType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPartNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusOk1"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusOk2"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusPrimaryCMM"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusSecondaryCMM"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusTemperature"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusFan"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusBackupPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusInternalPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusControl"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusFabric"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic1Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic2Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic3Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic4Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic5Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic6Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysCpldRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysDaughterFpga1Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysDaughterFpga2Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysNiNum"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysGbicNum"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysWaveLen"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysUbootRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysUbootMinibootRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysMacAddress"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysCpuModel"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAirflow"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPowerUsed"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPowerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasEntPhysicalGroup = chasEntPhysicalGroup.setStatus('current')
chassisPhysNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStr"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisPhysNotificationGroup = chassisPhysNotificationGroup.setStatus('current')
chassisTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempCurrent"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempDangerThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisTemperatureGroup = chassisTemperatureGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-CHASSIS-MIB", alaChasBpsPowerSupplyDescr=alaChasBpsPowerSupplyDescr, alaChasBpsConnectorShelfId=alaChasBpsConnectorShelfId, chasCFMAHardwareBoardTemp=chasCFMAHardwareBoardTemp, chasCPMAHardwareBoardTemp=chasCPMAHardwareBoardTemp, chasEntPhysicalEntry=chasEntPhysicalEntry, chasSupervisionRfsLsFileName=chasSupervisionRfsLsFileName, alaChasBpsPowerSupplyEntry=alaChasBpsPowerSupplyEntry, chasControlModuleGroup=chasControlModuleGroup, alcatelIND1ChassisPhysMIBGroups=alcatelIND1ChassisPhysMIBGroups, chasControlAcrossCmmCertifiedSynchroStatus=chasControlAcrossCmmCertifiedSynchroStatus, chasSupervisionRfsLsFileSize=chasSupervisionRfsLsFileSize, chasControlRedundantTable=chasControlRedundantTable, chasControlDelayedActivateTimer=chasControlDelayedActivateTimer, chasChassisGroup=chasChassisGroup, chassisTrapsObj=chassisTrapsObj, chasTempRange=chasTempRange, alcatelIND1ChassisMIB=alcatelIND1ChassisMIB, chasSupervisionRfsLsFileType=chasSupervisionRfsLsFileType, alaChasBpsConnectorPriority=alaChasBpsConnectorPriority, chasEntPhysAsic6Rev=chasEntPhysAsic6Rev, chasControlCurrentRunningVersion=chasControlCurrentRunningVersion, chasPowerLeft=chasPowerLeft, chasEntTemperatureTable=chasEntTemperatureTable, chasEntPhysDaughterFpga1Rev=chasEntPhysDaughterFpga1Rev, alaChasBpsMode=alaChasBpsMode, ChassisTrapsStrfileLineNb=ChassisTrapsStrfileLineNb, alaChasBpsPowerSupplyName=alaChasBpsPowerSupplyName, alcatelIND1ChassisPhysMIBCompliances=alcatelIND1ChassisPhysMIBCompliances, chasGlobalControlLongCommandStatus=chasGlobalControlLongCommandStatus, chasSupervisionRfsDfEntryGroup=chasSupervisionRfsDfEntryGroup, chasControlCertifyStatus=chasControlCertifyStatus, alaChasBpsUpdateFirmware=alaChasBpsUpdateFirmware, chasGlobalControlUpdateFilename=chasGlobalControlUpdateFilename, chasEntPhysLedStatusFan=chasEntPhysLedStatusFan, chasFTAHardwareBoardTemp=chasFTAHardwareBoardTemp, chasSupervisionFlashSize=chasSupervisionFlashSize, chasControlModuleTable=chasControlModuleTable, chasEntPhysPowerUsed=chasEntPhysPowerUsed, chasControlChassisId=chasControlChassisId, chasNI1HardwareBoardTemp=chasNI1HardwareBoardTemp, chasEntTempStatus=chasEntTempStatus, chasControlEmpIpAddress=chasControlEmpIpAddress, chassisTrapsStr=chassisTrapsStr, chasSupervisionFlashMemEntryGroup=chasSupervisionFlashMemEntryGroup, chasNI6HardwareBoardTemp=chasNI6HardwareBoardTemp, alaChasBpsPowerSupplyPartNumber=alaChasBpsPowerSupplyPartNumber, chasSupervisionRfsDfEntry=chasSupervisionRfsDfEntry, chasSupervisionRfsCommandsSrcFileName=chasSupervisionRfsCommandsSrcFileName, chasSupervisionRfsDfFlashFree=chasSupervisionRfsDfFlashFree, chasSupervisionRfsLsDirName=chasSupervisionRfsLsDirName, chassisNotificationGroup=chassisNotificationGroup, alaChasBpsSysTotalAvailablePower=alaChasBpsSysTotalAvailablePower, alaChasBpsFwGroup=alaChasBpsFwGroup, chasSupervisionFlashFree=chasSupervisionFlashFree, alaChasEntPhysFanEntry=alaChasEntPhysFanEntry, chassisTrapsStrcomments=chassisTrapsStrcomments, chasSupervisionRfsCommandsRlsFileName=chasSupervisionRfsCommandsRlsFileName, chasSupervisionRfsLsTable=chasSupervisionRfsLsTable, chasSupervisionRfsLsSlot=chasSupervisionRfsLsSlot, chasSupervisionSlot=chasSupervisionSlot, chasEntPhysLedStatusControl=chasEntPhysLedStatusControl, ChasTrapsBPSPowerSupply=ChasTrapsBPSPowerSupply, chasEntPhysLedStatusOk1=chasEntPhysLedStatusOk1, chasEntPhysLedStatusPS=chasEntPhysLedStatusPS, chasEntPhysAsic3Rev=chasEntPhysAsic3Rev, chasEntPhysWaveLen=chasEntPhysWaveLen, chasSupervisionRfsDfUsbFree=chasSupervisionRfsDfUsbFree, chasControlReloadStatusTable=chasControlReloadStatusTable, chassisTrapsObjectType=chassisTrapsObjectType, chasTrapsNiGrantdBpsSysPower=chasTrapsNiGrantdBpsSysPower, chassisTemperatureGroup=chassisTemperatureGroup, chasNI2HardwareBoardTemp=chasNI2HardwareBoardTemp, chasTrapsNiBPSFETStateChange=chasTrapsNiBPSFETStateChange, alaChasBpsConnectorNum=alaChasBpsConnectorNum, chasEntPhysCpldRev=chasEntPhysCpldRev, chasCPMBHardwareBoardTemp=chasCPMBHardwareBoardTemp, alaChasBpsMmcuRev=alaChasBpsMmcuRev, chasEntPhysPartNumber=chasEntPhysPartNumber, alaChasBpsTotalPowerAllocTable=alaChasBpsTotalPowerAllocTable, alcatelIND1ChassisPhysMIBCompliance=alcatelIND1ChassisPhysMIBCompliance, chasEntPhysLedStatusPrimaryCMM=chasEntPhysLedStatusPrimaryCMM, chasSupervisionRfsCommandsProcessingState=chasSupervisionRfsCommandsProcessingState, chasEntPhysUbootMinibootRev=chasEntPhysUbootMinibootRev, chasControlModuleEntry=chasControlModuleEntry, ChassisTrapsStrLevel=ChassisTrapsStrLevel, chasSupervisionFlashMemTable=chasSupervisionFlashMemTable, alcatelIND1ChassisPhysMIBObjects=alcatelIND1ChassisPhysMIBObjects, chasNI7HardwareBoardTemp=chasNI7HardwareBoardTemp, chasEntPhysCpuModel=chasEntPhysCpuModel, chasSupervisionRfsDfSlot=chasSupervisionRfsDfSlot, chasSupervisionRfsDfFlashSize=chasSupervisionRfsDfFlashSize, alaChasBpsPowerSupplyTable=alaChasBpsPowerSupplyTable, ChassisTrapsObjectType=ChassisTrapsObjectType, chasControlReloadIndex=chasControlReloadIndex, chasControlActivateTimeout=chasControlActivateTimeout, alaChasBpsSerialNum=alaChasBpsSerialNum, chassisTrapsStrdataInfo=chassisTrapsStrdataInfo, alaChasEntPhysFanTable=alaChasEntPhysFanTable, alaChasBpsPowerSupplyModuleType=alaChasBpsPowerSupplyModuleType, chassisTrapsStateChange=chassisTrapsStateChange, alaChasBpsPowerSupplyGroup=alaChasBpsPowerSupplyGroup, chasEntPhysicalGroup=chasEntPhysicalGroup, chasFTBHardwareBoardTemp=chasFTBHardwareBoardTemp, alaChasBpsCmcuRev=alaChasBpsCmcuRev, chassisPhysNotificationGroup=chassisPhysNotificationGroup, chasTrapsBPSStateChange=chasTrapsBPSStateChange, chasTrapsBPSEventAlert=chasTrapsBPSEventAlert, chasTrapsBPSLessAllocSysPwr=chasTrapsBPSLessAllocSysPwr, chasGlobalControlConfirmMessage=chasGlobalControlConfirmMessage, chasEntPhysAsic5Rev=chasEntPhysAsic5Rev, chasGlobalControlUpdateSlot=chasGlobalControlUpdateSlot, chasPowerSupplyRedundancy=chasPowerSupplyRedundancy, alaChasBpsConnectorPriorityGroup=alaChasBpsConnectorPriorityGroup, alaChasBpsTotalPowerAllocEntry=alaChasBpsTotalPowerAllocEntry, chasEntPhysAsic4Rev=chasEntPhysAsic4Rev, alaChasBpsPowerSupplyOperStatus=alaChasBpsPowerSupplyOperStatus, chasEntPhysAsic1Rev=chasEntPhysAsic1Rev, chassisTrapsStrLevel=chassisTrapsStrLevel, chasEntPhysicalTable=chasEntPhysicalTable, chasFreeSlots=chasFreeSlots, chasChassisTable=chasChassisTable, chasEntTempCurrent=chasEntTempCurrent, alaChasBpsShelfId=alaChasBpsShelfId, chasControlVersionMngt=chasControlVersionMngt, chassisTrapsStrErrorNb=chassisTrapsStrErrorNb, chasControlRedundantGroup=chasControlRedundantGroup, chasSupervisionCmmCertifiedEntry=chasSupervisionCmmCertifiedEntry, chasControlAcrossCmmWorkingSynchroStatus=chasControlAcrossCmmWorkingSynchroStatus, chasSupervisionCmmNum=chasSupervisionCmmNum, chasSupervisionCmmCertifiedEntryGroup=chasSupervisionCmmCertifiedEntryGroup, chasSupervisionRfsDfTable=chasSupervisionRfsDfTable, alaChasEntPhysFanLocalIndex=alaChasEntPhysFanLocalIndex, chasEntPhysNiNum=chasEntPhysNiNum, alaChasBpsObjects=alaChasBpsObjects, chasTrapsBPSPowerSupply=chasTrapsBPSPowerSupply, alcatelIND1ChassisMIBNotifications=alcatelIND1ChassisMIBNotifications, chasControlDelayedResetAll=chasControlDelayedResetAll, chasEntPhysPowerType=chasEntPhysPowerType, chasControlWorkingVersion=chasControlWorkingVersion, chasEntPhysLedStatusSecondaryCMM=chasEntPhysLedStatusSecondaryCMM, chasSupervisionRfsCommandsDestFileName=chasSupervisionRfsCommandsDestFileName, alaChasBpsModeEntry=alaChasBpsModeEntry, alaChasBpsSysTotalAllocation=alaChasBpsSysTotalAllocation, alaChasBpsModeGroup=alaChasBpsModeGroup, chasControlRedundancyTime=chasControlRedundancyTime, ChasTrapsBPSFetState=ChasTrapsBPSFetState, ChassisTrapsStrAppID=ChassisTrapsStrAppID, chasControlReloadStatusGroup=chasControlReloadStatusGroup, chasSupervisionRfsLsEntry=chasSupervisionRfsLsEntry, chasSupervisionCmmCertifiedTable=chasSupervisionCmmCertifiedTable, ChasTrapsBPSEventAlert=ChasTrapsBPSEventAlert, chasSupervisionRfsLsEntryGroup=chasSupervisionRfsLsEntryGroup, chasSupervisionRfsCommandsRlsDirName=chasSupervisionRfsCommandsRlsDirName, alcatelIND1ChassisMIBGroups=alcatelIND1ChassisMIBGroups, chasTrapsBPSFwType=chasTrapsBPSFwType, ChassisTrapsObjectNumber=ChassisTrapsObjectNumber, alaChasBpsCpldRev=alaChasBpsCpldRev, chasSupervisionFlashMemEntry=chasSupervisionFlashMemEntry, chasEntPhysLedStatusInternalPS=chasEntPhysLedStatusInternalPS, chasEntPhysMacAddress=chasEntPhysMacAddress, chasNI3HardwareBoardTemp=chasNI3HardwareBoardTemp, alaChasEntPhysFanStatus=alaChasEntPhysFanStatus, alaChasBpsFwEntry=alaChasBpsFwEntry, chasNI4HardwareBoardTemp=chasNI4HardwareBoardTemp, alaChasBpsPoeTotalAvailablePower=alaChasBpsPoeTotalAvailablePower, chasChassisEntry=chasChassisEntry, chasTrapsNiRqstdBpsSysPower=chasTrapsNiRqstdBpsSysPower, chasEntPhysModuleType=chasEntPhysModuleType, chassisTrapsAlertNumber=chassisTrapsAlertNumber, chasSupervisionRfsLsFileIndex=chasSupervisionRfsLsFileIndex, ChasEntPhysLed=ChasEntPhysLed, alcatelIND1ChassisMIBConformance=alcatelIND1ChassisMIBConformance, chasCFMBHardwareBoardTemp=chasCFMBHardwareBoardTemp, chasCFMDHardwareBoardTemp=chasCFMDHardwareBoardTemp, chasGlobalControlLongCommand=chasGlobalControlLongCommand, alaChasBpsPoeTotalAllocation=alaChasBpsPoeTotalAllocation, chasEntTempThreshold=chasEntTempThreshold, ChassisTrapsStrErrorNb=ChassisTrapsStrErrorNb, chasEntPhysLedStatusFabric=chasEntPhysLedStatusFabric, chasEntPhysUbootRev=chasEntPhysUbootRev, chassisTrapsObjectNumber=chassisTrapsObjectNumber, chasControlReloadEntry=chasControlReloadEntry, alaChasBpsFwTable=alaChasBpsFwTable, alaChasBpsModeTable=alaChasBpsModeTable, chassisTrapsStrSnapID=chassisTrapsStrSnapID, chassisSupervisionRfsCommandsGroup=chassisSupervisionRfsCommandsGroup, chasControlNumberOfTakeover=chasControlNumberOfTakeover, chasGlobalControlUpdateFirmware=chasGlobalControlUpdateFirmware, chasSupervisionCmmCertifiedStatus=chasSupervisionCmmCertifiedStatus, chassisTrapsAlert=chassisTrapsAlert, alaChasEntPhysFanSpeed=alaChasEntPhysFanSpeed, alaChasBpsPowerSupplyShelfId=alaChasBpsPowerSupplyShelfId, chasEntPhysAirflow=chasEntPhysAirflow, chasPrimaryPhysicalIndex=chasPrimaryPhysicalIndex, ChasTrapsBPSFwType=ChasTrapsBPSFwType, chasControlRedundantEntry=chasControlRedundantEntry, chasNI8HardwareBoardTemp=chasNI8HardwareBoardTemp, alaChasBpsChassisId=alaChasBpsChassisId, alaChasBpsPowerSupplyPowerProv=alaChasBpsPowerSupplyPowerProv, AlaChasBpsShelfId=AlaChasBpsShelfId, alcatelIND1ChassisMIBCompliance=alcatelIND1ChassisMIBCompliance, chasGlobalControlGroup=chasGlobalControlGroup, chasGlobalControlUpdateStatus=chasGlobalControlUpdateStatus, alaChasBpsPowerSupplySerialNum=alaChasBpsPowerSupplySerialNum, chasEntPhysLedStatusOk2=chasEntPhysLedStatusOk2, chasTrapsBPSFwUpgradeAlert=chasTrapsBPSFwUpgradeAlert, chassisTrapsStrAppID=chassisTrapsStrAppID, chasTrapsBPSSystemFETChange=chasTrapsBPSSystemFETChange, chasTrapsBPSPoeFETChange=chasTrapsBPSPoeFETChange, chasTrapsBPSFwVersion=chasTrapsBPSFwVersion, alaChasNotificationObjectGroup=alaChasNotificationObjectGroup, chasNI5HardwareBoardTemp=chasNI5HardwareBoardTemp, chasSupervisionFlashUsed=chasSupervisionFlashUsed, alaChasBpsPowerSupplyMfgDate=alaChasBpsPowerSupplyMfgDate, chasDangerTempThreshold=chasDangerTempThreshold, chasControlDelayedRebootTimer=chasControlDelayedRebootTimer, alaChasEntPhysFanAirflow=alaChasEntPhysFanAirflow, chasGlobalControlConfirmOperation=chasGlobalControlConfirmOperation, alcatelIND1ChassisMIBCompliances=alcatelIND1ChassisMIBCompliances, alcatelIND1ChassisSupervisionRfsCommands=alcatelIND1ChassisSupervisionRfsCommands, chasNumberOfResets=chasNumberOfResets, alaChasBpsPowerSupplyIndex=alaChasBpsPowerSupplyIndex, chasEntTemperatureEntry=chasEntTemperatureEntry, chasSupervisionRfsCommandsSlot=chasSupervisionRfsCommandsSlot, chasEntPhysLedStatusTemperature=chasEntPhysLedStatusTemperature, ChassisTrapsStrSnapID=ChassisTrapsStrSnapID, chasPowerSupplyRedundancyReserve=chasPowerSupplyRedundancyReserve, chasTrapBPSShelfId=chasTrapBPSShelfId, chasSupervisionRfsDfUsbSize=chasSupervisionRfsDfUsbSize, chasControlNextRunningVersion=chasControlNextRunningVersion, chassisTrapsStrfileName=chassisTrapsStrfileName, alcatelIND1ChassisPhysMIBConformance=alcatelIND1ChassisPhysMIBConformance, chasEntTempDangerThreshold=chasEntTempDangerThreshold, chasGlobalControlDelayedResetAll=chasGlobalControlDelayedResetAll, physicalIndex=physicalIndex, chasGlobalControl=chasGlobalControl, chasEntPhysGbicNum=chasEntPhysGbicNum, alaChasBpsConnectorPriorityTable=alaChasBpsConnectorPriorityTable, chasSupervisionRfsCommandsCommand=chasSupervisionRfsCommandsCommand, alaChasEntPhysFanGroup=alaChasEntPhysFanGroup, chasControlReloadStatus=chasControlReloadStatus, alaChasBpsTotalPowerAllocGroup=alaChasBpsTotalPowerAllocGroup, chasSupervisionRfsLsFileDateTime=chasSupervisionRfsLsFileDateTime, chasSupervisionRfsCommandsStatusCode=chasSupervisionRfsCommandsStatusCode, PYSNMP_MODULE_ID=alcatelIND1ChassisMIB, chasCFMCHardwareBoardTemp=chasCFMCHardwareBoardTemp, alcatelIND1ChassisMIBObjects=alcatelIND1ChassisMIBObjects, alaChasBpsPowerSupplyHardwareRev=alaChasBpsPowerSupplyHardwareRev, chasTempThreshold=chasTempThreshold, chasControlEmpIpMask=chasControlEmpIpMask, chasEntPhysPower=chasEntPhysPower, chasEntPhysAdminStatus=chasEntPhysAdminStatus, chasSupervisionRfsLsFileAttr=chasSupervisionRfsLsFileAttr, chasEntPhysOperStatus=chasEntPhysOperStatus)
mibBuilder.exportSymbols("ALCATEL-IND1-CHASSIS-MIB", alaChasBpsConnectorPriorityEntry=alaChasBpsConnectorPriorityEntry, chassisTrapsStrfileLineNb=chassisTrapsStrfileLineNb, chasEntPhysLedStatusBackupPS=chasEntPhysLedStatusBackupPS, chassisTrapsAlertDescr=chassisTrapsAlertDescr, chasControlSynchronizationStatus=chasControlSynchronizationStatus, ChassisTrapsAlertNumber=ChassisTrapsAlertNumber, chasEntPhysAsic2Rev=chasEntPhysAsic2Rev, ChassisTrapsStrdataInfo=ChassisTrapsStrdataInfo, chasEntPhysDaughterFpga2Rev=chasEntPhysDaughterFpga2Rev)
