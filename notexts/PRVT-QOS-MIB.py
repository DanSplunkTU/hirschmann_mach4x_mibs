#
# PySNMP MIB module PRVT-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-QOS-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:44:24 2021
# On host fv-az135-680 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
prvt_products, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "prvt-products")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Integer32, Bits, MibIdentifier, Gauge32, ModuleIdentity, Counter32, iso, IpAddress, Counter64, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Integer32", "Bits", "MibIdentifier", "Gauge32", "ModuleIdentity", "Counter32", "iso", "IpAddress", "Counter64", "TimeTicks", "Unsigned32")
DisplayString, MacAddress, RowStatus, TextualConvention, StorageType, RowPointer, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention", "StorageType", "RowPointer", "TruthValue", "TimeStamp")
prvtQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 1))
prvtQosMIB.setRevisions(('2010-03-23 00:00', '2009-04-24 00:00', '2008-10-01 00:00', '2007-11-17 00:00',))
if mibBuilder.loadTexts: prvtQosMIB.setLastUpdated('201003230000Z')
if mibBuilder.loadTexts: prvtQosMIB.setOrganization('BATM Advanced Communication')
serviceAccessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7))
class TNamedItem(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TNamedItemOrEmpty(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 6), )
class TQEncapVal(TextualConvention, Unsigned32):
    status = 'current'

class TLspExpValue(TextualConvention, Integer32):
    reference = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class Dot1PPriority(TextualConvention, Integer32):
    reference = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class TFCName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TFCNameOrEmpty(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class TDSCPValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class TItemDescription(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 30)

class TQueueId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TIngressQueueId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TEgressQueueId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TSapIngressPolicyId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class TSapIngressPolicyIdOrNone(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class TSapEgressPolicyId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class TSapEgressPolicyIdOrNone(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class TNetworkPolicyId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TNetworkPolicyIdOrNone(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class TItemMatch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("false", 2), ("true", 3))

class TPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("low", 1), ("high", 2))

class TPriorityOrDefault(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("low", 1), ("high", 2), ("default", 3))

class TProfile(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class TCIRRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class TPIRRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100000000)

class TRateValue(TextualConvention, Integer32):
    status = 'current'

class TLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class TWeight(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TTreshold(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(25, 100)

class TConformanceLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

class TShaperId(TextualConvention, Integer32):
    status = 'current'

class TTailDropId(TextualConvention, Integer32):
    status = 'current'

class TSredId(TextualConvention, Integer32):
    status = 'current'

class TSSchedulingProfile(TextualConvention, Integer32):
    status = 'current'

class TSlopePolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

tFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1))
hqosSapIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2))
hqosSapEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3))
hqosNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4))
hqosNetworkQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5))
hqosSchedulerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6))
tWredObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7))
tCongestionAvoidanceProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8))
tShaperObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9))
tWfqObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10))
qosSchedulingProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11))
qosServicePolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12))
qosNetworkPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13))
qosGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14))
qosServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15))
qosInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16))
qosStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17))
qosVlanPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18))
qosVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19))
tFCNameTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1), )
if mibBuilder.loadTexts: tFCNameTable.setStatus('current')
tFCNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tFCValue"))
if mibBuilder.loadTexts: tFCNameEntry.setStatus('current')
tFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tFCValue.setStatus('current')
tFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 2), RowStatus())
if mibBuilder.loadTexts: tFCRowStatus.setStatus('current')
tFCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 3), StorageType().clone('nonVolatile'))
if mibBuilder.loadTexts: tFCStorageType.setStatus('current')
tFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 4), TFCName())
if mibBuilder.loadTexts: tFCName.setStatus('current')
tFCNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 5), TimeStamp())
if mibBuilder.loadTexts: tFCNameLastChanged.setStatus('current')
hqosSapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: hqosSapIngressTable.setStatus('current')
hqosSapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"))
if mibBuilder.loadTexts: hqosSapIngressEntry.setStatus('current')
hqosSapIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 1), TSapIngressPolicyId())
if mibBuilder.loadTexts: hqosSapIngressIndex.setStatus('current')
hqosSapIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressRowStatus.setStatus('current')
hqosSapIngressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDescription.setStatus('current')
hqosSapIngressDefaultDscpFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 4), Integer32().clone(4))
if mibBuilder.loadTexts: hqosSapIngressDefaultDscpFC.setStatus('current')
hqosSapIngressDefaultVptFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: hqosSapIngressDefaultVptFC.setStatus('current')
hqosSapIngressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 6), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressLastChanged.setStatus('current')
hqosSapIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2), )
if mibBuilder.loadTexts: hqosSapIngressQueueTable.setStatus('current')
hqosSapIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressQueue"), (0, "PRVT-QOS-MIB", "hqosSapIngressQueueParent"))
if mibBuilder.loadTexts: hqosSapIngressQueueEntry.setStatus('current')
hqosSapIngressQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hqosSapIngressQueue.setStatus('current')
hqosSapIngressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 2), TNamedItemOrEmpty())
if mibBuilder.loadTexts: hqosSapIngressQueueParent.setStatus('current')
hqosSapIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressQueueRowStatus.setStatus('current')
hqosSapIngressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueLevel.setStatus('current')
hqosSapIngressQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 61)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueServWfq.setStatus('current')
hqosSapIngressQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueType.setStatus('current')
hqosSapIngressQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueHiPriority.setStatus('current')
hqosSapIngressQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 8), TSlopePolicy().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueWred.setStatus('current')
hqosSapIngressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressQueueLastChanged.setStatus('current')
hqosSapIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3), )
if mibBuilder.loadTexts: hqosSapIngressDSCPTable.setStatus('current')
hqosSapIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressDSCP"))
if mibBuilder.loadTexts: hqosSapIngressDSCPEntry.setStatus('current')
hqosSapIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 1), TDSCPValue())
if mibBuilder.loadTexts: hqosSapIngressDSCP.setStatus('current')
hqosSapIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDSCPRowStatus.setStatus('current')
hqosSapIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDSCPFC.setStatus('current')
hqosSapIngressDSCPConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 4), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDSCPConformance.setStatus('current')
hqosSapIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressDSCPLastChanged.setStatus('current')
hqosSapIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4), )
if mibBuilder.loadTexts: hqosSapIngressDot1pTable.setStatus('current')
hqosSapIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressDot1pValue"))
if mibBuilder.loadTexts: hqosSapIngressDot1pEntry.setStatus('current')
hqosSapIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 1), Dot1PPriority())
if mibBuilder.loadTexts: hqosSapIngressDot1pValue.setStatus('current')
hqosSapIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDot1pRowStatus.setStatus('current')
hqosSapIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDot1pFC.setStatus('current')
hqosSapIngressDot1pConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 4), TConformanceLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDot1pConformance.setStatus('current')
hqosSapIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressDot1pLastChanged.setStatus('current')
hqosSapIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5), )
if mibBuilder.loadTexts: hqosSapIngressFCTable.setStatus('current')
hqosSapIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressFCNumber"), (0, "PRVT-QOS-MIB", "hqosSapIngressFCQueueType"))
if mibBuilder.loadTexts: hqosSapIngressFCEntry.setStatus('current')
hqosSapIngressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosSapIngressFCNumber.setStatus('current')
hqosSapIngressFCQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3))))
if mibBuilder.loadTexts: hqosSapIngressFCQueueType.setStatus('current')
hqosSapIngressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressFCRowStatus.setStatus('current')
hqosSapIngressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 4), TIngressQueueId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressFCQueue.setStatus('current')
hqosSapIngressFCQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressFCQueueParent.setStatus('current')
hqosSapIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosSapIngressFCLastChanged.setStatus('current')
hqosSapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: hqosSapEgressTable.setStatus('current')
hqosSapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"))
if mibBuilder.loadTexts: hqosSapEgressEntry.setStatus('current')
hqosSapEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 1), TSapEgressPolicyId())
if mibBuilder.loadTexts: hqosSapEgressIndex.setStatus('current')
hqosSapEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressRowStatus.setStatus('current')
hqosSapEgressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressDescription.setStatus('current')
hqosSapEgressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 6), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressLastChanged.setStatus('current')
hqosSapEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2), )
if mibBuilder.loadTexts: hqosSapEgressQueueTable.setStatus('current')
hqosSapEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressQueueIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressQueueParent"))
if mibBuilder.loadTexts: hqosSapEgressQueueEntry.setStatus('current')
hqosSapEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 1), TEgressQueueId())
if mibBuilder.loadTexts: hqosSapEgressQueueIndex.setStatus('current')
hqosSapEgressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 2), TNamedItemOrEmpty())
if mibBuilder.loadTexts: hqosSapEgressQueueParent.setStatus('current')
hqosSapEgressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressQueueRowStatus.setStatus('current')
hqosSapEgressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueLevel.setStatus('current')
hqosSapEgressQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueServWfq.setStatus('current')
hqosSapEgressQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueType.setStatus('current')
hqosSapEgressQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueHiPriority.setStatus('current')
hqosSapEgressQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 8), TSlopePolicy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueWred.setStatus('current')
hqosSapEgressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressQueueLastChanged.setStatus('current')
hqosSapEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3), )
if mibBuilder.loadTexts: hqosSapEgressFCTable.setStatus('current')
hqosSapEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressFCNumber"), (0, "PRVT-QOS-MIB", "hqosSapEgressFCEntryType"))
if mibBuilder.loadTexts: hqosSapEgressFCEntry.setStatus('current')
hqosSapEgressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosSapEgressFCNumber.setStatus('current')
hqosSapEgressFCEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3), ("dscp", 4), ("dot1p", 5))))
if mibBuilder.loadTexts: hqosSapEgressFCEntryType.setStatus('current')
hqosSapEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressFCRowStatus.setStatus('current')
hqosSapEgressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 4), TEgressQueueId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCQueue.setStatus('current')
hqosSapEgressFCQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCQueueParent.setStatus('current')
hqosSapEgressFCDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 6), Dot1PPriority().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCDot1PValue.setStatus('current')
hqosSapEgressFCDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 7), TDSCPValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCDSCPValue.setStatus('current')
hqosSapEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 8), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressFCLastChanged.setStatus('current')
hqosNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1), )
if mibBuilder.loadTexts: hqosNetworkPolicyTable.setStatus('current')
hqosNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"))
if mibBuilder.loadTexts: hqosNetworkPolicyEntry.setStatus('current')
hqosNetworkPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 1), TNetworkPolicyId())
if mibBuilder.loadTexts: hqosNetworkPolicyIndex.setStatus('current')
hqosNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkPolicyRowStatus.setStatus('current')
hqosNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyDescription.setStatus('current')
hqosNetworkPolicyIngressDefaultActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 4), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyIngressDefaultActionFC.setStatus('current')
hqosNetworkPolicyIngressConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 5), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyIngressConformance.setStatus('current')
hqosNetworkPolicyEgressRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosNetworkPolicyEgressRemark.setStatus('current')
hqosNetworkPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 7), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkPolicyLastChanged.setStatus('current')
hqosNetworkIngressLSPEXPTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2), )
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPTable.setStatus('current')
hqosNetworkIngressLSPEXPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"), (0, "PRVT-QOS-MIB", "hqosNetworkIngressLSPEXP"))
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPEntry.setStatus('current')
hqosNetworkIngressLSPEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXP.setStatus('current')
hqosNetworkIngressLSPEXPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPRowStatus.setStatus('current')
hqosNetworkIngressLSPEXPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPFC.setStatus('current')
hqosNetworkIngressLSPEXPConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 4), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPConformance.setStatus('current')
hqosNetworkIngressLSPEXPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPLastChanged.setStatus('current')
hqosNetworkEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3), )
if mibBuilder.loadTexts: hqosNetworkEgressFCTable.setStatus('current')
hqosNetworkEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"), (0, "PRVT-QOS-MIB", "hqosNetworkEgressFCNumber"), (0, "PRVT-QOS-MIB", "hqosNetworkEgressFCConformance"))
if mibBuilder.loadTexts: hqosNetworkEgressFCEntry.setStatus('current')
hqosNetworkEgressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosNetworkEgressFCNumber.setStatus('current')
hqosNetworkEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkEgressFCRowStatus.setStatus('current')
hqosNetworkEgressFCLspExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 3), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkEgressFCLspExpValue.setStatus('current')
hqosNetworkEgressFCDot1Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 4), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkEgressFCDot1Priority.setStatus('current')
hqosNetworkEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkEgressFCLastChanged.setStatus('current')
hqosNetworkEgressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 6), TConformanceLevel())
if mibBuilder.loadTexts: hqosNetworkEgressFCConformance.setStatus('current')
hqosNetworkQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1), )
if mibBuilder.loadTexts: hqosNetworkQueuePolicyTable.setStatus('current')
hqosNetworkQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"))
if mibBuilder.loadTexts: hqosNetworkQueuePolicyEntry.setStatus('current')
hqosNetworkQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosNetworkQueuePolicy.setStatus('current')
hqosNetworkQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueuePolicyRowStatus.setStatus('current')
hqosNetworkQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueuePolicyDescription.setStatus('current')
hqosNetworkQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 8), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueuePolicyLastChanged.setStatus('current')
hqosNetworkQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2), )
if mibBuilder.loadTexts: hqosNetworkQueueTable.setStatus('current')
hqosNetworkQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"), (0, "PRVT-QOS-MIB", "hqosNetworkQueue"))
if mibBuilder.loadTexts: hqosNetworkQueueEntry.setStatus('current')
hqosNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: hqosNetworkQueue.setStatus('current')
hqosNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueueRowStatus.setStatus('current')
hqosNetworkQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue=""))
if mibBuilder.loadTexts: hqosNetworkQueueParent.setStatus('current')
hqosNetworkQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueLevel.setStatus('current')
hqosNetworkQueueWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueWfqProfile.setStatus('current')
hqosNetworkQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueType.setStatus('current')
hqosNetworkQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosNetworkQueueHiPriority.setStatus('obsolete')
hqosNetworkQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 8), TSlopePolicy().subtype(subtypeSpec=ValueRangeConstraint(57, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueWred.setStatus('current')
hqosNetworkQueueShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 9), TShaperId().subtype(subtypeSpec=ValueRangeConstraint(17, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueShaper.setStatus('current')
hqosNetworkQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 10), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueueLastChanged.setStatus('current')
hqosNetworkQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3), )
if mibBuilder.loadTexts: hqosNetworkQueueFCTable.setStatus('current')
hqosNetworkQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"), (0, "PRVT-QOS-MIB", "hqosNetworkQueueFCNumber"), (0, "PRVT-QOS-MIB", "hqosNetworkQueueFCType"))
if mibBuilder.loadTexts: hqosNetworkQueueFCEntry.setStatus('current')
hqosNetworkQueueFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosNetworkQueueFCNumber.setStatus('current')
hqosNetworkQueueFCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3))))
if mibBuilder.loadTexts: hqosNetworkQueueFCType.setStatus('current')
hqosNetworkQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueueFCRowStatus.setStatus('current')
hqosNetworkQueueFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueFC.setStatus('current')
hqosNetworkQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueueFCLastChanged.setStatus('current')
hqosSchedulerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1), )
if mibBuilder.loadTexts: hqosSchedulerPolicyTable.setStatus('current')
hqosSchedulerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSchedulerPolicyName"), (0, "PRVT-QOS-MIB", "hqosSchedulerPolicyType"))
if mibBuilder.loadTexts: hqosSchedulerPolicyEntry.setStatus('current')
hqosSchedulerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosSchedulerPolicyName.setStatus('current')
hqosSchedulerPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSchedulerPolicyRowStatus.setStatus('current')
hqosSchedulerPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2), ("network", 3))))
if mibBuilder.loadTexts: hqosSchedulerPolicyType.setStatus('current')
hqosSchedulerPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSchedulerPolicyDescription.setStatus('current')
hqosSchedulerPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSchedulerPolicyLastChanged.setStatus('current')
hqosVirtualSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2), )
if mibBuilder.loadTexts: hqosVirtualSchedulerTable.setStatus('current')
hqosVirtualSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSchedulerPolicyName"), (0, "PRVT-QOS-MIB", "hqosSchedulerPolicyType"), (0, "PRVT-QOS-MIB", "hqosVirtualSchedulerName"), (0, "PRVT-QOS-MIB", "hqosVirtualSchedulerLevel"))
if mibBuilder.loadTexts: hqosVirtualSchedulerEntry.setStatus('current')
hqosVirtualSchedulerName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosVirtualSchedulerName.setStatus('current')
hqosVirtualSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosVirtualSchedulerRowStatus.setStatus('current')
hqosVirtualSchedulerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerDescription.setStatus('current')
hqosVirtualSchedulerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerParent.setStatus('current')
hqosVirtualSchedulerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 5), TLevel())
if mibBuilder.loadTexts: hqosVirtualSchedulerLevel.setStatus('current')
hqosVirtualSchedulerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerPriority.setStatus('current')
hqosVirtualSchedulerWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerWfqProfile.setStatus('current')
hqosVirtualSchedulerShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 8), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerShaper.setStatus('current')
hqosVirtualSchedulerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosVirtualSchedulerLastChanged.setStatus('current')
tWredProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1), )
if mibBuilder.loadTexts: tWredProfileTable.setStatus('current')
tWredProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWredProfile"))
if mibBuilder.loadTexts: tWredProfileEntry.setStatus('current')
tWredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 1), TSlopePolicy())
if mibBuilder.loadTexts: tWredProfile.setStatus('current')
tWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWredRowStatus.setStatus('current')
tWredDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredDescription.setStatus('current')
tWredGreenStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenStartAverage.setStatus('current')
tWredGreenMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenMaxAverage.setStatus('current')
tWredGreenProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenProbability.setStatus('current')
tWredYellowStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowStartAverage.setStatus('current')
tWredYellowMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowMaxAverage.setStatus('current')
tWredYellowProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowProbability.setStatus('current')
tWredRedStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedStartAverage.setStatus('current')
tWredRedMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedMaxAverage.setStatus('current')
tWredRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedProbability.setStatus('current')
tWredLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 13), TimeStamp())
if mibBuilder.loadTexts: tWredLastChanged.setStatus('current')
qosTailDropProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1), )
if mibBuilder.loadTexts: qosTailDropProfileTable.setStatus('current')
qosTailDropProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosTailDropProfile"))
if mibBuilder.loadTexts: qosTailDropProfileEntry.setStatus('current')
qosTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 1), TTailDropId().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: qosTailDropProfile.setStatus('current')
qosTailDropRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosTailDropRowStatus.setStatus('current')
qosMaxTailDropYellowTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 3), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxTailDropYellowTreshold.setStatus('current')
qosMaxTailDropRedTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 4), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxTailDropRedTreshold.setStatus('current')
qosSredProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2), )
if mibBuilder.loadTexts: qosSredProfileTable.setStatus('current')
qosSredProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosTailDropProfile"))
if mibBuilder.loadTexts: qosSredProfileEntry.setStatus('current')
qosSredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 1), TSredId().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: qosSredProfile.setStatus('current')
qosSredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSredRowStatus.setStatus('current')
qosMaxSredYellowTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 3), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredYellowTreshold.setStatus('current')
qosMaxSredYellowProbaility = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 4), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredYellowProbaility.setStatus('current')
qosMaxSredRedTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 5), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredRedTreshold.setStatus('current')
qosMaxSredRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 6), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredRedProbability.setStatus('current')
tShaperProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1), )
if mibBuilder.loadTexts: tShaperProfileTable.setStatus('current')
tShaperProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tShaperProfileType"), (0, "PRVT-QOS-MIB", "tShaperProfile"), (0, "PRVT-QOS-MIB", "tShaperProfileDirection"), (0, "PRVT-QOS-MIB", "tShaperProfileLevel"))
if mibBuilder.loadTexts: tShaperProfileEntry.setStatus('current')
tShaperProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qos", 1), ("hqos", 2))))
if mibBuilder.loadTexts: tShaperProfileType.setStatus('current')
tShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 2), TShaperId().subtype(subtypeSpec=ValueRangeConstraint(1, 216)))
if mibBuilder.loadTexts: tShaperProfile.setStatus('current')
tShaperProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serviceIngress", 1), ("serviceEgress", 2), ("networkEgress", 3), ("vlanEgress", 4))))
if mibBuilder.loadTexts: tShaperProfileDirection.setStatus('current')
tShaperProfileLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("port", 1), ("queue", 2), ("l1Scheduler", 3), ("l2Scheduler", 4), ("qosPolicy", 5))))
if mibBuilder.loadTexts: tShaperProfileLevel.setStatus('current')
tShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tShaperRowStatus.setStatus('current')
tShaperDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperDescription.setStatus('current')
tShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 7), TRateValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperCIR.setStatus('current')
tShaperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 8), TRateValue().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperPIR.setStatus('current')
tShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperCBS.setStatus('current')
tShaperMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 10), Integer32().clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperMBS.setStatus('current')
tShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 11), TimeStamp())
if mibBuilder.loadTexts: tShaperLastChanged.setStatus('current')
tWfqServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1), )
if mibBuilder.loadTexts: tWfqServiceProfileTable.setStatus('current')
tWfqServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqServiceProfileNumber"), (0, "PRVT-QOS-MIB", "tWfqServiceProfileDirection"))
if mibBuilder.loadTexts: tWfqServiceProfileEntry.setStatus('current')
tWfqServiceProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61)))
if mibBuilder.loadTexts: tWfqServiceProfileNumber.setStatus('current')
tWfqServiceProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: tWfqServiceProfileDirection.setStatus('current')
tWfqServiceProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqServiceProfileRowStatus.setStatus('current')
tWfqServiceProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqServiceProfileWeight.setStatus('current')
tWfqNetworkProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2), )
if mibBuilder.loadTexts: tWfqNetworkProfileTable.setStatus('current')
tWfqNetworkProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqNetworkProfileNumber"))
if mibBuilder.loadTexts: tWfqNetworkProfileEntry.setStatus('current')
tWfqNetworkProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tWfqNetworkProfileNumber.setStatus('current')
tWfqNetworkProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqNetworkProfileRowStatus.setStatus('current')
tWfqNetworkProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqNetworkProfileWeight.setStatus('current')
tWfqNetworkProfileCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqNetworkProfileCIRWeight.setStatus('current')
tWfqSchedulerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3), )
if mibBuilder.loadTexts: tWfqSchedulerProfileTable.setStatus('current')
tWfqSchedulerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqSchedulerProfileNumber"), (0, "PRVT-QOS-MIB", "tWfqSchedulerProfileDirection"))
if mibBuilder.loadTexts: tWfqSchedulerProfileEntry.setStatus('current')
tWfqSchedulerProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48)))
if mibBuilder.loadTexts: tWfqSchedulerProfileNumber.setStatus('current')
tWfqSchedulerProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: tWfqSchedulerProfileDirection.setStatus('current')
tWfqSchedulerProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqSchedulerProfileRowStatus.setStatus('current')
tWfqSchedulerProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqSchedulerProfileWeight.setStatus('current')
tWfqSchedulerProfileCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqSchedulerProfileCIRWeight.setStatus('current')
qosSchedulingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1), )
if mibBuilder.loadTexts: qosSchedulingProfileTable.setStatus('current')
qosSchedulingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosSchedulingProfile"), (0, "PRVT-QOS-MIB", "qosSchedulingProfileDirection"), (0, "PRVT-QOS-MIB", "qosSchedulingType"))
if mibBuilder.loadTexts: qosSchedulingProfileEntry.setStatus('current')
qosSchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: qosSchedulingProfile.setStatus('current')
qosSchedulingProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: qosSchedulingProfileDirection.setStatus('current')
qosSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("sp", 1), ("wrr", 2), ("hybrid-1", 3), ("hybrid-2", 4), ("hybrid-3", 5), ("hybrid-4", 6), ("hybrid-5", 7), ("hybrid-6", 8), ("drr", 9), ("mdrr-1", 10), ("mdrr-2", 11), ("mdrr-3", 12), ("mdrr-4", 13), ("mdrr-5", 14), ("mdrr-6", 15))))
if mibBuilder.loadTexts: qosSchedulingType.setStatus('current')
qosSchedulingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSchedulingRowStatus.setStatus('current')
qosSchedulingQ1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ1Weight.setStatus('current')
qosSchedulingQ2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ2Weight.setStatus('current')
qosSchedulingQ3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ3Weight.setStatus('current')
qosSchedulingQ4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ4Weight.setStatus('current')
qosSchedulingQ5Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ5Weight.setStatus('current')
qosSchedulingQ6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ6Weight.setStatus('current')
qosSchedulingQ7Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ7Weight.setStatus('current')
qosSchedulingQ8Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ8Weight.setStatus('current')
qosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1), )
if mibBuilder.loadTexts: qosServicePolicyTable.setStatus('current')
qosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServicePolicyEntry.setStatus('current')
qosServicePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosServicePolicy.setStatus('current')
qosServicePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServicePolicyRowStatus.setStatus('current')
qosServicePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServicePolicyDescription.setStatus('current')
qosServiceIngressPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2), )
if mibBuilder.loadTexts: qosServiceIngressPolicyTable.setStatus('current')
qosServiceIngressPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServiceIngressPolicyEntry.setStatus('current')
qosServPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 1), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicyShaperProfile.setStatus('current')
qosServPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 2), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicySchedulingProfile.setStatus('current')
qosServPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicyTailDropProfile.setStatus('current')
qosServiceIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3), )
if mibBuilder.loadTexts: qosServiceIngressQueueTable.setStatus('current')
qosServiceIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServiceIngressQueueEntry.setStatus('current')
qosServInQueueQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosServInQueueQueue.setStatus('current')
qosServInQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServInQueueRowStatus.setStatus('current')
qosServInQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 4), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServInQueueTailDropProfile.setStatus('current')
qosServInQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 3), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServInQueueShaperProfile.setStatus('current')
qosNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1), )
if mibBuilder.loadTexts: qosNetworkPolicyTable.setStatus('current')
qosNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkPolicyEntry.setStatus('current')
qosNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosNetworkPolicy.setStatus('current')
qosNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosNetworkPolicyRowStatus.setStatus('current')
qosNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkPolicyDescription.setStatus('current')
qosNetworkIngressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2), )
if mibBuilder.loadTexts: qosNetworkIngressTable.setStatus('current')
qosNetworkIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkIngressEntry.setStatus('current')
qosNetworkIngressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 1), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkIngressFC.setStatus('current')
qosNetworkIngressConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 2), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkIngressConformance.setStatus('current')
qosTrustDot1pMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDot1pMode.setStatus('current')
qosTrustDot1pModePreservePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDot1pModePreservePriority.setStatus('current')
qosTrustDscpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDscpMode.setStatus('current')
qosNetworkEgressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3), )
if mibBuilder.loadTexts: qosNetworkEgressTable.setStatus('current')
qosNetworkEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkEgressEntry.setStatus('current')
qosNetPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 1), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicySchedulingProfile.setStatus('current')
qosNetPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 2), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicyShaperProfile.setStatus('current')
qosNetPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicyTailDropProfile.setStatus('current')
qosNetPolicySredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 4), TSredId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicySredProfile.setStatus('current')
qosNetworkEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4), )
if mibBuilder.loadTexts: qosNetworkEgressQueueTable.setStatus('current')
qosNetworkEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"), (0, "PRVT-QOS-MIB", "qosNetworkQueue"))
if mibBuilder.loadTexts: qosNetworkEgressQueueEntry.setStatus('current')
qosNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosNetworkQueue.setStatus('current')
qosNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosNetworkQueueRowStatus.setStatus('current')
qosNetworkQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 3), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueShaperProfile.setStatus('current')
qosNetworkQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 4), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueTailDropProfile.setStatus('current')
qosNetworkQueueSredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 5), TSredId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueSredProfile.setStatus('current')
qosGlobalIngressMapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1), )
if mibBuilder.loadTexts: qosGlobalIngressMapTable.setStatus('current')
qosGlobalIngressMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosIngressMapType"), (0, "PRVT-QOS-MIB", "qosIngressMapValue"))
if mibBuilder.loadTexts: qosGlobalIngressMapEntry.setStatus('current')
qosIngressMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2))))
if mibBuilder.loadTexts: qosIngressMapType.setStatus('current')
qosIngressMapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: qosIngressMapValue.setStatus('current')
qosIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressRowStatus.setStatus('current')
qosIngressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 4), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIngressFC.setStatus('current')
qosIngressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 5), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIngressFCConformance.setStatus('current')
qosGlobalEgressRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2), )
if mibBuilder.loadTexts: qosGlobalEgressRemarkTable.setStatus('current')
qosGlobalEgressRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosEgressFC"), (0, "PRVT-QOS-MIB", "qosEgressFCConformance"))
if mibBuilder.loadTexts: qosGlobalEgressRemarkEntry.setStatus('current')
qosEgressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: qosEgressFC.setStatus('current')
qosEgressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 2), TConformanceLevel())
if mibBuilder.loadTexts: qosEgressFCConformance.setStatus('current')
qosEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosEgressRowStatus.setStatus('current')
qosEgressRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressRemarkType.setStatus('current')
qosEgressRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressRemarkValue.setStatus('current')
qosServiceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1), )
if mibBuilder.loadTexts: qosServiceTable.setStatus('current')
qosServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServiceIndex"))
if mibBuilder.loadTexts: qosServiceEntry.setStatus('current')
qosServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: qosServiceIndex.setStatus('current')
qosServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServiceRowStatus.setStatus('current')
qosServicePolicyOnServ = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServicePolicyOnServ.setStatus('current')
qosServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2), )
if mibBuilder.loadTexts: qosServiceSapTable.setStatus('current')
qosServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServiceIndex"), (0, "PRVT-QOS-MIB", "qosServiceSapPortId"), (0, "PRVT-QOS-MIB", "qosServiceSapEncapValue"))
if mibBuilder.loadTexts: qosServiceSapEntry.setStatus('current')
qosServiceSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapPortId.setStatus('current')
qosServiceSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 2), TQEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapEncapValue.setStatus('current')
qosServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServiceSapRowStatus.setStatus('current')
qosServiceSapPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapPolicyEnable.setStatus('current')
qosInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1), )
if mibBuilder.loadTexts: qosInterfaceTable.setStatus('current')
qosInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosInterfaceIndex"))
if mibBuilder.loadTexts: qosInterfaceEntry.setStatus('current')
qosInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: qosInterfaceIndex.setStatus('current')
qosInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInterfaceRowStatus.setStatus('current')
qosInterfacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInterfacePolicy.setStatus('current')
qosStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1), )
if mibBuilder.loadTexts: qosStatisticsTable.setStatus('current')
qosStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosStatInterfaceIndex"), (0, "PRVT-QOS-MIB", "qosQueueIndex"))
if mibBuilder.loadTexts: qosStatisticsEntry.setStatus('current')
qosStatInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: qosStatInterfaceIndex.setStatus('current')
qosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 2), TQueueId())
if mibBuilder.loadTexts: qosQueueIndex.setStatus('current')
qosReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceivedBytes.setStatus('current')
qosDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedBytes.setStatus('current')
qosClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClearStatistics.setStatus('current')
qosVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1), )
if mibBuilder.loadTexts: qosVlanPolicyTable.setStatus('current')
qosVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanPolicyEntry.setStatus('current')
qosVlanPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosVlanPolicy.setStatus('current')
qosVlanPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyDescription.setStatus('current')
qosVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPolicyRowStatus.setStatus('current')
qosVlanIngressPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2), )
if mibBuilder.loadTexts: qosVlanIngressPolicyTable.setStatus('current')
qosVlanIngressPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanIngressPolicyEntry.setStatus('current')
qosVlanPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 1), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyShaperProfile.setStatus('current')
qosVlanPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 2), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicySchedulingProfile.setStatus('current')
qosVlanPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyTailDropProfile.setStatus('current')
qosVlanIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3), )
if mibBuilder.loadTexts: qosVlanIngressQueueTable.setStatus('current')
qosVlanIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanIngressQueueEntry.setStatus('current')
qosVlanInQueueQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosVlanInQueueQueue.setStatus('current')
qosVlanInQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 2), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanInQueueShaperProfile.setStatus('current')
qosVlanInQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanInQueueTailDropProfile.setStatus('current')
qosVlanInQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanInQueueRowStatus.setStatus('current')
qosVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1), )
if mibBuilder.loadTexts: qosVlanTable.setStatus('current')
qosVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanIndex"))
if mibBuilder.loadTexts: qosVlanEntry.setStatus('current')
qosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: qosVlanIndex.setStatus('current')
qosVlanPolicyOnVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 2), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPolicyOnVlan.setStatus('current')
qosVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanRowStatus.setStatus('current')
qosVlanIngressPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2), )
if mibBuilder.loadTexts: qosVlanIngressPortTable.setStatus('current')
qosVlanIngressPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanIndex"), (0, "PRVT-QOS-MIB", "qosVlanIngressPortId"))
if mibBuilder.loadTexts: qosVlanIngressPortEntry.setStatus('current')
qosVlanIngressPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosVlanIngressPortId.setStatus('current')
qosVlanPortPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosVlanPortPolicyEnable.setStatus('current')
qosVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPortRowStatus.setStatus('current')
mibBuilder.exportSymbols("PRVT-QOS-MIB", tShaperProfileEntry=tShaperProfileEntry, tWredRedStartAverage=tWredRedStartAverage, tWredYellowMaxAverage=tWredYellowMaxAverage, qosServiceObjects=qosServiceObjects, tWredProfileEntry=tWredProfileEntry, qosClearStatistics=qosClearStatistics, hqosSchedulerPolicyDescription=hqosSchedulerPolicyDescription, tFCNameEntry=tFCNameEntry, qosNetworkEgressTable=qosNetworkEgressTable, TQueueId=TQueueId, qosSredProfileTable=qosSredProfileTable, tShaperProfileLevel=tShaperProfileLevel, qosVlanPolicyObjects=qosVlanPolicyObjects, TProfile=TProfile, hqosNetworkPolicyDescription=hqosNetworkPolicyDescription, qosSredProfileEntry=qosSredProfileEntry, TShaperId=TShaperId, hqosNetworkEgressFCEntry=hqosNetworkEgressFCEntry, hqosSapEgressQueueWred=hqosSapEgressQueueWred, qosNetworkEgressQueueEntry=qosNetworkEgressQueueEntry, hqosSapEgressFCEntry=hqosSapEgressFCEntry, hqosNetworkQueueLevel=hqosNetworkQueueLevel, hqosSapIngressQueueWred=hqosSapIngressQueueWred, hqosSapEgressFCRowStatus=hqosSapEgressFCRowStatus, qosSchedulingQ1Weight=qosSchedulingQ1Weight, tWredYellowStartAverage=tWredYellowStartAverage, qosSchedulingProfile=qosSchedulingProfile, hqosNetworkQueue=hqosNetworkQueue, tWfqSchedulerProfileTable=tWfqSchedulerProfileTable, qosNetPolicyShaperProfile=qosNetPolicyShaperProfile, hqosSapIngressQueueParent=hqosSapIngressQueueParent, qosVlanIngressPolicyEntry=qosVlanIngressPolicyEntry, hqosSapIngressQueueType=hqosSapIngressQueueType, hqosNetworkIngressLSPEXP=hqosNetworkIngressLSPEXP, hqosNetworkIngressLSPEXPRowStatus=hqosNetworkIngressLSPEXPRowStatus, qosVlanPortPolicyEnable=qosVlanPortPolicyEnable, hqosSapIngressDot1pEntry=hqosSapIngressDot1pEntry, qosIngressMapType=qosIngressMapType, hqosSapIngressQueueHiPriority=hqosSapIngressQueueHiPriority, hqosSapEgressFCLastChanged=hqosSapEgressFCLastChanged, hqosNetworkEgressFCRowStatus=hqosNetworkEgressFCRowStatus, qosServicePolicyTable=qosServicePolicyTable, qosVlanIndex=qosVlanIndex, tFCRowStatus=tFCRowStatus, TTailDropId=TTailDropId, hqosVirtualSchedulerRowStatus=hqosVirtualSchedulerRowStatus, qosNetworkPolicyEntry=qosNetworkPolicyEntry, hqosNetworkQueueFC=hqosNetworkQueueFC, qosIngressFC=qosIngressFC, hqosVirtualSchedulerName=hqosVirtualSchedulerName, qosVlanPolicySchedulingProfile=qosVlanPolicySchedulingProfile, tWfqServiceProfileDirection=tWfqServiceProfileDirection, hqosSapEgressFCQueue=hqosSapEgressFCQueue, qosServInQueueTailDropProfile=qosServInQueueTailDropProfile, hqosSapEgressQueueServWfq=hqosSapEgressQueueServWfq, hqosSapIngressDSCPFC=hqosSapIngressDSCPFC, hqosSapIngressEntry=hqosSapIngressEntry, qosSchedulingQ3Weight=qosSchedulingQ3Weight, TNetworkPolicyId=TNetworkPolicyId, hqosVirtualSchedulerDescription=hqosVirtualSchedulerDescription, tFCValue=tFCValue, tWredDescription=tWredDescription, TSapIngressPolicyId=TSapIngressPolicyId, hqosNetworkIngressLSPEXPConformance=hqosNetworkIngressLSPEXPConformance, Dot1PPriority=Dot1PPriority, qosQueueIndex=qosQueueIndex, hqosSapEgressObjects=hqosSapEgressObjects, tWredProfileTable=tWredProfileTable, qosVlanRowStatus=qosVlanRowStatus, hqosSapIngressDSCPConformance=hqosSapIngressDSCPConformance, hqosSapIngressQueue=hqosSapIngressQueue, qosMaxSredRedProbability=qosMaxSredRedProbability, qosVlanTable=qosVlanTable, qosServPolicyShaperProfile=qosServPolicyShaperProfile, hqosSapIngressObjects=hqosSapIngressObjects, qosNetworkIngressFC=qosNetworkIngressFC, qosNetworkQueueShaperProfile=qosNetworkQueueShaperProfile, qosVlanObjects=qosVlanObjects, hqosNetworkQueueLastChanged=hqosNetworkQueueLastChanged, qosGlobalIngressMapEntry=qosGlobalIngressMapEntry, tWredRedProbability=tWredRedProbability, qosNetworkIngressConformance=qosNetworkIngressConformance, tShaperLastChanged=tShaperLastChanged, hqosSapIngressDSCP=hqosSapIngressDSCP, hqosSapIngressIndex=hqosSapIngressIndex, hqosNetworkPolicyRowStatus=hqosNetworkPolicyRowStatus, hqosNetworkPolicyEgressRemark=hqosNetworkPolicyEgressRemark, TSSchedulingProfile=TSSchedulingProfile, tShaperProfileTable=tShaperProfileTable, qosSredProfile=qosSredProfile, qosVlanPolicyTable=qosVlanPolicyTable, qosSchedulingQ2Weight=qosSchedulingQ2Weight, qosServiceIngressPolicyEntry=qosServiceIngressPolicyEntry, tWredYellowProbability=tWredYellowProbability, PYSNMP_MODULE_ID=prvtQosMIB, serviceAccessSwitch=serviceAccessSwitch, hqosSapEgressEntry=hqosSapEgressEntry, qosStatisticsTable=qosStatisticsTable, qosVlanPolicyRowStatus=qosVlanPolicyRowStatus, qosIngressMapValue=qosIngressMapValue, tShaperProfileType=tShaperProfileType, qosServicePolicyDescription=qosServicePolicyDescription, hqosNetworkPolicyIngressConformance=hqosNetworkPolicyIngressConformance, qosServiceSapPortId=qosServiceSapPortId, qosEgressFCConformance=qosEgressFCConformance, hqosSapEgressFCDot1PValue=hqosSapEgressFCDot1PValue, hqosSchedulerPolicyType=hqosSchedulerPolicyType, qosServiceRowStatus=qosServiceRowStatus, TCIRRate=TCIRRate, qosNetworkPolicyRowStatus=qosNetworkPolicyRowStatus, hqosSapEgressQueueEntry=hqosSapEgressQueueEntry, qosInterfaceIndex=qosInterfaceIndex, hqosSapIngressDSCPEntry=hqosSapIngressDSCPEntry, hqosSapIngressFCLastChanged=hqosSapIngressFCLastChanged, hqosNetworkIngressLSPEXPFC=hqosNetworkIngressLSPEXPFC, tWfqNetworkProfileRowStatus=tWfqNetworkProfileRowStatus, TLspExpValue=TLspExpValue, qosInterfaceTable=qosInterfaceTable, qosStatisticsObjects=qosStatisticsObjects, tShaperDescription=tShaperDescription, qosSchedulingProfileDirection=qosSchedulingProfileDirection, hqosVirtualSchedulerEntry=hqosVirtualSchedulerEntry, TItemDescription=TItemDescription, tShaperProfile=tShaperProfile, qosNetPolicyTailDropProfile=qosNetPolicyTailDropProfile, hqosSapEgressFCQueueParent=hqosSapEgressFCQueueParent, tWfqServiceProfileWeight=tWfqServiceProfileWeight, TConformanceLevel=TConformanceLevel, qosIngressRowStatus=qosIngressRowStatus, hqosSapIngressDSCPTable=hqosSapIngressDSCPTable, tWredRowStatus=tWredRowStatus, tShaperCBS=tShaperCBS, hqosSapIngressRowStatus=hqosSapIngressRowStatus, hqosNetworkQueueShaper=hqosNetworkQueueShaper, qosTailDropProfileEntry=qosTailDropProfileEntry, qosServiceEntry=qosServiceEntry, hqosSapIngressDSCPLastChanged=hqosSapIngressDSCPLastChanged, qosVlanPolicyOnVlan=qosVlanPolicyOnVlan, qosNetworkQueueRowStatus=qosNetworkQueueRowStatus, TRateValue=TRateValue, qosNetworkPolicy=qosNetworkPolicy, hqosSapIngressDSCPRowStatus=hqosSapIngressDSCPRowStatus, hqosSapEgressIndex=hqosSapEgressIndex, hqosNetworkQueuePolicy=hqosNetworkQueuePolicy, hqosSapIngressDot1pRowStatus=hqosSapIngressDot1pRowStatus, hqosNetworkPolicyLastChanged=hqosNetworkPolicyLastChanged, qosTailDropProfileTable=qosTailDropProfileTable, TPriorityOrDefault=TPriorityOrDefault, hqosSchedulerPolicyEntry=hqosSchedulerPolicyEntry, hqosNetworkQueuePolicyRowStatus=hqosNetworkQueuePolicyRowStatus, tShaperRowStatus=tShaperRowStatus, hqosSapIngressFCQueue=hqosSapIngressFCQueue, qosServiceIngressPolicyTable=qosServiceIngressPolicyTable, TPIRRate=TPIRRate, hqosNetworkQueuePolicyDescription=hqosNetworkQueuePolicyDescription, hqosSapEgressTable=hqosSapEgressTable, hqosSapIngressDot1pFC=hqosSapIngressDot1pFC, qosServiceSapTable=qosServiceSapTable, qosNetworkPolicyObjects=qosNetworkPolicyObjects, TItemMatch=TItemMatch, tFCStorageType=tFCStorageType, hqosSapEgressFCTable=hqosSapEgressFCTable, qosSchedulingQ7Weight=qosSchedulingQ7Weight, hqosSapIngressQueueRowStatus=hqosSapIngressQueueRowStatus, TFCName=TFCName, qosVlanIngressPortEntry=qosVlanIngressPortEntry, hqosSapIngressDot1pConformance=hqosSapIngressDot1pConformance, tWfqSchedulerProfileDirection=tWfqSchedulerProfileDirection, qosServInQueueQueue=qosServInQueueQueue, hqosSapIngressFCQueueType=hqosSapIngressFCQueueType, qosGlobalObjects=qosGlobalObjects, qosVlanInQueueShaperProfile=qosVlanInQueueShaperProfile, hqosSchedulerPolicyName=hqosSchedulerPolicyName, qosVlanInQueueTailDropProfile=qosVlanInQueueTailDropProfile, qosMaxSredYellowTreshold=qosMaxSredYellowTreshold, tWfqSchedulerProfileWeight=tWfqSchedulerProfileWeight, TNetworkPolicyIdOrNone=TNetworkPolicyIdOrNone, qosSchedulingProfileTable=qosSchedulingProfileTable, qosServiceIngressQueueTable=qosServiceIngressQueueTable, qosMaxSredYellowProbaility=qosMaxSredYellowProbaility, TSapIngressPolicyIdOrNone=TSapIngressPolicyIdOrNone, tWfqNetworkProfileEntry=tWfqNetworkProfileEntry, tWfqServiceProfileEntry=tWfqServiceProfileEntry, qosMaxTailDropYellowTreshold=qosMaxTailDropYellowTreshold, hqosNetworkQueueHiPriority=hqosNetworkQueueHiPriority, qosSchedulingQ4Weight=qosSchedulingQ4Weight, qosVlanIngressQueueTable=qosVlanIngressQueueTable, hqosNetworkEgressFCLastChanged=hqosNetworkEgressFCLastChanged, qosNetworkQueue=qosNetworkQueue, hqosNetworkQueueFCTable=hqosNetworkQueueFCTable, hqosNetworkQueueTable=hqosNetworkQueueTable, qosNetworkQueueTailDropProfile=qosNetworkQueueTailDropProfile, hqosSapIngressFCTable=hqosSapIngressFCTable, qosGlobalEgressRemarkEntry=qosGlobalEgressRemarkEntry, qosVlanPolicyDescription=qosVlanPolicyDescription, qosServPolicyTailDropProfile=qosServPolicyTailDropProfile, TEgressQueueId=TEgressQueueId, hqosNetworkPolicyIndex=hqosNetworkPolicyIndex, hqosNetworkQueuePolicyTable=hqosNetworkQueuePolicyTable, qosNetworkPolicyTable=qosNetworkPolicyTable, qosStatInterfaceIndex=qosStatInterfaceIndex, TWeight=TWeight, qosTrustDot1pMode=qosTrustDot1pMode, tWredRedMaxAverage=tWredRedMaxAverage, qosNetPolicySchedulingProfile=qosNetPolicySchedulingProfile, hqosSapEgressQueueType=hqosSapEgressQueueType, qosServiceSapEntry=qosServiceSapEntry, tWfqObjects=tWfqObjects, TQEncapVal=TQEncapVal, hqosNetworkQueueFCType=hqosNetworkQueueFCType, tWredObjects=tWredObjects, qosNetworkQueueSredProfile=qosNetworkQueueSredProfile, TNamedItemOrEmpty=TNamedItemOrEmpty, hqosSapIngressDefaultVptFC=hqosSapIngressDefaultVptFC, tCongestionAvoidanceProfileObjects=tCongestionAvoidanceProfileObjects, tWfqNetworkProfileWeight=tWfqNetworkProfileWeight, qosServicePolicyObjects=qosServicePolicyObjects, hqosNetworkEgressFCNumber=hqosNetworkEgressFCNumber, hqosSapIngressQueueLastChanged=hqosSapIngressQueueLastChanged, hqosSapIngressFCNumber=hqosSapIngressFCNumber, hqosNetworkPolicyEntry=hqosNetworkPolicyEntry, tFCName=tFCName, hqosSapIngressDot1pValue=hqosSapIngressDot1pValue, hqosNetworkPolicyTable=hqosNetworkPolicyTable, hqosNetworkEgressFCDot1Priority=hqosNetworkEgressFCDot1Priority, hqosSapEgressQueueIndex=hqosSapEgressQueueIndex, qosServicePolicy=qosServicePolicy, hqosNetworkQueueWfqProfile=hqosNetworkQueueWfqProfile, qosTrustDscpMode=qosTrustDscpMode, tShaperPIR=tShaperPIR, qosReceivedBytes=qosReceivedBytes, hqosSapEgressQueueLevel=hqosSapEgressQueueLevel, TTreshold=TTreshold, TNamedItem=TNamedItem, hqosSapIngressQueueEntry=hqosSapIngressQueueEntry, qosServicePolicyRowStatus=qosServicePolicyRowStatus, tWredGreenMaxAverage=tWredGreenMaxAverage, tWfqServiceProfileTable=tWfqServiceProfileTable, hqosSapIngressQueueTable=hqosSapIngressQueueTable, qosServicePolicyOnServ=qosServicePolicyOnServ, qosServiceSapPolicyEnable=qosServiceSapPolicyEnable, hqosSapEgressFCEntryType=hqosSapEgressFCEntryType, qosServiceTable=qosServiceTable, hqosNetworkQueuePolicyLastChanged=hqosNetworkQueuePolicyLastChanged, qosInterfaceObjects=qosInterfaceObjects, hqosSchedulerPolicyLastChanged=hqosSchedulerPolicyLastChanged, qosGlobalIngressMapTable=qosGlobalIngressMapTable, hqosSapEgressQueueParent=hqosSapEgressQueueParent, TIngressQueueId=TIngressQueueId, TLevel=TLevel, qosSchedulingProfileEntry=qosSchedulingProfileEntry, qosTailDropProfile=qosTailDropProfile, hqosNetworkQueueWred=hqosNetworkQueueWred, qosEgressFC=qosEgressFC)
mibBuilder.exportSymbols("PRVT-QOS-MIB", hqosSapIngressDot1pTable=hqosSapIngressDot1pTable, qosIngressFCConformance=qosIngressFCConformance, tShaperObjects=tShaperObjects, hqosSapIngressQueueLevel=hqosSapIngressQueueLevel, tWfqSchedulerProfileCIRWeight=tWfqSchedulerProfileCIRWeight, hqosSapIngressLastChanged=hqosSapIngressLastChanged, qosSchedulingQ8Weight=qosSchedulingQ8Weight, qosInterfaceRowStatus=qosInterfaceRowStatus, hqosSapEgressDescription=hqosSapEgressDescription, hqosVirtualSchedulerPriority=hqosVirtualSchedulerPriority, qosEgressRemarkType=qosEgressRemarkType, hqosNetworkQueuePolicyEntry=hqosNetworkQueuePolicyEntry, TFCNameOrEmpty=TFCNameOrEmpty, hqosSapEgressFCDSCPValue=hqosSapEgressFCDSCPValue, qosServPolicySchedulingProfile=qosServPolicySchedulingProfile, hqosSapIngressFCRowStatus=hqosSapIngressFCRowStatus, prvtQosMIB=prvtQosMIB, qosInterfacePolicy=qosInterfacePolicy, qosNetworkPolicyDescription=qosNetworkPolicyDescription, qosServInQueueShaperProfile=qosServInQueueShaperProfile, TPriority=TPriority, hqosSchedulerPolicyTable=hqosSchedulerPolicyTable, qosNetPolicySredProfile=qosNetPolicySredProfile, hqosNetworkQueueFCLastChanged=hqosNetworkQueueFCLastChanged, qosServicePolicyEntry=qosServicePolicyEntry, tFCNameTable=tFCNameTable, hqosNetworkEgressFCConformance=hqosNetworkEgressFCConformance, qosServiceIngressQueueEntry=qosServiceIngressQueueEntry, hqosNetworkPolicyIngressDefaultActionFC=hqosNetworkPolicyIngressDefaultActionFC, qosSchedulingQ6Weight=qosSchedulingQ6Weight, qosVlanInQueueRowStatus=qosVlanInQueueRowStatus, hqosNetworkIngressLSPEXPEntry=hqosNetworkIngressLSPEXPEntry, hqosVirtualSchedulerLevel=hqosVirtualSchedulerLevel, qosTrustDot1pModePreservePriority=qosTrustDot1pModePreservePriority, TSredId=TSredId, hqosVirtualSchedulerShaper=hqosVirtualSchedulerShaper, tWfqNetworkProfileNumber=tWfqNetworkProfileNumber, qosVlanPolicy=qosVlanPolicy, tWredGreenProbability=tWredGreenProbability, tWredLastChanged=tWredLastChanged, qosNetworkIngressTable=qosNetworkIngressTable, hqosNetworkIngressLSPEXPLastChanged=hqosNetworkIngressLSPEXPLastChanged, hqosSapEgressQueueRowStatus=hqosSapEgressQueueRowStatus, tWfqSchedulerProfileEntry=tWfqSchedulerProfileEntry, qosServiceSapRowStatus=qosServiceSapRowStatus, qosSchedulingProfileObjects=qosSchedulingProfileObjects, tWfqSchedulerProfileRowStatus=tWfqSchedulerProfileRowStatus, qosEgressRowStatus=qosEgressRowStatus, TSapEgressPolicyIdOrNone=TSapEgressPolicyIdOrNone, hqosNetworkQueueEntry=hqosNetworkQueueEntry, hqosSchedulerPolicyRowStatus=hqosSchedulerPolicyRowStatus, qosVlanPortRowStatus=qosVlanPortRowStatus, qosVlanIngressPortTable=qosVlanIngressPortTable, hqosSapEgressQueueTable=hqosSapEgressQueueTable, qosDroppedBytes=qosDroppedBytes, tWfqNetworkProfileTable=tWfqNetworkProfileTable, tWfqServiceProfileRowStatus=tWfqServiceProfileRowStatus, tShaperMBS=tShaperMBS, qosSchedulingQ5Weight=qosSchedulingQ5Weight, hqosSapIngressDescription=hqosSapIngressDescription, qosStatisticsEntry=qosStatisticsEntry, hqosNetworkQueueObjects=hqosNetworkQueueObjects, hqosNetworkEgressFCLspExpValue=hqosNetworkEgressFCLspExpValue, qosVlanEntry=qosVlanEntry, tWredGreenStartAverage=tWredGreenStartAverage, hqosVirtualSchedulerParent=hqosVirtualSchedulerParent, TSlopePolicy=TSlopePolicy, qosMaxSredRedTreshold=qosMaxSredRedTreshold, qosVlanPolicyShaperProfile=qosVlanPolicyShaperProfile, hqosSapIngressFCQueueParent=hqosSapIngressFCQueueParent, qosServiceSapEncapValue=qosServiceSapEncapValue, tWredProfile=tWredProfile, hqosNetworkQueueRowStatus=hqosNetworkQueueRowStatus, qosEgressRemarkValue=qosEgressRemarkValue, tShaperProfileDirection=tShaperProfileDirection, hqosSapIngressFCEntry=hqosSapIngressFCEntry, hqosSapEgressRowStatus=hqosSapEgressRowStatus, qosVlanIngressQueueEntry=qosVlanIngressQueueEntry, qosVlanIngressPolicyTable=qosVlanIngressPolicyTable, tWfqSchedulerProfileNumber=tWfqSchedulerProfileNumber, qosVlanIngressPortId=qosVlanIngressPortId, hqosSapIngressDot1pLastChanged=hqosSapIngressDot1pLastChanged, tFCObjects=tFCObjects, hqosSapIngressDefaultDscpFC=hqosSapIngressDefaultDscpFC, hqosNetworkObjects=hqosNetworkObjects, qosTailDropRowStatus=qosTailDropRowStatus, hqosNetworkQueueFCRowStatus=hqosNetworkQueueFCRowStatus, hqosNetworkQueueType=hqosNetworkQueueType, qosServiceIndex=qosServiceIndex, qosVlanInQueueQueue=qosVlanInQueueQueue, tShaperCIR=tShaperCIR, qosGlobalEgressRemarkTable=qosGlobalEgressRemarkTable, tWfqNetworkProfileCIRWeight=tWfqNetworkProfileCIRWeight, qosVlanPolicyTailDropProfile=qosVlanPolicyTailDropProfile, hqosNetworkEgressFCTable=hqosNetworkEgressFCTable, qosNetworkIngressEntry=qosNetworkIngressEntry, qosInterfaceEntry=qosInterfaceEntry, hqosNetworkQueueParent=hqosNetworkQueueParent, hqosNetworkQueueFCEntry=hqosNetworkQueueFCEntry, hqosSapEgressFCNumber=hqosSapEgressFCNumber, hqosVirtualSchedulerWfqProfile=hqosVirtualSchedulerWfqProfile, hqosSapIngressTable=hqosSapIngressTable, tFCNameLastChanged=tFCNameLastChanged, hqosVirtualSchedulerLastChanged=hqosVirtualSchedulerLastChanged, hqosNetworkIngressLSPEXPTable=hqosNetworkIngressLSPEXPTable, TDSCPValue=TDSCPValue, qosSchedulingRowStatus=qosSchedulingRowStatus, tWfqServiceProfileNumber=tWfqServiceProfileNumber, qosServInQueueRowStatus=qosServInQueueRowStatus, hqosSchedulerObjects=hqosSchedulerObjects, qosNetworkEgressQueueTable=qosNetworkEgressQueueTable, hqosVirtualSchedulerTable=hqosVirtualSchedulerTable, qosSredRowStatus=qosSredRowStatus, hqosSapEgressQueueHiPriority=hqosSapEgressQueueHiPriority, qosMaxTailDropRedTreshold=qosMaxTailDropRedTreshold, hqosSapEgressLastChanged=hqosSapEgressLastChanged, qosVlanPolicyEntry=qosVlanPolicyEntry, hqosNetworkQueueFCNumber=hqosNetworkQueueFCNumber, hqosSapEgressQueueLastChanged=hqosSapEgressQueueLastChanged, qosNetworkEgressEntry=qosNetworkEgressEntry, TSapEgressPolicyId=TSapEgressPolicyId, hqosSapIngressQueueServWfq=hqosSapIngressQueueServWfq, qosSchedulingType=qosSchedulingType)
