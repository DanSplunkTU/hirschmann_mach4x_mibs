#
# PySNMP MIB module ALCATEL-IND1-RDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-RDP-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:27 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1RDP, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1RDP")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, ObjectIdentity, Counter64, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, IpAddress, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1RouterDiscoveryProtocolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1))
alcatelIND1RouterDiscoveryProtocolMIB.setRevisions(('2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setOrganization('Alcatel-Lucent')
alcatelIND1RDPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1))
alaRDPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1))
alaRDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRDPStatus.setStatus('current')
alaRDPIfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20), )
if mibBuilder.loadTexts: alaRDPIfTable.setStatus('current')
alaRDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-RDP-MIB", "alaRDPIfAddr"))
if mibBuilder.loadTexts: alaRDPIfEntry.setStatus('current')
alaRDPIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfAddr.setStatus('current')
alaRDPIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfStatus.setStatus('current')
alaRDPIfAdvtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfAdvtAddress.setStatus('current')
alaRDPIfMaxAdvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 4), Unsigned32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfMaxAdvtInterval.setStatus('current')
alaRDPIfMinAdvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfMinAdvtInterval.setStatus('current')
alaRDPIfAdvLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfAdvLifeTime.setStatus('current')
alaRDPIfPrefLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfPrefLevel.setStatus('current')
alaRDPIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 8), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfRowStatus.setStatus('current')
alaRDPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfName.setStatus('current')
alaRDPIPIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIPIfStatus.setStatus('current')
alaRDPVrrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPVrrpStatus.setStatus('current')
alcatelIND1RDPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2))
alcatelIND1RDPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 1))
alcatelIND1RDPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 2))
alcatelIND1RDPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-RDP-MIB", "alaRDPConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RDPMIBCompliance = alcatelIND1RDPMIBCompliance.setStatus('current')
alaRDPConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-RDP-MIB", "alaRDPStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAddr"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAdvtAddress"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfMaxAdvtInterval"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfMinAdvtInterval"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAdvLifeTime"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfPrefLevel"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfRowStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfName"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIPIfStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPVrrpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRDPConfigMIBGroup = alaRDPConfigMIBGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-RDP-MIB", alcatelIND1RouterDiscoveryProtocolMIB=alcatelIND1RouterDiscoveryProtocolMIB, alaRDPIfName=alaRDPIfName, alaRDPConfig=alaRDPConfig, alcatelIND1RDPMIBObjects=alcatelIND1RDPMIBObjects, alaRDPIfPrefLevel=alaRDPIfPrefLevel, alaRDPIfRowStatus=alaRDPIfRowStatus, alaRDPStatus=alaRDPStatus, alaRDPIfEntry=alaRDPIfEntry, alaRDPIfStatus=alaRDPIfStatus, alaRDPIfMaxAdvtInterval=alaRDPIfMaxAdvtInterval, alcatelIND1RDPMIBGroups=alcatelIND1RDPMIBGroups, PYSNMP_MODULE_ID=alcatelIND1RouterDiscoveryProtocolMIB, alaRDPVrrpStatus=alaRDPVrrpStatus, alcatelIND1RDPMIBCompliances=alcatelIND1RDPMIBCompliances, alaRDPIfMinAdvtInterval=alaRDPIfMinAdvtInterval, alaRDPIPIfStatus=alaRDPIPIfStatus, alaRDPIfTable=alaRDPIfTable, alcatelIND1RDPMIBConformance=alcatelIND1RDPMIBConformance, alaRDPConfigMIBGroup=alaRDPConfigMIBGroup, alcatelIND1RDPMIBCompliance=alcatelIND1RDPMIBCompliance, alaRDPIfAddr=alaRDPIfAddr, alaRDPIfAdvtAddress=alaRDPIfAdvtAddress, alaRDPIfAdvLifeTime=alaRDPIfAdvLifeTime)
