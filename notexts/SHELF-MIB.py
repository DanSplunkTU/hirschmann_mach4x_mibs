#
# PySNMP MIB module SHELF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/SHELF-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:25:21 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
SagemBoolean, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "Severity")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, iso, TimeTicks, NotificationType, ObjectIdentity, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, IpAddress, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "IpAddress", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
shelf = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 150))
if mibBuilder.loadTexts: shelf.setLastUpdated('0012060000Z')
if mibBuilder.loadTexts: shelf.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
led = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 2))
holdTime = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 3))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 20))
boardList = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 30))
softInv = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 40))
hardInv = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 50))
laser = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 100))
eow = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 120))
boardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardNumber.setStatus('current')
boardTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2), )
if mibBuilder.loadTexts: boardTable.setStatus('current')
boardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1), ).setIndexNames((0, "SHELF-MIB", "boardIndex"))
if mibBuilder.loadTexts: boardEntry.setStatus('current')
class ProtectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("cardp", 1))

class BoardFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("missing", 1), ("mismatch", 2), ("defective", 3))

boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIndex.setStatus('current')
boardSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSlotName.setStatus('current')
boardExpectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardExpectType.setStatus('current')
boardInsertType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardInsertType.setStatus('current')
boardExpectFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardExpectFamily.setStatus('current')
boardInsertFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardInsertFamily.setStatus('current')
boardActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardActive.setStatus('current')
boardFirstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirstPortIndex.setStatus('current')
boardProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 9), ProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardProtectionType.setStatus('current')
boardMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 10), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMonitor.setStatus('current')
boardFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 11), BoardFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFailure.setStatus('current')
boardSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 12), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSeverity.setStatus('current')
boardMissingSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 13), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMissingSev.setStatus('current')
boardMismatchSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 14), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMismatchSev.setStatus('current')
boardDefectiveSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 15), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardDefectiveSev.setStatus('current')
boardListNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListNumber.setStatus('current')
boardListTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2), )
if mibBuilder.loadTexts: boardListTable.setStatus('current')
boardListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1), ).setIndexNames((0, "SHELF-MIB", "boardListIndex"))
if mibBuilder.loadTexts: boardListEntry.setStatus('current')
boardListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListIndex.setStatus('current')
boardListSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListSlot.setStatus('current')
boardListType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListType.setStatus('current')
softInventoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 40, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryNumber.setStatus('current')
softInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2), )
if mibBuilder.loadTexts: softInventoryTable.setStatus('current')
softInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1), ).setIndexNames((0, "SHELF-MIB", "softInventoryIndex"))
if mibBuilder.loadTexts: softInventoryEntry.setStatus('current')
softInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryIndex.setStatus('current')
softInventoryBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryBoard.setStatus('current')
softInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryType.setStatus('current')
softInventoryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryCode.setStatus('current')
softInventoryExt = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryExt.setStatus('current')
hardInventoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 50, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryNumber.setStatus('current')
hardInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2), )
if mibBuilder.loadTexts: hardInventoryTable.setStatus('current')
hardInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1), ).setIndexNames((0, "SHELF-MIB", "hardInventoryIndex"))
if mibBuilder.loadTexts: hardInventoryEntry.setStatus('current')
hardInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryIndex.setStatus('current')
hardInventoryBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryBoard.setStatus('current')
hardInventoryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryDescr.setStatus('current')
laserNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 100, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserNumber.setStatus('current')
laserTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2), )
if mibBuilder.loadTexts: laserTable.setStatus('current')
laserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1), ).setIndexNames((0, "SHELF-MIB", "laserIndex"))
if mibBuilder.loadTexts: laserEntry.setStatus('current')
laserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserIndex.setStatus('current')
laserTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTxEnable.setStatus('current')
laserALSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSEnable.setStatus('current')
laserALSRestart2s = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSRestart2s.setStatus('current')
laserALSRestart90s = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 5), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSRestart90s.setStatus('current')
adrHotReset = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 1), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrHotReset.setStatus('current')
class LedStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("green", 2), ("yellow", 3), ("orange", 4), ("red", 5))

class LedType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("status1", 1), ("status2", 2), ("online", 3), ("traffic", 4), ("major", 5), ("minor", 6), ("ether", 7), ("halfFull", 8))

ledNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledNumber.setStatus('current')
ledTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2), )
if mibBuilder.loadTexts: ledTable.setStatus('current')
ledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1), ).setIndexNames((0, "SHELF-MIB", "ledIndex"))
if mibBuilder.loadTexts: ledEntry.setStatus('current')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIndex.setStatus('current')
ledPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPosition.setStatus('current')
ledType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 3), LedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledType.setStatus('current')
ledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 4), LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledStatus.setStatus('current')
class HoldTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 10, 30))
    namedValues = NamedValues(("hold01sec", 1), ("hold03sec", 3), ("hold10sec", 10), ("hold30sec", 30))

adrFailHoldOffTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 3, 1), HoldTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrFailHoldOffTime.setStatus('current')
adrFailHoldOnTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 3, 2), HoldTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrFailHoldOnTime.setStatus('current')
class EOWClockMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("codirectionnal", 0), ("contradirSlave", 1), ("contradirMaster", 2))

class EOWType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("rsE1", 1), ("rsF1", 2), ("rsOther", 3), ("msE2", 4), ("aux", 5))

eowNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 120, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowNumber.setStatus('current')
eowTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2), )
if mibBuilder.loadTexts: eowTable.setStatus('current')
eowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1), ).setIndexNames((0, "SHELF-MIB", "eowIndex"))
if mibBuilder.loadTexts: eowEntry.setStatus('current')
eowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowIndex.setStatus('current')
eowName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowName.setStatus('current')
eowSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 6), EOWType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSrcType.setStatus('current')
eowSrcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSrcPtr.setStatus('current')
eowSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 8), EOWType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSinkType.setStatus('current')
eowSinkPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSinkPtr.setStatus('current')
eowClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 10), EOWClockMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowClockMode.setStatus('current')
mibBuilder.exportSymbols("SHELF-MIB", adrHotReset=adrHotReset, laserALSRestart2s=laserALSRestart2s, eowSrcType=eowSrcType, softInventoryType=softInventoryType, eowNumber=eowNumber, boardActive=boardActive, hardInventoryNumber=hardInventoryNumber, HoldTime=HoldTime, boardListType=boardListType, laserEntry=laserEntry, led=led, laser=laser, eowName=eowName, eow=eow, boardExpectFamily=boardExpectFamily, PYSNMP_MODULE_ID=shelf, BoardFailure=BoardFailure, ledNumber=ledNumber, eowSinkType=eowSinkType, boardDefectiveSev=boardDefectiveSev, ledStatus=ledStatus, boardListEntry=boardListEntry, eowEntry=eowEntry, laserALSEnable=laserALSEnable, laserTable=laserTable, boardListIndex=boardListIndex, boardMismatchSev=boardMismatchSev, ProtectionType=ProtectionType, boardIndex=boardIndex, boardFirstPortIndex=boardFirstPortIndex, boardMonitor=boardMonitor, boardList=boardList, hardInventoryEntry=hardInventoryEntry, boardEntry=boardEntry, hardInventoryIndex=hardInventoryIndex, softInventoryEntry=softInventoryEntry, laserALSRestart90s=laserALSRestart90s, boardListNumber=boardListNumber, ledType=ledType, EOWType=EOWType, eowIndex=eowIndex, laserNumber=laserNumber, boardListSlot=boardListSlot, softInventoryTable=softInventoryTable, softInventoryNumber=softInventoryNumber, laserIndex=laserIndex, ledTable=ledTable, ledPosition=ledPosition, laserTxEnable=laserTxEnable, boardInsertType=boardInsertType, boardTable=boardTable, boardExpectType=boardExpectType, ledIndex=ledIndex, softInventoryIndex=softInventoryIndex, LedType=LedType, adrFailHoldOnTime=adrFailHoldOnTime, boardSlotName=boardSlotName, eowSrcPtr=eowSrcPtr, boardInsertFamily=boardInsertFamily, boardListTable=boardListTable, holdTime=holdTime, hardInv=hardInv, ledEntry=ledEntry, adrFailHoldOffTime=adrFailHoldOffTime, boardProtectionType=boardProtectionType, softInventoryExt=softInventoryExt, eowTable=eowTable, hardInventoryDescr=hardInventoryDescr, hardInventoryBoard=hardInventoryBoard, eowClockMode=eowClockMode, softInventoryBoard=softInventoryBoard, LedStatus=LedStatus, softInv=softInv, shelf=shelf, boardFailure=boardFailure, softInventoryCode=softInventoryCode, board=board, boardNumber=boardNumber, boardMissingSev=boardMissingSev, boardSeverity=boardSeverity, hardInventoryTable=hardInventoryTable, EOWClockMode=EOWClockMode, eowSinkPtr=eowSinkPtr)
