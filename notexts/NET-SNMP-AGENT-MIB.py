#
# PySNMP MIB module NET-SNMP-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netsnmp/NET-SNMP-AGENT-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 20:59:49 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
netSnmpNotifications, netSnmpObjects, netSnmpGroups, netSnmpModuleIDs = mibBuilder.importSymbols("NET-SNMP-MIB", "netSnmpNotifications", "netSnmpObjects", "netSnmpGroups", "netSnmpModuleIDs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Bits, Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, IpAddress, ObjectIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Integer32", "Counter64")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
netSnmpAgentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8072, 3, 1, 2))
netSnmpAgentMIB.setRevisions(('2010-03-17 00:00', '2005-02-07 00:00', '2002-02-09 00:00',))
if mibBuilder.loadTexts: netSnmpAgentMIB.setLastUpdated('201003170000Z')
if mibBuilder.loadTexts: netSnmpAgentMIB.setOrganization('www.net-snmp.org')
nsVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 1))
nsMibRegistry = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 2))
nsExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3))
nsDLMod = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 4))
nsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 5))
nsErrorHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 6))
nsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7))
nsTransactions = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 8))
class NetsnmpCacheStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("empty", 3), ("cached", 4), ("expired", 5))

nsCacheDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 5, 1), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCacheDefaultTimeout.setStatus('current')
nsCacheEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCacheEnabled.setStatus('current')
nsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3), )
if mibBuilder.loadTexts: nsCacheTable.setStatus('current')
nsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1), ).setIndexNames((1, "NET-SNMP-AGENT-MIB", "nsCachedOID"))
if mibBuilder.loadTexts: nsCacheEntry.setStatus('current')
nsCachedOID = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: nsCachedOID.setStatus('current')
nsCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCacheTimeout.setStatus('current')
nsCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 5, 3, 1, 3), NetsnmpCacheStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsCacheStatus.setStatus('current')
nsConfigDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1))
nsConfigLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2))
nsDebugEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsDebugEnabled.setStatus('current')
nsDebugOutputAll = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsDebugOutputAll.setStatus('current')
nsDebugDumpPdu = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsDebugDumpPdu.setStatus('current')
nsDebugTokenTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4), )
if mibBuilder.loadTexts: nsDebugTokenTable.setStatus('current')
nsDebugTokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1), ).setIndexNames((1, "NET-SNMP-AGENT-MIB", "nsDebugTokenPrefix"))
if mibBuilder.loadTexts: nsDebugTokenEntry.setStatus('current')
nsDebugTokenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1, 2), DisplayString())
if mibBuilder.loadTexts: nsDebugTokenPrefix.setStatus('current')
nsDebugTokenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsDebugTokenStatus.setStatus('current')
nsLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1), )
if mibBuilder.loadTexts: nsLoggingTable.setStatus('current')
nsLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1), ).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsLogLevel"), (1, "NET-SNMP-AGENT-MIB", "nsLogToken"))
if mibBuilder.loadTexts: nsLoggingEntry.setStatus('current')
nsLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))))
if mibBuilder.loadTexts: nsLogLevel.setStatus('current')
nsLogToken = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: nsLogToken.setStatus('current')
nsLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("stdout", 1), ("stderr", 2), ("file", 3), ("syslog", 4), ("callback", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsLogType.setStatus('current')
nsLogMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))).clone('emergency')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsLogMaxLevel.setStatus('current')
nsLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 7, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsLogStatus.setStatus('current')
nsTransactionTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1), )
if mibBuilder.loadTexts: nsTransactionTable.setStatus('current')
nsTransactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1), ).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsTransactionID"))
if mibBuilder.loadTexts: nsTransactionEntry.setStatus('current')
nsTransactionID = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: nsTransactionID.setStatus('current')
nsTransactionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTransactionMode.setStatus('current')
nsModuleTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1), )
if mibBuilder.loadTexts: nsModuleTable.setStatus('current')
nsModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1), ).setIndexNames((0, "NET-SNMP-AGENT-MIB", "nsmContextName"), (0, "NET-SNMP-AGENT-MIB", "nsmRegistrationPoint"), (0, "NET-SNMP-AGENT-MIB", "nsmRegistrationPriority"))
if mibBuilder.loadTexts: nsModuleEntry.setStatus('current')
nsmContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: nsmContextName.setStatus('current')
nsmRegistrationPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: nsmRegistrationPoint.setStatus('current')
nsmRegistrationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: nsmRegistrationPriority.setStatus('current')
nsModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModuleName.setStatus('current')
nsModuleModes = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("getAndGetNext", 0), ("set", 1), ("getBulk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModuleModes.setStatus('current')
nsModuleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModuleTimeout.setStatus('current')
nsNotifyStart = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 1))
if mibBuilder.loadTexts: nsNotifyStart.setStatus('current')
nsNotifyShutdown = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 2))
if mibBuilder.loadTexts: nsNotifyShutdown.setStatus('current')
nsNotifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 8072, 4, 0, 3))
if mibBuilder.loadTexts: nsNotifyRestart.setStatus('current')
nsModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 2)).setObjects(("NET-SNMP-AGENT-MIB", "nsModuleName"), ("NET-SNMP-AGENT-MIB", "nsModuleModes"), ("NET-SNMP-AGENT-MIB", "nsModuleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsModuleGroup = nsModuleGroup.setStatus('current')
nsCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 4)).setObjects(("NET-SNMP-AGENT-MIB", "nsCacheDefaultTimeout"), ("NET-SNMP-AGENT-MIB", "nsCacheEnabled"), ("NET-SNMP-AGENT-MIB", "nsCacheTimeout"), ("NET-SNMP-AGENT-MIB", "nsCacheStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsCacheGroup = nsCacheGroup.setStatus('current')
nsConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7))
nsDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7, 1)).setObjects(("NET-SNMP-AGENT-MIB", "nsDebugEnabled"), ("NET-SNMP-AGENT-MIB", "nsDebugOutputAll"), ("NET-SNMP-AGENT-MIB", "nsDebugDumpPdu"), ("NET-SNMP-AGENT-MIB", "nsDebugTokenStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsDebugGroup = nsDebugGroup.setStatus('current')
nsLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 7, 2)).setObjects(("NET-SNMP-AGENT-MIB", "nsLogType"), ("NET-SNMP-AGENT-MIB", "nsLogMaxLevel"), ("NET-SNMP-AGENT-MIB", "nsLogStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsLoggingGroup = nsLoggingGroup.setStatus('current')
nsTransactionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 8)).setObjects(("NET-SNMP-AGENT-MIB", "nsTransactionMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsTransactionGroup = nsTransactionGroup.setStatus('current')
nsAgentNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8072, 5, 2, 9)).setObjects(("NET-SNMP-AGENT-MIB", "nsNotifyStart"), ("NET-SNMP-AGENT-MIB", "nsNotifyShutdown"), ("NET-SNMP-AGENT-MIB", "nsNotifyRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsAgentNotifyGroup = nsAgentNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("NET-SNMP-AGENT-MIB", nsDebugTokenTable=nsDebugTokenTable, nsNotifyRestart=nsNotifyRestart, nsCacheEnabled=nsCacheEnabled, nsMibRegistry=nsMibRegistry, nsLogToken=nsLogToken, nsCacheTable=nsCacheTable, nsModuleName=nsModuleName, nsConfiguration=nsConfiguration, nsLogLevel=nsLogLevel, nsModuleTable=nsModuleTable, nsNotifyStart=nsNotifyStart, nsConfigLogging=nsConfigLogging, nsCache=nsCache, nsTransactionMode=nsTransactionMode, nsCacheStatus=nsCacheStatus, nsModuleGroup=nsModuleGroup, nsConfigGroups=nsConfigGroups, nsDebugEnabled=nsDebugEnabled, nsLoggingGroup=nsLoggingGroup, NetsnmpCacheStatus=NetsnmpCacheStatus, nsLogStatus=nsLogStatus, nsTransactionEntry=nsTransactionEntry, nsExtensions=nsExtensions, nsCachedOID=nsCachedOID, nsErrorHistory=nsErrorHistory, nsTransactionTable=nsTransactionTable, nsDebugOutputAll=nsDebugOutputAll, nsLogMaxLevel=nsLogMaxLevel, nsNotifyShutdown=nsNotifyShutdown, nsModuleTimeout=nsModuleTimeout, nsCacheGroup=nsCacheGroup, nsmRegistrationPoint=nsmRegistrationPoint, nsCacheTimeout=nsCacheTimeout, nsCacheEntry=nsCacheEntry, nsDebugDumpPdu=nsDebugDumpPdu, nsLoggingEntry=nsLoggingEntry, nsTransactionID=nsTransactionID, nsCacheDefaultTimeout=nsCacheDefaultTimeout, nsAgentNotifyGroup=nsAgentNotifyGroup, nsDebugGroup=nsDebugGroup, nsModuleEntry=nsModuleEntry, nsConfigDebug=nsConfigDebug, PYSNMP_MODULE_ID=netSnmpAgentMIB, nsmRegistrationPriority=nsmRegistrationPriority, nsLogType=nsLogType, nsDebugTokenStatus=nsDebugTokenStatus, nsLoggingTable=nsLoggingTable, netSnmpAgentMIB=netSnmpAgentMIB, nsDLMod=nsDLMod, nsModuleModes=nsModuleModes, nsDebugTokenPrefix=nsDebugTokenPrefix, nsmContextName=nsmContextName, nsTransactionGroup=nsTransactionGroup, nsVersion=nsVersion, nsDebugTokenEntry=nsDebugTokenEntry, nsTransactions=nsTransactions)
