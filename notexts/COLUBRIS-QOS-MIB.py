#
# PySNMP MIB module COLUBRIS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hpmsm/COLUBRIS-QOS-MIB.my
# Produced by pysmi-1.1.3 at Wed Dec  1 17:02:42 2021
# On host fv-az36-754 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisPriorityQueue, = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisPriorityQueue")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Gauge32, Integer32, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, iso, Counter32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Gauge32", "Integer32", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "iso", "Counter32", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
colubrisQOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 13))
if mibBuilder.loadTexts: colubrisQOS.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: colubrisQOS.setOrganization('Colubris Networks, Inc.')
colubrisQOSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1))
coQOSStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1))
coQOSCountersTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1), )
if mibBuilder.loadTexts: coQOSCountersTable.setStatus('current')
coQOSCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-QOS-MIB", "coQOSQueueId"))
if mibBuilder.loadTexts: coQOSCountersEntry.setStatus('current')
coQOSQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 1), ColubrisPriorityQueue())
if mibBuilder.loadTexts: coQOSQueueId.setStatus('current')
coQOSTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSTransmittedFrameCount.setStatus('current')
coQOSMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastTransmittedFrameCount.setStatus('current')
coQOSFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFailedCount.setStatus('current')
coQOSRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSRetryCount.setStatus('current')
coQOSMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMultipleRetryCount.setStatus('current')
coQOSFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFrameDuplicateCount.setStatus('current')
coQOSReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSReceivedFrameCount.setStatus('current')
coQOSMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastReceivedFrameCount.setStatus('current')
coQOSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2))
coQOSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1))
coQOSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2))
coQOSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCompliance = coQOSCompliance.setStatus('current')
coQOSCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSFailedCount"), ("COLUBRIS-QOS-MIB", "coQOSRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSMultipleRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSFrameDuplicateCount"), ("COLUBRIS-QOS-MIB", "coQOSReceivedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastReceivedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCountersGroup = coQOSCountersGroup.setStatus('current')
mibBuilder.exportSymbols("COLUBRIS-QOS-MIB", coQOSStatistics=coQOSStatistics, coQOSFailedCount=coQOSFailedCount, colubrisQOS=colubrisQOS, coQOSMulticastReceivedFrameCount=coQOSMulticastReceivedFrameCount, coQOSQueueId=coQOSQueueId, coQOSCountersGroup=coQOSCountersGroup, coQOSTransmittedFrameCount=coQOSTransmittedFrameCount, coQOSGroups=coQOSGroups, colubrisQOSMIBObjects=colubrisQOSMIBObjects, coQOSCountersEntry=coQOSCountersEntry, coQOSMulticastTransmittedFrameCount=coQOSMulticastTransmittedFrameCount, coQOSMultipleRetryCount=coQOSMultipleRetryCount, coQOSReceivedFrameCount=coQOSReceivedFrameCount, PYSNMP_MODULE_ID=colubrisQOS, coQOSCompliances=coQOSCompliances, coQOSCompliance=coQOSCompliance, coQOSRetryCount=coQOSRetryCount, coQOSFrameDuplicateCount=coQOSFrameDuplicateCount, coQOSConformance=coQOSConformance, coQOSCountersTable=coQOSCountersTable)
