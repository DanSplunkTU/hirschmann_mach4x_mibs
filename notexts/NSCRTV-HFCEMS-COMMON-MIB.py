#
# PySNMP MIB module NSCRTV-HFCEMS-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-HFCEMS-COMMON-MIB
# Produced by pysmi-1.1.3 at Tue Nov 30 02:49:35 2021
# On host fv-az42-83 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
commonIdent, nscrtvHFCemsTree = mibBuilder.importSymbols("NSCRTV-ROOT", "commonIdent", "nscrtvHFCemsTree")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, ModuleIdentity, Gauge32, iso, NotificationType, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, ObjectIdentity, Counter64, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "ModuleIdentity", "Gauge32", "iso", "NotificationType", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
commonAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1))
commonAdminUseRf = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2))
commonAdminUseEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3))
commonMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1))
commonRfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2))
commonMacAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1))
commonBackoffParams = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2))
commonMacStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3))
commonAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1))
commonDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2))
commonNELogicalID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonNELogicalID.setStatus('mandatory')
commonNEVendor = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendor.setStatus('mandatory')
commonNEModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEModelNumber.setStatus('mandatory')
commonNESerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNESerialNumber.setStatus('mandatory')
commonNEVendorInfo = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendorInfo.setStatus('optional')
commonNEStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEStatus.setStatus('mandatory')
commonReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonReset.setStatus('mandatory')
commonAlarmDetectionControl = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAlarmDetectionControl.setStatus('mandatory')
commonNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNetworkAddress.setStatus('mandatory')
commonCheckCode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonCheckCode.setStatus('mandatory')
commonTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapCommunityString.setStatus('mandatory')
commonTamperStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTamperStatus.setStatus('optional')
commonInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonInternalTemperature.setStatus('optional')
commonTime = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTime.setStatus('optional')
commonVarBindings = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonVarBindings.setStatus('mandatory')
commonResetCause = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonResetCause.setStatus('mandatory')
commonCraftStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonCraftStatus.setStatus('mandatory')
commonDeviceOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceOID.setStatus('optional')
commonDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceId.setStatus('optional')
commonPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPhysAddress.setStatus('mandatory')
commonMaxMulticastAddresses = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxMulticastAddresses.setStatus('mandatory')
commonMulticastAddressTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3), )
if mibBuilder.loadTexts: commonMulticastAddressTable.setStatus('mandatory')
commonMulticastAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonMulticastAddressIndex"))
if mibBuilder.loadTexts: commonMulticastAddressEntry.setStatus('mandatory')
commonMulticastAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMulticastAddressIndex.setStatus('mandatory')
commonMulticastAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMulticastAddressNumber.setStatus('mandatory')
commonBackoffPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffPeriod.setStatus('mandatory')
commonACKTimeoutWindow = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonACKTimeoutWindow.setStatus('mandatory')
commonMaximumMACLayerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaximumMACLayerRetries.setStatus('mandatory')
commonMaxPayloadSize = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxPayloadSize.setStatus('mandatory')
commonBackoffMinimumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMinimumExponent.setStatus('mandatory')
commonBackoffMaximumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMaximumExponent.setStatus('mandatory')
commonForwardPathLOSEvents = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathLOSEvents.setStatus('optional')
commonForwardPathFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathFramingErrors.setStatus('optional')
commonForwardPathCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathCRCErrors.setStatus('optional')
commonInvalidMacCmds = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonInvalidMacCmds.setStatus('optional')
commonBackwardPathCollisionTimes = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackwardPathCollisionTimes.setStatus('optional')
commonReturnPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonReturnPathFrequency.setStatus('mandatory')
commonForwardPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathFrequency.setStatus('mandatory')
commonProvisionedReturnPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonProvisionedReturnPowerLevel.setStatus('mandatory')
commonForwardPathReceiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathReceiveLevel.setStatus('optional')
commonMaxReturnPower = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaxReturnPower.setStatus('mandatory')
commonAgentBootWay = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootDefault", 1), ("bootBOOTP", 2), ("bootTFTP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentBootWay.setStatus('mandatory')
commonAgentReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentReset.setStatus('mandatory')
commonAgentMaxTraps = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAgentMaxTraps.setStatus('mandatory')
commonAgentTrapMinInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMinInterval.setStatus('mandatory')
commonAgentTrapMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMaxInterval.setStatus('mandatory')
commonTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapAck.setStatus('optional')
commonAgentTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7), )
if mibBuilder.loadTexts: commonAgentTrapTable.setStatus('mandatory')
commonAgentTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonAgentTrapIndex"))
if mibBuilder.loadTexts: commonAgentTrapEntry.setStatus('mandatory')
commonAgentTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAgentTrapIndex.setStatus('mandatory')
commonAgentTrapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapIP.setStatus('mandatory')
commonAgentTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapCommunity.setStatus('mandatory')
commonAgentTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commonAgentTrapEnable", 1), ("commonAgentTrapDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapStatus.setStatus('mandatory')
commonDeviceNum = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceNum.setStatus('mandatory')
commonDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: commonDeviceInfoTable.setStatus('mandatory')
commonDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonDeviceSlot"))
if mibBuilder.loadTexts: commonDeviceInfoEntry.setStatus('mandatory')
commonDeviceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSlot.setStatus('mandatory')
commonDevicesID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesID.setStatus('mandatory')
commonDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendor.setStatus('mandatory')
commonDeviceModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceModelNumber.setStatus('mandatory')
commonDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSerialNumber.setStatus('mandatory')
commonDeviceVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendorInfo.setStatus('optional')
commonDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceStatus.setStatus('mandatory')
commonDeviceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceReset.setStatus('mandatory')
commonDeviceAlarmDetectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceAlarmDetectionControl.setStatus('mandatory')
commonDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMACAddress.setStatus('mandatory')
commonDeviceTamperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceTamperStatus.setStatus('optional')
commonDeviceInternalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceInternalTemperature.setStatus('optional')
commonDeviceResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceResetCause.setStatus('mandatory')
commonDeviceCraftStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceCraftStatus.setStatus('mandatory')
commonDevicesOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesOID.setStatus('mandatory')
commonDeviceAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceAcct.setStatus('optional')
commonDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceName.setStatus('mandatory')
commonDeviceMFD = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMFD.setStatus('mandatory')
commonDeviceFW = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceFW.setStatus('mandatory')
hfcColdStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,0)).setObjects(("NSCRTV-HFCEMS-COMMON-MIB", "commonPhysAddress"), ("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID"))
hfcWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,2)).setObjects(("NSCRTV-HFCEMS-COMMON-MIB", "commonPhysAddress"), ("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID"))
mibBuilder.exportSymbols("NSCRTV-HFCEMS-COMMON-MIB", commonDeviceName=commonDeviceName, commonMaxPayloadSize=commonMaxPayloadSize, commonAgentMaxTraps=commonAgentMaxTraps, commonMaximumMACLayerRetries=commonMaximumMACLayerRetries, commonDeviceInfoTable=commonDeviceInfoTable, commonForwardPathFramingErrors=commonForwardPathFramingErrors, commonDeviceStatus=commonDeviceStatus, commonAgentTrapTable=commonAgentTrapTable, commonMacStats=commonMacStats, commonAgentTrapCommunity=commonAgentTrapCommunity, commonAlarmDetectionControl=commonAlarmDetectionControl, commonDeviceVendor=commonDeviceVendor, commonDeviceVendorInfo=commonDeviceVendorInfo, commonTrapCommunityString=commonTrapCommunityString, commonNEVendorInfo=commonNEVendorInfo, commonProvisionedReturnPowerLevel=commonProvisionedReturnPowerLevel, commonDeviceModelNumber=commonDeviceModelNumber, commonNEModelNumber=commonNEModelNumber, commonDeviceInfoEntry=commonDeviceInfoEntry, commonMulticastAddressNumber=commonMulticastAddressNumber, commonAgentTrapEntry=commonAgentTrapEntry, commonAgentTrapMinInterval=commonAgentTrapMinInterval, commonAgentBootWay=commonAgentBootWay, commonAgentReset=commonAgentReset, commonDeviceMACAddress=commonDeviceMACAddress, commonMACGroup=commonMACGroup, commonDevicesOID=commonDevicesOID, commonDeviceCraftStatus=commonDeviceCraftStatus, commonReset=commonReset, commonMulticastAddressTable=commonMulticastAddressTable, commonDeviceFW=commonDeviceFW, commonBackwardPathCollisionTimes=commonBackwardPathCollisionTimes, commonNESerialNumber=commonNESerialNumber, commonMulticastAddressIndex=commonMulticastAddressIndex, commonDeviceResetCause=commonDeviceResetCause, commonDeviceSlot=commonDeviceSlot, commonBackoffParams=commonBackoffParams, commonAgentTrapStatus=commonAgentTrapStatus, commonForwardPathLOSEvents=commonForwardPathLOSEvents, commonAgentGroup=commonAgentGroup, commonNELogicalID=commonNELogicalID, commonDeviceAlarmDetectionControl=commonDeviceAlarmDetectionControl, commonAgentTrapMaxInterval=commonAgentTrapMaxInterval, commonACKTimeoutWindow=commonACKTimeoutWindow, commonForwardPathFrequency=commonForwardPathFrequency, commonCraftStatus=commonCraftStatus, commonDeviceSerialNumber=commonDeviceSerialNumber, commonNetworkAddress=commonNetworkAddress, commonTamperStatus=commonTamperStatus, commonDeviceNum=commonDeviceNum, commonTrapAck=commonTrapAck, commonAgentTrapIndex=commonAgentTrapIndex, commonVarBindings=commonVarBindings, commonInternalTemperature=commonInternalTemperature, commonBackoffPeriod=commonBackoffPeriod, commonCheckCode=commonCheckCode, commonForwardPathCRCErrors=commonForwardPathCRCErrors, commonDeviceAcct=commonDeviceAcct, commonAdminGroup=commonAdminGroup, commonAdminUseRf=commonAdminUseRf, commonDeviceOID=commonDeviceOID, commonDeviceMFD=commonDeviceMFD, commonForwardPathReceiveLevel=commonForwardPathReceiveLevel, commonPhysAddress=commonPhysAddress, commonDeviceId=commonDeviceId, commonMaxMulticastAddresses=commonMaxMulticastAddresses, hfcColdStart=hfcColdStart, commonDeviceReset=commonDeviceReset, commonAgentTrapIP=commonAgentTrapIP, commonInvalidMacCmds=commonInvalidMacCmds, commonMaxReturnPower=commonMaxReturnPower, commonDeviceTamperStatus=commonDeviceTamperStatus, commonDevicesID=commonDevicesID, commonMulticastAddressEntry=commonMulticastAddressEntry, commonTime=commonTime, commonResetCause=commonResetCause, commonNEStatus=commonNEStatus, commonDeviceInternalTemperature=commonDeviceInternalTemperature, commonReturnPathFrequency=commonReturnPathFrequency, commonRfGroup=commonRfGroup, commonNEVendor=commonNEVendor, commonAdminUseEthernet=commonAdminUseEthernet, hfcWarmStart=hfcWarmStart, commonMacAddress=commonMacAddress, commonBackoffMaximumExponent=commonBackoffMaximumExponent, commonBackoffMinimumExponent=commonBackoffMinimumExponent, commonDeviceGroup=commonDeviceGroup)
