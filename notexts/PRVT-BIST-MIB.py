#
# PySNMP MIB module PRVT-BIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-BIST-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 16:43:29 2021
# On host fv-az126-355 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
switch, reportsL2IfacePort, reportsL2IfaceUnit, reportsL2IfaceSlot = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch", "reportsL2IfacePort", "reportsL2IfaceUnit", "reportsL2IfaceSlot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, IpAddress, NotificationType, Gauge32, iso, Counter32, MibIdentifier, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "Gauge32", "iso", "Counter32", "MibIdentifier", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
prvtBISTMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 108))
prvtBISTMib.setRevisions(('2005-02-16 00:00', '2004-10-14 00:00', '2003-11-18 00:00',))
if mibBuilder.loadTexts: prvtBISTMib.setLastUpdated('200502160000Z')
if mibBuilder.loadTexts: prvtBISTMib.setOrganization('BATM Advanced Communication')
class TestResult(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("passed", 1), ("failed", 2), ("unknown", 3), ("notAvailable", 4))

prvtBISTNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 0))
prvtBISTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1))
prvtBISTConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 2))
bistConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 1))
bistStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 2))
bistResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3))
bistSelfTestExecute = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bistSelfTestExecute.setStatus('current')
bistSelfTestExecuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-started", 1), ("in-progress", 2), ("success", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSelfTestExecuteStatus.setStatus('current')
bistCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1))
bistRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2))
bistUART = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3))
bistSwitchCore = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 4))
bistNVRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5))
bistPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6))
bistOnboardPower = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7))
bistFan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8))
bistTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 9))
bistUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 10))
bistPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11))
cPUTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1), )
if mibBuilder.loadTexts: cPUTestTable.setStatus('current')
cPUTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "cpuTestType"))
if mibBuilder.loadTexts: cPUTestEntry.setStatus('current')
cpuTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bistCPUValidation", 1), ("bistCPUUsage", 2))))
if mibBuilder.loadTexts: cpuTestType.setStatus('current')
cpuTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTestResult.setStatus('current')
ramTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1), )
if mibBuilder.loadTexts: ramTestTable.setStatus('current')
ramTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "ramTestType"))
if mibBuilder.loadTexts: ramTestEntry.setStatus('current')
ramTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bistRAMValidation", 1), ("bistRAMUsage", 2))))
if mibBuilder.loadTexts: ramTestType.setStatus('current')
ramTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramTestResult.setStatus('current')
uartExistTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1), )
if mibBuilder.loadTexts: uartExistTestTable.setStatus('current')
uartExistTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "uartIndex"))
if mibBuilder.loadTexts: uartExistTestEntry.setStatus('current')
uartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: uartIndex.setStatus('current')
uartExistTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartExistTestResult.setStatus('current')
bistCrossbarExistence = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 4, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistCrossbarExistence.setStatus('current')
nvramTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1), )
if mibBuilder.loadTexts: nvramTestTable.setStatus('current')
nvramTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "nvramTestType"))
if mibBuilder.loadTexts: nvramTestEntry.setStatus('current')
nvramTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bistBootLoaderValidation", 1), ("bistApplicationValidation", 2), ("bistStartupConfigValidation", 3), ("bistScriptFileSystemValidation", 4), ("bistJavaImageValidation", 5), ("bistPROMValidation", 6))))
if mibBuilder.loadTexts: nvramTestType.setStatus('current')
nvramTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramTestResult.setStatus('current')
powerSupplyTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1), )
if mibBuilder.loadTexts: powerSupplyTestTable.setStatus('current')
powerSupplyTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTestEntry.setStatus('current')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
powerSupplyTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyTestResult.setStatus('current')
onboardPowerTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1), )
if mibBuilder.loadTexts: onboardPowerTestTable.setStatus('current')
onboardPowerTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "onboardPowerTestType"))
if mibBuilder.loadTexts: onboardPowerTestEntry.setStatus('current')
onboardPowerTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bistOnboardPowerPHY", 1), ("bistOnboardPowerCPU", 2), ("bistOnboardPowerOC", 3), ("bistOnboardPower3-2V", 4), ("bistOnboardPower2-5V", 5), ("bistOnboardPower1-8V", 6), ("bistOnboardPower1-5V", 7), ("bistOnboardPower1-25V", 8))))
if mibBuilder.loadTexts: onboardPowerTestType.setStatus('current')
onboardPowerTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onboardPowerTestResult.setStatus('current')
fanTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1), )
if mibBuilder.loadTexts: fanTestTable.setStatus('current')
fanTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanTestEntry.setStatus('current')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: fanIndex.setStatus('current')
fanTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanTestResult.setStatus('current')
bistTemperatureTest = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 9, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistTemperatureTest.setStatus('current')
bistUPSTest = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 10, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistUPSTest.setStatus('current')
portsTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1), )
if mibBuilder.loadTexts: portsTestTable.setStatus('current')
portsTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"))
if mibBuilder.loadTexts: portsTestEntry.setStatus('current')
portTest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1, 1, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTest.setStatus('current')
mibBuilder.exportSymbols("PRVT-BIST-MIB", powerSupplyIndex=powerSupplyIndex, prvtBISTObjects=prvtBISTObjects, bistNVRAM=bistNVRAM, bistTemperature=bistTemperature, cPUTestTable=cPUTestTable, bistCrossbarExistence=bistCrossbarExistence, bistPowerSupply=bistPowerSupply, fanTestEntry=fanTestEntry, portsTestEntry=portsTestEntry, prvtBISTNotifications=prvtBISTNotifications, ramTestResult=ramTestResult, bistTemperatureTest=bistTemperatureTest, bistOnboardPower=bistOnboardPower, nvramTestResult=nvramTestResult, bistUPSTest=bistUPSTest, portsTestTable=portsTestTable, bistUPS=bistUPS, uartExistTestEntry=uartExistTestEntry, bistCPU=bistCPU, TestResult=TestResult, onboardPowerTestEntry=onboardPowerTestEntry, prvtBISTMib=prvtBISTMib, nvramTestTable=nvramTestTable, powerSupplyTestEntry=powerSupplyTestEntry, bistRAM=bistRAM, fanTestResult=fanTestResult, bistConfig=bistConfig, bistStatus=bistStatus, bistResult=bistResult, bistSelfTestExecute=bistSelfTestExecute, bistUART=bistUART, bistPorts=bistPorts, fanIndex=fanIndex, nvramTestType=nvramTestType, onboardPowerTestType=onboardPowerTestType, PYSNMP_MODULE_ID=prvtBISTMib, cPUTestEntry=cPUTestEntry, cpuTestType=cpuTestType, bistSelfTestExecuteStatus=bistSelfTestExecuteStatus, portTest=portTest, uartExistTestResult=uartExistTestResult, uartExistTestTable=uartExistTestTable, powerSupplyTestResult=powerSupplyTestResult, powerSupplyTestTable=powerSupplyTestTable, onboardPowerTestTable=onboardPowerTestTable, bistSwitchCore=bistSwitchCore, cpuTestResult=cpuTestResult, prvtBISTConformance=prvtBISTConformance, fanTestTable=fanTestTable, nvramTestEntry=nvramTestEntry, ramTestType=ramTestType, onboardPowerTestResult=onboardPowerTestResult, bistFan=bistFan, ramTestTable=ramTestTable, uartIndex=uartIndex, ramTestEntry=ramTestEntry)
