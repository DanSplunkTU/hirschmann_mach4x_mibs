#
# PySNMP MIB module APPLETALK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/APPLETALK-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:07:39 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, ModuleIdentity, iso, Unsigned32, TimeTicks, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Bits, NotificationType, IpAddress, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "iso", "Unsigned32", "TimeTicks", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Bits", "NotificationType", "IpAddress", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
appletalk = MibIdentifier((1, 3, 6, 1, 2, 1, 13))
class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class DdpNodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class DdpSocketAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class ATName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

llap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 1))
aarp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 2))
atport = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 3))
ddp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4))
rtmp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 5))
kip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 6))
zipRouter = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 7))
nbp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 8))
atecho = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 9))
atp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 10))
pap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 11))
asp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 12))
adsp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 13))
atportptop = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14))
rtmpStub = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 16))
zipEndNode = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 17))
perPort = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 18))
llapTable = MibTable((1, 3, 6, 1, 2, 1, 13, 1, 1), )
if mibBuilder.loadTexts: llapTable.setStatus('mandatory')
llapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 1, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "llapIfIndex"))
if mibBuilder.loadTexts: llapEntry.setStatus('mandatory')
llapIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapIfIndex.setStatus('mandatory')
llapInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInPkts.setStatus('deprecated')
llapOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapOutPkts.setStatus('deprecated')
llapInNoHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInNoHandlers.setStatus('deprecated')
llapInLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInLengthErrors.setStatus('mandatory')
llapInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapInErrors.setStatus('deprecated')
llapCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapCollisions.setStatus('mandatory')
llapDefers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapDefers.setStatus('mandatory')
llapNoDataErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapNoDataErrors.setStatus('mandatory')
llapRandomCTSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapRandomCTSErrors.setStatus('mandatory')
llapFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llapFCSErrors.setStatus('mandatory')
aarpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 2, 1), )
if mibBuilder.loadTexts: aarpTable.setStatus('mandatory')
aarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 2, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "aarpIfIndex"), (0, "APPLETALK-MIB", "aarpNetAddress"))
if mibBuilder.loadTexts: aarpEntry.setStatus('mandatory')
aarpIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpIfIndex.setStatus('mandatory')
aarpPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aarpPhysAddress.setStatus('mandatory')
aarpNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 3), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpNetAddress.setStatus('mandatory')
aarpStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aarpStatus.setStatus('mandatory')
aarpLookups = MibScalar((1, 3, 6, 1, 2, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpLookups.setStatus('mandatory')
aarpHits = MibScalar((1, 3, 6, 1, 2, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aarpHits.setStatus('mandatory')
atportTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 1), )
if mibBuilder.loadTexts: atportTable.setStatus('mandatory')
atportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
if mibBuilder.loadTexts: atportEntry.setStatus('mandatory')
atportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportIndex.setStatus('mandatory')
atportDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportDescr.setStatus('mandatory')
atportType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 1), ("localtalk", 2), ("ethertalk1", 3), ("ethertalk2", 4), ("tokentalk", 5), ("iptalk", 6), ("serialPPP", 7), ("serialNonstandard", 8), ("virtual", 9), ("fdditalk", 10), ("arctalk", 11), ("smdstalk", 12), ("aurp", 13), ("frameRelay", 14), ("x25", 15), ("ip", 16), ("osi", 17), ("decnetIV", 18), ("arap", 19), ("isdnInThePacketMode", 20), ("nonAppleTalk3Com", 21), ("ipx", 22), ("arns", 23), ("hdlc", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportType.setStatus('mandatory')
atportNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 4), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetStart.setStatus('mandatory')
atportNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 5), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetEnd.setStatus('mandatory')
atportNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 6), DdpNodeAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetAddress.setStatus('mandatory')
atportStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routing", 1), ("unconfigured", 2), ("off", 3), ("invalid", 4), ("endNode", 5), ("offDueToConflict", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportStatus.setStatus('mandatory')
atportNetConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportNetConfig.setStatus('mandatory')
atportZoneConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("conflictOrientedSeed", 1), ("garnered", 2), ("guessed", 3), ("unconfigured", 4), ("conflictAverseSeed", 5), ("softSeed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneConfig.setStatus('mandatory')
atportZoneDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 10), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneDefault.setStatus('mandatory')
atportIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportIfIndex.setStatus('mandatory')
atportNetFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 12), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportNetFrom.setStatus('mandatory')
atportZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 13), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportZoneFrom.setStatus('mandatory')
atportInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportInPkts.setStatus('mandatory')
atportOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportOutPkts.setStatus('mandatory')
atportHome = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("home", 1), ("notHome", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportHome.setStatus('mandatory')
atportCurrentZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 17), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportCurrentZone.setStatus('mandatory')
atportConflictPhysAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportConflictPhysAddr.setStatus('mandatory')
atportZoneTable = MibTable((1, 3, 6, 1, 2, 1, 13, 3, 2), )
if mibBuilder.loadTexts: atportZoneTable.setStatus('mandatory')
atportZoneEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 3, 2, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportZonePort"), (0, "APPLETALK-MIB", "atportZoneName"))
if mibBuilder.loadTexts: atportZoneEntry.setStatus('mandatory')
atportZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: atportZonePort.setStatus('mandatory')
atportZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 2), ATName().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: atportZoneName.setStatus('mandatory')
atportZoneStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneStatus.setStatus('mandatory')
ddpOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutRequests.setStatus('mandatory')
ddpOutShorts = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutShorts.setStatus('mandatory')
ddpOutLongs = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutLongs.setStatus('mandatory')
ddpInReceives = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpInReceives.setStatus('mandatory')
ddpInLocalDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpInLocalDatagrams.setStatus('mandatory')
ddpNoProtocolHandlers = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpNoProtocolHandlers.setStatus('mandatory')
ddpTooShortErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpTooShortErrors.setStatus('mandatory')
ddpTooLongErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpTooLongErrors.setStatus('mandatory')
ddpShortDDPErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpShortDDPErrors.setStatus('mandatory')
ddpChecksumErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpChecksumErrors.setStatus('mandatory')
ddpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 15), )
if mibBuilder.loadTexts: ddpListenerTable.setStatus('mandatory')
ddpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 15, 1), ).setIndexNames((0, "APPLETALK-MIB", "ddpListenerAddress"))
if mibBuilder.loadTexts: ddpListenerEntry.setStatus('mandatory')
ddpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 1), DdpSocketAddress())
if mibBuilder.loadTexts: ddpListenerAddress.setStatus('mandatory')
ddpListenerInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpListenerInPkts.setStatus('mandatory')
ddpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddpListenerStatus.setStatus('mandatory')
ddpForwRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwRequests.setStatus('mandatory')
ddpOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpOutNoRoutes.setStatus('mandatory')
ddpBroadcastErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpBroadcastErrors.setStatus('mandatory')
ddpHopCountErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpHopCountErrors.setStatus('mandatory')
ddpForwardingTable = MibTable((1, 3, 6, 1, 2, 1, 13, 4, 16), )
if mibBuilder.loadTexts: ddpForwardingTable.setStatus('mandatory')
ddpForwardingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 4, 16, 1), ).setIndexNames((0, "APPLETALK-MIB", "ddpForwardingNetEnd"))
if mibBuilder.loadTexts: ddpForwardingEntry.setStatus('mandatory')
ddpForwardingNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 1), ATNetworkNumber())
if mibBuilder.loadTexts: ddpForwardingNetEnd.setStatus('mandatory')
ddpForwardingNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingNetStart.setStatus('mandatory')
ddpForwardingNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingNextHop.setStatus('mandatory')
ddpForwardingProto = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingProto.setStatus('mandatory')
ddpForwardingModifiedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingModifiedTime.setStatus('mandatory')
ddpForwardingUseCounts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingUseCounts.setStatus('mandatory')
ddpForwardingPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingPort.setStatus('mandatory')
ddpForwProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17))
rtmpRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 1))
kipRoutingProto = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4, 17, 2))
ddpForwardingTableOverflows = MibScalar((1, 3, 6, 1, 2, 1, 13, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpForwardingTableOverflows.setStatus('mandatory')
rtmpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 5, 1), )
if mibBuilder.loadTexts: rtmpTable.setStatus('mandatory')
rtmpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 5, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "rtmpRangeStart"))
if mibBuilder.loadTexts: rtmpEntry.setStatus('mandatory')
rtmpRangeStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 1), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpRangeStart.setStatus('mandatory')
rtmpRangeEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpRangeEnd.setStatus('mandatory')
rtmpNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpNextHop.setStatus('mandatory')
rtmpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("appletalk", 2), ("serialPPP", 3), ("serialNonstandard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpType.setStatus('mandatory')
rtmpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpPort.setStatus('mandatory')
rtmpHops = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpHops.setStatus('mandatory')
rtmpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("good", 1), ("suspect", 2), ("badZero", 3), ("badOne", 4), ("invalid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtmpState.setStatus('mandatory')
rtmpInDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpInDataPkts.setStatus('mandatory')
rtmpOutDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpOutDataPkts.setStatus('mandatory')
rtmpInRequestPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpInRequestPkts.setStatus('mandatory')
rtmpNextIREqualChanges = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpNextIREqualChanges.setStatus('mandatory')
rtmpNextIRLessChanges = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpNextIRLessChanges.setStatus('mandatory')
rtmpRouteDeletes = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpRouteDeletes.setStatus('mandatory')
rtmpRoutingTableOverflows = MibScalar((1, 3, 6, 1, 2, 1, 13, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpRoutingTableOverflows.setStatus('mandatory')
rtmpOutRequestPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpOutRequestPkts.setStatus('mandatory')
rtmpInVersionMismatches = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpInVersionMismatches.setStatus('mandatory')
rtmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtmpInErrors.setStatus('mandatory')
kipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 6, 1), )
if mibBuilder.loadTexts: kipTable.setStatus('mandatory')
kipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 6, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "kipNetStart"))
if mibBuilder.loadTexts: kipEntry.setStatus('mandatory')
kipNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 1), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kipNetStart.setStatus('mandatory')
kipNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 2), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipNetEnd.setStatus('mandatory')
kipNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipNextHop.setStatus('mandatory')
kipHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipHopCount.setStatus('mandatory')
kipBCastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipBCastAddr.setStatus('mandatory')
kipCore = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("core", 1), ("notcore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipCore.setStatus('mandatory')
kipType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kipRouter", 1), ("net", 2), ("host", 3), ("other", 4), ("async", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipType.setStatus('mandatory')
kipState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("learned", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipState.setStatus('mandatory')
kipShare = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shared", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kipShare.setStatus('mandatory')
kipFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kipFrom.setStatus('mandatory')
zipTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 1), )
if mibBuilder.loadTexts: zipTable.setStatus('mandatory')
zipEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "zipZoneNetStart"), (0, "APPLETALK-MIB", "zipZoneIndex"))
if mibBuilder.loadTexts: zipEntry.setStatus('mandatory')
zipZoneName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 1), ATName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneName.setStatus('mandatory')
zipZoneIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneIndex.setStatus('mandatory')
zipZoneNetStart = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneNetStart.setStatus('mandatory')
zipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 4), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneNetEnd.setStatus('mandatory')
zipZoneState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zipZoneState.setStatus('mandatory')
zipZoneFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneFrom.setStatus('mandatory')
zipZonePort = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZonePort.setStatus('mandatory')
zipInZipQueries = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInZipQueries.setStatus('mandatory')
zipInZipReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInZipReplies.setStatus('mandatory')
zipInZipExtendedReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInZipExtendedReplies.setStatus('mandatory')
zipZoneConflictErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneConflictErrors.setStatus('mandatory')
zipInObsoletes = MibScalar((1, 3, 6, 1, 2, 1, 13, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInObsoletes.setStatus('mandatory')
zipRouterNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 7, 7), )
if mibBuilder.loadTexts: zipRouterNetInfoTable.setStatus('mandatory')
zipRouterNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 7, 7, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
if mibBuilder.loadTexts: zipRouterNetInfoEntry.setStatus('mandatory')
zipInGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInGetNetInfos.setStatus('mandatory')
zipOutGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipOutGetNetInfoReplies.setStatus('mandatory')
zipZoneOutInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneOutInvalids.setStatus('mandatory')
zipAddressInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipAddressInvalids.setStatus('mandatory')
zipNetInfoTable = MibTable((1, 3, 6, 1, 2, 1, 13, 17, 1), )
if mibBuilder.loadTexts: zipNetInfoTable.setStatus('mandatory')
zipNetInfoEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 17, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
if mibBuilder.loadTexts: zipNetInfoEntry.setStatus('mandatory')
zipOutGetNetInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipOutGetNetInfos.setStatus('mandatory')
zipInGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInGetNetInfoReplies.setStatus('mandatory')
zipZoneInInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipZoneInInvalids.setStatus('mandatory')
zipInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zipInErrors.setStatus('mandatory')
nbpTable = MibTable((1, 3, 6, 1, 2, 1, 13, 8, 1), )
if mibBuilder.loadTexts: nbpTable.setStatus('mandatory')
nbpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 8, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "nbpIndex"))
if mibBuilder.loadTexts: nbpEntry.setStatus('mandatory')
nbpIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpIndex.setStatus('mandatory')
nbpObject = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 2), ATName().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpObject.setStatus('mandatory')
nbpType = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 3), ATName().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpType.setStatus('mandatory')
nbpZone = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 4), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpZone.setStatus('mandatory')
nbpState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("registering", 2), ("registrationFailed", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpState.setStatus('mandatory')
nbpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 6), DdpSocketAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbpAddress.setStatus('mandatory')
nbpEnumerator = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpEnumerator.setStatus('mandatory')
nbpInLookUpRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpInLookUpRequests.setStatus('mandatory')
nbpInLookUpReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpInLookUpReplies.setStatus('mandatory')
nbpInBroadcastRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpInBroadcastRequests.setStatus('mandatory')
nbpInForwardRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpInForwardRequests.setStatus('mandatory')
nbpOutLookUpReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpOutLookUpReplies.setStatus('mandatory')
nbpRegistrationFailures = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpRegistrationFailures.setStatus('mandatory')
nbpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbpInErrors.setStatus('mandatory')
atechoRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoRequests.setStatus('mandatory')
atechoReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoReplies.setStatus('mandatory')
atechoOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoOutRequests.setStatus('mandatory')
atechoInReplies = MibScalar((1, 3, 6, 1, 2, 1, 13, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atechoInReplies.setStatus('mandatory')
atpInPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpInPkts.setStatus('mandatory')
atpOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpOutPkts.setStatus('mandatory')
atpTRequestRetransmissions = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpTRequestRetransmissions.setStatus('mandatory')
atpTResponseRetransmissions = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpTResponseRetransmissions.setStatus('mandatory')
atpReleaseTimerExpiredCounts = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpReleaseTimerExpiredCounts.setStatus('mandatory')
atpRetryCountExceededs = MibScalar((1, 3, 6, 1, 2, 1, 13, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpRetryCountExceededs.setStatus('mandatory')
atpListenerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 10, 7), )
if mibBuilder.loadTexts: atpListenerTable.setStatus('mandatory')
atpListenerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 10, 7, 1), ).setIndexNames((0, "APPLETALK-MIB", "atpListenerAddress"))
if mibBuilder.loadTexts: atpListenerEntry.setStatus('mandatory')
atpListenerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 1), DdpSocketAddress())
if mibBuilder.loadTexts: atpListenerAddress.setStatus('mandatory')
atpListenerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atpListenerStatus.setStatus('mandatory')
papInOpenConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papInOpenConns.setStatus('mandatory')
papOutOpenConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papOutOpenConns.setStatus('mandatory')
papInDatas = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papInDatas.setStatus('mandatory')
papOutDatas = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papOutDatas.setStatus('mandatory')
papInCloseConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papInCloseConns.setStatus('mandatory')
papOutCloseConns = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papOutCloseConns.setStatus('mandatory')
papTickleTimeoutCloses = MibScalar((1, 3, 6, 1, 2, 1, 13, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papTickleTimeoutCloses.setStatus('mandatory')
papServerTable = MibTable((1, 3, 6, 1, 2, 1, 13, 11, 8), )
if mibBuilder.loadTexts: papServerTable.setStatus('mandatory')
papServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 11, 8, 1), ).setIndexNames((0, "APPLETALK-MIB", "papServerIndex"))
if mibBuilder.loadTexts: papServerEntry.setStatus('mandatory')
papServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: papServerIndex.setStatus('mandatory')
papServerListeningSocket = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 2), DdpSocketAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: papServerListeningSocket.setStatus('mandatory')
papServerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerStatus.setStatus('mandatory')
papServerCompletedJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerCompletedJobs.setStatus('mandatory')
papServerBusyJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerBusyJobs.setStatus('mandatory')
papServerFreeJobs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerFreeJobs.setStatus('mandatory')
papServerAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerAuthenticationFailures.setStatus('mandatory')
papServerAccountingFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerAccountingFailures.setStatus('mandatory')
papServerGeneralFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerGeneralFailures.setStatus('mandatory')
papServerState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: papServerState.setStatus('mandatory')
papServerLastStatusMsg = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: papServerLastStatusMsg.setStatus('mandatory')
aspInputTransactions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspInputTransactions.setStatus('mandatory')
aspOutputTransactions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspOutputTransactions.setStatus('mandatory')
aspInOpenSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspInOpenSessions.setStatus('mandatory')
aspOutOpenSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspOutOpenSessions.setStatus('mandatory')
aspInCloseSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspInCloseSessions.setStatus('mandatory')
aspOutCloseSessions = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspOutCloseSessions.setStatus('mandatory')
aspNoMoreSessionsErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspNoMoreSessionsErrors.setStatus('mandatory')
aspTickleTimeOutCloses = MibScalar((1, 3, 6, 1, 2, 1, 13, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTickleTimeOutCloses.setStatus('mandatory')
aspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 12, 9), )
if mibBuilder.loadTexts: aspConnTable.setStatus('mandatory')
aspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 12, 9, 1), ).setIndexNames((0, "APPLETALK-MIB", "aspConnLocalAddress"), (0, "APPLETALK-MIB", "aspConnRemoteAddress"), (0, "APPLETALK-MIB", "aspConnID"))
if mibBuilder.loadTexts: aspConnEntry.setStatus('mandatory')
aspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 1), DdpSocketAddress())
if mibBuilder.loadTexts: aspConnLocalAddress.setStatus('mandatory')
aspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 2), DdpSocketAddress())
if mibBuilder.loadTexts: aspConnRemoteAddress.setStatus('mandatory')
aspConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: aspConnID.setStatus('mandatory')
aspConnLastReqNum = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspConnLastReqNum.setStatus('mandatory')
aspConnServerEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sss", 1), ("wss", 2), ("sls", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspConnServerEnd.setStatus('mandatory')
aspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aspConnState.setStatus('mandatory')
adspInPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspInPkts.setStatus('mandatory')
adspOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspOutPkts.setStatus('mandatory')
adspInOctets = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspInOctets.setStatus('mandatory')
adspOutOctets = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspOutOctets.setStatus('mandatory')
adspInDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspInDataPkts.setStatus('mandatory')
adspOutDataPkts = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspOutDataPkts.setStatus('mandatory')
adspTimeoutErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspTimeoutErrors.setStatus('mandatory')
adspTimeoutCloseErrors = MibScalar((1, 3, 6, 1, 2, 1, 13, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspTimeoutCloseErrors.setStatus('mandatory')
adspConnTable = MibTable((1, 3, 6, 1, 2, 1, 13, 13, 9), )
if mibBuilder.loadTexts: adspConnTable.setStatus('mandatory')
adspConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 13, 9, 1), ).setIndexNames((0, "APPLETALK-MIB", "adspConnLocalAddress"), (0, "APPLETALK-MIB", "adspConnRemoteAddress"), (0, "APPLETALK-MIB", "adspConnLocalConnID"))
if mibBuilder.loadTexts: adspConnEntry.setStatus('mandatory')
adspConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 1), DdpSocketAddress())
if mibBuilder.loadTexts: adspConnLocalAddress.setStatus('mandatory')
adspConnLocalConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: adspConnLocalConnID.setStatus('mandatory')
adspConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 3), DdpSocketAddress())
if mibBuilder.loadTexts: adspConnRemoteAddress.setStatus('mandatory')
adspConnRemoteConnID = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adspConnRemoteConnID.setStatus('mandatory')
adspConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("open", 1), ("localHalfOpen", 2), ("remoteHalfOpen", 3), ("listening", 4), ("closed", 5), ("invalid", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adspConnState.setStatus('mandatory')
atportPtoPTable = MibTable((1, 3, 6, 1, 2, 1, 13, 14, 1), )
if mibBuilder.loadTexts: atportPtoPTable.setStatus('mandatory')
atportPtoPEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 14, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportPtoPIndex"))
if mibBuilder.loadTexts: atportPtoPEntry.setStatus('mandatory')
atportPtoPIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: atportPtoPIndex.setStatus('mandatory')
atportPtoPProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportPtoPProtocol.setStatus('mandatory')
atportPtoPRemoteName = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportPtoPRemoteName.setStatus('mandatory')
atportPtoPRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportPtoPRemoteAddress.setStatus('mandatory')
atportPtoPPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportPtoPPortIndex.setStatus('mandatory')
atportPtoPStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportPtoPStatus.setStatus('mandatory')
atportPtoPProtoOids = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2))
pToPProtoOther = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 1))
pToPProtoAurp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 2))
pToPProtoCaymanUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 3))
pToPProtoAtkvmsDecnetIV = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 4))
pToPProtoLiaisonUdp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 5))
pToPProtoIpx = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 6))
pToPProtoShivaIp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 14, 2, 7))
perPortTable = MibTable((1, 3, 6, 1, 2, 1, 13, 18, 1), )
if mibBuilder.loadTexts: perPortTable.setStatus('mandatory')
perPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 13, 18, 1, 1), ).setIndexNames((0, "APPLETALK-MIB", "atportIndex"))
if mibBuilder.loadTexts: perPortEntry.setStatus('mandatory')
perPortAarpInProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpInProbes.setStatus('mandatory')
perPortAarpOutProbes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpOutProbes.setStatus('mandatory')
perPortAarpInReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpInReqs.setStatus('mandatory')
perPortAarpOutReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpOutReqs.setStatus('mandatory')
perPortAarpInRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpInRsps.setStatus('mandatory')
perPortAarpOutRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortAarpOutRsps.setStatus('mandatory')
perPortDdpInReceives = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpInReceives.setStatus('mandatory')
perPortDdpInLocalDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpInLocalDatagrams.setStatus('mandatory')
perPortDdpNoProtocolHandlers = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpNoProtocolHandlers.setStatus('mandatory')
perPortDdpTooShortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpTooShortErrors.setStatus('mandatory')
perPortDdpTooLongErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpTooLongErrors.setStatus('mandatory')
perPortDdpChecksumErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpChecksumErrors.setStatus('mandatory')
perPortDdpForwRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortDdpForwRequests.setStatus('mandatory')
perPortRtmpInDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortRtmpInDataPkts.setStatus('mandatory')
perPortRtmpOutDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortRtmpOutDataPkts.setStatus('mandatory')
perPortRtmpInRequestPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortRtmpInRequestPkts.setStatus('mandatory')
perPortRtmpRouteDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortRtmpRouteDeletes.setStatus('mandatory')
perPortZipInZipQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortZipInZipQueries.setStatus('mandatory')
perPortZipInZipReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortZipInZipReplies.setStatus('mandatory')
perPortZipInZipExtendedReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortZipInZipExtendedReplies.setStatus('mandatory')
perPortZipZoneConflictErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortZipZoneConflictErrors.setStatus('mandatory')
perPortZipInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortZipInErrors.setStatus('mandatory')
perPortNbpInLookUpRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpInLookUpRequests.setStatus('mandatory')
perPortNbpInLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpInLookUpReplies.setStatus('mandatory')
perPortNbpInBroadcastRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpInBroadcastRequests.setStatus('mandatory')
perPortNbpInForwardRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpInForwardRequests.setStatus('mandatory')
perPortNbpOutLookUpReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpOutLookUpReplies.setStatus('mandatory')
perPortNbpRegistrationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpRegistrationFailures.setStatus('mandatory')
perPortNbpInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortNbpInErrors.setStatus('mandatory')
perPortEchoRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortEchoRequests.setStatus('mandatory')
perPortEchoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPortEchoReplies.setStatus('mandatory')
mibBuilder.exportSymbols("APPLETALK-MIB", atportZoneStatus=atportZoneStatus, ddpOutNoRoutes=ddpOutNoRoutes, rtmpOutDataPkts=rtmpOutDataPkts, zipZoneFrom=zipZoneFrom, atportNetConfig=atportNetConfig, kipShare=kipShare, atportNetStart=atportNetStart, aspOutputTransactions=aspOutputTransactions, rtmpNextIREqualChanges=rtmpNextIREqualChanges, atechoInReplies=atechoInReplies, rtmpRoutingProto=rtmpRoutingProto, aspInputTransactions=aspInputTransactions, pToPProtoAurp=pToPProtoAurp, perPortRtmpOutDataPkts=perPortRtmpOutDataPkts, nbpInLookUpReplies=nbpInLookUpReplies, papServerStatus=papServerStatus, perPortAarpOutProbes=perPortAarpOutProbes, ddpTooShortErrors=ddpTooShortErrors, atportZoneName=atportZoneName, atportConflictPhysAddr=atportConflictPhysAddr, pToPProtoAtkvmsDecnetIV=pToPProtoAtkvmsDecnetIV, rtmpHops=rtmpHops, pToPProtoShivaIp=pToPProtoShivaIp, atportZoneTable=atportZoneTable, atpListenerStatus=atpListenerStatus, pToPProtoOther=pToPProtoOther, llap=llap, asp=asp, zipInZipReplies=zipInZipReplies, papServerCompletedJobs=papServerCompletedJobs, aarpStatus=aarpStatus, perPortZipInZipExtendedReplies=perPortZipInZipExtendedReplies, zipInZipExtendedReplies=zipInZipExtendedReplies, ddp=ddp, atp=atp, aarpNetAddress=aarpNetAddress, perPort=perPort, ddpForwardingNetStart=ddpForwardingNetStart, ddpForwardingUseCounts=ddpForwardingUseCounts, atportHome=atportHome, ddpListenerTable=ddpListenerTable, atportPtoPEntry=atportPtoPEntry, atportPtoPRemoteName=atportPtoPRemoteName, perPortDdpTooShortErrors=perPortDdpTooShortErrors, perPortEchoReplies=perPortEchoReplies, zipOutGetNetInfoReplies=zipOutGetNetInfoReplies, aspOutOpenSessions=aspOutOpenSessions, zipZoneOutInvalids=zipZoneOutInvalids, perPortAarpOutReqs=perPortAarpOutReqs, nbpAddress=nbpAddress, adspConnState=adspConnState, atportNetEnd=atportNetEnd, perPortNbpRegistrationFailures=perPortNbpRegistrationFailures, pap=pap, zipZoneState=zipZoneState, ddpListenerAddress=ddpListenerAddress, atportPtoPProtocol=atportPtoPProtocol, zipInErrors=zipInErrors, perPortZipInZipQueries=perPortZipInZipQueries, perPortRtmpInRequestPkts=perPortRtmpInRequestPkts, atpTRequestRetransmissions=atpTRequestRetransmissions, atportZoneConfig=atportZoneConfig, rtmpState=rtmpState, nbpZone=nbpZone, atportPtoPTable=atportPtoPTable, zipZoneNetStart=zipZoneNetStart, perPortDdpInLocalDatagrams=perPortDdpInLocalDatagrams, ddpForwardingNextHop=ddpForwardingNextHop, ddpOutLongs=ddpOutLongs, zipRouterNetInfoTable=zipRouterNetInfoTable, ddpForwRequests=ddpForwRequests, aspInOpenSessions=aspInOpenSessions, adspConnLocalAddress=adspConnLocalAddress, llapTable=llapTable, adspConnLocalConnID=adspConnLocalConnID, atportptop=atportptop, adspInOctets=adspInOctets, atechoOutRequests=atechoOutRequests, atportPtoPPortIndex=atportPtoPPortIndex, papInDatas=papInDatas, perPortRtmpInDataPkts=perPortRtmpInDataPkts, papTickleTimeoutCloses=papTickleTimeoutCloses, ddpForwProtoOids=ddpForwProtoOids, rtmpStub=rtmpStub, zipTable=zipTable, papServerEntry=papServerEntry, kipFrom=kipFrom, ddpTooLongErrors=ddpTooLongErrors, ddpListenerEntry=ddpListenerEntry, zipEndNode=zipEndNode, aarpLookups=aarpLookups, nbpTable=nbpTable, atpRetryCountExceededs=atpRetryCountExceededs, adspInPkts=adspInPkts, adspConnRemoteAddress=adspConnRemoteAddress, kipState=kipState, atportEntry=atportEntry, rtmp=rtmp, llapOutPkts=llapOutPkts, ddpForwardingModifiedTime=ddpForwardingModifiedTime, rtmpNextHop=rtmpNextHop, atportCurrentZone=atportCurrentZone, aspConnRemoteAddress=aspConnRemoteAddress, aspConnID=aspConnID, atportDescr=atportDescr, papOutCloseConns=papOutCloseConns, pToPProtoCaymanUdp=pToPProtoCaymanUdp, aspConnServerEnd=aspConnServerEnd, llapInPkts=llapInPkts, perPortNbpInBroadcastRequests=perPortNbpInBroadcastRequests, perPortNbpInErrors=perPortNbpInErrors, atportIndex=atportIndex, ddpInReceives=ddpInReceives, papServerGeneralFailures=papServerGeneralFailures, aarpIfIndex=aarpIfIndex, atportZonePort=atportZonePort, aspConnTable=aspConnTable, aspInCloseSessions=aspInCloseSessions, perPortAarpInRsps=perPortAarpInRsps, llapIfIndex=llapIfIndex, nbpObject=nbpObject, rtmpTable=rtmpTable, perPortNbpInLookUpReplies=perPortNbpInLookUpReplies, rtmpRouteDeletes=rtmpRouteDeletes, ddpForwardingTable=ddpForwardingTable, zipRouterNetInfoEntry=zipRouterNetInfoEntry, zipRouter=zipRouter, papInCloseConns=papInCloseConns, zipZoneName=zipZoneName, nbpEnumerator=nbpEnumerator, atportNetAddress=atportNetAddress, perPortAarpOutRsps=perPortAarpOutRsps, llapInErrors=llapInErrors, kipEntry=kipEntry, llapCollisions=llapCollisions, aspConnLocalAddress=aspConnLocalAddress, rtmpInVersionMismatches=rtmpInVersionMismatches, DdpSocketAddress=DdpSocketAddress, atportOutPkts=atportOutPkts, kipRoutingProto=kipRoutingProto, papServerLastStatusMsg=papServerLastStatusMsg, perPortEntry=perPortEntry, atport=atport, zipInObsoletes=zipInObsoletes, rtmpInDataPkts=rtmpInDataPkts, zipZonePort=zipZonePort, zipZoneIndex=zipZoneIndex, adspTimeoutErrors=adspTimeoutErrors, atportInPkts=atportInPkts, kipBCastAddr=kipBCastAddr, zipEntry=zipEntry, perPortEchoRequests=perPortEchoRequests, nbpInErrors=nbpInErrors, atportTable=atportTable, zipOutGetNetInfos=zipOutGetNetInfos, nbpOutLookUpReplies=nbpOutLookUpReplies, rtmpRangeEnd=rtmpRangeEnd, atpInPkts=atpInPkts, papOutOpenConns=papOutOpenConns, aarp=aarp, atportNetFrom=atportNetFrom, nbpRegistrationFailures=nbpRegistrationFailures, aspTickleTimeOutCloses=aspTickleTimeOutCloses, atpTResponseRetransmissions=atpTResponseRetransmissions, ddpListenerInPkts=ddpListenerInPkts, aspConnState=aspConnState, rtmpOutRequestPkts=rtmpOutRequestPkts, perPortAarpInProbes=perPortAarpInProbes, nbpInForwardRequests=nbpInForwardRequests, llapInNoHandlers=llapInNoHandlers, ddpListenerStatus=ddpListenerStatus, perPortTable=perPortTable, papServerAccountingFailures=papServerAccountingFailures, kip=kip, aspOutCloseSessions=aspOutCloseSessions, ddpOutRequests=ddpOutRequests, adspConnEntry=adspConnEntry, adspOutOctets=adspOutOctets, llapEntry=llapEntry, papOutDatas=papOutDatas, rtmpInErrors=rtmpInErrors, adsp=adsp, papServerAuthenticationFailures=papServerAuthenticationFailures, perPortDdpTooLongErrors=perPortDdpTooLongErrors, atpOutPkts=atpOutPkts, perPortZipInErrors=perPortZipInErrors, atportZoneEntry=atportZoneEntry, atpListenerTable=atpListenerTable, aarpEntry=aarpEntry, atpListenerAddress=atpListenerAddress, rtmpEntry=rtmpEntry, nbpInBroadcastRequests=nbpInBroadcastRequests, atecho=atecho, llapDefers=llapDefers, rtmpPort=rtmpPort, kipCore=kipCore, zipZoneInInvalids=zipZoneInInvalids, aarpHits=aarpHits, papServerTable=papServerTable, zipNetInfoTable=zipNetInfoTable, perPortRtmpRouteDeletes=perPortRtmpRouteDeletes, ddpShortDDPErrors=ddpShortDDPErrors, rtmpRoutingTableOverflows=rtmpRoutingTableOverflows, atportIfIndex=atportIfIndex, rtmpRangeStart=rtmpRangeStart, atportStatus=atportStatus, ddpForwardingNetEnd=ddpForwardingNetEnd, atpReleaseTimerExpiredCounts=atpReleaseTimerExpiredCounts, atportPtoPIndex=atportPtoPIndex, zipInZipQueries=zipInZipQueries, atportPtoPStatus=atportPtoPStatus, nbpInLookUpRequests=nbpInLookUpRequests, perPortZipZoneConflictErrors=perPortZipZoneConflictErrors, ddpOutShorts=ddpOutShorts, ddpBroadcastErrors=ddpBroadcastErrors, perPortNbpInForwardRequests=perPortNbpInForwardRequests, aarpPhysAddress=aarpPhysAddress, pToPProtoLiaisonUdp=pToPProtoLiaisonUdp, ddpHopCountErrors=ddpHopCountErrors, appletalk=appletalk, ddpNoProtocolHandlers=ddpNoProtocolHandlers, llapInLengthErrors=llapInLengthErrors, rtmpType=rtmpType, kipNetEnd=kipNetEnd, nbpType=nbpType, adspConnTable=adspConnTable, perPortZipInZipReplies=perPortZipInZipReplies, llapRandomCTSErrors=llapRandomCTSErrors, atportZoneFrom=atportZoneFrom, adspOutPkts=adspOutPkts, rtmpNextIRLessChanges=rtmpNextIRLessChanges, pToPProtoIpx=pToPProtoIpx, papServerFreeJobs=papServerFreeJobs, perPortAarpInReqs=perPortAarpInReqs, nbpState=nbpState, papServerState=papServerState, nbp=nbp, atportPtoPProtoOids=atportPtoPProtoOids, nbpEntry=nbpEntry, ddpChecksumErrors=ddpChecksumErrors, aarpTable=aarpTable, ddpForwardingEntry=ddpForwardingEntry, papServerBusyJobs=papServerBusyJobs, perPortDdpForwRequests=perPortDdpForwRequests, kipNextHop=kipNextHop, kipNetStart=kipNetStart, perPortDdpNoProtocolHandlers=perPortDdpNoProtocolHandlers, atechoRequests=atechoRequests, perPortNbpInLookUpRequests=perPortNbpInLookUpRequests, DdpNodeAddress=DdpNodeAddress, perPortNbpOutLookUpReplies=perPortNbpOutLookUpReplies, papServerIndex=papServerIndex, atechoReplies=atechoReplies, atportPtoPRemoteAddress=atportPtoPRemoteAddress)
mibBuilder.exportSymbols("APPLETALK-MIB", atpListenerEntry=atpListenerEntry, ATName=ATName, zipAddressInvalids=zipAddressInvalids, kipType=kipType, aspNoMoreSessionsErrors=aspNoMoreSessionsErrors, llapFCSErrors=llapFCSErrors, adspInDataPkts=adspInDataPkts, ATNetworkNumber=ATNetworkNumber, kipTable=kipTable, rtmpInRequestPkts=rtmpInRequestPkts, zipInGetNetInfoReplies=zipInGetNetInfoReplies, nbpIndex=nbpIndex, ddpInLocalDatagrams=ddpInLocalDatagrams, zipInGetNetInfos=zipInGetNetInfos, zipNetInfoEntry=zipNetInfoEntry, perPortDdpChecksumErrors=perPortDdpChecksumErrors, ddpForwardingTableOverflows=ddpForwardingTableOverflows, zipZoneNetEnd=zipZoneNetEnd, aspConnLastReqNum=aspConnLastReqNum, adspTimeoutCloseErrors=adspTimeoutCloseErrors, adspConnRemoteConnID=adspConnRemoteConnID, llapNoDataErrors=llapNoDataErrors, aspConnEntry=aspConnEntry, kipHopCount=kipHopCount, ddpForwardingProto=ddpForwardingProto, atportType=atportType, atportZoneDefault=atportZoneDefault, zipZoneConflictErrors=zipZoneConflictErrors, adspOutDataPkts=adspOutDataPkts, papServerListeningSocket=papServerListeningSocket, perPortDdpInReceives=perPortDdpInReceives, papInOpenConns=papInOpenConns, ddpForwardingPort=ddpForwardingPort)
