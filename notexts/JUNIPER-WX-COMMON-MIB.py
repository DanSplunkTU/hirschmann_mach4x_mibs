#
# PySNMP MIB module JUNIPER-WX-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/JUNIPER-WX-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:28:09 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
jnxWxModules, jnxWxCommonMib = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-REG", "jnxWxModules", "jnxWxCommonMib")
TcChassisType, = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, ModuleIdentity, NotificationType, Counter32, Integer32, Gauge32, MibIdentifier, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "ModuleIdentity", "NotificationType", "Counter32", "Integer32", "Gauge32", "MibIdentifier", "ObjectIdentity", "Bits")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
jnxWxCommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 3))
jnxWxCommonMibModule.setRevisions(('2003-09-30 08:45', '2003-04-01 00:00', '2003-03-10 00:00', '2002-06-03 00:00', '2002-03-27 00:00', '2002-02-22 00:00', '2002-01-23 00:00', '2002-01-17 00:00', '2001-08-07 00:00',))
if mibBuilder.loadTexts: jnxWxCommonMibModule.setLastUpdated('200206030000Z')
if mibBuilder.loadTexts: jnxWxCommonMibModule.setOrganization('Juniper Networks, Inc')
jnxWxCommonConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 1))
if mibBuilder.loadTexts: jnxWxCommonConfMib.setStatus('current')
jnxWxCommonObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2))
if mibBuilder.loadTexts: jnxWxCommonObjs.setStatus('current')
jnxWxCommonEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3))
if mibBuilder.loadTexts: jnxWxCommonEvents.setStatus('current')
jnxWxSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1))
if mibBuilder.loadTexts: jnxWxSys.setStatus('current')
jnxWxChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 2))
if mibBuilder.loadTexts: jnxWxChassis.setStatus('current')
jnxWxSysSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysSwVersion.setStatus('current')
jnxWxSysHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysHwVersion.setStatus('current')
jnxWxSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysSerialNumber.setStatus('current')
jnxWxSysTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysTimeZoneOffset.setStatus('current')
jnxWxSysDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysDaylightSaving.setStatus('current')
jnxWxChassisType = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 2, 1), TcChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxChassisType.setStatus('current')
jnxWxCommonEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 1))
if mibBuilder.loadTexts: jnxWxCommonEventObjs.setStatus('current')
jnxWxCommonEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2))
if mibBuilder.loadTexts: jnxWxCommonEventEvents.setStatus('current')
jnxWxCommonEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: jnxWxCommonEventEventsV2.setStatus('current')
jnxWxCommonEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxWxCommonEventDescr.setStatus('current')
jnxWxCommonEventInFailSafeMode = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 1))
if mibBuilder.loadTexts: jnxWxCommonEventInFailSafeMode.setStatus('current')
jnxWxCommonEventPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 2))
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyFailure.setStatus('current')
jnxWxCommonEventPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 3))
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyOk.setStatus('current')
jnxWxCommonEventLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 4)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLicenseExpired.setStatus('current')
jnxWxCommonEventThruputLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 5)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventThruputLimitExceeded.setStatus('current')
jnxWxCommonEventLicenseWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 6)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLicenseWillExpire.setStatus('current')
jnxWxCommonEventLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 7)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLoginFailure.setStatus('current')
jnxWxCommonEventFaultTolerantPassThrough = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 8)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFaultTolerantPassThrough.setStatus('current')
jnxWxCommonEventFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 9)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanFailure.setStatus('current')
jnxWxCommonEventFanSpeedVariation = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 10)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanSpeedVariation.setStatus('current')
jnxWxCommonEventFanOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 11)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanOk.setStatus('current')
jnxWxCommonEventInterfaceSpeedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 12)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedMismatch.setStatus('current')
jnxWxCommonEventInterfaceSpeedOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 13)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedOk.setStatus('current')
jnxWxCommonEventInterfaceDuplexMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 14)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceDuplexMismatch.setStatus('current')
jnxWxCommonEventIpsecSecurityAssociationAdded = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 15)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationAdded.setStatus('current')
jnxWxCommonEventIpsecSecurityAssociationExpired = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 16)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationExpired.setStatus('current')
jnxWxCommonEventIpsecSecurityAssociationDeleted = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 17)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationDeleted.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-WX-COMMON-MIB", jnxWxCommonEventFanFailure=jnxWxCommonEventFanFailure, PYSNMP_MODULE_ID=jnxWxCommonMibModule, jnxWxCommonEventThruputLimitExceeded=jnxWxCommonEventThruputLimitExceeded, jnxWxCommonEventIpsecSecurityAssociationDeleted=jnxWxCommonEventIpsecSecurityAssociationDeleted, jnxWxCommonEventEvents=jnxWxCommonEventEvents, jnxWxCommonEventInterfaceDuplexMismatch=jnxWxCommonEventInterfaceDuplexMismatch, jnxWxCommonEventPowerSupplyFailure=jnxWxCommonEventPowerSupplyFailure, jnxWxCommonConfMib=jnxWxCommonConfMib, jnxWxChassisType=jnxWxChassisType, jnxWxCommonEventLicenseWillExpire=jnxWxCommonEventLicenseWillExpire, jnxWxCommonEventInterfaceSpeedMismatch=jnxWxCommonEventInterfaceSpeedMismatch, jnxWxCommonEventIpsecSecurityAssociationAdded=jnxWxCommonEventIpsecSecurityAssociationAdded, jnxWxCommonObjs=jnxWxCommonObjs, jnxWxCommonEventLoginFailure=jnxWxCommonEventLoginFailure, jnxWxCommonEventEventsV2=jnxWxCommonEventEventsV2, jnxWxChassis=jnxWxChassis, jnxWxCommonEventFaultTolerantPassThrough=jnxWxCommonEventFaultTolerantPassThrough, jnxWxSysTimeZoneOffset=jnxWxSysTimeZoneOffset, jnxWxCommonEventInFailSafeMode=jnxWxCommonEventInFailSafeMode, jnxWxSysSerialNumber=jnxWxSysSerialNumber, jnxWxCommonEventFanSpeedVariation=jnxWxCommonEventFanSpeedVariation, jnxWxCommonEventObjs=jnxWxCommonEventObjs, jnxWxCommonEventPowerSupplyOk=jnxWxCommonEventPowerSupplyOk, jnxWxCommonEventIpsecSecurityAssociationExpired=jnxWxCommonEventIpsecSecurityAssociationExpired, jnxWxCommonMibModule=jnxWxCommonMibModule, jnxWxSysSwVersion=jnxWxSysSwVersion, jnxWxCommonEventDescr=jnxWxCommonEventDescr, jnxWxCommonEvents=jnxWxCommonEvents, jnxWxCommonEventLicenseExpired=jnxWxCommonEventLicenseExpired, jnxWxCommonEventInterfaceSpeedOk=jnxWxCommonEventInterfaceSpeedOk, jnxWxSysDaylightSaving=jnxWxSysDaylightSaving, jnxWxCommonEventFanOk=jnxWxCommonEventFanOk, jnxWxSys=jnxWxSys, jnxWxSysHwVersion=jnxWxSysHwVersion)
