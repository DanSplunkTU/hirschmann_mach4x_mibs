#
# PySNMP MIB module ALCATEL-IND1-LPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-LPS-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:55:52 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1MacAddress, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MacAddress")
systemServicesTime, systemServicesDate = mibBuilder.importSymbols("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime", "systemServicesDate")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, ObjectIdentity, IpAddress, NotificationType, Bits, MibIdentifier, Counter32, ModuleIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "Bits", "MibIdentifier", "Counter32", "ModuleIdentity", "TimeTicks", "iso")
TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
alcatelIND1LearnedPortSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2))
alcatelIND1LearnedPortSecurityMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
alcatelIND1LearnedPortSecurityMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBNotifications.setStatus('current')
alcatelIND1LearnedPortSecurityMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBObjects.setStatus('current')
alcatelIND1LearnedPortSecurityMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBConformance.setStatus('current')
alcatelIND1LearnedPortSecurityMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBGroups.setStatus('current')
alcatelIND1LearnedPortSecurityMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 2))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBCompliances.setStatus('current')
learnedPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1), )
if mibBuilder.loadTexts: learnedPortSecurityTable.setStatus('current')
learnedPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: learnedPortSecurityEntry.setStatus('current')
lpsViolationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2), ("discard", 3))).clone('restrict')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsViolationOption.setStatus('current')
lpsMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsMaxMacNum.setStatus('current')
lpsLoMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsLoMacRange.setStatus('current')
lpsHiMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 4), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsHiMacRange.setStatus('current')
lpsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("locked", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsAdminStatus.setStatus('current')
lpsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("securityViolated", 3), ("locked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsOperStatus.setStatus('current')
lpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsRowStatus.setStatus('current')
lpsRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("release", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsRelease.setStatus('current')
lpsMaxFilteredMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsMaxFilteredMacNum.setStatus('current')
lpsLearnTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsLearnTrapThreshold.setStatus('current')
lpsViolatingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsViolatingMac.setStatus('current')
learnedPortSecurityGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3))
lpsLearningWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowTime.setStatus('current')
lpsLearningWindowTimeWithStaticConversion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowTimeWithStaticConversion.setStatus('current')
lpsConvertToStatic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2147483647, 2147483647), ValueRangeConstraint(1001, 17000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsConvertToStatic.setStatus('current')
lpsLearningWindowNoAging = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowNoAging.setStatus('current')
lpsLearningWindowBootupStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowBootupStatus.setStatus('current')
lpsLearningWindowTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsLearningWindowTimeRemaining.setStatus('current')
lpsLearningWindowLearnAsStatic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowLearnAsStatic.setStatus('current')
lpsLearningWindowPseudoMacMove = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowPseudoMacMove.setStatus('current')
learnedPortSecurityL2MacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4), )
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressTable.setStatus('current')
learnedPortSecurityL2MacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-LPS-MIB", "lpsL2VlanId"), (0, "ALCATEL-IND1-LPS-MIB", "lpsL2MacAddress"))
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressEntry.setStatus('current')
lpsL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: lpsL2VlanId.setStatus('current')
lpsL2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: lpsL2MacAddress.setStatus('current')
lpsL2MacAddressLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configured", 1), ("dynamic", 2), ("filtered", 3), ("quarantined", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsL2MacAddressLearnType.setStatus('current')
lpsL2MacAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsL2MacAddressRowStatus.setStatus('current')
learnedPortSecurityAgL2MacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6), )
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressTable.setStatus('current')
learnedPortSecurityAgL2MacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddress"), (0, "ALCATEL-IND1-LPS-MIB", "lpsAgL2VlanId"))
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressEntry.setStatus('current')
lpsAgL2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: lpsAgL2MacAddress.setStatus('current')
lpsAgL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: lpsAgL2VlanId.setStatus('current')
lpsAgL2MacAddressLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("configured", 1), ("dynamic", 2), ("filtered", 3), ("quarantined", 4), ("configuredFiltered", 5), ("pseudoStatic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgL2MacAddressLearnType.setStatus('current')
lpsAgL2MacAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsAgL2MacAddressRowStatus.setStatus('current')
lpsTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5))
lpsViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchIpAddr"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolatingMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolationType"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if mibBuilder.loadTexts: lpsViolationTrap.setStatus('current')
lpsPortUpAfterLearningWindowExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 2)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"))
if mibBuilder.loadTexts: lpsPortUpAfterLearningWindowExpiredTrap.setStatus('current')
lpsLearnMac = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 3)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapBridgeMac"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if mibBuilder.loadTexts: lpsLearnMac.setStatus('current')
lpsTrapSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchName.setStatus('current')
lpsTrapSwitchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchIpAddr.setStatus('current')
lpsTrapSwitchSlice = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchSlice.setStatus('deprecated')
lpsTrapSwitchPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchPort.setStatus('deprecated')
lpsTrapViolatingMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapViolatingMac.setStatus('current')
lpsTrapViolationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2), ("discard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapViolationType.setStatus('current')
lpsTrapSwitchVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchVlan.setStatus('current')
lpsTrapBridgeMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapBridgeMac.setStatus('current')
lpsTrapIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapIfIndex.setStatus('current')
alcatelIND1LearnedPortSecurityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityGlobGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityTrapsGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityTrapsObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1LearnedPortSecurityMIBCompliance = alcatelIND1LearnedPortSecurityMIBCompliance.setStatus('current')
learnedPortSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsViolationOption"), ("ALCATEL-IND1-LPS-MIB", "lpsMaxMacNum"), ("ALCATEL-IND1-LPS-MIB", "lpsLoMacRange"), ("ALCATEL-IND1-LPS-MIB", "lpsHiMacRange"), ("ALCATEL-IND1-LPS-MIB", "lpsAdminStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsOperStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsRowStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsRelease"), ("ALCATEL-IND1-LPS-MIB", "lpsMaxFilteredMacNum"), ("ALCATEL-IND1-LPS-MIB", "lpsLearnTrapThreshold"), ("ALCATEL-IND1-LPS-MIB", "lpsViolatingMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityGroup = learnedPortSecurityGroup.setStatus('current')
learnedPortSecurityGlobGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 2)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTime"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTimeWithStaticConversion"), ("ALCATEL-IND1-LPS-MIB", "lpsConvertToStatic"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowNoAging"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowBootupStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTimeRemaining"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowLearnAsStatic"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowPseudoMacMove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityGlobGroup = learnedPortSecurityGlobGroup.setStatus('current')
learnedPortSecurityTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 3)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsViolationTrap"), ("ALCATEL-IND1-LPS-MIB", "lpsPortUpAfterLearningWindowExpiredTrap"), ("ALCATEL-IND1-LPS-MIB", "lpsLearnMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityTrapsGroup = learnedPortSecurityTrapsGroup.setStatus('current')
learnedPortSecurityL2MacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 4)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsL2MacAddressLearnType"), ("ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddressLearnType"), ("ALCATEL-IND1-LPS-MIB", "lpsL2MacAddressRowStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityL2MacAddressGroup = learnedPortSecurityL2MacAddressGroup.setStatus('current')
learnedPortSecurityTrapsObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 6)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchIpAddr"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolatingMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolationType"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapBridgeMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityTrapsObjGroup = learnedPortSecurityTrapsObjGroup.setStatus('current')
learnedPortSecurityNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 7)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsLearnMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityNotificationGroup = learnedPortSecurityNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-LPS-MIB", lpsMaxMacNum=lpsMaxMacNum, lpsTrapSwitchName=lpsTrapSwitchName, alcatelIND1LearnedPortSecurityMIBGroups=alcatelIND1LearnedPortSecurityMIBGroups, alcatelIND1LearnedPortSecurityMIBCompliances=alcatelIND1LearnedPortSecurityMIBCompliances, lpsL2VlanId=lpsL2VlanId, lpsTrapViolatingMac=lpsTrapViolatingMac, lpsAgL2MacAddress=lpsAgL2MacAddress, lpsAgL2MacAddressLearnType=lpsAgL2MacAddressLearnType, lpsLearningWindowLearnAsStatic=lpsLearningWindowLearnAsStatic, learnedPortSecurityL2MacAddressEntry=learnedPortSecurityL2MacAddressEntry, learnedPortSecurityGlobalGroup=learnedPortSecurityGlobalGroup, learnedPortSecurityGroup=learnedPortSecurityGroup, learnedPortSecurityTrapsGroup=learnedPortSecurityTrapsGroup, lpsAgL2MacAddressRowStatus=lpsAgL2MacAddressRowStatus, lpsTrapSwitchPort=lpsTrapSwitchPort, alcatelIND1LearnedPortSecurityMIBObjects=alcatelIND1LearnedPortSecurityMIBObjects, alcatelIND1LearnedPortSecurityMIBNotifications=alcatelIND1LearnedPortSecurityMIBNotifications, lpsAdminStatus=lpsAdminStatus, lpsViolationTrap=lpsViolationTrap, learnedPortSecurityNotificationGroup=learnedPortSecurityNotificationGroup, learnedPortSecurityTrapsObjGroup=learnedPortSecurityTrapsObjGroup, lpsMaxFilteredMacNum=lpsMaxFilteredMacNum, alcatelIND1LearnedPortSecurityMIBConformance=alcatelIND1LearnedPortSecurityMIBConformance, lpsPortUpAfterLearningWindowExpiredTrap=lpsPortUpAfterLearningWindowExpiredTrap, learnedPortSecurityL2MacAddressGroup=learnedPortSecurityL2MacAddressGroup, lpsLearningWindowTimeRemaining=lpsLearningWindowTimeRemaining, lpsL2MacAddressRowStatus=lpsL2MacAddressRowStatus, lpsL2MacAddress=lpsL2MacAddress, learnedPortSecurityTable=learnedPortSecurityTable, alcatelIND1LearnedPortSecurityMIB=alcatelIND1LearnedPortSecurityMIB, learnedPortSecurityAgL2MacAddressEntry=learnedPortSecurityAgL2MacAddressEntry, learnedPortSecurityEntry=learnedPortSecurityEntry, lpsLearnTrapThreshold=lpsLearnTrapThreshold, lpsOperStatus=lpsOperStatus, lpsTrapBridgeMac=lpsTrapBridgeMac, lpsHiMacRange=lpsHiMacRange, learnedPortSecurityL2MacAddressTable=learnedPortSecurityL2MacAddressTable, lpsLearningWindowTimeWithStaticConversion=lpsLearningWindowTimeWithStaticConversion, lpsAgL2VlanId=lpsAgL2VlanId, alcatelIND1LearnedPortSecurityMIBCompliance=alcatelIND1LearnedPortSecurityMIBCompliance, learnedPortSecurityAgL2MacAddressTable=learnedPortSecurityAgL2MacAddressTable, learnedPortSecurityGlobGroup=learnedPortSecurityGlobGroup, lpsTrapViolationType=lpsTrapViolationType, lpsLearningWindowNoAging=lpsLearningWindowNoAging, lpsRelease=lpsRelease, lpsTrapIfIndex=lpsTrapIfIndex, lpsLearningWindowTime=lpsLearningWindowTime, lpsTrapSwitchSlice=lpsTrapSwitchSlice, lpsViolationOption=lpsViolationOption, lpsLoMacRange=lpsLoMacRange, lpsLearnMac=lpsLearnMac, lpsLearningWindowPseudoMacMove=lpsLearningWindowPseudoMacMove, lpsRowStatus=lpsRowStatus, lpsTrapSwitchIpAddr=lpsTrapSwitchIpAddr, lpsTrapsObj=lpsTrapsObj, lpsLearningWindowBootupStatus=lpsLearningWindowBootupStatus, lpsTrapSwitchVlan=lpsTrapSwitchVlan, lpsL2MacAddressLearnType=lpsL2MacAddressLearnType, lpsViolatingMac=lpsViolatingMac, PYSNMP_MODULE_ID=alcatelIND1LearnedPortSecurityMIB, lpsConvertToStatic=lpsConvertToStatic)
