#
# PySNMP MIB module MPLS-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/MPLS-VPN-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 16:54:46 2021
# On host fv-az135-491 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, ModuleIdentity, experimental, iso, TimeTicks, Unsigned32, Bits, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "experimental", "iso", "TimeTicks", "Unsigned32", "Bits", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Counter64", "MibIdentifier")
TextualConvention, RowStatus, DisplayString, StorageType, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "StorageType", "TimeStamp", "TruthValue")
mplsVpnMIB = ModuleIdentity((1, 3, 6, 1, 3, 118))
mplsVpnMIB.setRevisions(('2001-10-15 12:00', '2001-10-05 12:00', '2001-07-17 12:00', '2001-07-10 12:00', '2001-06-19 12:00', '2001-05-30 12:00', '2000-09-30 12:00',))
if mibBuilder.loadTexts: mplsVpnMIB.setLastUpdated('200110151200Z')
if mibBuilder.loadTexts: mplsVpnMIB.setOrganization('Provider Provisioned Virtual Private Networks Working Group.')
class MplsVpnId(TextualConvention, OctetString):
    reference = "RFC 2685 [VPN-RFC2685] Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class MplsVpnRouteDistinguisher(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

mplsVpnNotifications = MibIdentifier((1, 3, 6, 1, 3, 118, 0))
mplsVpnObjects = MibIdentifier((1, 3, 6, 1, 3, 118, 1))
mplsVpnScalars = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 1))
mplsVpnConf = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 2))
mplsVpnPerf = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 3))
mplsVpnRoute = MibIdentifier((1, 3, 6, 1, 3, 118, 1, 4))
mplsVpnConformance = MibIdentifier((1, 3, 6, 1, 3, 118, 3))
mplsVpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnConfiguredVrfs.setStatus('current')
mplsVpnActiveVrfs = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnActiveVrfs.setStatus('current')
mplsVpnConnectedInterfaces = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnConnectedInterfaces.setStatus('current')
mplsVpnNotificationEnable = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsVpnNotificationEnable.setStatus('current')
mplsVpnVrfConfMaxPossibleRoutes = MibScalar((1, 3, 6, 1, 3, 118, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfConfMaxPossibleRoutes.setStatus('current')
mplsVpnInterfaceConfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 1), )
if mibBuilder.loadTexts: mplsVpnInterfaceConfTable.setStatus('current')
mplsVpnInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnInterfaceConfIndex"))
if mibBuilder.loadTexts: mplsVpnInterfaceConfEntry.setStatus('current')
mplsVpnInterfaceConfIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mplsVpnInterfaceConfIndex.setStatus('current')
mplsVpnInterfaceLabelEdgeType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerEdge", 1), ("customerEdge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnInterfaceLabelEdgeType.setStatus('current')
mplsVpnInterfaceVpnClassification = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnInterfaceVpnClassification.setStatus('current')
mplsVpnInterfaceVpnRouteDistProtocol = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 4), Bits().clone(namedValues=NamedValues(("dummy", 0), ("none", 1), ("bgp", 2), ("ospf", 3), ("rip", 4), ("isis", 5), ("other", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnInterfaceVpnRouteDistProtocol.setStatus('current')
mplsVpnInterfaceConfStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnInterfaceConfStorageType.setStatus('current')
mplsVpnInterfaceConfRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnInterfaceConfRowStatus.setStatus('current')
mplsVpnVrfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 2), )
if mibBuilder.loadTexts: mplsVpnVrfTable.setStatus('current')
mplsVpnVrfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: mplsVpnVrfEntry.setStatus('current')
mplsVpnVrfName = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: mplsVpnVrfName.setStatus('current')
mplsVpnVrfDescription = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfDescription.setStatus('current')
mplsVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 3), MplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteDistinguisher.setStatus('current')
mplsVpnVrfCreationTime = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfCreationTime.setStatus('current')
mplsVpnVrfOperStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfOperStatus.setStatus('current')
mplsVpnVrfActiveInterfaces = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfActiveInterfaces.setStatus('current')
mplsVpnVrfAssociatedInterfaces = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfAssociatedInterfaces.setStatus('current')
mplsVpnVrfConfMidRouteThreshold = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfMidRouteThreshold.setStatus('current')
mplsVpnVrfConfHighRouteThreshold = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfHighRouteThreshold.setStatus('current')
mplsVpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfMaxRoutes.setStatus('current')
mplsVpnVrfConfLastChanged = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfConfLastChanged.setStatus('current')
mplsVpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfRowStatus.setStatus('current')
mplsVpnVrfConfStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 2, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfConfStorageType.setStatus('current')
mplsVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 3), )
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetTable.setStatus('current')
mplsVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTargetIndex"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTargetType"))
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetEntry.setStatus('current')
mplsVpnVrfRouteTargetIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetIndex.setStatus('current')
mplsVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("import", 1), ("export", 2), ("both", 3))))
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetType.setStatus('current')
mplsVpnVrfRouteTarget = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 4), MplsVpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTarget.setStatus('current')
mplsVpnVrfRouteTargetDescr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetDescr.setStatus('current')
mplsVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteTargetRowStatus.setStatus('current')
mplsVpnVrfBgpNbrAddrTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 4), )
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddrTable.setStatus('current')
mplsVpnVrfBgpNbrAddrEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 4, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnInterfaceConfIndex"), (0, "MPLS-VPN-MIB", "mplsVpnVrfBgpNbrIndex"))
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddrEntry.setStatus('current')
mplsVpnVrfBgpNbrIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrIndex.setStatus('current')
mplsVpnVrfBgpNbrRole = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ce", 1), ("pe", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrRole.setStatus('current')
mplsVpnVrfBgpNbrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrType.setStatus('current')
mplsVpnVrfBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrAddr.setStatus('current')
mplsVpnVrfBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrRowStatus.setStatus('current')
mplsVpnVrfBgpNbrStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 4, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrStorageType.setStatus('current')
mplsVpnVrfBgpNbrPrefixTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 5), )
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrPrefixTable.setStatus('current')
mplsVpnVrfBgpNbrPrefixEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 5, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrIpAddrPrefix"), (0, "MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrIpAddrPrefixLen"), (0, "MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrPeer"))
if mibBuilder.loadTexts: mplsVpnVrfBgpNbrPrefixEntry.setStatus('current')
mplsVpnVrfBgpPathAttrPeer = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 1), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrPeer.setStatus('current')
mplsVpnVrfBgpPathAttrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrIpAddrPrefixLen.setStatus('current')
mplsVpnVrfBgpPathAttrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrIpAddrPrefix.setStatus('current')
mplsVpnVrfBgpPathAttrOrigin = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrOrigin.setStatus('current')
mplsVpnVrfBgpPathAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrASPathSegment.setStatus('current')
mplsVpnVrfBgpPathAttrNextHop = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrNextHop.setStatus('current')
mplsVpnVrfBgpPathAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrMultiExitDisc.setStatus('current')
mplsVpnVrfBgpPathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrLocalPref.setStatus('current')
mplsVpnVrfBgpPathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRrouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrAtomicAggregate.setStatus('current')
mplsVpnVrfBgpPathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrAggregatorAS.setStatus('current')
mplsVpnVrfBgpPathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrAggregatorAddr.setStatus('current')
mplsVpnVrfBgpPathAttrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrCalcLocalPref.setStatus('current')
mplsVpnVrfBgpPathAttrBest = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrBest.setStatus('current')
mplsVpnVrfBgpPathAttrUnknown = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfBgpPathAttrUnknown.setStatus('current')
mplsVpnVrfSecTable = MibTable((1, 3, 6, 1, 3, 118, 1, 2, 6), )
if mibBuilder.loadTexts: mplsVpnVrfSecTable.setStatus('current')
mplsVpnVrfSecEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 2, 6, 1), )
mplsVpnVrfEntry.registerAugmentions(("MPLS-VPN-MIB", "mplsVpnVrfSecEntry"))
mplsVpnVrfSecEntry.setIndexNames(*mplsVpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsVpnVrfSecEntry.setStatus('current')
mplsVpnVrfSecIllegalLabelViolations = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfSecIllegalLabelViolations.setStatus('current')
mplsVpnVrfSecIllegalLabelRcvThresh = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfSecIllegalLabelRcvThresh.setStatus('current')
mplsVpnVrfPerfTable = MibTable((1, 3, 6, 1, 3, 118, 1, 3, 1), )
if mibBuilder.loadTexts: mplsVpnVrfPerfTable.setStatus('current')
mplsVpnVrfPerfEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 3, 1, 1), )
mplsVpnVrfEntry.registerAugmentions(("MPLS-VPN-MIB", "mplsVpnVrfPerfEntry"))
mplsVpnVrfPerfEntry.setIndexNames(*mplsVpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsVpnVrfPerfEntry.setStatus('current')
mplsVpnVrfPerfRoutesAdded = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfRoutesAdded.setStatus('current')
mplsVpnVrfPerfRoutesDeleted = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfRoutesDeleted.setStatus('current')
mplsVpnVrfPerfCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfPerfCurrNumRoutes.setStatus('current')
mplsVpnVrfRouteTable = MibTable((1, 3, 6, 1, 3, 118, 1, 4, 1), )
if mibBuilder.loadTexts: mplsVpnVrfRouteTable.setStatus('current')
mplsVpnVrfRouteEntry = MibTableRow((1, 3, 6, 1, 3, 118, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteDest"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteMask"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteTos"), (0, "MPLS-VPN-MIB", "mplsVpnVrfRouteNextHop"))
if mibBuilder.loadTexts: mplsVpnVrfRouteEntry.setStatus('current')
mplsVpnVrfRouteDest = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 1), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfRouteDest.setStatus('current')
mplsVpnVrfRouteDestAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteDestAddrType.setStatus('current')
mplsVpnVrfRouteMask = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfRouteMask.setStatus('current')
mplsVpnVrfRouteMaskAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMaskAddrType.setStatus('current')
mplsVpnVrfRouteTos = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: mplsVpnVrfRouteTos.setStatus('current')
mplsVpnVrfRouteNextHop = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 6), InetAddress())
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHop.setStatus('current')
mplsVpnVrfRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHopAddrType.setStatus('current')
mplsVpnVrfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteIfIndex.setStatus('current')
mplsVpnVrfRouteType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteType.setStatus('current')
mplsVpnVrfRouteProto = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteProto.setStatus('current')
mplsVpnVrfRouteAge = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnVrfRouteAge.setStatus('current')
mplsVpnVrfRouteInfo = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 12), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteInfo.setStatus('current')
mplsVpnVrfRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteNextHopAS.setStatus('current')
mplsVpnVrfRouteMetric1 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric1.setStatus('current')
mplsVpnVrfRouteMetric2 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric2.setStatus('current')
mplsVpnVrfRouteMetric3 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric3.setStatus('current')
mplsVpnVrfRouteMetric4 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric4.setStatus('current')
mplsVpnVrfRouteMetric5 = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteMetric5.setStatus('current')
mplsVpnVrfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteRowStatus.setStatus('current')
mplsVpnVrfRouteStorageType = MibTableColumn((1, 3, 6, 1, 3, 118, 1, 4, 1, 1, 20), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsVpnVrfRouteStorageType.setStatus('current')
mplsVrfIfUp = NotificationType((1, 3, 6, 1, 3, 118, 0, 1))
if mibBuilder.loadTexts: mplsVrfIfUp.setStatus('current')
mplsVrfIfDown = NotificationType((1, 3, 6, 1, 3, 118, 0, 2))
if mibBuilder.loadTexts: mplsVrfIfDown.setStatus('current')
mplsNumVrfRouteMidThreshExceeded = NotificationType((1, 3, 6, 1, 3, 118, 0, 3))
if mibBuilder.loadTexts: mplsNumVrfRouteMidThreshExceeded.setStatus('current')
mplsNumVrfRouteMaxThreshExceeded = NotificationType((1, 3, 6, 1, 3, 118, 0, 4))
if mibBuilder.loadTexts: mplsNumVrfRouteMaxThreshExceeded.setStatus('current')
mplsNumVrfSecIllegalLabelThreshExceeded = NotificationType((1, 3, 6, 1, 3, 118, 0, 5))
if mibBuilder.loadTexts: mplsNumVrfSecIllegalLabelThreshExceeded.setStatus('current')
mplsVpnGroups = MibIdentifier((1, 3, 6, 1, 3, 118, 3, 1))
mplsVpnCompliances = MibIdentifier((1, 3, 6, 1, 3, 118, 3, 2))
mplsVpnModuleCompliance = ModuleCompliance((1, 3, 6, 1, 3, 118, 3, 2, 1)).setObjects(("MPLS-VPN-MIB", "mplsVpnScalarGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfGroup"), ("MPLS-VPN-MIB", "mplsVpnInterfaceGroup"), ("MPLS-VPN-MIB", "mplsVpnPerfGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrGroup"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnModuleCompliance = mplsVpnModuleCompliance.setStatus('current')
mplsVpnScalarGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 1)).setObjects(("MPLS-VPN-MIB", "mplsVpnConfiguredVrfs"), ("MPLS-VPN-MIB", "mplsVpnActiveVrfs"), ("MPLS-VPN-MIB", "mplsVpnConnectedInterfaces"), ("MPLS-VPN-MIB", "mplsVpnNotificationEnable"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMaxPossibleRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnScalarGroup = mplsVpnScalarGroup.setStatus('current')
mplsVpnVrfGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 2)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfDescription"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteDistinguisher"), ("MPLS-VPN-MIB", "mplsVpnVrfCreationTime"), ("MPLS-VPN-MIB", "mplsVpnVrfOperStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfActiveInterfaces"), ("MPLS-VPN-MIB", "mplsVpnVrfAssociatedInterfaces"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMidRouteThreshold"), ("MPLS-VPN-MIB", "mplsVpnVrfConfHighRouteThreshold"), ("MPLS-VPN-MIB", "mplsVpnVrfConfMaxRoutes"), ("MPLS-VPN-MIB", "mplsVpnVrfConfLastChanged"), ("MPLS-VPN-MIB", "mplsVpnVrfConfRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfGroup = mplsVpnVrfGroup.setStatus('current')
mplsVpnInterfaceGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 3)).setObjects(("MPLS-VPN-MIB", "mplsVpnInterfaceLabelEdgeType"), ("MPLS-VPN-MIB", "mplsVpnInterfaceVpnClassification"), ("MPLS-VPN-MIB", "mplsVpnInterfaceVpnRouteDistProtocol"), ("MPLS-VPN-MIB", "mplsVpnInterfaceConfStorageType"), ("MPLS-VPN-MIB", "mplsVpnInterfaceConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnInterfaceGroup = mplsVpnInterfaceGroup.setStatus('current')
mplsVpnPerfGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 4)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfPerfRoutesAdded"), ("MPLS-VPN-MIB", "mplsVpnVrfPerfRoutesDeleted"), ("MPLS-VPN-MIB", "mplsVpnVrfPerfCurrNumRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnPerfGroup = mplsVpnPerfGroup.setStatus('current')
mplsVpnVrfBgpNbrGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 5)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrRole"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrType"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrAddr"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpNbrStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfBgpNbrGroup = mplsVpnVrfBgpNbrGroup.setStatus('current')
mplsVpnVrfBgpPrefixGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 6)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrOrigin"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrASPathSegment"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrNextHop"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrMultiExitDisc"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrLocalPref"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrAtomicAggregate"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrAggregatorAS"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrAggregatorAddr"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrCalcLocalPref"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrBest"), ("MPLS-VPN-MIB", "mplsVpnVrfBgpPathAttrUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfBgpPrefixGroup = mplsVpnVrfBgpPrefixGroup.setStatus('current')
mplsVpnSecGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 7)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfSecIllegalLabelViolations"), ("MPLS-VPN-MIB", "mplsVpnVrfSecIllegalLabelRcvThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnSecGroup = mplsVpnSecGroup.setStatus('current')
mplsVpnVrfRouteGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 8)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfRouteDestAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMaskAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteNextHopAddrType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteIfIndex"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteType"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteProto"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteAge"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteInfo"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteNextHopAS"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric1"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric2"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric3"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric4"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteMetric5"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteRowStatus"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfRouteGroup = mplsVpnVrfRouteGroup.setStatus('current')
mplsVpnVrfRouteTargetGroup = ObjectGroup((1, 3, 6, 1, 3, 118, 3, 1, 9)).setObjects(("MPLS-VPN-MIB", "mplsVpnVrfRouteTarget"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetDescr"), ("MPLS-VPN-MIB", "mplsVpnVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnVrfRouteTargetGroup = mplsVpnVrfRouteTargetGroup.setStatus('current')
mplsVpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 3, 118, 3, 1, 10)).setObjects(("MPLS-VPN-MIB", "mplsVrfIfUp"), ("MPLS-VPN-MIB", "mplsVrfIfDown"), ("MPLS-VPN-MIB", "mplsNumVrfRouteMidThreshExceeded"), ("MPLS-VPN-MIB", "mplsNumVrfRouteMaxThreshExceeded"), ("MPLS-VPN-MIB", "mplsNumVrfSecIllegalLabelThreshExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsVpnNotificationGroup = mplsVpnNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-VPN-MIB", mplsVpnVrfRouteEntry=mplsVpnVrfRouteEntry, mplsVpnVrfBgpPathAttrUnknown=mplsVpnVrfBgpPathAttrUnknown, mplsVpnVrfSecIllegalLabelRcvThresh=mplsVpnVrfSecIllegalLabelRcvThresh, mplsVpnVrfPerfRoutesAdded=mplsVpnVrfPerfRoutesAdded, mplsVpnScalarGroup=mplsVpnScalarGroup, mplsVpnNotificationEnable=mplsVpnNotificationEnable, mplsVpnVrfRouteAge=mplsVpnVrfRouteAge, mplsVpnVrfDescription=mplsVpnVrfDescription, mplsVpnVrfBgpNbrAddrTable=mplsVpnVrfBgpNbrAddrTable, mplsVpnVrfRouteTargetRowStatus=mplsVpnVrfRouteTargetRowStatus, mplsNumVrfRouteMidThreshExceeded=mplsNumVrfRouteMidThreshExceeded, mplsVpnVrfRouteStorageType=mplsVpnVrfRouteStorageType, mplsVpnVrfRouteDistinguisher=mplsVpnVrfRouteDistinguisher, mplsVpnVrfSecEntry=mplsVpnVrfSecEntry, mplsVpnSecGroup=mplsVpnSecGroup, mplsVpnVrfRouteTargetEntry=mplsVpnVrfRouteTargetEntry, mplsVpnVrfConfMaxRoutes=mplsVpnVrfConfMaxRoutes, mplsVpnMIB=mplsVpnMIB, mplsVpnVrfRouteTargetGroup=mplsVpnVrfRouteTargetGroup, mplsVpnVrfRouteTargetType=mplsVpnVrfRouteTargetType, mplsVpnVrfBgpNbrAddr=mplsVpnVrfBgpNbrAddr, mplsVpnCompliances=mplsVpnCompliances, mplsVpnVrfBgpPathAttrASPathSegment=mplsVpnVrfBgpPathAttrASPathSegment, mplsVpnInterfaceConfRowStatus=mplsVpnInterfaceConfRowStatus, mplsVpnVrfAssociatedInterfaces=mplsVpnVrfAssociatedInterfaces, mplsVpnVrfRouteMetric4=mplsVpnVrfRouteMetric4, mplsVpnVrfName=mplsVpnVrfName, mplsVpnVrfBgpPathAttrBest=mplsVpnVrfBgpPathAttrBest, mplsVpnVrfCreationTime=mplsVpnVrfCreationTime, mplsNumVrfRouteMaxThreshExceeded=mplsNumVrfRouteMaxThreshExceeded, mplsVpnInterfaceGroup=mplsVpnInterfaceGroup, mplsVpnRoute=mplsVpnRoute, mplsVpnVrfBgpNbrPrefixEntry=mplsVpnVrfBgpNbrPrefixEntry, mplsVpnInterfaceLabelEdgeType=mplsVpnInterfaceLabelEdgeType, mplsVpnVrfBgpPathAttrMultiExitDisc=mplsVpnVrfBgpPathAttrMultiExitDisc, mplsVpnVrfRouteTable=mplsVpnVrfRouteTable, mplsVpnConformance=mplsVpnConformance, mplsVpnVrfRouteTargetIndex=mplsVpnVrfRouteTargetIndex, mplsVpnInterfaceConfStorageType=mplsVpnInterfaceConfStorageType, mplsVpnVrfBgpPathAttrPeer=mplsVpnVrfBgpPathAttrPeer, mplsVpnVrfTable=mplsVpnVrfTable, mplsVpnInterfaceConfEntry=mplsVpnInterfaceConfEntry, mplsVpnVrfRouteTarget=mplsVpnVrfRouteTarget, mplsVpnGroups=mplsVpnGroups, mplsVpnVrfSecTable=mplsVpnVrfSecTable, mplsVpnConf=mplsVpnConf, mplsVpnNotifications=mplsVpnNotifications, mplsVpnVrfBgpPathAttrAtomicAggregate=mplsVpnVrfBgpPathAttrAtomicAggregate, MplsVpnId=MplsVpnId, mplsVpnVrfRouteMetric3=mplsVpnVrfRouteMetric3, mplsVpnInterfaceConfTable=mplsVpnInterfaceConfTable, mplsVpnVrfRouteTos=mplsVpnVrfRouteTos, mplsVpnVrfPerfTable=mplsVpnVrfPerfTable, mplsVpnVrfRouteRowStatus=mplsVpnVrfRouteRowStatus, mplsVpnVrfRouteNextHop=mplsVpnVrfRouteNextHop, mplsVpnConfiguredVrfs=mplsVpnConfiguredVrfs, mplsVpnActiveVrfs=mplsVpnActiveVrfs, mplsVpnVrfBgpNbrIndex=mplsVpnVrfBgpNbrIndex, mplsVpnVrfBgpPathAttrCalcLocalPref=mplsVpnVrfBgpPathAttrCalcLocalPref, mplsVpnVrfPerfEntry=mplsVpnVrfPerfEntry, mplsVpnConnectedInterfaces=mplsVpnConnectedInterfaces, mplsVrfIfDown=mplsVrfIfDown, mplsVpnInterfaceConfIndex=mplsVpnInterfaceConfIndex, mplsVpnVrfPerfRoutesDeleted=mplsVpnVrfPerfRoutesDeleted, mplsVpnVrfBgpNbrPrefixTable=mplsVpnVrfBgpNbrPrefixTable, mplsVpnVrfBgpPrefixGroup=mplsVpnVrfBgpPrefixGroup, mplsVpnVrfConfLastChanged=mplsVpnVrfConfLastChanged, mplsVpnVrfOperStatus=mplsVpnVrfOperStatus, mplsVpnVrfRouteMetric2=mplsVpnVrfRouteMetric2, mplsVpnVrfBgpPathAttrOrigin=mplsVpnVrfBgpPathAttrOrigin, mplsVpnVrfBgpNbrStorageType=mplsVpnVrfBgpNbrStorageType, mplsVrfIfUp=mplsVrfIfUp, mplsVpnVrfSecIllegalLabelViolations=mplsVpnVrfSecIllegalLabelViolations, mplsVpnVrfConfRowStatus=mplsVpnVrfConfRowStatus, mplsVpnVrfRouteDest=mplsVpnVrfRouteDest, mplsVpnVrfActiveInterfaces=mplsVpnVrfActiveInterfaces, mplsVpnVrfRouteTargetDescr=mplsVpnVrfRouteTargetDescr, mplsVpnNotificationGroup=mplsVpnNotificationGroup, mplsVpnVrfBgpNbrRowStatus=mplsVpnVrfBgpNbrRowStatus, mplsVpnVrfBgpPathAttrLocalPref=mplsVpnVrfBgpPathAttrLocalPref, mplsVpnVrfConfMaxPossibleRoutes=mplsVpnVrfConfMaxPossibleRoutes, mplsVpnVrfGroup=mplsVpnVrfGroup, mplsVpnVrfBgpNbrType=mplsVpnVrfBgpNbrType, mplsVpnVrfBgpPathAttrAggregatorAS=mplsVpnVrfBgpPathAttrAggregatorAS, mplsVpnVrfPerfCurrNumRoutes=mplsVpnVrfPerfCurrNumRoutes, mplsNumVrfSecIllegalLabelThreshExceeded=mplsNumVrfSecIllegalLabelThreshExceeded, mplsVpnVrfConfHighRouteThreshold=mplsVpnVrfConfHighRouteThreshold, mplsVpnInterfaceVpnRouteDistProtocol=mplsVpnInterfaceVpnRouteDistProtocol, mplsVpnVrfRouteMetric1=mplsVpnVrfRouteMetric1, mplsVpnScalars=mplsVpnScalars, mplsVpnPerf=mplsVpnPerf, mplsVpnVrfBgpPathAttrIpAddrPrefixLen=mplsVpnVrfBgpPathAttrIpAddrPrefixLen, mplsVpnVrfRouteType=mplsVpnVrfRouteType, mplsVpnVrfRouteGroup=mplsVpnVrfRouteGroup, mplsVpnVrfRouteInfo=mplsVpnVrfRouteInfo, mplsVpnPerfGroup=mplsVpnPerfGroup, mplsVpnVrfConfStorageType=mplsVpnVrfConfStorageType, mplsVpnVrfRouteIfIndex=mplsVpnVrfRouteIfIndex, mplsVpnVrfBgpPathAttrAggregatorAddr=mplsVpnVrfBgpPathAttrAggregatorAddr, mplsVpnVrfRouteMask=mplsVpnVrfRouteMask, mplsVpnVrfConfMidRouteThreshold=mplsVpnVrfConfMidRouteThreshold, mplsVpnVrfBgpPathAttrIpAddrPrefix=mplsVpnVrfBgpPathAttrIpAddrPrefix, mplsVpnVrfBgpNbrGroup=mplsVpnVrfBgpNbrGroup, mplsVpnVrfEntry=mplsVpnVrfEntry, mplsVpnVrfRouteNextHopAS=mplsVpnVrfRouteNextHopAS, PYSNMP_MODULE_ID=mplsVpnMIB, mplsVpnVrfRouteTargetTable=mplsVpnVrfRouteTargetTable, mplsVpnVrfBgpPathAttrNextHop=mplsVpnVrfBgpPathAttrNextHop, mplsVpnVrfRouteMaskAddrType=mplsVpnVrfRouteMaskAddrType, mplsVpnObjects=mplsVpnObjects, mplsVpnVrfRouteProto=mplsVpnVrfRouteProto, mplsVpnVrfRouteDestAddrType=mplsVpnVrfRouteDestAddrType, mplsVpnInterfaceVpnClassification=mplsVpnInterfaceVpnClassification, mplsVpnVrfRouteNextHopAddrType=mplsVpnVrfRouteNextHopAddrType, mplsVpnVrfRouteMetric5=mplsVpnVrfRouteMetric5, MplsVpnRouteDistinguisher=MplsVpnRouteDistinguisher, mplsVpnModuleCompliance=mplsVpnModuleCompliance, mplsVpnVrfBgpNbrAddrEntry=mplsVpnVrfBgpNbrAddrEntry, mplsVpnVrfBgpNbrRole=mplsVpnVrfBgpNbrRole)
