#
# PySNMP MIB module ATEN-PE-CFG (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/aten/ATEN-PE-CFG_int.mib
# Produced by pysmi-1.1.8 at Mon Jan 17 19:19:00 2022
# On host fv-az36-128 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
KeyChange, = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "KeyChange")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, IpAddress, NotificationType, TimeTicks, iso, Integer32, Gauge32, ObjectIdentity, Bits, Counter32, MibIdentifier, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "IpAddress", "NotificationType", "TimeTicks", "iso", "Integer32", "Gauge32", "ObjectIdentity", "Bits", "Counter32", "MibIdentifier", "ModuleIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aten = ModuleIdentity((1, 3, 6, 1, 4, 1, 21317))
aten.setRevisions(('2013-10-31 11:10',))
if mibBuilder.loadTexts: aten.setLastUpdated('201310311110Z')
if mibBuilder.loadTexts: aten.setOrganization('ATEN')
atenProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1))
overip = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3))
poweroverip = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2))
pe = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2))
userManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1))
doorSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16))
pop = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17))
cap = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18))
outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2))
bank = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3))
deviceManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4))
dashBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4))
servicePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5))
ipv4config = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6))
eventNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7))
devicesnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1))
syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3))
configurationNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9))
dateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8))
timeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1))
manualInput = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2))
networkTime = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3))
devicesecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5))
loginFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1))
workingMode = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 2))
accountPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3))
loginRestriction = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4))
ipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2))
macFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3))
authentication = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1))
modelName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
deviceValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3), )
if mibBuilder.loadTexts: deviceValueTable.setStatus('current')
deviceValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceValueIndex"))
if mibBuilder.loadTexts: deviceValueEntry.setStatus('current')
deviceValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceValueIndex.setStatus('current')
inputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputMaxVoltage.setStatus('current')
inputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputMaxCurrent.setStatus('current')
powerCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerCapacity.setStatus('current')
devicePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerFactor.setStatus('current')
deviceOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5), )
if mibBuilder.loadTexts: deviceOutletStatusTable.setStatus('current')
deviceOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceOutletStatusIndex"))
if mibBuilder.loadTexts: deviceOutletStatusEntry.setStatus('current')
deviceOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOutletStatusIndex.setStatus('current')
displayOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("fault", 4), ("noauth", 5), ("not-support", 6), ("pop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: displayOutletStatus.setStatus('current')
deviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6), )
if mibBuilder.loadTexts: deviceConfigTable.setStatus('current')
deviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceConfigIndex"))
if mibBuilder.loadTexts: deviceConfigEntry.setStatus('current')
deviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceConfigIndex.setStatus('current')
deviceMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinCurMT.setStatus('current')
deviceMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxCurMT.setStatus('current')
deviceMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinVolMT.setStatus('current')
deviceMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxVolMT.setStatus('current')
deviceMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMinPMT.setStatus('current')
deviceMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxPMT.setStatus('current')
deviceMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMaxPDMT.setStatus('current')
deviceSensorTresholdTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7), )
if mibBuilder.loadTexts: deviceSensorTresholdTable.setStatus('current')
deviceSensorTresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceSensorTresholdIndex"))
if mibBuilder.loadTexts: deviceSensorTresholdEntry.setStatus('current')
deviceSensorTresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSensorTresholdIndex.setStatus('current')
sensorMinTempMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200, 600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinTempMT.setStatus('current')
sensorMaxTempMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200, 600), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxTempMT.setStatus('current')
sensorMinHumMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(150, 950), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinHumMT.setStatus('current')
sensorMaxHumMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(150, 950), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxHumMT.setStatus('current')
sensorMinPressMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 2500), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMinPressMT.setStatus('current')
sensorMaxPressMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2500, 2500), ValueRangeConstraint(-3000, -3000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMaxPressMT.setStatus('current')
deviceOutletControl = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("nostatus", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceOutletControl.setStatus('current')
deviceOutletReboot = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceOutletReboot.setStatus('current')
switchable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("mix", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchable.setStatus('current')
perportreading = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perportreading.setStatus('current')
sensornumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensornumber.setStatus('current')
outletnumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletnumber.setStatus('current')
banknumber = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: banknumber.setStatus('current')
doorSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("close", 0), ("open", 1), ("not-attached", 2), ("not-support", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorStatus.setStatus('current')
doorSensorType = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notinstalled", 0), ("photo", 1), ("inductiveproximity", 2), ("reed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doorSensorType.setStatus('current')
enablePOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePOPmode.setStatus('current')
popThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: popThreshold.setStatus('current')
enableOutletPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableOutletPOPmode.setStatus('current')
enableLIFOPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLIFOPOPmode.setStatus('current')
enablePriorityPOPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePriorityPOPmode.setStatus('current')
enableCAPmode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableCAPmode.setStatus('current')
outletCAPTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2), )
if mibBuilder.loadTexts: outletCAPTable.setStatus('current')
outletCAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletCAPIndex"))
if mibBuilder.loadTexts: outletCAPEntry.setStatus('current')
outletCAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCAPIndex.setStatus('current')
outletCAPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCAPPriority.setStatus('current')
outletInitMode = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-delaytime", 1), ("delaytime", 2), ("not-support", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletInitMode.setStatus('current')
deviceIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99), )
if mibBuilder.loadTexts: deviceIntegerValueTable.setStatus('current')
deviceIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "deviceIntegerValueIndex"))
if mibBuilder.loadTexts: deviceIntegerValueEntry.setStatus('current')
deviceIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerValueIndex.setStatus('current')
deviceIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerCurrent.setStatus('current')
deviceIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerVoltage.setStatus('current')
deviceIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerPower.setStatus('current')
deviceIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntegerPowerDissipation.setStatus('current')
sensorIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100), )
if mibBuilder.loadTexts: sensorIntegerValueTable.setStatus('current')
sensorIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1), ).setIndexNames((0, "ATEN-PE-CFG", "sensorIntegerValueIndex"))
if mibBuilder.loadTexts: sensorIntegerValueEntry.setStatus('current')
sensorIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerValueIndex.setStatus('current')
sensorIntegerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerTemperature.setStatus('current')
sensorIntegerHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerHumidity.setStatus('current')
sensorIntegerPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 1, 100, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIntegerPressure.setStatus('current')
outletValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: outletValueTable.setStatus('current')
outletValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletValueIndex"))
if mibBuilder.loadTexts: outletValueEntry.setStatus('current')
outletValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletValueIndex.setStatus('current')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
outlet1Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1Status.setStatus('current')
outlet2Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2Status.setStatus('current')
outlet3Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3Status.setStatus('current')
outlet4Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4Status.setStatus('current')
outlet5Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5Status.setStatus('current')
outlet6Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6Status.setStatus('current')
outlet7Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7Status.setStatus('current')
outlet8Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8Status.setStatus('current')
outlet9Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9Status.setStatus('current')
outlet10Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10Status.setStatus('current')
outlet11Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11Status.setStatus('current')
outlet12Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12Status.setStatus('current')
outlet13Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13Status.setStatus('current')
outlet14Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14Status.setStatus('current')
outlet15Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15Status.setStatus('current')
outlet16Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16Status.setStatus('current')
outlet17Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17Status.setStatus('current')
outlet18Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18Status.setStatus('current')
outlet19Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19Status.setStatus('current')
outlet20Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20Status.setStatus('current')
outlet21Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21Status.setStatus('current')
outlet22Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22Status.setStatus('current')
outlet23Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23Status.setStatus('current')
outlet24Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24Status.setStatus('current')
outlet25Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25Status.setStatus('current')
outlet26Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26Status.setStatus('current')
outlet27Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27Status.setStatus('current')
outlet28Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28Status.setStatus('current')
outlet29Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29Status.setStatus('current')
outlet30Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30Status.setStatus('current')
outlet31Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31Status.setStatus('current')
outlet32Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32Status.setStatus('current')
outlet33Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33Status.setStatus('current')
outlet34Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34Status.setStatus('current')
outlet35Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35Status.setStatus('current')
outlet36Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36Status.setStatus('current')
outlet37Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet37Status.setStatus('current')
outlet38Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet38Status.setStatus('current')
outlet39Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet39Status.setStatus('current')
outlet40Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet40Status.setStatus('current')
outlet41Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet41Status.setStatus('current')
outlet42Status = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("pending", 3), ("reboot", 4), ("fault", 5), ("noauth", 6), ("not-support", 7), ("pop", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet42Status.setStatus('current')
outletSwitchableTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70), )
if mibBuilder.loadTexts: outletSwitchableTable.setStatus('current')
outletSwitchableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletSwitchableIndex"))
if mibBuilder.loadTexts: outletSwitchableEntry.setStatus('current')
outletSwitchableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchableIndex.setStatus('current')
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 70, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setStatus('current')
outletIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99), )
if mibBuilder.loadTexts: outletIntegerValueTable.setStatus('current')
outletIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletIntegerValueIndex"))
if mibBuilder.loadTexts: outletIntegerValueEntry.setStatus('current')
outletIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerValueIndex.setStatus('current')
outletIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerCurrent.setStatus('current')
outletIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerVoltage.setStatus('current')
outletIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerPower.setStatus('current')
outletIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletIntegerPowerDissipation.setStatus('current')
outletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10), )
if mibBuilder.loadTexts: outletConfigTable.setStatus('current')
outletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1), ).setIndexNames((0, "ATEN-PE-CFG", "outletConfigIndex"))
if mibBuilder.loadTexts: outletConfigEntry.setStatus('current')
outletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletConfigIndex.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
outletConfirmation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("noauth", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfirmation.setStatus('current')
outletOnDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOnDelayTime.setStatus('current')
outletOffDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOffDelayTime.setStatus('current')
outletShutdownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kill-the-power", 1), ("wake-on-lan", 2), ("after-ac-back", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletShutdownMethod.setStatus('current')
outletMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMAC.setStatus('current')
outletMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinCurMT.setStatus('current')
outletMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxCurMT.setStatus('current')
outletMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinVolMT.setStatus('current')
outletMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxVolMT.setStatus('current')
outletMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMinPMT.setStatus('current')
outletMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxPMT.setStatus('current')
outletMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletMaxPDMT.setStatus('current')
breakerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: breakerStatusTable.setStatus('current')
breakerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "breakerStatusIndex"))
if mibBuilder.loadTexts: breakerStatusEntry.setStatus('current')
breakerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatusIndex.setStatus('current')
breakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-support", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatus.setStatus('current')
bankValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2), )
if mibBuilder.loadTexts: bankValueTable.setStatus('current')
bankValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankValueIndex"))
if mibBuilder.loadTexts: bankValueEntry.setStatus('current')
bankValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankValueIndex.setStatus('current')
bankMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankMaxCurrent.setStatus('current')
bankAttachStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noattached", 1), ("attached", 2), ("error", 3), ("noexisted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankAttachStatus.setStatus('current')
bankPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankPowerFactor.setStatus('current')
bankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3), )
if mibBuilder.loadTexts: bankConfigTable.setStatus('current')
bankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankConfigIndex"))
if mibBuilder.loadTexts: bankConfigEntry.setStatus('current')
bankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankConfigIndex.setStatus('current')
bankName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankName.setStatus('current')
bankMinCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinCurMT.setStatus('current')
bankMaxCurMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxCurMT.setStatus('current')
bankMinVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinVolMT.setStatus('current')
bankMaxVolMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(900, 2600), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxVolMT.setStatus('current')
bankMinPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMinPMT.setStatus('current')
bankMaxPMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 99999), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxPMT.setStatus('current')
bankMaxPDMT = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 999990), ValueRangeConstraint(-3000, -3000), ValueRangeConstraint(-2000000, -2000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankMaxPDMT.setStatus('current')
bankControlTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4), )
if mibBuilder.loadTexts: bankControlTable.setStatus('current')
bankControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankControlIndex"))
if mibBuilder.loadTexts: bankControlEntry.setStatus('current')
bankControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankControlIndex.setStatus('current')
bankControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("reboot", 3), ("nostatus", 4), ("not-support", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bankControlStatus.setStatus('current')
bankIntegerValueTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99), )
if mibBuilder.loadTexts: bankIntegerValueTable.setStatus('current')
bankIntegerValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1), ).setIndexNames((0, "ATEN-PE-CFG", "bankIntegerValueIndex"))
if mibBuilder.loadTexts: bankIntegerValueEntry.setStatus('current')
bankIntegerValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerValueIndex.setStatus('current')
bankIntegerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerCurrent.setStatus('current')
bankIntegerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerVoltage.setStatus('current')
bankIntegerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerPower.setStatus('current')
bankIntegerPowerDissipation = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 2, 3, 99, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankIntegerPowerDissipation.setStatus('current')
deviceMAC = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMAC.setStatus('current')
deviceIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIPv4.setStatus('current')
deviceFWversion = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFWversion.setStatus('current')
dashboardRow = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardRow.setStatus('current')
dashboardColumn = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardColumn.setStatus('current')
dashboardRackName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dashboardRackName.setStatus('current')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
httpsOnlyEnable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsOnlyEnable.setStatus('current')
staticIPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIPEnabled.setStatus('current')
fixedIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fixedIPv4.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gateway.setStatus('current')
staticDNSEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDNSEnabled.setStatus('current')
dnsPreferIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPreferIPv4.setStatus('current')
dnsAlternateIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAlternateIPv4.setStatus('current')
trapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapEnabled.setStatus('current')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('current')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "trapReceiverNumber"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('current')
trapReceiverNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapReceiverNumber.setStatus('current')
trapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapReceiverIPAddress.setStatus('current')
trapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPort.setStatus('current')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('current')
trapUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapUsername.setStatus('current')
trapAuthpassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuthpassword.setStatus('current')
trapPrivpassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapPrivpassword.setStatus('current')
sysLogServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerEnabled.setStatus('current')
sysLogServerIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerIPv4.setStatus('current')
sysLogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogServerPort.setStatus('current')
smtpServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerEnabled.setStatus('current')
smtpServerName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerName.setStatus('current')
smtpAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAuthEnabled.setStatus('current')
smtpAccountName = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAccountName.setStatus('current')
smtpAccountPwd = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpAccountPwd.setStatus('current')
smtpMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpMailFrom.setStatus('current')
smtpMailTo = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpMailTo.setStatus('current')
configurationNotifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationNotifyEnabled.setStatus('current')
configurationNotifyTrapMSG = NotificationType((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 7, 9, 2))
if mibBuilder.loadTexts: configurationNotifyTrapMSG.setStatus('current')
timeZoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneSetting.setStatus('current')
dstEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dstEnabled.setStatus('current')
dateSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateSetting.setStatus('current')
timeSetting = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSetting.setStatus('current')
autoAdjustEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoAdjustEnabled.setStatus('current')
preferNTP = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferNTP.setStatus('current')
preferServerIPenable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferServerIPenable.setStatus('current')
preferNTPIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferNTPIp.setStatus('current')
alternateNtpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtpEnabled.setStatus('current')
alternateNtp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtp.setStatus('current')
alternateServerIPenable = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateServerIPenable.setStatus('current')
alternateNtpIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNtpIp.setStatus('current')
adjustTimeEveryDays = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 4, 8, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adjustTimeEveryDays.setStatus('current')
loginAllowTimes = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginAllowTimes.setStatus('current')
loginTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginTimeOut.setStatus('current')
icmpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpEnabled.setStatus('current')
minUserNameLen = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minUserNameLen.setStatus('current')
minUserPwdLen = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minUserPwdLen.setStatus('current')
upperCaseEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upperCaseEnabled.setStatus('current')
lowerCaseEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowerCaseEnabled.setStatus('current')
numberEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberEnabled.setStatus('current')
disableDuplicateLogin = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableDuplicateLogin.setStatus('current')
loginString = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginString.setStatus('current')
ipFilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterEnabled.setStatus('current')
ipFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterRule.setStatus('current')
ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3), )
if mibBuilder.loadTexts: ipFilterTable.setStatus('current')
ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "ipFilterIndex"))
if mibBuilder.loadTexts: ipFilterEntry.setStatus('current')
ipFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterIndex.setStatus('current')
ipFilterFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterFrom.setStatus('current')
ipFilterTo = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterTo.setStatus('current')
macFilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterEnabled.setStatus('current')
macFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterRule.setStatus('current')
macFilterTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3), )
if mibBuilder.loadTexts: macFilterTable.setStatus('current')
macFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1), ).setIndexNames((0, "ATEN-PE-CFG", "macFilterIndex"))
if mibBuilder.loadTexts: macFilterEntry.setStatus('current')
macFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFilterIndex.setStatus('current')
macFilterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 4, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterSet.setStatus('current')
radiusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusEnabled.setStatus('current')
preferRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferRadiusIp.setStatus('current')
preferRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferRadiusPort.setStatus('current')
alternateRadiusIp = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateRadiusIp.setStatus('current')
alternateRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateRadiusPort.setStatus('current')
radiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeOut.setStatus('current')
radiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetry.setStatus('current')
radiusSecret = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 3, 5, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecret.setStatus('current')
usrListTable = MibTable((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1), )
if mibBuilder.loadTexts: usrListTable.setStatus('current')
usrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1), ).setIndexNames((0, "ATEN-PE-CFG", "usrIndex"))
if mibBuilder.loadTexts: usrListEntry.setStatus('current')
usrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrIndex.setStatus('current')
usrType = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("administrator", 1), ("user", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrType.setStatus('current')
usrName = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrName.setStatus('current')
usrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPassword.setStatus('current')
usrPort1Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort1Auth.setStatus('current')
usrPort2Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort2Auth.setStatus('current')
usrPort3Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort3Auth.setStatus('current')
usrPort4Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort4Auth.setStatus('current')
usrPort5Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort5Auth.setStatus('current')
usrPort6Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort6Auth.setStatus('current')
usrPort7Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort7Auth.setStatus('current')
usrPort8Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort8Auth.setStatus('current')
usrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrEnable.setStatus('current')
usrPort9Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort9Auth.setStatus('current')
usrPort10Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort10Auth.setStatus('current')
usrPort11Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort11Auth.setStatus('current')
usrPort12Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort12Auth.setStatus('current')
usrPort13Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort13Auth.setStatus('current')
usrPort14Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort14Auth.setStatus('current')
usrPort15Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort15Auth.setStatus('current')
usrPort16Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort16Auth.setStatus('current')
usrPort17Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort17Auth.setStatus('current')
usrPort18Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort18Auth.setStatus('current')
usrPort19Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort19Auth.setStatus('current')
usrPort20Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort20Auth.setStatus('current')
usrPort21Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort21Auth.setStatus('current')
usrPort22Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort22Auth.setStatus('current')
usrPort23Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort23Auth.setStatus('current')
usrPort24Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort24Auth.setStatus('current')
usrPort25Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort25Auth.setStatus('current')
usrPort26Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort26Auth.setStatus('current')
usrPort27Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort27Auth.setStatus('current')
usrPort28Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort28Auth.setStatus('current')
usrPort29Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort29Auth.setStatus('current')
usrPort30Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort30Auth.setStatus('current')
usrPort31Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort31Auth.setStatus('current')
usrPort32Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort32Auth.setStatus('current')
usrPort33Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort33Auth.setStatus('current')
usrPort34Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort34Auth.setStatus('current')
usrPort35Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort35Auth.setStatus('current')
usrPort36Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort36Auth.setStatus('current')
usrPort37Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort37Auth.setStatus('current')
usrPort38Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort38Auth.setStatus('current')
usrPort39Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort39Auth.setStatus('current')
usrPort40Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort40Auth.setStatus('current')
usrPort41Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort41Auth.setStatus('current')
usrPort42Auth = MibTableColumn((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("view", 2), ("modify", 3), ("not-support", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrPort42Auth.setStatus('current')
customTrapMSG = NotificationType((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 5))
if mibBuilder.loadTexts: customTrapMSG.setStatus('current')
rebootDevice = MibScalar((1, 3, 6, 1, 4, 1, 21317, 1, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootDevice.setStatus('current')
mibBuilder.exportSymbols("ATEN-PE-CFG", outletConfigEntry=outletConfigEntry, outletMinVolMT=outletMinVolMT, loginTimeOut=loginTimeOut, outletMAC=outletMAC, outlet40Status=outlet40Status, smtpAccountName=smtpAccountName, outlet38Status=outlet38Status, smtpAuthEnabled=smtpAuthEnabled, outlet21Status=outlet21Status, ipFilter=ipFilter, deviceIntegerPowerDissipation=deviceIntegerPowerDissipation, dashboardRow=dashboardRow, numberEnabled=numberEnabled, outlet13Status=outlet13Status, dateTime=dateTime, usrPort34Auth=usrPort34Auth, ipFilterFrom=ipFilterFrom, preferRadiusIp=preferRadiusIp, usrPort25Auth=usrPort25Auth, outletValueIndex=outletValueIndex, pop=pop, rebootDevice=rebootDevice, sensorIntegerPressure=sensorIntegerPressure, bankConfigTable=bankConfigTable, deviceOutletStatusIndex=deviceOutletStatusIndex, deviceValueEntry=deviceValueEntry, loginFailures=loginFailures, bankIntegerValueIndex=bankIntegerValueIndex, cap=cap, config=config, bankMaxPMT=bankMaxPMT, usrPort38Auth=usrPort38Auth, sensorMinTempMT=sensorMinTempMT, outletIntegerValueEntry=outletIntegerValueEntry, usrPort18Auth=usrPort18Auth, doorSensor=doorSensor, sensorMaxPressMT=sensorMaxPressMT, outlet2Status=outlet2Status, bankAttachStatus=bankAttachStatus, userManagement=userManagement, trapAuthpassword=trapAuthpassword, outlet7Status=outlet7Status, usrEnable=usrEnable, bankMaxCurrent=bankMaxCurrent, deviceValueIndex=deviceValueIndex, dashboardColumn=dashboardColumn, modelName=modelName, usrPort2Auth=usrPort2Auth, outletInitMode=outletInitMode, macFilterSet=macFilterSet, breakerStatusIndex=breakerStatusIndex, accountPolicy=accountPolicy, alternateRadiusPort=alternateRadiusPort, outletMaxCurrent=outletMaxCurrent, trapUsername=trapUsername, outlet31Status=outlet31Status, banknumber=banknumber, smtp=smtp, staticIPEnabled=staticIPEnabled, deviceIntegerValueEntry=deviceIntegerValueEntry, outlet27Status=outlet27Status, outletnumber=outletnumber, snmpTrapEntry=snmpTrapEntry, usrPort36Auth=usrPort36Auth, usrPort12Auth=usrPort12Auth, bankValueEntry=bankValueEntry, bankIntegerPowerDissipation=bankIntegerPowerDissipation, radiusSecret=radiusSecret, deviceMinVolMT=deviceMinVolMT, usrListEntry=usrListEntry, snmpTrapTable=snmpTrapTable, deviceConfigTable=deviceConfigTable, bankMinPMT=bankMinPMT, staticDNSEnabled=staticDNSEnabled, outletMaxVolMT=outletMaxVolMT, outlet10Status=outlet10Status, outletSwitchableEntry=outletSwitchableEntry, enableLIFOPOPmode=enableLIFOPOPmode, perportreading=perportreading, outletIntegerPowerDissipation=outletIntegerPowerDissipation, bankMaxPDMT=bankMaxPDMT, trapVersion=trapVersion, deviceFWversion=deviceFWversion, usrPort5Auth=usrPort5Auth, sensornumber=sensornumber, outlet41Status=outlet41Status, outletOffDelayTime=outletOffDelayTime, eventNotification=eventNotification, bankControlIndex=bankControlIndex, smtpMailFrom=smtpMailFrom, usrPort16Auth=usrPort16Auth, outlet34Status=outlet34Status, outlet35Status=outlet35Status, bankMaxCurMT=bankMaxCurMT, outletCAPTable=outletCAPTable, gateway=gateway, atenProducts=atenProducts, bankControlTable=bankControlTable, httpPort=httpPort, usrPort13Auth=usrPort13Auth, usrPort17Auth=usrPort17Auth, deviceOutletReboot=deviceOutletReboot, smtpMailTo=smtpMailTo, sensorMaxTempMT=sensorMaxTempMT, configurationNotifyEnabled=configurationNotifyEnabled, radius=radius, outletMaxCurMT=outletMaxCurMT, bankConfigIndex=bankConfigIndex, deviceSensorTresholdEntry=deviceSensorTresholdEntry, smtpServerEnabled=smtpServerEnabled, devicesnmp=devicesnmp, deviceIntegerValueTable=deviceIntegerValueTable, minUserPwdLen=minUserPwdLen, loginString=loginString, deviceName=deviceName, alternateServerIPenable=alternateServerIPenable, doorSensorStatus=doorSensorStatus, workingMode=workingMode, outletSwitchable=outletSwitchable, switchable=switchable, timeSetting=timeSetting, outletValueEntry=outletValueEntry, macFilterEntry=macFilterEntry, deviceValueTable=deviceValueTable, usrIndex=usrIndex, networkTime=networkTime, dateSetting=dateSetting, sensorIntegerValueTable=sensorIntegerValueTable, deviceMaxPDMT=deviceMaxPDMT, upperCaseEnabled=upperCaseEnabled, outlet25Status=outlet25Status, autoAdjustEnabled=autoAdjustEnabled, powerCapacity=powerCapacity, outletCAPPriority=outletCAPPriority, outletMinPMT=outletMinPMT, sensorMaxHumMT=sensorMaxHumMT, ipFilterTable=ipFilterTable, usrPort1Auth=usrPort1Auth, deviceSensorTresholdTable=deviceSensorTresholdTable, outlet20Status=outlet20Status, deviceManagement=deviceManagement, outletIntegerValueIndex=outletIntegerValueIndex, outletSwitchableIndex=outletSwitchableIndex, subnetMask=subnetMask, outlet6Status=outlet6Status, usrType=usrType, radiusTimeOut=radiusTimeOut, usrPort14Auth=usrPort14Auth, outlet11Status=outlet11Status, dashboardRackName=dashboardRackName, syslog=syslog, sensorMinHumMT=sensorMinHumMT, aten=aten, sensorIntegerValueIndex=sensorIntegerValueIndex, alternateNtpIp=alternateNtpIp, outletIntegerPower=outletIntegerPower, bankMaxVolMT=bankMaxVolMT, deviceMinPMT=deviceMinPMT, ipFilterEntry=ipFilterEntry, outletIntegerVoltage=outletIntegerVoltage, deviceMinCurMT=deviceMinCurMT, usrPort22Auth=usrPort22Auth, device=device, usrPort8Auth=usrPort8Auth, bankConfigEntry=bankConfigEntry, sensorIntegerTemperature=sensorIntegerTemperature, sensorIntegerValueEntry=sensorIntegerValueEntry, preferServerIPenable=preferServerIPenable, deviceIntegerVoltage=deviceIntegerVoltage, outlet15Status=outlet15Status, bankControlStatus=bankControlStatus, outletValueTable=outletValueTable, deviceOutletStatusTable=deviceOutletStatusTable, outletMaxPDMT=outletMaxPDMT, trapEnabled=trapEnabled, trapReceiverNumber=trapReceiverNumber, trapPort=trapPort, usrName=usrName, outlet=outlet, outletOnDelayTime=outletOnDelayTime, outletShutdownMethod=outletShutdownMethod, usrPort39Auth=usrPort39Auth, bank=bank, loginRestriction=loginRestriction, dashBoard=dashBoard, fixedIPv4=fixedIPv4, dnsAlternateIPv4=dnsAlternateIPv4, servicePorts=servicePorts, outlet3Status=outlet3Status, deviceSensorTresholdIndex=deviceSensorTresholdIndex, bankIntegerVoltage=bankIntegerVoltage, outlet24Status=outlet24Status, usrPort42Auth=usrPort42Auth, sysLogServerPort=sysLogServerPort, outlet14Status=outlet14Status, usrPort15Auth=usrPort15Auth, usrPort24Auth=usrPort24Auth, outlet32Status=outlet32Status, usrPort21Auth=usrPort21Auth, outlet4Status=outlet4Status, usrPort41Auth=usrPort41Auth, outlet17Status=outlet17Status, usrPort37Auth=usrPort37Auth, outlet18Status=outlet18Status, bankValueIndex=bankValueIndex, outlet33Status=outlet33Status, timeZone=timeZone, deviceOutletControl=deviceOutletControl, displayOutletStatus=displayOutletStatus, sysLogServerEnabled=sysLogServerEnabled, ipFilterRule=ipFilterRule, deviceMaxVolMT=deviceMaxVolMT, sysLogServerIPv4=sysLogServerIPv4, deviceOutletStatusEntry=deviceOutletStatusEntry, outletCAPEntry=outletCAPEntry, pe=pe, authentication=authentication, enableCAPmode=enableCAPmode, enablePriorityPOPmode=enablePriorityPOPmode, outletIntegerValueTable=outletIntegerValueTable, preferRadiusPort=preferRadiusPort, dnsPreferIPv4=dnsPreferIPv4, alternateNtp=alternateNtp, disableDuplicateLogin=disableDuplicateLogin, customTrapMSG=customTrapMSG, usrPort35Auth=usrPort35Auth, sensorIntegerHumidity=sensorIntegerHumidity, usrPort29Auth=usrPort29Auth, bankIntegerValueEntry=bankIntegerValueEntry, usrPort19Auth=usrPort19Auth, usrPort11Auth=usrPort11Auth, usrPort6Auth=usrPort6Auth, breakerStatusTable=breakerStatusTable, outlet22Status=outlet22Status, preferNTPIp=preferNTPIp, usrPort7Auth=usrPort7Auth, outlet12Status=outlet12Status, manualInput=manualInput, deviceConfigEntry=deviceConfigEntry, bankPowerFactor=bankPowerFactor, bankIntegerCurrent=bankIntegerCurrent, minUserNameLen=minUserNameLen, deviceMaxCurMT=deviceMaxCurMT, bankValueTable=bankValueTable, outlet42Status=outlet42Status, outlet9Status=outlet9Status, outlet8Status=outlet8Status, usrPort9Auth=usrPort9Auth, macFilterRule=macFilterRule, outletName=outletName, doorSensorType=doorSensorType, usrListTable=usrListTable, smtpServerName=smtpServerName, usrPort3Auth=usrPort3Auth)
mibBuilder.exportSymbols("ATEN-PE-CFG", usrPort20Auth=usrPort20Auth, outletMinCurMT=outletMinCurMT, bankMinVolMT=bankMinVolMT, sensorMinPressMT=sensorMinPressMT, ipv4config=ipv4config, poweroverip=poweroverip, macFilterTable=macFilterTable, usrPort4Auth=usrPort4Auth, bankIntegerValueTable=bankIntegerValueTable, alternateRadiusIp=alternateRadiusIp, outletConfigTable=outletConfigTable, configurationNotification=configurationNotification, radiusEnabled=radiusEnabled, loginAllowTimes=loginAllowTimes, radiusRetry=radiusRetry, bankName=bankName, preferNTP=preferNTP, inputMaxVoltage=inputMaxVoltage, outletSwitchableTable=outletSwitchableTable, usrPort40Auth=usrPort40Auth, outletMaxPMT=outletMaxPMT, bankIntegerPower=bankIntegerPower, httpsOnlyEnable=httpsOnlyEnable, usrPort30Auth=usrPort30Auth, usrPort27Auth=usrPort27Auth, deviceIPv4=deviceIPv4, deviceIntegerPower=deviceIntegerPower, enableOutletPOPmode=enableOutletPOPmode, httpsPort=httpsPort, ipFilterEnabled=ipFilterEnabled, smtpAccountPwd=smtpAccountPwd, PYSNMP_MODULE_ID=aten, outlet16Status=outlet16Status, usrPassword=usrPassword, enablePOPmode=enablePOPmode, usrPort23Auth=usrPort23Auth, outletPowerFactor=outletPowerFactor, outletCAPIndex=outletCAPIndex, macFilterIndex=macFilterIndex, outlet26Status=outlet26Status, devicesecurity=devicesecurity, deviceMaxPMT=deviceMaxPMT, outlet5Status=outlet5Status, outlet37Status=outlet37Status, icmpEnabled=icmpEnabled, outlet19Status=outlet19Status, outlet1Status=outlet1Status, outletIntegerCurrent=outletIntegerCurrent, breakerStatus=breakerStatus, ipFilterTo=ipFilterTo, deviceIntegerCurrent=deviceIntegerCurrent, breakerStatusEntry=breakerStatusEntry, outlet36Status=outlet36Status, usrPort32Auth=usrPort32Auth, deviceIntegerValueIndex=deviceIntegerValueIndex, usrPort26Auth=usrPort26Auth, dstEnabled=dstEnabled, usrPort31Auth=usrPort31Auth, deviceMAC=deviceMAC, lowerCaseEnabled=lowerCaseEnabled, overip=overip, outlet23Status=outlet23Status, configurationNotifyTrapMSG=configurationNotifyTrapMSG, trapReceiverIPAddress=trapReceiverIPAddress, alternateNtpEnabled=alternateNtpEnabled, usrPort33Auth=usrPort33Auth, popThreshold=popThreshold, inputMaxCurrent=inputMaxCurrent, outlet39Status=outlet39Status, trapPrivpassword=trapPrivpassword, outlet29Status=outlet29Status, trapCommunity=trapCommunity, macFilter=macFilter, timeZoneSetting=timeZoneSetting, adjustTimeEveryDays=adjustTimeEveryDays, outlet28Status=outlet28Status, bankControlEntry=bankControlEntry, control=control, bankMinCurMT=bankMinCurMT, macFilterEnabled=macFilterEnabled, usrPort10Auth=usrPort10Auth, devicePowerFactor=devicePowerFactor, ipFilterIndex=ipFilterIndex, outletConfirmation=outletConfirmation, usrPort28Auth=usrPort28Auth, outletConfigIndex=outletConfigIndex, deviceConfigIndex=deviceConfigIndex, outlet30Status=outlet30Status)
