#
# PySNMP MIB module PRVT-LOAD-BALANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-LOAD-BALANCE-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:31:47 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Counter32, iso, Bits, TimeTicks, Counter64, Gauge32, IpAddress, ModuleIdentity, NotificationType, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Counter32", "iso", "Bits", "TimeTicks", "Counter64", "Gauge32", "IpAddress", "ModuleIdentity", "NotificationType", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, RowStatus, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention", "TimeStamp")
prvtLoadBalMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 7))
prvtLoadBalMIB.setRevisions(('2010-12-20 00:00',))
if mibBuilder.loadTexts: prvtLoadBalMIB.setLastUpdated('201012200000Z')
if mibBuilder.loadTexts: prvtLoadBalMIB.setOrganization('BATM Advanced Communication')
class PrvtLoadBalMtxIndexTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

prvtLoadBalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1))
prvtLoadBalDistributionMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("general", 2), ("perPortUserNetwork", 3), ("globalNetwork", 4), ("globalUser", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalDistributionMode.setStatus('current')
prvtLoadBalIpV6DistributionMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalIpV6DistributionMode.setStatus('current')
prvtLoadBalSpiDistributionMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalSpiDistributionMode.setStatus('current')
prvtLoadBalMaxAvailSize = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLoadBalMaxAvailSize.setStatus('current')
prvtLoadBalMtxTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 6), )
if mibBuilder.loadTexts: prvtLoadBalMtxTable.setStatus('current')
prvtLoadBalMtxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 6, 1), ).setIndexNames((0, "PRVT-LOAD-BALANCE-MIB", "prvtLoadBalMtxIndex"))
if mibBuilder.loadTexts: prvtLoadBalMtxEntry.setStatus('current')
prvtLoadBalMtxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 6, 1, 1), PrvtLoadBalMtxIndexTC())
if mibBuilder.loadTexts: prvtLoadBalMtxIndex.setStatus('current')
prvtLoadBalMtxBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalMtxBuckets.setStatus('current')
prvtLoadBalMtxSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLoadBalMtxSignature.setStatus('current')
prvtLoadBalIfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7), )
if mibBuilder.loadTexts: prvtLoadBalIfTable.setStatus('current')
prvtLoadBalIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7, 1), ).setIndexNames((0, "PRVT-LOAD-BALANCE-MIB", "prvtLoadBalIfId"))
if mibBuilder.loadTexts: prvtLoadBalIfEntry.setStatus('current')
prvtLoadBalIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: prvtLoadBalIfId.setStatus('current')
prvtLoadBalIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfRowStatus.setStatus('current')
prvtLoadBalIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("network", 1), ("user", 2), ("sync", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfMode.setStatus('current')
prvtLoadBalIfMatrixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 7, 1, 4), PrvtLoadBalMtxIndexTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfMatrixIndex.setStatus('current')
prvtLoadBalUserNtwkSrcIpv4Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalUserNtwkSrcIpv4Mask.setStatus('current')
prvtLoadBalUserNtwkDstIpv4Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalUserNtwkDstIpv4Mask.setStatus('current')
prvtLoadBalUserNtwkSrcIpv6Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 10), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalUserNtwkSrcIpv6Mask.setStatus('current')
prvtLoadBalUserNtwkDstIpv6Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalUserNtwkDstIpv6Mask.setStatus('current')
prvtLoadBalSpiMask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalSpiMask.setStatus('current')
prvtLoadBalGeneralSrcIpv4Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalGeneralSrcIpv4Mask.setStatus('current')
prvtLoadBalGeneralDstIpv4Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalGeneralDstIpv4Mask.setStatus('current')
prvtLoadBalGeneralSrcIpv6Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 15), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalGeneralSrcIpv6Mask.setStatus('current')
prvtLoadBalGeneralDstIpv6Mask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 16), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalGeneralDstIpv6Mask.setStatus('current')
prvtLoadBalLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLoadBalLastUpdateTime.setStatus('current')
prvtLoadBalApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalApplyConfiguration.setStatus('current')
prvtLoadBalBladeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 19), )
if mibBuilder.loadTexts: prvtLoadBalBladeTable.setStatus('current')
prvtLoadBalBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 19, 1), ).setIndexNames((0, "PRVT-LOAD-BALANCE-MIB", "prvtLoadBalBladeIndex"))
if mibBuilder.loadTexts: prvtLoadBalBladeEntry.setStatus('current')
prvtLoadBalBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: prvtLoadBalBladeIndex.setStatus('current')
prvtLoadBalBladeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 19, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalBladeMacAddr.setStatus('current')
prvtLoadBalBaseIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalBaseIpAddr.setStatus('current')
prvtLoadBalBaseIpAddrMask = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalBaseIpAddrMask.setStatus('current')
prvtLoadBalAdminPass = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalAdminPass.setStatus('current')
prvtLoadBalQsfpPortsMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode4x10g", 1), ("mode40g", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalQsfpPortsMode.setStatus('current')
prvtLoadBalIfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24), )
if mibBuilder.loadTexts: prvtLoadBalIfVlanTable.setStatus('current')
prvtLoadBalIfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24, 1), ).setIndexNames((0, "PRVT-LOAD-BALANCE-MIB", "prvtLoadBalIfId"), (0, "PRVT-LOAD-BALANCE-MIB", "prvtLoadBalVlanId"))
if mibBuilder.loadTexts: prvtLoadBalIfVlanEntry.setStatus('current')
prvtLoadBalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: prvtLoadBalVlanId.setStatus('current')
prvtLoadBalIfVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfVlanRowStatus.setStatus('current')
prvtLoadBalIfVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfVlanMode.setStatus('current')
prvtLoadBalIfVlanMatrixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 24, 1, 4), PrvtLoadBalMtxIndexTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLoadBalIfVlanMatrixIndex.setStatus('current')
prvtLoadBalLoseLessMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("mode1to64", 0), ("mode1to32", 1), ("mode1to16", 2), ("mode1to8", 3), ("mode1to4", 4), ("mode1to2", 5), ("mode1", 6), ("mode2", 7), ("mode4", 8), ("mode8", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLoadBalLoseLessMode.setStatus('current')
mibBuilder.exportSymbols("PRVT-LOAD-BALANCE-MIB", prvtLoadBalIfTable=prvtLoadBalIfTable, prvtLoadBalIfEntry=prvtLoadBalIfEntry, prvtLoadBalIfVlanRowStatus=prvtLoadBalIfVlanRowStatus, prvtLoadBalLoseLessMode=prvtLoadBalLoseLessMode, prvtLoadBalBladeMacAddr=prvtLoadBalBladeMacAddr, prvtLoadBalMaxAvailSize=prvtLoadBalMaxAvailSize, prvtLoadBalMtxEntry=prvtLoadBalMtxEntry, prvtLoadBalUserNtwkSrcIpv6Mask=prvtLoadBalUserNtwkSrcIpv6Mask, prvtLoadBalIfMode=prvtLoadBalIfMode, prvtLoadBalBaseIpAddrMask=prvtLoadBalBaseIpAddrMask, prvtLoadBalGeneralDstIpv6Mask=prvtLoadBalGeneralDstIpv6Mask, prvtLoadBalQsfpPortsMode=prvtLoadBalQsfpPortsMode, prvtLoadBalBladeEntry=prvtLoadBalBladeEntry, prvtLoadBalDistributionMode=prvtLoadBalDistributionMode, prvtLoadBalIfId=prvtLoadBalIfId, prvtLoadBalSpiMask=prvtLoadBalSpiMask, prvtLoadBalApplyConfiguration=prvtLoadBalApplyConfiguration, prvtLoadBalUserNtwkSrcIpv4Mask=prvtLoadBalUserNtwkSrcIpv4Mask, prvtLoadBalBladeTable=prvtLoadBalBladeTable, prvtLoadBalBladeIndex=prvtLoadBalBladeIndex, prvtLoadBalBaseIpAddr=prvtLoadBalBaseIpAddr, prvtLoadBalUserNtwkDstIpv6Mask=prvtLoadBalUserNtwkDstIpv6Mask, prvtLoadBalGeneralSrcIpv4Mask=prvtLoadBalGeneralSrcIpv4Mask, prvtLoadBalGeneralDstIpv4Mask=prvtLoadBalGeneralDstIpv4Mask, prvtLoadBalIfVlanMatrixIndex=prvtLoadBalIfVlanMatrixIndex, prvtLoadBalLastUpdateTime=prvtLoadBalLastUpdateTime, prvtLoadBalIfMatrixIndex=prvtLoadBalIfMatrixIndex, prvtLoadBalMtxIndex=prvtLoadBalMtxIndex, prvtLoadBalMIB=prvtLoadBalMIB, PrvtLoadBalMtxIndexTC=PrvtLoadBalMtxIndexTC, prvtLoadBalObjects=prvtLoadBalObjects, prvtLoadBalIfVlanTable=prvtLoadBalIfVlanTable, prvtLoadBalIfVlanMode=prvtLoadBalIfVlanMode, prvtLoadBalIpV6DistributionMode=prvtLoadBalIpV6DistributionMode, prvtLoadBalUserNtwkDstIpv4Mask=prvtLoadBalUserNtwkDstIpv4Mask, prvtLoadBalIfVlanEntry=prvtLoadBalIfVlanEntry, prvtLoadBalMtxTable=prvtLoadBalMtxTable, prvtLoadBalIfRowStatus=prvtLoadBalIfRowStatus, prvtLoadBalMtxBuckets=prvtLoadBalMtxBuckets, prvtLoadBalVlanId=prvtLoadBalVlanId, PYSNMP_MODULE_ID=prvtLoadBalMIB, prvtLoadBalMtxSignature=prvtLoadBalMtxSignature, prvtLoadBalGeneralSrcIpv6Mask=prvtLoadBalGeneralSrcIpv6Mask, prvtLoadBalSpiDistributionMode=prvtLoadBalSpiDistributionMode, prvtLoadBalAdminPass=prvtLoadBalAdminPass)
