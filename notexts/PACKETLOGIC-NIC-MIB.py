#
# PySNMP MIB module PACKETLOGIC-NIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/procera/PACKETLOGIC-NIC-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:16:35 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
hw, = mibBuilder.importSymbols("PACKETLOGIC-HW-MIB", "hw")
packetlogic2, = mibBuilder.importSymbols("PACKETLOGIC-MIB", "packetlogic2")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, NotificationType, Gauge32, ModuleIdentity, Counter64, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
nic = ModuleIdentity((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2))
nic.setRevisions(('2019-09-12 15:00',))
if mibBuilder.loadTexts: nic.setLastUpdated('201909121500Z')
if mibBuilder.loadTexts: nic.setOrganization('Procera Networks, Inc.')
slots = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1), )
if mibBuilder.loadTexts: slots.setStatus('current')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1), ).setIndexNames((0, "PACKETLOGIC-NIC-MIB", "slotEntryIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('current')
slotEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: slotEntryIndex.setStatus('current')
channels = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2), )
if mibBuilder.loadTexts: channels.setStatus('current')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2, 1), ).setIndexNames((0, "PACKETLOGIC-NIC-MIB", "channelEntryIndex"))
if mibBuilder.loadTexts: channelEntry.setStatus('current')
channelEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: channelEntryIndex.setStatus('current')
slotLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLabel.setStatus('current')
slotState = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotState.setStatus('current')
slotBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBypass.setStatus('current')
slotChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotChannels.setStatus('current')
slotInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInterface.setStatus('current')
slotPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPartNo.setStatus('current')
slotPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPorts.setStatus('current')
slotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSpeed.setStatus('current')
channelLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelLocation.setStatus('current')
channelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelLabel.setStatus('current')
channelSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSlot.setStatus('current')
totalThroughput = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 30, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalThroughput.setStatus('current')
mibBuilder.exportSymbols("PACKETLOGIC-NIC-MIB", slotInterface=slotInterface, slotBypass=slotBypass, slotEntryIndex=slotEntryIndex, totalThroughput=totalThroughput, slotChannels=slotChannels, slotEntry=slotEntry, channelLabel=channelLabel, slotState=slotState, slotPartNo=slotPartNo, channels=channels, slots=slots, slotPorts=slotPorts, channelEntry=channelEntry, channelLocation=channelLocation, channelSlot=channelSlot, nic=nic, channelEntryIndex=channelEntryIndex, slotSpeed=slotSpeed, PYSNMP_MODULE_ID=nic, slotLabel=slotLabel)
