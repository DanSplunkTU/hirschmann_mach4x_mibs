#
# PySNMP MIB module PRVT-RSVP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-RSVP-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 14:34:12 2021
# On host fv-az39-900 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
mpls, = mibBuilder.importSymbols("PRVT-CR-LDP-MIB", "mpls")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Counter64, MibIdentifier, Unsigned32, NotificationType, TimeTicks, ModuleIdentity, Bits, Integer32, IpAddress, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Counter64", "MibIdentifier", "Unsigned32", "NotificationType", "TimeTicks", "ModuleIdentity", "Bits", "Integer32", "IpAddress", "iso", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
prvtRsvp = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7))
prvtRsvp.setRevisions(('2008-04-14 00:00', '2006-06-02 00:00',))
if mibBuilder.loadTexts: prvtRsvp.setLastUpdated('200804140000Z')
if mibBuilder.loadTexts: prvtRsvp.setOrganization('BATM Advanced Communication')
prvtRsvpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1))
class PrvtRsvpAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class PrvtRsvpOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5))

class PrvtRsvpIndex(TextualConvention, Unsigned32):
    status = 'current'

class PrvtRsvpDiagReqIndex(TextualConvention, Unsigned32):
    status = 'current'

class PrvtRsvpDiagNodeIndexType(TextualConvention, Unsigned32):
    status = 'current'

class PrvtRsvpDiagNodeTypeVal(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("missing", 1), ("ingress", 2), ("transit", 3), ("egress", 4))

prvtRsvpProductTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1), )
if mibBuilder.loadTexts: prvtRsvpProductTable.setStatus('current')
prvtRsvpProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1), ).setIndexNames((0, "PRVT-RSVP-MIB", "prvtRsvpProductIndex"))
if mibBuilder.loadTexts: prvtRsvpProductEntry.setStatus('current')
prvtRsvpProductIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 1), PrvtRsvpIndex())
if mibBuilder.loadTexts: prvtRsvpProductIndex.setStatus('current')
prvtRsvpProductASNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductASNumber.setStatus('current')
prvtRsvpProductSenderTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductSenderTTL.setStatus('current')
prvtRsvpProductMinTimerPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 4), Integer32().clone(200)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductMinTimerPeriod.setStatus('current')
prvtRsvpProductAPIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 5), InterfaceIndexOrZero().clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAPIIfIndex.setStatus('current')
prvtRsvpProductAPIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16)).clone(hexValue="E0000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAPIAddress.setStatus('current')
prvtRsvpProductAPIRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 7), Integer32().clone(30000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAPIRefreshInterval.setStatus('current')
prvtRsvpProductLocalRepairDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1000, 2147483647), )).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLocalRepairDelay.setStatus('current')
prvtRsvpProductRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 2147483647)).clone(30000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRefreshInterval.setStatus('current')
prvtRsvpProductRefreshMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRefreshMultiple.setStatus('current')
prvtRsvpProductRfrshSlewDenom = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRfrshSlewDenom.setStatus('current')
prvtRsvpProductRfrshSlewNumerator = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRfrshSlewNumerator.setStatus('current')
prvtRsvpProductBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductBlockadeMultiple.setStatus('current')
prvtRsvpProductSocketBufPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 14), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductSocketBufPoolSize.setStatus('current')
prvtRsvpProductSwitchBufPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 15), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductSwitchBufPoolSize.setStatus('current')
prvtRsvpProductTeMibBufPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 16), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductTeMibBufPoolSize.setStatus('current')
prvtRsvpProductRoutingBufPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 17), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRoutingBufPoolSize.setStatus('current')
prvtRsvpProductLSPSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLSPSetupPriority.setStatus('current')
prvtRsvpProductLSPHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLSPHoldingPriority.setStatus('current')
prvtRsvpProductAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 20), PrvtRsvpAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAdminStatus.setStatus('current')
prvtRsvpProductOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 21), PrvtRsvpOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpProductOperStatus.setStatus('current')
prvtRsvpProductRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 22), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRowStatus.setStatus('current')
prvtRsvpProductLsrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLsrIndex.setStatus('current')
prvtRsvpProductTeMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductTeMibIndex.setStatus('current')
prvtRsvpProductMultiStackSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductMultiStackSupport.setStatus('current')
prvtRsvpProductUseHopByHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductUseHopByHop.setStatus('current')
prvtRsvpProductUseNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductUseNotify.setStatus('current')
prvtRsvpProductNotifyRRDecay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductNotifyRRDecay.setStatus('current')
prvtRsvpProductNotifyRRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 2147483647)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductNotifyRRInterval.setStatus('current')
prvtRsvpProductNotifyRRLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductNotifyRRLimit.setStatus('current')
prvtRsvpProductAllowIPEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAllowIPEncap.setStatus('current')
prvtRsvpProductProtocolExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 32), Bits().clone(namedValues=NamedValues(("bypassFastReroute", 0), ("detourFastReroute", 1), ("noResAffOnInIf", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductProtocolExtensions.setStatus('current')
prvtRsvpProductPSRFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 33), Bits().clone(namedValues=NamedValues(("pathErrPSRSet", 0), ("pathErrPSRNotSet", 1), ("ldbCommonRcvd", 2), ("ldbPreempted", 3), ("routingError", 4), ("invalidPathMsg", 5), ("sessionExpired", 6), ("unableToRepairRoute", 7), ("unableToRepairIf", 8), ("reachedRetryLimit", 9), ("unableToRefresh", 10), ("resvErrTurnaround", 11), ("incomingIfDown", 12), ("outgoingIfDown", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductPSRFlags.setStatus('current')
prvtRsvpProductInitPathRRDecay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductInitPathRRDecay.setStatus('current')
prvtRsvpProductInitPathRRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 2147483647)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductInitPathRRInterval.setStatus('current')
prvtRsvpProductInitPathRRLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductInitPathRRLimit.setStatus('current')
prvtRsvpProductEnableUni = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductEnableUni.setStatus('current')
prvtRsvpProductRestartCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRestartCapable.setStatus('current')
prvtRsvpProductRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 39), Unsigned32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRestartTime.setStatus('current')
prvtRsvpProductRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 40), Unsigned32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductRecoveryTime.setStatus('current')
prvtRsvpProductMinPeerRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 41), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductMinPeerRestart.setStatus('current')
prvtRsvpProductGracefulDelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 42), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductGracefulDelTimeout.setStatus('current')
prvtRsvpProductEgressDelBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delWithPathErr", 1), ("delWithResvD", 2))).clone('delWithPathErr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductEgressDelBehavior.setStatus('current')
prvtRsvpProductEnabUniConnSplicing = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 44), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductEnabUniConnSplicing.setStatus('current')
prvtRsvpProductFastRerouteCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 45), Bits().clone(namedValues=NamedValues(("fastReroutePLR", 0), ("fastRerouteMP", 1), ("fastRerouteDetourRestart", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductFastRerouteCaps.setStatus('current')
prvtRsvpProductFastRroutBkpRtryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 46), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductFastRroutBkpRtryInt.setStatus('current')
prvtRsvpProductErrorActionFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 47), Bits().clone(namedValues=NamedValues(("eafTearStateOnLSIErr", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductErrorActionFlags.setStatus('current')
prvtRsvpProductEnableNni = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("disabling", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductEnableNni.setStatus('current')
prvtRsvpProductBehaviorFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 49), Bits().clone(namedValues=NamedValues(("enableTTLMatch", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductBehaviorFlags.setStatus('current')
prvtRsvpProductLabelSetStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("excludeLabelHeader", 1), ("includeLabelHeader", 2))).clone('excludeLabelHeader')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLabelSetStyle.setStatus('current')
prvtRsvpProductLabelSetOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("excludeLabelHeader", 1), ("includeLabelHeader", 2), ("goingToExclude", 3), ("goingToInclude", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpProductLabelSetOperStatus.setStatus('current')
prvtRsvpProductLabelSetTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 52), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLabelSetTrapEnable.setStatus('current')
prvtRsvpProductLabelSetChngAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 53), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductLabelSetChngAct.setStatus('current')
prvtRsvpProductExtPrtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 54), PrvtRsvpAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductExtPrtAdminStatus.setStatus('current')
prvtRsvpProductUniIncSonetProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductUniIncSonetProfile.setStatus('current')
prvtRsvpProductFrrFacAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 56), PrvtRsvpAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductFrrFacAdminStatus.setStatus('current')
prvtRsvpProductFrrFacOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 57), PrvtRsvpOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpProductFrrFacOperStatus.setStatus('current')
prvtRsvpProductIpv6AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 58), PrvtRsvpAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtRsvpProductIpv6AdminStatus.setStatus('current')
prvtRsvpProductIpv6OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 59), PrvtRsvpOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpProductIpv6OperStatus.setStatus('current')
prvtRsvpProductAPIIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 1, 1, 60), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRsvpProductAPIIpv6Address.setStatus('current')
prvtRsvpDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2), )
if mibBuilder.loadTexts: prvtRsvpDiagnosticTable.setStatus('current')
prvtRsvpDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1), ).setIndexNames((0, "PRVT-RSVP-MIB", "prvtRsvpDiagProductIndex"), (0, "PRVT-RSVP-MIB", "prvtRsvpDiagRequestIndex"))
if mibBuilder.loadTexts: prvtRsvpDiagnosticEntry.setStatus('current')
prvtRsvpDiagProductIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 1), PrvtRsvpIndex())
if mibBuilder.loadTexts: prvtRsvpDiagProductIndex.setStatus('current')
prvtRsvpDiagRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 2), PrvtRsvpDiagReqIndex())
if mibBuilder.loadTexts: prvtRsvpDiagRequestIndex.setStatus('current')
prvtRsvpDiagReqsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagReqsInProgress.setStatus('current')
prvtRsvpDiagSessionEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSessionEndPoint.setStatus('current')
prvtRsvpDiagSessionTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSessionTunnelId.setStatus('current')
prvtRsvpDiagSessionExtTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSessionExtTunnelId.setStatus('current')
prvtRsvpDiagLastHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagLastHop.setStatus('current')
prvtRsvpDiagSender = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSender.setStatus('current')
prvtRsvpDiagMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagMaxHops.setStatus('current')
prvtRsvpDiagHopByHopReply = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagHopByHopReply.setStatus('current')
prvtRsvpDiagNodeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3), )
if mibBuilder.loadTexts: prvtRsvpDiagNodeTable.setStatus('current')
prvtRsvpDiagNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1), ).setIndexNames((0, "PRVT-RSVP-MIB", "prvtRsvpDiagNodeProductIndex"), (0, "PRVT-RSVP-MIB", "prvtRsvpDiagNodeRequestIndex"), (0, "PRVT-RSVP-MIB", "prvtRsvpDiagNodeIndex"))
if mibBuilder.loadTexts: prvtRsvpDiagNodeEntry.setStatus('current')
prvtRsvpDiagNodeProductIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 1), PrvtRsvpIndex())
if mibBuilder.loadTexts: prvtRsvpDiagNodeProductIndex.setStatus('current')
prvtRsvpDiagNodeRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 2), PrvtRsvpDiagReqIndex())
if mibBuilder.loadTexts: prvtRsvpDiagNodeRequestIndex.setStatus('current')
prvtRsvpDiagNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 3), PrvtRsvpDiagNodeIndexType())
if mibBuilder.loadTexts: prvtRsvpDiagNodeIndex.setStatus('current')
prvtRsvpDiagNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 4), PrvtRsvpDiagNodeTypeVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeType.setStatus('current')
prvtRsvpDiagNodeDreqArrivalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeDreqArrivalTime.setStatus('current')
prvtRsvpDiagNodeIncomingIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeIncomingIfAddr.setStatus('current')
prvtRsvpDiagNodeOutgoingIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeOutgoingIfAddr.setStatus('current')
prvtRsvpDiagNodePrevHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodePrevHopAddr.setStatus('current')
prvtRsvpDiagNodeDTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeDTTL.setStatus('current')
prvtRsvpDiagNodeMFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeMFlag.setStatus('current')
prvtRsvpDiagNodeRErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeRErr.setStatus('current')
prvtRsvpDiagNodeKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeKValue.setStatus('current')
prvtRsvpDiagNodeTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagNodeTimerValue.setStatus('current')
prvtRsvpDiagRsvpHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagRsvpHopAddr.setStatus('current')
prvtRsvpDiagRsvpHopLIH = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagRsvpHopLIH.setStatus('current')
prvtRsvpDiagSenderTpltAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSenderTpltAddress.setStatus('current')
prvtRsvpDiagSenderTpltLSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagSenderTpltLSPId.setStatus('current')
prvtRsvpDiagFlowSpecCLBktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCLBktRate.setStatus('current')
prvtRsvpDiagFlowSpecCLBktDep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCLBktDep.setStatus('current')
prvtRsvpDiagFlowSpecCLPkDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCLPkDataRate.setStatus('current')
prvtRsvpDiagFlowSpecCLMinPolUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCLMinPolUnit.setStatus('current')
prvtRsvpDiagFlowSpecCLMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCLMaxPktSize.setStatus('current')
prvtRsvpDiagFlowSpecGQBktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQBktRate.setStatus('current')
prvtRsvpDiagFlowSpecGQBktDep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQBktDep.setStatus('current')
prvtRsvpDiagFlowSpecGQPkDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQPkDataRate.setStatus('current')
prvtRsvpDiagFlowSpecGQMinPolUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQMinPolUnit.setStatus('current')
prvtRsvpDiagFlowSpecGQMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQMaxPktSize.setStatus('current')
prvtRsvpDiagFlowSpecGQRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQRate.setStatus('current')
prvtRsvpDiagFlowSpecGQSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecGQSlack.setStatus('current')
prvtRsvpDiagFlowSpecCoSCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCoSCoS.setStatus('current')
prvtRsvpDiagFlowSpecCoSMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFlowSpecCoSMTU.setStatus('current')
prvtRsvpDiagFilterSpecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFilterSpecAddress.setStatus('current')
prvtRsvpDiagFilterSpecLSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagFilterSpecLSPId.setStatus('current')
prvtRsvpDiagConfirmRcvAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagConfirmRcvAddr.setStatus('current')
prvtRsvpDiagStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 1, 3, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRsvpDiagStyle.setStatus('current')
prvtRsvpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2))
prvtRsvpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 1))
prvtRsvpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 2))
prvtRsvpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 1, 1)).setObjects(("PRVT-RSVP-MIB", "prvtRsvpProductGroup"), ("PRVT-RSVP-MIB", "prvtRsvpDiagGroup"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRsvpCompliance = prvtRsvpCompliance.setStatus('current')
prvtRsvpProductGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 2, 2)).setObjects(("PRVT-RSVP-MIB", "prvtRsvpProductASNumber"), ("PRVT-RSVP-MIB", "prvtRsvpProductSenderTTL"), ("PRVT-RSVP-MIB", "prvtRsvpProductMinTimerPeriod"), ("PRVT-RSVP-MIB", "prvtRsvpProductAPIIfIndex"), ("PRVT-RSVP-MIB", "prvtRsvpProductAPIAddress"), ("PRVT-RSVP-MIB", "prvtRsvpProductAPIRefreshInterval"), ("PRVT-RSVP-MIB", "prvtRsvpProductLocalRepairDelay"), ("PRVT-RSVP-MIB", "prvtRsvpProductRefreshInterval"), ("PRVT-RSVP-MIB", "prvtRsvpProductRefreshMultiple"), ("PRVT-RSVP-MIB", "prvtRsvpProductRfrshSlewDenom"), ("PRVT-RSVP-MIB", "prvtRsvpProductRfrshSlewNumerator"), ("PRVT-RSVP-MIB", "prvtRsvpProductBlockadeMultiple"), ("PRVT-RSVP-MIB", "prvtRsvpProductSocketBufPoolSize"), ("PRVT-RSVP-MIB", "prvtRsvpProductSwitchBufPoolSize"), ("PRVT-RSVP-MIB", "prvtRsvpProductTeMibBufPoolSize"), ("PRVT-RSVP-MIB", "prvtRsvpProductRoutingBufPoolSize"), ("PRVT-RSVP-MIB", "prvtRsvpProductLSPSetupPriority"), ("PRVT-RSVP-MIB", "prvtRsvpProductLSPHoldingPriority"), ("PRVT-RSVP-MIB", "prvtRsvpProductAdminStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductOperStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductRowStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductLsrIndex"), ("PRVT-RSVP-MIB", "prvtRsvpProductTeMibIndex"), ("PRVT-RSVP-MIB", "prvtRsvpProductMultiStackSupport"), ("PRVT-RSVP-MIB", "prvtRsvpProductUseHopByHop"), ("PRVT-RSVP-MIB", "prvtRsvpProductUseNotify"), ("PRVT-RSVP-MIB", "prvtRsvpProductNotifyRRDecay"), ("PRVT-RSVP-MIB", "prvtRsvpProductNotifyRRInterval"), ("PRVT-RSVP-MIB", "prvtRsvpProductNotifyRRLimit"), ("PRVT-RSVP-MIB", "prvtRsvpProductAllowIPEncap"), ("PRVT-RSVP-MIB", "prvtRsvpProductProtocolExtensions"), ("PRVT-RSVP-MIB", "prvtRsvpProductPSRFlags"), ("PRVT-RSVP-MIB", "prvtRsvpProductInitPathRRDecay"), ("PRVT-RSVP-MIB", "prvtRsvpProductInitPathRRInterval"), ("PRVT-RSVP-MIB", "prvtRsvpProductInitPathRRLimit"), ("PRVT-RSVP-MIB", "prvtRsvpProductEnableUni"), ("PRVT-RSVP-MIB", "prvtRsvpProductRestartCapable"), ("PRVT-RSVP-MIB", "prvtRsvpProductRestartTime"), ("PRVT-RSVP-MIB", "prvtRsvpProductRecoveryTime"), ("PRVT-RSVP-MIB", "prvtRsvpProductMinPeerRestart"), ("PRVT-RSVP-MIB", "prvtRsvpProductGracefulDelTimeout"), ("PRVT-RSVP-MIB", "prvtRsvpProductEgressDelBehavior"), ("PRVT-RSVP-MIB", "prvtRsvpProductEnabUniConnSplicing"), ("PRVT-RSVP-MIB", "prvtRsvpProductFastRerouteCaps"), ("PRVT-RSVP-MIB", "prvtRsvpProductFastRroutBkpRtryInt"), ("PRVT-RSVP-MIB", "prvtRsvpProductErrorActionFlags"), ("PRVT-RSVP-MIB", "prvtRsvpProductEnableNni"), ("PRVT-RSVP-MIB", "prvtRsvpProductBehaviorFlags"), ("PRVT-RSVP-MIB", "prvtRsvpProductLabelSetStyle"), ("PRVT-RSVP-MIB", "prvtRsvpProductLabelSetOperStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductLabelSetTrapEnable"), ("PRVT-RSVP-MIB", "prvtRsvpProductLabelSetChngAct"), ("PRVT-RSVP-MIB", "prvtRsvpProductExtPrtAdminStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductUniIncSonetProfile"), ("PRVT-RSVP-MIB", "prvtRsvpProductFrrFacAdminStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductFrrFacOperStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductIpv6AdminStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductIpv6OperStatus"), ("PRVT-RSVP-MIB", "prvtRsvpProductAPIIpv6Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRsvpProductGroup = prvtRsvpProductGroup.setStatus('current')
prvtRsvpDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 2, 3)).setObjects(("PRVT-RSVP-MIB", "prvtRsvpDiagReqsInProgress"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSessionEndPoint"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSessionTunnelId"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSessionExtTunnelId"), ("PRVT-RSVP-MIB", "prvtRsvpDiagLastHop"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSender"), ("PRVT-RSVP-MIB", "prvtRsvpDiagMaxHops"), ("PRVT-RSVP-MIB", "prvtRsvpDiagHopByHopReply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRsvpDiagGroup = prvtRsvpDiagGroup.setStatus('current')
prvtRsvpDiagNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 7, 2, 2, 4)).setObjects(("PRVT-RSVP-MIB", "prvtRsvpDiagNodeType"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeDreqArrivalTime"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeIncomingIfAddr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeOutgoingIfAddr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodePrevHopAddr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeDTTL"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeMFlag"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeRErr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeKValue"), ("PRVT-RSVP-MIB", "prvtRsvpDiagNodeTimerValue"), ("PRVT-RSVP-MIB", "prvtRsvpDiagRsvpHopAddr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagRsvpHopLIH"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSenderTpltLSPId"), ("PRVT-RSVP-MIB", "prvtRsvpDiagSenderTpltAddress"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCLBktRate"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCLBktDep"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCLPkDataRate"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCLMinPolUnit"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCLMaxPktSize"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQBktRate"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQBktDep"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQPkDataRate"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQMinPolUnit"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQMaxPktSize"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQRate"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecGQSlack"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCoSCoS"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFlowSpecCoSMTU"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFilterSpecAddress"), ("PRVT-RSVP-MIB", "prvtRsvpDiagFilterSpecLSPId"), ("PRVT-RSVP-MIB", "prvtRsvpDiagConfirmRcvAddr"), ("PRVT-RSVP-MIB", "prvtRsvpDiagStyle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRsvpDiagNodeGroup = prvtRsvpDiagNodeGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-RSVP-MIB", prvtRsvpProductUseHopByHop=prvtRsvpProductUseHopByHop, prvtRsvp=prvtRsvp, prvtRsvpGroups=prvtRsvpGroups, prvtRsvpDiagFlowSpecGQPkDataRate=prvtRsvpDiagFlowSpecGQPkDataRate, prvtRsvpProductExtPrtAdminStatus=prvtRsvpProductExtPrtAdminStatus, prvtRsvpDiagFilterSpecLSPId=prvtRsvpDiagFilterSpecLSPId, prvtRsvpProductPSRFlags=prvtRsvpProductPSRFlags, PYSNMP_MODULE_ID=prvtRsvp, prvtRsvpDiagNodeOutgoingIfAddr=prvtRsvpDiagNodeOutgoingIfAddr, prvtRsvpCompliances=prvtRsvpCompliances, prvtRsvpDiagStyle=prvtRsvpDiagStyle, prvtRsvpDiagSessionEndPoint=prvtRsvpDiagSessionEndPoint, prvtRsvpProductAllowIPEncap=prvtRsvpProductAllowIPEncap, prvtRsvpProductMultiStackSupport=prvtRsvpProductMultiStackSupport, prvtRsvpProductTable=prvtRsvpProductTable, prvtRsvpProductNotifyRRDecay=prvtRsvpProductNotifyRRDecay, prvtRsvpProductTeMibBufPoolSize=prvtRsvpProductTeMibBufPoolSize, prvtRsvpProductIpv6OperStatus=prvtRsvpProductIpv6OperStatus, prvtRsvpDiagNodeGroup=prvtRsvpDiagNodeGroup, prvtRsvpProductRfrshSlewNumerator=prvtRsvpProductRfrshSlewNumerator, prvtRsvpProductASNumber=prvtRsvpProductASNumber, prvtRsvpProductSenderTTL=prvtRsvpProductSenderTTL, prvtRsvpDiagNodeRErr=prvtRsvpDiagNodeRErr, prvtRsvpProductIpv6AdminStatus=prvtRsvpProductIpv6AdminStatus, prvtRsvpProductLocalRepairDelay=prvtRsvpProductLocalRepairDelay, prvtRsvpProductRestartCapable=prvtRsvpProductRestartCapable, prvtRsvpProductInitPathRRLimit=prvtRsvpProductInitPathRRLimit, prvtRsvpDiagNodeIncomingIfAddr=prvtRsvpDiagNodeIncomingIfAddr, prvtRsvpProductBlockadeMultiple=prvtRsvpProductBlockadeMultiple, prvtRsvpDiagFlowSpecCLBktDep=prvtRsvpDiagFlowSpecCLBktDep, prvtRsvpCompliance=prvtRsvpCompliance, prvtRsvpDiagFlowSpecCLPkDataRate=prvtRsvpDiagFlowSpecCLPkDataRate, prvtRsvpProductLabelSetStyle=prvtRsvpProductLabelSetStyle, PrvtRsvpDiagReqIndex=PrvtRsvpDiagReqIndex, prvtRsvpProductRestartTime=prvtRsvpProductRestartTime, prvtRsvpProductLSPHoldingPriority=prvtRsvpProductLSPHoldingPriority, prvtRsvpDiagProductIndex=prvtRsvpDiagProductIndex, prvtRsvpDiagFlowSpecGQSlack=prvtRsvpDiagFlowSpecGQSlack, prvtRsvpDiagnosticTable=prvtRsvpDiagnosticTable, prvtRsvpProductEnableNni=prvtRsvpProductEnableNni, prvtRsvpDiagNodeDTTL=prvtRsvpDiagNodeDTTL, prvtRsvpDiagFlowSpecCLMaxPktSize=prvtRsvpDiagFlowSpecCLMaxPktSize, prvtRsvpDiagFlowSpecGQMinPolUnit=prvtRsvpDiagFlowSpecGQMinPolUnit, prvtRsvpDiagLastHop=prvtRsvpDiagLastHop, prvtRsvpDiagFlowSpecGQMaxPktSize=prvtRsvpDiagFlowSpecGQMaxPktSize, prvtRsvpProductInitPathRRDecay=prvtRsvpProductInitPathRRDecay, prvtRsvpProductNotifyRRLimit=prvtRsvpProductNotifyRRLimit, prvtRsvpDiagSender=prvtRsvpDiagSender, prvtRsvpProductRefreshMultiple=prvtRsvpProductRefreshMultiple, prvtRsvpDiagFlowSpecCLMinPolUnit=prvtRsvpDiagFlowSpecCLMinPolUnit, prvtRsvpProductFastRerouteCaps=prvtRsvpProductFastRerouteCaps, prvtRsvpProductAPIIpv6Address=prvtRsvpProductAPIIpv6Address, prvtRsvpDiagFilterSpecAddress=prvtRsvpDiagFilterSpecAddress, prvtRsvpProductAdminStatus=prvtRsvpProductAdminStatus, prvtRsvpProductLabelSetOperStatus=prvtRsvpProductLabelSetOperStatus, PrvtRsvpDiagNodeTypeVal=PrvtRsvpDiagNodeTypeVal, prvtRsvpProductFrrFacOperStatus=prvtRsvpProductFrrFacOperStatus, prvtRsvpProductAPIIfIndex=prvtRsvpProductAPIIfIndex, prvtRsvpProductLsrIndex=prvtRsvpProductLsrIndex, prvtRsvpProductIndex=prvtRsvpProductIndex, prvtRsvpProductLSPSetupPriority=prvtRsvpProductLSPSetupPriority, prvtRsvpProductErrorActionFlags=prvtRsvpProductErrorActionFlags, prvtRsvpProductFastRroutBkpRtryInt=prvtRsvpProductFastRroutBkpRtryInt, prvtRsvpProductLabelSetChngAct=prvtRsvpProductLabelSetChngAct, prvtRsvpDiagNodeRequestIndex=prvtRsvpDiagNodeRequestIndex, prvtRsvpDiagNodeType=prvtRsvpDiagNodeType, prvtRsvpDiagRsvpHopAddr=prvtRsvpDiagRsvpHopAddr, prvtRsvpDiagSessionExtTunnelId=prvtRsvpDiagSessionExtTunnelId, prvtRsvpProductRfrshSlewDenom=prvtRsvpProductRfrshSlewDenom, prvtRsvpDiagGroup=prvtRsvpDiagGroup, prvtRsvpDiagNodeEntry=prvtRsvpDiagNodeEntry, prvtRsvpProductGracefulDelTimeout=prvtRsvpProductGracefulDelTimeout, prvtRsvpDiagFlowSpecCLBktRate=prvtRsvpDiagFlowSpecCLBktRate, prvtRsvpProductProtocolExtensions=prvtRsvpProductProtocolExtensions, PrvtRsvpAdminStatus=PrvtRsvpAdminStatus, prvtRsvpDiagFlowSpecGQBktRate=prvtRsvpDiagFlowSpecGQBktRate, prvtRsvpDiagFlowSpecCoSCoS=prvtRsvpDiagFlowSpecCoSCoS, prvtRsvpProductUniIncSonetProfile=prvtRsvpProductUniIncSonetProfile, PrvtRsvpIndex=PrvtRsvpIndex, prvtRsvpProductLabelSetTrapEnable=prvtRsvpProductLabelSetTrapEnable, prvtRsvpDiagNodeIndex=prvtRsvpDiagNodeIndex, prvtRsvpDiagConfirmRcvAddr=prvtRsvpDiagConfirmRcvAddr, prvtRsvpProductUseNotify=prvtRsvpProductUseNotify, prvtRsvpDiagNodePrevHopAddr=prvtRsvpDiagNodePrevHopAddr, prvtRsvpConformance=prvtRsvpConformance, prvtRsvpProductEnabUniConnSplicing=prvtRsvpProductEnabUniConnSplicing, prvtRsvpProductGroup=prvtRsvpProductGroup, prvtRsvpDiagHopByHopReply=prvtRsvpDiagHopByHopReply, prvtRsvpProductSocketBufPoolSize=prvtRsvpProductSocketBufPoolSize, prvtRsvpProductBehaviorFlags=prvtRsvpProductBehaviorFlags, PrvtRsvpOperStatus=PrvtRsvpOperStatus, prvtRsvpObjects=prvtRsvpObjects, prvtRsvpProductEgressDelBehavior=prvtRsvpProductEgressDelBehavior, prvtRsvpProductRecoveryTime=prvtRsvpProductRecoveryTime, prvtRsvpDiagRsvpHopLIH=prvtRsvpDiagRsvpHopLIH, prvtRsvpDiagNodeTable=prvtRsvpDiagNodeTable, prvtRsvpDiagnosticEntry=prvtRsvpDiagnosticEntry, prvtRsvpProductEnableUni=prvtRsvpProductEnableUni, prvtRsvpDiagNodeProductIndex=prvtRsvpDiagNodeProductIndex, prvtRsvpProductOperStatus=prvtRsvpProductOperStatus, prvtRsvpProductRowStatus=prvtRsvpProductRowStatus, prvtRsvpProductAPIRefreshInterval=prvtRsvpProductAPIRefreshInterval, prvtRsvpProductAPIAddress=prvtRsvpProductAPIAddress, prvtRsvpDiagRequestIndex=prvtRsvpDiagRequestIndex, prvtRsvpProductRefreshInterval=prvtRsvpProductRefreshInterval, prvtRsvpDiagNodeTimerValue=prvtRsvpDiagNodeTimerValue, prvtRsvpDiagNodeMFlag=prvtRsvpDiagNodeMFlag, prvtRsvpDiagNodeDreqArrivalTime=prvtRsvpDiagNodeDreqArrivalTime, prvtRsvpDiagNodeKValue=prvtRsvpDiagNodeKValue, prvtRsvpDiagSenderTpltLSPId=prvtRsvpDiagSenderTpltLSPId, prvtRsvpProductTeMibIndex=prvtRsvpProductTeMibIndex, prvtRsvpProductInitPathRRInterval=prvtRsvpProductInitPathRRInterval, prvtRsvpDiagSenderTpltAddress=prvtRsvpDiagSenderTpltAddress, prvtRsvpDiagFlowSpecGQRate=prvtRsvpDiagFlowSpecGQRate, prvtRsvpProductEntry=prvtRsvpProductEntry, prvtRsvpDiagMaxHops=prvtRsvpDiagMaxHops, prvtRsvpProductMinTimerPeriod=prvtRsvpProductMinTimerPeriod, prvtRsvpDiagSessionTunnelId=prvtRsvpDiagSessionTunnelId, prvtRsvpProductFrrFacAdminStatus=prvtRsvpProductFrrFacAdminStatus, prvtRsvpDiagFlowSpecCoSMTU=prvtRsvpDiagFlowSpecCoSMTU, prvtRsvpDiagFlowSpecGQBktDep=prvtRsvpDiagFlowSpecGQBktDep, prvtRsvpProductSwitchBufPoolSize=prvtRsvpProductSwitchBufPoolSize, prvtRsvpProductNotifyRRInterval=prvtRsvpProductNotifyRRInterval, prvtRsvpProductMinPeerRestart=prvtRsvpProductMinPeerRestart, prvtRsvpProductRoutingBufPoolSize=prvtRsvpProductRoutingBufPoolSize, PrvtRsvpDiagNodeIndexType=PrvtRsvpDiagNodeIndexType, prvtRsvpDiagReqsInProgress=prvtRsvpDiagReqsInProgress)
