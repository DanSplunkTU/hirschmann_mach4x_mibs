#
# PySNMP MIB module RFC1284-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RFC1284-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 17:01:31 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, Gauge32, Counter32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Counter64, TimeTicks, Unsigned32, transmission, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Gauge32", "Counter32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Counter64", "TimeTicks", "Unsigned32", "transmission", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dot3 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7))
dot3Table = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 1), )
if mibBuilder.loadTexts: dot3Table.setStatus('mandatory')
dot3Entry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 1, 1), ).setIndexNames((0, "RFC1284-MIB", "dot3Index"))
if mibBuilder.loadTexts: dot3Entry.setStatus('mandatory')
dot3Index = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3Index.setStatus('mandatory')
dot3InitializeMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialized", 1), ("uninitialized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3InitializeMac.setStatus('mandatory')
dot3MacSubLayerStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MacSubLayerStatus.setStatus('mandatory')
dot3MulticastReceiveStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MulticastReceiveStatus.setStatus('mandatory')
dot3TxEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3TxEnabled.setStatus('mandatory')
dot3TestTdrValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TestTdrValue.setStatus('mandatory')
dot3StatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 2), )
if mibBuilder.loadTexts: dot3StatsTable.setStatus('mandatory')
dot3StatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 2, 1), ).setIndexNames((0, "RFC1284-MIB", "dot3StatsIndex"))
if mibBuilder.loadTexts: dot3StatsEntry.setStatus('mandatory')
dot3StatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsIndex.setStatus('mandatory')
dot3StatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsAlignmentErrors.setStatus('mandatory')
dot3StatsFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFCSErrors.setStatus('mandatory')
dot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSingleCollisionFrames.setStatus('mandatory')
dot3StatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsMultipleCollisionFrames.setStatus('mandatory')
dot3StatsSQETestErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSQETestErrors.setStatus('mandatory')
dot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsDeferredTransmissions.setStatus('mandatory')
dot3StatsLateCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsLateCollisions.setStatus('mandatory')
dot3StatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsExcessiveCollisions.setStatus('mandatory')
dot3StatsInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsInternalMacTransmitErrors.setStatus('mandatory')
dot3StatsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsCarrierSenseErrors.setStatus('mandatory')
dot3StatsExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsExcessiveDeferrals.setStatus('mandatory')
dot3StatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFrameTooLongs.setStatus('mandatory')
dot3StatsInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsInRangeLengthErrors.setStatus('mandatory')
dot3StatsOutOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsOutOfRangeLengthFields.setStatus('mandatory')
dot3StatsInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsInternalMacReceiveErrors.setStatus('mandatory')
dot3CollTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 5), )
if mibBuilder.loadTexts: dot3CollTable.setStatus('mandatory')
dot3CollEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 5, 1), ).setIndexNames((0, "RFC1284-MIB", "dot3CollIndex"), (0, "RFC1284-MIB", "dot3CollCount"))
if mibBuilder.loadTexts: dot3CollEntry.setStatus('mandatory')
dot3CollIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollIndex.setStatus('mandatory')
dot3CollCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollCount.setStatus('mandatory')
dot3CollFrequencies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollFrequencies.setStatus('mandatory')
dot3Errors = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 7))
dot3ErrorInitError = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 7, 1))
dot3ErrorLoopbackError = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 7, 2))
dot3Tests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 6))
dot3TestTdr = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 6, 1))
dot3ChipSets = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8))
dot3ChipSetAMD = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 1))
dot3ChipSetAMD7990 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 1))
dot3ChipSetAMD79900 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 2))
dot3ChipSetIntel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 2))
dot3ChipSetIntel82586 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 1))
dot3ChipSetIntel82596 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 2))
dot3ChipSetSeeq = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 3))
dot3ChipSetSeeq8003 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 1))
dot3ChipSetNational = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 4))
dot3ChipSetNational8390 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 1))
dot3ChipSetNationalSonic = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 2))
dot3ChipSetFujitsu = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 5))
dot3ChipSetFujitsu86950 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 1))
mibBuilder.exportSymbols("RFC1284-MIB", dot3ChipSetAMD=dot3ChipSetAMD, dot3ChipSets=dot3ChipSets, dot3StatsLateCollisions=dot3StatsLateCollisions, dot3Table=dot3Table, dot3Entry=dot3Entry, dot3TxEnabled=dot3TxEnabled, dot3StatsSQETestErrors=dot3StatsSQETestErrors, dot3=dot3, dot3TestTdrValue=dot3TestTdrValue, dot3StatsInternalMacReceiveErrors=dot3StatsInternalMacReceiveErrors, dot3ChipSetNationalSonic=dot3ChipSetNationalSonic, dot3ErrorInitError=dot3ErrorInitError, dot3StatsInternalMacTransmitErrors=dot3StatsInternalMacTransmitErrors, dot3ErrorLoopbackError=dot3ErrorLoopbackError, dot3ChipSetSeeq=dot3ChipSetSeeq, dot3StatsIndex=dot3StatsIndex, dot3TestTdr=dot3TestTdr, dot3StatsExcessiveDeferrals=dot3StatsExcessiveDeferrals, dot3StatsFrameTooLongs=dot3StatsFrameTooLongs, dot3StatsDeferredTransmissions=dot3StatsDeferredTransmissions, dot3ChipSetAMD79900=dot3ChipSetAMD79900, dot3Tests=dot3Tests, dot3StatsInRangeLengthErrors=dot3StatsInRangeLengthErrors, dot3CollEntry=dot3CollEntry, dot3ChipSetAMD7990=dot3ChipSetAMD7990, dot3CollIndex=dot3CollIndex, dot3StatsTable=dot3StatsTable, dot3ChipSetFujitsu86950=dot3ChipSetFujitsu86950, dot3ChipSetIntel82586=dot3ChipSetIntel82586, dot3StatsCarrierSenseErrors=dot3StatsCarrierSenseErrors, dot3Index=dot3Index, dot3StatsSingleCollisionFrames=dot3StatsSingleCollisionFrames, dot3MulticastReceiveStatus=dot3MulticastReceiveStatus, dot3ChipSetIntel=dot3ChipSetIntel, dot3StatsFCSErrors=dot3StatsFCSErrors, dot3CollCount=dot3CollCount, dot3CollTable=dot3CollTable, dot3InitializeMac=dot3InitializeMac, dot3ChipSetNational=dot3ChipSetNational, dot3ChipSetFujitsu=dot3ChipSetFujitsu, dot3StatsMultipleCollisionFrames=dot3StatsMultipleCollisionFrames, dot3CollFrequencies=dot3CollFrequencies, dot3ChipSetIntel82596=dot3ChipSetIntel82596, dot3StatsEntry=dot3StatsEntry, dot3ChipSetSeeq8003=dot3ChipSetSeeq8003, dot3MacSubLayerStatus=dot3MacSubLayerStatus, dot3ChipSetNational8390=dot3ChipSetNational8390, dot3Errors=dot3Errors, dot3StatsAlignmentErrors=dot3StatsAlignmentErrors, dot3StatsExcessiveCollisions=dot3StatsExcessiveCollisions, dot3StatsOutOfRangeLengthFields=dot3StatsOutOfRangeLengthFields)
