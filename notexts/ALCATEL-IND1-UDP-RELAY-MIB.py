#
# PySNMP MIB module ALCATEL-IND1-UDP-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-UDP-RELAY-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:02 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1UdpRelay, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1UdpRelay")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, MibIdentifier, NotificationType, Counter32, IpAddress, ObjectIdentity, Bits, ModuleIdentity, Gauge32, Integer32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ObjectIdentity", "Bits", "ModuleIdentity", "Gauge32", "Integer32", "TimeTicks", "Counter64")
RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
alcatelIND1UDPRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1))
alcatelIND1UDPRelayMIB.setRevisions(('2013-07-15 00:00',))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setLastUpdated('201307150000Z')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setOrganization('Alcatel -Architects Of An Internet World ')
alcatelIND1UDPRelayNotificationObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0))
if mibBuilder.loadTexts: alcatelIND1UDPRelayNotificationObjects.setStatus('current')
alcatelIND1UDPRelayMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBObjects.setStatus('current')
alcatelIND1UDPRelayMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBConformance.setStatus('current')
alcatelIND1UDPRelayMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBGroups.setStatus('current')
alcatelIND1UDPRelayMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliances.setStatus('current')
class IphelpereOption82ASCIIFieldType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("vlan", 5), ("interface", 6))

class DhcpSnoopingOption82ASCIIFieldType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("vlan", 5), ("interface", 6))

class DhcpSnoopingOption82CircuitOrRemoteId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("circuitid", 1), ("remoteid", 2))

iphelperMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1))
genericUdpServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2))
alaDhcpClientTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3))
dhcpSnoopingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4))
dhcpOption82MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 5))
iphelperTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: iphelperTable.setStatus('current')
iphelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperNextHopIpAddress"))
if mibBuilder.loadTexts: iphelperEntry.setStatus('current')
iphelperVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperVlan.setStatus('current')
iphelperNextHopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperNextHopIpAddress.setStatus('current')
iphelperResetSrvStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperResetSrvStats.setStatus('current')
iphelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperRowStatus.setStatus('current')
iphelperStatTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2), )
if mibBuilder.loadTexts: iphelperStatTable.setStatus('current')
iphelperStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsNextHopIpAddr"))
if mibBuilder.loadTexts: iphelperStatEntry.setStatus('current')
iphelperStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperStatsVlan.setStatus('current')
iphelperStatsNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperStatsNextHopIpAddr.setStatus('current')
iphelperTxToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperTxToNextHop.setStatus('current')
iphelperInvalidAgentInfoOptFrmSrver = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidAgentInfoOptFrmSrver.setStatus('current')
iphelperRxFromClient = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperRxFromClient.setStatus('current')
iphelperMaxHopsViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperMaxHopsViolation.setStatus('current')
iphelperForwDelayViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperForwDelayViolation.setStatus('current')
iphelperAgentInfoViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperAgentInfoViolation.setStatus('current')
iphelperInvalidGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidGatewayIP.setStatus('current')
iphelperForwDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwDelay.setStatus('current')
iphelperMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperMaxHops.setStatus('current')
iphelperForwardOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("perVlan", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwardOption.setStatus('current')
iphelperResetAllStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1), ("resetAllGlbStats", 2), ("resetAllSrvStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllStats.setStatus('current')
iphelperBootupOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupOption.setStatus('deprecated')
iphelperBootupPacketOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootp", 1), ("dhcp", 2))).clone('dhcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupPacketOption.setStatus('deprecated')
iphelperAgentInformation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformation.setStatus('current')
iphelperAgentInformationPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformationPolicy.setStatus('current')
iphelperPXESupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperPXESupport.setStatus('current')
iphelperDhcpOption82FormatType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("autoInterfaceAlias", 5), ("ascii", 6))).clone('macAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatType.setStatus('current')
iphelperDhcpOption82StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIField1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 19), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1.setStatus('current')
iphelperDhcpOption82FormatASCIIField1StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIField2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 21), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2.setStatus('current')
iphelperDhcpOption82FormatASCIIField2StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIField3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 23), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3.setStatus('current')
iphelperDhcpOption82FormatASCIIField3StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIField4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 25), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4.setStatus('current')
iphelperDhcpOption82FormatASCIIField4StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIField5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 27), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5.setStatus('current')
iphelperDhcpOption82FormatASCIIField5StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5StringValue.setStatus('current')
iphelperDhcpOption82FormatASCIIDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIDelimiter.setStatus('current')
iphelperResetAllOpt82ErrStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllOpt82ErrStats.setStatus('current')
iphelperOption82ErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31), )
if mibBuilder.loadTexts: iphelperOption82ErrStatsTable.setStatus('current')
iphelperOption82ErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82ifIndex"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82vlan"))
if mibBuilder.loadTexts: iphelperOption82ErrStatsEntry.setStatus('current')
iphelperOpt82ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: iphelperOpt82ifIndex.setStatus('current')
iphelperOpt82vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: iphelperOpt82vlan.setStatus('current')
iphelperOpt82agentInfoViolationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82agentInfoViolationCnt.setStatus('current')
iphelperOpt82invalidGatewayIPAddrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82invalidGatewayIPAddrCnt.setStatus('current')
iphelperOpt82resetErrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetErrStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperOpt82resetErrStats.setStatus('current')
dhcpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopingVlanTable.setStatus('current')
dhcpSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanNumber"))
if mibBuilder.loadTexts: dhcpSnoopingVlanEntry.setStatus('current')
dhcpSnoopingVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dhcpSnoopingVlanNumber.setStatus('current')
dhcpSnoopingVlanOpt82DataInsertionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanOpt82DataInsertionStatus.setStatus('current')
dhcpSnoopingVlanMacAddrVerificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanMacAddrVerificationStatus.setStatus('current')
dhcpSnoopingVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanStatus.setStatus('current')
dhcpSnoopingPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2), )
if mibBuilder.loadTexts: dhcpSnoopingPortTable.setStatus('current')
dhcpSnoopingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortEntry.setStatus('current')
dhcpSnoopingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopingPortIfIndex.setStatus('current')
dhcpSnoopingPortTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("clientOnly", 2), ("trusted", 3))).clone('clientOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortTrustMode.setStatus('current')
dhcpSnoopingPortMacAddrViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortMacAddrViolation.setStatus('current')
dhcpSnoopingPortDhcpServerViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortDhcpServerViolation.setStatus('current')
dhcpSnoopingPortOption82Violation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortOption82Violation.setStatus('current')
dhcpSnoopingPortRelayAgentViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortRelayAgentViolation.setStatus('current')
dhcpSnoopingPortBindingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortBindingViolation.setStatus('current')
dhcpSnoopingPortIpSourceFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortIpSourceFiltering.setStatus('current')
dhcpSnoopingBindingTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3), )
if mibBuilder.loadTexts: dhcpSnoopingBindingTable.setStatus('current')
dhcpSnoopingBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopingBindingEntry.setStatus('current')
dhcpSnoopingBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpSnoopingBindingMacAddress.setStatus('current')
dhcpSnoopingBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpSnoopingBindingIfIndex.setStatus('current')
dhcpSnoopingBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingIpAddress.setStatus('current')
dhcpSnoopingBindingVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingVlan.setStatus('current')
dhcpSnoopingBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingLeaseTime.setStatus('current')
dhcpSnoopingBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingType.setStatus('current')
dhcpSnoopingBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingRowStatus.setStatus('current')
dhcpSnoopingMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchLevel", 1), ("disabled", 2), ("vlanLevel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingMode.setStatus('current')
dhcpSnoopingOpt82DataInsertionStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOpt82DataInsertionStatus.setStatus('current')
dhcpSnoopingMacAddrVerificationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingMacAddrVerificationStatus.setStatus('current')
dhcpSnoopingBindingStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingStatus.setStatus('current')
dhcpSnoopingBindingDatabaseSyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseSyncTimeout.setStatus('current')
dhcpSnoopingBindingDatabaseLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseLastSyncTime.setStatus('current')
dhcpSnoopingBindingDatabaseAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noaction", 0), ("purge", 1), ("renew", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseAction.setStatus('current')
dhcpSnoopingBypassOpt82CheckStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBypassOpt82CheckStatus.setStatus('current')
dhcpSnoopingBindingPersistencyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingPersistencyStatus.setStatus('current')
dhcpSnoopingSourceFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13), )
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanTable.setStatus('current')
dhcpSnoopingSourceFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingSourceFilterVlanNumber"))
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanEntry.setStatus('current')
dhcpSnoopingSourceFilterVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanNumber.setStatus('current')
dhcpSnoopingSourceFilterVlanFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanFilteringStatus.setStatus('current')
dhcpSnoopingOption82FormatType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("autoInterfaceAlias", 5), ("ascii", 6))).clone('macAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatType.setStatus('current')
dhcpSnoopingOption82StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 46), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82StringValue.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47), )
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableTable.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableIndex"))
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableEntry.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 1), DhcpSnoopingOption82CircuitOrRemoteId())
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableIndex.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 2), DhcpSnoopingOption82ASCIIFieldType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 4), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 6), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 8), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 10), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableDelimiter.setStatus('current')
dhcpSnoopingOption82FormatASCIIConfigurableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableStatus.setStatus('current')
alaMdnsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMdnsAdminStatus.setStatus('current')
alaMdnsGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 49), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMdnsGreTunnelName.setStatus('current')
alaMdnsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMdnsOperStatus.setStatus('current')
alaSsdpGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSsdpGreTunnelName.setStatus('current')
alaSsdpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSsdpAdminStatus.setStatus('current')
alaSsdpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSsdpOperStatus.setStatus('current')
genericUdpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: genericUdpServiceTable.setStatus('current')
genericUdpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceUdpPort"))
if mibBuilder.loadTexts: genericUdpServiceEntry.setStatus('current')
genericUdpServiceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServiceUdpPort.setStatus('current')
genericUdpServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDescription.setStatus('current')
genericUdpServiceStatRxFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatRxFromClient.setStatus('current')
genericUdpServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceRowStatus.setStatus('current')
genericUdpServiceDstTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2), )
if mibBuilder.loadTexts: genericUdpServiceDstTable.setStatus('current')
genericUdpServiceDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServicePort"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstVlan"))
if mibBuilder.loadTexts: genericUdpServiceDstEntry.setStatus('current')
genericUdpServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServicePort.setStatus('current')
genericUdpServiceDstVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: genericUdpServiceDstVlan.setStatus('current')
genericUdpServiceStatTxToVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatTxToVlan.setStatus('current')
genericUdpServiceDstTblRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDstTblRowStatus.setStatus('current')
genericUdpServiceStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericUdpServiceStatReset.setStatus('current')
alaGenericUdpServiceDstIpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpTable.setStatus('current')
alaGenericUdpServiceDstIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstUdpPort"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpType"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpAddress"))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpEntry.setStatus('current')
alaGenericUdpServiceDstUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: alaGenericUdpServiceDstUdpPort.setStatus('current')
alaGenericUdpServiceDstIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpType.setStatus('current')
alaGenericUdpServiceDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpAddress.setStatus('current')
alaGenericUdpServiceDstStatTxToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGenericUdpServiceDstStatTxToIp.setStatus('current')
alaGenericUdpServiceDstIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpRowStatus.setStatus('current')
alaDhcpClientAddressAddTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressAddTrap.setStatus('current')
alaDhcpClientAddressExpiryTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressExpiryTrap.setStatus('current')
alaDhcpClientAddressModifyTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressModifyTrap.setStatus('current')
alaDhcpBindingDuplicateEntry = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 4)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"))
if mibBuilder.loadTexts: alaDhcpBindingDuplicateEntry.setStatus('current')
alaDhcpClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientAddress.setStatus('current')
alaDhcpClientNewAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientNewAddress.setStatus('current')
alcatelIND1UDPRelayMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientTrapsGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingGroup2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1UDPRelayMIBCompliance = alcatelIND1UDPRelayMIBCompliance.setStatus('current')
iphelperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetSrvStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperGroup = iphelperGroup.setStatus('current')
iphelperStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperTxToNextHop"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidAgentInfoOptFrmSrver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperStatGroup = iphelperStatGroup.setStatus('current')
iphelperMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHopsViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelayViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInfoViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidGatewayIP"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelay"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHops"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwardOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupPacketOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformationPolicy"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperPXESupport"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIDelimiter"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllOpt82ErrStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsAdminStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsGreTunnelName"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsOperStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpGreTunnelName"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpAdminStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperMiscGroup = iphelperMiscGroup.setStatus('current')
genericUdpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDescription"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceGroup = genericUdpServiceGroup.setStatus('current')
genericUdpServiceDstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatTxToVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstTblRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceDstGroup = genericUdpServiceDstGroup.setStatus('current')
genericUdpServiceMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceMiscGroup = genericUdpServiceMiscGroup.setStatus('current')
alaDhcpClientTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressAddTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressExpiryTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressModifyTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpBindingDuplicateEntry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsGroup = alaDhcpClientTrapsGroup.setStatus('current')
alaDhcpClientTrapsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsObjectGroup = alaDhcpClientTrapsObjectGroup.setStatus('current')
iphelperOpt82ErrorStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82agentInfoViolationCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82invalidGatewayIPAddrCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82resetErrStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperOpt82ErrorStatGroup = iphelperOpt82ErrorStatGroup.setStatus('current')
dhcpSnoopingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseAction"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseLastSyncTime"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseSyncTimeout"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIpAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingLeaseTime"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingPersistencyStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingRowStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBypassOpt82CheckStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingMacAddrVerificationStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingMode"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOpt82DataInsertionStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableDelimiter"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField1"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField3"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField4"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField5"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortIpSourceFiltering"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortMacAddrViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82StringValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dhcpSnoopingGroup = dhcpSnoopingGroup.setStatus('current')
dhcpSnoopingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortBindingViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortOption82Violation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortRelayAgentViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortTrustMode"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingSourceFilterVlanFilteringStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanMacAddrVerificationStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortDhcpServerViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanOpt82DataInsertionStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dhcpSnoopingGroup2 = dhcpSnoopingGroup2.setStatus('current')
alaGenericUdpServiceDstIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstStatTxToIp"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaGenericUdpServiceDstIpGroup = alaGenericUdpServiceDstIpGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-UDP-RELAY-MIB", dhcpSnoopingBindingPersistencyStatus=dhcpSnoopingBindingPersistencyStatus, genericUdpServiceStatReset=genericUdpServiceStatReset, iphelperStatsNextHopIpAddr=iphelperStatsNextHopIpAddr, iphelperOption82ErrStatsTable=iphelperOption82ErrStatsTable, iphelperDhcpOption82FormatASCIIField3StringValue=iphelperDhcpOption82FormatASCIIField3StringValue, iphelperOpt82ErrorStatGroup=iphelperOpt82ErrorStatGroup, dhcpSnoopingOption82FormatASCIIConfigurableDelimiter=dhcpSnoopingOption82FormatASCIIConfigurableDelimiter, dhcpSnoopingOption82FormatASCIIConfigurableField3=dhcpSnoopingOption82FormatASCIIConfigurableField3, iphelperResetAllOpt82ErrStats=iphelperResetAllOpt82ErrStats, genericUdpServiceStatTxToVlan=genericUdpServiceStatTxToVlan, alcatelIND1UDPRelayNotificationObjects=alcatelIND1UDPRelayNotificationObjects, IphelpereOption82ASCIIFieldType=IphelpereOption82ASCIIFieldType, alaGenericUdpServiceDstIpAddress=alaGenericUdpServiceDstIpAddress, alaMdnsOperStatus=alaMdnsOperStatus, alaGenericUdpServiceDstIpGroup=alaGenericUdpServiceDstIpGroup, iphelperOpt82invalidGatewayIPAddrCnt=iphelperOpt82invalidGatewayIPAddrCnt, dhcpSnoopingSourceFilterVlanFilteringStatus=dhcpSnoopingSourceFilterVlanFilteringStatus, genericUdpServiceMiscGroup=genericUdpServiceMiscGroup, iphelperDhcpOption82FormatASCIIField2=iphelperDhcpOption82FormatASCIIField2, iphelperEntry=iphelperEntry, alaDhcpClientNewAddress=alaDhcpClientNewAddress, dhcpSnoopingSourceFilterVlanEntry=dhcpSnoopingSourceFilterVlanEntry, genericUdpServiceRowStatus=genericUdpServiceRowStatus, dhcpSnoopingOption82FormatASCIIConfigurableStatus=dhcpSnoopingOption82FormatASCIIConfigurableStatus, iphelperInvalidAgentInfoOptFrmSrver=iphelperInvalidAgentInfoOptFrmSrver, alaSsdpAdminStatus=alaSsdpAdminStatus, iphelperDhcpOption82StringValue=iphelperDhcpOption82StringValue, iphelperDhcpOption82FormatASCIIField1StringValue=iphelperDhcpOption82FormatASCIIField1StringValue, iphelperDhcpOption82FormatASCIIField5=iphelperDhcpOption82FormatASCIIField5, iphelperDhcpOption82FormatType=iphelperDhcpOption82FormatType, alaMdnsAdminStatus=alaMdnsAdminStatus, dhcpSnoopingVlanTable=dhcpSnoopingVlanTable, alaDhcpClientTrapsObj=alaDhcpClientTrapsObj, dhcpSnoopingOption82FormatASCIIConfigurableIndex=dhcpSnoopingOption82FormatASCIIConfigurableIndex, genericUdpServiceUdpPort=genericUdpServiceUdpPort, dhcpSnoopingBindingRowStatus=dhcpSnoopingBindingRowStatus, alcatelIND1UDPRelayMIBGroups=alcatelIND1UDPRelayMIBGroups, iphelperAgentInfoViolation=iphelperAgentInfoViolation, genericUdpServiceStatRxFromClient=genericUdpServiceStatRxFromClient, genericUdpServicePort=genericUdpServicePort, dhcpSnoopingPortOption82Violation=dhcpSnoopingPortOption82Violation, dhcpSnoopingPortEntry=dhcpSnoopingPortEntry, PYSNMP_MODULE_ID=alcatelIND1UDPRelayMIB, iphelperDhcpOption82FormatASCIIDelimiter=iphelperDhcpOption82FormatASCIIDelimiter, alaDhcpClientAddressAddTrap=alaDhcpClientAddressAddTrap, alaDhcpClientTrapsObjectGroup=alaDhcpClientTrapsObjectGroup, alaDhcpBindingDuplicateEntry=alaDhcpBindingDuplicateEntry, iphelperOpt82ifIndex=iphelperOpt82ifIndex, alaDhcpClientAddressExpiryTrap=alaDhcpClientAddressExpiryTrap, iphelperDhcpOption82FormatASCIIField1=iphelperDhcpOption82FormatASCIIField1, DhcpSnoopingOption82CircuitOrRemoteId=DhcpSnoopingOption82CircuitOrRemoteId, iphelperPXESupport=iphelperPXESupport, alaGenericUdpServiceDstStatTxToIp=alaGenericUdpServiceDstStatTxToIp, dhcpSnoopingBindingEntry=dhcpSnoopingBindingEntry, alcatelIND1UDPRelayMIBConformance=alcatelIND1UDPRelayMIBConformance, iphelperBootupOption=iphelperBootupOption, dhcpSnoopingPortBindingViolation=dhcpSnoopingPortBindingViolation, dhcpSnoopingBindingDatabaseSyncTimeout=dhcpSnoopingBindingDatabaseSyncTimeout, dhcpSnoopingBindingIpAddress=dhcpSnoopingBindingIpAddress, alaGenericUdpServiceDstIpRowStatus=alaGenericUdpServiceDstIpRowStatus, iphelperMIB=iphelperMIB, dhcpSnoopingOption82StringValue=dhcpSnoopingOption82StringValue, iphelperGroup=iphelperGroup, dhcpSnoopingPortMacAddrViolation=dhcpSnoopingPortMacAddrViolation, iphelperOpt82resetErrStats=iphelperOpt82resetErrStats, DhcpSnoopingOption82ASCIIFieldType=DhcpSnoopingOption82ASCIIFieldType, iphelperForwDelayViolation=iphelperForwDelayViolation, dhcpSnoopingVlanEntry=dhcpSnoopingVlanEntry, iphelperMaxHopsViolation=iphelperMaxHopsViolation, alaMdnsGreTunnelName=alaMdnsGreTunnelName, dhcpSnoopingBindingIfIndex=dhcpSnoopingBindingIfIndex, dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal, genericUdpServiceMIB=genericUdpServiceMIB, dhcpSnoopingPortTrustMode=dhcpSnoopingPortTrustMode, genericUdpServiceEntry=genericUdpServiceEntry, iphelperVlan=iphelperVlan, dhcpSnoopingOption82FormatASCIIConfigurableField2=dhcpSnoopingOption82FormatASCIIConfigurableField2, iphelperForwardOption=iphelperForwardOption, dhcpSnoopingOption82FormatASCIIConfigurableTable=dhcpSnoopingOption82FormatASCIIConfigurableTable, dhcpSnoopingGroup=dhcpSnoopingGroup, dhcpOption82MIB=dhcpOption82MIB, dhcpSnoopingBindingDatabaseAction=dhcpSnoopingBindingDatabaseAction, iphelperDhcpOption82FormatASCIIField2StringValue=iphelperDhcpOption82FormatASCIIField2StringValue, dhcpSnoopingOpt82DataInsertionStatus=dhcpSnoopingOpt82DataInsertionStatus, iphelperStatEntry=iphelperStatEntry, dhcpSnoopingPortRelayAgentViolation=dhcpSnoopingPortRelayAgentViolation, alcatelIND1UDPRelayMIB=alcatelIND1UDPRelayMIB, genericUdpServiceDstGroup=genericUdpServiceDstGroup, genericUdpServiceDstEntry=genericUdpServiceDstEntry, dhcpSnoopingBindingDatabaseLastSyncTime=dhcpSnoopingBindingDatabaseLastSyncTime, dhcpSnoopingVlanNumber=dhcpSnoopingVlanNumber, dhcpSnoopingBindingStatus=dhcpSnoopingBindingStatus, dhcpSnoopingBindingType=dhcpSnoopingBindingType, genericUdpServiceDstTable=genericUdpServiceDstTable, alaDhcpClientTrapsGroup=alaDhcpClientTrapsGroup, alaDhcpClientAddress=alaDhcpClientAddress, alcatelIND1UDPRelayMIBCompliances=alcatelIND1UDPRelayMIBCompliances, iphelperBootupPacketOption=iphelperBootupPacketOption, iphelperForwDelay=iphelperForwDelay, iphelperOption82ErrStatsEntry=iphelperOption82ErrStatsEntry, dhcpSnoopingMIB=dhcpSnoopingMIB, dhcpSnoopingOption82FormatType=dhcpSnoopingOption82FormatType, dhcpSnoopingOption82FormatASCIIConfigurableField1=dhcpSnoopingOption82FormatASCIIConfigurableField1, dhcpSnoopingVlanMacAddrVerificationStatus=dhcpSnoopingVlanMacAddrVerificationStatus, dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal, alaSsdpOperStatus=alaSsdpOperStatus, iphelperStatGroup=iphelperStatGroup, iphelperMiscGroup=iphelperMiscGroup, iphelperStatsVlan=iphelperStatsVlan, iphelperOpt82vlan=iphelperOpt82vlan, dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal, genericUdpServiceDescription=genericUdpServiceDescription, dhcpSnoopingSourceFilterVlanTable=dhcpSnoopingSourceFilterVlanTable, dhcpSnoopingSourceFilterVlanNumber=dhcpSnoopingSourceFilterVlanNumber, alaGenericUdpServiceDstIpTable=alaGenericUdpServiceDstIpTable, iphelperAgentInformationPolicy=iphelperAgentInformationPolicy, genericUdpServiceDstVlan=genericUdpServiceDstVlan, dhcpSnoopingPortTable=dhcpSnoopingPortTable, iphelperMaxHops=iphelperMaxHops, iphelperDhcpOption82FormatASCIIField3=iphelperDhcpOption82FormatASCIIField3, genericUdpServiceGroup=genericUdpServiceGroup, iphelperResetAllStats=iphelperResetAllStats, genericUdpServiceTable=genericUdpServiceTable, alaGenericUdpServiceDstUdpPort=alaGenericUdpServiceDstUdpPort, dhcpSnoopingBindingLeaseTime=dhcpSnoopingBindingLeaseTime, dhcpSnoopingGroup2=dhcpSnoopingGroup2, dhcpSnoopingOption82FormatASCIIConfigurableField5=dhcpSnoopingOption82FormatASCIIConfigurableField5, iphelperDhcpOption82FormatASCIIField5StringValue=iphelperDhcpOption82FormatASCIIField5StringValue, dhcpSnoopingBindingVlan=dhcpSnoopingBindingVlan, iphelperRxFromClient=iphelperRxFromClient, iphelperTxToNextHop=iphelperTxToNextHop, dhcpSnoopingMode=dhcpSnoopingMode, dhcpSnoopingPortIpSourceFiltering=dhcpSnoopingPortIpSourceFiltering, dhcpSnoopingPortDhcpServerViolation=dhcpSnoopingPortDhcpServerViolation, dhcpSnoopingOption82FormatASCIIConfigurableEntry=dhcpSnoopingOption82FormatASCIIConfigurableEntry, iphelperRowStatus=iphelperRowStatus, genericUdpServiceDstTblRowStatus=genericUdpServiceDstTblRowStatus, dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal, iphelperNextHopIpAddress=iphelperNextHopIpAddress, alaGenericUdpServiceDstIpEntry=alaGenericUdpServiceDstIpEntry, dhcpSnoopingVlanStatus=dhcpSnoopingVlanStatus, iphelperStatTable=iphelperStatTable, iphelperDhcpOption82FormatASCIIField4StringValue=iphelperDhcpOption82FormatASCIIField4StringValue, alaDhcpClientAddressModifyTrap=alaDhcpClientAddressModifyTrap, alcatelIND1UDPRelayMIBCompliance=alcatelIND1UDPRelayMIBCompliance, dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal, iphelperDhcpOption82FormatASCIIField4=iphelperDhcpOption82FormatASCIIField4, dhcpSnoopingBindingTable=dhcpSnoopingBindingTable, alaGenericUdpServiceDstIpType=alaGenericUdpServiceDstIpType, alaSsdpGreTunnelName=alaSsdpGreTunnelName, dhcpSnoopingBindingMacAddress=dhcpSnoopingBindingMacAddress, iphelperTable=iphelperTable, dhcpSnoopingPortIfIndex=dhcpSnoopingPortIfIndex, dhcpSnoopingMacAddrVerificationStatus=dhcpSnoopingMacAddrVerificationStatus, dhcpSnoopingVlanOpt82DataInsertionStatus=dhcpSnoopingVlanOpt82DataInsertionStatus, iphelperAgentInformation=iphelperAgentInformation, iphelperResetSrvStats=iphelperResetSrvStats, dhcpSnoopingOption82FormatASCIIConfigurableField4=dhcpSnoopingOption82FormatASCIIConfigurableField4, iphelperOpt82agentInfoViolationCnt=iphelperOpt82agentInfoViolationCnt, alcatelIND1UDPRelayMIBObjects=alcatelIND1UDPRelayMIBObjects, dhcpSnoopingBypassOpt82CheckStatus=dhcpSnoopingBypassOpt82CheckStatus, iphelperInvalidGatewayIP=iphelperInvalidGatewayIP)
