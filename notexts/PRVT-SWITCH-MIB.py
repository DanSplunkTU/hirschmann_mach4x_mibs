#
# PySNMP MIB module PRVT-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SWITCH-MIB
# Produced by pysmi-1.1.3 at Sat Nov 20 17:22:39 2021
# On host fv-az121-977 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifOperStatus, ifAdminStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "ifAdminStatus", "ifIndex")
privateVendorOID, = mibBuilder.importSymbols("PRIV-VENDORDEF-MIB", "privateVendorOID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, IpAddress, NotificationType, MibIdentifier, ObjectIdentity, Bits, TimeTicks, Counter32, Integer32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "IpAddress", "NotificationType", "MibIdentifier", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "Integer32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
prvtSwitchMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 100))
prvtSwitchMib.setRevisions(('2009-06-22 00:00', '2009-04-14 00:00', '2009-03-08 00:00', '2009-02-20 00:00', '2009-01-12 00:00', '2008-09-25 00:00', '2008-03-28 00:00', '2008-02-28 00:00', '2007-12-28 00:00', '2007-12-12 00:00', '2007-09-26 00:00', '2007-04-24 00:00', '2007-02-06 00:00', '2006-10-25 00:00', '2006-07-02 00:00', '2006-06-14 00:00', '2006-04-20 00:00', '2006-02-10 00:00', '2006-02-02 00:00', '2005-12-22 00:00', '2005-12-08 00:00', '2005-10-03 00:00', '2005-09-26 00:00', '2005-09-07 00:00', '2005-07-20 00:00', '2005-07-08 00:00', '2005-03-07 00:00', '2005-02-16 00:00', '2005-02-01 00:00', '2004-06-29 00:00', '2004-05-03 00:00', '2004-03-03 00:00', '2004-02-03 00:00', '2003-11-18 00:00', '2003-10-16 00:00', '2003-09-09 00:00', '2003-07-02 00:00', '2003-05-06 00:00', '2002-12-12 00:00', '2002-12-01 00:00', '2002-11-21 00:00', '2002-11-17 00:00', '2002-09-09 00:00', '2002-04-10 00:00', '2001-08-14 00:00', '2001-07-22 00:00', '2001-07-15 00:00', '2001-05-17 00:00', '2001-05-15 00:00', '2001-04-19 00:00', '2001-04-15 00:00', '2000-06-28 00:00',))
if mibBuilder.loadTexts: prvtSwitchMib.setLastUpdated('200906220000Z')
if mibBuilder.loadTexts: prvtSwitchMib.setOrganization('BATM Advanced Communication')
prvt_products = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1)).setLabel("prvt-products")
prvt_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 2)).setLabel("prvt-mgmt")
rptr = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 1))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 2))
trclam = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 3))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 4))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5))
ipSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6))
bsw = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 1))
tps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 2))
tpf = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 3))
titan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 5))
titant5 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 7))
edgeLinkT4 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 15))
edgeLinkT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 17))
titanPro = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 20))
acs25L4282 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 500))
acs25L4282t5 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 502))
vol0215 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 999))
vol4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 998))
vol5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 996))
class UnitIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("master", 1), ("slave1", 2), ("slave2", 3), ("slave3", 4), ("slave4", 5))

class ModuleHwType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))
    namedValues = NamedValues(("uninstalled", 1), ("stacking", 2), ("m100BaseTx", 3), ("m100BaseFxVF45", 4), ("m1000BaseSxSCMM850", 6), ("m1000BaseLxSC1300", 7), ("m1000BaseSCSMLDA", 8), ("m1000BaseSCSMLDB", 9), ("m1000BaseSxVF45MM850", 10), ("m1000BaseLxVF451300", 11), ("m1000BaseSxMTRJMM", 12), ("m1000BaseLxMTRJ1300", 13), ("m10BaseFlVF45", 14), ("m10BaseFlVF45X4Ports", 15), ("m100BaseFxSCMM", 16), ("m100BaseFxSCSM", 17), ("m100BaseFxSCSM2Port", 18), ("m100BaseFxSCSMLD", 19), ("m100BaseFxSCSMLD2Port", 20), ("m100BaseFxMTRJMM", 21), ("m100BaseFxMTRJSM", 22), ("mDUAL-SFP", 23), ("mDUAL-SFP-installed", 24), ("m1000BaseTx", 25), ("m1000BaseCx", 26), ("mVDSLNT", 30), ("mVDSLLT", 31), ("mVDSLNTand100BaseTX", 32), ("mVDSLLTand100BaseTX", 33), ("mVDSLLT24Port", 34), ("mLayer31000BaseSXSCMM", 35), ("mLayer31000BaseLXSCSM", 36), ("mLayer31000BaseSXSFFMM", 37), ("mLayer31000BaseLXSFFSM", 38), ("mLayer3100BaseFXSCMM2Port", 39), ("mLayer3100BaseFXSCSM2Port", 40), ("mLayer3100BaseFXSCMM4Port", 41), ("mLayer3100BaseFXSCSM4Port", 42), ("mLayer3100BaseFXSFFMM", 43), ("mLayer3100BaseFXSFFSM", 44), ("mLayer3100BaseTX", 45), ("m1000BaseGBIC-installed", 46), ("m1000BaseGBIC-not-installed", 47), ("mLayer31000BaseSX-GIBIC", 48), ("mLayer31000BaseLX-GIBIC", 49), ("mLayer31000BaseCX-GIBIC", 50), ("mLayer31000BaseT-GIBIC", 51), ("mLayer3100BaseSMLCL-GIBIC", 52), ("mLayer3100BaseM5o6SNI-GIBIC", 53), ("mLayer31000BasePOSMM", 54), ("mLayer31000BasePOSSM", 55), ("mLayer3100BaseFXSFFMM20Port", 56), ("mLayer3100BaseFXSFFSM20Port", 57), ("mLayer3100BaseFXSFFMM5Port", 58), ("mLayer3100BaseFXSFFSM5Port", 59), ("mDS3ATM", 60), ("mDS1MLP", 61), ("mMLPmother", 62), ("m1000BaseSFP-installed", 63), ("mLayer31000BaseSX-SFP", 65), ("mLayer31000BaseLX-SFP", 66), ("mLayer31000BaseCX-SFP", 67), ("mLayer31000BaseT-SFP", 68), ("mLayer3100BaseSMLCL-SFP", 69), ("mLayer3100BaseM5o6SNI-SFP", 70), ("m100BaseGBIC-not-installed", 71), ("mLayer310GBaseSR-XFP", 72), ("mLayer310GBaseLR-XFP", 73), ("mLayer310GBaseER-XFP", 74), ("mLayer310GBaseSW-XFP", 75), ("mLayer310GBaseLW-XFP", 76), ("mLayer310GBaseEW-XFP", 77), ("mLayer310GBase-XFP", 78), ("m10000BaseMEDIA-not-installed", 79), ("mCpmCard", 80), ("mLayer310GBaseLRW-XFP", 81), ("mLayer310GBaseERW-XFP", 82), ("mLayer31000BaseX-SFP", 83), ("mCES", 84), ("mLayer3100BaseFX-SFP", 85), ("mCES-4TDM", 86), ("mLayer31000BaseLX-BD-SFP", 87), ("mMiRIC-E1", 88), ("mMiRIC-E3", 89), ("mMiRIC-T1", 90), ("mMiRIC-T3", 91), ("mLayer31000BaseSFP-Unknown", 92), ("m10000BaseXFP-Unknown", 93), ("xAUI-1G-10G", 94), ("mLayer3-10-1000BaseT", 95), ("mLayer310GBaseSMSR-XFP", 96), ("mLayer310GBaseSMLR-XFP", 97), ("mLayer310GBaseSMER-XFP", 98), ("mLayer310GBaseSMSW-XFP", 99), ("mLayer310GBaseSMLW-XFP", 101), ("mLayer310GBaseSMEW-XFP", 102), ("mLayer310GBaseSMSRW-XFP", 103), ("mLayer310GBaseSMLRW-XFP", 104), ("mLayer310GBaseSMERW-XFP", 105), ("mLayer310GBaseCpPgt-XFP", 106), ("mLayer310GBaseSMZR-XFP", 107), ("mLayer31000BaseZX-SFP", 108), ("mLayer310GBaseSMZX-XFP", 109), ("mLayer310GBaseSMEX-XFP", 110), ("mLayer31000BaseT-WithoutAN-SFP", 111), ("mLayer3100BaseLX-BD-SFP", 112))

class Series(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notExist", 1), ("e-series", 2), ("g-series", 3), ("t-series", 4))

prvtSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2))
reports = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3))
test = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 4))
commands = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 5))
prvtSwitchConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 6))
sysProductsOids = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1))
sysIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2))
sysManufacturing = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3))
sysSwitchingHW = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 4))
t4Router = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1))
t5Router = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 2))
t5ProRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 3))
t6Router = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 4))
t5c_48TRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 5)).setLabel("t5c-48TRouter")
t5RNRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 6))
t5c_24TRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 7)).setLabel("t5c-24TRouter")
t5c_24MRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 8)).setLabel("t5c-24MRouter")
t5c_24FRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 9)).setLabel("t5c-24FRouter")
t5c_24GRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 10)).setLabel("t5c-24GRouter")
t5c_24GTRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 11)).setLabel("t5c-24GTRouter")
t6pro_lc_20G = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 13)).setLabel("t6pro-lc-20G")
t6pro_cpm = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 14)).setLabel("t6pro-cpm")
tMetro = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 16))
tMarc = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17))
aHUB1_A = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 18)).setLabel("aHUB1-A")
tMetro_ES = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19)).setLabel("tMetro-ES")
tMarc_E = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 20)).setLabel("tMarc-E")
tMarc_EW = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 21)).setLabel("tMarc-EW")
tMarc_WDB = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 22)).setLabel("tMarc-WDB")
tMarc_WD = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 23)).setLabel("tMarc-WD")
tMarc_F = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 24)).setLabel("tMarc-F")
t5c_XG = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 27)).setLabel("t5c-XG")
compact = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 14, 1))
classic = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 14, 2))
as9205 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 7, 1))
as9205_F = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 9, 1)).setLabel("as9205-F")
tMarc_250 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 1)).setLabel("tMarc-250")
tMarc_254 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 2)).setLabel("tMarc-254")
tMarc_254h = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 3)).setLabel("tMarc-254h")
tMarc_340 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 10)).setLabel("tMarc-340")
tMarc_380 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 11)).setLabel("tMarc-380")
tMarc_340_E = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 20, 1)).setLabel("tMarc-340-E")
tMarc_380_E = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 20, 2)).setLabel("tMarc-380-E")
tMarc_340_EW = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 21, 1)).setLabel("tMarc-340-EW")
tMarc_380_EW = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 21, 2)).setLabel("tMarc-380-EW")
tMarc_340WD_B = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 22, 1)).setLabel("tMarc-340WD-B")
tMarc_340WD = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 23, 1)).setLabel("tMarc-340WD")
tMarc_340_F = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 24, 1)).setLabel("tMarc-340-F")
tMarc_280 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 20)).setLabel("tMarc-280")
dm9225 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 1, 1))
dm9225_E = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 2, 1)).setLabel("dm9225-E")
dm9234 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 17, 10, 1))
alcatel_7250 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 16, 1)).setLabel("alcatel-7250")
alcatel_7250_ES = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19, 1)).setLabel("alcatel-7250-ES")
alcatel_7250_ESA = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19, 2)).setLabel("alcatel-7250-ESA")
tMetro_ESA = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19, 3)).setLabel("tMetro-ESA")
as9220 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19, 10))
tMetro_200S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 19, 11)).setLabel("tMetro-200S")
as9215 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 27, 1))
bI_Ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 18, 1)).setLabel("bI-Ethernet")
fI_Ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 18, 2)).setLabel("fI-Ethernet")
t5c = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 100))
t5cgt = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 222))
t5g = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 333))
v24s = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 444))
edgeGate281 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1000))
edgeGate281SYS = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1001))
edgeGate231 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1010))
edgeGate282 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1020))
edgeGate282S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1021))
edgeGate482S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1022))
edgeGate483S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1023))
edgeGate483D = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1024))
edgeGate201 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1031))
edgeGate232 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1041))
ac500 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1050))
ac505 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1050, 1))
ac512 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1050, 2))
ac524 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 1, 1050, 3))
sysIntfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1), )
if mibBuilder.loadTexts: sysIntfTable.setStatus('current')
sysIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "sysStackNo"), (0, "PRVT-SWITCH-MIB", "sysSlotNo"))
if mibBuilder.loadTexts: sysIntfEntry.setStatus('current')
sysStackNo = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1, 1, 1), UnitIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStackNo.setStatus('current')
sysSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSlotNo.setStatus('current')
sysIntfUnitExist = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uninstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfUnitExist.setStatus('current')
sysIntfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 2, 1, 1, 4), ModuleHwType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIntfModule.setStatus('current')
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
sysSwitchModel = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchModel.setStatus('current')
sysAssemblyNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAssemblyNumber.setStatus('current')
sysPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPartNumber.setStatus('current')
sysCLEI = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCLEI.setStatus('current')
sysHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHwRevision.setStatus('current')
sysManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysManufacturingDate.setStatus('current')
sysSwitchSeries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 1, 4, 1), Series()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwitchSeries.setStatus('current')
configL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2))
configL2SpanOnOff = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enableSTP", 1), ("disable", 2), ("enableRSTP", 3), ("enablePVST", 4), ("enableMST", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2SpanOnOff.setStatus('current')
configL2IfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2), )
if mibBuilder.loadTexts: configL2IfaceTable.setStatus('current')
configL2IfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "configL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "configL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "configL2IfacePort"))
if mibBuilder.loadTexts: configL2IfaceEntry.setStatus('current')
configL2IfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configL2IfaceUnit.setStatus('current')
configL2IfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configL2IfaceSlot.setStatus('current')
configL2IfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configL2IfacePort.setStatus('current')
configL2IfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceName.setStatus('current')
configL2IfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceEnable.setStatus('current')
configL2IfaceSTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceSTPEnable.setStatus('current')
configL2IfaceDuplexSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 99))).clone(namedValues=NamedValues(("autonegotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-1000", 6), ("full-1000", 7), ("pos-155", 8), ("pos-622", 9), ("full-10000", 10), ("half-auto", 11), ("full-auto", 12), ("auto-10", 13), ("auto-100", 14), ("auto-1000", 16), ("illegal", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceDuplexSpeedSet.setStatus('obsolete')
configL2IfaceFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autonegotiate", 1), ("flowon", 2), ("flowoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceFlow.setStatus('current')
configL2IfaceBackpressure = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("backpressureon", 1), ("backpressureoff", 2), ("illegal", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceBackpressure.setStatus('current')
configL2IfaceResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceResetCounters.setStatus('current')
configL2IfaceDefaultVID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceDefaultVID.setStatus('current')
configL2IfaceSnifferIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceSnifferIfIndex.setStatus('current')
configL2TopologyChangeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2TopologyChangeDetection.setStatus('current')
configL2IfaceDuplexModeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("full", 2), ("half", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceDuplexModeSet.setStatus('current')
configL2IfaceSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("auto", 1), ("speed-10", 2), ("speed-100", 3), ("speed-1000", 4), ("speed-10000", 5), ("pos-155", 6), ("pos-622", 7), ("illegal", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceSpeedSet.setStatus('current')
configL2IfaceBroadcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceBroadcastRateLimit.setStatus('current')
configL2IfaceMulticastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceMulticastRateLimit.setStatus('current')
configL2IfaceUnknownRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceUnknownRateLimit.setStatus('current')
configL2IfaceBroadcastBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceBroadcastBurstSize.setStatus('current')
configL2IfaceMulticastBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceMulticastBurstSize.setStatus('current')
configL2IfaceUnknownBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceUnknownBurstSize.setStatus('current')
configL2IfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216)).clone(1528)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceMtu.setStatus('current')
configL2IfaceAdminCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdi-x", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceAdminCrossOver.setStatus('current')
configL2IfaceRemoteFaultDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 2, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableRemoteFaultDetect", 1), ("disableRemoteFaultDetect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceRemoteFaultDetect.setStatus('current')
reportsL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1))
reportsL2IfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1), )
if mibBuilder.loadTexts: reportsL2IfaceTable.setStatus('current')
reportsL2IfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"))
if mibBuilder.loadTexts: reportsL2IfaceEntry.setStatus('current')
reportsL2IfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceUnit.setStatus('current')
reportsL2IfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceSlot.setStatus('current')
reportsL2IfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfacePort.setStatus('current')
reportsL2IfaceBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceBridgeIndex.setStatus('current')
reportsL2IfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceType.setStatus('current')
reportsL2IfaceLink = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceLink.setStatus('current')
reportsL2IfaceDuplexSpeedGet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("unknown", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-1000", 6), ("full-1000", 7), ("pos-155", 8), ("pos-622", 9), ("full-10000", 10), ("illegal", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceDuplexSpeedGet.setStatus('current')
reportsL2IfaceTXOctetsNoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceTXOctetsNoErr.setStatus('current')
reportsL2IfaceTXPacketsNoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceTXPacketsNoErr.setStatus('current')
reportsL2IfaceRXOctetsNoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceRXOctetsNoErr.setStatus('current')
reportsL2IfaceRXPacketsNoErr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceRXPacketsNoErr.setStatus('current')
reportsL2IfaceIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInOctets.setStatus('current')
reportsL2IfaceIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInUcastPkts.setStatus('current')
reportsL2IfaceIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInNUcastPkts.setStatus('current')
reportsL2IfaceIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInDiscards.setStatus('current')
reportsL2IfaceIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInErrors.setStatus('current')
reportsL2IfaceIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfInUnknownProtos.setStatus('current')
reportsL2IfaceIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfOutOctets.setStatus('current')
reportsL2IfaceIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfOutUcastPkts.setStatus('current')
reportsL2IfaceIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfOutNUcastPkts.setStatus('current')
reportsL2IfaceIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfOutDiscards.setStatus('current')
reportsL2IfaceIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceIfOutErrors.setStatus('current')
reportsL2IfaceStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsDropEvents.setStatus('current')
reportsL2IfaceStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsOctets.setStatus('current')
reportsL2IfaceStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts.setStatus('current')
reportsL2IfaceStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsBroadcastPkts.setStatus('current')
reportsL2IfaceStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsMulticastPkts.setStatus('current')
reportsL2IfaceStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsCRCAlignErrors.setStatus('current')
reportsL2IfaceStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsUndersizePkts.setStatus('current')
reportsL2IfaceStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsOversizePkts.setStatus('current')
reportsL2IfaceStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsFragments.setStatus('current')
reportsL2IfaceStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsJabbers.setStatus('current')
reportsL2IfaceStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsCollisions.setStatus('current')
reportsL2IfaceStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts64Octets.setStatus('current')
reportsL2IfaceStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts65to127Octets.setStatus('current')
reportsL2IfaceStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts128to255Octets.setStatus('current')
reportsL2IfaceStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts256to511Octets.setStatus('current')
reportsL2IfaceStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts512to1023Octets.setStatus('current')
reportsL2IfaceStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceStatsPkts1024to1518Octets.setStatus('current')
reportsL2IfaceFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("flowon", 2), ("flowoff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceFlow.setStatus('current')
reportsL2IfaceHWType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 41), ModuleHwType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceHWType.setStatus('current')
reportsL2IfaceActiveJackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceActiveJackIndex.setStatus('current')
reportsHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2))
reportsHardwarePSStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsHardwarePSStatus.setStatus('current')
reportsHardwareFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsHardwareFanStatus.setStatus('current')
reportsHardwareTemperature = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsHardwareTemperature.setStatus('current')
reportsHardwarePSVoltage = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsHardwarePSVoltage.setStatus('current')
reportsHardwareTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2))).clone('celsius')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reportsHardwareTemperatureScale.setStatus('current')
reportsHardwareTemperatureHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 70)).clone(55)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reportsHardwareTemperatureHighLimit.setStatus('current')
reportsHardwareDoorStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsHardwareDoorStatus.setStatus('current')
reportsIfJack = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 3))
reportsIfJackTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 3, 2), )
if mibBuilder.loadTexts: reportsIfJackTable.setStatus('current')
reportsIfJackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 3, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"), (0, "PRVT-SWITCH-MIB", "reportsIfJackIndex"))
if mibBuilder.loadTexts: reportsIfJackEntry.setStatus('current')
reportsIfJackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: reportsIfJackIndex.setStatus('current')
reportsIfJackType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 3, 3, 2, 1, 2), ModuleHwType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsIfJackType.setStatus('current')
cpuTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 1)).setObjects(("PRVT-SWITCH-MIB", "reportsHardwareTemperature"))
if mibBuilder.loadTexts: cpuTemperatureExceeded.setStatus('current')
powerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 2)).setObjects(("PRVT-SWITCH-MIB", "reportsHardwarePSStatus"))
if mibBuilder.loadTexts: powerSupplyStatusChange.setStatus('current')
fanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 3)).setObjects(("PRVT-SWITCH-MIB", "reportsHardwareFanStatus"))
if mibBuilder.loadTexts: fanStatusChange.setStatus('current')
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portSecurityViolation.setStatus('current')
portRedundantLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("PRVT-SWITCH-MIB", "reportsL2IfaceLink"))
if mibBuilder.loadTexts: portRedundantLinkChange.setStatus('current')
sysIntfModuleChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 6)).setObjects(("PRVT-SWITCH-MIB", "sysIntfModule"))
if mibBuilder.loadTexts: sysIntfModuleChange.setStatus('current')
prvtLogNotifyFull = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 7))
if mibBuilder.loadTexts: prvtLogNotifyFull.setStatus('current')
doorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 0, 8)).setObjects(("PRVT-SWITCH-MIB", "reportsHardwareDoorStatus"))
if mibBuilder.loadTexts: doorStatusChange.setStatus('current')
prvtSwitchMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 6, 2))
prvtSwitchNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 100, 6, 2, 3)).setObjects(("PRVT-SWITCH-MIB", "cpuTemperatureExceeded"), ("PRVT-SWITCH-MIB", "powerSupplyStatusChange"), ("PRVT-SWITCH-MIB", "fanStatusChange"), ("PRVT-SWITCH-MIB", "portSecurityViolation"), ("PRVT-SWITCH-MIB", "portRedundantLinkChange"), ("PRVT-SWITCH-MIB", "sysIntfModuleChange"), ("PRVT-SWITCH-MIB", "doorStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSwitchNotificationGroup = prvtSwitchNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-SWITCH-MIB", reportsL2IfaceIfOutErrors=reportsL2IfaceIfOutErrors, tMarc_WD=tMarc_WD, tMarc_340_EW=tMarc_340_EW, ac524=ac524, reportsL2IfaceBridgeIndex=reportsL2IfaceBridgeIndex, vol0215=vol0215, as9205=as9205, ac512=ac512, classic=classic, configL2IfaceSnifferIfIndex=configL2IfaceSnifferIfIndex, tMetro_ESA=tMetro_ESA, as9220=as9220, tMarc_254h=tMarc_254h, commands=commands, configL2IfaceEnable=configL2IfaceEnable, reportsIfJackEntry=reportsIfJackEntry, reportsL2IfaceFlow=reportsL2IfaceFlow, config=config, reportsL2IfaceStatsDropEvents=reportsL2IfaceStatsDropEvents, reportsL2IfaceStatsMulticastPkts=reportsL2IfaceStatsMulticastPkts, dm9225_E=dm9225_E, sysIntfEntry=sysIntfEntry, configL2IfaceDefaultVID=configL2IfaceDefaultVID, reportsL2IfaceIfOutDiscards=reportsL2IfaceIfOutDiscards, vol4000=vol4000, doorStatusChange=doorStatusChange, reportsHardwareDoorStatus=reportsHardwareDoorStatus, reportsL2IfaceEntry=reportsL2IfaceEntry, t5c_24TRouter=t5c_24TRouter, sysManufacturing=sysManufacturing, t5g=t5g, tMarc_340WD=tMarc_340WD, edgeGate201=edgeGate201, t5c_48TRouter=t5c_48TRouter, tMarc_380_E=tMarc_380_E, configL2IfaceDuplexSpeedSet=configL2IfaceDuplexSpeedSet, reportsIfJackIndex=reportsIfJackIndex, vol5000=vol5000, tMarc_340WD_B=tMarc_340WD_B, reportsL2IfaceStatsUndersizePkts=reportsL2IfaceStatsUndersizePkts, sysSlotNo=sysSlotNo, v24s=v24s, fanStatusChange=fanStatusChange, sysProductsOids=sysProductsOids, tpf=tpf, router=router, prvt_products=prvt_products, reportsHardware=reportsHardware, switch=switch, sysIntfModule=sysIntfModule, tMarc_340_E=tMarc_340_E, tMarc_250=tMarc_250, trclam=trclam, t4Router=t4Router, tMarc_380_EW=tMarc_380_EW, t5c_24MRouter=t5c_24MRouter, as9215=as9215, reportsL2IfaceStatsFragments=reportsL2IfaceStatsFragments, ModuleHwType=ModuleHwType, sysSwitchingHW=sysSwitchingHW, tMarc_WDB=tMarc_WDB, reportsL2IfaceIfInOctets=reportsL2IfaceIfInOctets, sysIntf=sysIntf, configL2IfaceBackpressure=configL2IfaceBackpressure, reportsHardwarePSVoltage=reportsHardwarePSVoltage, edgeLinkT5=edgeLinkT5, t5RNRouter=t5RNRouter, edgeGate232=edgeGate232, reportsL2IfaceStatsOctets=reportsL2IfaceStatsOctets, t6Router=t6Router, bridge=bridge, t5c_24GRouter=t5c_24GRouter, sysIntfUnitExist=sysIntfUnitExist, configL2IfaceRemoteFaultDetect=configL2IfaceRemoteFaultDetect, configL2=configL2, tMetro_200S=tMetro_200S, tps=tps, configL2IfaceSpeedSet=configL2IfaceSpeedSet, reportsHardwareTemperature=reportsHardwareTemperature, reportsL2IfaceIfInErrors=reportsL2IfaceIfInErrors, fI_Ethernet=fI_Ethernet, edgeGate231=edgeGate231, sysPartNumber=sysPartNumber, ipSwitch=ipSwitch, t5ProRouter=t5ProRouter, sysSerialNumber=sysSerialNumber, configL2IfaceMtu=configL2IfaceMtu, tMarc_340=tMarc_340, reportsL2IfaceStatsBroadcastPkts=reportsL2IfaceStatsBroadcastPkts, reportsL2IfaceUnit=reportsL2IfaceUnit, reportsL2IfaceStatsPkts512to1023Octets=reportsL2IfaceStatsPkts512to1023Octets, alcatel_7250=alcatel_7250, aHUB1_A=aHUB1_A, compact=compact, configL2IfaceSlot=configL2IfaceSlot, reportsL2IfaceTable=reportsL2IfaceTable, configL2IfacePort=configL2IfacePort, tMarc_380=tMarc_380, configL2IfaceBroadcastRateLimit=configL2IfaceBroadcastRateLimit, configL2IfaceAdminCrossOver=configL2IfaceAdminCrossOver, sysCLEI=sysCLEI, reportsL2IfaceTXOctetsNoErr=reportsL2IfaceTXOctetsNoErr, sysSwitchModel=sysSwitchModel, tMarc_340_F=tMarc_340_F, reportsL2IfaceRXOctetsNoErr=reportsL2IfaceRXOctetsNoErr, acs25L4282=acs25L4282, ac500=ac500, t5cgt=t5cgt, tMarc_E=tMarc_E, sysHwRevision=sysHwRevision, reportsL2IfaceIfInNUcastPkts=reportsL2IfaceIfInNUcastPkts, reportsL2IfaceIfOutUcastPkts=reportsL2IfaceIfOutUcastPkts, configL2IfaceUnit=configL2IfaceUnit, edgeGate281SYS=edgeGate281SYS, reportsIfJackTable=reportsIfJackTable, reportsL2IfaceSlot=reportsL2IfaceSlot, configL2IfaceUnknownRateLimit=configL2IfaceUnknownRateLimit, dm9234=dm9234, configL2IfaceResetCounters=configL2IfaceResetCounters, configL2TopologyChangeDetection=configL2TopologyChangeDetection, dm9225=dm9225, configL2IfaceSTPEnable=configL2IfaceSTPEnable, reportsL2IfaceRXPacketsNoErr=reportsL2IfaceRXPacketsNoErr, edgeGate482S=edgeGate482S, reportsL2IfaceStatsPkts256to511Octets=reportsL2IfaceStatsPkts256to511Octets, configL2IfaceEntry=configL2IfaceEntry, reportsL2IfaceType=reportsL2IfaceType, reportsL2IfaceIfOutNUcastPkts=reportsL2IfaceIfOutNUcastPkts, sys=sys, t5c_XG=t5c_XG, prvtSwitchNotificationGroup=prvtSwitchNotificationGroup, as9205_F=as9205_F, reports=reports, sysSwitchSeries=sysSwitchSeries, tMarc_F=tMarc_F, t5Router=t5Router, edgeLinkT4=edgeLinkT4, reportsHardwareTemperatureScale=reportsHardwareTemperatureScale, reportsL2IfaceStatsPkts65to127Octets=reportsL2IfaceStatsPkts65to127Octets, t5c_24GTRouter=t5c_24GTRouter, alcatel_7250_ES=alcatel_7250_ES, sysIntfTable=sysIntfTable, reportsL2=reportsL2, reportsL2IfaceLink=reportsL2IfaceLink, configL2IfaceFlow=configL2IfaceFlow, reportsL2IfaceStatsCRCAlignErrors=reportsL2IfaceStatsCRCAlignErrors, reportsL2IfaceStatsCollisions=reportsL2IfaceStatsCollisions, cpuTemperatureExceeded=cpuTemperatureExceeded, titan=titan, edgeGate282=edgeGate282, alcatel_7250_ESA=alcatel_7250_ESA, reportsL2IfaceHWType=reportsL2IfaceHWType, reportsHardwareTemperatureHighLimit=reportsHardwareTemperatureHighLimit, t5c=t5c, configL2IfaceUnknownBurstSize=configL2IfaceUnknownBurstSize, reportsL2IfacePort=reportsL2IfacePort, acs25L4282t5=acs25L4282t5, reportsL2IfaceStatsJabbers=reportsL2IfaceStatsJabbers, edgeGate281=edgeGate281, edgeGate483S=edgeGate483S, reportsL2IfaceIfOutOctets=reportsL2IfaceIfOutOctets, prvtSwitchMIBGroups=prvtSwitchMIBGroups, powerSupplyStatusChange=powerSupplyStatusChange, t5c_24FRouter=t5c_24FRouter, configL2IfaceBroadcastBurstSize=configL2IfaceBroadcastBurstSize, edgeGate483D=edgeGate483D, rptr=rptr, reportsL2IfaceActiveJackIndex=reportsL2IfaceActiveJackIndex, ac505=ac505, configL2IfaceMulticastBurstSize=configL2IfaceMulticastBurstSize, reportsL2IfaceTXPacketsNoErr=reportsL2IfaceTXPacketsNoErr, reportsL2IfaceStatsPkts=reportsL2IfaceStatsPkts, bI_Ethernet=bI_Ethernet, reportsHardwarePSStatus=reportsHardwarePSStatus, configL2SpanOnOff=configL2SpanOnOff, tMetro_ES=tMetro_ES, prvtSwitchNotifications=prvtSwitchNotifications, portRedundantLinkChange=portRedundantLinkChange, UnitIndex=UnitIndex, reportsL2IfaceStatsOversizePkts=reportsL2IfaceStatsOversizePkts, reportsL2IfaceStatsPkts64Octets=reportsL2IfaceStatsPkts64Octets, portSecurityViolation=portSecurityViolation, configL2IfaceMulticastRateLimit=configL2IfaceMulticastRateLimit, prvtLogNotifyFull=prvtLogNotifyFull, configL2IfaceTable=configL2IfaceTable, tMarc_EW=tMarc_EW, bsw=bsw, edgeGate282S=edgeGate282S, sysIntfModuleChange=sysIntfModuleChange, titant5=titant5, reportsL2IfaceIfInDiscards=reportsL2IfaceIfInDiscards, reportsHardwareFanStatus=reportsHardwareFanStatus, t6pro_lc_20G=t6pro_lc_20G, prvtSwitchMib=prvtSwitchMib, configL2IfaceDuplexModeSet=configL2IfaceDuplexModeSet, reportsIfJack=reportsIfJack, reportsL2IfaceIfInUnknownProtos=reportsL2IfaceIfInUnknownProtos, prvtSwitchConformance=prvtSwitchConformance, tMarc_254=tMarc_254, configL2IfaceName=configL2IfaceName, reportsL2IfaceStatsPkts128to255Octets=reportsL2IfaceStatsPkts128to255Octets, reportsIfJackType=reportsIfJackType, tMarc_280=tMarc_280, reportsL2IfaceDuplexSpeedGet=reportsL2IfaceDuplexSpeedGet, reportsL2IfaceStatsPkts1024to1518Octets=reportsL2IfaceStatsPkts1024to1518Octets, test=test, titanPro=titanPro, tMetro=tMetro, tMarc=tMarc, reportsL2IfaceIfInUcastPkts=reportsL2IfaceIfInUcastPkts, Series=Series, PYSNMP_MODULE_ID=prvtSwitchMib, sysAssemblyNumber=sysAssemblyNumber, prvt_mgmt=prvt_mgmt, sysManufacturingDate=sysManufacturingDate, sysStackNo=sysStackNo, t6pro_cpm=t6pro_cpm)
