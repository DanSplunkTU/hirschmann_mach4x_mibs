#
# PySNMP MIB module ALCATEL-IND1-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-SYSTEM-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:27 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
hardentIND1System, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1System")
VirtualOperChassisId, virtualChassisOperChasId = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "VirtualOperChassisId", "virtualChassisOperChasId")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, ObjectIdentity, Counter64, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, IpAddress, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
alcatelIND1SystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1))
alcatelIND1SystemMIB.setRevisions(('2011-01-23 00:00',))
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setLastUpdated('200709040000Z')
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setOrganization('Alcatel-Lucent')
alcatelIND1SystemMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1))
if mibBuilder.loadTexts: alcatelIND1SystemMIBObjects.setStatus('current')
alcatelIND1SystemMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2))
if mibBuilder.loadTexts: alcatelIND1SystemMIBConformance.setStatus('current')
alcatelIND1SystemMIBTrapObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 3))
if mibBuilder.loadTexts: alcatelIND1SystemMIBTrapObjects.setStatus('current')
alcatelIND1SystemMIBTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 4))
if mibBuilder.loadTexts: alcatelIND1SystemMIBTraps.setStatus('current')
alcatelIND1SystemMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1SystemMIBGroups.setStatus('current')
alcatelIND1SystemMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1SystemMIBCompliances.setStatus('current')
class SystemFileType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("file", 1), ("directory", 2), ("undefined", 3), ("tarArchive", 4))

class SwitchLoggingIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("console", 1), ("flash", 2), ("socket", 3), ("ipaddr", 4))

class AppIdIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 254)

class Enable(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class FileSystemIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("flash", 1), ("uflash", 2))

class SeverityLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("severityLevelOff", 0), ("severityLevelAlarm", 1), ("severityLevelError", 2), ("severityLevelAlert", 3), ("severityLevelWarn", 4), ("severityLevelInfo", 5), ("severityLevelDbg1", 6), ("severityLevelDbg2", 7), ("severityLevelDbg3", 8))

class SysLogFacilityId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("uucp", 0), ("user", 1), ("system", 2), ("syslog", 3), ("secAuth2", 4), ("secAuth1", 5), ("ntp", 6), ("netNews", 7), ("mail", 8), ("lptr", 9), ("logAudit", 10), ("logAlert", 11), ("local7", 12), ("local6", 13), ("local5", 14), ("local4", 15), ("local3", 16), ("local2", 17), ("local1", 18), ("local0", 19), ("kernel", 20), ("ftp", 21), ("clock2", 22), ("clock1", 23))

class CommandPercentComplete(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class VrfId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class AgeLimit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

systemMicrocode = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1))
systemBootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2))
systemHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3))
systemFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4))
systemServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5))
systemSwitchLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6))
systemDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7))
systemBlueToothServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8))
systemFips = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9))
systemVcHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10))
systemMicrocodePackageTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: systemMicrocodePackageTable.setStatus('current')
systemMicrocodePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDirectoryIndex"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDirectory"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageIndex"))
if mibBuilder.loadTexts: systemMicrocodePackageEntry.setStatus('current')
systemMicrocodePackageDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodePackageDirectoryIndex.setStatus('current')
systemMicrocodePackageDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 108)))
if mibBuilder.loadTexts: systemMicrocodePackageDirectory.setStatus('current')
systemMicrocodePackageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodePackageIndex.setStatus('current')
systemMicrocodePackageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageVersion.setStatus('current')
systemMicrocodePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageName.setStatus('current')
systemMicrocodePackageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageDescription.setStatus('current')
systemMicrocodePackageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("ok", 2), ("inuse", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageStatus.setStatus('current')
systemMicrocodePackageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageSize.setStatus('current')
systemMicrocodeLoadedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: systemMicrocodeLoadedTable.setStatus('current')
systemMicrocodeLoadedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedIndex"))
if mibBuilder.loadTexts: systemMicrocodeLoadedEntry.setStatus('current')
systemMicrocodeLoadedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodeLoadedIndex.setStatus('current')
systemMicrocodeLoadedDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 108))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedDirectory.setStatus('current')
systemMicrocodeLoadedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedVersion.setStatus('current')
systemMicrocodeLoadedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedName.setStatus('current')
systemMicrocodeLoadedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedDescription.setStatus('current')
systemMicrocodeLoadedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedSize.setStatus('current')
systemBootNetwork = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetwork.setStatus('current')
systemBootNetworkGateway = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetworkGateway.setStatus('current')
systemBootNetworkNetmask = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetworkNetmask.setStatus('current')
systemHardwareFlashMfg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("sandisk", 8), ("sst", 9), ("spansion", 10), ("wintec", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFlashMfg.setStatus('current')
systemHardwareFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFlashSize.setStatus('current')
systemHardwareMemoryMfg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("agilent", 8), ("dataram", 10), ("interward", 11), ("notreadable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMemoryMfg.setStatus('current')
systemHardwareMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMemorySize.setStatus('current')
systemHardwareNVRAMBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareNVRAMBatteryLow.setStatus('current')
systemHardwareBootCpuType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("sparc380", 2), ("sparcV9", 3), ("ppc", 4), ("ppc8540", 5), ("ppc8572", 6), ("arm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBootCpuType.setStatus('current')
systemHardwareJumperInterruptBoot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperInterruptBoot.setStatus('current')
systemHardwareJumperForceUartDefaults = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperForceUartDefaults.setStatus('current')
systemHardwareJumperRunExtendedMemoryDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperRunExtendedMemoryDiagnostics.setStatus('current')
systemHardwareJumperSpare = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperSpare.setStatus('current')
systemHardwareFpgaVersionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11), )
if mibBuilder.loadTexts: systemHardwareFpgaVersionTable.setStatus('current')
systemHardwareFpgaVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersionIndex"))
if mibBuilder.loadTexts: systemHardwareFpgaVersionEntry.setStatus('current')
systemHardwareFpgaVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFpgaVersionIndex.setStatus('current')
systemHardwareFpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFpgaVersion.setStatus('current')
systemHardwareBootRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBootRomVersion.setStatus('current')
systemHardwareBackupMiniBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBackupMiniBootVersion.setStatus('current')
systemHardwareDefaultMiniBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareDefaultMiniBootVersion.setStatus('current')
systemHardwareMinorFpgaVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMinorFpgaVersion.setStatus('current')
systemHardwareCpldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareCpldVersion.setStatus('current')
systemHardwareUbootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareUbootVersion.setStatus('current')
systemHardwareProdRegId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareProdRegId.setStatus('current')
systemHardwareRevisionRegister = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareRevisionRegister.setStatus('current')
systemHardwareXfpId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareXfpId.setStatus('current')
systemHardwareUbootMinibootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareUbootMinibootVersion.setStatus('current')
systemServicesDate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesDate.setStatus('current')
systemServicesTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTime.setStatus('current')
systemServicesTimezone = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezone.setStatus('current')
systemServicesTimezoneStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartWeek.setStatus('current')
systemServicesTimezoneStartDay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartDay.setStatus('current')
systemServicesTimezoneStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartMonth.setStatus('current')
systemServicesTimezoneStartTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartTime.setStatus('current')
systemServicesTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneOffset.setStatus('current')
systemServicesTimezoneEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndWeek.setStatus('current')
systemServicesTimezoneEndDay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndDay.setStatus('current')
systemServicesTimezoneEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndMonth.setStatus('current')
systemServicesTimezoneEndTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndTime.setStatus('current')
systemServicesEnableDST = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 13), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesEnableDST.setStatus('current')
systemServicesWorkingDirectory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesWorkingDirectory.setStatus('current')
systemServicesArg1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg1.setStatus('current')
systemServicesArg2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg2.setStatus('current')
systemServicesArg3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg3.setStatus('current')
systemServicesArg4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg4.setStatus('current')
systemServicesArg5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg5.setStatus('current')
systemServicesArg6 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg6.setStatus('current')
systemServicesArg7 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg7.setStatus('current')
systemServicesArg8 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg8.setStatus('current')
systemServicesArg9 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg9.setStatus('current')
systemServicesAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))).clone(namedValues=NamedValues(("noaction", 0), ("mkdir", 1), ("rmdir", 2), ("mv", 3), ("rm", 4), ("rmr", 5), ("cp", 6), ("cpr", 7), ("chmodpw", 8), ("chmodmw", 9), ("fsck", 10), ("ftp", 11), ("rz", 12), ("vi", 13), ("telnet", 14), ("install", 15), ("ed", 16), ("more", 17), ("newfs", 18), ("dshell", 19), ("view", 20), ("modbootparams", 21), ("filedir", 22), ("ssh", 23), ("sftp", 24), ("debugPmdNi", 25), ("bootrom", 26), ("defaultminiboot", 27), ("backupminiboot", 28), ("fpgacmm", 29), ("ubootcmm", 30), ("ubootni", 31), ("scp", 32), ("aclman", 33), ("ubootMinibootAllSlots", 34), ("miniboot", 35), ("upgradeLicence", 36), ("restoreLicence", 37), ("updateDSineXtroller", 38), ("ftp6", 39), ("telnet6", 40), ("ssh6", 41), ("sftp6", 42), ("mount", 43), ("unmount", 44), ("backup", 45), ("restore", 46), ("tftp", 47), ("fscollect", 48), ("fpgani", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesAction.setStatus('current')
systemServicesResultCode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesResultCode.setStatus('current')
systemServicesResultString = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesResultString.setStatus('current')
systemServicesKtraceEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 27), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesKtraceEnable.setStatus('obsolete')
systemServicesSystraceEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 28), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesSystraceEnable.setStatus('obsolete')
systemServicesTtyLines = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesTtyLines.setStatus('current')
systemServicesTtyColumns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesTtyColumns.setStatus('current')
systemServicesMemMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 31), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesMemMonitorEnable.setStatus('current')
systemServicesKtraceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32), )
if mibBuilder.loadTexts: systemServicesKtraceLevelTable.setStatus('obsolete')
systemServicesKtraceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevelAppId"))
if mibBuilder.loadTexts: systemServicesKtraceLevelEntry.setStatus('obsolete')
systemServicesKtraceLevelAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesKtraceLevelAppId.setStatus('obsolete')
systemServicesKtraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1, 2), SeverityLevel().clone('severityLevelDbg3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesKtraceLevel.setStatus('obsolete')
systemServicesSystraceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33), )
if mibBuilder.loadTexts: systemServicesSystraceLevelTable.setStatus('obsolete')
systemServicesSystraceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevelAppId"))
if mibBuilder.loadTexts: systemServicesSystraceLevelEntry.setStatus('obsolete')
systemServicesSystraceLevelAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesSystraceLevelAppId.setStatus('obsolete')
systemServicesSystraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1, 2), SeverityLevel().clone('severityLevelDbg3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesSystraceLevel.setStatus('obsolete')
systemUpdateStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34), )
if mibBuilder.loadTexts: systemUpdateStatusTable.setStatus('current')
systemUpdateStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemUpdateIndex"))
if mibBuilder.loadTexts: systemUpdateStatusEntry.setStatus('current')
systemUpdateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: systemUpdateIndex.setStatus('current')
systemUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("doneOk", 2), ("doneNok", 3), ("noOp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpdateStatus.setStatus('current')
systemUpdateErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("msgSendIpcErr", 1), ("fXferOPenErr", 2), ("fXferFtpErr", 3), ("fXferReadErr", 4), ("fXferWriteErr", 5), ("fXferReplyErr", 6), ("fXferQuitErr", 7), ("fXferFcloseErr", 8), ("fileNameErr", 9), ("rmFileErr", 10), ("noInstallComp", 11), ("notSysResource", 12), ("notSupported", 13), ("invalidValue", 14), ("waitMsgMaxTry", 15), ("installDrvErr", 16), ("fileNotFound", 17), ("notPrimary", 18), ("commandBlocked", 19), ("noError", 20), ("invalidNi", 21), ("niNotPresent", 22), ("dupSerialNum", 23), ("upToDate", 24), ("invalidModType", 25), ("maxFaiCount", 26), ("invalidKey", 27), ("niLocked", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpdateErrorCode.setStatus('current')
systemServicesActionPercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 35), CommandPercentComplete()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesActionPercentComplete.setStatus('current')
systemServicesCurrentArchivePathName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesCurrentArchivePathName.setStatus('current')
systemServicesArchiveTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37), )
if mibBuilder.loadTexts: systemServicesArchiveTable.setStatus('current')
systemServicesArchiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveIndex"))
if mibBuilder.loadTexts: systemServicesArchiveEntry.setStatus('current')
systemServicesArchiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveIndex.setStatus('current')
systemServicesArchiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveName.setStatus('current')
systemServicesArchiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 3), SystemFileType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveType.setStatus('current')
systemServicesArchiveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveSize.setStatus('current')
systemServicesArchiveAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveAttr.setStatus('current')
systemServicesUsbEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableasync", 1), ("disable", 2), ("enablesync", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesUsbEnable.setStatus('current')
systemServicesUsbAutoCopyEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 39), Enable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesUsbAutoCopyEnable.setStatus('current')
systemServicesUsbMounted = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 40), Enable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesUsbMounted.setStatus('current')
systemFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: systemFileSystemTable.setStatus('current')
systemFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemIndex"))
if mibBuilder.loadTexts: systemFileSystemEntry.setStatus('current')
systemFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1), FileSystemIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemIndex.setStatus('current')
systemFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemName.setStatus('current')
systemFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFreeSpace.setStatus('current')
systemFileSystemDirectoryName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileSystemDirectoryName.setStatus('current')
systemFileSystemDirectoryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemDirectoryDateTime.setStatus('current')
systemFileSystemFileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: systemFileSystemFileTable.setStatus('current')
systemFileSystemFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileIndex"))
if mibBuilder.loadTexts: systemFileSystemFileEntry.setStatus('current')
systemFileSystemFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileIndex.setStatus('current')
systemFileSystemFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileName.setStatus('current')
systemFileSystemFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 3), SystemFileType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileType.setStatus('current')
systemFileSystemFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileSize.setStatus('current')
systemFileSystemFileAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileAttr.setStatus('current')
systemFileSystemFileDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileDateTime.setStatus('current')
systemSwitchLoggingIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 1), SwitchLoggingIndex().clone('flash')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingIndex.setStatus('current')
systemSwitchLoggingEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 2), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingEnable.setStatus('current')
systemSwitchLoggingFlash = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 3), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingFlash.setStatus('current')
systemSwitchLoggingSocket = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 4), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSocket.setStatus('current')
systemSwitchLoggingSocketIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSocketIpAddr.setStatus('deprecated')
systemSwitchLoggingConsole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 6), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingConsole.setStatus('current')
systemSwitchLoggingApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7), )
if mibBuilder.loadTexts: systemSwitchLoggingApplicationTable.setStatus('current')
systemSwitchLoggingLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppId"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppId"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelIndex"))
if mibBuilder.loadTexts: systemSwitchLoggingLevelEntry.setStatus('current')
systemSwitchLoggingApplicationAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppId.setStatus('current')
systemSwitchLoggingApplicationSubAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 2), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppId.setStatus('current')
systemSwitchLoggingApplicationSubAppVrfLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelIndex.setStatus('current')
systemSwitchLoggingApplicationAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppName.setStatus('current')
systemSwitchLoggingApplicationSubAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppName.setStatus('current')
systemSwitchLoggingApplicationSubAppLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 6), SeverityLevel().clone('severityLevelOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppLevel.setStatus('current')
systemSwitchLoggingApplicationSubAppVrfLevelString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelString.setStatus('current')
systemSwitchLoggingClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingClear.setStatus('current')
systemSwitchLoggingFileSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingFileSize.setStatus('current')
systemSwitchLoggingHostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10), )
if mibBuilder.loadTexts: systemSwitchLoggingHostTable.setStatus('current')
systemSwitchLoggingHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostIpAddr"))
if mibBuilder.loadTexts: systemSwitchLoggingHostEntry.setStatus('current')
systemSwitchLoggingHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostIpAddr.setStatus('current')
systemSwitchLoggingHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostPort.setStatus('current')
systemSwitchLoggingHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostStatus.setStatus('current')
systemSwitchLoggingHostUserCommandHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 4), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostUserCommandHost.setStatus('current')
systemSwitchLoggingHostVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostVrfName.setStatus('current')
systemSwitchLoggingHostv6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11), )
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Table.setStatus('current')
systemSwitchLoggingHostv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6IpAddr"))
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Entry.setStatus('current')
systemSwitchLoggingHostv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6IpAddr.setStatus('current')
systemSwitchLoggingHostv6Port = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Port.setStatus('current')
systemSwitchLoggingHostv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Status.setStatus('current')
systemSwitchLoggingHostv6UserCommandHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 4), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6UserCommandHost.setStatus('current')
systemSwitchLoggingHostv6VrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6VrfName.setStatus('current')
systemSwitchLoggingHostCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostCount.setStatus('current')
systemSwitchLoggingConsoleLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 13), SeverityLevel().clone('severityLevelWarn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingConsoleLevel.setStatus('current')
systemSwitchLoggingUserCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 14), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingUserCommandStatus.setStatus('current')
systemSwitchLoggingSysLogFacilityId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 15), SysLogFacilityId().clone('uucp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSysLogFacilityId.setStatus('current')
systemSwitchLoggingLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 16), SeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLevel.setStatus('current')
systemSwitchLoggingAppName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingAppName.setStatus('current')
systemSwitchLoggingDuplicateDetect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 18), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingDuplicateDetect.setStatus('current')
systemSwitchLoggingPreamble = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 19), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingPreamble.setStatus('current')
systemSwitchLoggingDebug = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 20), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingDebug.setStatus('current')
systemSwitchLoggingVrf = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 21), VrfId().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingVrf.setStatus('current')
systemSwitchLoggingHashAgeLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 22), AgeLimit().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingHashAgeLimit.setStatus('current')
systemSwitchLoggingTty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 23), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingTty.setStatus('current')
systemSwitchLoggingSubAppNbr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 24), AppIdIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSubAppNbr.setStatus('current')
systemSwitchLoggingLibraryName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLibraryName.setStatus('current')
systemSwitchLoggingLoopback0 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 26), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLoopback0.setStatus('current')
systemSwitchLoggingDgHostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27), )
if mibBuilder.loadTexts: systemSwitchLoggingDgHostTable.setStatus('current')
systemSwitchLoggingDgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIndex"))
if mibBuilder.loadTexts: systemSwitchLoggingDgHostEntry.setStatus('current')
systemSwitchLoggingDgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1))
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIndex.setStatus('current')
systemSwitchLoggingDgHostIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpType.setStatus('current')
systemSwitchLoggingDgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpAddr.setStatus('current')
systemDNSEnableDnsResolver = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 1), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSEnableDnsResolver.setStatus('current')
systemDNSDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSDomainName.setStatus('current')
systemDNSNsAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr1.setStatus('current')
systemDNSNsAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr2.setStatus('current')
systemDNSNsAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr3.setStatus('current')
systemDNSNsIPv6Addr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 6), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr1.setStatus('current')
systemDNSNsIPv6Addr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 7), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr2.setStatus('current')
systemDNSNsIPv6Addr3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 8), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr3.setStatus('current')
systemServicesBluetoothEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 1), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesBluetoothEnable.setStatus('current')
systemServicesBluetoothTxPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesBluetoothTxPower.setStatus('current')
systemServicesBluetoothTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3), )
if mibBuilder.loadTexts: systemServicesBluetoothTable.setStatus('current')
systemServicesBluetoothEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothChassisId"))
if mibBuilder.loadTexts: systemServicesBluetoothEntry.setStatus('current')
systemServicesBluetoothChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1, 1), VirtualOperChassisId())
if mibBuilder.loadTexts: systemServicesBluetoothChassisId.setStatus('current')
systemServicesBluetoothStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("connectionInactive", 2), ("connectionActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesBluetoothStatus.setStatus('current')
systemFipsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9, 1), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFipsAdminState.setStatus('current')
systemFipsOperState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9, 2), Enable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFipsOperState.setStatus('current')
systemVcHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: systemVcHardwareTable.setStatus('current')
systemVcHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "virtualChassisOperChasId"))
if mibBuilder.loadTexts: systemVcHardwareEntry.setStatus('current')
systemVcHardwareCpuVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCpuVendor.setStatus('current')
systemVcHardwareCpuModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCpuModel.setStatus('current')
systemVcHardwareFlashMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("sandisk", 8), ("sst", 9), ("spansion", 10), ("wintec", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFlashMfg.setStatus('current')
systemVcHardwareFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFlashSize.setStatus('current')
systemVcHardwareMemoryMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("agilent", 8), ("dataram", 10), ("interward", 11), ("notreadable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareMemoryMfg.setStatus('current')
systemVcHardwareMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareMemorySize.setStatus('current')
systemVcHardwareUbootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareUbootVersion.setStatus('current')
systemVcHardwareFpga1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFpga1Version.setStatus('current')
systemVcHardwareFpga2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFpga2Version.setStatus('current')
systemVcHardwarePowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 10), Bits().clone(namedValues=NamedValues(("ps1", 0), ("ps2", 1), ("ps3", 2), ("ps4", 3), ("ps5", 4), ("ps6", 5), ("ps7", 6), ("ps8", 7), ("ps9", 8), ("ps10", 9), ("ps11", 10), ("ps12", 11), ("ps13", 12), ("ps14", 13), ("ps15", 14), ("ps16", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwarePowerSuppliesPresent.setStatus('current')
systemVcHardwareNisPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 11), Bits().clone(namedValues=NamedValues(("ni1", 0), ("ni2", 1), ("ni3", 2), ("ni4", 3), ("ni5", 4), ("ni6", 5), ("ni7", 6), ("ni8", 7), ("ni9", 8), ("ni10", 9), ("ni11", 10), ("ni12", 11), ("ni13", 12), ("ni14", 13), ("ni15", 14), ("ni16", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareNisPresent.setStatus('current')
systemVcHardwareCFMsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 12), Bits().clone(namedValues=NamedValues(("cfm1", 0), ("cfm2", 1), ("cfm3", 2), ("cfm4", 3), ("cfm5", 4), ("cfm6", 5), ("cfm7", 6), ("cfm8", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCFMsPresent.setStatus('current')
systemVcHardwareFanTraysPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 13), Bits().clone(namedValues=NamedValues(("fanTray1", 0), ("fanTray2", 1), ("fanTray3", 2), ("fanTray4", 3), ("fanTray5", 4), ("fanTray6", 5), ("fanTray7", 6), ("fanTray8", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFanTraysPresent.setStatus('current')
systemSwlogName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwlogName.setStatus('current')
systemSwlogSizeTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 4, 0, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogName"))
if mibBuilder.loadTexts: systemSwlogSizeTrap.setStatus('current')
alcatelIND1SystemMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootParamsGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBlueToothServicesGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFipsGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1SystemMIBCompliance = alcatelIND1SystemMIBCompliance.setStatus('current')
systemMicrocodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDescription"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedDirectory"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedDescription"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMicrocodeGroup = systemMicrocodeGroup.setStatus('current')
systemBootParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetwork"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetworkGateway"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetworkNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemBootParamsGroup = systemBootParamsGroup.setStatus('current')
systemHardwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFlashMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFlashSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMemoryMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMemorySize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareNVRAMBatteryLow"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBootCpuType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperInterruptBoot"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperForceUartDefaults"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperRunExtendedMemoryDiagnostics"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperSpare"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersionIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBootRomVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareDefaultMiniBootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBackupMiniBootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareCpldVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMinorFpgaVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareProdRegId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareRevisionRegister"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareUbootMinibootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareUbootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareXfpId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemHardwareGroup = systemHardwareGroup.setStatus('current')
systemServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezone"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartWeek"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartDay"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartMonth"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneOffset"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndWeek"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndDay"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndMonth"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesEnableDST"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesWorkingDirectory"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg3"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg4"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg5"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg6"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg7"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg8"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg9"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesAction"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesResultCode"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesResultString"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTtyLines"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTtyColumns"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesMemMonitorEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevelAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevelAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemUpdateStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemUpdateErrorCode"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesActionPercentComplete"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveAttr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbAutoCopyEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbMounted"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesCurrentArchivePathName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemServicesGroup = systemServicesGroup.setStatus('current')
systemFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFreeSpace"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemDirectoryName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemDirectoryDateTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileAttr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemFileSystemGroup = systemFileSystemGroup.setStatus('current')
systemSwitchLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingFlash"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSocket"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSocketIpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingConsole"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingClear"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingFileSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelString"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDuplicateDetect"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingPreamble"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDebug"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingVrf"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHashAgeLimit"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingTty"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSubAppNbr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLibraryName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLoopback0"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingConsoleLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostCount"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingUserCommandStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSysLogFacilityId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostIpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostPort"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostUserCommandHost"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostVrfName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6IpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6Port"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6Status"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6UserCommandHost"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6VrfName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIpType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemSwitchLoggingGroup = systemSwitchLoggingGroup.setStatus('current')
systemDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemDNSEnableDnsResolver"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSDomainName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr3"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemDNSGroup = systemDNSGroup.setStatus('current')
systemBlueToothServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothTxPower"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemBlueToothServicesGroup = systemBlueToothServicesGroup.setStatus('current')
systemFipsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemFipsAdminState"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFipsOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemFipsGroup = systemFipsGroup.setStatus('current')
systemVcHardwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCpuVendor"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCpuModel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFlashMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFlashSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareMemoryMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareMemorySize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareUbootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFpga1Version"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFpga2Version"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwarePowerSuppliesPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareNisPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCFMsPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFanTraysPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemVcHardwareGroup = systemVcHardwareGroup.setStatus('current')
systemSwlogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemSwlogGroup = systemSwlogGroup.setStatus('current')
systemNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogSizeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemNotificationGroup = systemNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-SYSTEM-MIB", systemVcHardwareFlashMfg=systemVcHardwareFlashMfg, systemHardwareFlashSize=systemHardwareFlashSize, systemMicrocodePackageTable=systemMicrocodePackageTable, SystemFileType=SystemFileType, systemVcHardwareFanTraysPresent=systemVcHardwareFanTraysPresent, systemHardwareJumperRunExtendedMemoryDiagnostics=systemHardwareJumperRunExtendedMemoryDiagnostics, systemHardwareCpldVersion=systemHardwareCpldVersion, systemServicesArchiveType=systemServicesArchiveType, systemFileSystemFileIndex=systemFileSystemFileIndex, systemSwitchLoggingSocket=systemSwitchLoggingSocket, systemServicesTime=systemServicesTime, alcatelIND1SystemMIBTrapObjects=alcatelIND1SystemMIBTrapObjects, systemSwitchLoggingSubAppNbr=systemSwitchLoggingSubAppNbr, systemSwitchLoggingApplicationAppId=systemSwitchLoggingApplicationAppId, systemVcHardwareMemoryMfg=systemVcHardwareMemoryMfg, systemSwitchLoggingHostTable=systemSwitchLoggingHostTable, AgeLimit=AgeLimit, systemSwitchLoggingHostVrfName=systemSwitchLoggingHostVrfName, systemMicrocodePackageDescription=systemMicrocodePackageDescription, systemFileSystemFileDateTime=systemFileSystemFileDateTime, systemServicesKtraceLevelAppId=systemServicesKtraceLevelAppId, systemServicesArg5=systemServicesArg5, systemServicesTimezoneEndWeek=systemServicesTimezoneEndWeek, systemServicesSystraceLevelTable=systemServicesSystraceLevelTable, systemUpdateStatusEntry=systemUpdateStatusEntry, systemFipsAdminState=systemFipsAdminState, systemSwitchLoggingDuplicateDetect=systemSwitchLoggingDuplicateDetect, systemServicesArg3=systemServicesArg3, systemHardwareUbootVersion=systemHardwareUbootVersion, systemSwitchLoggingHostUserCommandHost=systemSwitchLoggingHostUserCommandHost, systemVcHardwareGroup=systemVcHardwareGroup, systemHardwareUbootMinibootVersion=systemHardwareUbootMinibootVersion, systemFileSystem=systemFileSystem, systemSwitchLoggingHostStatus=systemSwitchLoggingHostStatus, systemUpdateErrorCode=systemUpdateErrorCode, systemServicesBluetoothTable=systemServicesBluetoothTable, systemFileSystemFileTable=systemFileSystemFileTable, systemMicrocodePackageDirectory=systemMicrocodePackageDirectory, systemSwitchLoggingLibraryName=systemSwitchLoggingLibraryName, systemSwitchLoggingEnable=systemSwitchLoggingEnable, alcatelIND1SystemMIBGroups=alcatelIND1SystemMIBGroups, systemSwitchLoggingAppName=systemSwitchLoggingAppName, systemHardwareFpgaVersionIndex=systemHardwareFpgaVersionIndex, systemServicesArg8=systemServicesArg8, systemSwitchLoggingTty=systemSwitchLoggingTty, systemSwitchLoggingHashAgeLimit=systemSwitchLoggingHashAgeLimit, systemSwitchLoggingFileSize=systemSwitchLoggingFileSize, systemFileSystemFreeSpace=systemFileSystemFreeSpace, systemServicesArg9=systemServicesArg9, systemVcHardwareEntry=systemVcHardwareEntry, systemVcHardwareCFMsPresent=systemVcHardwareCFMsPresent, systemServicesArchiveTable=systemServicesArchiveTable, FileSystemIndex=FileSystemIndex, systemUpdateStatusTable=systemUpdateStatusTable, systemServicesBluetoothEntry=systemServicesBluetoothEntry, systemHardwareFpgaVersionEntry=systemHardwareFpgaVersionEntry, systemBootNetworkNetmask=systemBootNetworkNetmask, systemSwitchLoggingUserCommandStatus=systemSwitchLoggingUserCommandStatus, systemVcHardware=systemVcHardware, systemFipsOperState=systemFipsOperState, systemFileSystemDirectoryName=systemFileSystemDirectoryName, alcatelIND1SystemMIBCompliance=alcatelIND1SystemMIBCompliance, systemMicrocodePackageStatus=systemMicrocodePackageStatus, systemSwitchLoggingGroup=systemSwitchLoggingGroup, systemUpdateStatus=systemUpdateStatus, systemDNSEnableDnsResolver=systemDNSEnableDnsResolver, systemFips=systemFips, systemServicesArchiveName=systemServicesArchiveName, VrfId=VrfId, systemHardwareFpgaVersion=systemHardwareFpgaVersion, systemFileSystemFileType=systemFileSystemFileType, systemSwitchLoggingHostPort=systemSwitchLoggingHostPort, systemSwitchLoggingHostIpAddr=systemSwitchLoggingHostIpAddr, systemMicrocodeLoadedIndex=systemMicrocodeLoadedIndex, systemServicesTimezoneEndDay=systemServicesTimezoneEndDay, systemMicrocodeLoadedDirectory=systemMicrocodeLoadedDirectory, systemHardwareBootRomVersion=systemHardwareBootRomVersion, PYSNMP_MODULE_ID=alcatelIND1SystemMIB, systemFileSystemFileAttr=systemFileSystemFileAttr, systemSwlogName=systemSwlogName, systemServicesKtraceLevelTable=systemServicesKtraceLevelTable, systemBlueToothServicesGroup=systemBlueToothServicesGroup, systemSwitchLoggingApplicationTable=systemSwitchLoggingApplicationTable, systemServicesUsbMounted=systemServicesUsbMounted, systemSwitchLoggingSocketIpAddr=systemSwitchLoggingSocketIpAddr, systemSwitchLoggingVrf=systemSwitchLoggingVrf, systemSwitchLoggingApplicationSubAppName=systemSwitchLoggingApplicationSubAppName, systemFipsGroup=systemFipsGroup, systemSwlogGroup=systemSwlogGroup, systemMicrocodeLoadedEntry=systemMicrocodeLoadedEntry, systemSwitchLoggingDgHostTable=systemSwitchLoggingDgHostTable, systemServicesUsbAutoCopyEnable=systemServicesUsbAutoCopyEnable, systemSwitchLoggingApplicationSubAppId=systemSwitchLoggingApplicationSubAppId, systemDNSNsAddr3=systemDNSNsAddr3, systemServicesTimezoneOffset=systemServicesTimezoneOffset, systemFileSystemName=systemFileSystemName, systemSwitchLoggingDgHostIndex=systemSwitchLoggingDgHostIndex, systemNotificationGroup=systemNotificationGroup, systemBootNetworkGateway=systemBootNetworkGateway, systemServicesArchiveEntry=systemServicesArchiveEntry, systemFileSystemGroup=systemFileSystemGroup, systemUpdateIndex=systemUpdateIndex, systemHardwareDefaultMiniBootVersion=systemHardwareDefaultMiniBootVersion, systemBootNetwork=systemBootNetwork, systemHardwareMemorySize=systemHardwareMemorySize, systemMicrocodeGroup=systemMicrocodeGroup, systemSwitchLoggingConsole=systemSwitchLoggingConsole, systemHardwareBackupMiniBootVersion=systemHardwareBackupMiniBootVersion, alcatelIND1SystemMIBConformance=alcatelIND1SystemMIBConformance, systemServicesArchiveIndex=systemServicesArchiveIndex, systemServicesArg4=systemServicesArg4, systemSwitchLoggingHostv6UserCommandHost=systemSwitchLoggingHostv6UserCommandHost, systemMicrocodeLoadedName=systemMicrocodeLoadedName, systemDNSDomainName=systemDNSDomainName, Enable=Enable, systemDNSNsIPv6Addr1=systemDNSNsIPv6Addr1, systemFileSystemFileSize=systemFileSystemFileSize, systemHardwareNVRAMBatteryLow=systemHardwareNVRAMBatteryLow, systemServicesTimezoneStartDay=systemServicesTimezoneStartDay, systemSwitchLoggingApplicationSubAppLevel=systemSwitchLoggingApplicationSubAppLevel, systemSwitchLoggingApplicationSubAppVrfLevelString=systemSwitchLoggingApplicationSubAppVrfLevelString, systemSwitchLoggingConsoleLevel=systemSwitchLoggingConsoleLevel, systemMicrocodePackageEntry=systemMicrocodePackageEntry, systemServicesGroup=systemServicesGroup, systemHardwareFlashMfg=systemHardwareFlashMfg, systemServicesArchiveAttr=systemServicesArchiveAttr, systemServicesKtraceLevelEntry=systemServicesKtraceLevelEntry, systemDNSGroup=systemDNSGroup, systemServicesTimezone=systemServicesTimezone, systemFileSystemEntry=systemFileSystemEntry, systemServicesArg6=systemServicesArg6, systemSwitchLoggingHostCount=systemSwitchLoggingHostCount, systemHardwareFpgaVersionTable=systemHardwareFpgaVersionTable, systemSwitchLoggingLevelEntry=systemSwitchLoggingLevelEntry, systemVcHardwareUbootVersion=systemVcHardwareUbootVersion, systemServicesTimezoneStartMonth=systemServicesTimezoneStartMonth, systemSwitchLoggingHostv6Entry=systemSwitchLoggingHostv6Entry, SwitchLoggingIndex=SwitchLoggingIndex, systemVcHardwareTable=systemVcHardwareTable, systemServicesSystraceLevel=systemServicesSystraceLevel, systemVcHardwareFpga2Version=systemVcHardwareFpga2Version, systemSwitchLoggingClear=systemSwitchLoggingClear, CommandPercentComplete=CommandPercentComplete, systemServicesResultCode=systemServicesResultCode, AppIdIndex=AppIdIndex, systemMicrocodePackageDirectoryIndex=systemMicrocodePackageDirectoryIndex, systemServicesResultString=systemServicesResultString, systemMicrocodePackageIndex=systemMicrocodePackageIndex, systemSwitchLoggingFlash=systemSwitchLoggingFlash, systemServicesCurrentArchivePathName=systemServicesCurrentArchivePathName, systemServices=systemServices, systemServicesEnableDST=systemServicesEnableDST, systemFileSystemTable=systemFileSystemTable, systemDNS=systemDNS, systemSwitchLoggingSysLogFacilityId=systemSwitchLoggingSysLogFacilityId, systemFileSystemIndex=systemFileSystemIndex, systemServicesKtraceLevel=systemServicesKtraceLevel, systemVcHardwareMemorySize=systemVcHardwareMemorySize, systemHardware=systemHardware, systemHardwareBootCpuType=systemHardwareBootCpuType, systemServicesDate=systemServicesDate, systemHardwareJumperSpare=systemHardwareJumperSpare, systemVcHardwareFpga1Version=systemVcHardwareFpga1Version, systemHardwareMinorFpgaVersion=systemHardwareMinorFpgaVersion, alcatelIND1SystemMIBObjects=alcatelIND1SystemMIBObjects, systemDNSNsAddr2=systemDNSNsAddr2, systemHardwareXfpId=systemHardwareXfpId, systemVcHardwareCpuVendor=systemVcHardwareCpuVendor, systemSwitchLoggingDgHostIpAddr=systemSwitchLoggingDgHostIpAddr, systemFileSystemFileName=systemFileSystemFileName, systemServicesTimezoneEndMonth=systemServicesTimezoneEndMonth, SysLogFacilityId=SysLogFacilityId, systemServicesArchiveSize=systemServicesArchiveSize, systemSwitchLoggingHostv6VrfName=systemSwitchLoggingHostv6VrfName, systemBlueToothServices=systemBlueToothServices, systemVcHardwareNisPresent=systemVcHardwareNisPresent, SeverityLevel=SeverityLevel, systemHardwareProdRegId=systemHardwareProdRegId, systemServicesTimezoneStartTime=systemServicesTimezoneStartTime, systemSwitchLoggingHostv6IpAddr=systemSwitchLoggingHostv6IpAddr, alcatelIND1SystemMIB=alcatelIND1SystemMIB, systemServicesBluetoothEnable=systemServicesBluetoothEnable, systemSwitchLogging=systemSwitchLogging, systemSwitchLoggingLoopback0=systemSwitchLoggingLoopback0, systemServicesArg2=systemServicesArg2, systemMicrocodePackageVersion=systemMicrocodePackageVersion, systemMicrocodeLoadedVersion=systemMicrocodeLoadedVersion, systemServicesArg1=systemServicesArg1, systemServicesTimezoneStartWeek=systemServicesTimezoneStartWeek, systemServicesTtyLines=systemServicesTtyLines, systemServicesActionPercentComplete=systemServicesActionPercentComplete, systemServicesSystraceLevelEntry=systemServicesSystraceLevelEntry, systemSwitchLoggingHostv6Status=systemSwitchLoggingHostv6Status, systemMicrocode=systemMicrocode, systemMicrocodePackageSize=systemMicrocodePackageSize, systemVcHardwarePowerSuppliesPresent=systemVcHardwarePowerSuppliesPresent, systemHardwareJumperForceUartDefaults=systemHardwareJumperForceUartDefaults, systemServicesUsbEnable=systemServicesUsbEnable, systemMicrocodePackageName=systemMicrocodePackageName, systemHardwareJumperInterruptBoot=systemHardwareJumperInterruptBoot, systemBootParams=systemBootParams, systemServicesMemMonitorEnable=systemServicesMemMonitorEnable, systemSwitchLoggingApplicationSubAppVrfLevelIndex=systemSwitchLoggingApplicationSubAppVrfLevelIndex, systemFileSystemDirectoryDateTime=systemFileSystemDirectoryDateTime, systemDNSNsIPv6Addr2=systemDNSNsIPv6Addr2, systemSwitchLoggingLevel=systemSwitchLoggingLevel, systemServicesSystraceEnable=systemServicesSystraceEnable, systemSwitchLoggingDgHostIpType=systemSwitchLoggingDgHostIpType, systemServicesTimezoneEndTime=systemServicesTimezoneEndTime, systemMicrocodeLoadedDescription=systemMicrocodeLoadedDescription, systemSwitchLoggingApplicationAppName=systemSwitchLoggingApplicationAppName, systemSwitchLoggingDgHostEntry=systemSwitchLoggingDgHostEntry, systemVcHardwareCpuModel=systemVcHardwareCpuModel, systemHardwareGroup=systemHardwareGroup, systemServicesBluetoothTxPower=systemServicesBluetoothTxPower, alcatelIND1SystemMIBTraps=alcatelIND1SystemMIBTraps, systemMicrocodeLoadedTable=systemMicrocodeLoadedTable, systemServicesWorkingDirectory=systemServicesWorkingDirectory, systemFileSystemFileEntry=systemFileSystemFileEntry, systemVcHardwareFlashSize=systemVcHardwareFlashSize, systemHardwareMemoryMfg=systemHardwareMemoryMfg, systemServicesAction=systemServicesAction, systemSwlogSizeTrap=systemSwlogSizeTrap, alcatelIND1SystemMIBCompliances=alcatelIND1SystemMIBCompliances, systemSwitchLoggingHostv6Port=systemSwitchLoggingHostv6Port, systemHardwareRevisionRegister=systemHardwareRevisionRegister, systemServicesTtyColumns=systemServicesTtyColumns, systemServicesKtraceEnable=systemServicesKtraceEnable, systemServicesBluetoothStatus=systemServicesBluetoothStatus, systemSwitchLoggingHostEntry=systemSwitchLoggingHostEntry, systemSwitchLoggingHostv6Table=systemSwitchLoggingHostv6Table, systemDNSNsIPv6Addr3=systemDNSNsIPv6Addr3, systemBootParamsGroup=systemBootParamsGroup, systemDNSNsAddr1=systemDNSNsAddr1, systemMicrocodeLoadedSize=systemMicrocodeLoadedSize, systemSwitchLoggingDebug=systemSwitchLoggingDebug, systemServicesBluetoothChassisId=systemServicesBluetoothChassisId, systemServicesSystraceLevelAppId=systemServicesSystraceLevelAppId, systemSwitchLoggingPreamble=systemSwitchLoggingPreamble, systemSwitchLoggingIndex=systemSwitchLoggingIndex, systemServicesArg7=systemServicesArg7)
