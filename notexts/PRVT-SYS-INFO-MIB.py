#
# PySNMP MIB module PRVT-SYS-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SYS-INFO-MIB
# Produced by pysmi-1.1.0 at Tue Nov 16 11:56:26 2021
# On host fv-az121-894 platform Linux version 5.11.0-1020-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
prvt_products, ipSwitch = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "prvt-products", "ipSwitch")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Gauge32, TimeTicks, MibIdentifier, iso, Integer32, ModuleIdentity, IpAddress, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Gauge32", "TimeTicks", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "IpAddress", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
prvtSysInfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 111, 2))
prvtSysInfMib.setRevisions(('2008-01-01 00:00', '2005-10-05 00:00', '2005-02-16 00:00', '2003-12-09 00:00', '2003-05-13 00:00',))
if mibBuilder.loadTexts: prvtSysInfMib.setLastUpdated('200801010000Z')
if mibBuilder.loadTexts: prvtSysInfMib.setOrganization('BATM Advanced Communication')
software = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111))
prvtSysInfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 0))
prvtSysInfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1))
prvtSysInfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2))
sysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1))
sysTask = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2))
numBytesFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesFree.setStatus('current')
numBlocksFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksFree.setStatus('current')
avgBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeFree.setStatus('current')
maxBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockSizeFree.setStatus('current')
numBytesAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesAlloc.setStatus('current')
numBlocksAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksAlloc.setStatus('current')
avgBlockSizeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeAlloc.setStatus('current')
taskTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1), )
if mibBuilder.loadTexts: taskTable.setStatus('current')
taskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SYS-INFO-MIB", "taskId"))
if mibBuilder.loadTexts: taskEntry.setStatus('current')
taskId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskId.setStatus('current')
taskName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskName.setStatus('current')
taskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskPriority.setStatus('current')
taskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("task-ready", 1), ("task-suspended", 2), ("task-delay", 3), ("task-deleted", 4), ("task-pend", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatus.setStatus('current')
taskOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("task-supervisor-mode", 0), ("task-unbreakable", 1), ("task-dealloc-stack", 2), ("task-fp-task", 3), ("task-stdio", 4), ("task-reserved-1", 5), ("task-reserved-2", 6), ("task-private-env", 7), ("task-no-stack-fill", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskOptions.setStatus('current')
taskMain = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskMain.setStatus('current')
taskStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPtr.setStatus('current')
taskStackBase = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackBase.setStatus('current')
taskStackPos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPos.setStatus('current')
taskStackEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackEnd.setStatus('current')
taskStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSize.setStatus('current')
taskStackSizeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSizeUsage.setStatus('current')
taskStackMaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackMaxUsed.setStatus('current')
taskStackFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackFree.setStatus('current')
taskErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskErrorStatus.setStatus('current')
taskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 0, 1)).setObjects(("PRVT-SYS-INFO-MIB", "taskName"), ("PRVT-SYS-INFO-MIB", "taskId"))
if mibBuilder.loadTexts: taskSuspended.setStatus('current')
sysInfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2, 2))
sysInfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2, 2, 3)).setObjects(("PRVT-SYS-INFO-MIB", "taskSuspended"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysInfNotificationGroup = sysInfNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-SYS-INFO-MIB", sysInfNotificationGroup=sysInfNotificationGroup, numBlocksFree=numBlocksFree, taskStackBase=taskStackBase, taskPriority=taskPriority, taskStackMaxUsed=taskStackMaxUsed, numBlocksAlloc=numBlocksAlloc, taskStackSizeUsage=taskStackSizeUsage, prvtSysInfNotifications=prvtSysInfNotifications, taskTable=taskTable, avgBlockSizeFree=avgBlockSizeFree, maxBlockSizeFree=maxBlockSizeFree, sysTask=sysTask, taskMain=taskMain, taskOptions=taskOptions, taskStackPos=taskStackPos, taskName=taskName, taskSuspended=taskSuspended, software=software, taskStackSize=taskStackSize, taskEntry=taskEntry, taskStackFree=taskStackFree, prvtSysInfObjects=prvtSysInfObjects, numBytesAlloc=numBytesAlloc, taskErrorStatus=taskErrorStatus, PYSNMP_MODULE_ID=prvtSysInfMib, avgBlockSizeAlloc=avgBlockSizeAlloc, prvtSysInfMib=prvtSysInfMib, sysInfMIBGroups=sysInfMIBGroups, sysMemory=sysMemory, taskStatus=taskStatus, prvtSysInfConformance=prvtSysInfConformance, numBytesFree=numBytesFree, taskStackEnd=taskStackEnd, taskId=taskId, taskStackPtr=taskStackPtr)
