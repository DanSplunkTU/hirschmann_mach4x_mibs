#
# PySNMP MIB module RTCPXR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RTCP-XR-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 20:06:47 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
mib_2, ObjectIdentity, Integer32, Counter32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, ModuleIdentity, Bits, Counter64, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "NotificationType", "iso")
DisplayString, TimeStamp, TextualConvention, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention", "RowPointer")
rtcpXrMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 255))
rtcpXrMIB.setRevisions(('2005-02-20 00:00',))
if mibBuilder.loadTexts: rtcpXrMIB.setLastUpdated('200502200000Z')
if mibBuilder.loadTexts: rtcpXrMIB.setOrganization('IETF AVT Working Group')
class LeveldB(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-120, 120), ValueRangeConstraint(127, 127), )
class Rfactor(TextualConvention, Unsigned32):
    reference = 'ITU-T G.107'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 120), ValueRangeConstraint(127, 127), )
class ScaledMOSscore(TextualConvention, Integer32):
    reference = 'ITU-T P.800'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(10, 50), ValueRangeConstraint(127, 127), )
class Percentage(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

rtcpXrMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 1))
rtcpXrConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 2))
rtcpXrEvents = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 3))
rtcpXrSessionIDTable = MibTable((1, 3, 6, 1, 2, 1, 255, 1, 1), )
if mibBuilder.loadTexts: rtcpXrSessionIDTable.setStatus('current')
rtcpXrSessionIDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 255, 1, 1, 1), ).setIndexNames((0, "RTCPXR-MIB", "rtcpXrSessionIDIndex"))
if mibBuilder.loadTexts: rtcpXrSessionIDEntry.setStatus('current')
rtcpXrSessionIDIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rtcpXrSessionIDIndex.setStatus('current')
rtcpXrSessionIDSessionIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSessionIdentifier.setStatus('current')
rtcpXrSessionIDCallStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDCallStartTime.setStatus('current')
rtcpXrSessionIDCallStopTime = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDCallStopTime.setStatus('current')
rtcpXrSessionIDSourceIPtype = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSourceIPtype.setStatus('current')
rtcpXrSessionIDSourceIPaddress = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSourceIPaddress.setStatus('current')
rtcpXrSessionIDSourceRTPport = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSourceRTPport.setStatus('current')
rtcpXrSessionIDSourceRTCPport = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSourceRTCPport.setStatus('current')
rtcpXrSessionIDDestIPtype = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestIPtype.setStatus('current')
rtcpXrSessionIDDestIPaddress = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestIPaddress.setStatus('current')
rtcpXrSessionIDDestRTPport = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 11), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestRTPport.setStatus('current')
rtcpXrSessionIDDestRTCPport = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestRTCPport.setStatus('current')
rtcpXrSessionIDSrceIdenType = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialedNumber", 1), ("urlID", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSrceIdenType.setStatus('current')
rtcpXrSessionIDSrceIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDSrceIdentifier.setStatus('current')
rtcpXrSessionIDDestIdenType = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialedNumber", 1), ("urlID", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestIdenType.setStatus('current')
rtcpXrSessionIDDestIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDDestIdentifier.setStatus('current')
rtcpXrSessionIDMeasurePt = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localEndpoint", 1), ("remoteEndpoint", 2), ("midStream", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDMeasurePt.setStatus('current')
rtcpXrSessionIDMeasurePtID = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDMeasurePtID.setStatus('current')
rtcpXrSessionIDReverseSession = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 19), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDReverseSession.setStatus('current')
rtcpXrSessionIDAltMeasurePt = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 1, 1, 20), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrSessionIDAltMeasurePt.setStatus('current')
rtcpXrBaseParamTable = MibTable((1, 3, 6, 1, 2, 1, 255, 1, 2), )
if mibBuilder.loadTexts: rtcpXrBaseParamTable.setStatus('current')
rtcpXrBaseParamEntry = MibTableRow((1, 3, 6, 1, 2, 1, 255, 1, 2, 1), ).setIndexNames((0, "RTCPXR-MIB", "rtcpXrSessionIDIndex"))
if mibBuilder.loadTexts: rtcpXrBaseParamEntry.setStatus('current')
rtcpXrBaseParamVocoderType = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamVocoderType.setStatus('current')
rtcpXrBaseParamVocoderRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamVocoderRate.setStatus('current')
rtcpXrBaseParamFrameDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setUnits('sample clock ticks').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamFrameDuration.setStatus('current')
rtcpXrBaseParamSampleRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setUnits('samples per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamSampleRate.setStatus('current')
rtcpXrBaseParamDurationMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamDurationMs.setStatus('current')
rtcpXrBaseParamNetworkLossRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 6), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamNetworkLossRate.setStatus('current')
rtcpXrBaseParamAvgDiscardRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 7), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamAvgDiscardRate.setStatus('current')
rtcpXrBaseParamBurstLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 8), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamBurstLossDensity.setStatus('current')
rtcpXrBaseParamBurstLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamBurstLenMs.setStatus('current')
rtcpXrBaseParamGapLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 10), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamGapLossDensity.setStatus('current')
rtcpXrBaseParamGapLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamGapLenMs.setStatus('current')
rtcpXrBaseParamAvgOWDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamAvgOWDelay.setStatus('current')
rtcpXrBaseParamAvgEndSysDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 13), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamAvgEndSysDelay.setStatus('current')
rtcpXrBaseParamPlcType = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enhanced", 2), ("standard", 3), ("unspecified", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamPlcType.setStatus('current')
rtcpXrBaseParamJBuffAdaptMode = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("nonAdaptive", 2), ("adaptive", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJBuffAdaptMode.setStatus('current')
rtcpXrBaseParamJBuffAdaptRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJBuffAdaptRate.setStatus('current')
rtcpXrBaseParamJBuffAverageDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJBuffAverageDelay.setStatus('current')
rtcpXrBaseParamJBuffMaximumDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 18), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJBuffMaximumDelay.setStatus('current')
rtcpXrBaseParamJBuffAbsMaxDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 19), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJBuffAbsMaxDelay.setStatus('current')
rtcpXrBaseParamJitterLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 2, 1, 20), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrBaseParamJitterLevel.setStatus('current')
rtcpXrCallQualityTable = MibTable((1, 3, 6, 1, 2, 1, 255, 1, 3), )
if mibBuilder.loadTexts: rtcpXrCallQualityTable.setStatus('current')
rtcpXrCallQualityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 255, 1, 3, 1), ).setIndexNames((0, "RTCPXR-MIB", "rtcpXrSessionIDIndex"))
if mibBuilder.loadTexts: rtcpXrCallQualityEntry.setStatus('current')
rtcpXrCallQualityNoiseLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 1), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityNoiseLeveldBm.setStatus('current')
rtcpXrCallQualitySignalLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 2), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualitySignalLeveldBm.setStatus('current')
rtcpXrCallQualityLocalRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 3), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityLocalRERLdB.setStatus('current')
rtcpXrCallQualityRemoteRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 4), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityRemoteRERLdB.setStatus('current')
rtcpXrCallQualityRCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 5), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityRCQ.setStatus('current')
rtcpXrCallQualityRLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 6), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityRLQ.setStatus('current')
rtcpXrCallQualityExternalRCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 7), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityExternalRCQ.setStatus('current')
rtcpXrCallQualityMOSCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 8), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityMOSCQ.setStatus('current')
rtcpXrCallQualityMOSLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 9), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityMOSLQ.setStatus('current')
rtcpXrCallQualityAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrCallQualityAlgorithm.setStatus('current')
rtcpXrHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 255, 1, 4), )
if mibBuilder.loadTexts: rtcpXrHistoryTable.setStatus('current')
rtcpXrHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 255, 1, 4, 1), ).setIndexNames((0, "RTCPXR-MIB", "rtcpXrHistoryIndex"))
if mibBuilder.loadTexts: rtcpXrHistoryEntry.setStatus('current')
rtcpXrHistoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rtcpXrHistoryIndex.setStatus('current')
rtcpXrHistoryGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryGroupName.setStatus('current')
rtcpXrHistoryStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryStartTime.setStatus('current')
rtcpXrHistoryStopTime = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryStopTime.setStatus('current')
rtcpXrHistoryNumOfSessions = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryNumOfSessions.setStatus('current')
rtcpXrHistoryMinDurationMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinDurationMs.setStatus('current')
rtcpXrHistoryMaxDurationMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxDurationMs.setStatus('current')
rtcpXrHistoryAvgDurationMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgDurationMs.setStatus('current')
rtcpXrHistoryMaxNetworkLossRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 9), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxNetworkLossRate.setStatus('current')
rtcpXrHistoryAvgNetworkLossRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 10), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgNetworkLossRate.setStatus('current')
rtcpXrHistoryMaxDiscardRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 11), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxDiscardRate.setStatus('current')
rtcpXrHistoryAvgDiscardRate = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 12), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgDiscardRate.setStatus('current')
rtcpXrHistoryMaxBurstLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 13), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxBurstLossDensity.setStatus('current')
rtcpXrHistoryAvgBurstLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 14), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgBurstLossDensity.setStatus('current')
rtcpXrHistoryMinBurstLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 15), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinBurstLenMs.setStatus('current')
rtcpXrHistoryMaxBurstLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 16), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxBurstLenMs.setStatus('current')
rtcpXrHistoryAvgBurstLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgBurstLenMs.setStatus('current')
rtcpXrHistoryMaxGapLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 18), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxGapLossDensity.setStatus('current')
rtcpXrHistoryAvgGapLossDensity = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 19), Percentage()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgGapLossDensity.setStatus('current')
rtcpXrHistoryMinGapLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 20), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinGapLenMs.setStatus('current')
rtcpXrHistoryMaxGapLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 21), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxGapLenMs.setStatus('current')
rtcpXrHistoryAvgGapLenMs = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 22), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgGapLenMs.setStatus('current')
rtcpXrHistoryMinOneWayDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 23), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinOneWayDelay.setStatus('current')
rtcpXrHistoryMaxOneWayDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 24), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxOneWayDelay.setStatus('current')
rtcpXrHistoryAvgOneWayDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 25), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgOneWayDelay.setStatus('current')
rtcpXrHistoryMinEndSystemDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 26), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinEndSystemDelay.setStatus('current')
rtcpXrHistoryMaxEndSystemDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 27), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxEndSystemDelay.setStatus('current')
rtcpXrHistoryAvgEndSystemDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 28), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgEndSystemDelay.setStatus('current')
rtcpXrHistoryMinJitterLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 29), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinJitterLevel.setStatus('current')
rtcpXrHistoryMaxJitterLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 30), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxJitterLevel.setStatus('current')
rtcpXrHistoryAvgJitterLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 31), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgJitterLevel.setStatus('current')
rtcpXrHistoryMinNoiseLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 32), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinNoiseLeveldBm.setStatus('current')
rtcpXrHistoryMaxNoiseLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 33), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxNoiseLeveldBm.setStatus('current')
rtcpXrHistoryAvgNoiseLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 34), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgNoiseLeveldBm.setStatus('current')
rtcpXrHistoryNoiseLevelCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryNoiseLevelCount.setStatus('current')
rtcpXrHistoryMinSignalLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 36), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinSignalLeveldBm.setStatus('current')
rtcpXrHistoryMaxSignalLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 37), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxSignalLeveldBm.setStatus('current')
rtcpXrHistoryAvgSignalLeveldBm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 38), LeveldB()).setUnits('dBm0').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgSignalLeveldBm.setStatus('current')
rtcpXrHistorySignalLevelCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistorySignalLevelCount.setStatus('current')
rtcpXrHistoryMinLocalRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 40), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinLocalRERLdB.setStatus('current')
rtcpXrHistoryMaxLocalRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 41), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxLocalRERLdB.setStatus('current')
rtcpXrHistoryAvgLocalRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 42), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgLocalRERLdB.setStatus('current')
rtcpXrHistoryLocalRERLCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryLocalRERLCount.setStatus('current')
rtcpXrHistoryMinRemoteRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 44), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinRemoteRERLdB.setStatus('current')
rtcpXrHistoryMaxRemoteRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 45), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxRemoteRERLdB.setStatus('current')
rtcpXrHistoryAvgRemoteRERLdB = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 46), LeveldB()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgRemoteRERLdB.setStatus('current')
rtcpXrHistoryRemoteRERLCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryRemoteRERLCount.setStatus('current')
rtcpXrHistoryMinRCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 48), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinRCQ.setStatus('current')
rtcpXrHistoryMaxRCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 49), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxRCQ.setStatus('current')
rtcpXrHistoryAvgRCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 50), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgRCQ.setStatus('current')
rtcpXrHistoryRCQCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryRCQCount.setStatus('current')
rtcpXrHistoryMinRLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 52), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinRLQ.setStatus('current')
rtcpXrHistoryMaxRLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 53), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxRLQ.setStatus('current')
rtcpXrHistoryAvgRLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 54), Rfactor()).setUnits('R factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgRLQ.setStatus('current')
rtcpXrHistoryRLQCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryRLQCount.setStatus('current')
rtcpXrHistoryMinMOSCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 56), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinMOSCQ.setStatus('current')
rtcpXrHistoryMaxMOSCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 57), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxMOSCQ.setStatus('current')
rtcpXrHistoryAvgMOSCQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 58), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgMOSCQ.setStatus('current')
rtcpXrHistoryMOSCQCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMOSCQCount.setStatus('current')
rtcpXrHistoryMinMOSLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 60), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMinMOSLQ.setStatus('current')
rtcpXrHistoryMaxMOSLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 61), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMaxMOSLQ.setStatus('current')
rtcpXrHistoryAvgMOSLQ = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 62), ScaledMOSscore()).setUnits('MOS x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryAvgMOSLQ.setStatus('current')
rtcpXrHistoryMOSLQCount = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryMOSLQCount.setStatus('current')
rtcpXrHistoryCQAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrHistoryCQAlgorithm.setStatus('current')
rtcpXrHistoryReset = MibTableColumn((1, 3, 6, 1, 2, 1, 255, 1, 4, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("stop", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpXrHistoryReset.setStatus('current')
rtcpXrVoipThresholdViolation = NotificationType((1, 3, 6, 1, 2, 1, 255, 3, 1)).setObjects(("RTCPXR-MIB", "rtcpXrVoipAlertSeverity"), ("RTCPXR-MIB", "rtcpXrVoipAlertType"), ("RTCPXR-MIB", "rtcpXrVoipAlertInfoType"), ("RTCPXR-MIB", "rtcpXrVoipAlertPointer"))
if mibBuilder.loadTexts: rtcpXrVoipThresholdViolation.setStatus('current')
rtcpXrEventParam = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 3, 2))
rtcpXrVoipAlertType = MibScalar((1, 3, 6, 1, 2, 1, 255, 3, 2, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrVoipAlertType.setStatus('current')
rtcpXrVoipAlertInfoType = MibScalar((1, 3, 6, 1, 2, 1, 255, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adminStringOnly", 1), ("sessionPointer", 2), ("historyPointer", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrVoipAlertInfoType.setStatus('current')
rtcpXrVoipAlertPointer = MibScalar((1, 3, 6, 1, 2, 1, 255, 3, 2, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrVoipAlertPointer.setStatus('current')
rtcpXrVoipAlertSeverity = MibScalar((1, 3, 6, 1, 2, 1, 255, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcpXrVoipAlertSeverity.setStatus('current')
rtcpXrCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 2, 1))
rtcpXrGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 255, 2, 2))
rtcpXrFullMetricsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 255, 2, 1, 1)).setObjects(("RTCPXR-MIB", "rtcpXrSessionIDGroup"), ("RTCPXR-MIB", "rtcpXrBaseParamGroup"), ("RTCPXR-MIB", "rtcpXrCallQualityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrFullMetricsCompliance = rtcpXrFullMetricsCompliance.setStatus('current')
rtcpXrMetricsAlertsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 255, 2, 1, 2)).setObjects(("RTCPXR-MIB", "rtcpXrSessionIDGroup"), ("RTCPXR-MIB", "rtcpXrBaseParamGroup"), ("RTCPXR-MIB", "rtcpXrCallQualityGroup"), ("RTCPXR-MIB", "rtcpXrNotificationParmsGroup"), ("RTCPXR-MIB", "rtcpXrNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrMetricsAlertsCompliance = rtcpXrMetricsAlertsCompliance.setStatus('current')
rtcpXrMetricsHistoryCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 255, 2, 1, 3)).setObjects(("RTCPXR-MIB", "rtcpXrSessionIDGroup"), ("RTCPXR-MIB", "rtcpXrBaseParamGroup"), ("RTCPXR-MIB", "rtcpXrCallQualityGroup"), ("RTCPXR-MIB", "rtcpXrMIBHistoryGroup"), ("RTCPXR-MIB", "rtcpXrNotificationParmsGroup"), ("RTCPXR-MIB", "rtcpXrNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrMetricsHistoryCompliance = rtcpXrMetricsHistoryCompliance.setStatus('current')
rtcpXrMinimalCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 255, 2, 1, 4)).setObjects(("RTCPXR-MIB", "rtcpXrSessionIDGroup"), ("RTCPXR-MIB", "rtcpXrBaseParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrMinimalCompliance = rtcpXrMinimalCompliance.setStatus('current')
rtcpXrSessionIDGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 1)).setObjects(("RTCPXR-MIB", "rtcpXrSessionIDSessionIdentifier"), ("RTCPXR-MIB", "rtcpXrSessionIDCallStartTime"), ("RTCPXR-MIB", "rtcpXrSessionIDCallStopTime"), ("RTCPXR-MIB", "rtcpXrSessionIDSourceIPtype"), ("RTCPXR-MIB", "rtcpXrSessionIDSourceIPaddress"), ("RTCPXR-MIB", "rtcpXrSessionIDSourceRTPport"), ("RTCPXR-MIB", "rtcpXrSessionIDSourceRTCPport"), ("RTCPXR-MIB", "rtcpXrSessionIDDestIPtype"), ("RTCPXR-MIB", "rtcpXrSessionIDDestIPaddress"), ("RTCPXR-MIB", "rtcpXrSessionIDDestRTPport"), ("RTCPXR-MIB", "rtcpXrSessionIDDestRTCPport"), ("RTCPXR-MIB", "rtcpXrSessionIDDestIdentifier"), ("RTCPXR-MIB", "rtcpXrSessionIDDestIdenType"), ("RTCPXR-MIB", "rtcpXrSessionIDSrceIdentifier"), ("RTCPXR-MIB", "rtcpXrSessionIDSrceIdenType"), ("RTCPXR-MIB", "rtcpXrSessionIDMeasurePt"), ("RTCPXR-MIB", "rtcpXrSessionIDMeasurePtID"), ("RTCPXR-MIB", "rtcpXrSessionIDReverseSession"), ("RTCPXR-MIB", "rtcpXrSessionIDAltMeasurePt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrSessionIDGroup = rtcpXrSessionIDGroup.setStatus('current')
rtcpXrBaseParamGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 2)).setObjects(("RTCPXR-MIB", "rtcpXrBaseParamVocoderType"), ("RTCPXR-MIB", "rtcpXrBaseParamVocoderRate"), ("RTCPXR-MIB", "rtcpXrBaseParamFrameDuration"), ("RTCPXR-MIB", "rtcpXrBaseParamSampleRate"), ("RTCPXR-MIB", "rtcpXrBaseParamDurationMs"), ("RTCPXR-MIB", "rtcpXrBaseParamNetworkLossRate"), ("RTCPXR-MIB", "rtcpXrBaseParamAvgDiscardRate"), ("RTCPXR-MIB", "rtcpXrBaseParamBurstLossDensity"), ("RTCPXR-MIB", "rtcpXrBaseParamBurstLenMs"), ("RTCPXR-MIB", "rtcpXrBaseParamGapLossDensity"), ("RTCPXR-MIB", "rtcpXrBaseParamGapLenMs"), ("RTCPXR-MIB", "rtcpXrBaseParamAvgOWDelay"), ("RTCPXR-MIB", "rtcpXrBaseParamAvgEndSysDelay"), ("RTCPXR-MIB", "rtcpXrBaseParamPlcType"), ("RTCPXR-MIB", "rtcpXrBaseParamJBuffAdaptMode"), ("RTCPXR-MIB", "rtcpXrBaseParamJBuffAdaptRate"), ("RTCPXR-MIB", "rtcpXrBaseParamJBuffAverageDelay"), ("RTCPXR-MIB", "rtcpXrBaseParamJBuffMaximumDelay"), ("RTCPXR-MIB", "rtcpXrBaseParamJBuffAbsMaxDelay"), ("RTCPXR-MIB", "rtcpXrBaseParamJitterLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrBaseParamGroup = rtcpXrBaseParamGroup.setStatus('current')
rtcpXrCallQualityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 3)).setObjects(("RTCPXR-MIB", "rtcpXrCallQualityNoiseLeveldBm"), ("RTCPXR-MIB", "rtcpXrCallQualitySignalLeveldBm"), ("RTCPXR-MIB", "rtcpXrCallQualityLocalRERLdB"), ("RTCPXR-MIB", "rtcpXrCallQualityRemoteRERLdB"), ("RTCPXR-MIB", "rtcpXrCallQualityRCQ"), ("RTCPXR-MIB", "rtcpXrCallQualityRLQ"), ("RTCPXR-MIB", "rtcpXrCallQualityExternalRCQ"), ("RTCPXR-MIB", "rtcpXrCallQualityMOSCQ"), ("RTCPXR-MIB", "rtcpXrCallQualityMOSLQ"), ("RTCPXR-MIB", "rtcpXrCallQualityAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrCallQualityGroup = rtcpXrCallQualityGroup.setStatus('current')
rtcpXrMIBHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 4)).setObjects(("RTCPXR-MIB", "rtcpXrHistoryGroupName"), ("RTCPXR-MIB", "rtcpXrHistoryStartTime"), ("RTCPXR-MIB", "rtcpXrHistoryStopTime"), ("RTCPXR-MIB", "rtcpXrHistoryNumOfSessions"), ("RTCPXR-MIB", "rtcpXrHistoryMinDurationMs"), ("RTCPXR-MIB", "rtcpXrHistoryMaxDurationMs"), ("RTCPXR-MIB", "rtcpXrHistoryAvgDurationMs"), ("RTCPXR-MIB", "rtcpXrHistoryMaxNetworkLossRate"), ("RTCPXR-MIB", "rtcpXrHistoryAvgNetworkLossRate"), ("RTCPXR-MIB", "rtcpXrHistoryMaxDiscardRate"), ("RTCPXR-MIB", "rtcpXrHistoryAvgDiscardRate"), ("RTCPXR-MIB", "rtcpXrHistoryMaxBurstLossDensity"), ("RTCPXR-MIB", "rtcpXrHistoryAvgBurstLossDensity"), ("RTCPXR-MIB", "rtcpXrHistoryMinBurstLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryMaxBurstLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryAvgBurstLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryMaxGapLossDensity"), ("RTCPXR-MIB", "rtcpXrHistoryAvgGapLossDensity"), ("RTCPXR-MIB", "rtcpXrHistoryMinGapLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryMaxGapLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryAvgGapLenMs"), ("RTCPXR-MIB", "rtcpXrHistoryMinOneWayDelay"), ("RTCPXR-MIB", "rtcpXrHistoryMaxOneWayDelay"), ("RTCPXR-MIB", "rtcpXrHistoryAvgOneWayDelay"), ("RTCPXR-MIB", "rtcpXrHistoryMinEndSystemDelay"), ("RTCPXR-MIB", "rtcpXrHistoryMaxEndSystemDelay"), ("RTCPXR-MIB", "rtcpXrHistoryAvgEndSystemDelay"), ("RTCPXR-MIB", "rtcpXrHistoryAvgJitterLevel"), ("RTCPXR-MIB", "rtcpXrHistoryMinJitterLevel"), ("RTCPXR-MIB", "rtcpXrHistoryMaxJitterLevel"), ("RTCPXR-MIB", "rtcpXrHistoryMinNoiseLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistoryMaxNoiseLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistoryAvgNoiseLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistoryNoiseLevelCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinSignalLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistoryMaxSignalLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistoryAvgSignalLeveldBm"), ("RTCPXR-MIB", "rtcpXrHistorySignalLevelCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinLocalRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryMaxLocalRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryAvgLocalRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryLocalRERLCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinRemoteRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryMaxRemoteRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryAvgRemoteRERLdB"), ("RTCPXR-MIB", "rtcpXrHistoryRemoteRERLCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinRCQ"), ("RTCPXR-MIB", "rtcpXrHistoryMaxRCQ"), ("RTCPXR-MIB", "rtcpXrHistoryAvgRCQ"), ("RTCPXR-MIB", "rtcpXrHistoryRCQCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinRLQ"), ("RTCPXR-MIB", "rtcpXrHistoryMaxRLQ"), ("RTCPXR-MIB", "rtcpXrHistoryAvgRLQ"), ("RTCPXR-MIB", "rtcpXrHistoryRLQCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinMOSCQ"), ("RTCPXR-MIB", "rtcpXrHistoryMaxMOSCQ"), ("RTCPXR-MIB", "rtcpXrHistoryAvgMOSCQ"), ("RTCPXR-MIB", "rtcpXrHistoryMOSCQCount"), ("RTCPXR-MIB", "rtcpXrHistoryMinMOSLQ"), ("RTCPXR-MIB", "rtcpXrHistoryMaxMOSLQ"), ("RTCPXR-MIB", "rtcpXrHistoryAvgMOSLQ"), ("RTCPXR-MIB", "rtcpXrHistoryMOSLQCount"), ("RTCPXR-MIB", "rtcpXrHistoryCQAlgorithm"), ("RTCPXR-MIB", "rtcpXrHistoryReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrMIBHistoryGroup = rtcpXrMIBHistoryGroup.setStatus('current')
rtcpXrNotificationParmsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 5)).setObjects(("RTCPXR-MIB", "rtcpXrVoipAlertSeverity"), ("RTCPXR-MIB", "rtcpXrVoipAlertType"), ("RTCPXR-MIB", "rtcpXrVoipAlertInfoType"), ("RTCPXR-MIB", "rtcpXrVoipAlertPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrNotificationParmsGroup = rtcpXrNotificationParmsGroup.setStatus('current')
rtcpXrNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 255, 2, 2, 6)).setObjects(("RTCPXR-MIB", "rtcpXrVoipThresholdViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rtcpXrNotificationsGroup = rtcpXrNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("RTCPXR-MIB", PYSNMP_MODULE_ID=rtcpXrMIB, rtcpXrCallQualityGroup=rtcpXrCallQualityGroup, rtcpXrSessionIDTable=rtcpXrSessionIDTable, rtcpXrHistoryMinNoiseLeveldBm=rtcpXrHistoryMinNoiseLeveldBm, rtcpXrSessionIDDestRTPport=rtcpXrSessionIDDestRTPport, rtcpXrHistoryAvgNoiseLeveldBm=rtcpXrHistoryAvgNoiseLeveldBm, rtcpXrVoipAlertInfoType=rtcpXrVoipAlertInfoType, rtcpXrHistoryMinMOSCQ=rtcpXrHistoryMinMOSCQ, rtcpXrSessionIDSessionIdentifier=rtcpXrSessionIDSessionIdentifier, rtcpXrHistoryLocalRERLCount=rtcpXrHistoryLocalRERLCount, rtcpXrFullMetricsCompliance=rtcpXrFullMetricsCompliance, rtcpXrBaseParamEntry=rtcpXrBaseParamEntry, rtcpXrHistoryCQAlgorithm=rtcpXrHistoryCQAlgorithm, rtcpXrCallQualityRCQ=rtcpXrCallQualityRCQ, rtcpXrBaseParamDurationMs=rtcpXrBaseParamDurationMs, rtcpXrBaseParamJBuffAverageDelay=rtcpXrBaseParamJBuffAverageDelay, rtcpXrHistoryAvgEndSystemDelay=rtcpXrHistoryAvgEndSystemDelay, rtcpXrHistoryMaxNetworkLossRate=rtcpXrHistoryMaxNetworkLossRate, rtcpXrCompliances=rtcpXrCompliances, rtcpXrHistoryMaxMOSLQ=rtcpXrHistoryMaxMOSLQ, rtcpXrBaseParamTable=rtcpXrBaseParamTable, rtcpXrBaseParamBurstLenMs=rtcpXrBaseParamBurstLenMs, rtcpXrHistoryNumOfSessions=rtcpXrHistoryNumOfSessions, rtcpXrHistoryStopTime=rtcpXrHistoryStopTime, rtcpXrGroups=rtcpXrGroups, rtcpXrMinimalCompliance=rtcpXrMinimalCompliance, rtcpXrCallQualityTable=rtcpXrCallQualityTable, rtcpXrBaseParamFrameDuration=rtcpXrBaseParamFrameDuration, rtcpXrHistoryAvgLocalRERLdB=rtcpXrHistoryAvgLocalRERLdB, rtcpXrSessionIDCallStopTime=rtcpXrSessionIDCallStopTime, rtcpXrHistoryMaxMOSCQ=rtcpXrHistoryMaxMOSCQ, rtcpXrMIBHistoryGroup=rtcpXrMIBHistoryGroup, rtcpXrHistoryAvgMOSCQ=rtcpXrHistoryAvgMOSCQ, rtcpXrHistoryRLQCount=rtcpXrHistoryRLQCount, rtcpXrHistoryMaxOneWayDelay=rtcpXrHistoryMaxOneWayDelay, rtcpXrHistoryMaxLocalRERLdB=rtcpXrHistoryMaxLocalRERLdB, rtcpXrBaseParamJBuffAbsMaxDelay=rtcpXrBaseParamJBuffAbsMaxDelay, rtcpXrHistoryTable=rtcpXrHistoryTable, rtcpXrMIBObjects=rtcpXrMIBObjects, rtcpXrBaseParamJBuffMaximumDelay=rtcpXrBaseParamJBuffMaximumDelay, rtcpXrHistoryMaxSignalLeveldBm=rtcpXrHistoryMaxSignalLeveldBm, rtcpXrMetricsHistoryCompliance=rtcpXrMetricsHistoryCompliance, rtcpXrHistoryAvgMOSLQ=rtcpXrHistoryAvgMOSLQ, rtcpXrSessionIDEntry=rtcpXrSessionIDEntry, rtcpXrHistoryMaxGapLenMs=rtcpXrHistoryMaxGapLenMs, rtcpXrHistoryMaxBurstLenMs=rtcpXrHistoryMaxBurstLenMs, rtcpXrHistoryAvgSignalLeveldBm=rtcpXrHistoryAvgSignalLeveldBm, rtcpXrHistoryMaxJitterLevel=rtcpXrHistoryMaxJitterLevel, rtcpXrNotificationsGroup=rtcpXrNotificationsGroup, rtcpXrHistoryAvgRemoteRERLdB=rtcpXrHistoryAvgRemoteRERLdB, rtcpXrCallQualityExternalRCQ=rtcpXrCallQualityExternalRCQ, rtcpXrHistoryAvgNetworkLossRate=rtcpXrHistoryAvgNetworkLossRate, rtcpXrHistoryAvgDiscardRate=rtcpXrHistoryAvgDiscardRate, rtcpXrSessionIDDestIdenType=rtcpXrSessionIDDestIdenType, rtcpXrVoipAlertType=rtcpXrVoipAlertType, rtcpXrCallQualityMOSLQ=rtcpXrCallQualityMOSLQ, rtcpXrHistoryGroupName=rtcpXrHistoryGroupName, rtcpXrHistoryAvgOneWayDelay=rtcpXrHistoryAvgOneWayDelay, rtcpXrBaseParamJBuffAdaptMode=rtcpXrBaseParamJBuffAdaptMode, rtcpXrHistoryMinGapLenMs=rtcpXrHistoryMinGapLenMs, rtcpXrCallQualityRemoteRERLdB=rtcpXrCallQualityRemoteRERLdB, rtcpXrBaseParamJBuffAdaptRate=rtcpXrBaseParamJBuffAdaptRate, rtcpXrCallQualityRLQ=rtcpXrCallQualityRLQ, rtcpXrHistorySignalLevelCount=rtcpXrHistorySignalLevelCount, rtcpXrHistoryMaxRLQ=rtcpXrHistoryMaxRLQ, rtcpXrHistoryMOSLQCount=rtcpXrHistoryMOSLQCount, rtcpXrCallQualityMOSCQ=rtcpXrCallQualityMOSCQ, rtcpXrHistoryMinBurstLenMs=rtcpXrHistoryMinBurstLenMs, rtcpXrSessionIDDestRTCPport=rtcpXrSessionIDDestRTCPport, rtcpXrHistoryAvgGapLenMs=rtcpXrHistoryAvgGapLenMs, rtcpXrBaseParamNetworkLossRate=rtcpXrBaseParamNetworkLossRate, rtcpXrHistoryAvgDurationMs=rtcpXrHistoryAvgDurationMs, rtcpXrSessionIDSourceIPtype=rtcpXrSessionIDSourceIPtype, rtcpXrSessionIDSourceRTCPport=rtcpXrSessionIDSourceRTCPport, rtcpXrSessionIDIndex=rtcpXrSessionIDIndex, rtcpXrSessionIDSrceIdentifier=rtcpXrSessionIDSrceIdentifier, rtcpXrSessionIDAltMeasurePt=rtcpXrSessionIDAltMeasurePt, rtcpXrSessionIDMeasurePt=rtcpXrSessionIDMeasurePt, rtcpXrCallQualityAlgorithm=rtcpXrCallQualityAlgorithm, rtcpXrBaseParamAvgDiscardRate=rtcpXrBaseParamAvgDiscardRate, rtcpXrSessionIDMeasurePtID=rtcpXrSessionIDMeasurePtID, rtcpXrHistoryMaxDurationMs=rtcpXrHistoryMaxDurationMs, rtcpXrHistoryAvgRLQ=rtcpXrHistoryAvgRLQ, rtcpXrHistoryMaxGapLossDensity=rtcpXrHistoryMaxGapLossDensity, rtcpXrBaseParamAvgOWDelay=rtcpXrBaseParamAvgOWDelay, rtcpXrBaseParamJitterLevel=rtcpXrBaseParamJitterLevel, rtcpXrHistoryAvgBurstLossDensity=rtcpXrHistoryAvgBurstLossDensity, rtcpXrHistoryAvgRCQ=rtcpXrHistoryAvgRCQ, rtcpXrSessionIDGroup=rtcpXrSessionIDGroup, rtcpXrBaseParamVocoderType=rtcpXrBaseParamVocoderType, rtcpXrHistoryMinSignalLeveldBm=rtcpXrHistoryMinSignalLeveldBm, rtcpXrSessionIDSourceRTPport=rtcpXrSessionIDSourceRTPport, rtcpXrHistoryMinRCQ=rtcpXrHistoryMinRCQ, rtcpXrMetricsAlertsCompliance=rtcpXrMetricsAlertsCompliance, rtcpXrNotificationParmsGroup=rtcpXrNotificationParmsGroup, rtcpXrBaseParamGapLenMs=rtcpXrBaseParamGapLenMs, rtcpXrSessionIDCallStartTime=rtcpXrSessionIDCallStartTime, rtcpXrHistoryAvgJitterLevel=rtcpXrHistoryAvgJitterLevel, Percentage=Percentage, rtcpXrHistoryNoiseLevelCount=rtcpXrHistoryNoiseLevelCount, rtcpXrHistoryMaxRCQ=rtcpXrHistoryMaxRCQ, rtcpXrHistoryReset=rtcpXrHistoryReset, rtcpXrHistoryMaxBurstLossDensity=rtcpXrHistoryMaxBurstLossDensity, rtcpXrSessionIDDestIPaddress=rtcpXrSessionIDDestIPaddress, rtcpXrBaseParamGapLossDensity=rtcpXrBaseParamGapLossDensity, rtcpXrVoipThresholdViolation=rtcpXrVoipThresholdViolation, rtcpXrCallQualityLocalRERLdB=rtcpXrCallQualityLocalRERLdB, rtcpXrHistoryMinRemoteRERLdB=rtcpXrHistoryMinRemoteRERLdB, rtcpXrHistoryMaxEndSystemDelay=rtcpXrHistoryMaxEndSystemDelay, rtcpXrHistoryAvgBurstLenMs=rtcpXrHistoryAvgBurstLenMs, rtcpXrEvents=rtcpXrEvents, rtcpXrSessionIDDestIPtype=rtcpXrSessionIDDestIPtype, rtcpXrHistoryRemoteRERLCount=rtcpXrHistoryRemoteRERLCount, rtcpXrHistoryMinOneWayDelay=rtcpXrHistoryMinOneWayDelay, rtcpXrSessionIDSourceIPaddress=rtcpXrSessionIDSourceIPaddress, rtcpXrBaseParamGroup=rtcpXrBaseParamGroup, rtcpXrHistoryIndex=rtcpXrHistoryIndex, LeveldB=LeveldB, rtcpXrHistoryMinMOSLQ=rtcpXrHistoryMinMOSLQ, rtcpXrVoipAlertSeverity=rtcpXrVoipAlertSeverity, rtcpXrHistoryMinRLQ=rtcpXrHistoryMinRLQ, rtcpXrBaseParamAvgEndSysDelay=rtcpXrBaseParamAvgEndSysDelay, rtcpXrHistoryMinJitterLevel=rtcpXrHistoryMinJitterLevel, rtcpXrBaseParamBurstLossDensity=rtcpXrBaseParamBurstLossDensity, rtcpXrCallQualitySignalLeveldBm=rtcpXrCallQualitySignalLeveldBm, rtcpXrHistoryRCQCount=rtcpXrHistoryRCQCount, rtcpXrHistoryMOSCQCount=rtcpXrHistoryMOSCQCount, rtcpXrHistoryEntry=rtcpXrHistoryEntry, rtcpXrBaseParamPlcType=rtcpXrBaseParamPlcType, rtcpXrHistoryMinDurationMs=rtcpXrHistoryMinDurationMs, rtcpXrHistoryMaxNoiseLeveldBm=rtcpXrHistoryMaxNoiseLeveldBm, ScaledMOSscore=ScaledMOSscore, Rfactor=Rfactor, rtcpXrConformance=rtcpXrConformance, rtcpXrCallQualityNoiseLeveldBm=rtcpXrCallQualityNoiseLeveldBm, rtcpXrBaseParamVocoderRate=rtcpXrBaseParamVocoderRate, rtcpXrSessionIDReverseSession=rtcpXrSessionIDReverseSession, rtcpXrSessionIDSrceIdenType=rtcpXrSessionIDSrceIdenType, rtcpXrHistoryStartTime=rtcpXrHistoryStartTime, rtcpXrCallQualityEntry=rtcpXrCallQualityEntry, rtcpXrSessionIDDestIdentifier=rtcpXrSessionIDDestIdentifier, rtcpXrHistoryMaxRemoteRERLdB=rtcpXrHistoryMaxRemoteRERLdB, rtcpXrHistoryMinLocalRERLdB=rtcpXrHistoryMinLocalRERLdB, rtcpXrVoipAlertPointer=rtcpXrVoipAlertPointer, rtcpXrHistoryMaxDiscardRate=rtcpXrHistoryMaxDiscardRate, rtcpXrHistoryAvgGapLossDensity=rtcpXrHistoryAvgGapLossDensity, rtcpXrEventParam=rtcpXrEventParam, rtcpXrMIB=rtcpXrMIB, rtcpXrHistoryMinEndSystemDelay=rtcpXrHistoryMinEndSystemDelay, rtcpXrBaseParamSampleRate=rtcpXrBaseParamSampleRate)
