#
# PySNMP MIB module NSCRTV-ROOT (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/edfa/NSCRTV-ROOT
# Produced by pysmi-1.1.8 at Thu Jan 13 23:43:27 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, iso, Unsigned32, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, IpAddress, Gauge32, NotificationType, enterprises, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "iso", "Unsigned32", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "IpAddress", "Gauge32", "NotificationType", "enterprises", "MibIdentifier", "Integer32")
TextualConvention, DisplayString, NetworkAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "NetworkAddress")
nscrtvRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 17409))
nscrtvHFCemsTree = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1))
propertyIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 1))
alarmsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 2))
commonIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3))
oaIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 11))
analogPropertyTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1), )
if mibBuilder.loadTexts: analogPropertyTable.setStatus('mandatory')
analogPropertyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1), ).setIndexNames((0, "NSCRTV-ROOT", "analogParameterOID"))
if mibBuilder.loadTexts: analogPropertyEntry.setStatus('mandatory')
analogParameterOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogParameterOID.setStatus('mandatory')
alarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmEnable.setStatus('mandatory')
analogAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aasNominal", 1), ("aasHIHI", 2), ("aasHI", 3), ("aasLO", 4), ("aasLOLO", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogAlarmState.setStatus('mandatory')
analogAlarmHIHI = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogAlarmHIHI.setStatus('mandatory')
analogAlarmHI = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogAlarmHI.setStatus('mandatory')
analogAlarmLO = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogAlarmLO.setStatus('mandatory')
analogAlarmLOLO = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogAlarmLOLO.setStatus('mandatory')
analogAlarmDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogAlarmDeadband.setStatus('mandatory')
discretePropertyTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2), )
if mibBuilder.loadTexts: discretePropertyTable.setStatus('mandatory')
discretePropertyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2, 1), ).setIndexNames((0, "NSCRTV-ROOT", "discreteParameterOID"), (0, "NSCRTV-ROOT", "discreteAlarmValue"))
if mibBuilder.loadTexts: discretePropertyEntry.setStatus('mandatory')
discreteParameterOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discreteParameterOID.setStatus('mandatory')
discreteAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discreteAlarmValue.setStatus('mandatory')
discreteAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableMajor", 2), ("enableMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discreteAlarmEnable.setStatus('mandatory')
discreteAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7))).clone(namedValues=NamedValues(("dasNominal", 1), ("dasDiscreteMajor", 6), ("dasDiscreteMinor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: discreteAlarmState.setStatus('mandatory')
currentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 1, 3), )
if mibBuilder.loadTexts: currentAlarmTable.setStatus('mandatory')
currentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 1, 3, 1), ).setIndexNames((0, "NSCRTV-ROOT", "currentAlarmOID"))
if mibBuilder.loadTexts: currentAlarmEntry.setStatus('mandatory')
currentAlarmOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentAlarmOID.setStatus('mandatory')
currentAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("caasHIHI", 2), ("caasHI", 3), ("caasLO", 4), ("caasLOLO", 5), ("caasDiscreteMajor", 6), ("caasDiscreteMinor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentAlarmState.setStatus('mandatory')
currentAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentAlarmValue.setStatus('mandatory')
alarmLogNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogNumberOfEntries.setStatus('mandatory')
alarmLogLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogLastIndex.setStatus('mandatory')
alarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3), )
if mibBuilder.loadTexts: alarmLogTable.setStatus('mandatory')
alarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1), ).setIndexNames((0, "NSCRTV-ROOT", "alarmLogIndex"))
if mibBuilder.loadTexts: alarmLogEntry.setStatus('mandatory')
alarmLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogIndex.setStatus('mandatory')
alarmLogInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogInformation.setStatus('mandatory')
alarmText = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 4), DisplayString())
if mibBuilder.loadTexts: alarmText.setStatus('optional')
hfcAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,1)).setObjects(("NSCRTV-ROOT", "commonPhysAddress"), ("NSCRTV-ROOT", "commonNELogicalID"), ("NSCRTV-ROOT", "alarmLogInformation"), ("NSCRTV-ROOT", "alarmText"))
commonAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1))
commonAdminUseRf = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2))
commonAdminUseEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3))
commonMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1))
commonRfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2))
commonMacAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1))
commonBackoffParams = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2))
commonMacStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3))
commonAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1))
commonDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2))
commonNELogicalID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonNELogicalID.setStatus('mandatory')
commonNEVendor = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendor.setStatus('mandatory')
commonNEModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEModelNumber.setStatus('mandatory')
commonNESerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNESerialNumber.setStatus('mandatory')
commonNEVendorInfo = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendorInfo.setStatus('optional')
commonNEStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEStatus.setStatus('mandatory')
commonReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonReset.setStatus('mandatory')
commonAlarmDetectionControl = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAlarmDetectionControl.setStatus('mandatory')
commonNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNetworkAddress.setStatus('mandatory')
commonCheckCode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonCheckCode.setStatus('mandatory')
commonTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapCommunityString.setStatus('mandatory')
commonTamperStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTamperStatus.setStatus('optional')
commonInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonInternalTemperature.setStatus('optional')
commonTime = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTime.setStatus('optional')
commonVarBindings = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonVarBindings.setStatus('mandatory')
commonResetCause = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonResetCause.setStatus('mandatory')
commonCraftStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonCraftStatus.setStatus('mandatory')
commonDeviceOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceOID.setStatus('optional')
commonDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceId.setStatus('optional')
commondownload = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commondownload.setStatus('mandatory')
commonPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPhysAddress.setStatus('mandatory')
commonMaxMulticastAddresses = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxMulticastAddresses.setStatus('mandatory')
commonMulticastAddressTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3), )
if mibBuilder.loadTexts: commonMulticastAddressTable.setStatus('mandatory')
commonMulticastAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1), ).setIndexNames((0, "NSCRTV-ROOT", "commonMulticastAddressIndex"))
if mibBuilder.loadTexts: commonMulticastAddressEntry.setStatus('mandatory')
commonMulticastAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMulticastAddressIndex.setStatus('mandatory')
commonMulticastAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMulticastAddressNumber.setStatus('mandatory')
commonBackoffPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffPeriod.setStatus('mandatory')
commonACKTimeoutWindow = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonACKTimeoutWindow.setStatus('mandatory')
commonMaximumMACLayerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaximumMACLayerRetries.setStatus('mandatory')
commonMaxPayloadSize = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxPayloadSize.setStatus('mandatory')
commonBackoffMinimumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMinimumExponent.setStatus('mandatory')
commonBackoffMaximumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMaximumExponent.setStatus('mandatory')
commonForwardPathLOSEvents = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathLOSEvents.setStatus('optional')
commonForwardPathFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathFramingErrors.setStatus('optional')
commonForwardPathCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathCRCErrors.setStatus('optional')
commonInvalidMacCmds = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonInvalidMacCmds.setStatus('optional')
commonBackwardPathCollisionTimes = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackwardPathCollisionTimes.setStatus('optional')
commonReturnPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonReturnPathFrequency.setStatus('mandatory')
commonForwardPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathFrequency.setStatus('mandatory')
commonProvisionedReturnPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonProvisionedReturnPowerLevel.setStatus('mandatory')
commonForwardPathReceiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathReceiveLevel.setStatus('optional')
commonMaxReturnPower = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaxReturnPower.setStatus('mandatory')
commonAgentBootWay = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootDefault", 1), ("bootBOOTP", 2), ("bootTFTP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentBootWay.setStatus('mandatory')
commonAgentReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentReset.setStatus('mandatory')
commonAgentMaxTraps = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentMaxTraps.setStatus('mandatory')
commonAgentTrapMinInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMinInterval.setStatus('mandatory')
commonAgentTrapMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMaxInterval.setStatus('mandatory')
commonTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapAck.setStatus('optional')
commonAgentTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7), )
if mibBuilder.loadTexts: commonAgentTrapTable.setStatus('mandatory')
commonAgentTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1), ).setIndexNames((0, "NSCRTV-ROOT", "commonAgentTrapIndex"))
if mibBuilder.loadTexts: commonAgentTrapEntry.setStatus('mandatory')
commonAgentTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAgentTrapIndex.setStatus('mandatory')
commonAgentTrapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapIP.setStatus('mandatory')
commonAgentTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapCommunity.setStatus('mandatory')
commonAgentTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commonAgentTrapEnable", 1), ("commonAgentTrapDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapStatus.setStatus('mandatory')
commonDeviceNum = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceNum.setStatus('mandatory')
commonDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: commonDeviceInfoTable.setStatus('mandatory')
commonDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "NSCRTV-ROOT", "commonDeviceSlot"))
if mibBuilder.loadTexts: commonDeviceInfoEntry.setStatus('mandatory')
commonDeviceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSlot.setStatus('mandatory')
commonDevicesID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesID.setStatus('mandatory')
commonDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendor.setStatus('mandatory')
commonDeviceModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceModelNumber.setStatus('mandatory')
commonDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSerialNumber.setStatus('mandatory')
commonDeviceVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendorInfo.setStatus('optional')
commonDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceStatus.setStatus('mandatory')
commonDeviceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceReset.setStatus('mandatory')
commonDeviceAlarmDetectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceAlarmDetectionControl.setStatus('mandatory')
commonDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMACAddress.setStatus('mandatory')
commonDeviceTamperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceTamperStatus.setStatus('optional')
commonDeviceInternalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceInternalTemperature.setStatus('optional')
commonDeviceResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceResetCause.setStatus('mandatory')
commonDeviceCraftStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceCraftStatus.setStatus('mandatory')
commonDevicesOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesOID.setStatus('mandatory')
commonDeviceAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceAcct.setStatus('optional')
commonDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceName.setStatus('mandatory')
commonDeviceMFD = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMFD.setStatus('mandatory')
commonDeviceFW = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceFW.setStatus('mandatory')
hfcColdStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,0)).setObjects(("NSCRTV-ROOT", "commonPhysAddress"), ("NSCRTV-ROOT", "commonNELogicalID"))
hfcWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,2)).setObjects(("NSCRTV-ROOT", "commonPhysAddress"), ("NSCRTV-ROOT", "commonNELogicalID"))
oaVendorOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaVendorOID.setStatus('optional')
oaOutputOpticalPower = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOutputOpticalPower.setStatus('mandatory')
oaInputOpticalPower = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaInputOpticalPower.setStatus('mandatory')
oaPumpTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4), )
if mibBuilder.loadTexts: oaPumpTable.setStatus('mandatory')
oaPumpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4, 1), ).setIndexNames((0, "NSCRTV-ROOT", "oaPumpIndex"))
if mibBuilder.loadTexts: oaPumpEntry.setStatus('mandatory')
oaPumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaPumpIndex.setStatus('mandatory')
oaPumpBIAS = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaPumpBIAS.setStatus('mandatory')
oaPumpTEC = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaPumpTEC.setStatus('optional')
oaPumpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaPumpTemp.setStatus('mandatory')
oaNumberDCPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaNumberDCPowerSupply.setStatus('mandatory')
oaDCPowerSupplyMode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadsharing", 1), ("switchedRedundant", 2), ("aloneSupply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDCPowerSupplyMode.setStatus('optional')
oaDCPowerTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7), )
if mibBuilder.loadTexts: oaDCPowerTable.setStatus('mandatory')
oaDCPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7, 1), ).setIndexNames((0, "NSCRTV-ROOT", "oaDCPowerIndex"))
if mibBuilder.loadTexts: oaDCPowerEntry.setStatus('mandatory')
oaDCPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDCPowerIndex.setStatus('mandatory')
oaDCPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDCPowerVoltage.setStatus('mandatory')
oaDCPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDCPowerCurrent.setStatus('mandatory')
oaDCPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaDCPowerName.setStatus('mandatory')
oaOutputOpticalPowerSet = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOutputOpticalPowerSet.setStatus('mandatory')
oaGainSet = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaGainSet.setStatus('mandatory')
powerSupplyStatusA = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("nominal", 1), ("failure", 2), ("notInstalled", 3)))).setUnits('no units').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatusA.setStatus('current')
powerSupplyStatusB = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 11, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("nominal", 1), ("failure", 2), ("notInstalled", 3)))).setUnits('no units').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatusB.setStatus('current')
mibBuilder.exportSymbols("NSCRTV-ROOT", commonDeviceModelNumber=commonDeviceModelNumber, commonDeviceResetCause=commonDeviceResetCause, alarmLogIndex=alarmLogIndex, commonDeviceInfoTable=commonDeviceInfoTable, commonMacStats=commonMacStats, commonNetworkAddress=commonNetworkAddress, commonAgentTrapEntry=commonAgentTrapEntry, oaDCPowerName=oaDCPowerName, analogParameterOID=analogParameterOID, commonBackoffParams=commonBackoffParams, alarmLogTable=alarmLogTable, commonDeviceName=commonDeviceName, oaGainSet=oaGainSet, commonTrapAck=commonTrapAck, commonDeviceSlot=commonDeviceSlot, commonAgentGroup=commonAgentGroup, currentAlarmValue=currentAlarmValue, commonReset=commonReset, currentAlarmEntry=currentAlarmEntry, commonAgentTrapTable=commonAgentTrapTable, oaNumberDCPowerSupply=oaNumberDCPowerSupply, commonNEStatus=commonNEStatus, analogAlarmHI=analogAlarmHI, commonNEVendor=commonNEVendor, currentAlarmState=currentAlarmState, hfcAlarmEvent=hfcAlarmEvent, commonDeviceStatus=commonDeviceStatus, oaOutputOpticalPower=oaOutputOpticalPower, oaPumpEntry=oaPumpEntry, commonAdminUseRf=commonAdminUseRf, commonDeviceReset=commonDeviceReset, analogPropertyEntry=analogPropertyEntry, commonProvisionedReturnPowerLevel=commonProvisionedReturnPowerLevel, analogAlarmLO=analogAlarmLO, oaDCPowerVoltage=oaDCPowerVoltage, hfcWarmStart=hfcWarmStart, hfcColdStart=hfcColdStart, commonInternalTemperature=commonInternalTemperature, currentAlarmTable=currentAlarmTable, commonDeviceVendor=commonDeviceVendor, commonDeviceNum=commonDeviceNum, commonMulticastAddressEntry=commonMulticastAddressEntry, analogAlarmState=analogAlarmState, commonAgentTrapCommunity=commonAgentTrapCommunity, commonBackwardPathCollisionTimes=commonBackwardPathCollisionTimes, analogAlarmHIHI=analogAlarmHIHI, commonDeviceMACAddress=commonDeviceMACAddress, powerSupplyStatusB=powerSupplyStatusB, alarmText=alarmText, commonAgentTrapMinInterval=commonAgentTrapMinInterval, commonDevicesOID=commonDevicesOID, commonDeviceFW=commonDeviceFW, commonMulticastAddressIndex=commonMulticastAddressIndex, alarmLogInformation=alarmLogInformation, commonMulticastAddressNumber=commonMulticastAddressNumber, commonDeviceInfoEntry=commonDeviceInfoEntry, commonIdent=commonIdent, commonDeviceAcct=commonDeviceAcct, commonMacAddress=commonMacAddress, commonAgentMaxTraps=commonAgentMaxTraps, commonAgentTrapMaxInterval=commonAgentTrapMaxInterval, oaPumpBIAS=oaPumpBIAS, commonNESerialNumber=commonNESerialNumber, commonPhysAddress=commonPhysAddress, commonCraftStatus=commonCraftStatus, commonMulticastAddressTable=commonMulticastAddressTable, commonMACGroup=commonMACGroup, commonMaxMulticastAddresses=commonMaxMulticastAddresses, powerSupplyStatusA=powerSupplyStatusA, oaVendorOID=oaVendorOID, oaInputOpticalPower=oaInputOpticalPower, oaDCPowerEntry=oaDCPowerEntry, commonBackoffPeriod=commonBackoffPeriod, alarmLogEntry=alarmLogEntry, commonAgentBootWay=commonAgentBootWay, commonDeviceInternalTemperature=commonDeviceInternalTemperature, commonForwardPathReceiveLevel=commonForwardPathReceiveLevel, commonDeviceGroup=commonDeviceGroup, analogPropertyTable=analogPropertyTable, commonForwardPathFramingErrors=commonForwardPathFramingErrors, commonDeviceAlarmDetectionControl=commonDeviceAlarmDetectionControl, oaPumpTable=oaPumpTable, commonDeviceSerialNumber=commonDeviceSerialNumber, oaPumpTEC=oaPumpTEC, commonAdminGroup=commonAdminGroup, commondownload=commondownload, oaDCPowerCurrent=oaDCPowerCurrent, commonVarBindings=commonVarBindings, commonDeviceId=commonDeviceId, alarmsIdent=alarmsIdent, commonAgentTrapIndex=commonAgentTrapIndex, commonDeviceVendorInfo=commonDeviceVendorInfo, commonInvalidMacCmds=commonInvalidMacCmds, commonTamperStatus=commonTamperStatus, propertyIdent=propertyIdent, alarmLogLastIndex=alarmLogLastIndex, nscrtvRoot=nscrtvRoot, commonDeviceCraftStatus=commonDeviceCraftStatus, commonAlarmDetectionControl=commonAlarmDetectionControl, commonResetCause=commonResetCause, analogAlarmLOLO=analogAlarmLOLO, commonNELogicalID=commonNELogicalID, nscrtvHFCemsTree=nscrtvHFCemsTree, commonForwardPathCRCErrors=commonForwardPathCRCErrors, commonBackoffMaximumExponent=commonBackoffMaximumExponent, oaDCPowerTable=oaDCPowerTable, commonReturnPathFrequency=commonReturnPathFrequency, commonDeviceMFD=commonDeviceMFD, discretePropertyTable=discretePropertyTable, oaDCPowerIndex=oaDCPowerIndex, discreteAlarmEnable=discreteAlarmEnable, commonAgentTrapStatus=commonAgentTrapStatus, commonDevicesID=commonDevicesID, commonDeviceTamperStatus=commonDeviceTamperStatus, commonRfGroup=commonRfGroup, discreteAlarmState=discreteAlarmState, oaPumpTemp=oaPumpTemp, commonACKTimeoutWindow=commonACKTimeoutWindow, commonAgentTrapIP=commonAgentTrapIP, oaPumpIndex=oaPumpIndex, discreteParameterOID=discreteParameterOID, oaOutputOpticalPowerSet=oaOutputOpticalPowerSet, commonMaxPayloadSize=commonMaxPayloadSize, commonMaximumMACLayerRetries=commonMaximumMACLayerRetries, currentAlarmOID=currentAlarmOID, discretePropertyEntry=discretePropertyEntry, commonBackoffMinimumExponent=commonBackoffMinimumExponent, commonTrapCommunityString=commonTrapCommunityString, commonForwardPathFrequency=commonForwardPathFrequency, commonMaxReturnPower=commonMaxReturnPower, oaIdent=oaIdent, commonNEModelNumber=commonNEModelNumber, alarmEnable=alarmEnable, oaDCPowerSupplyMode=oaDCPowerSupplyMode, commonAdminUseEthernet=commonAdminUseEthernet, alarmLogNumberOfEntries=alarmLogNumberOfEntries, commonForwardPathLOSEvents=commonForwardPathLOSEvents, discreteAlarmValue=discreteAlarmValue, commonAgentReset=commonAgentReset, commonCheckCode=commonCheckCode, commonDeviceOID=commonDeviceOID, commonNEVendorInfo=commonNEVendorInfo, commonTime=commonTime, analogAlarmDeadband=analogAlarmDeadband)
