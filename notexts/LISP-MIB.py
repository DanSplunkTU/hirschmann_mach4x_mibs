#
# PySNMP MIB module LISP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/LISP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:49:57 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsL3VpnName, = mibBuilder.importSymbols("MPLS-L3VPN-STD-MIB", "MplsL3VpnName")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Integer32, Unsigned32, mib_2, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, IpAddress, Counter32, ModuleIdentity, TimeTicks, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Unsigned32", "mib-2", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "IpAddress", "Counter32", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter64")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
lispMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 220))
lispMIB.setRevisions(('2013-10-21 00:00',))
if mibBuilder.loadTexts: lispMIB.setLastUpdated('201310210000Z')
if mibBuilder.loadTexts: lispMIB.setOrganization('IETF Locator/ID Separation Protocol (LISP) Working Group')
class LispAddressType(TextualConvention, OctetString):
    reference = 'RFC 6830, Section 14.2 and LISP Canonical Address Format (LCAF), Work in Progress, March 2013.'
    status = 'current'
    displayHint = '39a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 39)

lispObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 1))
lispConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2))
lispFeaturesTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 1), )
if mibBuilder.loadTexts: lispFeaturesTable.setStatus('current')
lispFeaturesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 1, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"), (0, "LISP-MIB", "lispFeaturesAddressFamily"))
if mibBuilder.loadTexts: lispFeaturesEntry.setStatus('current')
lispFeaturesInstanceID = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: lispFeaturesInstanceID.setStatus('current')
lispFeaturesAddressFamily = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 2), AddressFamilyNumbers())
if mibBuilder.loadTexts: lispFeaturesAddressFamily.setStatus('current')
lispFeaturesItrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesItrEnabled.setStatus('current')
lispFeaturesEtrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrEnabled.setStatus('current')
lispFeaturesProxyItrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesProxyItrEnabled.setStatus('current')
lispFeaturesProxyEtrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesProxyEtrEnabled.setStatus('current')
lispFeaturesMapServerEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapServerEnabled.setStatus('current')
lispFeaturesMapResolverEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapResolverEnabled.setStatus('current')
lispFeaturesMapCacheSize = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapCacheSize.setStatus('current')
lispFeaturesMapCacheLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapCacheLimit.setStatus('current')
lispFeaturesEtrMapCacheTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrMapCacheTtl.setStatus('current')
lispFeaturesRlocProbeEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesRlocProbeEnabled.setStatus('current')
lispFeaturesEtrAcceptMapDataEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataEnabled.setStatus('current')
lispFeaturesEtrAcceptMapDataVerifyEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataVerifyEnabled.setStatus('current')
lispFeaturesRouterTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesRouterTimeStamp.setStatus('current')
lispIidToVrfTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 2), )
if mibBuilder.loadTexts: lispIidToVrfTable.setStatus('current')
lispIidToVrfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 2, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"))
if mibBuilder.loadTexts: lispIidToVrfEntry.setStatus('current')
lispIidToVrfName = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 2, 1, 1), MplsL3VpnName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispIidToVrfName.setStatus('current')
lispGlobalStatsTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 3), )
if mibBuilder.loadTexts: lispGlobalStatsTable.setStatus('current')
lispGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 3, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"), (0, "LISP-MIB", "lispFeaturesAddressFamily"))
if mibBuilder.loadTexts: lispGlobalStatsEntry.setStatus('current')
lispGlobalStatsMapRequestsIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsIn.setStatus('current')
lispGlobalStatsMapRequestsOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsOut.setStatus('current')
lispGlobalStatsMapRepliesIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesIn.setStatus('current')
lispGlobalStatsMapRepliesOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesOut.setStatus('current')
lispGlobalStatsMapRegistersIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersIn.setStatus('current')
lispGlobalStatsMapRegistersOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersOut.setStatus('current')
lispMappingDatabaseTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 4), )
if mibBuilder.loadTexts: lispMappingDatabaseTable.setStatus('current')
lispMappingDatabaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 4, 1), ).setIndexNames((0, "LISP-MIB", "lispMappingDatabaseEidLength"), (0, "LISP-MIB", "lispMappingDatabaseEid"))
if mibBuilder.loadTexts: lispMappingDatabaseEntry.setStatus('current')
lispMappingDatabaseEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMappingDatabaseEidLength.setStatus('current')
lispMappingDatabaseEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMappingDatabaseEid.setStatus('current')
lispMappingDatabaseLsb = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLsb.setStatus('current')
lispMappingDatabaseEidPartitioned = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEidPartitioned.setStatus('current')
lispMappingDatabaseTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseTimeStamp.setStatus('current')
lispMappingDatabaseDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseDecapOctets.setStatus('current')
lispMappingDatabaseDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseDecapPackets.setStatus('current')
lispMappingDatabaseEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEncapOctets.setStatus('current')
lispMappingDatabaseEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEncapPackets.setStatus('current')
lispMappingDatabaseLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 5), )
if mibBuilder.loadTexts: lispMappingDatabaseLocatorTable.setStatus('current')
lispMappingDatabaseLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 5, 1), ).setIndexNames((0, "LISP-MIB", "lispMappingDatabaseEidLength"), (0, "LISP-MIB", "lispMappingDatabaseEid"), (0, "LISP-MIB", "lispMappingDatabaseLocatorRlocLength"), (0, "LISP-MIB", "lispMappingDatabaseLocatorRloc"))
if mibBuilder.loadTexts: lispMappingDatabaseLocatorEntry.setStatus('current')
lispMappingDatabaseLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLength.setStatus('current')
lispMappingDatabaseLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRloc.setStatus('current')
lispMappingDatabaseLocatorRlocPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocPriority.setStatus('current')
lispMappingDatabaseLocatorRlocWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocWeight.setStatus('current')
lispMappingDatabaseLocatorRlocMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMPriority.setStatus('current')
lispMappingDatabaseLocatorRlocMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMWeight.setStatus('current')
lispMappingDatabaseLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocState.setStatus('current')
lispMappingDatabaseLocatorRlocLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("siteself", 1), ("sitelocal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLocal.setStatus('current')
lispMappingDatabaseLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocTimeStamp.setStatus('current')
lispMappingDatabaseLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapOctets.setStatus('current')
lispMappingDatabaseLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapPackets.setStatus('current')
lispMappingDatabaseLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapOctets.setStatus('current')
lispMappingDatabaseLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapPackets.setStatus('current')
lispMapCacheTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 6), )
if mibBuilder.loadTexts: lispMapCacheTable.setStatus('current')
lispMapCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 6, 1), ).setIndexNames((0, "LISP-MIB", "lispMapCacheEidLength"), (0, "LISP-MIB", "lispMapCacheEid"))
if mibBuilder.loadTexts: lispMapCacheEntry.setStatus('current')
lispMapCacheEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMapCacheEidLength.setStatus('current')
lispMapCacheEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMapCacheEid.setStatus('current')
lispMapCacheEidTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidTimeStamp.setStatus('current')
lispMapCacheEidExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidExpiryTime.setStatus('current')
lispMapCacheEidState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidState.setStatus('current')
lispMapCacheEidAuthoritative = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidAuthoritative.setStatus('current')
lispMapCacheEidDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidDecapOctets.setStatus('current')
lispMapCacheEidDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidDecapPackets.setStatus('current')
lispMapCacheEidEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidEncapOctets.setStatus('current')
lispMapCacheEidEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidEncapPackets.setStatus('current')
lispMapCacheLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 7), )
if mibBuilder.loadTexts: lispMapCacheLocatorTable.setStatus('current')
lispMapCacheLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 7, 1), ).setIndexNames((0, "LISP-MIB", "lispMapCacheEidLength"), (0, "LISP-MIB", "lispMapCacheEid"), (0, "LISP-MIB", "lispMapCacheLocatorRlocLength"), (0, "LISP-MIB", "lispMapCacheLocatorRloc"))
if mibBuilder.loadTexts: lispMapCacheLocatorEntry.setStatus('current')
lispMapCacheLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLength.setStatus('current')
lispMapCacheLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMapCacheLocatorRloc.setStatus('current')
lispMapCacheLocatorRlocPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocPriority.setStatus('current')
lispMapCacheLocatorRlocWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocWeight.setStatus('current')
lispMapCacheLocatorRlocMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMPriority.setStatus('current')
lispMapCacheLocatorRlocMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMWeight.setStatus('current')
lispMapCacheLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocState.setStatus('current')
lispMapCacheLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocTimeStamp.setStatus('current')
lispMapCacheLocatorRlocLastPriorityChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastPriorityChange.setStatus('current')
lispMapCacheLocatorRlocLastWeightChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastWeightChange.setStatus('current')
lispMapCacheLocatorRlocLastMPriorityChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMPriorityChange.setStatus('current')
lispMapCacheLocatorRlocLastMWeightChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMWeightChange.setStatus('current')
lispMapCacheLocatorRlocLastStateChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastStateChange.setStatus('current')
lispMapCacheLocatorRlocRtt = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocRtt.setStatus('current')
lispMapCacheLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapOctets.setStatus('current')
lispMapCacheLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapPackets.setStatus('current')
lispMapCacheLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapOctets.setStatus('current')
lispMapCacheLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapPackets.setStatus('current')
lispConfiguredLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 8), )
if mibBuilder.loadTexts: lispConfiguredLocatorTable.setStatus('current')
lispConfiguredLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 8, 1), ).setIndexNames((0, "LISP-MIB", "lispConfiguredLocatorRlocLength"), (0, "LISP-MIB", "lispConfiguredLocatorRloc"))
if mibBuilder.loadTexts: lispConfiguredLocatorEntry.setStatus('current')
lispConfiguredLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLength.setStatus('current')
lispConfiguredLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispConfiguredLocatorRloc.setStatus('current')
lispConfiguredLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocState.setStatus('current')
lispConfiguredLocatorRlocLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("siteself", 1), ("sitelocal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLocal.setStatus('current')
lispConfiguredLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocTimeStamp.setStatus('current')
lispConfiguredLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapOctets.setStatus('current')
lispConfiguredLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapPackets.setStatus('current')
lispConfiguredLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapOctets.setStatus('current')
lispConfiguredLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapPackets.setStatus('current')
lispEidRegistrationTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 9), )
if mibBuilder.loadTexts: lispEidRegistrationTable.setStatus('current')
lispEidRegistrationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 9, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"))
if mibBuilder.loadTexts: lispEidRegistrationEntry.setStatus('current')
lispEidRegistrationEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationEidLength.setStatus('current')
lispEidRegistrationEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationEid.setStatus('current')
lispEidRegistrationSiteName = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationSiteName.setStatus('current')
lispEidRegistrationSiteDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationSiteDescription.setStatus('current')
lispEidRegistrationIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationIsRegistered.setStatus('current')
lispEidRegistrationFirstTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationFirstTimeStamp.setStatus('current')
lispEidRegistrationLastTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastTimeStamp.setStatus('current')
lispEidRegistrationLastRegisterSenderLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSenderLength.setStatus('current')
lispEidRegistrationLastRegisterSender = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 9), LispAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSender.setStatus('current')
lispEidRegistrationAuthenticationErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationAuthenticationErrors.setStatus('current')
lispEidRegistrationRlocsMismatch = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationRlocsMismatch.setStatus('current')
lispEidRegistrationEtrTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 10), )
if mibBuilder.loadTexts: lispEidRegistrationEtrTable.setStatus('current')
lispEidRegistrationEtrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 10, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"), (0, "LISP-MIB", "lispEidRegistrationEtrSenderLength"), (0, "LISP-MIB", "lispEidRegistrationEtrSender"))
if mibBuilder.loadTexts: lispEidRegistrationEtrEntry.setStatus('current')
lispEidRegistrationEtrSenderLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationEtrSenderLength.setStatus('current')
lispEidRegistrationEtrSender = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationEtrSender.setStatus('current')
lispEidRegistrationEtrLastTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrLastTimeStamp.setStatus('current')
lispEidRegistrationEtrTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrTtl.setStatus('current')
lispEidRegistrationEtrProxyReply = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrProxyReply.setStatus('current')
lispEidRegistrationEtrWantsMapNotify = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrWantsMapNotify.setStatus('current')
lispEidRegistrationLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 11), )
if mibBuilder.loadTexts: lispEidRegistrationLocatorTable.setStatus('current')
lispEidRegistrationLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 11, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"), (0, "LISP-MIB", "lispEidRegistrationEtrSenderLength"), (0, "LISP-MIB", "lispEidRegistrationEtrSender"), (0, "LISP-MIB", "lispEidRegistrationLocatorRlocLength"), (0, "LISP-MIB", "lispEidRegistrationLocatorRloc"))
if mibBuilder.loadTexts: lispEidRegistrationLocatorEntry.setStatus('current')
lispEidRegistrationLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocLength.setStatus('current')
lispEidRegistrationLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationLocatorRloc.setStatus('current')
lispEidRegistrationLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocState.setStatus('current')
lispEidRegistrationLocatorIsLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorIsLocal.setStatus('current')
lispEidRegistrationLocatorPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorPriority.setStatus('current')
lispEidRegistrationLocatorWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorWeight.setStatus('current')
lispEidRegistrationLocatorMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorMPriority.setStatus('current')
lispEidRegistrationLocatorMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorMWeight.setStatus('current')
lispUseMapServerTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 12), )
if mibBuilder.loadTexts: lispUseMapServerTable.setStatus('current')
lispUseMapServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 12, 1), ).setIndexNames((0, "LISP-MIB", "lispUseMapServerAddressLength"), (0, "LISP-MIB", "lispUseMapServerAddress"))
if mibBuilder.loadTexts: lispUseMapServerEntry.setStatus('current')
lispUseMapServerAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseMapServerAddressLength.setStatus('current')
lispUseMapServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseMapServerAddress.setStatus('current')
lispUseMapServerState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseMapServerState.setStatus('current')
lispUseMapResolverTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 13), )
if mibBuilder.loadTexts: lispUseMapResolverTable.setStatus('current')
lispUseMapResolverEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 13, 1), ).setIndexNames((0, "LISP-MIB", "lispUseMapResolverAddressLength"), (0, "LISP-MIB", "lispUseMapResolverAddress"))
if mibBuilder.loadTexts: lispUseMapResolverEntry.setStatus('current')
lispUseMapResolverAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseMapResolverAddressLength.setStatus('current')
lispUseMapResolverAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseMapResolverAddress.setStatus('current')
lispUseMapResolverState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseMapResolverState.setStatus('current')
lispUseProxyEtrTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 14), )
if mibBuilder.loadTexts: lispUseProxyEtrTable.setStatus('current')
lispUseProxyEtrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 14, 1), ).setIndexNames((0, "LISP-MIB", "lispUseProxyEtrAddressLength"), (0, "LISP-MIB", "lispUseProxyEtrAddress"))
if mibBuilder.loadTexts: lispUseProxyEtrEntry.setStatus('current')
lispUseProxyEtrAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseProxyEtrAddressLength.setStatus('current')
lispUseProxyEtrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseProxyEtrAddress.setStatus('current')
lispUseProxyEtrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrPriority.setStatus('current')
lispUseProxyEtrWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrWeight.setStatus('current')
lispUseProxyEtrMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrMPriority.setStatus('current')
lispUseProxyEtrMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrMWeight.setStatus('current')
lispUseProxyEtrState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrState.setStatus('current')
lispCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2, 1))
lispGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2, 2))
lispMIBComplianceEtr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 1)).setObjects(("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceEtr = lispMIBComplianceEtr.setStatus('current')
lispMIBComplianceItr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 2)).setObjects(("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceItr = lispMIBComplianceItr.setStatus('current')
lispMIBCompliancePetr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 3)).setObjects(("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBCompliancePetr = lispMIBCompliancePetr.setStatus('current')
lispMIBCompliancePitr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 4)).setObjects(("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBCompliancePitr = lispMIBCompliancePitr.setStatus('current')
lispMIBComplianceMapServer = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 5)).setObjects(("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceMapServer = lispMIBComplianceMapServer.setStatus('current')
lispMIBComplianceMapResolver = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 6)).setObjects(("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceMapResolver = lispMIBComplianceMapResolver.setStatus('current')
lispMIBEtrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 1)).setObjects(("LISP-MIB", "lispFeaturesEtrEnabled"), ("LISP-MIB", "lispMappingDatabaseLsb"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocPriority"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocWeight"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocMPriority"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocMWeight"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocState"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocLocal"), ("LISP-MIB", "lispConfiguredLocatorRlocState"), ("LISP-MIB", "lispConfiguredLocatorRlocLocal"), ("LISP-MIB", "lispUseMapServerState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEtrGroup = lispMIBEtrGroup.setStatus('current')
lispMIBItrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 2)).setObjects(("LISP-MIB", "lispFeaturesItrEnabled"), ("LISP-MIB", "lispFeaturesMapCacheSize"), ("LISP-MIB", "lispMappingDatabaseLsb"), ("LISP-MIB", "lispMapCacheLocatorRlocPriority"), ("LISP-MIB", "lispMapCacheLocatorRlocWeight"), ("LISP-MIB", "lispMapCacheLocatorRlocMPriority"), ("LISP-MIB", "lispMapCacheLocatorRlocMWeight"), ("LISP-MIB", "lispMapCacheLocatorRlocState"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidExpiryTime"), ("LISP-MIB", "lispUseMapResolverState"), ("LISP-MIB", "lispUseProxyEtrPriority"), ("LISP-MIB", "lispUseProxyEtrWeight"), ("LISP-MIB", "lispUseProxyEtrMPriority"), ("LISP-MIB", "lispUseProxyEtrMWeight"), ("LISP-MIB", "lispUseProxyEtrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBItrGroup = lispMIBItrGroup.setStatus('current')
lispMIBPetrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 3)).setObjects(("LISP-MIB", "lispFeaturesProxyEtrEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBPetrGroup = lispMIBPetrGroup.setStatus('current')
lispMIBPitrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 4)).setObjects(("LISP-MIB", "lispFeaturesProxyItrEnabled"), ("LISP-MIB", "lispConfiguredLocatorRlocState"), ("LISP-MIB", "lispConfiguredLocatorRlocLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBPitrGroup = lispMIBPitrGroup.setStatus('current')
lispMIBMapServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 5)).setObjects(("LISP-MIB", "lispFeaturesMapServerEnabled"), ("LISP-MIB", "lispEidRegistrationIsRegistered"), ("LISP-MIB", "lispEidRegistrationLocatorRlocState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapServerGroup = lispMIBMapServerGroup.setStatus('current')
lispMIBMapResolverGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 6)).setObjects(("LISP-MIB", "lispFeaturesMapResolverEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapResolverGroup = lispMIBMapResolverGroup.setStatus('current')
lispMIBEtrExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 7)).setObjects(("LISP-MIB", "lispFeaturesRlocProbeEnabled"), ("LISP-MIB", "lispFeaturesEtrAcceptMapDataEnabled"), ("LISP-MIB", "lispFeaturesEtrAcceptMapDataVerifyEnabled"), ("LISP-MIB", "lispMappingDatabaseEidPartitioned"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEtrExtendedGroup = lispMIBEtrExtendedGroup.setStatus('current')
lispMIBItrExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 8)).setObjects(("LISP-MIB", "lispFeaturesRlocProbeEnabled"), ("LISP-MIB", "lispMapCacheEidState"), ("LISP-MIB", "lispMapCacheEidAuthoritative"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocLastPriorityChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastWeightChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastMPriorityChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastMWeightChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastStateChange"), ("LISP-MIB", "lispMapCacheLocatorRlocRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBItrExtendedGroup = lispMIBItrExtendedGroup.setStatus('current')
lispMIBMapServerExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 9)).setObjects(("LISP-MIB", "lispEidRegistrationSiteName"), ("LISP-MIB", "lispEidRegistrationSiteDescription"), ("LISP-MIB", "lispEidRegistrationIsRegistered"), ("LISP-MIB", "lispEidRegistrationFirstTimeStamp"), ("LISP-MIB", "lispEidRegistrationLastTimeStamp"), ("LISP-MIB", "lispEidRegistrationLastRegisterSenderLength"), ("LISP-MIB", "lispEidRegistrationLastRegisterSender"), ("LISP-MIB", "lispEidRegistrationEtrLastTimeStamp"), ("LISP-MIB", "lispEidRegistrationEtrTtl"), ("LISP-MIB", "lispEidRegistrationEtrProxyReply"), ("LISP-MIB", "lispEidRegistrationEtrWantsMapNotify"), ("LISP-MIB", "lispEidRegistrationLocatorIsLocal"), ("LISP-MIB", "lispEidRegistrationLocatorPriority"), ("LISP-MIB", "lispEidRegistrationLocatorWeight"), ("LISP-MIB", "lispEidRegistrationLocatorMPriority"), ("LISP-MIB", "lispEidRegistrationLocatorMWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapServerExtendedGroup = lispMIBMapServerExtendedGroup.setStatus('current')
lispMIBTuningParametersGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 10)).setObjects(("LISP-MIB", "lispFeaturesMapCacheLimit"), ("LISP-MIB", "lispFeaturesEtrMapCacheTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBTuningParametersGroup = lispMIBTuningParametersGroup.setStatus('current')
lispMIBEncapStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 11)).setObjects(("LISP-MIB", "lispMappingDatabaseTimeStamp"), ("LISP-MIB", "lispMappingDatabaseEncapOctets"), ("LISP-MIB", "lispMappingDatabaseEncapPackets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocTimeStamp"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocEncapOctets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocEncapPackets"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidEncapOctets"), ("LISP-MIB", "lispMapCacheEidEncapPackets"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocEncapOctets"), ("LISP-MIB", "lispMapCacheLocatorRlocEncapPackets"), ("LISP-MIB", "lispConfiguredLocatorRlocTimeStamp"), ("LISP-MIB", "lispConfiguredLocatorRlocEncapOctets"), ("LISP-MIB", "lispConfiguredLocatorRlocEncapPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEncapStatisticsGroup = lispMIBEncapStatisticsGroup.setStatus('current')
lispMIBDecapStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 12)).setObjects(("LISP-MIB", "lispMappingDatabaseTimeStamp"), ("LISP-MIB", "lispMappingDatabaseDecapOctets"), ("LISP-MIB", "lispMappingDatabaseDecapPackets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocTimeStamp"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocDecapOctets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocDecapPackets"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidDecapOctets"), ("LISP-MIB", "lispMapCacheEidDecapPackets"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocDecapOctets"), ("LISP-MIB", "lispMapCacheLocatorRlocDecapPackets"), ("LISP-MIB", "lispConfiguredLocatorRlocTimeStamp"), ("LISP-MIB", "lispConfiguredLocatorRlocDecapOctets"), ("LISP-MIB", "lispConfiguredLocatorRlocDecapPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBDecapStatisticsGroup = lispMIBDecapStatisticsGroup.setStatus('current')
lispMIBDiagnosticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 13)).setObjects(("LISP-MIB", "lispFeaturesRouterTimeStamp"), ("LISP-MIB", "lispGlobalStatsMapRequestsIn"), ("LISP-MIB", "lispGlobalStatsMapRequestsOut"), ("LISP-MIB", "lispGlobalStatsMapRepliesIn"), ("LISP-MIB", "lispGlobalStatsMapRepliesOut"), ("LISP-MIB", "lispGlobalStatsMapRegistersIn"), ("LISP-MIB", "lispGlobalStatsMapRegistersOut"), ("LISP-MIB", "lispEidRegistrationAuthenticationErrors"), ("LISP-MIB", "lispEidRegistrationRlocsMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBDiagnosticsGroup = lispMIBDiagnosticsGroup.setStatus('current')
lispMIBVrfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 14)).setObjects(("LISP-MIB", "lispIidToVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBVrfGroup = lispMIBVrfGroup.setStatus('current')
mibBuilder.exportSymbols("LISP-MIB", lispUseMapServerAddress=lispUseMapServerAddress, lispEidRegistrationLocatorRlocLength=lispEidRegistrationLocatorRlocLength, lispEidRegistrationLocatorRloc=lispEidRegistrationLocatorRloc, lispMapCacheLocatorRlocEncapPackets=lispMapCacheLocatorRlocEncapPackets, lispMapCacheEidDecapPackets=lispMapCacheEidDecapPackets, lispMappingDatabaseEncapOctets=lispMappingDatabaseEncapOctets, lispGlobalStatsTable=lispGlobalStatsTable, lispConfiguredLocatorRlocLocal=lispConfiguredLocatorRlocLocal, lispMapCacheEidLength=lispMapCacheEidLength, lispEidRegistrationEtrWantsMapNotify=lispEidRegistrationEtrWantsMapNotify, lispMappingDatabaseLocatorTable=lispMappingDatabaseLocatorTable, lispMappingDatabaseLocatorRlocMWeight=lispMappingDatabaseLocatorRlocMWeight, lispMapCacheLocatorRlocState=lispMapCacheLocatorRlocState, lispMappingDatabaseLocatorRlocDecapOctets=lispMappingDatabaseLocatorRlocDecapOctets, lispFeaturesMapServerEnabled=lispFeaturesMapServerEnabled, lispMapCacheEntry=lispMapCacheEntry, lispUseProxyEtrState=lispUseProxyEtrState, lispEidRegistrationTable=lispEidRegistrationTable, lispMappingDatabaseLocatorRlocMPriority=lispMappingDatabaseLocatorRlocMPriority, lispCompliances=lispCompliances, lispMIBItrGroup=lispMIBItrGroup, lispMIBComplianceItr=lispMIBComplianceItr, lispMIBPitrGroup=lispMIBPitrGroup, lispEidRegistrationLastRegisterSenderLength=lispEidRegistrationLastRegisterSenderLength, lispMappingDatabaseLocatorRlocLocal=lispMappingDatabaseLocatorRlocLocal, lispMapCacheLocatorTable=lispMapCacheLocatorTable, lispUseProxyEtrAddress=lispUseProxyEtrAddress, lispFeaturesEtrAcceptMapDataVerifyEnabled=lispFeaturesEtrAcceptMapDataVerifyEnabled, lispMapCacheTable=lispMapCacheTable, lispFeaturesEtrAcceptMapDataEnabled=lispFeaturesEtrAcceptMapDataEnabled, lispMappingDatabaseEntry=lispMappingDatabaseEntry, lispMappingDatabaseEncapPackets=lispMappingDatabaseEncapPackets, lispMIBMapServerExtendedGroup=lispMIBMapServerExtendedGroup, lispMapCacheLocatorRlocLastWeightChange=lispMapCacheLocatorRlocLastWeightChange, lispMapCacheEidAuthoritative=lispMapCacheEidAuthoritative, lispMIBVrfGroup=lispMIBVrfGroup, lispEidRegistrationEtrEntry=lispEidRegistrationEtrEntry, lispMapCacheLocatorRlocLastMPriorityChange=lispMapCacheLocatorRlocLastMPriorityChange, lispUseProxyEtrMWeight=lispUseProxyEtrMWeight, lispFeaturesMapCacheLimit=lispFeaturesMapCacheLimit, lispEidRegistrationLastRegisterSender=lispEidRegistrationLastRegisterSender, lispUseProxyEtrEntry=lispUseProxyEtrEntry, lispConfiguredLocatorRlocTimeStamp=lispConfiguredLocatorRlocTimeStamp, lispEidRegistrationEntry=lispEidRegistrationEntry, lispEidRegistrationEid=lispEidRegistrationEid, lispMapCacheLocatorRlocDecapPackets=lispMapCacheLocatorRlocDecapPackets, lispUseMapResolverTable=lispUseMapResolverTable, lispUseMapResolverState=lispUseMapResolverState, lispEidRegistrationFirstTimeStamp=lispEidRegistrationFirstTimeStamp, lispGlobalStatsMapRequestsIn=lispGlobalStatsMapRequestsIn, lispGlobalStatsMapRegistersIn=lispGlobalStatsMapRegistersIn, lispMapCacheLocatorRlocEncapOctets=lispMapCacheLocatorRlocEncapOctets, lispConfiguredLocatorRlocLength=lispConfiguredLocatorRlocLength, lispEidRegistrationLocatorMPriority=lispEidRegistrationLocatorMPriority, lispUseMapResolverAddressLength=lispUseMapResolverAddressLength, lispUseMapResolverEntry=lispUseMapResolverEntry, lispEidRegistrationLocatorRlocState=lispEidRegistrationLocatorRlocState, lispEidRegistrationSiteDescription=lispEidRegistrationSiteDescription, lispFeaturesEtrMapCacheTtl=lispFeaturesEtrMapCacheTtl, lispMappingDatabaseLocatorEntry=lispMappingDatabaseLocatorEntry, lispMappingDatabaseEid=lispMappingDatabaseEid, LispAddressType=LispAddressType, lispIidToVrfName=lispIidToVrfName, lispMapCacheLocatorRlocLastStateChange=lispMapCacheLocatorRlocLastStateChange, lispFeaturesItrEnabled=lispFeaturesItrEnabled, lispFeaturesAddressFamily=lispFeaturesAddressFamily, lispConfiguredLocatorRlocEncapPackets=lispConfiguredLocatorRlocEncapPackets, lispMappingDatabaseEidLength=lispMappingDatabaseEidLength, lispConformance=lispConformance, lispFeaturesTable=lispFeaturesTable, lispMappingDatabaseTimeStamp=lispMappingDatabaseTimeStamp, lispConfiguredLocatorRlocDecapOctets=lispConfiguredLocatorRlocDecapOctets, lispUseMapServerTable=lispUseMapServerTable, lispMIBTuningParametersGroup=lispMIBTuningParametersGroup, lispMapCacheLocatorRloc=lispMapCacheLocatorRloc, lispEidRegistrationEtrSenderLength=lispEidRegistrationEtrSenderLength, lispMapCacheLocatorRlocLastMWeightChange=lispMapCacheLocatorRlocLastMWeightChange, lispEidRegistrationEidLength=lispEidRegistrationEidLength, lispEidRegistrationLocatorPriority=lispEidRegistrationLocatorPriority, lispFeaturesEntry=lispFeaturesEntry, lispEidRegistrationEtrSender=lispEidRegistrationEtrSender, lispGroups=lispGroups, lispMIBCompliancePetr=lispMIBCompliancePetr, lispMIBDecapStatisticsGroup=lispMIBDecapStatisticsGroup, lispEidRegistrationLastTimeStamp=lispEidRegistrationLastTimeStamp, lispMIBEtrGroup=lispMIBEtrGroup, lispMappingDatabaseLocatorRlocTimeStamp=lispMappingDatabaseLocatorRlocTimeStamp, lispMappingDatabaseLocatorRlocWeight=lispMappingDatabaseLocatorRlocWeight, lispMapCacheLocatorRlocLength=lispMapCacheLocatorRlocLength, lispConfiguredLocatorRlocState=lispConfiguredLocatorRlocState, lispMappingDatabaseDecapOctets=lispMappingDatabaseDecapOctets, lispMapCacheEidEncapPackets=lispMapCacheEidEncapPackets, lispUseMapServerAddressLength=lispUseMapServerAddressLength, lispObjects=lispObjects, lispEidRegistrationEtrLastTimeStamp=lispEidRegistrationEtrLastTimeStamp, lispUseProxyEtrAddressLength=lispUseProxyEtrAddressLength, lispMapCacheLocatorRlocMPriority=lispMapCacheLocatorRlocMPriority, lispUseMapServerState=lispUseMapServerState, lispUseProxyEtrTable=lispUseProxyEtrTable, lispMapCacheLocatorRlocRtt=lispMapCacheLocatorRlocRtt, lispMappingDatabaseLocatorRloc=lispMappingDatabaseLocatorRloc, lispMapCacheLocatorRlocDecapOctets=lispMapCacheLocatorRlocDecapOctets, lispEidRegistrationLocatorMWeight=lispEidRegistrationLocatorMWeight, lispMIBPetrGroup=lispMIBPetrGroup, lispMappingDatabaseTable=lispMappingDatabaseTable, lispConfiguredLocatorEntry=lispConfiguredLocatorEntry, lispConfiguredLocatorRloc=lispConfiguredLocatorRloc, lispConfiguredLocatorRlocDecapPackets=lispConfiguredLocatorRlocDecapPackets, lispEidRegistrationLocatorEntry=lispEidRegistrationLocatorEntry, lispFeaturesProxyItrEnabled=lispFeaturesProxyItrEnabled, lispMappingDatabaseEidPartitioned=lispMappingDatabaseEidPartitioned, lispEidRegistrationRlocsMismatch=lispEidRegistrationRlocsMismatch, lispEidRegistrationLocatorIsLocal=lispEidRegistrationLocatorIsLocal, lispConfiguredLocatorTable=lispConfiguredLocatorTable, lispMappingDatabaseLocatorRlocEncapPackets=lispMappingDatabaseLocatorRlocEncapPackets, lispEidRegistrationEtrTable=lispEidRegistrationEtrTable, lispMapCacheEidDecapOctets=lispMapCacheEidDecapOctets, lispMIBEncapStatisticsGroup=lispMIBEncapStatisticsGroup, lispFeaturesProxyEtrEnabled=lispFeaturesProxyEtrEnabled, lispMIBComplianceMapServer=lispMIBComplianceMapServer, lispMappingDatabaseLocatorRlocLength=lispMappingDatabaseLocatorRlocLength, lispEidRegistrationLocatorWeight=lispEidRegistrationLocatorWeight, lispMIBCompliancePitr=lispMIBCompliancePitr, lispEidRegistrationIsRegistered=lispEidRegistrationIsRegistered, lispMIBMapServerGroup=lispMIBMapServerGroup, lispEidRegistrationEtrProxyReply=lispEidRegistrationEtrProxyReply, lispMapCacheLocatorEntry=lispMapCacheLocatorEntry, lispFeaturesMapCacheSize=lispFeaturesMapCacheSize, lispMapCacheLocatorRlocPriority=lispMapCacheLocatorRlocPriority, lispMapCacheLocatorRlocLastPriorityChange=lispMapCacheLocatorRlocLastPriorityChange, lispMapCacheEidTimeStamp=lispMapCacheEidTimeStamp, lispGlobalStatsEntry=lispGlobalStatsEntry, lispMappingDatabaseLocatorRlocState=lispMappingDatabaseLocatorRlocState, lispGlobalStatsMapRepliesOut=lispGlobalStatsMapRepliesOut, lispEidRegistrationEtrTtl=lispEidRegistrationEtrTtl, lispConfiguredLocatorRlocEncapOctets=lispConfiguredLocatorRlocEncapOctets, lispUseProxyEtrWeight=lispUseProxyEtrWeight, lispEidRegistrationLocatorTable=lispEidRegistrationLocatorTable, lispMappingDatabaseLocatorRlocEncapOctets=lispMappingDatabaseLocatorRlocEncapOctets, lispMapCacheLocatorRlocMWeight=lispMapCacheLocatorRlocMWeight, lispMIBComplianceMapResolver=lispMIBComplianceMapResolver, lispGlobalStatsMapRegistersOut=lispGlobalStatsMapRegistersOut, lispEidRegistrationAuthenticationErrors=lispEidRegistrationAuthenticationErrors, lispIidToVrfEntry=lispIidToVrfEntry, lispMapCacheEidExpiryTime=lispMapCacheEidExpiryTime, lispEidRegistrationSiteName=lispEidRegistrationSiteName, lispUseMapResolverAddress=lispUseMapResolverAddress, lispGlobalStatsMapRepliesIn=lispGlobalStatsMapRepliesIn, lispMapCacheEidEncapOctets=lispMapCacheEidEncapOctets, lispMapCacheLocatorRlocTimeStamp=lispMapCacheLocatorRlocTimeStamp, lispMIB=lispMIB, PYSNMP_MODULE_ID=lispMIB, lispMappingDatabaseDecapPackets=lispMappingDatabaseDecapPackets, lispMappingDatabaseLsb=lispMappingDatabaseLsb, lispUseProxyEtrPriority=lispUseProxyEtrPriority, lispUseProxyEtrMPriority=lispUseProxyEtrMPriority, lispFeaturesRlocProbeEnabled=lispFeaturesRlocProbeEnabled, lispGlobalStatsMapRequestsOut=lispGlobalStatsMapRequestsOut, lispUseMapServerEntry=lispUseMapServerEntry, lispMIBEtrExtendedGroup=lispMIBEtrExtendedGroup, lispMIBItrExtendedGroup=lispMIBItrExtendedGroup, lispFeaturesMapResolverEnabled=lispFeaturesMapResolverEnabled, lispMappingDatabaseLocatorRlocDecapPackets=lispMappingDatabaseLocatorRlocDecapPackets, lispMappingDatabaseLocatorRlocPriority=lispMappingDatabaseLocatorRlocPriority, lispMIBDiagnosticsGroup=lispMIBDiagnosticsGroup, lispFeaturesRouterTimeStamp=lispFeaturesRouterTimeStamp, lispMIBComplianceEtr=lispMIBComplianceEtr, lispMIBMapResolverGroup=lispMIBMapResolverGroup, lispMapCacheEid=lispMapCacheEid, lispMapCacheEidState=lispMapCacheEidState, lispIidToVrfTable=lispIidToVrfTable, lispFeaturesEtrEnabled=lispFeaturesEtrEnabled, lispMapCacheLocatorRlocWeight=lispMapCacheLocatorRlocWeight, lispFeaturesInstanceID=lispFeaturesInstanceID)
