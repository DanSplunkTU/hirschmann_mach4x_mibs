#
# PySNMP MIB module PRVT-STATISTICS-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-STATISTICS-CES-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:54:41 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
dsx1FarEndCurrentEntry, dsx1IntervalEntry, dsx1TotalEntry, dsx1CurrentEntry, dsx1FarEndIntervalEntry, dsx1FarEndTotalEntry = mibBuilder.importSymbols("DS1-MIB", "dsx1FarEndCurrentEntry", "dsx1IntervalEntry", "dsx1TotalEntry", "dsx1CurrentEntry", "dsx1FarEndIntervalEntry", "dsx1FarEndTotalEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Bits, Counter32, IpAddress, ModuleIdentity, Integer32, TimeTicks, Counter64, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Bits", "Counter32", "IpAddress", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonetVTCurrentEntry, sonetPathIntervalEntry, sonetSectionCurrentEntry, sonetLineIntervalEntry, sonetPathCurrentEntry, sonetFarEndVTIntervalEntry, sonetFarEndPathIntervalEntry, sonetVTIntervalEntry, sonetFarEndLineIntervalEntry, sonetLineCurrentEntry, sonetSectionIntervalEntry, sonetFarEndVTCurrentEntry, sonetFarEndPathCurrentEntry, sonetFarEndLineCurrentEntry = mibBuilder.importSymbols("SONET-MIB", "sonetVTCurrentEntry", "sonetPathIntervalEntry", "sonetSectionCurrentEntry", "sonetLineIntervalEntry", "sonetPathCurrentEntry", "sonetFarEndVTIntervalEntry", "sonetFarEndPathIntervalEntry", "sonetVTIntervalEntry", "sonetFarEndLineIntervalEntry", "sonetLineCurrentEntry", "sonetSectionIntervalEntry", "sonetFarEndVTCurrentEntry", "sonetFarEndPathCurrentEntry", "sonetFarEndLineCurrentEntry")
prvtStatisticsCESMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 114))
prvtStatisticsCESMib.setRevisions(('2009-04-07 00:00',))
if mibBuilder.loadTexts: prvtStatisticsCESMib.setLastUpdated('200904070000Z')
if mibBuilder.loadTexts: prvtStatisticsCESMib.setOrganization('BATM Advanced Communication')
prvtStatisticsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0))
prvtStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1))
prvtStatisticsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 2))
prvtStatisticsDSx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1))
prvtStatisticsSection = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2))
prvtStatisticsLine = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3))
prvtStatisticsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4))
prvtStatisticsVt = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5))
prvtDSx1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1), )
if mibBuilder.loadTexts: prvtDSx1CurrentTable.setStatus('current')
prvtDSx1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1), )
dsx1CurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1CurrentEntry"))
prvtDSx1CurrentEntry.setIndexNames(*dsx1CurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1CurrentEntry.setStatus('current')
prvtDSx1CurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentBBEs.setStatus('current')
prvtDSx1CurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentLSESs.setStatus('current')
prvtDSx1CurrentPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentPFCs.setStatus('current')
prvtDSx1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2), )
if mibBuilder.loadTexts: prvtDSx1IntervalTable.setStatus('current')
prvtDSx1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1), )
dsx1IntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1IntervalEntry"))
prvtDSx1IntervalEntry.setIndexNames(*dsx1IntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1IntervalEntry.setStatus('current')
prvtDSx1IntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalBBEs.setStatus('current')
prvtDSx1IntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalLSESs.setStatus('current')
prvtDSx1IntervalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalPFCs.setStatus('current')
prvtDSx1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3), )
if mibBuilder.loadTexts: prvtDSx1TotalTable.setStatus('current')
prvtDSx1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1), )
dsx1TotalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1TotalEntry"))
prvtDSx1TotalEntry.setIndexNames(*dsx1TotalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1TotalEntry.setStatus('current')
prvtDSx1TotalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalBBEs.setStatus('current')
prvtDSx1TotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalLSESs.setStatus('current')
prvtDSx1TotalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalPFCs.setStatus('current')
prvtDSx1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4), )
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentTable.setStatus('current')
prvtDSx1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1), )
dsx1FarEndCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndCurrentEntry"))
prvtDSx1FarEndCurrentEntry.setIndexNames(*dsx1FarEndCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentEntry.setStatus('current')
prvtFarEndDSx1CurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentBBEs.setStatus('current')
prvtFarEndDSx1CurrentPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentPFCs.setStatus('current')
prvtDSx1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5), )
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalTable.setStatus('current')
prvtDSx1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1), )
dsx1FarEndIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndIntervalEntry"))
prvtDSx1FarEndIntervalEntry.setIndexNames(*dsx1FarEndIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalEntry.setStatus('current')
prvtFarEndDSx1IntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalBBEs.setStatus('current')
prvtFarEndDSx1IntervalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalPFCs.setStatus('current')
prvtDSx1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6), )
if mibBuilder.loadTexts: prvtDSx1FarEndTotalTable.setStatus('current')
prvtDSx1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1), )
dsx1FarEndTotalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndTotalEntry"))
prvtDSx1FarEndTotalEntry.setIndexNames(*dsx1FarEndTotalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndTotalEntry.setStatus('current')
prvtFarEndDSx1TotalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1TotalBBEs.setStatus('current')
prvtFarEndDSx1TotalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1TotalPFCs.setStatus('current')
prvtSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSectionCurrentTable.setStatus('current')
prvtSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1), )
sonetSectionCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtSectionCurrentEntry"))
prvtSectionCurrentEntry.setIndexNames(*sonetSectionCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtSectionCurrentEntry.setStatus('current')
prvtSectionCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentBBEs.setStatus('current')
prvtSectionCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentESAs.setStatus('current')
prvtSectionCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentESBs.setStatus('current')
prvtSectionCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentUASs.setStatus('current')
prvtSectionCurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentLOSSs.setStatus('current')
prvtSectionCurrentOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentOOFs.setStatus('current')
prvtSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSectionIntervalTable.setStatus('current')
prvtSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1), )
sonetSectionIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtSectionIntervalEntry"))
prvtSectionIntervalEntry.setIndexNames(*sonetSectionIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtSectionIntervalEntry.setStatus('current')
prvtSectionIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalBBEs.setStatus('current')
prvtSectionIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalESAs.setStatus('current')
prvtSectionIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalESBs.setStatus('current')
prvtSectionIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalUASs.setStatus('current')
prvtSectionIntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalLOSSs.setStatus('current')
prvtSectionIntervalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalOOFs.setStatus('current')
prvtLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1), )
if mibBuilder.loadTexts: prvtLineCurrentTable.setStatus('current')
prvtLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1), )
sonetLineCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtLineCurrentEntry"))
prvtLineCurrentEntry.setIndexNames(*sonetLineCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtLineCurrentEntry.setStatus('current')
prvtLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentFCs.setStatus('current')
prvtLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentBBEs.setStatus('current')
prvtLineCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentESAs.setStatus('current')
prvtLineCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentESBs.setStatus('current')
prvtLineCurrentLBCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentLBCs.setStatus('current')
prvtLineCurrentOPRs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentOPRs.setStatus('current')
prtvLineCurrentOPTs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtvLineCurrentOPTs.setStatus('current')
prvtLineCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentAISs.setStatus('current')
prvtLineCurrentPSCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentPSCs.setStatus('current')
prvtLineCurrentPSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentPSDs.setStatus('current')
prvtLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2), )
if mibBuilder.loadTexts: prvtLineIntervalTable.setStatus('current')
prvtLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1), )
sonetLineIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtLineIntervalEntry"))
prvtLineIntervalEntry.setIndexNames(*sonetLineIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtLineIntervalEntry.setStatus('current')
prvtLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalFCs.setStatus('current')
prvtLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalBBEs.setStatus('current')
prvtLineIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalESAs.setStatus('current')
prvtLineIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalESBs.setStatus('current')
prvtLineIntervalLBCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalLBCs.setStatus('current')
prvtLineIntervalOPRs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalOPRs.setStatus('current')
prtvLineIntervalOPTs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtvLineIntervalOPTs.setStatus('current')
prvtLineIntevalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntevalAISs.setStatus('current')
prvtLineIntervalPSCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalPSCs.setStatus('current')
prvtLineIntervalPSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalPSDs.setStatus('current')
prvtFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3), )
if mibBuilder.loadTexts: prvtFarEndLineCurrentTable.setStatus('current')
prvtFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1), )
sonetFarEndLineCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndLineCurrentEntry"))
prvtFarEndLineCurrentEntry.setIndexNames(*sonetFarEndLineCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndLineCurrentEntry.setStatus('current')
prvtFarEndLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentFCs.setStatus('current')
prvtFarEndLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentBBEs.setStatus('current')
prvtFarEndLineCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentESAs.setStatus('current')
prvtFarEndLineCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentESBs.setStatus('current')
prvtFarEndLineCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentAISs.setStatus('current')
prvtFarEndLineCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentRFIs.setStatus('current')
prvtFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4), )
if mibBuilder.loadTexts: prvtFarEndLineIntervalTable.setStatus('current')
prvtFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1), )
sonetFarEndLineIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndLineIntervalEntry"))
prvtFarEndLineIntervalEntry.setIndexNames(*sonetFarEndLineIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndLineIntervalEntry.setStatus('current')
prvtFarEndLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalFCs.setStatus('current')
prvtFarEndLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalBBEs.setStatus('current')
prvtFarEndLineIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalESAs.setStatus('current')
prvtFarEndLineIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalESBs.setStatus('current')
prvtFarEndLineIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalAISs.setStatus('current')
prvtFarEndLineIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalRFIs.setStatus('current')
prvtPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1), )
if mibBuilder.loadTexts: prvtPathCurrentTable.setStatus('current')
prvtPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1), )
sonetPathCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtPathCurrentEntry"))
prvtPathCurrentEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtPathCurrentEntry.setStatus('current')
prvtPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentFCs.setStatus('current')
prvtPathCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentESAs.setStatus('current')
prvtPathCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentESBs.setStatus('current')
prvtPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentBBEs.setStatus('current')
prvtPathCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentAISs.setStatus('current')
prvtPathCurrentPPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPPJCPGen.setStatus('current')
prvtPathCurrentNPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentNPJCPGen.setStatus('current')
prvtPathCurrentPPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPPJCPDet.setStatus('current')
prvtPathCurrentNPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentNPJCPDet.setStatus('current')
prvtPathCurrentPJCSPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPJCSPDet.setStatus('current')
prvtPathCurrentPJCSPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPJCSPGen.setStatus('current')
prvtPathCurrentJCDiffP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentJCDiffP.setStatus('current')
prvtPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2), )
if mibBuilder.loadTexts: prvtPathIntervalTable.setStatus('current')
prvtPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1), )
sonetPathIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtPathIntervalEntry"))
prvtPathIntervalEntry.setIndexNames(*sonetPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtPathIntervalEntry.setStatus('current')
prvtPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalFCs.setStatus('current')
prvtPathIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalESAs.setStatus('current')
prvtPathIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalESBs.setStatus('current')
prvtPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalBBEs.setStatus('current')
prvtPathIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalAISs.setStatus('current')
prvtPathIntervalPPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPPJCPGen.setStatus('current')
prvtPathIntervalNPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalNPJCPGen.setStatus('current')
prvtPathIntervalPPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPPJCPDet.setStatus('current')
prvtPathIntervalNPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalNPJCPDet.setStatus('current')
prvtPathIntervalPJCSPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPJCSPDet.setStatus('current')
prvtPathIntervalPJCSPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPJCSPGen.setStatus('current')
prvtPathIntervalJCDiffP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalJCDiffP.setStatus('current')
prvtFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3), )
if mibBuilder.loadTexts: prvtFarEndPathCurrentTable.setStatus('current')
prvtFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1), )
sonetFarEndPathCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndPathCurrentEntry"))
prvtFarEndPathCurrentEntry.setIndexNames(*sonetFarEndPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndPathCurrentEntry.setStatus('current')
prvtFarEndPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentFCs.setStatus('current')
prvtFarEndPathCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentESAs.setStatus('current')
prvtFarEndPathCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentESBs.setStatus('current')
prvtFarEndPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentBBEs.setStatus('current')
prvtFarEndPathCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentRFIs.setStatus('current')
prvtFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4), )
if mibBuilder.loadTexts: prvtFarEndPathIntervalTable.setStatus('current')
prvtFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1), )
sonetFarEndPathIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndPathIntervalEntry"))
prvtFarEndPathIntervalEntry.setIndexNames(*sonetFarEndPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndPathIntervalEntry.setStatus('current')
prvtFarEndPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalFCs.setStatus('current')
prvtFarEndPathIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalESAs.setStatus('current')
prvtFarEndPathIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalESBs.setStatus('current')
prvtFarEndPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalBBEs.setStatus('current')
prvtFarEndPathIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalRFIs.setStatus('current')
prvtVtCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1), )
if mibBuilder.loadTexts: prvtVtCurrentTable.setStatus('current')
prvtVtCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1), )
sonetVTCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtVtCurrentEntry"))
prvtVtCurrentEntry.setIndexNames(*sonetVTCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtVtCurrentEntry.setStatus('current')
prvtVtCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentFCs.setStatus('current')
prvtVtCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentESAs.setStatus('current')
prvtVtCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentESBs.setStatus('current')
prvtVtCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentBBEs.setStatus('current')
prvtVtCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentAISs.setStatus('current')
prvtVtCurrentPPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPPJCVGen.setStatus('current')
prvtVtCurrentNPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentNPJCVGen.setStatus('current')
prvtVtCurrentPPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPPJCVDet.setStatus('current')
prvtVtCurrentNPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentNPJCVDet.setStatus('current')
prvtVtCurrentPJCSVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVDet.setStatus('current')
prvtVtCurrentPJCSVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVGen.setStatus('current')
prvtVtCurrentPJCSVPJCDiffV = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVPJCDiffV.setStatus('current')
prvtVtIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2), )
if mibBuilder.loadTexts: prvtVtIntervalTable.setStatus('current')
prvtVtIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1), )
sonetVTIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtVtIntervalEntry"))
prvtVtIntervalEntry.setIndexNames(*sonetVTIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtVtIntervalEntry.setStatus('current')
prvtVtIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalFCs.setStatus('current')
prvtVtIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalESAs.setStatus('current')
prvtVtIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalESBs.setStatus('current')
prvtVtIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalBBEs.setStatus('current')
prvtVtIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalAISs.setStatus('current')
prvtVtIntervalPPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPPJCVGen.setStatus('current')
prvtVtIntervalNPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalNPJCVGen.setStatus('current')
prvtVtIntervalPPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPPJCVDet.setStatus('current')
prvtVtIntervalNPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalNPJCVDet.setStatus('current')
prvtVtIntervalPJCSVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVDet.setStatus('current')
prvtVtIntervalPJCSVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVGen.setStatus('current')
prvtVtIntervalPJCSVPJCDiffV = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVPJCDiffV.setStatus('current')
prvtFarEndVtCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3), )
if mibBuilder.loadTexts: prvtFarEndVtCurrentTable.setStatus('current')
prvtFarEndVtCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1), )
sonetFarEndVTCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndVtCurrentEntry"))
prvtFarEndVtCurrentEntry.setIndexNames(*sonetFarEndVTCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndVtCurrentEntry.setStatus('current')
prvtFarEndVtCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentFCs.setStatus('current')
prvtFarEndVtCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentESAs.setStatus('current')
prvtFarEndVtCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentESBs.setStatus('current')
prvtFarEndVtCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentBBEs.setStatus('current')
prvtFarEndVtCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentRFIs.setStatus('current')
prvtFarEndVtIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4), )
if mibBuilder.loadTexts: prvtFarEndVtIntervalTable.setStatus('current')
prvtFarEndVtIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1), )
sonetFarEndVTIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndVtIntervalEntry"))
prvtFarEndVtIntervalEntry.setIndexNames(*sonetFarEndVTIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndVtIntervalEntry.setStatus('current')
prvtFarEndVtIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalFCs.setStatus('current')
prvtFarEndVtIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalESAs.setStatus('current')
prvtFarEndVtIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalESBs.setStatus('current')
prvtFarEndVtIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalBBEs.setStatus('current')
prvtFarEndVtIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalRFIs.setStatus('current')
class SonetLineAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("sonetAlarmLineMSAIS", 1), ("sonetAlarmLineLAIS", 2), ("sonetAlarmLineMSRDI", 3), ("sonetAlarmLineLRDI", 4))

class SonetSectionAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7))
    namedValues = NamedValues(("sonetAlarmSectionLOS", 5), ("sonetAlarmSectionLOF", 6), ("sonetAlarmSectionRSLOF", 7))

class SonetPathAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12))
    namedValues = NamedValues(("sonetAlarmPathLOP", 8), ("sonetAlarmPathAIS", 9), ("sonetAlarmPathRDI", 10), ("sonetAlarmPathUNEQUIPPED", 11), ("sonetAlarmPathLABELMISMATCH", 12))

class SonetVTAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("sonetAlarmVtTULOP", 13), ("sonetAlarmVtVLOP", 14), ("sonetAlarmVtTUAIS", 15), ("sonetAlarmVtVAIS", 16), ("sonetAlarmVtLPRDI", 17), ("sonetAlarmVtVRDI", 18), ("sonetAlarmVtLPRFI", 19), ("sonetAlarmVtVRFI", 20), ("sonetAlarmVtLPUNEQUIPPED", 21), ("sonetAlarmVtVUNEQUIPPED", 22), ("sonetAlarmVtLPLBLMISMATCH", 23), ("sonetAlarmVtVLBLMISMATCH", 24))

class SonetAlarmStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("sonetAlarmDown", 0), ("sonetAlarmUp", 1))

prvtSonetSectionAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3), )
if mibBuilder.loadTexts: prvtSonetSectionAlarmsTable.setStatus('current')
prvtSonetSectionAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetSectionAlarmsEntry.setStatus('current')
prvtSonetSectionAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1, 1), SonetSectionAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetSectionAlarmType.setStatus('current')
prvtSonetSectionAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetSectionAlarmStatus.setStatus('current')
prvtSonetLineAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5), )
if mibBuilder.loadTexts: prvtSonetLineAlarmsTable.setStatus('current')
prvtSonetLineAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetLineAlarmsEntry.setStatus('current')
prvtSonetLineAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1, 1), SonetLineAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetLineAlarmType.setStatus('current')
prvtSonetLineAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetLineAlarmStatus.setStatus('current')
prvtSonetPathAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5), )
if mibBuilder.loadTexts: prvtSonetPathAlarmsTable.setStatus('current')
prvtSonetPathAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetPathAlarmsEntry.setStatus('current')
prvtSonetPathAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1, 1), SonetPathAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetPathAlarmType.setStatus('current')
prvtSonetPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetPathAlarmStatus.setStatus('current')
prvtSonetVTAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5), )
if mibBuilder.loadTexts: prvtSonetVTAlarmsTable.setStatus('current')
prvtSonetVTAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetVTAlarmsEntry.setStatus('current')
prvtSonetVTAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1, 1), SonetVTAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetVTAlarmType.setStatus('current')
prvtSonetVTAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetVTAlarmStatus.setStatus('current')
prvtSonetSectionAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetSectionAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetSectionAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetSectionAlarms.setStatus('current')
prvtSonetLineAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetLineAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetLineAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetLineAlarms.setStatus('current')
prvtSonetPathAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetPathAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetPathAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetPathAlarms.setStatus('current')
prvtSonetVTAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetVTAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetVTAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetVTAlarms.setStatus('current')
mibBuilder.exportSymbols("PRVT-STATISTICS-CES-MIB", prvtFarEndPathCurrentBBEs=prvtFarEndPathCurrentBBEs, prvtFarEndLineIntervalFCs=prvtFarEndLineIntervalFCs, SonetPathAlarmType=SonetPathAlarmType, prvtVtIntervalTable=prvtVtIntervalTable, prvtFarEndPathIntervalBBEs=prvtFarEndPathIntervalBBEs, prvtLineIntervalPSCs=prvtLineIntervalPSCs, prvtVtCurrentPPJCVGen=prvtVtCurrentPPJCVGen, prvtDSx1TotalEntry=prvtDSx1TotalEntry, prvtPathIntervalBBEs=prvtPathIntervalBBEs, prvtVtCurrentNPJCVGen=prvtVtCurrentNPJCVGen, prvtPathIntervalEntry=prvtPathIntervalEntry, prvtDSx1TotalBBEs=prvtDSx1TotalBBEs, prvtSectionIntervalESBs=prvtSectionIntervalESBs, prvtLineCurrentPSDs=prvtLineCurrentPSDs, prvtLineCurrentAISs=prvtLineCurrentAISs, prtvLineIntervalOPTs=prtvLineIntervalOPTs, prvtFarEndVtCurrentTable=prvtFarEndVtCurrentTable, prvtSonetVTAlarmsEntry=prvtSonetVTAlarmsEntry, prvtSonetVTAlarmStatus=prvtSonetVTAlarmStatus, prvtLineCurrentPSCs=prvtLineCurrentPSCs, prvtVtCurrentEntry=prvtVtCurrentEntry, prvtStatisticsConformance=prvtStatisticsConformance, prvtLineIntervalEntry=prvtLineIntervalEntry, prvtSonetLineAlarms=prvtSonetLineAlarms, prvtVtIntervalPPJCVGen=prvtVtIntervalPPJCVGen, prvtDSx1CurrentEntry=prvtDSx1CurrentEntry, prvtFarEndLineCurrentRFIs=prvtFarEndLineCurrentRFIs, prvtFarEndLineCurrentAISs=prvtFarEndLineCurrentAISs, prvtVtIntervalAISs=prvtVtIntervalAISs, prvtFarEndVtCurrentFCs=prvtFarEndVtCurrentFCs, prvtPathIntervalPPJCPDet=prvtPathIntervalPPJCPDet, prvtFarEndVtIntervalBBEs=prvtFarEndVtIntervalBBEs, SonetSectionAlarmType=SonetSectionAlarmType, prvtPathIntervalESBs=prvtPathIntervalESBs, prvtPathIntervalJCDiffP=prvtPathIntervalJCDiffP, prvtFarEndDSx1TotalPFCs=prvtFarEndDSx1TotalPFCs, prvtPathCurrentESBs=prvtPathCurrentESBs, prvtFarEndLineCurrentESBs=prvtFarEndLineCurrentESBs, prvtDSx1TotalTable=prvtDSx1TotalTable, prvtSonetPathAlarmStatus=prvtSonetPathAlarmStatus, prvtDSx1CurrentBBEs=prvtDSx1CurrentBBEs, prvtDSx1FarEndCurrentTable=prvtDSx1FarEndCurrentTable, prvtFarEndDSx1TotalBBEs=prvtFarEndDSx1TotalBBEs, prvtPathIntervalTable=prvtPathIntervalTable, prvtFarEndPathCurrentRFIs=prvtFarEndPathCurrentRFIs, prvtSonetLineAlarmStatus=prvtSonetLineAlarmStatus, prvtFarEndLineIntervalBBEs=prvtFarEndLineIntervalBBEs, prvtVtCurrentTable=prvtVtCurrentTable, prvtStatisticsSection=prvtStatisticsSection, prvtFarEndLineIntervalTable=prvtFarEndLineIntervalTable, SonetAlarmStatus=SonetAlarmStatus, SonetLineAlarmType=SonetLineAlarmType, prvtDSx1IntervalEntry=prvtDSx1IntervalEntry, prvtLineIntervalESBs=prvtLineIntervalESBs, prvtVtIntervalPJCSVDet=prvtVtIntervalPJCSVDet, prvtFarEndLineCurrentBBEs=prvtFarEndLineCurrentBBEs, prvtVtIntervalNPJCVGen=prvtVtIntervalNPJCVGen, prvtLineCurrentBBEs=prvtLineCurrentBBEs, prvtSonetSectionAlarms=prvtSonetSectionAlarms, prvtPathCurrentBBEs=prvtPathCurrentBBEs, prvtPathCurrentPJCSPDet=prvtPathCurrentPJCSPDet, prvtVtIntervalPPJCVDet=prvtVtIntervalPPJCVDet, prvtVtIntervalPJCSVGen=prvtVtIntervalPJCSVGen, prvtLineIntervalLBCs=prvtLineIntervalLBCs, prvtSectionCurrentTable=prvtSectionCurrentTable, prvtSectionCurrentBBEs=prvtSectionCurrentBBEs, prvtFarEndPathIntervalESAs=prvtFarEndPathIntervalESAs, prvtLineCurrentOPRs=prvtLineCurrentOPRs, prvtSectionCurrentESAs=prvtSectionCurrentESAs, prvtSonetSectionAlarmsTable=prvtSonetSectionAlarmsTable, prvtDSx1FarEndTotalEntry=prvtDSx1FarEndTotalEntry, prvtFarEndDSx1CurrentBBEs=prvtFarEndDSx1CurrentBBEs, prvtLineCurrentTable=prvtLineCurrentTable, prvtFarEndPathCurrentESAs=prvtFarEndPathCurrentESAs, prvtPathCurrentPJCSPGen=prvtPathCurrentPJCSPGen, prvtFarEndVtIntervalTable=prvtFarEndVtIntervalTable, prvtFarEndLineIntervalEntry=prvtFarEndLineIntervalEntry, prvtVtIntervalBBEs=prvtVtIntervalBBEs, prvtDSx1FarEndTotalTable=prvtDSx1FarEndTotalTable, prvtLineIntervalTable=prvtLineIntervalTable, prvtPathIntervalPJCSPGen=prvtPathIntervalPJCSPGen, prvtVtIntervalFCs=prvtVtIntervalFCs, prvtSonetVTAlarmsTable=prvtSonetVTAlarmsTable, prvtPathIntervalNPJCPGen=prvtPathIntervalNPJCPGen, prvtFarEndVtCurrentESAs=prvtFarEndVtCurrentESAs, prvtFarEndLineCurrentFCs=prvtFarEndLineCurrentFCs, PYSNMP_MODULE_ID=prvtStatisticsCESMib, prvtFarEndPathIntervalESBs=prvtFarEndPathIntervalESBs, prvtDSx1IntervalBBEs=prvtDSx1IntervalBBEs, prvtLineIntervalFCs=prvtLineIntervalFCs, prvtVtIntervalNPJCVDet=prvtVtIntervalNPJCVDet, prvtVtCurrentPJCSVPJCDiffV=prvtVtCurrentPJCSVPJCDiffV, prvtFarEndVtCurrentRFIs=prvtFarEndVtCurrentRFIs, prvtFarEndDSx1CurrentPFCs=prvtFarEndDSx1CurrentPFCs, prvtVtIntervalESAs=prvtVtIntervalESAs, prvtSonetLineAlarmsTable=prvtSonetLineAlarmsTable, prvtLineCurrentEntry=prvtLineCurrentEntry, prvtStatisticsPath=prvtStatisticsPath, prvtFarEndPathCurrentESBs=prvtFarEndPathCurrentESBs, prvtPathCurrentEntry=prvtPathCurrentEntry, prvtFarEndVtIntervalESBs=prvtFarEndVtIntervalESBs, prvtSectionIntervalOOFs=prvtSectionIntervalOOFs, prvtFarEndLineCurrentTable=prvtFarEndLineCurrentTable, prvtSonetLineAlarmType=prvtSonetLineAlarmType, prvtSectionCurrentESBs=prvtSectionCurrentESBs, prvtVtIntervalESBs=prvtVtIntervalESBs, prvtSectionIntervalLOSSs=prvtSectionIntervalLOSSs, prvtPathCurrentESAs=prvtPathCurrentESAs, prvtVtCurrentBBEs=prvtVtCurrentBBEs, prvtSonetSectionAlarmType=prvtSonetSectionAlarmType, prvtFarEndPathIntervalEntry=prvtFarEndPathIntervalEntry, prvtFarEndPathCurrentTable=prvtFarEndPathCurrentTable, prtvLineCurrentOPTs=prtvLineCurrentOPTs, prvtFarEndLineIntervalESBs=prvtFarEndLineIntervalESBs, prvtFarEndLineIntervalAISs=prvtFarEndLineIntervalAISs, prvtVtIntervalEntry=prvtVtIntervalEntry, prvtDSx1FarEndCurrentEntry=prvtDSx1FarEndCurrentEntry, prvtFarEndPathIntervalRFIs=prvtFarEndPathIntervalRFIs, prvtSectionIntervalUASs=prvtSectionIntervalUASs, SonetVTAlarmType=SonetVTAlarmType, prvtSonetPathAlarmsTable=prvtSonetPathAlarmsTable, prvtPathIntervalFCs=prvtPathIntervalFCs, prvtDSx1CurrentTable=prvtDSx1CurrentTable, prvtDSx1FarEndIntervalTable=prvtDSx1FarEndIntervalTable, prvtLineIntervalBBEs=prvtLineIntervalBBEs, prvtSectionIntervalEntry=prvtSectionIntervalEntry, prvtFarEndPathIntervalTable=prvtFarEndPathIntervalTable, prvtSectionCurrentEntry=prvtSectionCurrentEntry, prvtFarEndVtIntervalFCs=prvtFarEndVtIntervalFCs, prvtStatisticsNotifications=prvtStatisticsNotifications, prvtDSx1TotalLSESs=prvtDSx1TotalLSESs, prvtFarEndPathCurrentEntry=prvtFarEndPathCurrentEntry, prvtVtCurrentAISs=prvtVtCurrentAISs, prvtFarEndLineCurrentESAs=prvtFarEndLineCurrentESAs, prvtSectionCurrentLOSSs=prvtSectionCurrentLOSSs, prvtPathIntervalESAs=prvtPathIntervalESAs, prvtPathCurrentTable=prvtPathCurrentTable, prvtSonetPathAlarmsEntry=prvtSonetPathAlarmsEntry, prvtDSx1FarEndIntervalEntry=prvtDSx1FarEndIntervalEntry, prvtPathCurrentNPJCPDet=prvtPathCurrentNPJCPDet, prvtFarEndVtIntervalESAs=prvtFarEndVtIntervalESAs, prvtSonetPathAlarmType=prvtSonetPathAlarmType, prvtSonetSectionAlarmStatus=prvtSonetSectionAlarmStatus, prvtVtCurrentNPJCVDet=prvtVtCurrentNPJCVDet, prvtPathIntervalNPJCPDet=prvtPathIntervalNPJCPDet, prvtPathIntervalPJCSPDet=prvtPathIntervalPJCSPDet, prvtLineIntervalOPRs=prvtLineIntervalOPRs, prvtLineIntervalPSDs=prvtLineIntervalPSDs, prvtDSx1CurrentPFCs=prvtDSx1CurrentPFCs, prvtPathCurrentFCs=prvtPathCurrentFCs, prvtVtCurrentESAs=prvtVtCurrentESAs, prvtSectionIntervalESAs=prvtSectionIntervalESAs, prvtDSx1IntervalTable=prvtDSx1IntervalTable, prvtFarEndVtIntervalRFIs=prvtFarEndVtIntervalRFIs, prvtFarEndVtCurrentBBEs=prvtFarEndVtCurrentBBEs, prvtPathCurrentAISs=prvtPathCurrentAISs, prvtSonetVTAlarms=prvtSonetVTAlarms, prvtFarEndLineCurrentEntry=prvtFarEndLineCurrentEntry, prvtPathCurrentJCDiffP=prvtPathCurrentJCDiffP, prvtVtCurrentESBs=prvtVtCurrentESBs, prvtVtCurrentPPJCVDet=prvtVtCurrentPPJCVDet, prvtFarEndVtCurrentESBs=prvtFarEndVtCurrentESBs, prvtDSx1IntervalPFCs=prvtDSx1IntervalPFCs, prvtLineCurrentESBs=prvtLineCurrentESBs, prvtSectionCurrentOOFs=prvtSectionCurrentOOFs, prvtLineIntervalESAs=prvtLineIntervalESAs, prvtSonetVTAlarmType=prvtSonetVTAlarmType, prvtVtCurrentPJCSVDet=prvtVtCurrentPJCSVDet, prvtSonetLineAlarmsEntry=prvtSonetLineAlarmsEntry, prvtFarEndLineIntervalESAs=prvtFarEndLineIntervalESAs, prvtSonetPathAlarms=prvtSonetPathAlarms, prvtLineIntevalAISs=prvtLineIntevalAISs, prvtPathCurrentPPJCPGen=prvtPathCurrentPPJCPGen, prvtFarEndDSx1IntervalBBEs=prvtFarEndDSx1IntervalBBEs, prvtFarEndPathCurrentFCs=prvtFarEndPathCurrentFCs, prvtLineCurrentFCs=prvtLineCurrentFCs, prvtDSx1IntervalLSESs=prvtDSx1IntervalLSESs, prvtStatisticsCESMib=prvtStatisticsCESMib, prvtDSx1CurrentLSESs=prvtDSx1CurrentLSESs, prvtStatisticsObjects=prvtStatisticsObjects, prvtSectionIntervalBBEs=prvtSectionIntervalBBEs, prvtVtCurrentFCs=prvtVtCurrentFCs, prvtFarEndVtCurrentEntry=prvtFarEndVtCurrentEntry, prvtDSx1TotalPFCs=prvtDSx1TotalPFCs, prvtSectionIntervalTable=prvtSectionIntervalTable, prvtSonetSectionAlarmsEntry=prvtSonetSectionAlarmsEntry, prvtLineCurrentLBCs=prvtLineCurrentLBCs, prvtLineCurrentESAs=prvtLineCurrentESAs, prvtPathCurrentPPJCPDet=prvtPathCurrentPPJCPDet, prvtFarEndPathIntervalFCs=prvtFarEndPathIntervalFCs, prvtPathIntervalAISs=prvtPathIntervalAISs, prvtFarEndVtIntervalEntry=prvtFarEndVtIntervalEntry, prvtPathIntervalPPJCPGen=prvtPathIntervalPPJCPGen, prvtSectionCurrentUASs=prvtSectionCurrentUASs, prvtFarEndDSx1IntervalPFCs=prvtFarEndDSx1IntervalPFCs, prvtVtCurrentPJCSVGen=prvtVtCurrentPJCSVGen, prvtFarEndLineIntervalRFIs=prvtFarEndLineIntervalRFIs, prvtStatisticsVt=prvtStatisticsVt, prvtStatisticsLine=prvtStatisticsLine, prvtStatisticsDSx1=prvtStatisticsDSx1, prvtPathCurrentNPJCPGen=prvtPathCurrentNPJCPGen, prvtVtIntervalPJCSVPJCDiffV=prvtVtIntervalPJCSVPJCDiffV)
