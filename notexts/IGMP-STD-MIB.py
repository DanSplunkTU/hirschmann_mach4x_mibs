#
# PySNMP MIB module IGMP-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/IGMP-STD-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 20:06:47 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
mib_2, ObjectIdentity, Integer32, Counter32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, ModuleIdentity, Bits, Counter64, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "NotificationType", "iso")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
igmpStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 85))
igmpStdMIB.setRevisions(('2000-09-28 00:00',))
if mibBuilder.loadTexts: igmpStdMIB.setLastUpdated('200009280000Z')
if mibBuilder.loadTexts: igmpStdMIB.setOrganization('IETF IDMR Working Group.')
igmpMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 85, 1))
igmpInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 85, 1, 1), )
if mibBuilder.loadTexts: igmpInterfaceTable.setStatus('current')
igmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 85, 1, 1, 1), ).setIndexNames((0, "IGMP-STD-MIB", "igmpInterfaceIfIndex"))
if mibBuilder.loadTexts: igmpInterfaceEntry.setStatus('current')
igmpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: igmpInterfaceIfIndex.setStatus('current')
igmpInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 2), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceQueryInterval.setStatus('current')
igmpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceStatus.setStatus('current')
igmpInterfaceVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 4), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceVersion.setStatus('current')
igmpInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceQuerier.setStatus('current')
igmpInterfaceQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceQueryMaxResponseTime.setStatus('current')
igmpInterfaceQuerierUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceQuerierUpTime.setStatus('current')
igmpInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceQuerierExpiryTime.setStatus('current')
igmpInterfaceVersion1QuerierTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceVersion1QuerierTimer.setStatus('current')
igmpInterfaceWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceWrongVersionQueries.setStatus('current')
igmpInterfaceJoins = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceJoins.setStatus('current')
igmpInterfaceProxyIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceProxyIfIndex.setStatus('current')
igmpInterfaceGroups = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceGroups.setStatus('current')
igmpInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceRobustness.setStatus('current')
igmpInterfaceLastMembQueryIntvl = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpInterfaceLastMembQueryIntvl.setStatus('current')
igmpCacheTable = MibTable((1, 3, 6, 1, 2, 1, 85, 1, 2), )
if mibBuilder.loadTexts: igmpCacheTable.setStatus('current')
igmpCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 85, 1, 2, 1), ).setIndexNames((0, "IGMP-STD-MIB", "igmpCacheAddress"), (0, "IGMP-STD-MIB", "igmpCacheIfIndex"))
if mibBuilder.loadTexts: igmpCacheEntry.setStatus('current')
igmpCacheAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: igmpCacheAddress.setStatus('current')
igmpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: igmpCacheIfIndex.setStatus('current')
igmpCacheSelf = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpCacheSelf.setStatus('current')
igmpCacheLastReporter = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheLastReporter.setStatus('current')
igmpCacheUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheUpTime.setStatus('current')
igmpCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheExpiryTime.setStatus('current')
igmpCacheStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpCacheStatus.setStatus('current')
igmpCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheVersion1HostTimer.setStatus('current')
igmpMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 85, 2))
igmpMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 85, 2, 1))
igmpMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 85, 2, 2))
igmpV1HostMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 85, 2, 1, 1)).setObjects(("IGMP-STD-MIB", "igmpBaseMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV1HostMIBCompliance = igmpV1HostMIBCompliance.setStatus('current')
igmpV1RouterMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 85, 2, 1, 2)).setObjects(("IGMP-STD-MIB", "igmpBaseMIBGroup"), ("IGMP-STD-MIB", "igmpRouterMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV1RouterMIBCompliance = igmpV1RouterMIBCompliance.setStatus('current')
igmpV2HostMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 85, 2, 1, 3)).setObjects(("IGMP-STD-MIB", "igmpBaseMIBGroup"), ("IGMP-STD-MIB", "igmpV2HostMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV2HostMIBCompliance = igmpV2HostMIBCompliance.setStatus('current')
igmpV2RouterMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 85, 2, 1, 4)).setObjects(("IGMP-STD-MIB", "igmpBaseMIBGroup"), ("IGMP-STD-MIB", "igmpRouterMIBGroup"), ("IGMP-STD-MIB", "igmpV2RouterMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV2RouterMIBCompliance = igmpV2RouterMIBCompliance.setStatus('current')
igmpBaseMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 1)).setObjects(("IGMP-STD-MIB", "igmpCacheSelf"), ("IGMP-STD-MIB", "igmpCacheStatus"), ("IGMP-STD-MIB", "igmpInterfaceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpBaseMIBGroup = igmpBaseMIBGroup.setStatus('current')
igmpRouterMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 2)).setObjects(("IGMP-STD-MIB", "igmpCacheUpTime"), ("IGMP-STD-MIB", "igmpCacheExpiryTime"), ("IGMP-STD-MIB", "igmpInterfaceJoins"), ("IGMP-STD-MIB", "igmpInterfaceGroups"), ("IGMP-STD-MIB", "igmpCacheLastReporter"), ("IGMP-STD-MIB", "igmpInterfaceQuerierUpTime"), ("IGMP-STD-MIB", "igmpInterfaceQuerierExpiryTime"), ("IGMP-STD-MIB", "igmpInterfaceQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpRouterMIBGroup = igmpRouterMIBGroup.setStatus('current')
igmpV2HostMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 3)).setObjects(("IGMP-STD-MIB", "igmpInterfaceVersion1QuerierTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV2HostMIBGroup = igmpV2HostMIBGroup.setStatus('current')
igmpHostOptMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 4)).setObjects(("IGMP-STD-MIB", "igmpCacheLastReporter"), ("IGMP-STD-MIB", "igmpInterfaceQuerier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpHostOptMIBGroup = igmpHostOptMIBGroup.setStatus('current')
igmpV2RouterMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 5)).setObjects(("IGMP-STD-MIB", "igmpInterfaceVersion"), ("IGMP-STD-MIB", "igmpInterfaceQuerier"), ("IGMP-STD-MIB", "igmpInterfaceQueryMaxResponseTime"), ("IGMP-STD-MIB", "igmpInterfaceRobustness"), ("IGMP-STD-MIB", "igmpInterfaceWrongVersionQueries"), ("IGMP-STD-MIB", "igmpInterfaceLastMembQueryIntvl"), ("IGMP-STD-MIB", "igmpCacheVersion1HostTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV2RouterMIBGroup = igmpV2RouterMIBGroup.setStatus('current')
igmpV2ProxyMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 85, 2, 2, 6)).setObjects(("IGMP-STD-MIB", "igmpInterfaceProxyIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    igmpV2ProxyMIBGroup = igmpV2ProxyMIBGroup.setStatus('current')
mibBuilder.exportSymbols("IGMP-STD-MIB", igmpInterfaceTable=igmpInterfaceTable, igmpInterfaceJoins=igmpInterfaceJoins, igmpHostOptMIBGroup=igmpHostOptMIBGroup, igmpCacheExpiryTime=igmpCacheExpiryTime, igmpInterfaceQuerierExpiryTime=igmpInterfaceQuerierExpiryTime, igmpCacheStatus=igmpCacheStatus, igmpInterfaceStatus=igmpInterfaceStatus, igmpInterfaceQueryMaxResponseTime=igmpInterfaceQueryMaxResponseTime, igmpInterfaceProxyIfIndex=igmpInterfaceProxyIfIndex, PYSNMP_MODULE_ID=igmpStdMIB, igmpMIBConformance=igmpMIBConformance, igmpCacheAddress=igmpCacheAddress, igmpV1RouterMIBCompliance=igmpV1RouterMIBCompliance, igmpMIBCompliances=igmpMIBCompliances, igmpInterfaceQueryInterval=igmpInterfaceQueryInterval, igmpRouterMIBGroup=igmpRouterMIBGroup, igmpV2RouterMIBGroup=igmpV2RouterMIBGroup, igmpMIBGroups=igmpMIBGroups, igmpInterfaceRobustness=igmpInterfaceRobustness, igmpInterfaceIfIndex=igmpInterfaceIfIndex, igmpInterfaceEntry=igmpInterfaceEntry, igmpCacheEntry=igmpCacheEntry, igmpCacheLastReporter=igmpCacheLastReporter, igmpCacheIfIndex=igmpCacheIfIndex, igmpV1HostMIBCompliance=igmpV1HostMIBCompliance, igmpInterfaceGroups=igmpInterfaceGroups, igmpV2HostMIBGroup=igmpV2HostMIBGroup, igmpStdMIB=igmpStdMIB, igmpInterfaceVersion=igmpInterfaceVersion, igmpCacheUpTime=igmpCacheUpTime, igmpCacheSelf=igmpCacheSelf, igmpInterfaceQuerier=igmpInterfaceQuerier, igmpMIBObjects=igmpMIBObjects, igmpV2RouterMIBCompliance=igmpV2RouterMIBCompliance, igmpV2HostMIBCompliance=igmpV2HostMIBCompliance, igmpInterfaceWrongVersionQueries=igmpInterfaceWrongVersionQueries, igmpInterfaceVersion1QuerierTimer=igmpInterfaceVersion1QuerierTimer, igmpV2ProxyMIBGroup=igmpV2ProxyMIBGroup, igmpCacheVersion1HostTimer=igmpCacheVersion1HostTimer, igmpInterfaceLastMembQueryIntvl=igmpInterfaceLastMembQueryIntvl, igmpCacheTable=igmpCacheTable, igmpBaseMIBGroup=igmpBaseMIBGroup, igmpInterfaceQuerierUpTime=igmpInterfaceQuerierUpTime)
