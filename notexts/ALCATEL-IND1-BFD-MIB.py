#
# PySNMP MIB module ALCATEL-IND1-BFD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-BFD-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:11:49 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1BFD, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1BFD")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Counter64, Bits, NotificationType, Gauge32, Integer32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Counter64", "Bits", "NotificationType", "Gauge32", "Integer32", "Counter32", "iso")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1BfdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1))
alcatelIND1BfdMIB.setRevisions(('2010-05-05 00:00',))
if mibBuilder.loadTexts: alcatelIND1BfdMIB.setLastUpdated('201005050000Z')
if mibBuilder.loadTexts: alcatelIND1BfdMIB.setOrganization('Alcatel-Lucent')
alaBfdObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1))
if mibBuilder.loadTexts: alaBfdObjects.setStatus('current')
alcatelIND1BfdMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2))
if mibBuilder.loadTexts: alcatelIND1BfdMIBConformance.setStatus('current')
class AlaBfdInterval(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class AlaBfdDiag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noDiagnostic", 0), ("controlDetectionTimeExpired", 1), ("echoFunctionFailed", 2), ("neighborSignaledSessionDown", 3), ("forwardingPlaneReset", 4), ("pathDown", 5), ("concatenatedPathDown", 6), ("administrativelyDown", 7), ("reverseConcatenatedPathDown", 8))

class AlaBfdStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

alaBfdGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1))
alaBfdGlobalVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdGlobalVersionNumber.setStatus('current')
alaBfdGlobalAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 2), AlaBfdStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBfdGlobalAdminStatus.setStatus('current')
alaBfdGlobalTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 3), AlaBfdInterval().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBfdGlobalTxInterval.setStatus('current')
alaBfdGlobalRxInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 4), AlaBfdInterval().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBfdGlobalRxInterval.setStatus('current')
alaBfdGlobalDetectMult = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBfdGlobalDetectMult.setStatus('current')
alaBfdGlobalEchoRxInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 6), AlaBfdInterval().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBfdGlobalEchoRxInterval.setStatus('current')
alaBfdGlobalProtocolApps = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("vrrp", 0), ("staticRtg", 1), ("ospf", 2), ("bgp", 3), ("isis", 4), ("pim", 5), ("dvmrp", 6), ("ospf3", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdGlobalProtocolApps.setStatus('current')
alaBfdIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2), )
if mibBuilder.loadTexts: alaBfdIntfTable.setStatus('current')
alaBfdIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-BFD-MIB", "alaBfdIntfIndex"))
if mibBuilder.loadTexts: alaBfdIntfEntry.setStatus('current')
alaBfdIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaBfdIntfIndex.setStatus('current')
alaBfdIntfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfAddrType.setStatus('current')
alaBfdIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfAddr.setStatus('current')
alaBfdIntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 4), AlaBfdStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfAdminStatus.setStatus('current')
alaBfdIntfDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 5), AlaBfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfDesiredMinTxInterval.setStatus('current')
alaBfdIntfReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 6), AlaBfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfReqMinRxInterval.setStatus('current')
alaBfdIntfReqMinEchoRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 7), AlaBfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfReqMinEchoRxInterval.setStatus('current')
alaBfdIntfDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfDetectMult.setStatus('current')
alaBfdIntfAuthPresFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfAuthPresFlag.setStatus('current')
alaBfdIntfAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("simplePassword", 2), ("keyedMD5", 3), ("meticulousKeyedMD5", 4), ("keyedSHA1", 5), ("meticulousKeyedSHA1", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfAuthenticationType.setStatus('current')
alaBfdIntfIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfIfName.setStatus('current')
alaBfdIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfOperStatus.setStatus('current')
alaBfdIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBfdIntfRowStatus.setStatus('current')
alaBfdSessTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3), )
if mibBuilder.loadTexts: alaBfdSessTable.setStatus('current')
alaBfdSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-BFD-MIB", "alaBfdSessDiscriminator"))
if mibBuilder.loadTexts: alaBfdSessEntry.setStatus('current')
alaBfdSessDiscriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: alaBfdSessDiscriminator.setStatus('current')
alaBfdSessNeighborAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessNeighborAddrType.setStatus('current')
alaBfdSessNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessNeighborAddr.setStatus('current')
alaBfdSessSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 4), Bits().clone(namedValues=NamedValues(("asynchronous", 0), ("echo", 1), ("demand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessSessionType.setStatus('current')
alaBfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessRemoteDiscr.setStatus('current')
alaBfdSessUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessUdpPort.setStatus('current')
alaBfdSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adminDown", 1), ("down", 2), ("init", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessState.setStatus('current')
alaBfdSessDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 8), AlaBfdDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessDiag.setStatus('current')
alaBfdSessOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("asyncModeWEchoFunction", 1), ("asynchModeWOEchoFunction", 2), ("demandModeWEchoFunction", 3), ("demandModeWOEchoFunction", 4), ("echoOnly", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessOperMode.setStatus('current')
alaBfdSessControlPlanIndepFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessControlPlanIndepFlag.setStatus('current')
alaBfdSessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessIfIndex.setStatus('current')
alaBfdSessNegotiatedTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 13), AlaBfdInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessNegotiatedTxInterval.setStatus('current')
alaBfdSessNegotiatedRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 14), AlaBfdInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessNegotiatedRxInterval.setStatus('current')
alaBfdSessEchoRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 15), AlaBfdInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessEchoRxInterval.setStatus('current')
alaBfdSessProtocolApps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 3, 1, 16), Bits().clone(namedValues=NamedValues(("vrrp", 0), ("staticRtg", 1), ("ospf", 2), ("bgp", 3), ("isis", 4), ("pim", 5), ("dvmrp", 6), ("ospf3", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessProtocolApps.setStatus('current')
alaBfdSessPerfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4), )
if mibBuilder.loadTexts: alaBfdSessPerfTable.setStatus('current')
alaBfdSessPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1), )
alaBfdSessEntry.registerAugmentions(("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfEntry"))
alaBfdSessPerfEntry.setIndexNames(*alaBfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: alaBfdSessPerfEntry.setStatus('current')
alaBfdSessPerfPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfPktIn.setStatus('current')
alaBfdSessPerfPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfPktOut.setStatus('current')
alaBfdSessPerfEchoOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfEchoOut.setStatus('current')
alaBfdSessPerfEchoIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfEchoIn.setStatus('current')
alaBfdSessPerfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfUpTime.setStatus('current')
alaBfdSessPerfLastSessDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfLastSessDownTime.setStatus('current')
alaBfdSessPerfLastCommLostDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 7), AlaBfdDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfLastCommLostDiag.setStatus('current')
alaBfdSessPerfSessUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfSessUpCount.setStatus('current')
alaBfdSessPerfDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBfdSessPerfDiscTime.setStatus('current')
alcatelIND1BfdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 1))
alcatelIND1BfdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 2))
alcatelIND1BfdMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-BFD-MIB", "alaBfdBasicGroup"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfCfgGroup"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessGroup"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1BfdMIBCompliance = alcatelIND1BfdMIBCompliance.setStatus('current')
alaBfdBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalVersionNumber"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalAdminStatus"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalTxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalDetectMult"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalEchoRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdGlobalProtocolApps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaBfdBasicGroup = alaBfdBasicGroup.setStatus('current')
alaBfdIntfCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-BFD-MIB", "alaBfdIntfAddr"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfAddrType"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfAdminStatus"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfDesiredMinTxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfReqMinRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfReqMinEchoRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfDetectMult"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfAuthPresFlag"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfAuthenticationType"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfIfName"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfOperStatus"), ("ALCATEL-IND1-BFD-MIB", "alaBfdIntfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaBfdIntfCfgGroup = alaBfdIntfCfgGroup.setStatus('current')
alaBfdSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-BFD-MIB", "alaBfdSessNeighborAddrType"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessNeighborAddr"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessSessionType"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessRemoteDiscr"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessUdpPort"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessState"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessDiag"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessOperMode"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessControlPlanIndepFlag"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessIfIndex"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessNegotiatedTxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessNegotiatedRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessEchoRxInterval"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessProtocolApps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaBfdSessGroup = alaBfdSessGroup.setStatus('current')
alaBfdSessPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 45, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfPktIn"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfPktOut"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfEchoOut"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfEchoIn"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfUpTime"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfLastSessDownTime"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfLastCommLostDiag"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfSessUpCount"), ("ALCATEL-IND1-BFD-MIB", "alaBfdSessPerfDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaBfdSessPerfGroup = alaBfdSessPerfGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-BFD-MIB", alaBfdIntfOperStatus=alaBfdIntfOperStatus, alaBfdIntfTable=alaBfdIntfTable, alaBfdSessDiag=alaBfdSessDiag, alaBfdSessPerfUpTime=alaBfdSessPerfUpTime, alaBfdIntfEntry=alaBfdIntfEntry, alaBfdGlobalAdminStatus=alaBfdGlobalAdminStatus, alaBfdIntfReqMinEchoRxInterval=alaBfdIntfReqMinEchoRxInterval, alaBfdSessPerfEchoOut=alaBfdSessPerfEchoOut, alaBfdSessState=alaBfdSessState, alaBfdSessPerfPktOut=alaBfdSessPerfPktOut, alaBfdSessSessionType=alaBfdSessSessionType, alaBfdGlobalEchoRxInterval=alaBfdGlobalEchoRxInterval, alaBfdSessDiscriminator=alaBfdSessDiscriminator, AlaBfdStatus=AlaBfdStatus, alcatelIND1BfdMIBCompliances=alcatelIND1BfdMIBCompliances, alaBfdSessPerfGroup=alaBfdSessPerfGroup, alaBfdObjects=alaBfdObjects, alaBfdGlobalVersionNumber=alaBfdGlobalVersionNumber, alaBfdIntfIndex=alaBfdIntfIndex, alaBfdSessNeighborAddr=alaBfdSessNeighborAddr, alaBfdGlobalDetectMult=alaBfdGlobalDetectMult, alaBfdSessPerfSessUpCount=alaBfdSessPerfSessUpCount, alaBfdSessNeighborAddrType=alaBfdSessNeighborAddrType, alaBfdSessPerfLastCommLostDiag=alaBfdSessPerfLastCommLostDiag, alaBfdSessPerfPktIn=alaBfdSessPerfPktIn, alaBfdIntfIfName=alaBfdIntfIfName, AlaBfdInterval=AlaBfdInterval, alaBfdIntfAdminStatus=alaBfdIntfAdminStatus, alaBfdSessProtocolApps=alaBfdSessProtocolApps, alaBfdSessPerfLastSessDownTime=alaBfdSessPerfLastSessDownTime, alaBfdIntfAddr=alaBfdIntfAddr, PYSNMP_MODULE_ID=alcatelIND1BfdMIB, alaBfdIntfAuthenticationType=alaBfdIntfAuthenticationType, alcatelIND1BfdMIBGroups=alcatelIND1BfdMIBGroups, alaBfdSessGroup=alaBfdSessGroup, alaBfdIntfReqMinRxInterval=alaBfdIntfReqMinRxInterval, alaBfdIntfCfgGroup=alaBfdIntfCfgGroup, alaBfdGlobalTxInterval=alaBfdGlobalTxInterval, alaBfdIntfDetectMult=alaBfdIntfDetectMult, alaBfdSessUdpPort=alaBfdSessUdpPort, alaBfdSessTable=alaBfdSessTable, alaBfdIntfAddrType=alaBfdIntfAddrType, alaBfdGlobalRxInterval=alaBfdGlobalRxInterval, alaBfdSessControlPlanIndepFlag=alaBfdSessControlPlanIndepFlag, alaBfdSessNegotiatedTxInterval=alaBfdSessNegotiatedTxInterval, alaBfdSessRemoteDiscr=alaBfdSessRemoteDiscr, alcatelIND1BfdMIBConformance=alcatelIND1BfdMIBConformance, alaBfdGlobalObjects=alaBfdGlobalObjects, alaBfdSessIfIndex=alaBfdSessIfIndex, alaBfdSessEchoRxInterval=alaBfdSessEchoRxInterval, alaBfdSessOperMode=alaBfdSessOperMode, alaBfdSessPerfEntry=alaBfdSessPerfEntry, alaBfdSessPerfEchoIn=alaBfdSessPerfEchoIn, alcatelIND1BfdMIB=alcatelIND1BfdMIB, alaBfdGlobalProtocolApps=alaBfdGlobalProtocolApps, alaBfdIntfAuthPresFlag=alaBfdIntfAuthPresFlag, AlaBfdDiag=AlaBfdDiag, alaBfdSessEntry=alaBfdSessEntry, alaBfdSessNegotiatedRxInterval=alaBfdSessNegotiatedRxInterval, alaBfdSessPerfDiscTime=alaBfdSessPerfDiscTime, alcatelIND1BfdMIBCompliance=alcatelIND1BfdMIBCompliance, alaBfdIntfRowStatus=alaBfdIntfRowStatus, alaBfdBasicGroup=alaBfdBasicGroup, alaBfdIntfDesiredMinTxInterval=alaBfdIntfDesiredMinTxInterval, alaBfdSessPerfTable=alaBfdSessPerfTable)
