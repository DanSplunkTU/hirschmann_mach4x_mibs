#
# PySNMP MIB module PRVT-MPLS-TE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-MPLS-TE-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 17:28:22 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
mpls, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "mpls")
prvtMplsTeMibEntityIndex, = mibBuilder.importSymbols("PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Unsigned32, Counter32, Counter64, iso, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter32", "Counter64", "iso", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "NotificationType")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
prvtMplsTeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2))
prvtMplsTeMIB.setRevisions(('2009-02-10 00:00',))
if mibBuilder.loadTexts: prvtMplsTeMIB.setLastUpdated('200902100000Z')
if mibBuilder.loadTexts: prvtMplsTeMIB.setOrganization('BATM Advanced Communication')
class MplsPathIndexOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class MplsTunnelInstanceIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class TeHopAddressAS(TextualConvention, Unsigned32):
    reference = 'Textual Conventions for Internet Network Addresses, [RFC3291].'
    status = 'current'
    displayHint = 'd'

class TeHopAddressUnnum(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class TeHopAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class TeHopAddressType(TextualConvention, Integer32):
    reference = 'TEXTUAL-CONVENTIONs for Internet Network Addresses, RFC3291. Constraint-Based LSP Setup using LDP, [RFC3212]'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("asnumber", 3), ("unnum", 4), ("lspid", 5), ("unnumv6", 6))

class MplsOwner(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("snmp", 3), ("ldp", 4), ("crldp", 5), ("rsvpTe", 6), ("policyAgent", 7), ("mplsVpn", 8), ("cli", 9), ("dynamic", 10))

class MplsPathIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class MplsTunnelAffinity(TextualConvention, Unsigned32):
    reference = 'RSVP-TE: Extensions to RSVP for LSP Tunnels, RFC3209, Section 4.7.4.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class MplsLSPID(TextualConvention, OctetString):
    reference = 'RSVP-TE: Extensions to RSVP for LSP Tunnels, [RFC3209]. Constraint-Based LSP Setup using LDP, [RFC3212].'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(2, 2), ValueSizeConstraint(6, 6), ValueSizeConstraint(32, 32), )
class MplsBurstSize(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class MplsBitRate(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class MplsExtendedTunnelIdOctetType(TextualConvention, OctetString):
    reference = 'RSVP-TE: Extensions to RSVP for LSP Tunnels, [RFC3209]. Constraint-Based LSP Setup using LDP, [RFC3212].'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
class MplsTunnelStorageType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("other", 1), ("volatile", 2), ("nonVolatile", 3), ("permanent", 4), ("readOnly", 5))

class MplsTunnelInterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class MplsGeneralizedLabelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notValid", 0), ("mplsLabel", 1), ("generalizedLabel", 2), ("wavebandLabel", 3))

class MplsTunnelPrivateDataSyntax(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 24)

class MplsTunnelTNAAddress(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class MplsGeneralizedLabel(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class MplsTeObjectReservedTC(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

mplsTeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0))
mplsTeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1))
mplsTeObjectReserved1 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 1), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved1.setStatus('current')
mplsManTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2), )
if mibBuilder.loadTexts: mplsManTunnelTable.setStatus('current')
mplsManTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsManTunnelIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsManTunnelInstance"))
if mibBuilder.loadTexts: mplsManTunnelEntry.setStatus('current')
mplsManTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32638)))
if mibBuilder.loadTexts: mplsManTunnelIndex.setStatus('current')
mplsManTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsManTunnelInstance.setStatus('current')
mplsManTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelRowStatus.setStatus('current')
mplsManTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 4), MplsExtendedTunnelIdOctetType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelIngressLSRId.setStatus('current')
mplsManTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 5), MplsExtendedTunnelIdOctetType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelEgressLSRId.setStatus('current')
mplsManTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelName.setStatus('current')
mplsManTunnelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelDescr.setStatus('current')
mplsManTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 8), MplsTunnelInterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelIfIndex.setStatus('current')
mplsManTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelSetupPrio.setStatus('current')
mplsManTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelHoldingPrio.setStatus('current')
mplsManTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 11), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4), ("reserved5", 5), ("bandwidthProtect", 6), ("nodeProtect", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelSessionAttributes.setStatus('current')
mplsManTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelLocalProtectInUse.setStatus('current')
mplsManTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 13), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelHopTableIndex.setStatus('current')
mplsManTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 14), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelPathInUse.setStatus('current')
mplsManTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 15), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelIncludeAnyAffinity.setStatus('current')
mplsManTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 16), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelIncludeAllAffinity.setStatus('current')
mplsManTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 17), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelExcludeAnyAffinity.setStatus('current')
mplsManTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelAdminStatus.setStatus('current')
mplsManTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("resignaling", 8), ("suppressed", 9), ("preempted", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelOperStatus.setStatus('current')
mplsManTunnelAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 20), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("reserved4", 4), ("labelRecordingDesired", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelAttributes.setStatus('current')
mplsManTunnelPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamicFull", 1), ("explicit", 2), ("dynamicPartial", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelPathComp.setStatus('current')
mplsManTunnelFastRerouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noFastReroute", 0), ("detourFastReroute", 1), ("facilityFastReroute", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelFastRerouteMode.setStatus('current')
mplsManTunnelBackupSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupSetupPrio.setStatus('current')
mplsManTunnelBackupHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupHoldingPrio.setStatus('current')
mplsManTunnelBackupIncAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 25), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupIncAny.setStatus('current')
mplsManTunnelBackupIncAll = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 26), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupIncAll.setStatus('current')
mplsManTunnelBackupExcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 27), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupExcAny.setStatus('current')
mplsManTunnelBackupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 28), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupBandwidth.setStatus('current')
mplsManTunnelBackupMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelBackupMaxHops.setStatus('current')
mplsManTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 12288))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelMtu.setStatus('current')
mplsManTunnelRebuildTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelRebuildTimer.setStatus('current')
mplsManTunnelOperStatusFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 32), Bits().clone(namedValues=NamedValues(("empty", 0), ("tunnelResignalling", 1), ("tunnelSuppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelOperStatusFlags.setStatus('current')
mplsManTunnelGuardedDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 33), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelGuardedDest.setStatus('current')
mplsManTunnelMBBTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsManTunnelMBBTimeOut.setStatus('current')
mplsManTunnelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 35), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelOwner.setStatus('current')
mplsManTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 36), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelARHopTableIndex.setStatus('current')
mplsManTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 2, 1, 37), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsManTunnelCHopTableIndex.setStatus('current')
mplsTeObjectReserved3 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 3), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved3.setStatus('current')
mplsAutoTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4), )
if mibBuilder.loadTexts: mplsAutoTunnelTable.setStatus('current')
mplsAutoTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsAutoTunnelIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsAutoTunnelInstance"))
if mibBuilder.loadTexts: mplsAutoTunnelEntry.setStatus('current')
mplsAutoTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32639, 32767)))
if mibBuilder.loadTexts: mplsAutoTunnelIndex.setStatus('current')
mplsAutoTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsAutoTunnelInstance.setStatus('current')
mplsAutoTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsAutoTunnelRowStatus.setStatus('current')
mplsAutoTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 4), MplsExtendedTunnelIdOctetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelIngressLSRId.setStatus('current')
mplsAutoTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 5), MplsExtendedTunnelIdOctetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelEgressLSRId.setStatus('current')
mplsAutoTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelName.setStatus('current')
mplsAutoTunnelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelDescr.setStatus('current')
mplsAutoTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 8), MplsTunnelInterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelIfIndex.setStatus('current')
mplsAutoTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelSetupPrio.setStatus('current')
mplsAutoTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelHoldingPrio.setStatus('current')
mplsAutoTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 11), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4), ("reserved5", 5), ("bandwidthProtect", 6), ("nodeProtect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelSessionAttributes.setStatus('current')
mplsAutoTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelLocalProtectInUse.setStatus('current')
mplsAutoTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 14), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelHopTableIndex.setStatus('current')
mplsAutoTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 15), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelPathInUse.setStatus('current')
mplsAutoTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 16), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelIncludeAnyAffinity.setStatus('current')
mplsAutoTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 17), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelIncludeAllAffinity.setStatus('current')
mplsAutoTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 18), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelExcludeAnyAffinity.setStatus('current')
mplsAutoTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("resignaling", 8), ("suppressed", 9), ("preempted", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelOperStatus.setStatus('current')
mplsAutoTunnelAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 20), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("reserved4", 4), ("labelRecordingDesired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelAttributes.setStatus('current')
mplsAutoTunnelPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamicFull", 1), ("explicit", 2), ("dynamicPartial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelPathComp.setStatus('current')
mplsAutoTunnelFastRerouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noFastReroute", 0), ("detourFastReroute", 1), ("facilityFastReroute", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelFastRerouteMode.setStatus('current')
mplsAutoTunnelBackupSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupSetupPrio.setStatus('current')
mplsAutoTunnelBackupHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupHoldingPrio.setStatus('current')
mplsAutoTunnelBackupIncAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 25), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupIncAny.setStatus('current')
mplsAutoTunnelBackupIncAll = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 26), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupIncAll.setStatus('current')
mplsAutoTunnelBackupExcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 27), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupExcAny.setStatus('current')
mplsAutoTunnelBackupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 28), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupBandwidth.setStatus('current')
mplsAutoTunnelBackupMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelBackupMaxHops.setStatus('current')
mplsAutoTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelMtu.setStatus('current')
mplsAutoTunnelRebuildTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelRebuildTimer.setStatus('current')
mplsAutoTunnelOperStatusFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 32), Bits().clone(namedValues=NamedValues(("empty", 0), ("tunnelResignalling", 1), ("tunnelSuppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelOperStatusFlags.setStatus('current')
mplsAutoTunnelGuardedDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelGuardedDest.setStatus('current')
mplsAutoTunnelMBBTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelMBBTimeOut.setStatus('current')
mplsAutoTunnelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 35), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelOwner.setStatus('current')
mplsAutoTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 36), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelARHopTableIndex.setStatus('current')
mplsAutoTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 4, 1, 37), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsAutoTunnelCHopTableIndex.setStatus('current')
mplsTeObjectReserved5 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 5), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved5.setStatus('current')
mplsDynTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6), )
if mibBuilder.loadTexts: mplsDynTunnelTable.setStatus('current')
mplsDynTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsDynTunnelIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsDynTunnelInstance"))
if mibBuilder.loadTexts: mplsDynTunnelEntry.setStatus('current')
mplsDynTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32768, 65535)))
if mibBuilder.loadTexts: mplsDynTunnelIndex.setStatus('current')
mplsDynTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsDynTunnelInstance.setStatus('current')
mplsDynTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 3), MplsExtendedTunnelIdOctetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelIngressLSRId.setStatus('current')
mplsDynTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 4), MplsExtendedTunnelIdOctetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelEgressLSRId.setStatus('current')
mplsDynTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelName.setStatus('current')
mplsDynTunnelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelDescr.setStatus('current')
mplsDynTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 7), MplsTunnelInterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelIfIndex.setStatus('current')
mplsDynTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelSetupPrio.setStatus('current')
mplsDynTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelHoldingPrio.setStatus('current')
mplsDynTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 10), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4), ("reserved5", 5), ("bandwidthProtect", 6), ("nodeProtect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelSessionAttributes.setStatus('current')
mplsDynTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelLocalProtectInUse.setStatus('current')
mplsDynTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 12), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelHopTableIndex.setStatus('current')
mplsDynTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 13), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelPathInUse.setStatus('current')
mplsDynTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 14), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelIncludeAnyAffinity.setStatus('current')
mplsDynTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 15), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelIncludeAllAffinity.setStatus('current')
mplsDynTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 16), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelExcludeAnyAffinity.setStatus('current')
mplsDynTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelAdminStatus.setStatus('current')
mplsDynTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("resignaling", 8), ("suppressed", 9), ("preempted", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelOperStatus.setStatus('current')
mplsDynTunnelAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 19), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("reserved4", 4), ("labelRecordingDesired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelAttributes.setStatus('current')
mplsDynTunnelPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamicFull", 1), ("explicit", 2), ("dynamicPartial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelPathComp.setStatus('current')
mplsDynTunnelFastRerouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noFastReroute", 0), ("detourFastReroute", 1), ("facilityFastReroute", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelFastRerouteMode.setStatus('current')
mplsDynTunnelBackupSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupSetupPrio.setStatus('current')
mplsDynTunnelBackupHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupHoldingPrio.setStatus('current')
mplsDynTunnelBackupIncAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 24), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupIncAny.setStatus('current')
mplsDynTunnelBackupIncAll = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 25), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupIncAll.setStatus('current')
mplsDynTunnelBackupExcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 26), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupExcAny.setStatus('current')
mplsDynTunnelBackupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 27), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupBandwidth.setStatus('current')
mplsDynTunnelBackupMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelBackupMaxHops.setStatus('current')
mplsDynTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelMtu.setStatus('current')
mplsDynTunnelRebuildTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelRebuildTimer.setStatus('current')
mplsDynTunnelOperStatusFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 31), Bits().clone(namedValues=NamedValues(("empty", 0), ("tunnelResignalling", 1), ("tunnelSuppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelOperStatusFlags.setStatus('current')
mplsDynTunnelGuardedDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelGuardedDest.setStatus('current')
mplsDynTunnelMBBTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelMBBTimeOut.setStatus('current')
mplsDynTunnelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 34), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelOwner.setStatus('current')
mplsDynTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 35), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelARHopTableIndex.setStatus('current')
mplsDynTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 6, 1, 36), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDynTunnelCHopTableIndex.setStatus('current')
mplsTeObjectReserved7 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 7), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved7.setStatus('current')
mplsTunnelManHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8), )
if mibBuilder.loadTexts: mplsTunnelManHopTable.setStatus('current')
mplsTunnelManHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelManHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelManHopPathOptionIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelManHopIndex"))
if mibBuilder.loadTexts: mplsTunnelManHopEntry.setStatus('current')
mplsTunnelManHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelManHopListIndex.setStatus('current')
mplsTunnelManHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelManHopPathOptionIndex.setStatus('current')
mplsTunnelManHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelManHopIndex.setStatus('current')
mplsTunnelManHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopRowStatus.setStatus('current')
mplsTunnelManHopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopEnable.setStatus('current')
mplsTunnelManHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 6), TeHopAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopAddrType.setStatus('current')
mplsTunnelManHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 7), TeHopAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopIpAddr.setStatus('current')
mplsTunnelManHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopIpPrefixLen.setStatus('current')
mplsTunnelManHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopType.setStatus('current')
mplsTunnelManHopInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 8, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManHopInclude.setStatus('current')
mplsTeObjectReserved9 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 9), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved9.setStatus('current')
mplsTunnelAutoHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10), )
if mibBuilder.loadTexts: mplsTunnelAutoHopTable.setStatus('current')
mplsTunnelAutoHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelAutoHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelAutoHopPathOptionIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelAutoHopIndex"))
if mibBuilder.loadTexts: mplsTunnelAutoHopEntry.setStatus('current')
mplsTunnelAutoHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelAutoHopListIndex.setStatus('current')
mplsTunnelAutoHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelAutoHopPathOptionIndex.setStatus('current')
mplsTunnelAutoHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelAutoHopIndex.setStatus('current')
mplsTunnelAutoHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 4), TeHopAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoHopAddrType.setStatus('current')
mplsTunnelAutoHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 5), TeHopAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoHopIpAddr.setStatus('current')
mplsTunnelAutoHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoHopIpPrefixLen.setStatus('current')
mplsTunnelAutoHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoHopType.setStatus('current')
mplsTunnelAutoHopInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 10, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoHopInclude.setStatus('current')
mplsTeObjectReserved11 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 11), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved11.setStatus('current')
mplsTunnelManResTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12), )
if mibBuilder.loadTexts: mplsTunnelManResTable.setStatus('current')
mplsTunnelManResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelManResIndex"))
if mibBuilder.loadTexts: mplsTunnelManResEntry.setStatus('current')
mplsTunnelManResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1073610751)))
if mibBuilder.loadTexts: mplsTunnelManResIndex.setStatus('current')
mplsTunnelManResRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManResRowStatus.setStatus('current')
mplsTunnelManResMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 3), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManResMaxRate.setStatus('current')
mplsTunnelManResMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 4), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManResMeanRate.setStatus('current')
mplsTunnelManResMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManResMaxBurstSize.setStatus('current')
mplsTunnelManResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelManResMeanBurstSize.setStatus('current')
mplsTunnelManResExBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 12, 1, 7), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelManResExBurstSize.setStatus('current')
mplsTeObjectReserved13 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 13), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved13.setStatus('current')
mplsTunnelAutoResTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14), )
if mibBuilder.loadTexts: mplsTunnelAutoResTable.setStatus('current')
mplsTunnelAutoResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelAutoResIndex"))
if mibBuilder.loadTexts: mplsTunnelAutoResEntry.setStatus('current')
mplsTunnelAutoResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1073610752, 1073741823)))
if mibBuilder.loadTexts: mplsTunnelAutoResIndex.setStatus('current')
mplsTunnelAutoResMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 2), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoResMaxRate.setStatus('current')
mplsTunnelAutoResMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 3), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoResMeanRate.setStatus('current')
mplsTunnelAutoResMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoResMaxBurstSize.setStatus('current')
mplsTunnelAutoResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoResMeanBurstSize.setStatus('current')
mplsTunnelAutoResExBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 14, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelAutoResExBurstSize.setStatus('current')
mplsTeObjectReserved15 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 15), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved15.setStatus('current')
mplsTunnelDynResTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16), )
if mibBuilder.loadTexts: mplsTunnelDynResTable.setStatus('current')
mplsTunnelDynResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelDynResIndex"))
if mibBuilder.loadTexts: mplsTunnelDynResEntry.setStatus('current')
mplsTunnelDynResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1073741824, 2147483647)))
if mibBuilder.loadTexts: mplsTunnelDynResIndex.setStatus('current')
mplsTunnelDynResMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 2), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResMaxRate.setStatus('current')
mplsTunnelDynResMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 3), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResMeanRate.setStatus('current')
mplsTunnelDynResMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResMaxBurstSize.setStatus('current')
mplsTunnelDynResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResMeanBurstSize.setStatus('current')
mplsTunnelDynResExBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResExBurstSize.setStatus('current')
mplsTunnelDynResStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 16, 1, 7), MplsTunnelStorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelDynResStorageType.setStatus('current')
mplsTeObjectReserved17 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 17), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved17.setStatus('current')
mplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18), )
if mibBuilder.loadTexts: mplsTunnelARHopTable.setStatus('current')
mplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelARHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setStatus('current')
mplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setStatus('current')
mplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setStatus('current')
mplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18, 1, 3), TeHopAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setStatus('current')
mplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 18, 1, 4), TeHopAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpAddr.setStatus('current')
mplsTeObjectReserved19 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 19), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved19.setStatus('current')
mplsTunnelCHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20), )
if mibBuilder.loadTexts: mplsTunnelCHopTable.setStatus('current')
mplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelCHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelCHopIndex"))
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setStatus('current')
mplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setStatus('current')
mplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setStatus('current')
mplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 3), TeHopAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setStatus('current')
mplsTunnelCHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 4), TeHopAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpAddr.setStatus('current')
mplsTunnelCHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpPrefixLen.setStatus('current')
mplsTunnelCHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopType.setStatus('current')
mplsTeObjectReserved21 = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 21), MplsTeObjectReservedTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTeObjectReserved21.setStatus('current')
prvtMplsTunnelTrapEnableTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 22), )
if mibBuilder.loadTexts: prvtMplsTunnelTrapEnableTable.setStatus('current')
prvtMplsTunnelTrapEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 22, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: prvtMplsTunnelTrapEnableEntry.setStatus('current')
prvtMplsTunnelTrapEnableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 1, 22, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsTunnelTrapEnableValue.setStatus('current')
mplsManTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 1)).setObjects(("PRVT-MPLS-TE-MIB", "mplsManTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelName"))
if mibBuilder.loadTexts: mplsManTunnelUp.setStatus('current')
mplsManTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 2)).setObjects(("PRVT-MPLS-TE-MIB", "mplsManTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelName"))
if mibBuilder.loadTexts: mplsManTunnelDown.setStatus('current')
mplsAutoTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 3)).setObjects(("PRVT-MPLS-TE-MIB", "mplsAutoTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsAutoTunnelName"))
if mibBuilder.loadTexts: mplsAutoTunnelUp.setStatus('current')
mplsAutoTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 4)).setObjects(("PRVT-MPLS-TE-MIB", "mplsAutoTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsAutoTunnelName"))
if mibBuilder.loadTexts: mplsAutoTunnelDown.setStatus('current')
mplsDynTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 5)).setObjects(("PRVT-MPLS-TE-MIB", "mplsDynTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsDynTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsDynTunnelName"))
if mibBuilder.loadTexts: mplsDynTunnelUp.setStatus('current')
mplsDynTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 6)).setObjects(("PRVT-MPLS-TE-MIB", "mplsDynTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsDynTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsDynTunnelName"))
if mibBuilder.loadTexts: mplsDynTunnelDown.setStatus('current')
mplsManTunnelReoptimized = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 2, 0, 7)).setObjects(("PRVT-MPLS-TE-MIB", "mplsManTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelARHopTableIndex"), ("PRVT-MPLS-TE-MIB", "mplsManTunnelName"))
if mibBuilder.loadTexts: mplsManTunnelReoptimized.setStatus('current')
mibBuilder.exportSymbols("PRVT-MPLS-TE-MIB", MplsBitRate=MplsBitRate, mplsAutoTunnelGuardedDest=mplsAutoTunnelGuardedDest, mplsDynTunnelIfIndex=mplsDynTunnelIfIndex, mplsManTunnelTable=mplsManTunnelTable, mplsAutoTunnelExcludeAnyAffinity=mplsAutoTunnelExcludeAnyAffinity, mplsDynTunnelRebuildTimer=mplsDynTunnelRebuildTimer, mplsDynTunnelBackupIncAny=mplsDynTunnelBackupIncAny, PYSNMP_MODULE_ID=prvtMplsTeMIB, mplsAutoTunnelOperStatus=mplsAutoTunnelOperStatus, mplsDynTunnelSessionAttributes=mplsDynTunnelSessionAttributes, mplsTunnelCHopTable=mplsTunnelCHopTable, mplsManTunnelBackupSetupPrio=mplsManTunnelBackupSetupPrio, mplsDynTunnelBackupExcAny=mplsDynTunnelBackupExcAny, mplsTunnelAutoHopAddrType=mplsTunnelAutoHopAddrType, mplsManTunnelOperStatusFlags=mplsManTunnelOperStatusFlags, mplsDynTunnelEgressLSRId=mplsDynTunnelEgressLSRId, mplsAutoTunnelTable=mplsAutoTunnelTable, mplsAutoTunnelOwner=mplsAutoTunnelOwner, mplsTunnelManHopRowStatus=mplsTunnelManHopRowStatus, mplsTunnelManHopInclude=mplsTunnelManHopInclude, mplsTunnelARHopListIndex=mplsTunnelARHopListIndex, MplsGeneralizedLabelType=MplsGeneralizedLabelType, mplsTunnelManResEntry=mplsTunnelManResEntry, mplsManTunnelBackupExcAny=mplsManTunnelBackupExcAny, mplsAutoTunnelOperStatusFlags=mplsAutoTunnelOperStatusFlags, mplsTeObjectReserved5=mplsTeObjectReserved5, mplsTeObjectReserved3=mplsTeObjectReserved3, mplsManTunnelCHopTableIndex=mplsManTunnelCHopTableIndex, mplsManTunnelBackupMaxHops=mplsManTunnelBackupMaxHops, mplsAutoTunnelInstance=mplsAutoTunnelInstance, mplsDynTunnelHopTableIndex=mplsDynTunnelHopTableIndex, mplsTunnelDynResExBurstSize=mplsTunnelDynResExBurstSize, mplsDynTunnelOwner=mplsDynTunnelOwner, mplsManTunnelPathComp=mplsManTunnelPathComp, mplsAutoTunnelIncludeAnyAffinity=mplsAutoTunnelIncludeAnyAffinity, mplsAutoTunnelBackupBandwidth=mplsAutoTunnelBackupBandwidth, mplsTunnelManHopIndex=mplsTunnelManHopIndex, mplsAutoTunnelUp=mplsAutoTunnelUp, mplsDynTunnelARHopTableIndex=mplsDynTunnelARHopTableIndex, mplsAutoTunnelCHopTableIndex=mplsAutoTunnelCHopTableIndex, mplsManTunnelBackupHoldingPrio=mplsManTunnelBackupHoldingPrio, mplsDynTunnelIngressLSRId=mplsDynTunnelIngressLSRId, mplsAutoTunnelDown=mplsAutoTunnelDown, MplsTunnelInterfaceIndexOrZero=MplsTunnelInterfaceIndexOrZero, MplsGeneralizedLabel=MplsGeneralizedLabel, mplsTunnelAutoResMaxBurstSize=mplsTunnelAutoResMaxBurstSize, mplsManTunnelBackupBandwidth=mplsManTunnelBackupBandwidth, MplsTunnelAffinity=MplsTunnelAffinity, mplsTunnelAutoResMeanRate=mplsTunnelAutoResMeanRate, mplsTunnelAutoResExBurstSize=mplsTunnelAutoResExBurstSize, mplsTunnelCHopEntry=mplsTunnelCHopEntry, mplsAutoTunnelBackupHoldingPrio=mplsAutoTunnelBackupHoldingPrio, mplsTunnelAutoHopIpAddr=mplsTunnelAutoHopIpAddr, mplsDynTunnelInstance=mplsDynTunnelInstance, mplsDynTunnelAttributes=mplsDynTunnelAttributes, mplsManTunnelBackupIncAll=mplsManTunnelBackupIncAll, mplsManTunnelDescr=mplsManTunnelDescr, mplsDynTunnelHoldingPrio=mplsDynTunnelHoldingPrio, MplsTunnelPrivateDataSyntax=MplsTunnelPrivateDataSyntax, mplsDynTunnelIndex=mplsDynTunnelIndex, mplsDynTunnelCHopTableIndex=mplsDynTunnelCHopTableIndex, mplsTunnelAutoHopIpPrefixLen=mplsTunnelAutoHopIpPrefixLen, mplsManTunnelPathInUse=mplsManTunnelPathInUse, mplsManTunnelMtu=mplsManTunnelMtu, mplsTunnelAutoHopListIndex=mplsTunnelAutoHopListIndex, prvtMplsTunnelTrapEnableValue=prvtMplsTunnelTrapEnableValue, mplsAutoTunnelAttributes=mplsAutoTunnelAttributes, mplsManTunnelAdminStatus=mplsManTunnelAdminStatus, mplsManTunnelAttributes=mplsManTunnelAttributes, mplsManTunnelARHopTableIndex=mplsManTunnelARHopTableIndex, mplsDynTunnelBackupBandwidth=mplsDynTunnelBackupBandwidth, mplsTunnelDynResMaxBurstSize=mplsTunnelDynResMaxBurstSize, mplsTunnelARHopIndex=mplsTunnelARHopIndex, MplsPathIndex=MplsPathIndex, mplsManTunnelRebuildTimer=mplsManTunnelRebuildTimer, mplsTunnelManHopIpAddr=mplsTunnelManHopIpAddr, mplsTunnelManHopType=mplsTunnelManHopType, mplsAutoTunnelIndex=mplsAutoTunnelIndex, mplsAutoTunnelName=mplsAutoTunnelName, mplsDynTunnelIncludeAllAffinity=mplsDynTunnelIncludeAllAffinity, mplsDynTunnelBackupSetupPrio=mplsDynTunnelBackupSetupPrio, TeHopAddressAS=TeHopAddressAS, mplsTunnelAutoResEntry=mplsTunnelAutoResEntry, mplsDynTunnelMtu=mplsDynTunnelMtu, mplsTunnelAutoHopIndex=mplsTunnelAutoHopIndex, mplsTunnelAutoHopType=mplsTunnelAutoHopType, mplsTunnelCHopListIndex=mplsTunnelCHopListIndex, mplsManTunnelGuardedDest=mplsManTunnelGuardedDest, mplsAutoTunnelIfIndex=mplsAutoTunnelIfIndex, prvtMplsTeMIB=prvtMplsTeMIB, mplsTunnelManResTable=mplsTunnelManResTable, mplsManTunnelRowStatus=mplsManTunnelRowStatus, mplsDynTunnelUp=mplsDynTunnelUp, mplsTeObjectReserved9=mplsTeObjectReserved9, mplsAutoTunnelEgressLSRId=mplsAutoTunnelEgressLSRId, prvtMplsTunnelTrapEnableEntry=prvtMplsTunnelTrapEnableEntry, mplsTunnelManResMaxBurstSize=mplsTunnelManResMaxBurstSize, mplsDynTunnelLocalProtectInUse=mplsDynTunnelLocalProtectInUse, mplsTunnelCHopIndex=mplsTunnelCHopIndex, mplsTunnelAutoResMeanBurstSize=mplsTunnelAutoResMeanBurstSize, mplsTunnelDynResStorageType=mplsTunnelDynResStorageType, MplsTeObjectReservedTC=MplsTeObjectReservedTC, mplsTunnelManResMaxRate=mplsTunnelManResMaxRate, mplsTunnelAutoResTable=mplsTunnelAutoResTable, mplsAutoTunnelHoldingPrio=mplsAutoTunnelHoldingPrio, mplsManTunnelLocalProtectInUse=mplsManTunnelLocalProtectInUse, mplsAutoTunnelSessionAttributes=mplsAutoTunnelSessionAttributes, mplsTunnelAutoHopEntry=mplsTunnelAutoHopEntry, mplsDynTunnelDown=mplsDynTunnelDown, mplsManTunnelSessionAttributes=mplsManTunnelSessionAttributes, mplsTunnelManHopEntry=mplsTunnelManHopEntry, mplsManTunnelOperStatus=mplsManTunnelOperStatus, mplsTeObjectReserved17=mplsTeObjectReserved17, mplsTunnelDynResEntry=mplsTunnelDynResEntry, mplsTunnelCHopAddrType=mplsTunnelCHopAddrType, mplsManTunnelExcludeAnyAffinity=mplsManTunnelExcludeAnyAffinity, mplsTunnelAutoResMaxRate=mplsTunnelAutoResMaxRate, mplsDynTunnelIncludeAnyAffinity=mplsDynTunnelIncludeAnyAffinity, mplsAutoTunnelRebuildTimer=mplsAutoTunnelRebuildTimer, mplsManTunnelIngressLSRId=mplsManTunnelIngressLSRId, mplsTeNotifications=mplsTeNotifications, mplsAutoTunnelBackupIncAll=mplsAutoTunnelBackupIncAll, mplsTeObjectReserved19=mplsTeObjectReserved19, mplsManTunnelHoldingPrio=mplsManTunnelHoldingPrio, mplsDynTunnelBackupIncAll=mplsDynTunnelBackupIncAll, mplsAutoTunnelIncludeAllAffinity=mplsAutoTunnelIncludeAllAffinity, mplsTunnelCHopIpPrefixLen=mplsTunnelCHopIpPrefixLen, mplsAutoTunnelSetupPrio=mplsAutoTunnelSetupPrio, mplsTunnelManHopAddrType=mplsTunnelManHopAddrType, mplsDynTunnelExcludeAnyAffinity=mplsDynTunnelExcludeAnyAffinity, mplsDynTunnelName=mplsDynTunnelName, mplsTunnelDynResMeanRate=mplsTunnelDynResMeanRate, MplsLSPID=MplsLSPID, mplsManTunnelMBBTimeOut=mplsManTunnelMBBTimeOut, mplsAutoTunnelBackupMaxHops=mplsAutoTunnelBackupMaxHops, mplsDynTunnelOperStatus=mplsDynTunnelOperStatus, mplsTunnelARHopAddrType=mplsTunnelARHopAddrType, mplsTunnelARHopTable=mplsTunnelARHopTable, mplsTunnelManResMeanRate=mplsTunnelManResMeanRate, mplsTunnelCHopIpAddr=mplsTunnelCHopIpAddr, mplsAutoTunnelRowStatus=mplsAutoTunnelRowStatus, mplsAutoTunnelMtu=mplsAutoTunnelMtu, MplsTunnelInstanceIndex=MplsTunnelInstanceIndex, mplsTeObjects=mplsTeObjects, mplsTunnelManResRowStatus=mplsTunnelManResRowStatus, mplsTunnelAutoResIndex=mplsTunnelAutoResIndex, mplsDynTunnelFastRerouteMode=mplsDynTunnelFastRerouteMode, mplsManTunnelIndex=mplsManTunnelIndex, mplsAutoTunnelLocalProtectInUse=mplsAutoTunnelLocalProtectInUse, TeHopAddressType=TeHopAddressType, MplsTunnelTNAAddress=MplsTunnelTNAAddress, mplsDynTunnelBackupHoldingPrio=mplsDynTunnelBackupHoldingPrio, TeHopAddress=TeHopAddress, mplsManTunnelDown=mplsManTunnelDown, mplsTunnelManHopPathOptionIndex=mplsTunnelManHopPathOptionIndex, mplsAutoTunnelHopTableIndex=mplsAutoTunnelHopTableIndex, mplsAutoTunnelBackupSetupPrio=mplsAutoTunnelBackupSetupPrio, mplsTunnelDynResMeanBurstSize=mplsTunnelDynResMeanBurstSize, mplsManTunnelName=mplsManTunnelName, mplsAutoTunnelEntry=mplsAutoTunnelEntry, mplsManTunnelFastRerouteMode=mplsManTunnelFastRerouteMode, prvtMplsTunnelTrapEnableTable=prvtMplsTunnelTrapEnableTable, mplsTunnelAutoHopTable=mplsTunnelAutoHopTable, mplsDynTunnelBackupMaxHops=mplsDynTunnelBackupMaxHops, mplsAutoTunnelPathInUse=mplsAutoTunnelPathInUse, mplsTunnelManHopIpPrefixLen=mplsTunnelManHopIpPrefixLen, mplsTunnelARHopIpAddr=mplsTunnelARHopIpAddr, mplsAutoTunnelARHopTableIndex=mplsAutoTunnelARHopTableIndex, mplsManTunnelHopTableIndex=mplsManTunnelHopTableIndex, mplsAutoTunnelFastRerouteMode=mplsAutoTunnelFastRerouteMode, mplsAutoTunnelDescr=mplsAutoTunnelDescr, mplsManTunnelInstance=mplsManTunnelInstance, mplsDynTunnelPathInUse=mplsDynTunnelPathInUse, mplsDynTunnelPathComp=mplsDynTunnelPathComp, mplsDynTunnelAdminStatus=mplsDynTunnelAdminStatus, mplsDynTunnelGuardedDest=mplsDynTunnelGuardedDest, mplsTunnelDynResIndex=mplsTunnelDynResIndex, mplsDynTunnelDescr=mplsDynTunnelDescr, mplsDynTunnelMBBTimeOut=mplsDynTunnelMBBTimeOut, mplsManTunnelIncludeAnyAffinity=mplsManTunnelIncludeAnyAffinity, mplsTunnelAutoHopInclude=mplsTunnelAutoHopInclude, mplsManTunnelEgressLSRId=mplsManTunnelEgressLSRId, mplsManTunnelUp=mplsManTunnelUp, MplsBurstSize=MplsBurstSize, mplsAutoTunnelMBBTimeOut=mplsAutoTunnelMBBTimeOut, TeHopAddressUnnum=TeHopAddressUnnum, mplsManTunnelOwner=mplsManTunnelOwner, mplsAutoTunnelBackupExcAny=mplsAutoTunnelBackupExcAny, mplsTeObjectReserved13=mplsTeObjectReserved13, mplsTeObjectReserved21=mplsTeObjectReserved21, mplsManTunnelEntry=mplsManTunnelEntry, mplsManTunnelIncludeAllAffinity=mplsManTunnelIncludeAllAffinity, mplsAutoTunnelBackupIncAny=mplsAutoTunnelBackupIncAny, mplsManTunnelIfIndex=mplsManTunnelIfIndex, mplsTunnelManHopTable=mplsTunnelManHopTable, MplsOwner=MplsOwner, mplsTunnelCHopType=mplsTunnelCHopType, mplsTeObjectReserved11=mplsTeObjectReserved11, MplsTunnelStorageType=MplsTunnelStorageType, mplsTunnelDynResTable=mplsTunnelDynResTable, mplsTunnelManHopEnable=mplsTunnelManHopEnable, mplsAutoTunnelIngressLSRId=mplsAutoTunnelIngressLSRId, MplsPathIndexOrZero=MplsPathIndexOrZero, mplsDynTunnelOperStatusFlags=mplsDynTunnelOperStatusFlags, mplsTeObjectReserved7=mplsTeObjectReserved7, mplsAutoTunnelPathComp=mplsAutoTunnelPathComp, mplsTunnelManHopListIndex=mplsTunnelManHopListIndex, mplsTunnelAutoHopPathOptionIndex=mplsTunnelAutoHopPathOptionIndex, mplsDynTunnelTable=mplsDynTunnelTable, mplsDynTunnelSetupPrio=mplsDynTunnelSetupPrio, mplsManTunnelBackupIncAny=mplsManTunnelBackupIncAny, mplsTunnelDynResMaxRate=mplsTunnelDynResMaxRate, mplsTunnelManResExBurstSize=mplsTunnelManResExBurstSize, MplsExtendedTunnelIdOctetType=MplsExtendedTunnelIdOctetType, mplsManTunnelReoptimized=mplsManTunnelReoptimized, mplsTeObjectReserved1=mplsTeObjectReserved1, mplsTunnelManResIndex=mplsTunnelManResIndex, mplsDynTunnelEntry=mplsDynTunnelEntry, mplsTunnelARHopEntry=mplsTunnelARHopEntry, mplsTunnelManResMeanBurstSize=mplsTunnelManResMeanBurstSize, mplsTeObjectReserved15=mplsTeObjectReserved15, mplsManTunnelSetupPrio=mplsManTunnelSetupPrio)
