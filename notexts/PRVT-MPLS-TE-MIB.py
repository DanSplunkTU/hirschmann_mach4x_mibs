#
# PySNMP MIB module PRVT-MPLS-TE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-MPLS-TE-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 21:24:05 2021
# On host fv-az121-306 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressPrefixLength, InetAddressIPv4, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressIPv4", "InetAddressType")
MplsBurstSize, MplsBitRate, MplsPathIndex, TeHopAddressAS, MplsTunnelAffinity, MplsExtendedTunnelId, TeHopAddress, MplsPathIndexOrZero, MplsLSPID, MplsOwner, MplsTunnelIndex, MplsTunnelInstanceIndex, TeHopAddressUnnum, TeHopAddressType = mibBuilder.importSymbols("MPLS-TC-PRIV-STDEXT-MIB", "MplsBurstSize", "MplsBitRate", "MplsPathIndex", "TeHopAddressAS", "MplsTunnelAffinity", "MplsExtendedTunnelId", "TeHopAddress", "MplsPathIndexOrZero", "MplsLSPID", "MplsOwner", "MplsTunnelIndex", "MplsTunnelInstanceIndex", "TeHopAddressUnnum", "TeHopAddressType")
mpls, = mibBuilder.importSymbols("PRVT-CR-LDP-MIB", "mpls")
prvtMplsTeMibEntityIndex, = mibBuilder.importSymbols("PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, transmission, IpAddress, Unsigned32, iso, zeroDotZero, MibIdentifier, Counter32, TimeTicks, Gauge32, ObjectIdentity, Integer32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "transmission", "IpAddress", "Unsigned32", "iso", "zeroDotZero", "MibIdentifier", "Counter32", "TimeTicks", "Gauge32", "ObjectIdentity", "Integer32", "NotificationType", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention, RowPointer, RowStatus, TimeStamp, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowPointer", "RowStatus", "TimeStamp", "StorageType")
mplsTeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2))
mplsTeMIB.setRevisions(('2009-02-17 00:00', '2008-11-20 00:00', '2008-08-28 00:00', '2008-03-03 00:00', '2007-12-06 00:00', '2007-12-02 09:59',))
if mibBuilder.loadTexts: mplsTeMIB.setLastUpdated('200902170000Z')
if mibBuilder.loadTexts: mplsTeMIB.setOrganization('BATM Advanced Communication')
class MplsTunnelIndexSyntax(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class MplsLsrId(TextualConvention, Unsigned32):
    status = 'current'

class MplsGeneralizedLabelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mplsLabel", 1), ("generalizedLabel", 2), ("wavebandLabel", 3))

class MplsTunnelPrivateDataSyntax(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class MplsTunnelTNAAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class MplsGeneralizedLabel(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

mplsTeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1))
mplsTeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2))
mplsTeNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2, 0))
mplsTeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3))
mplsTunnelIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 1), )
if mibBuilder.loadTexts: mplsTunnelIndexNextTable.setStatus('current')
mplsTunnelIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 1, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: mplsTunnelIndexNextEntry.setStatus('current')
mplsTunnelIndexNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIndexNextIndex.setStatus('current')
mplsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2), )
if mibBuilder.loadTexts: mplsTunnelTable.setStatus('current')
mplsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelInstance"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelIngressLSRId"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsTunnelEntry.setStatus('current')
mplsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 1), MplsTunnelIndexSyntax())
if mibBuilder.loadTexts: mplsTunnelIndex.setStatus('current')
mplsTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsTunnelInstance.setStatus('current')
mplsTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setStatus('current')
mplsTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelEgressLSRId.setStatus('current')
mplsTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelName.setStatus('current')
mplsTunnelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDescr.setStatus('current')
mplsTunnelIsIf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsIf.setStatus('current')
mplsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIfIndex.setStatus('current')
mplsTunnelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 9), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOwner.setStatus('current')
mplsTunnelRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("head", 1), ("transit", 2), ("tail", 3), ("headTail", 4))).clone('head')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRole.setStatus('current')
mplsTunnelXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 11), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelXCPointer.setStatus('current')
mplsTunnelSignallingProto = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rsvp", 2), ("crldp", 3), ("other", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSignallingProto.setStatus('current')
mplsTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setStatus('current')
mplsTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setStatus('current')
mplsTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 15), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4), ("reserved5", 5), ("bandwidthProtect", 6), ("nodeProtect", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setStatus('current')
mplsTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLocalProtectInUse.setStatus('current')
mplsTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 17), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourcePointer.setStatus('current')
mplsTunnelPrimaryInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 18), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryInstance.setStatus('current')
mplsTunnelInstancePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelInstancePriority.setStatus('current')
mplsTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 20), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopTableIndex.setStatus('current')
mplsTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 21), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPathInUse.setStatus('current')
mplsTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 22), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopTableIndex.setStatus('current')
mplsTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 23), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopTableIndex.setStatus('current')
mplsTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 24), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setStatus('current')
mplsTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 25), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setStatus('current')
mplsTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 26), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExcludeAnyAffinity.setStatus('current')
mplsTunnelTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTotalUpTime.setStatus('current')
mplsTunnelInstanceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelInstanceUpTime.setStatus('current')
mplsTunnelPrimaryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryUpTime.setStatus('current')
mplsTunnelPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPathChanges.setStatus('current')
mplsTunnelLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelLastPathChange.setStatus('current')
mplsTunnelCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCreationTime.setStatus('current')
mplsTunnelStateTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelStateTransitions.setStatus('current')
mplsTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAdminStatus.setStatus('current')
mplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOperStatus.setStatus('current')
mplsTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 36), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRowStatus.setStatus('current')
mplsTunnelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 37), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelStorageType.setStatus('current')
mplsTunnelUnnumIf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 38), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUnnumIf.setStatus('current')
mplsTunnelAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 39), Bits().clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("reserved4", 4), ("labelRecordingDesired", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAttributes.setStatus('current')
mplsTunnelLSPEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 7, 8, 9, 11))).clone(namedValues=NamedValues(("notInUse", 0), ("tunnelLspPacket", 1), ("tunnelLspEthernet", 2), ("tunnelLspAnsiEtsiPdh", 3), ("tunnelLspSdhSonet", 5), ("tunnelLspDigitalWrapper", 7), ("tunnelLspLambda", 8), ("tunnelLspFiber", 9), ("tunnelLspFiberChannel", 11))).clone('notInUse')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLSPEncoding.setStatus('current')
mplsTunnelSwitchingType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 41), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSwitchingType.setStatus('current')
mplsTunnelLinkProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 42), Bits().clone(namedValues=NamedValues(("extraTraffic", 0), ("unprotected", 1), ("shared", 2), ("dedicatedOneToOne", 3), ("dedicatedOnePlusOne", 4), ("enhanced", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLinkProtection.setStatus('current')
mplsTunnelGPid = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 56))).clone(namedValues=NamedValues(("unknown", 0), ("ds1SF", 1), ("ds1ESF", 2), ("ds3M23", 3), ("ds3Cbit", 4), ("asyncE4", 5), ("asyncDS3", 6), ("asyncE3", 7), ("bitSyncE3", 8), ("byteSyncE3", 9), ("asyncDS2", 10), ("bitSyncDS2", 11), ("byteSyncDS2", 12), ("asyncE1", 13), ("byteSyncE1", 14), ("byteSync31DS0", 15), ("asyncDS1", 16), ("bitSyncDS1", 17), ("byteSyncDS1", 18), ("vcByteSyncDS2", 19), ("vcAsyncE1", 20), ("vcByteSyncE1", 21), ("ds1SFAsync", 22), ("ds1ESFAsync", 23), ("ds3M23Async", 24), ("ds3CbitAsync", 25), ("vt", 26), ("sts", 27), ("pos16CRC", 28), ("pos32CRC", 29), ("posScrambling16CRC", 30), ("posScrambling32CRC", 31), ("atmMapping", 32), ("ethernet", 33), ("sdh", 34), ("sonet", 35), ("digitalWrapper", 36), ("lambda", 37), ("etsiPdh", 38), ("ansiPdh", 39), ("laps", 40), ("fddi", 41), ("dqdb", 42), ("fiberch3", 43), ("hdlc", 44), ("etherV2di", 45), ("ether8023", 46), ("etherGfpSonet", 56)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelGPid.setStatus('current')
mplsTunnelSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 44), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSecondary.setStatus('current')
mplsTunnelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("out", 0), ("outbidir", 1), ("in", 2), ("hwbidir", 3), ("inbidir", 4), ("transuni", 5), ("transbi", 6), ("transbih", 7))).clone('out')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDirection.setStatus('current')
mplsTunnelPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamicFull", 1), ("explicit", 2), ("dynamicPartial", 3))).clone('dynamicFull')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPathComp.setStatus('current')
mplsTunnelUpNotRecipType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 101), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUpNotRecipType.setStatus('current')
mplsTunnelUpNotRecip = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 47), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUpNotRecip.setStatus('current')
mplsTunnelDownNotRecipType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 102), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDownNotRecipType.setStatus('current')
mplsTunnelDownNotRecip = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 48), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDownNotRecip.setStatus('current')
mplsTunnelAdminStatusFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 49), Bits().clone(namedValues=NamedValues(("delInProgress", 0), ("adminDown", 1), ("testing", 2), ("reserved3", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("reserved29", 29), ("reserved30", 30), ("reflect", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAdminStatusFlags.setStatus('current')
mplsTunnelExtraParamsPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 50), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtraParamsPtr.setStatus('current')
mplsTunnelUseEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 51), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUseEgressLabel.setStatus('current')
mplsTunnelEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 52), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelEgressLabel.setStatus('current')
mplsTunnelEgressLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 53), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelEgressLabelType.setStatus('current')
mplsTunnelOmitEROIfOneHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 54), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelOmitEROIfOneHop.setStatus('current')
mplsTunnelPrivateData = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 55), MplsTunnelPrivateDataSyntax()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPrivateData.setStatus('current')
mplsTunnelSrcTNAAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("ipv6", 2), ("nsap", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSrcTNAAddressType.setStatus('current')
mplsTunnelSrcTNAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 57), MplsTunnelTNAAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSrcTNAAddress.setStatus('current')
mplsTunnelDestTNAAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("ipv6", 2), ("nsap", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDestTNAAddressType.setStatus('current')
mplsTunnelDestTNAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 59), MplsTunnelTNAAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDestTNAAddress.setStatus('current')
mplsTunnelEndToEndRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 60), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelEndToEndRerouting.setStatus('current')
mplsTunnelIsUni = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 62), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsUni.setStatus('current')
mplsTunnelUniServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 63), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniServiceLevel.setStatus('current')
mplsTunnelUniEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 64), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniEgressLabel.setStatus('current')
mplsTunnelUniEgressLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 65), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniEgressLabelType.setStatus('current')
mplsTunnelUniEgressLabelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 66), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniEgressLabelPort.setStatus('current')
mplsTunnelUniRvsEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 67), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsEgressLabel.setStatus('current')
mplsTunnelUniRvsEgressLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 68), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsEgressLabelType.setStatus('current')
mplsTunnelUniRvsEgressLabelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 69), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsEgressLabelPort.setStatus('current')
mplsTunnelDeletionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forced", 1), ("graceful", 2))).clone('forced')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDeletionMode.setStatus('current')
mplsTunnelUniDiversityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 71), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniDiversityListIndex.setStatus('current')
mplsTunnelDiffServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 72), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDiffServIndex.setStatus('current')
mplsTunnelReversePrivateData = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 73), MplsTunnelPrivateDataSyntax()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelReversePrivateData.setStatus('current')
mplsTunnelFastRerouteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noFastReroute", 0), ("detourFastReroute", 1), ("facilityFastReroute", 2))).clone('noFastReroute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelFastRerouteMode.setStatus('current')
mplsTunnelBackupSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupSetupPrio.setStatus('current')
mplsTunnelBackupHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupHoldingPriority.setStatus('current')
mplsTunnelBackupIncAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 77), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupIncAny.setStatus('current')
mplsTunnelBackupIncAll = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 78), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupIncAll.setStatus('current')
mplsTunnelBackupExcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 79), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupExcAny.setStatus('current')
mplsTunnelBackupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 80), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupBandwidth.setStatus('current')
mplsTunnelBackupMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 81), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelBackupMaxHops.setStatus('current')
mplsTunnelIsSpc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 84), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsSpc.setStatus('current')
mplsTunnelUniIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 85), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniIngressLabel.setStatus('current')
mplsTunnelUniIngressLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 86), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniIngressLabelType.setStatus('current')
mplsTunnelUniIngressLabelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 87), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniIngressLabelPort.setStatus('current')
mplsTunnelUniRvsIngrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 88), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsIngrLabel.setStatus('current')
mplsTunnelUniRvsIngrLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 89), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsIngrLabelType.setStatus('current')
mplsTunnelUniRvsIngrLabelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 90), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelUniRvsIngrLabelPort.setStatus('current')
mplsTunnelDiffServClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDiffServClassType.setStatus('current')
mplsTunnelExtendedProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 92), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtendedProtection.setStatus('current')
mplsTunnelProtecting = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 93), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelProtecting.setStatus('current')
mplsTunnelNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 94), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelNotification.setStatus('current')
mplsTunnelLspProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 95), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLspProtection.setStatus('current')
mplsTunnelAssociatedLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 96), MplsTunnelInstanceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAssociatedLspId.setStatus('current')
mplsTunnelCallIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operatorSpecific", 1), ("globallyUnique", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCallIdType.setStatus('current')
mplsTunnelCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 98), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCallId.setStatus('current')
mplsTunnelIsIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 100), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsIpv6.setStatus('current')
mplsTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 103), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelMtu.setStatus('current')
mplsTunnelRebuildTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 104), TimeTicks().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRebuildTimer.setStatus('current')
mplsTunnelOperStatusFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 105), Bits().clone(namedValues=NamedValues(("empty", 0), ("tunnelResignalling", 1), ("tunnelSuppressed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelOperStatusFlags.setStatus('current')
mplsTunnelGuardedDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 106), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelGuardedDest.setStatus('current')
mplsTunnelMBBTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 2, 1, 107), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelMBBTimeOut.setStatus('current')
mplsTunnelHopIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 3), )
if mibBuilder.loadTexts: mplsTunnelHopIndexNextTable.setStatus('current')
mplsTunnelHopIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 3, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: mplsTunnelHopIndexNextEntry.setStatus('current')
mplsTunnelHopIndexNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelHopIndexNextIndex.setStatus('current')
mplsTunnelHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4), )
if mibBuilder.loadTexts: mplsTunnelHopTable.setStatus('current')
mplsTunnelHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelHopPathOptionIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelHopIndex"))
if mibBuilder.loadTexts: mplsTunnelHopEntry.setStatus('current')
mplsTunnelHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopListIndex.setStatus('current')
mplsTunnelHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopPathOptionIndex.setStatus('current')
mplsTunnelHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopIndex.setStatus('current')
mplsTunnelHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 4), TeHopAddressType().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrType.setStatus('current')
mplsTunnelHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 5), TeHopAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpAddr.setStatus('current')
mplsTunnelHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 6), Unsigned32().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpPrefixLen.setStatus('current')
mplsTunnelHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 7), TeHopAddressAS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAsNumber.setStatus('current')
mplsTunnelHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 8), TeHopAddressUnnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrUnnum.setStatus('current')
mplsTunnelHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 9), MplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopLspId.setStatus('current')
mplsTunnelHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopType.setStatus('current')
mplsTunnelHopInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopInclude.setStatus('current')
mplsTunnelHopPathOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopPathOptionName.setStatus('current')
mplsTunnelHopEntryPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("explicit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopEntryPathComp.setStatus('current')
mplsTunnelHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopRowStatus.setStatus('current')
mplsTunnelHopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 15), StorageType().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopStorageType.setStatus('current')
mplsTunnelHopLabelStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 16), Bits().clone(namedValues=NamedValues(("forwardPresent", 0), ("reversePresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelHopLabelStatuses.setStatus('current')
mplsTunnelHopExpLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 17), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopExpLabelType.setStatus('current')
mplsTunnelHopExpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 18), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopExpLabel.setStatus('current')
mplsTunnelHopExpRvrsLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 19), MplsGeneralizedLabelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopExpRvrsLabelType.setStatus('current')
mplsTunnelHopExpRvrsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 4, 1, 20), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopExpRvrsLabel.setStatus('current')
mplsTunnelResourceIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 5), )
if mibBuilder.loadTexts: mplsTunnelResourceIndexNextTable.setStatus('current')
mplsTunnelResourceIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 5, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: mplsTunnelResourceIndexNextEntry.setStatus('current')
mplsTunnelResourceIndexNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelResourceIndexNextIndex.setStatus('current')
mplsTunnelResourceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6), )
if mibBuilder.loadTexts: mplsTunnelResourceTable.setStatus('current')
mplsTunnelResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelResourceEntry.setStatus('current')
mplsTunnelResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mplsTunnelResourceIndex.setStatus('current')
mplsTunnelResourceMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 2), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxRate.setStatus('current')
mplsTunnelResourceMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 3), MplsBitRate()).setUnits('1000s of bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanRate.setStatus('current')
mplsTunnelResourceMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxBurstSize.setStatus('current')
mplsTunnelResourceMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanBurstSize.setStatus('current')
mplsTunnelResourceExBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceExBurstSize.setStatus('current')
mplsTunnelResourceFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setStatus('current')
mplsTunnelResourceWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setStatus('current')
mplsTunnelResourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceRowStatus.setStatus('current')
mplsTunnelResourceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 6, 1, 10), StorageType().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceStorageType.setStatus('current')
mplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7), )
if mibBuilder.loadTexts: mplsTunnelARHopTable.setStatus('current')
mplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelARHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setStatus('current')
mplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setStatus('current')
mplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setStatus('current')
mplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 3), TeHopAddressType().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setStatus('current')
mplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 4), TeHopAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpAddr.setStatus('current')
mplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 5), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrUnnum.setStatus('current')
mplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 6), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopLspId.setStatus('current')
mplsTunnelARHopLabelStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 7), Bits().clone(namedValues=NamedValues(("forwardPresent", 0), ("reversePresent", 1), ("forwardGlobal", 2), ("reverseGlobal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopLabelStatuses.setStatus('current')
mplsTunnelARHopExpLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 8), MplsGeneralizedLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopExpLabelType.setStatus('current')
mplsTunnelARHopExpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 9), MplsGeneralizedLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopExpLabel.setStatus('current')
mplsTunnelARHopExpRvrsLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 10), MplsGeneralizedLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopExpRvrsLabelType.setStatus('current')
mplsTunnelARHopExpRvrsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 11), MplsGeneralizedLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopExpRvrsLabel.setStatus('current')
mplsTunnelARHopProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 7, 1, 12), Bits().clone(namedValues=NamedValues(("localAvailable", 0), ("localInUse", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopProtection.setStatus('current')
mplsTunnelCHopTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8), )
if mibBuilder.loadTexts: mplsTunnelCHopTable.setStatus('current')
mplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelCHopListIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelCHopIndex"))
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setStatus('current')
mplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setStatus('current')
mplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setStatus('current')
mplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 3), TeHopAddressType().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setStatus('current')
mplsTunnelCHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 4), TeHopAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpAddr.setStatus('current')
mplsTunnelCHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 5), Unsigned32().clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpPrefixLen.setStatus('current')
mplsTunnelCHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 6), TeHopAddressAS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAsNumber.setStatus('current')
mplsTunnelCHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 7), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrUnnum.setStatus('current')
mplsTunnelCHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 8), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopLspId.setStatus('current')
mplsTunnelCHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopType.setStatus('current')
mplsTunnelCHopLabelStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 11), Bits().clone(namedValues=NamedValues(("forwardPresent", 0), ("reversePresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopLabelStatuses.setStatus('current')
mplsTunnelCHopExpLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 12), MplsGeneralizedLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopExpLabelType.setStatus('current')
mplsTunnelCHopExpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 13), MplsGeneralizedLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopExpLabel.setStatus('current')
mplsTunnelCHopExpRvrsLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 14), MplsGeneralizedLabelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopExpRvrsLabelType.setStatus('current')
mplsTunnelCHopExpRvrsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 8, 1, 15), MplsGeneralizedLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCHopExpRvrsLabel.setStatus('current')
mplsTunnelPerfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9), )
if mibBuilder.loadTexts: mplsTunnelPerfTable.setStatus('current')
mplsTunnelPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1), )
mplsTunnelEntry.registerAugmentions(("PRVT-MPLS-TE-MIB", "mplsTunnelPerfEntry"))
mplsTunnelPerfEntry.setIndexNames(*mplsTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: mplsTunnelPerfEntry.setStatus('current')
mplsTunnelPerfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfPackets.setStatus('current')
mplsTunnelPerfHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCPackets.setStatus('current')
mplsTunnelPerfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfErrors.setStatus('current')
mplsTunnelPerfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfBytes.setStatus('current')
mplsTunnelPerfHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCBytes.setStatus('current')
mplsTunnelCRLDPResTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10), )
if mibBuilder.loadTexts: mplsTunnelCRLDPResTable.setStatus('current')
mplsTunnelCRLDPResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelCRLDPResEntry.setStatus('current')
mplsTunnelCRLDPResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 2), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResMeanBurstSize.setStatus('current')
mplsTunnelCRLDPResExBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 3), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResExBurstSize.setStatus('current')
mplsTunnelCRLDPResFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setStatus('current')
mplsTunnelCRLDPResWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setStatus('current')
mplsTunnelCRLDPResFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setStatus('current')
mplsTunnelCRLDPResRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResRowStatus.setStatus('current')
mplsTunnelCRLDPResStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 10, 1, 8), StorageType().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResStorageType.setStatus('current')
mplsDiffServIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 11), )
if mibBuilder.loadTexts: mplsDiffServIndexNextTable.setStatus('current')
mplsDiffServIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 11, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: mplsDiffServIndexNextEntry.setStatus('current')
mplsDiffServIndexNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsDiffServIndexNextIndex.setStatus('current')
mplsDiffServTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12), )
if mibBuilder.loadTexts: mplsDiffServTable.setStatus('current')
mplsDiffServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsDiffServIndex"))
if mibBuilder.loadTexts: mplsDiffServEntry.setStatus('current')
mplsDiffServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mplsDiffServIndex.setStatus('current')
mplsDiffServType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("elsp", 0), ("llsp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServType.setStatus('current')
mplsDiffServLLSPPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServLLSPPSC.setStatus('current')
mplsDiffServELSPNumPHBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPNumPHBs.setStatus('current')
mplsDiffServELSPPHB0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB0.setStatus('current')
mplsDiffServELSPPHB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB1.setStatus('current')
mplsDiffServELSPPHB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB2.setStatus('current')
mplsDiffServELSPPHB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB3.setStatus('current')
mplsDiffServELSPPHB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB4.setStatus('current')
mplsDiffServELSPPHB5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB5.setStatus('current')
mplsDiffServELSPPHB6 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB6.setStatus('current')
mplsDiffServELSPPHB7 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServELSPPHB7.setStatus('current')
mplsDiffServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 12, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsDiffServRowStatus.setStatus('current')
prvtMplsTunnelUNIDvLstIdxNxtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 13), )
if mibBuilder.loadTexts: prvtMplsTunnelUNIDvLstIdxNxtTable.setStatus('current')
prvtMplsTunnelUNIDvLstIdxNxtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 13, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: prvtMplsTunnelUNIDvLstIdxNxtEntry.setStatus('current')
prvtMplsTunnelUNIDivListIdxNext = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivListIdxNext.setStatus('current')
prvtMplsTunnelUNIDiversityTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14), )
if mibBuilder.loadTexts: prvtMplsTunnelUNIDiversityTable.setStatus('current')
prvtMplsTunnelUNIDiversityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "prvtMplsTunnelUNIDivListIdx"), (0, "PRVT-MPLS-TE-MIB", "prvtMplsTunnelUNIDivIdx"))
if mibBuilder.loadTexts: prvtMplsTunnelUNIDiversityEntry.setStatus('current')
prvtMplsTunnelUNIDivListIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivListIdx.setStatus('current')
prvtMplsTunnelUNIDivIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivIdx.setStatus('current')
prvtMplsTunnelUNIDivRowPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivRowPointer.setStatus('current')
prvtMplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtMplsTunnelOperStatus.setStatus('current')
prvtMplsTunnelUNIDivRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivRowStatus.setStatus('current')
prvtMplsTunnelUNIDivRequirement = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nodeDiverse", 1), ("linkDiverse", 2), ("srlg", 3), ("sharedPath", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivRequirement.setStatus('current')
prvtMplsTunnelUNIDivAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtMplsTunnelUNIDivAccess.setStatus('current')
prvtMplsTunnelTrapEnableTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 15), )
if mibBuilder.loadTexts: prvtMplsTunnelTrapEnableTable.setStatus('current')
prvtMplsTunnelTrapEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 15, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: prvtMplsTunnelTrapEnableEntry.setStatus('current')
mplsTunnelTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 15, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelTrapEnable.setStatus('current')
mplsTunnelHoldTimer = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelHoldTimer.setStatus('current')
mplsTeMibEntityScalarTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16), )
if mibBuilder.loadTexts: mplsTeMibEntityScalarTable.setStatus('current')
mplsTeMibEntityScalarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"))
if mibBuilder.loadTexts: mplsTeMibEntityScalarEntry.setStatus('current')
mplsTunnelConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelConfigured.setStatus('current')
mplsTunnelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelActive.setStatus('current')
mplsTunnelTEDistProto = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1, 4), Bits().clone(namedValues=NamedValues(("other", 0), ("ospf", 1), ("isis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTEDistProto.setStatus('current')
mplsTunnelMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelMaxHops.setStatus('current')
mplsTunnelNotificationMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelNotificationMaxRate.setStatus('current')
mplsTunnelSonetResTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17), )
if mibBuilder.loadTexts: mplsTunnelSonetResTable.setStatus('current')
mplsTunnelSonetResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1), ).setIndexNames((0, "PRVT-TEMIB-ENTITY-MIB", "prvtMplsTeMibEntityIndex"), (0, "PRVT-MPLS-TE-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelSonetResEntry.setStatus('current')
mplsTunnelSonetResRCC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResRCC.setStatus('current')
mplsTunnelSonetResNCC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResNCC.setStatus('current')
mplsTunnelSonetResNVC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResNVC.setStatus('current')
mplsTunnelSonetResMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResMultiplier.setStatus('current')
mplsTunnelSonetResTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResTransparency.setStatus('current')
mplsTunnelSonetResRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResRowStatus.setStatus('current')
mplsTunnelSonetResSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSonetResSignalType.setStatus('current')
mplsTunnelErrorTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18), )
if mibBuilder.loadTexts: mplsTunnelErrorTable.setStatus('current')
mplsTunnelErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1), )
mplsTunnelEntry.registerAugmentions(("PRVT-MPLS-TE-MIB", "mplsTunnelErrorEntry"))
mplsTunnelErrorEntry.setIndexNames(*mplsTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: mplsTunnelErrorEntry.setStatus('current')
mplsTunnelErrorLastErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noError", 0), ("unknown", 1), ("protocol", 2), ("pathComputation", 3), ("localConfiguration", 4), ("localResources", 5), ("localOther", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorLastErrorType.setStatus('current')
mplsTunnelErrorLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorLastTime.setStatus('current')
mplsTunnelErrorReporterType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorReporterType.setStatus('current')
mplsTunnelErrorReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorReporter.setStatus('current')
mplsTunnelErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorCode.setStatus('current')
mplsTunnelErrorSubcode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorSubcode.setStatus('current')
mplsTunnelErrorTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorTLVs.setStatus('current')
mplsTunnelErrorHelpString = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 1, 18, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelErrorHelpString.setStatus('current')
mplsTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2, 0, 1)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelUp.setStatus('current')
mplsTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2, 0, 2)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelDown.setStatus('current')
mplsTunnelRerouted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2, 0, 3)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopTableIndex"))
if mibBuilder.loadTexts: mplsTunnelRerouted.setStatus('current')
mplsTunnelReoptimized = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 2, 0, 4)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopTableIndex"))
if mibBuilder.loadTexts: mplsTunnelReoptimized.setStatus('current')
mplsTeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1))
mplsTeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 2))
mplsTeModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 2, 1)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelScalarGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelManualGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSignaledGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsNotIntfcGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsIntfcGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopGroup"), ("PRVT-MPLS-TE-MIB", "mplsDiffServGroup"), ("PRVT-MPLS-TE-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleFullCompliance = mplsTeModuleFullCompliance.setStatus('current')
mplsTeModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 2, 2)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelScalarGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelManualGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSignaledGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsNotIntfcGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsIntfcGroup"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("PRVT-MPLS-TE-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleReadOnlyCompliance = mplsTeModuleReadOnlyCompliance.setStatus('current')
mplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 1)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelIndexNextIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelName"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDescr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOwner"), ("PRVT-MPLS-TE-MIB", "mplsTunnelXCPointer"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIfIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopTableIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopTableIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopTableIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOperStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelRowStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelStorageType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDirection"), ("PRVT-MPLS-TE-MIB", "mplsTunnelLSPEncoding"), ("PRVT-MPLS-TE-MIB", "mplsTunnelLinkProtection"), ("PRVT-MPLS-TE-MIB", "mplsTunnelGPid"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUseEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelEgressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelOmitEROIfOneHop"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPrivateData"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSrcTNAAddressType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSrcTNAAddress"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDestTNAAddressType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDestTNAAddress"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSecondary"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUnnumIf"), ("PRVT-MPLS-TE-MIB", "mplsTunnelAttributes"), ("PRVT-MPLS-TE-MIB", "mplsTunnelEndToEndRerouting"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsUni"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniServiceLevel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSwitchingType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDeletionMode"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniDiversityListIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDiffServIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelReversePrivateData"), ("PRVT-MPLS-TE-MIB", "mplsTunnelAdminStatusFlags"), ("PRVT-MPLS-TE-MIB", "mplsTunnelFastRerouteMode"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupSetupPrio"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupHoldingPriority"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupIncAny"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupIncAll"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupExcAny"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupBandwidth"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupMaxHops"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDownNotRecipType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDownNotRecip"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPathComp"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUpNotRecipType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUpNotRecip"), ("PRVT-MPLS-TE-MIB", "mplsTunnelExtraParamsPtr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsSpc"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDiffServClassType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelExtendedProtection"), ("PRVT-MPLS-TE-MIB", "mplsTunnelProtecting"), ("PRVT-MPLS-TE-MIB", "mplsTunnelNotification"), ("PRVT-MPLS-TE-MIB", "mplsTunnelLspProtection"), ("PRVT-MPLS-TE-MIB", "mplsTunnelAssociatedLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCallIdType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCallId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIsIpv6"), ("PRVT-MPLS-TE-MIB", "mplsTunnelConfigured"), ("PRVT-MPLS-TE-MIB", "mplsTunnelActive"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPrimaryInstance"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPrimaryUpTime"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPathChanges"), ("PRVT-MPLS-TE-MIB", "mplsTunnelLastPathChange"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCreationTime"), ("PRVT-MPLS-TE-MIB", "mplsTunnelStateTransitions"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIncludeAnyAffinity"), ("PRVT-MPLS-TE-MIB", "mplsTunnelIncludeAllAffinity"), ("PRVT-MPLS-TE-MIB", "mplsTunnelExcludeAnyAffinity"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourcePointer"), ("PRVT-MPLS-TE-MIB", "mplsTunnelInstancePriority"), ("PRVT-MPLS-TE-MIB", "mplsTunnelPathInUse"), ("PRVT-MPLS-TE-MIB", "mplsTunnelRole"), ("PRVT-MPLS-TE-MIB", "mplsTunnelTotalUpTime"), ("PRVT-MPLS-TE-MIB", "mplsTunnelInstanceUpTime"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceMaxRate"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceMeanRate"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceMaxBurstSize"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceMeanBurstSize"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceExBurstSize"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceFrequency"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceWeight"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceRowStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceStorageType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelResourceIndexNextIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResRCC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResNCC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResNVC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResMultiplier"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResTransparency"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResRowStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopAddrType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopIpAddr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopAddrUnnum"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAddrType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopIpAddr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopIpPrefixLen"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAsNumber"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAddrUnnum"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelTrapEnable"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorLastErrorType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorLastTime"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorReporterType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorReporter"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorCode"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorSubcode"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorTLVs"), ("PRVT-MPLS-TE-MIB", "mplsTunnelErrorHelpString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelGroup = mplsTunnelGroup.setStatus('current')
mplsTunnelManualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 2)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelSignallingProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelManualGroup = mplsTunnelManualGroup.setStatus('current')
mplsTunnelSignaledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 3)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelSetupPrio"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHoldingPrio"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSignallingProto"), ("PRVT-MPLS-TE-MIB", "mplsTunnelLocalProtectInUse"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSessionAttributes"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopAddrType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopIpAddr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopIpPrefixLen"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopAddrUnnum"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopAsNumber"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopInclude"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopPathOptionName"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopEntryPathComp"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopRowStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopStorageType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopLabelStatuses"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopExpLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopExpLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopExpRvrsLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopExpRvrsLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelHopIndexNextIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelSignaledGroup = mplsTunnelSignaledGroup.setStatus('current')
mplsTunnelScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 4)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelConfigured"), ("PRVT-MPLS-TE-MIB", "mplsTunnelActive"), ("PRVT-MPLS-TE-MIB", "mplsTunnelTEDistProto"), ("PRVT-MPLS-TE-MIB", "mplsTunnelMaxHops"), ("PRVT-MPLS-TE-MIB", "mplsTunnelNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelScalarGroup = mplsTunnelScalarGroup.setStatus('current')
mplsTunnelIsIntfcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 5)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsIntfcGroup = mplsTunnelIsIntfcGroup.setStatus('current')
mplsTunnelIsNotIntfcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 6)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsNotIntfcGroup = mplsTunnelIsNotIntfcGroup.setStatus('current')
mplsTunnelCRLDPResOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 7)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResMeanBurstSize"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResExBurstSize"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResFrequency"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResWeight"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResFlags"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResRowStatus"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCRLDPResStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelCRLDPResOptionalGroup = mplsTunnelCRLDPResOptionalGroup.setStatus('current')
mplsTunnelSonetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 8)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResSignalType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResRCC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResNCC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResNVC"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResMultiplier"), ("PRVT-MPLS-TE-MIB", "mplsTunnelSonetResTransparency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelSonetGroup = mplsTunnelSonetGroup.setStatus('current')
mplsTunnelUniGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 9)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelIsUni"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniServiceLevel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniEgressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsEgressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniDiversityListIndex"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabelPort"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniIngressLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelUniRvsIngrLabelPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelUniGroup = mplsTunnelUniGroup.setStatus('current')
mplsTunnelBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 11)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelBackupSetupPrio"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupHoldingPriority"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupIncAny"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupIncAll"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupExcAny"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupBandwidth"), ("PRVT-MPLS-TE-MIB", "mplsTunnelBackupMaxHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelBackupGroup = mplsTunnelBackupGroup.setStatus('current')
mplsTunnelARHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 12)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelARHopAddrType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopIpAddr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopAddrUnnum"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopLabelStatuses"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopExpLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopExpLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopExpRvrsLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopExpRvrsLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelARHopProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelARHopGroup = mplsTunnelARHopGroup.setStatus('current')
mplsTunnelCHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 13)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAddrType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopIpAddr"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopIpPrefixLen"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAsNumber"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopAddrUnnum"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopLspId"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopLabelStatuses"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopExpLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopExpLabel"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopExpRvrsLabelType"), ("PRVT-MPLS-TE-MIB", "mplsTunnelCHopExpRvrsLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelCHopGroup = mplsTunnelCHopGroup.setStatus('current')
mplsDiffServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 14)).setObjects(("PRVT-MPLS-TE-MIB", "mplsDiffServIndexNextIndex"), ("PRVT-MPLS-TE-MIB", "mplsDiffServType"), ("PRVT-MPLS-TE-MIB", "mplsDiffServLLSPPSC"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPNumPHBs"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB0"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB1"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB2"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB3"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB4"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB5"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB6"), ("PRVT-MPLS-TE-MIB", "mplsDiffServELSPPHB7"), ("PRVT-MPLS-TE-MIB", "mplsDiffServRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsDiffServGroup = mplsDiffServGroup.setStatus('current')
mplsTeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 2, 3, 1, 15)).setObjects(("PRVT-MPLS-TE-MIB", "mplsTunnelUp"), ("PRVT-MPLS-TE-MIB", "mplsTunnelDown"), ("PRVT-MPLS-TE-MIB", "mplsTunnelRerouted"), ("PRVT-MPLS-TE-MIB", "mplsTunnelReoptimized"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeNotificationGroup = mplsTeNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-MPLS-TE-MIB", mplsTunnelReoptimized=mplsTunnelReoptimized, mplsTunnelStorageType=mplsTunnelStorageType, prvtMplsTunnelUNIDivListIdx=prvtMplsTunnelUNIDivListIdx, mplsTunnelHopTable=mplsTunnelHopTable, mplsTunnelARHopLabelStatuses=mplsTunnelARHopLabelStatuses, mplsTunnelSonetResRCC=mplsTunnelSonetResRCC, mplsTunnelCreationTime=mplsTunnelCreationTime, mplsTeObjects=mplsTeObjects, mplsTunnelUniIngressLabelPort=mplsTunnelUniIngressLabelPort, mplsTunnelAssociatedLspId=mplsTunnelAssociatedLspId, mplsTunnelBackupIncAny=mplsTunnelBackupIncAny, mplsTunnelCHopEntry=mplsTunnelCHopEntry, mplsTunnelCHopGroup=mplsTunnelCHopGroup, mplsTunnelHopEntryPathComp=mplsTunnelHopEntryPathComp, mplsTunnelHopIndexNextEntry=mplsTunnelHopIndexNextEntry, mplsTunnelHopIpPrefixLen=mplsTunnelHopIpPrefixLen, mplsTunnelCRLDPResTable=mplsTunnelCRLDPResTable, mplsTunnelIngressLSRId=mplsTunnelIngressLSRId, mplsTunnelARHopAddrType=mplsTunnelARHopAddrType, mplsTunnelSonetResEntry=mplsTunnelSonetResEntry, mplsTunnelErrorTable=mplsTunnelErrorTable, mplsTunnelDiffServIndex=mplsTunnelDiffServIndex, mplsTunnelCRLDPResMeanBurstSize=mplsTunnelCRLDPResMeanBurstSize, mplsTunnelIsIpv6=mplsTunnelIsIpv6, mplsTunnelDown=mplsTunnelDown, mplsTunnelCHopExpLabelType=mplsTunnelCHopExpLabelType, mplsTunnelResourceMeanRate=mplsTunnelResourceMeanRate, mplsTunnelErrorReporter=mplsTunnelErrorReporter, mplsTunnelRebuildTimer=mplsTunnelRebuildTimer, mplsTunnelNotificationMaxRate=mplsTunnelNotificationMaxRate, MplsGeneralizedLabelType=MplsGeneralizedLabelType, MplsTunnelPrivateDataSyntax=MplsTunnelPrivateDataSyntax, mplsTunnelPathChanges=mplsTunnelPathChanges, mplsTunnelHopExpLabelType=mplsTunnelHopExpLabelType, mplsTeConformance=mplsTeConformance, mplsTunnelInstancePriority=mplsTunnelInstancePriority, mplsTunnelCHopTable=mplsTunnelCHopTable, mplsTunnelCHopExpRvrsLabel=mplsTunnelCHopExpRvrsLabel, mplsTunnelIsUni=mplsTunnelIsUni, mplsTunnelResourcePointer=mplsTunnelResourcePointer, mplsTunnelLinkProtection=mplsTunnelLinkProtection, mplsTunnelUniServiceLevel=mplsTunnelUniServiceLevel, prvtMplsTunnelUNIDivRequirement=prvtMplsTunnelUNIDivRequirement, mplsTeModuleReadOnlyCompliance=mplsTeModuleReadOnlyCompliance, mplsTunnelName=mplsTunnelName, mplsTunnelRowStatus=mplsTunnelRowStatus, mplsTunnelUpNotRecipType=mplsTunnelUpNotRecipType, mplsTunnelUniRvsEgressLabel=mplsTunnelUniRvsEgressLabel, mplsTunnelIndexNextTable=mplsTunnelIndexNextTable, mplsTunnelHopIpAddr=mplsTunnelHopIpAddr, mplsTunnelResourceTable=mplsTunnelResourceTable, mplsTunnelPerfErrors=mplsTunnelPerfErrors, mplsTunnelARHopExpLabel=mplsTunnelARHopExpLabel, mplsTunnelConfigured=mplsTunnelConfigured, mplsTunnelIndexNextEntry=mplsTunnelIndexNextEntry, mplsDiffServELSPPHB7=mplsDiffServELSPPHB7, mplsTeNotificationGroup=mplsTeNotificationGroup, mplsTunnelUniIngressLabel=mplsTunnelUniIngressLabel, mplsTunnelMaxHops=mplsTunnelMaxHops, mplsTunnelHoldingPrio=mplsTunnelHoldingPrio, mplsTunnelAdminStatus=mplsTunnelAdminStatus, mplsTunnelDownNotRecipType=mplsTunnelDownNotRecipType, mplsDiffServELSPPHB0=mplsDiffServELSPPHB0, mplsTunnelDirection=mplsTunnelDirection, mplsTunnelUpNotRecip=mplsTunnelUpNotRecip, mplsTunnelCHopTableIndex=mplsTunnelCHopTableIndex, mplsTunnelHopIndexNextTable=mplsTunnelHopIndexNextTable, mplsTunnelUniRvsIngrLabelType=mplsTunnelUniRvsIngrLabelType, mplsTunnelCRLDPResRowStatus=mplsTunnelCRLDPResRowStatus, mplsTunnelARHopTable=mplsTunnelARHopTable, mplsTunnelUniDiversityListIndex=mplsTunnelUniDiversityListIndex, mplsTunnelHopAsNumber=mplsTunnelHopAsNumber, prvtMplsTunnelUNIDivListIdxNext=prvtMplsTunnelUNIDivListIdxNext, mplsDiffServIndexNextIndex=mplsDiffServIndexNextIndex, mplsTunnelCHopExpRvrsLabelType=mplsTunnelCHopExpRvrsLabelType, mplsTunnelSonetResRowStatus=mplsTunnelSonetResRowStatus, mplsTunnelHopRowStatus=mplsTunnelHopRowStatus, mplsTunnelErrorReporterType=mplsTunnelErrorReporterType, mplsTunnelCHopLspId=mplsTunnelCHopLspId, mplsDiffServTable=mplsDiffServTable, mplsTunnelARHopExpLabelType=mplsTunnelARHopExpLabelType, mplsTunnelTotalUpTime=mplsTunnelTotalUpTime, mplsTunnelSwitchingType=mplsTunnelSwitchingType, mplsTunnelDestTNAAddress=mplsTunnelDestTNAAddress, mplsTunnelDeletionMode=mplsTunnelDeletionMode, mplsTunnelARHopIpAddr=mplsTunnelARHopIpAddr, prvtMplsTunnelUNIDiversityTable=prvtMplsTunnelUNIDiversityTable, mplsTunnelResourceEntry=mplsTunnelResourceEntry, mplsTunnelUnnumIf=mplsTunnelUnnumIf, mplsTunnelTEDistProto=mplsTunnelTEDistProto, mplsDiffServGroup=mplsDiffServGroup, mplsTunnelCRLDPResEntry=mplsTunnelCRLDPResEntry, mplsTunnelSonetGroup=mplsTunnelSonetGroup, mplsTunnelUniEgressLabelType=mplsTunnelUniEgressLabelType, mplsTunnelResourceIndex=mplsTunnelResourceIndex, mplsTunnelIsNotIntfcGroup=mplsTunnelIsNotIntfcGroup, mplsTunnelTable=mplsTunnelTable, mplsTunnelLSPEncoding=mplsTunnelLSPEncoding, mplsTunnelUniGroup=mplsTunnelUniGroup, mplsTunnelUseEgressLabel=mplsTunnelUseEgressLabel, mplsTunnelHopExpRvrsLabel=mplsTunnelHopExpRvrsLabel, mplsTunnelARHopExpRvrsLabelType=mplsTunnelARHopExpRvrsLabelType, mplsTunnelGroup=mplsTunnelGroup, mplsTunnelUniEgressLabel=mplsTunnelUniEgressLabel, mplsTunnelResourceStorageType=mplsTunnelResourceStorageType, mplsTunnelEntry=mplsTunnelEntry, mplsTunnelNotification=mplsTunnelNotification, mplsTunnelHoldTimer=mplsTunnelHoldTimer, mplsTunnelSignallingProto=mplsTunnelSignallingProto, mplsTunnelCRLDPResFlags=mplsTunnelCRLDPResFlags, mplsTunnelSecondary=mplsTunnelSecondary, mplsTunnelHopTableIndex=mplsTunnelHopTableIndex, mplsTunnelSrcTNAAddressType=mplsTunnelSrcTNAAddressType, mplsTunnelProtecting=mplsTunnelProtecting, mplsTunnelCHopListIndex=mplsTunnelCHopListIndex, mplsTunnelLocalProtectInUse=mplsTunnelLocalProtectInUse, mplsTunnelMBBTimeOut=mplsTunnelMBBTimeOut, prvtMplsTunnelTrapEnableTable=prvtMplsTunnelTrapEnableTable, mplsTunnelOperStatus=mplsTunnelOperStatus, mplsTunnelHopLspId=mplsTunnelHopLspId, mplsTunnelHopExpLabel=mplsTunnelHopExpLabel, mplsTunnelErrorHelpString=mplsTunnelErrorHelpString, mplsTunnelCHopIpAddr=mplsTunnelCHopIpAddr, mplsDiffServELSPPHB1=mplsDiffServELSPPHB1, prvtMplsTunnelUNIDivIdx=prvtMplsTunnelUNIDivIdx, mplsTunnelPerfPackets=mplsTunnelPerfPackets, mplsTunnelOperStatusFlags=mplsTunnelOperStatusFlags, mplsDiffServELSPNumPHBs=mplsDiffServELSPNumPHBs, mplsTunnelHopLabelStatuses=mplsTunnelHopLabelStatuses, mplsTeNotifications=mplsTeNotifications, mplsTunnelCallIdType=mplsTunnelCallIdType, prvtMplsTunnelUNIDivRowStatus=prvtMplsTunnelUNIDivRowStatus, mplsTeMIB=mplsTeMIB, mplsTunnelBackupSetupPrio=mplsTunnelBackupSetupPrio, mplsTunnelUniIngressLabelType=mplsTunnelUniIngressLabelType, mplsTeCompliances=mplsTeCompliances, MplsTunnelTNAAddress=MplsTunnelTNAAddress, mplsDiffServIndexNextEntry=mplsDiffServIndexNextEntry, mplsTeMibEntityScalarEntry=mplsTeMibEntityScalarEntry, mplsTunnelManualGroup=mplsTunnelManualGroup, mplsTunnelErrorCode=mplsTunnelErrorCode, mplsDiffServEntry=mplsDiffServEntry, mplsTunnelLastPathChange=mplsTunnelLastPathChange, mplsTunnelReversePrivateData=mplsTunnelReversePrivateData, mplsTunnelErrorSubcode=mplsTunnelErrorSubcode, mplsTunnelDiffServClassType=mplsTunnelDiffServClassType, mplsTunnelIsIntfcGroup=mplsTunnelIsIntfcGroup, mplsTunnelEndToEndRerouting=mplsTunnelEndToEndRerouting, mplsTunnelUp=mplsTunnelUp, mplsTunnelSrcTNAAddress=mplsTunnelSrcTNAAddress, mplsTunnelGPid=mplsTunnelGPid, PYSNMP_MODULE_ID=mplsTeMIB, mplsTunnelEgressLabel=mplsTunnelEgressLabel, mplsTunnelIsSpc=mplsTunnelIsSpc, mplsTunnelCHopLabelStatuses=mplsTunnelCHopLabelStatuses, mplsTeNotifyPrefix=mplsTeNotifyPrefix, mplsTunnelBackupHoldingPriority=mplsTunnelBackupHoldingPriority, mplsDiffServType=mplsDiffServType, mplsTunnelCHopAddrUnnum=mplsTunnelCHopAddrUnnum, mplsTunnelErrorLastErrorType=mplsTunnelErrorLastErrorType, mplsTunnelResourceRowStatus=mplsTunnelResourceRowStatus, mplsTunnelCHopType=mplsTunnelCHopType, mplsTunnelIncludeAllAffinity=mplsTunnelIncludeAllAffinity, mplsTunnelLspProtection=mplsTunnelLspProtection, MplsLsrId=MplsLsrId, mplsTunnelIsIf=mplsTunnelIsIf, mplsTunnelCRLDPResWeight=mplsTunnelCRLDPResWeight, mplsTunnelResourceFrequency=mplsTunnelResourceFrequency, mplsTunnelCRLDPResExBurstSize=mplsTunnelCRLDPResExBurstSize, mplsTunnelDestTNAAddressType=mplsTunnelDestTNAAddressType, mplsTunnelARHopEntry=mplsTunnelARHopEntry, mplsTunnelHopInclude=mplsTunnelHopInclude, mplsTunnelARHopExpRvrsLabel=mplsTunnelARHopExpRvrsLabel, mplsTunnelErrorLastTime=mplsTunnelErrorLastTime, mplsTunnelCRLDPResOptionalGroup=mplsTunnelCRLDPResOptionalGroup, mplsTunnelPathComp=mplsTunnelPathComp, mplsTunnelOmitEROIfOneHop=mplsTunnelOmitEROIfOneHop, mplsTunnelEgressLabelType=mplsTunnelEgressLabelType, mplsTunnelBackupMaxHops=mplsTunnelBackupMaxHops, mplsTunnelARHopIndex=mplsTunnelARHopIndex, mplsTunnelARHopTableIndex=mplsTunnelARHopTableIndex, mplsTunnelRole=mplsTunnelRole, prvtMplsTunnelUNIDvLstIdxNxtEntry=prvtMplsTunnelUNIDvLstIdxNxtEntry, mplsTunnelPerfHCBytes=mplsTunnelPerfHCBytes, mplsTunnelSonetResSignalType=mplsTunnelSonetResSignalType, mplsTunnelCRLDPResStorageType=mplsTunnelCRLDPResStorageType, mplsTunnelScalarGroup=mplsTunnelScalarGroup, mplsTunnelARHopGroup=mplsTunnelARHopGroup, mplsTunnelCHopIndex=mplsTunnelCHopIndex, mplsTunnelBackupExcAny=mplsTunnelBackupExcAny, mplsTunnelIncludeAnyAffinity=mplsTunnelIncludeAnyAffinity, mplsDiffServIndexNextTable=mplsDiffServIndexNextTable, prvtMplsTunnelUNIDivAccess=prvtMplsTunnelUNIDivAccess, mplsTunnelHopEntry=mplsTunnelHopEntry, MplsTunnelIndexSyntax=MplsTunnelIndexSyntax, mplsTunnelSonetResTable=mplsTunnelSonetResTable, mplsTunnelCallId=mplsTunnelCallId, mplsTunnelBackupIncAll=mplsTunnelBackupIncAll, mplsTunnelMtu=mplsTunnelMtu, mplsTunnelUniRvsEgressLabelType=mplsTunnelUniRvsEgressLabelType, mplsDiffServELSPPHB4=mplsDiffServELSPPHB4, mplsTunnelPrimaryUpTime=mplsTunnelPrimaryUpTime, mplsTunnelErrorTLVs=mplsTunnelErrorTLVs, mplsTunnelHopExpRvrsLabelType=mplsTunnelHopExpRvrsLabelType, mplsTunnelPerfEntry=mplsTunnelPerfEntry, mplsTunnelResourceExBurstSize=mplsTunnelResourceExBurstSize, mplsTunnelBackupGroup=mplsTunnelBackupGroup, mplsTunnelExcludeAnyAffinity=mplsTunnelExcludeAnyAffinity, mplsDiffServIndex=mplsDiffServIndex, mplsTunnelSonetResMultiplier=mplsTunnelSonetResMultiplier, mplsTunnelEgressLSRId=mplsTunnelEgressLSRId, mplsTunnelHopStorageType=mplsTunnelHopStorageType, mplsTunnelStateTransitions=mplsTunnelStateTransitions, mplsTunnelExtendedProtection=mplsTunnelExtendedProtection, mplsTunnelXCPointer=mplsTunnelXCPointer, mplsTunnelSessionAttributes=mplsTunnelSessionAttributes, mplsTunnelPathInUse=mplsTunnelPathInUse, mplsTunnelInstanceUpTime=mplsTunnelInstanceUpTime, mplsTunnelHopIndex=mplsTunnelHopIndex, mplsTunnelUniRvsIngrLabel=mplsTunnelUniRvsIngrLabel, mplsTunnelResourceIndexNextTable=mplsTunnelResourceIndexNextTable, mplsTunnelPerfTable=mplsTunnelPerfTable, mplsDiffServELSPPHB2=mplsDiffServELSPPHB2, mplsTunnelPerfBytes=mplsTunnelPerfBytes, prvtMplsTunnelUNIDivRowPointer=prvtMplsTunnelUNIDivRowPointer, mplsTunnelUniRvsEgressLabelPort=mplsTunnelUniRvsEgressLabelPort, mplsTunnelUniEgressLabelPort=mplsTunnelUniEgressLabelPort, mplsTunnelHopIndexNextIndex=mplsTunnelHopIndexNextIndex, mplsTunnelARHopLspId=mplsTunnelARHopLspId, mplsDiffServELSPPHB3=mplsDiffServELSPPHB3, mplsTunnelAttributes=mplsTunnelAttributes, mplsTunnelHopAddrType=mplsTunnelHopAddrType, prvtMplsTunnelUNIDiversityEntry=prvtMplsTunnelUNIDiversityEntry, mplsTunnelPrimaryInstance=mplsTunnelPrimaryInstance, mplsTunnelErrorEntry=mplsTunnelErrorEntry, mplsTunnelDownNotRecip=mplsTunnelDownNotRecip, mplsTunnelBackupBandwidth=mplsTunnelBackupBandwidth, mplsTunnelResourceMaxRate=mplsTunnelResourceMaxRate, mplsTunnelRerouted=mplsTunnelRerouted, mplsTunnelInstance=mplsTunnelInstance, mplsTunnelSetupPrio=mplsTunnelSetupPrio, mplsTunnelPrivateData=mplsTunnelPrivateData, mplsTunnelTrapEnable=mplsTunnelTrapEnable, mplsTunnelHopListIndex=mplsTunnelHopListIndex, mplsTunnelSonetResTransparency=mplsTunnelSonetResTransparency, mplsTunnelHopPathOptionIndex=mplsTunnelHopPathOptionIndex, prvtMplsTunnelTrapEnableEntry=prvtMplsTunnelTrapEnableEntry, mplsTeMibEntityScalarTable=mplsTeMibEntityScalarTable, mplsTunnelCHopIpPrefixLen=mplsTunnelCHopIpPrefixLen, mplsTunnelIfIndex=mplsTunnelIfIndex, mplsTunnelFastRerouteMode=mplsTunnelFastRerouteMode, mplsTunnelHopAddrUnnum=mplsTunnelHopAddrUnnum, mplsDiffServELSPPHB5=mplsDiffServELSPPHB5, mplsTunnelIndexNextIndex=mplsTunnelIndexNextIndex)
mibBuilder.exportSymbols("PRVT-MPLS-TE-MIB", mplsTunnelSonetResNCC=mplsTunnelSonetResNCC, mplsTunnelOwner=mplsTunnelOwner, mplsTunnelResourceIndexNextIndex=mplsTunnelResourceIndexNextIndex, mplsTunnelPerfHCPackets=mplsTunnelPerfHCPackets, mplsTeModuleFullCompliance=mplsTeModuleFullCompliance, mplsTunnelSignaledGroup=mplsTunnelSignaledGroup, MplsGeneralizedLabel=MplsGeneralizedLabel, mplsTunnelCHopAddrType=mplsTunnelCHopAddrType, mplsTunnelUniRvsIngrLabelPort=mplsTunnelUniRvsIngrLabelPort, mplsTunnelARHopAddrUnnum=mplsTunnelARHopAddrUnnum, mplsTunnelActive=mplsTunnelActive, mplsTunnelResourceMaxBurstSize=mplsTunnelResourceMaxBurstSize, mplsTunnelGuardedDest=mplsTunnelGuardedDest, mplsTunnelARHopProtection=mplsTunnelARHopProtection, mplsDiffServLLSPPSC=mplsDiffServLLSPPSC, prvtMplsTunnelUNIDvLstIdxNxtTable=prvtMplsTunnelUNIDvLstIdxNxtTable, mplsTunnelSonetResNVC=mplsTunnelSonetResNVC, mplsTunnelResourceIndexNextEntry=mplsTunnelResourceIndexNextEntry, mplsTunnelCHopAsNumber=mplsTunnelCHopAsNumber, mplsTunnelIndex=mplsTunnelIndex, mplsTunnelARHopListIndex=mplsTunnelARHopListIndex, mplsTunnelResourceWeight=mplsTunnelResourceWeight, mplsDiffServELSPPHB6=mplsDiffServELSPPHB6, mplsTunnelCHopExpLabel=mplsTunnelCHopExpLabel, mplsDiffServRowStatus=mplsDiffServRowStatus, mplsTunnelCRLDPResFrequency=mplsTunnelCRLDPResFrequency, mplsTunnelHopPathOptionName=mplsTunnelHopPathOptionName, mplsTunnelAdminStatusFlags=mplsTunnelAdminStatusFlags, mplsTeGroups=mplsTeGroups, prvtMplsTunnelOperStatus=prvtMplsTunnelOperStatus, mplsTunnelDescr=mplsTunnelDescr, mplsTunnelResourceMeanBurstSize=mplsTunnelResourceMeanBurstSize, mplsTunnelHopType=mplsTunnelHopType, mplsTunnelExtraParamsPtr=mplsTunnelExtraParamsPtr)
