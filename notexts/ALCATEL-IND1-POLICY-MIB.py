#
# PySNMP MIB module ALCATEL-IND1-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-POLICY-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:47:53 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Policy, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Policy")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ModuleIdentity, IpAddress, Gauge32, MibIdentifier, TimeTicks, iso, Integer32, Unsigned32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks", "iso", "Integer32", "Unsigned32", "NotificationType", "ObjectIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
alcatelIND1PolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1))
alcatelIND1PolicyMIB.setRevisions(('2010-05-13 00:00',))
if mibBuilder.loadTexts: alcatelIND1PolicyMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1PolicyMIB.setOrganization('Alcatel-Lucent')
alcatelIND1PolicyMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 0))
if mibBuilder.loadTexts: alcatelIND1PolicyMIBNotifications.setStatus('current')
alcatelIND1PolicyMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1))
if mibBuilder.loadTexts: alcatelIND1PolicyMIBObjects.setStatus('current')
alcatelIND1PolicyMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2))
if mibBuilder.loadTexts: alcatelIND1PolicyMIBConformance.setStatus('current')
alcatelIND1PolicyMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1PolicyMIBGroups.setStatus('current')
alcatelIND1PolicyMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1PolicyMIBCompliances.setStatus('current')
class PolicyEventCodes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58))
    namedValues = NamedValues(("pyEventInitLog", 1), ("pyEventLdapInit", 2), ("pyEventLdapSearch", 3), ("pyEventTooManyRequests", 4), ("pyEventServerStateChange", 5), ("pyEventLdapSyntaxSourceAddr", 6), ("pyEventLdapSyntaxDestAddr", 7), ("pyEventLdapSyntaxInDSByte", 8), ("pyEventLdapSyntaxRecDSByte", 9), ("pyEventLdapSyntaxPVPMonth", 10), ("pyEventLdapSyntaxPVPDoW", 11), ("pyEventLdapSyntaxPVPToD", 12), ("pyEventLdapSyntaxPVPTime", 13), ("pyEventLdapSyntaxSPort", 14), ("pyEventLdapSyntaxDPort", 15), ("pyEventLdapReferenceTP", 16), ("pyEventLdapReferencePVP", 17), ("pyEventInternalCodeError", 18), ("pyEventLdapSelectError", 19), ("pyEventLdapReferenceXYLAN", 20), ("pyEventDebugMemoryAlloc", 21), ("pyEventDebugMemoryFree", 22), ("pyEventPolicyCacheFlushed", 23), ("pyEventLdapServerDefined", 24), ("pyEventLdapSyntaxSourceMACAddr", 25), ("pyEventLdapSyntaxDestMACAddr", 26), ("pyEventLdapServerDeleted", 27), ("pyEventOptimizedPvpMonth", 28), ("pyEventOptimizedPvpDoW", 29), ("pyEventZeroPvpMonth", 30), ("pyEventZeroPvpDoW", 31), ("pyEventRuleScope", 32), ("pyEventRuleActivated", 33), ("pyEventRuleDeactivated", 34), ("pyEventLdapReferenceIPFilter", 35), ("pyEventLdapSyntaxTOSByte", 36), ("pyEventTimeChangeDetected", 37), ("pyEventPolicyWillNeverBeValid", 38), ("pyEventLdapSetOption", 39), ("pyEventLdapTLSChannelInit", 40), ("pyEventLdapTLSParametersOK", 41), ("pyEventMaxPolicyCountReached", 42), ("pyEventMemoryError", 43), ("pyEventMonitorSocketError", 44), ("pyEventDispositionError", 45), ("pyEventNameLengthError", 46), ("pyEventTableResize", 47), ("pyEvent48", 48), ("pyEvent49", 49), ("pyEvent50", 50), ("pyEvent51", 51), ("pyEvent52", 52), ("pyEvent53", 53), ("pyEvent54", 54), ("pyEvent55", 55), ("pyEvent56", 56), ("pyEvent57", 57), ("pyEventPolicyCacheLoaded", 58))

serverPolicyDecision = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("flushPolicies", 0), ("recachePolicies", 1), ("recacheQMMACGroup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPolicyDecision.setStatus('current')
rsvpDefaultPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2))))
if mibBuilder.loadTexts: rsvpDefaultPolicy.setStatus('deprecated')
policyManagerEventTableSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyManagerEventTableSize.setStatus('current')
directoryServerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4), )
if mibBuilder.loadTexts: directoryServerTable.setStatus('current')
directoryServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-POLICY-MIB", "directoryServerAddress"), (0, "ALCATEL-IND1-POLICY-MIB", "directoryServerPort"))
if mibBuilder.loadTexts: directoryServerEntry.setStatus('current')
directoryServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: directoryServerAddress.setStatus('current')
directoryServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(389)).setMaxAccess("readonly")
if mibBuilder.loadTexts: directoryServerPort.setStatus('current')
directoryServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerPreference.setStatus('current')
directoryServerAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("simplePassword", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerAuthenticationType.setStatus('current')
directoryServerUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerUserId.setStatus('current')
directoryServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerPassword.setStatus('current')
directoryServerSearchbase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('o=Alcatel IND, c=US')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerSearchbase.setStatus('current')
directoryServerCacheChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("recachePolicy", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerCacheChange.setStatus('current')
directoryServerLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: directoryServerLastChange.setStatus('current')
directoryServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerAdminStatus.setStatus('current')
directoryServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: directoryServerOperStatus.setStatus('current')
directoryServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 12), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerRowStatus.setStatus('current')
directoryServerEnableSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableSSL", 0), ("enableSSL", 1))).clone('disableSSL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: directoryServerEnableSSL.setStatus('current')
policyEventTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5), )
if mibBuilder.loadTexts: policyEventTable.setStatus('current')
policyEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-POLICY-MIB", "policyEventIndex"))
if mibBuilder.loadTexts: policyEventEntry.setStatus('current')
policyEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyEventIndex.setStatus('current')
policyEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5, 1, 2), PolicyEventCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyEventCode.setStatus('current')
policyEventDetailString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyEventDetailString.setStatus('current')
policyEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyEventTime.setStatus('current')
policyRuleNamesTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6), )
if mibBuilder.loadTexts: policyRuleNamesTable.setStatus('current')
policyRuleNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-POLICY-MIB", "policyRuleNamesIndex"))
if mibBuilder.loadTexts: policyRuleNamesEntry.setStatus('current')
policyRuleNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyRuleNamesIndex.setStatus('current')
policyRuleNamesName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyRuleNamesName.setStatus('current')
policyRuleNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6, 1, 3), RowStatus().clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyRuleNamesRowStatus.setStatus('current')
policyRuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notReady", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyRuleOperStatus.setStatus('current')
policyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7), )
if mibBuilder.loadTexts: policyStatsTable.setStatus('current')
policyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-POLICY-MIB", "policyStatsAddress"), (0, "ALCATEL-IND1-POLICY-MIB", "policyStatsServerPort"))
if mibBuilder.loadTexts: policyStatsEntry.setStatus('current')
policyStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsAddress.setStatus('current')
policyStatsServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsServerPort.setStatus('current')
policyStatsQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsQueryCount.setStatus('current')
policyStatsAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsAccessCount.setStatus('current')
policyStatsSuccessAccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsSuccessAccessCount.setStatus('current')
policyStatsNotFoundCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStatsNotFoundCount.setStatus('current')
policyNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 8), )
if mibBuilder.loadTexts: policyNotificationTable.setStatus('current')
policyNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-POLICY-MIB", "policyNotificationIndex"))
if mibBuilder.loadTexts: policyNotificationEntry.setStatus('current')
policyNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 8, 1, 1), PolicyEventCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyNotificationIndex.setStatus('current')
policyNotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noNotification", 0), ("writeToLog", 1), ("sendTrap", 2), ("logAndTrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyNotificationCode.setStatus('current')
policyEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyEventCount.setStatus('current')
policyManagerSwitchIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyManagerSwitchIdentifier.setStatus('current')
policyManagerTrapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 10))
policyEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 0, 1)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyTrapEventDetailString"), ("ALCATEL-IND1-POLICY-MIB", "policyTrapEventCode"))
if mibBuilder.loadTexts: policyEventNotification.setStatus('current')
policyTrapEventDetailString = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 10, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTrapEventDetailString.setStatus('current')
policyTrapEventCode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 1, 10, 2), PolicyEventCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTrapEventCode.setStatus('current')
alcatelIND1PolicyMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyMIBGlobalGroup"), ("ALCATEL-IND1-POLICY-MIB", "policyMIBDirectoryServerGroup"), ("ALCATEL-IND1-POLICY-MIB", "policyMIBEventTableGroup"), ("ALCATEL-IND1-POLICY-MIB", "policyMIBRuleNamesGroup"), ("ALCATEL-IND1-POLICY-MIB", "policyMIBStatsGroup"), ("ALCATEL-IND1-POLICY-MIB", "policyMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1PolicyMIBCompliance = alcatelIND1PolicyMIBCompliance.setStatus('current')
policyMIBGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-POLICY-MIB", "serverPolicyDecision"), ("ALCATEL-IND1-POLICY-MIB", "policyManagerEventTableSize"), ("ALCATEL-IND1-POLICY-MIB", "policyManagerSwitchIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBGlobalGroup = policyMIBGlobalGroup.setStatus('current')
policyMIBDirectoryServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-POLICY-MIB", "directoryServerAddress"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerPort"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerPreference"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerAuthenticationType"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerUserId"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerPassword"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerSearchbase"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerCacheChange"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerLastChange"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerAdminStatus"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerOperStatus"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerRowStatus"), ("ALCATEL-IND1-POLICY-MIB", "directoryServerEnableSSL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBDirectoryServerGroup = policyMIBDirectoryServerGroup.setStatus('current')
policyMIBEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyEventIndex"), ("ALCATEL-IND1-POLICY-MIB", "policyEventCode"), ("ALCATEL-IND1-POLICY-MIB", "policyEventDetailString"), ("ALCATEL-IND1-POLICY-MIB", "policyEventTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBEventTableGroup = policyMIBEventTableGroup.setStatus('current')
policyMIBRuleNamesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyRuleNamesIndex"), ("ALCATEL-IND1-POLICY-MIB", "policyRuleNamesName"), ("ALCATEL-IND1-POLICY-MIB", "policyRuleNamesRowStatus"), ("ALCATEL-IND1-POLICY-MIB", "policyRuleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBRuleNamesGroup = policyMIBRuleNamesGroup.setStatus('current')
policyMIBStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyStatsAddress"), ("ALCATEL-IND1-POLICY-MIB", "policyStatsServerPort"), ("ALCATEL-IND1-POLICY-MIB", "policyStatsAccessCount"), ("ALCATEL-IND1-POLICY-MIB", "policyStatsSuccessAccessCount"), ("ALCATEL-IND1-POLICY-MIB", "policyStatsNotFoundCount"), ("ALCATEL-IND1-POLICY-MIB", "policyStatsQueryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBStatsGroup = policyMIBStatsGroup.setStatus('current')
policyMIBNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyNotificationIndex"), ("ALCATEL-IND1-POLICY-MIB", "policyNotificationCode"), ("ALCATEL-IND1-POLICY-MIB", "policyEventCount"), ("ALCATEL-IND1-POLICY-MIB", "policyTrapEventDetailString"), ("ALCATEL-IND1-POLICY-MIB", "policyTrapEventCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBNotificationGroup = policyMIBNotificationGroup.setStatus('current')
policyMIBTrapEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyTrapEventDetailString"), ("ALCATEL-IND1-POLICY-MIB", "policyTrapEventCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBTrapEventGroup = policyMIBTrapEventGroup.setStatus('current')
policyMIBTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 14, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-POLICY-MIB", "policyEventNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    policyMIBTrapsGroup = policyMIBTrapsGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-POLICY-MIB", alcatelIND1PolicyMIB=alcatelIND1PolicyMIB, directoryServerAdminStatus=directoryServerAdminStatus, directoryServerRowStatus=directoryServerRowStatus, policyStatsTable=policyStatsTable, policyMIBNotificationGroup=policyMIBNotificationGroup, policyNotificationTable=policyNotificationTable, alcatelIND1PolicyMIBNotifications=alcatelIND1PolicyMIBNotifications, policyEventCount=policyEventCount, PYSNMP_MODULE_ID=alcatelIND1PolicyMIB, directoryServerEnableSSL=directoryServerEnableSSL, alcatelIND1PolicyMIBCompliances=alcatelIND1PolicyMIBCompliances, directoryServerTable=directoryServerTable, alcatelIND1PolicyMIBConformance=alcatelIND1PolicyMIBConformance, policyEventCode=policyEventCode, policyStatsAddress=policyStatsAddress, directoryServerPreference=directoryServerPreference, policyStatsNotFoundCount=policyStatsNotFoundCount, policyRuleNamesIndex=policyRuleNamesIndex, policyNotificationCode=policyNotificationCode, policyRuleOperStatus=policyRuleOperStatus, policyStatsSuccessAccessCount=policyStatsSuccessAccessCount, directoryServerEntry=directoryServerEntry, policyMIBDirectoryServerGroup=policyMIBDirectoryServerGroup, directoryServerSearchbase=directoryServerSearchbase, policyStatsEntry=policyStatsEntry, policyEventDetailString=policyEventDetailString, policyStatsQueryCount=policyStatsQueryCount, policyMIBGlobalGroup=policyMIBGlobalGroup, directoryServerPassword=directoryServerPassword, policyEventTime=policyEventTime, policyRuleNamesName=policyRuleNamesName, rsvpDefaultPolicy=rsvpDefaultPolicy, serverPolicyDecision=serverPolicyDecision, policyTrapEventCode=policyTrapEventCode, policyMIBRuleNamesGroup=policyMIBRuleNamesGroup, policyEventIndex=policyEventIndex, policyNotificationIndex=policyNotificationIndex, alcatelIND1PolicyMIBGroups=alcatelIND1PolicyMIBGroups, policyRuleNamesTable=policyRuleNamesTable, policyNotificationEntry=policyNotificationEntry, policyManagerSwitchIdentifier=policyManagerSwitchIdentifier, policyEventEntry=policyEventEntry, directoryServerLastChange=directoryServerLastChange, policyStatsAccessCount=policyStatsAccessCount, directoryServerUserId=directoryServerUserId, policyManagerTrapObjs=policyManagerTrapObjs, directoryServerAddress=directoryServerAddress, policyMIBEventTableGroup=policyMIBEventTableGroup, directoryServerAuthenticationType=directoryServerAuthenticationType, policyTrapEventDetailString=policyTrapEventDetailString, PolicyEventCodes=PolicyEventCodes, policyManagerEventTableSize=policyManagerEventTableSize, policyMIBTrapsGroup=policyMIBTrapsGroup, alcatelIND1PolicyMIBObjects=alcatelIND1PolicyMIBObjects, policyStatsServerPort=policyStatsServerPort, alcatelIND1PolicyMIBCompliance=alcatelIND1PolicyMIBCompliance, directoryServerOperStatus=directoryServerOperStatus, policyMIBStatsGroup=policyMIBStatsGroup, directoryServerPort=directoryServerPort, directoryServerCacheChange=directoryServerCacheChange, policyEventNotification=policyEventNotification, policyMIBTrapEventGroup=policyMIBTrapEventGroup, policyRuleNamesRowStatus=policyRuleNamesRowStatus, policyRuleNamesEntry=policyRuleNamesEntry, policyEventTable=policyEventTable)
