#
# PySNMP MIB module PRVT-ELMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-ELMI-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:20:41 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, IpAddress, TimeTicks, ModuleIdentity, Integer32, Gauge32, MibIdentifier, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, transmission, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "IpAddress", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "transmission", "Bits", "iso")
RowStatus, TimeStamp, TruthValue, StorageType, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "TruthValue", "StorageType", "DisplayString", "TextualConvention")
prvtELMIMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 120))
prvtELMIMib.setRevisions(('2009-07-13 00:00',))
if mibBuilder.loadTexts: prvtELMIMib.setLastUpdated('200907130000Z')
if mibBuilder.loadTexts: prvtELMIMib.setOrganization('BATM Advanced Communication')
prvtELMINotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 0))
prvtELMIObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1))
prvtELMIConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 2))
prvtELMIEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIEnable.setStatus('current')
prvtELMICfgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2), )
if mibBuilder.loadTexts: prvtELMICfgTable.setStatus('current')
prvtELMICfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtELMICfgEntry.setStatus('current')
prvtELMIIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIIfEnable.setStatus('current')
prvtELMIIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni-n", 1), ("uni-c", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIIfMode.setStatus('current')
prvtELMIPollingCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(360)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIPollingCnt.setStatus('current')
prvtELMIPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIPollingTimer.setStatus('current')
prvtELMIVerifPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIVerifPollTimer.setStatus('current')
prvtELMIStatusCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIStatusCnt.setStatus('current')
prvtELMIClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtELMIClearStatistics.setStatus('current')
prvtELMIMapEvcCEVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allToOneBundling", 1), ("serviceMultiplexingWithNoBund", 2), ("budling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIMapEvcCEVlanType.setStatus('current')
prvtELMIStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3), )
if mibBuilder.loadTexts: prvtELMIStatisticsTable.setStatus('current')
prvtELMIStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtELMIStatisticsEntry.setStatus('current')
prvtELMIStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIStatusChange.setStatus('current')
prvtELMILastFullReport = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMILastFullReport.setStatus('current')
prvtELMITimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMITimeOuts.setStatus('current')
prvtELMIMsgISN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIMsgISN.setStatus('current')
prvtELMIInavlidProtocolVers = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIInavlidProtocolVers.setStatus('current')
prvtELMIEVCInvalidRefId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIEVCInvalidRefId.setStatus('current')
prvtELMIInavlidMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIInavlidMsgType.setStatus('current')
prvtELMIOOSIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIOOSIE.setStatus('current')
prvtELMIDuplicateIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIDuplicateIE.setStatus('current')
prvtELMIMandatoryIEMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIMandatoryIEMissing.setStatus('current')
prvtELMIInavlidMandatoryIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIInavlidMandatoryIE.setStatus('current')
prvtELMIInvalidNonMandatoryIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIInvalidNonMandatoryIE.setStatus('current')
prvtELMIUnrecognizedIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIUnrecognizedIE.setStatus('current')
prvtELMIUnexpectedIE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIUnexpectedIE.setStatus('current')
prvtELMIShortMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIShortMessage.setStatus('current')
prvtELMIEVCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4), )
if mibBuilder.loadTexts: prvtELMIEVCTable.setStatus('current')
prvtELMIEVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-ELMI-MIB", "prvtELMIEVCId"))
if mibBuilder.loadTexts: prvtELMIEVCEntry.setStatus('current')
prvtELMIEVCId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtELMIEVCId.setStatus('current')
prvtELMIServicesId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIServicesId.setStatus('current')
prvtELMIEVCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("non-active", 0), ("new-non-active", 1), ("active", 2), ("new-active", 3), ("partially-active", 4), ("new-partially-active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIEVCStatus.setStatus('current')
prvtELMIEVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("multi-point-to-point", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIEVCType.setStatus('current')
prvtELMIMapEvcCEVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 5), )
if mibBuilder.loadTexts: prvtELMIMapEvcCEVlanTable.setStatus('current')
prvtELMIMapEvcCEVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-ELMI-MIB", "prvtELMIMapEVCId"), (0, "PRVT-ELMI-MIB", "prvtELMIMapCeVlanId"))
if mibBuilder.loadTexts: prvtELMIMapEvcCEVlanEntry.setStatus('current')
prvtELMIMapEVCId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIMapEVCId.setStatus('current')
prvtELMIMapCeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtELMIMapCeVlanId.setStatus('current')
prvtELMIStatus = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 0, 1)).setObjects(("PRVT-ELMI-MIB", "prvtELMIEnable"), ("PRVT-ELMI-MIB", "prvtELMIStatusChange"))
if mibBuilder.loadTexts: prvtELMIStatus.setStatus('current')
prvtELMIChangeEVC = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 120, 0, 2)).setObjects(("PRVT-ELMI-MIB", "prvtELMIEVCId"))
if mibBuilder.loadTexts: prvtELMIChangeEVC.setStatus('current')
mibBuilder.exportSymbols("PRVT-ELMI-MIB", prvtELMIChangeEVC=prvtELMIChangeEVC, prvtELMIEVCStatus=prvtELMIEVCStatus, prvtELMINotifications=prvtELMINotifications, prvtELMIInvalidNonMandatoryIE=prvtELMIInvalidNonMandatoryIE, prvtELMIMapEVCId=prvtELMIMapEVCId, prvtELMIUnrecognizedIE=prvtELMIUnrecognizedIE, prvtELMIInavlidMandatoryIE=prvtELMIInavlidMandatoryIE, prvtELMIUnexpectedIE=prvtELMIUnexpectedIE, prvtELMIStatus=prvtELMIStatus, prvtELMIEVCInvalidRefId=prvtELMIEVCInvalidRefId, prvtELMIEVCEntry=prvtELMIEVCEntry, prvtELMIStatusChange=prvtELMIStatusChange, prvtELMICfgTable=prvtELMICfgTable, prvtELMIMapEvcCEVlanType=prvtELMIMapEvcCEVlanType, prvtELMIMandatoryIEMissing=prvtELMIMandatoryIEMissing, prvtELMIVerifPollTimer=prvtELMIVerifPollTimer, prvtELMIOOSIE=prvtELMIOOSIE, prvtELMIMsgISN=prvtELMIMsgISN, prvtELMIInavlidMsgType=prvtELMIInavlidMsgType, PYSNMP_MODULE_ID=prvtELMIMib, prvtELMIEVCId=prvtELMIEVCId, prvtELMIIfEnable=prvtELMIIfEnable, prvtELMIIfMode=prvtELMIIfMode, prvtELMIInavlidProtocolVers=prvtELMIInavlidProtocolVers, prvtELMIEVCType=prvtELMIEVCType, prvtELMIStatisticsEntry=prvtELMIStatisticsEntry, prvtELMIMapEvcCEVlanTable=prvtELMIMapEvcCEVlanTable, prvtELMICfgEntry=prvtELMICfgEntry, prvtELMIConformance=prvtELMIConformance, prvtELMIClearStatistics=prvtELMIClearStatistics, prvtELMIStatusCnt=prvtELMIStatusCnt, prvtELMIMapEvcCEVlanEntry=prvtELMIMapEvcCEVlanEntry, prvtELMIShortMessage=prvtELMIShortMessage, prvtELMILastFullReport=prvtELMILastFullReport, prvtELMIServicesId=prvtELMIServicesId, prvtELMIPollingCnt=prvtELMIPollingCnt, prvtELMIStatisticsTable=prvtELMIStatisticsTable, prvtELMITimeOuts=prvtELMITimeOuts, prvtELMIObjects=prvtELMIObjects, prvtELMIDuplicateIE=prvtELMIDuplicateIE, prvtELMIMapCeVlanId=prvtELMIMapCeVlanId, prvtELMIMib=prvtELMIMib, prvtELMIPollingTimer=prvtELMIPollingTimer, prvtELMIEnable=prvtELMIEnable, prvtELMIEVCTable=prvtELMIEVCTable)
