#
# PySNMP MIB module PRVT-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SERV-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:42:49 2021
# On host fv-az77-605 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
TSapEgressPolicyIdOrNone, TNamedItemOrEmpty, TSapIngressPolicyIdOrNone, serviceAccessSwitch, TNamedItem, TNetworkPolicyIdOrNone = mibBuilder.importSymbols("PRVT-QOS-MIB", "TSapEgressPolicyIdOrNone", "TNamedItemOrEmpty", "TSapIngressPolicyIdOrNone", "serviceAccessSwitch", "TNamedItem", "TNetworkPolicyIdOrNone")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, MibIdentifier, IpAddress, iso, Counter32, ModuleIdentity, TimeTicks, Integer32, Unsigned32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "MibIdentifier", "IpAddress", "iso", "Counter32", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32", "Bits", "NotificationType")
DisplayString, TimeStamp, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention", "TruthValue")
prvtServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 2))
prvtServicesMIB.setRevisions(('2009-08-07 00:00', '2009-03-26 00:00', '2009-03-24 00:00', '2009-02-17 00:00', '2008-10-09 00:00', '2008-04-10 00:00', '2008-03-06 00:00', '2008-01-11 00:00', '2008-01-09 00:00', '2008-01-07 00:00', '2007-06-28 00:00', '2006-09-02 00:00', '2006-07-02 00:00', '2006-02-04 00:00', '2005-11-09 00:00',))
if mibBuilder.loadTexts: prvtServicesMIB.setLastUpdated('200908070000Z')
if mibBuilder.loadTexts: prvtServicesMIB.setOrganization('BATM Advanced Communication')
prvtTMServObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1))
prvtTMCustObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1))
prvtTMSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2))
prvtTMSapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3))
prvtTMSdpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4))
prvtTMServVPLSGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3))
prvtServNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2))
prvtCustNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1))
prvtSvcNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2))
prvtSapNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3))
prvtSdpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4))
prvtCustTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0))
prvtSvcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0))
prvtSapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0))
prvtSdpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0))
prvtTMServConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3))
prvtTMCustConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1))
prvtTMSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2))
prvtTMSapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3))
prvtTMSdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4))
prvtTMTstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 5))
class ServiceAdminStatus(TextualConvention, Integer32):
    reference = 'Administrative Status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class ServiceOperStatus(TextualConvention, Integer32):
    reference = 'Operational status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class ServObjName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class ServObjDesc(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class ServType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("vpws", 9), ("vpls-pe", 10), ("vpls-mtu", 11))

class VpnId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
class SdpIdType(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 17407), )
class TMEncapVal(TextualConvention, Unsigned32):
    status = 'current'

class TSapEgrQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TSapIngQueueId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

custNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNumEntries.setStatus('current')
custInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2), )
if mibBuilder.loadTexts: custInfoTable.setStatus('current')
custInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: custInfoEntry.setStatus('current')
custName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 1), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custName.setStatus('current')
custRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custRowStatus.setStatus('current')
custContact = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custContact.setStatus('current')
custPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custPhone.setStatus('current')
custLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custLastMgmtChange.setStatus('current')
custMultiServiceSiteTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3), )
if mibBuilder.loadTexts: custMultiServiceSiteTable.setStatus('current')
custMultiServiceSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setStatus('current')
custMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteName.setStatus('current')
custMultSvcSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setStatus('current')
custMultSvcSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 3), ServObjDesc().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteDescription.setStatus('current')
custMultSvcSiteIngressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 4), ServObjName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setStatus('current')
custMultSvcSiteEgressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 5), ServObjName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setStatus('current')
custMultSvcSiteLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setStatus('current')
custMultiSvcSiteIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4), )
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsTable.setStatus('current')
custMultiSvcSiteIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (1, "PRVT-SERV-MIB", "custIngQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsEntry.setStatus('current')
custIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosSchedName.setStatus('current')
custIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setStatus('current')
custIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setStatus('current')
custMultiSvcSiteEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsTable.setStatus('current')
custMultiSvcSiteEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (1, "PRVT-SERV-MIB", "custEgrQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsEntry.setStatus('current')
custEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosSchedName.setStatus('current')
custEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setStatus('current')
custEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setStatus('current')
custIngQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6), )
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setStatus('current')
custIngQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (0, "PRVT-SERV-MIB", "custIngQosPortIdSchedName"), (0, "PRVT-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setStatus('current')
custIngQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setStatus('current')
custIngQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setStatus('current')
custIngQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setStatus('current')
custIngQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setStatus('current')
custEgrQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7), )
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setStatus('current')
custEgrQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (0, "PRVT-SERV-MIB", "custEgrQosPortIdSchedName"), (0, "PRVT-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setStatus('current')
custEgrQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setStatus('current')
custEgrQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setStatus('current')
custEgrQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setStatus('current')
custEgrQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setStatus('current')
prvtCustCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0, 1)).setObjects(("PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: prvtCustCreated.setStatus('current')
prvtCustDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0, 2)).setObjects(("PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: prvtCustDeleted.setStatus('current')
svcNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumEntries.setStatus('current')
svcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2), )
if mibBuilder.loadTexts: svcBaseInfoTable.setStatus('current')
svcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBaseInfoEntry.setStatus('current')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('current')
svcVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 2), VpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVpnId.setStatus('current')
svcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRowStatus.setStatus('current')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 4), ServType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcType.setStatus('current')
svcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDescription.setStatus('current')
svcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMtu.setStatus('current')
svcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 7), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAdminStatus.setStatus('current')
svcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 8), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperStatus.setStatus('current')
svcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSaps.setStatus('current')
svcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSdps.setStatus('current')
svcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastMgmtChange.setStatus('current')
svcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastStatusChange.setStatus('current')
svcEnableSecureSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEnableSecureSaps.setStatus('current')
svcCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 14), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcCustName.setStatus('current')
svcRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRevertTimer.setStatus('current')
svcVplsMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("qualified", 1), ("unqualified", 2), ("enable", 3))).clone('unqualified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVplsMode.setStatus('current')
svcVPLSUplinkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: svcVPLSUplinkTable.setStatus('current')
svcVPLSUplinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcVPLSUplinkPortID"))
if mibBuilder.loadTexts: svcVPLSUplinkEntry.setStatus('current')
svcVPLSUplinkPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: svcVPLSUplinkPortID.setStatus('current')
svcVPLSUplinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVPLSUplinkIfIndex.setStatus('current')
svcVPLSUplinkNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 3), TNetworkPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkNetworkPolicy.setStatus('current')
svcVPLSUplinkNetworkQueueEgressPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkNetworkQueueEgressPolicy.setStatus('current')
svcVPLSUplinkShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkShaperProfile.setStatus('current')
prvtSvcCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: prvtSvcCreated.setStatus('current')
prvtSvcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: prvtSvcDeleted.setStatus('current')
prvtSvcStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "svcVpnId"), ("PRVT-SERV-MIB", "svcAdminStatus"), ("PRVT-SERV-MIB", "svcOperStatus"))
if mibBuilder.loadTexts: prvtSvcStatusChanged.setStatus('current')
sapNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapNumEntries.setStatus('current')
sapBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2), )
if mibBuilder.loadTexts: sapBaseInfoTable.setStatus('current')
sapBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseInfoEntry.setStatus('current')
sapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortId.setStatus('current')
sapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 2), TMEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEncapValue.setStatus('current')
sapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapRowStatus.setStatus('current')
sapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 4), ServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapType.setStatus('current')
sapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapDescription.setStatus('current')
sapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 6), ServiceAdminStatus().clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAdminStatus.setStatus('current')
sapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("svcAdminDown", 5), ("portMtuTooSmall", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperStatus.setStatus('current')
sapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastMgmtChange.setStatus('current')
sapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 9), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("portOperDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperFlags.setStatus('current')
sapCustMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCustMultSvcSiteName.setStatus('current')
sapIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 12), TSapIngressPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIngressQosPolicyId.setStatus('current')
sapEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 13), TSapEgressPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapEgressQosPolicyId.setStatus('current')
sapIngressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 14), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setStatus('current')
sapEgressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 15), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setStatus('current')
sapLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qualified", 1), ("unqualified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapLearnMode.setStatus('current')
prvtSapCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: prvtSapCreated.setStatus('current')
prvtSapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: prvtSapDeleted.setStatus('current')
prvtSapStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"), ("PRVT-SERV-MIB", "sapAdminStatus"), ("PRVT-SERV-MIB", "sapOperStatus"))
if mibBuilder.loadTexts: prvtSapStatusChanged.setStatus('current')
sapIngQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3), )
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setStatus('current')
sapIngQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SERV-MIB", "sapIngQosQueueId"))
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setStatus('current')
sapIngQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 1), TSapIngQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueId.setStatus('current')
sapIngQosQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setStatus('current')
sapIngQosQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setStatus('current')
sapIngQosQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setStatus('current')
sapIngQosQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setStatus('current')
sapIngQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setStatus('current')
sapIngQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setStatus('current')
sapIngQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setStatus('current')
sapIngQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setStatus('current')
sapIngQosQueueStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedOctets.setStatus('current')
sapIngQosQueueStatsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedPackets.setStatus('current')
sapIngQosCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 12), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosCustName.setStatus('current')
sapEgrQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4), )
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setStatus('current')
sapEgrQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SERV-MIB", "sapEgrQosQueueId"))
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setStatus('current')
sapEgrQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 1), TSapEgrQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueId.setStatus('current')
sapEgrQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setStatus('current')
sapEgrQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setStatus('current')
sapEgrQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setStatus('current')
sapEgrQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setStatus('current')
sapEgrQosQueueStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOctets.setStatus('current')
sapEgrQosQueueStatsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedPackets.setStatus('current')
sapEgrQosCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 8), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosCustName.setStatus('current')
sapIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5), )
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setStatus('current')
sapIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (1, "PRVT-SERV-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setStatus('current')
sapIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSchedName.setStatus('current')
sapIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setStatus('current')
sapIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setStatus('current')
sapIngQosSchedCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 4), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedCustName.setStatus('current')
sapEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6), )
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setStatus('current')
sapEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (1, "PRVT-SERV-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setStatus('current')
sapEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSchedName.setStatus('current')
sapEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setStatus('current')
sapEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setStatus('current')
sapEgrQosSchedCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 4), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedCustName.setStatus('current')
sdpNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNumEntries.setStatus('current')
sdpNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 2), SdpIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNextFreeId.setStatus('current')
sdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3), )
if mibBuilder.loadTexts: sdpInfoTable.setStatus('current')
sdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpInfoEntry.setStatus('current')
sdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 1), SdpIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpId.setStatus('current')
sdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpRowStatus.setStatus('current')
sdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2))).clone('mpls')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpDelivery.setStatus('current')
sdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpFarEndIpAddress.setStatus('current')
sdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 5), ServObjDesc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpDescription.setStatus('current')
sdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2))).clone('tldp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpLabelSignaling.setStatus('current')
sdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 7), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminStatus.setStatus('current')
sdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("tunnelDown", 4), ("transportSelected", 5), ("supressed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperStatus.setStatus('current')
sdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastMgmtChange.setStatus('current')
sdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLdpEnabled.setStatus('current')
sdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 11), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("invalidEgressInterface", 3), ("noSystemIpAddress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperFlags.setStatus('current')
sdpLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastStatusChange.setStatus('current')
sdpAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2048, 18431), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminIngressLabel.setStatus('current')
sdpAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminEgressLabel.setStatus('current')
sdpAdminIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminIsBackup.setStatus('current')
sdpOperIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperIsBackup.setStatus('current')
sdpOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpOutInterface.setStatus('current')
sdpGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpGroupIdentifier.setStatus('current')
sdpTransportTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpTransportTunnelName.setStatus('current')
sdpVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("ethernet-vlan", 4), ("ethernet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpVCType.setStatus('current')
sdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidType", 0), ("generic", 1), ("spoke", 2), ("mesh", 3), ("hub", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpType.setStatus('current')
sdpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpMtu.setStatus('current')
sdpBindVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindVlanTag.setStatus('current')
sdpIsPwStatusSignalingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpIsPwStatusSignalingEnable.setStatus('current')
sdpEpsAdminIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpEpsAdminIsPrimary.setStatus('current')
sdpEpsAdminIsSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpEpsAdminIsSecondary.setStatus('current')
prvtSdpCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: prvtSdpCreated.setStatus('current')
prvtSdpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: prvtSdpDeleted.setStatus('current')
prvtSdpStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"), ("PRVT-SERV-MIB", "sdpAdminStatus"), ("PRVT-SERV-MIB", "sdpOperStatus"))
if mibBuilder.loadTexts: prvtSdpStatusChanged.setStatus('current')
prvtTMCustCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 1))
prvtTMCustGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 2))
prvtTMSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 1))
prvtTMSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2))
prvtTMSapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 1))
prvtTMSapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2))
prvtTMSdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 1))
prvtTMSdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 2))
prvtTMCustCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMCustGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMCustCompliance = prvtTMCustCompliance.setStatus('current')
prvtTMSvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSvcGlobalGroup"), ("PRVT-SERV-MIB", "prvtTMSvcNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcCompliance = prvtTMSvcCompliance.setStatus('current')
prvtTMSapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSapGlobalGroup"), ("PRVT-SERV-MIB", "prvtTMSapNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapCompliance = prvtTMSapCompliance.setStatus('current')
prvtTMSdpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSdpGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSdpCompliance = prvtTMSdpCompliance.setStatus('current')
prvtTMCustGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 2, 1)).setObjects(("PRVT-SERV-MIB", "custNumEntries"), ("PRVT-SERV-MIB", "custName"), ("PRVT-SERV-MIB", "custRowStatus"), ("PRVT-SERV-MIB", "custContact"), ("PRVT-SERV-MIB", "custPhone"), ("PRVT-SERV-MIB", "custLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMCustGlobalGroup = prvtTMCustGlobalGroup.setStatus('current')
prvtTMSvcGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2, 1)).setObjects(("PRVT-SERV-MIB", "svcNumEntries"), ("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "svcRowStatus"), ("PRVT-SERV-MIB", "svcType"), ("PRVT-SERV-MIB", "svcDescription"), ("PRVT-SERV-MIB", "svcAdminStatus"), ("PRVT-SERV-MIB", "svcOperStatus"), ("PRVT-SERV-MIB", "svcNumSaps"), ("PRVT-SERV-MIB", "svcNumSdps"), ("PRVT-SERV-MIB", "svcLastMgmtChange"), ("PRVT-SERV-MIB", "svcVpnId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcGlobalGroup = prvtTMSvcGlobalGroup.setStatus('current')
prvtTMSvcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2, 2)).setObjects(("PRVT-SERV-MIB", "prvtSvcCreated"), ("PRVT-SERV-MIB", "prvtSvcDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcNotificationGroup = prvtTMSvcNotificationGroup.setStatus('current')
prvtTMSapGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2, 1)).setObjects(("PRVT-SERV-MIB", "sapNumEntries"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"), ("PRVT-SERV-MIB", "sapRowStatus"), ("PRVT-SERV-MIB", "sapType"), ("PRVT-SERV-MIB", "sapDescription"), ("PRVT-SERV-MIB", "sapAdminStatus"), ("PRVT-SERV-MIB", "sapOperStatus"), ("PRVT-SERV-MIB", "sapIngressQosPolicyId"), ("PRVT-SERV-MIB", "sapEgressQosPolicyId"), ("PRVT-SERV-MIB", "sapLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapGlobalGroup = prvtTMSapGlobalGroup.setStatus('current')
prvtTMSapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2, 2)).setObjects(("PRVT-SERV-MIB", "prvtSapStatusChanged"), ("PRVT-SERV-MIB", "prvtSapCreated"), ("PRVT-SERV-MIB", "prvtSapDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapNotificationGroup = prvtTMSapNotificationGroup.setStatus('current')
prvtTMSdpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 2, 1)).setObjects(("PRVT-SERV-MIB", "sdpNumEntries"), ("PRVT-SERV-MIB", "sdpId"), ("PRVT-SERV-MIB", "sdpNextFreeId"), ("PRVT-SERV-MIB", "sdpRowStatus"), ("PRVT-SERV-MIB", "sdpDelivery"), ("PRVT-SERV-MIB", "sdpFarEndIpAddress"), ("PRVT-SERV-MIB", "sdpDescription"), ("PRVT-SERV-MIB", "sdpLabelSignaling"), ("PRVT-SERV-MIB", "sdpAdminStatus"), ("PRVT-SERV-MIB", "sdpOperStatus"), ("PRVT-SERV-MIB", "sdpLastMgmtChange"), ("PRVT-SERV-MIB", "sdpLdpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSdpGlobalGroup = prvtTMSdpGlobalGroup.setStatus('current')
mibBuilder.exportSymbols("PRVT-SERV-MIB", sapEgrQosSchedStatsEntry=sapEgrQosSchedStatsEntry, prvtTMServObjs=prvtTMServObjs, sapIngressQosPolicyId=sapIngressQosPolicyId, sdpTransportTunnelName=sdpTransportTunnelName, sdpLastStatusChange=sdpLastStatusChange, sdpInfoEntry=sdpInfoEntry, custInfoEntry=custInfoEntry, prvtSapStatusChanged=prvtSapStatusChanged, sdpIsPwStatusSignalingEnable=sdpIsPwStatusSignalingEnable, custEgrQosAssignmentPortId=custEgrQosAssignmentPortId, custIngQosSchedName=custIngQosSchedName, sdpEpsAdminIsPrimary=sdpEpsAdminIsPrimary, prvtTMSapCompliances=prvtTMSapCompliances, prvtSapCreated=prvtSapCreated, TMEncapVal=TMEncapVal, sapEgrQosQueueStatsForwardedInProfPackets=sapEgrQosQueueStatsForwardedInProfPackets, prvtTMTstpConformance=prvtTMTstpConformance, sdpOperIsBackup=sdpOperIsBackup, sdpFarEndIpAddress=sdpFarEndIpAddress, sapLearnMode=sapLearnMode, sapLastMgmtChange=sapLastMgmtChange, sdpAdminEgressLabel=sdpAdminEgressLabel, prvtTMCustConformance=prvtTMCustConformance, sapIngQosQueueStatsOfferedLoPrioOctets=sapIngQosQueueStatsOfferedLoPrioOctets, sapIngQosQueueStatsForwardedInProfOctets=sapIngQosQueueStatsForwardedInProfOctets, sapEgrQosQueueStatsTable=sapEgrQosQueueStatsTable, prvtTMSdpObjs=prvtTMSdpObjs, svcEnableSecureSaps=svcEnableSecureSaps, sdpDescription=sdpDescription, prvtTMCustCompliance=prvtTMCustCompliance, sdpLastMgmtChange=sdpLastMgmtChange, custIngQosPortIdSchedStatsTable=custIngQosPortIdSchedStatsTable, svcVPLSUplinkNetworkPolicy=svcVPLSUplinkNetworkPolicy, custPhone=custPhone, sdpMtu=sdpMtu, custMultSvcSiteEgressSchedulerPolicy=custMultSvcSiteEgressSchedulerPolicy, custIngQosPortIdSchedStatsEntry=custIngQosPortIdSchedStatsEntry, custIngQosAssignmentPortId=custIngQosAssignmentPortId, svcRevertTimer=svcRevertTimer, sapOperFlags=sapOperFlags, prvtSdpCreated=prvtSdpCreated, sdpLdpEnabled=sdpLdpEnabled, svcVPLSUplinkShaperProfile=svcVPLSUplinkShaperProfile, TSapIngQueueId=TSapIngQueueId, sdpNumEntries=sdpNumEntries, sapOperStatus=sapOperStatus, prvtTMSvcCompliance=prvtTMSvcCompliance, prvtTMSvcConformance=prvtTMSvcConformance, prvtSdpStatusChanged=prvtSdpStatusChanged, svcVPLSUplinkEntry=svcVPLSUplinkEntry, prvtSdpNotif=prvtSdpNotif, custEgrQosPortSchedFwdPkts=custEgrQosPortSchedFwdPkts, sapEgrQosSchedStatsForwardedOctets=sapEgrQosSchedStatsForwardedOctets, sapIngQosSchedStatsEntry=sapIngQosSchedStatsEntry, custContact=custContact, sdpOperStatus=sdpOperStatus, custLastMgmtChange=custLastMgmtChange, sdpInfoTable=sdpInfoTable, sdpType=sdpType, prvtTMServConformance=prvtTMServConformance, sdpOutInterface=sdpOutInterface, svcType=svcType, sapEgrQosQueueStatsEntry=sapEgrQosQueueStatsEntry, prvtTMCustGroups=prvtTMCustGroups, prvtTMSdpCompliance=prvtTMSdpCompliance, sapIngQosQueueStatsForwardedOutProfPackets=sapIngQosQueueStatsForwardedOutProfPackets, svcNumSdps=svcNumSdps, sapIngQosSchedName=sapIngQosSchedName, custMultSvcSiteName=custMultSvcSiteName, custMultSvcSiteRowStatus=custMultSvcSiteRowStatus, custMultiServiceSiteEntry=custMultiServiceSiteEntry, prvtTMSdpGlobalGroup=prvtTMSdpGlobalGroup, custEgrQosSchedStatsForwardedPackets=custEgrQosSchedStatsForwardedPackets, prvtTMSvcGlobalGroup=prvtTMSvcGlobalGroup, svcRowStatus=svcRowStatus, sapEgrQosCustName=sapEgrQosCustName, ServObjName=ServObjName, sdpRowStatus=sdpRowStatus, prvtSdpTraps=prvtSdpTraps, custMultSvcSiteIngressSchedulerPolicy=custMultSvcSiteIngressSchedulerPolicy, prvtSvcStatusChanged=prvtSvcStatusChanged, sapType=sapType, sapIngQosQueueId=sapIngQosQueueId, prvtTMSapNotificationGroup=prvtTMSapNotificationGroup, sapIngQosQueueStatsOfferedHiPrioPackets=sapIngQosQueueStatsOfferedHiPrioPackets, svcVPLSUplinkTable=svcVPLSUplinkTable, svcNumSaps=svcNumSaps, custIngQosSchedStatsForwardedOctets=custIngQosSchedStatsForwardedOctets, svcNumEntries=svcNumEntries, prvtTMCustCompliances=prvtTMCustCompliances, sdpAdminStatus=sdpAdminStatus, prvtSapTraps=prvtSapTraps, sapIngQosSchedStatsForwardedOctets=sapIngQosSchedStatsForwardedOctets, ServiceAdminStatus=ServiceAdminStatus, custMultiSvcSiteIngQosSchedStatsTable=custMultiSvcSiteIngQosSchedStatsTable, sdpAdminIngressLabel=sdpAdminIngressLabel, sapBaseInfoEntry=sapBaseInfoEntry, sdpBindVlanTag=sdpBindVlanTag, svcDescription=svcDescription, custIngQosSchedStatsForwardedPackets=custIngQosSchedStatsForwardedPackets, sapRowStatus=sapRowStatus, sapEgrQosQueueStatsForwardedInProfOctets=sapEgrQosQueueStatsForwardedInProfOctets, ServType=ServType, prvtSapDeleted=prvtSapDeleted, custMultSvcSiteDescription=custMultSvcSiteDescription, sapEgrQosQueueStatsDroppedPackets=sapEgrQosQueueStatsDroppedPackets, svcVPLSUplinkNetworkQueueEgressPolicy=svcVPLSUplinkNetworkQueueEgressPolicy, svcBaseInfoTable=svcBaseInfoTable, sapEgrQosQueueId=sapEgrQosQueueId, prvtSvcDeleted=prvtSvcDeleted, prvtSvcTraps=prvtSvcTraps, sapEgrQosSchedCustName=sapEgrQosSchedCustName, sdpOperFlags=sdpOperFlags, svcId=svcId, sapIngQosQueueStatsDroppedPackets=sapIngQosQueueStatsDroppedPackets, sdpEpsAdminIsSecondary=sdpEpsAdminIsSecondary, sdpNextFreeId=sdpNextFreeId, prvtCustCreated=prvtCustCreated, sapDescription=sapDescription, sapEgrQosSchedStatsTable=sapEgrQosSchedStatsTable, sdpLabelSignaling=sdpLabelSignaling, svcOperStatus=svcOperStatus, custEgrQosSchedName=custEgrQosSchedName, prvtTMSvcObjs=prvtTMSvcObjs, custEgrQosPortIdSchedStatsTable=custEgrQosPortIdSchedStatsTable, sapIngQosSchedStatsForwardedPackets=sapIngQosSchedStatsForwardedPackets, sapPortId=sapPortId, svcVPLSUplinkPortID=svcVPLSUplinkPortID, custEgrQosPortIdSchedName=custEgrQosPortIdSchedName, svcMtu=svcMtu, sapNumEntries=sapNumEntries, ServiceOperStatus=ServiceOperStatus, prvtServNotifications=prvtServNotifications, sapEgrQosSchedName=sapEgrQosSchedName, prvtSdpDeleted=prvtSdpDeleted, sdpId=sdpId, prvtTMSapObjs=prvtTMSapObjs, prvtServicesMIB=prvtServicesMIB, custMultiSvcSiteEgrQosSchedStatsTable=custMultiSvcSiteEgrQosSchedStatsTable, svcAdminStatus=svcAdminStatus, svcLastStatusChange=svcLastStatusChange, svcBaseInfoEntry=svcBaseInfoEntry, custIngQosPortSchedFwdOctets=custIngQosPortSchedFwdOctets, custEgrQosPortSchedFwdOctets=custEgrQosPortSchedFwdOctets, svcLastMgmtChange=svcLastMgmtChange, custEgrQosSchedStatsForwardedOctets=custEgrQosSchedStatsForwardedOctets, svcVpnId=svcVpnId, sapBaseInfoTable=sapBaseInfoTable, custEgrQosPortIdSchedStatsEntry=custEgrQosPortIdSchedStatsEntry, prvtSvcNotif=prvtSvcNotif, prvtCustDeleted=prvtCustDeleted, prvtTMSapConformance=prvtTMSapConformance, prvtTMServVPLSGlobals=prvtTMServVPLSGlobals, sapIngQosQueueStatsForwardedInProfPackets=sapIngQosQueueStatsForwardedInProfPackets, sdpGroupIdentifier=sdpGroupIdentifier, custMultSvcSiteLastMgmtChange=custMultSvcSiteLastMgmtChange, sapEgrQosQueueStatsDroppedOctets=sapEgrQosQueueStatsDroppedOctets, prvtTMCustObjs=prvtTMCustObjs, SdpIdType=SdpIdType, sapEgrQosQueueStatsForwardedOutProfOctets=sapEgrQosQueueStatsForwardedOutProfOctets, prvtTMCustGlobalGroup=prvtTMCustGlobalGroup, sapEgrQosSchedStatsForwardedPackets=sapEgrQosSchedStatsForwardedPackets, custInfoTable=custInfoTable, ServObjDesc=ServObjDesc, sapEgrQosQueueStatsForwardedOutProfPackets=sapEgrQosQueueStatsForwardedOutProfPackets, sapIngQosSchedCustName=sapIngQosSchedCustName, sapEncapValue=sapEncapValue, custMultiServiceSiteTable=custMultiServiceSiteTable, sapIngQosQueueStatsDroppedOctets=sapIngQosQueueStatsDroppedOctets, sapEgressQosPolicyId=sapEgressQosPolicyId, sapIngQosCustName=sapIngQosCustName, prvtTMSvcCompliances=prvtTMSvcCompliances, sdpVCType=sdpVCType, sdpAdminIsBackup=sdpAdminIsBackup, prvtTMSdpCompliances=prvtTMSdpCompliances, sdpDelivery=sdpDelivery, sapAdminStatus=sapAdminStatus, svcVPLSUplinkIfIndex=svcVPLSUplinkIfIndex, svcVplsMode=svcVplsMode, custName=custName, VpnId=VpnId, sapCustMultSvcSiteName=sapCustMultSvcSiteName, sapIngQosQueueStatsEntry=sapIngQosQueueStatsEntry, prvtCustTraps=prvtCustTraps, custIngQosPortSchedFwdPkts=custIngQosPortSchedFwdPkts, prvtTMSdpGroups=prvtTMSdpGroups, custRowStatus=custRowStatus, custNumEntries=custNumEntries, prvtSvcCreated=prvtSvcCreated, sapEgressQosSchedulerPolicy=sapEgressQosSchedulerPolicy, prvtSapNotif=prvtSapNotif, sapIngQosQueueStatsTable=sapIngQosQueueStatsTable, prvtTMSvcGroups=prvtTMSvcGroups, prvtTMSapGlobalGroup=prvtTMSapGlobalGroup, custIngQosPortIdSchedName=custIngQosPortIdSchedName, sapIngQosQueueStatsOfferedHiPrioOctets=sapIngQosQueueStatsOfferedHiPrioOctets, sapIngQosSchedStatsTable=sapIngQosSchedStatsTable, custMultiSvcSiteEgrQosSchedStatsEntry=custMultiSvcSiteEgrQosSchedStatsEntry, prvtTMSvcNotificationGroup=prvtTMSvcNotificationGroup, svcCustName=svcCustName, sapIngressQosSchedulerPolicy=sapIngressQosSchedulerPolicy, prvtTMSapGroups=prvtTMSapGroups, sapIngQosQueueStatsOfferedLoPrioPackets=sapIngQosQueueStatsOfferedLoPrioPackets, sapIngQosQueueStatsForwardedOutProfOctets=sapIngQosQueueStatsForwardedOutProfOctets, custMultiSvcSiteIngQosSchedStatsEntry=custMultiSvcSiteIngQosSchedStatsEntry, prvtTMSdpConformance=prvtTMSdpConformance, prvtCustNotif=prvtCustNotif, PYSNMP_MODULE_ID=prvtServicesMIB, prvtTMSapCompliance=prvtTMSapCompliance, TSapEgrQueueId=TSapEgrQueueId)
