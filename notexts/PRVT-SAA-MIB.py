#
# PySNMP MIB module PRVT-SAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SAA-MIB
# Produced by pysmi-1.1.3 at Sun Nov 21 13:56:07 2021
# On host fv-az74-779 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Integer32, ObjectIdentity, TimeTicks, MibIdentifier, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Gauge32, Bits, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Gauge32", "Bits", "Counter32", "iso")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
prvtSaaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 130))
prvtSaaMib.setRevisions(('2015-03-25 00:00', '2014-05-16 00:00', '2011-10-20 00:00', '2011-02-07 00:00', '2010-09-29 00:00', '2010-09-27 00:00', '2010-09-13 00:00', '2010-08-24 00:00', '2010-05-05 00:00', '2010-03-26 00:00', '2010-03-18 00:00', '2010-03-12 00:00', '2010-01-11 00:00',))
if mibBuilder.loadTexts: prvtSaaMib.setLastUpdated('201503250000Z')
if mibBuilder.loadTexts: prvtSaaMib.setOrganization('BATM Advanced Communication')
prvtSaaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0))
prvtSaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1))
prvtSaaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2))
prvtSaaTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1))
prvtSaaTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2))
prvtSaaProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3))
prvtSaaY1731PmTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1), )
if mibBuilder.loadTexts: prvtSaaY1731PmTestTable.setStatus('current')
prvtSaaY1731PmTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestName"))
if mibBuilder.loadTexts: prvtSaaY1731PmTestEntry.setStatus('current')
prvtSaaY1731PmTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaY1731PmTestOwner.setStatus('current')
prvtSaaY1731PmTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaY1731PmTestName.setStatus('current')
prvtSaaY1731PmTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameloss", 1), ("framedelayAndDelayvariation", 2), ("framelossAndFramedelayAndDelayvariation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestType.setStatus('current')
prvtSaaY1731PmTestExecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRunning", 1), ("running", 2))).clone('notRunning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731PmTestExecStatus.setStatus('current')
prvtSaaY1731PmTestEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("service", 2), ("vlan", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapType.setStatus('current')
prvtSaaY1731PmTestEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapValue.setStatus('current')
prvtSaaY1731PmTestUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestUserPort.setStatus('current')
prvtSaaY1731PmTestUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestUplinkPort.setStatus('current')
prvtSaaY1731PmTestTargetMac = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTargetMac.setStatus('current')
prvtSaaY1731PmTestCfmDomainLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCfmDomainLevel.setStatus('current')
prvtSaaY1731PmTestRemoteCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestRemoteCfmMep.setStatus('current')
prvtSaaY1731PmTestProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestProfile.setStatus('current')
prvtSaaY1731PmTestHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestHistoryDepth.setStatus('current')
prvtSaaY1731PmTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestPeriod.setStatus('current')
prvtSaaY1731PmTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTimeout.setStatus('current')
prvtSaaY1731PmTestMonitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestMonitorInterval.setStatus('current')
prvtSaaY1731PmTestFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestFrequency.setStatus('current')
prvtSaaY1731PmTestClocksInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestClocksInSync.setStatus('current')
prvtSaaY1731PmTestDelayMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("average", 1), ("percentile", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayMethod.setStatus('current')
prvtSaaY1731PmTestDelayPvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayPvalue.setStatus('current')
prvtSaaY1731PmTestJitterMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("peakToPeak", 1), ("variance", 2), ("percentile", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterMethod.setStatus('current')
prvtSaaY1731PmTestJitterPvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterPvalue.setStatus('current')
prvtSaaY1731PmTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestPriority.setStatus('current')
prvtSaaY1731PmTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaY1731PmTestRowStatus.setStatus('current')
prvtSaaY1731PmTestCCMAPSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCCMAPSCount.setStatus('current')
prvtSaaY1731PmTestLossMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lmm", 0), ("slm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestLossMeasurementType.setStatus('current')
prvtSaaY1731PmTestSLMTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestSLMTransmit.setStatus('current')
prvtSaaY1731PmTestTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTestId.setStatus('current')
prvtSaaY1731PmTestDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDropEligible.setStatus('current')
prvtSaaY1731PmTestDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1518)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDataSize.setStatus('current')
prvtSaaY1731PmTestCountAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCountAllPriorities.setStatus('current')
prvtSaaRFC2544ThroughputTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2), )
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTable.setStatus('current')
prvtSaaRFC2544ThroughputTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestName"))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEntry.setStatus('current')
prvtSaaRFC2544ThroughputTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestOwner.setStatus('current')
prvtSaaRFC2544ThroughputTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestName.setStatus('current')
prvtSaaRFC2544ThroughputTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unidirectionalTestHead", 1), ("bidirectionalTestHead", 2), ("testTail", 3), ("testLoopback", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestType.setStatus('current')
prvtSaaRFC2544ThroughputTestExecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRunning", 1), ("running", 2))).clone('notRunning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestExecStatus.setStatus('current')
prvtSaaRFC2544ThroughputTestSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mac", 1), ("mep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSourceType.setStatus('current')
prvtSaaRFC2544ThroughputTestSource = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSource.setStatus('current')
prvtSaaRFC2544ThroughputTestTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mac", 1), ("mep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTargetType.setStatus('current')
prvtSaaRFC2544ThroughputTestTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTarget.setStatus('current')
prvtSaaRFC2544ThroughputTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTimeout.setStatus('current')
prvtSaaRFC2544ThroughputTestCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCIR.setStatus('current')
prvtSaaRFC2544ThroughputTestCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCBS.setStatus('current')
prvtSaaRFC2544ThroughputTestBurstPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestBurstPercentage.setStatus('current')
prvtSaaRFC2544ThroughputTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestDuration.setStatus('current')
prvtSaaRFC2544ThroughputTestMaxFrameloss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestMaxFrameloss.setStatus('current')
prvtSaaRFC2544ThroughputTestCVLAN0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0.setStatus('current')
prvtSaaRFC2544ThroughputTestCVLAN0Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0Priority.setStatus('current')
prvtSaaRFC2544ThroughputTestCVLAN0DropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0DropEligible.setStatus('current')
prvtSaaRFC2544ThroughputTestSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLAN.setStatus('current')
prvtSaaRFC2544ThroughputTestSVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANPriority.setStatus('current')
prvtSaaRFC2544ThroughputTestSVLANDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANDropEligible.setStatus('current')
prvtSaaRFC2544ThroughputTestPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPDUSize.setStatus('current')
prvtSaaRFC2544ThroughputTestACKTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestACKTimeout.setStatus('current')
prvtSaaRFC2544ThroughputTestLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macSwap", 1), ("oam", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestLoopbackType.setStatus('current')
prvtSaaRFC2544ThroughputTestPaternType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("null", 1), ("nullCRC", 2), ("prbs", 3), ("prbsCRC", 4), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPaternType.setStatus('current')
prvtSaaRFC2544ThroughputTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestRowStatus.setStatus('current')
prvtSaaRFC2544ThroughputTestEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 26), OctetString().clone(hexValue="8902")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEthertype.setStatus('current')
prvtSaaY1731LoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3), )
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestTable.setStatus('current')
prvtSaaY1731LoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestEncapType"), (0, "PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestEncapValue"))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEntry.setStatus('current')
prvtSaaY1731LoopbackTestEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("service", 1), ("vlan", 2))))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapType.setStatus('current')
prvtSaaY1731LoopbackTestEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapValue.setStatus('current')
prvtSaaY1731LoopbackTestUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUserPort.setStatus('current')
prvtSaaY1731LoopbackTestUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUplinkPort.setStatus('current')
prvtSaaY1731LoopbackTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("frameloss", 2), ("delayvariation", 3), ("framelossAndDelayvariation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestType.setStatus('current')
prvtSaaY1731LoopbackTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestRowStatus.setStatus('current')
prvtSaaY1731LoopbackTestCCMAPSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCCMAPSCount.setStatus('current')
prvtSaaY1731LoopbackTestCountAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCountAllPriorities.setStatus('current')
prvtSaaY1731TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSaaY1731TestResultTable.setStatus('current')
prvtSaaY1731TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestName"), (0, "PRVT-SAA-MIB", "prvtSaaY1731TestResultIndex"))
if mibBuilder.loadTexts: prvtSaaY1731TestResultEntry.setStatus('current')
prvtSaaY1731TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtSaaY1731TestResultIndex.setStatus('current')
prvtSaaY1731TestResultDelayNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayNE.setStatus('current')
prvtSaaY1731TestResultDelayFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayFE.setStatus('current')
prvtSaaY1731TestResultJitterNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterNE.setStatus('current')
prvtSaaY1731TestResultJitterFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterFE.setStatus('current')
prvtSaaY1731TestResultFrameLossNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossNE.setStatus('current')
prvtSaaY1731TestResultFrameLossFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossFE.setStatus('current')
prvtSaaY1731TestResultFramesSentNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentNE.setStatus('current')
prvtSaaY1731TestResultFramesSentFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentFE.setStatus('current')
prvtSaaY1731TestResultFramesRcvdNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdNE.setStatus('current')
prvtSaaY1731TestResultFramesRcvdFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdFE.setStatus('current')
prvtSaaY1731TestResultPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultPacketsSent.setStatus('current')
prvtSaaY1731TestResultNoTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoTimeouts.setStatus('current')
prvtSaaY1731TestResultNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoErrors.setStatus('current')
prvtSaaY1731TestResultCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultCompletionTime.setStatus('current')
prvtSaaRFC2544TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultTable.setStatus('current')
prvtSaaRFC2544TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestName"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544TestResultIndex"))
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultEntry.setStatus('current')
prvtSaaRFC2544TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultIndex.setStatus('current')
prvtSaaRFC2544TestResultFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameSize.setStatus('current')
prvtSaaRFC2544TestResultFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameLoss.setStatus('current')
prvtSaaRFC2544TestResultThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultThroughput.setStatus('current')
prvtSaaRFC2544TestResultNetThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultNetThroughput.setStatus('current')
prvtSaaRFC2544TestResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("ready", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultStatus.setStatus('current')
prvtSaaRFC2544TestResultDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMinimum.setStatus('current')
prvtSaaRFC2544TestResultDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayAverage.setStatus('current')
prvtSaaRFC2544TestResultDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMaximum.setStatus('current')
prvtSaaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1), )
if mibBuilder.loadTexts: prvtSaaProfileTable.setStatus('current')
prvtSaaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaProfileIndex"))
if mibBuilder.loadTexts: prvtSaaProfileEntry.setStatus('current')
prvtSaaProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: prvtSaaProfileIndex.setStatus('current')
prvtSaaProfileDelayNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileDelayNE.setStatus('current')
prvtSaaProfileDelayFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileDelayFE.setStatus('current')
prvtSaaProfileJitterNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileJitterNE.setStatus('current')
prvtSaaProfileJitterFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileJitterFE.setStatus('current')
prvtSaaProfileFrameLossNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileFrameLossNE.setStatus('current')
prvtSaaProfileFrameLossFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileFrameLossFE.setStatus('current')
prvtSaaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaProfileRowStatus.setStatus('current')
prvtSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaProfileName.setStatus('current')
prvtSaaRFC2544ProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeFailed.setStatus('current')
prvtSaaRFC2544ProbeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 2)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeSuccess.setStatus('current')
prvtSaaRFC2544TestFinished = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 3)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestExecStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544TestFinished.setStatus('current')
prvtSaaY1731DelayNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 4)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayNE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayNE"))
if mibBuilder.loadTexts: prvtSaaY1731DelayNEThreshold.setStatus('current')
prvtSaaY1731DelayFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 5)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayFE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayFE"))
if mibBuilder.loadTexts: prvtSaaY1731DelayFEThreshold.setStatus('current')
prvtSaaY1731JitterNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 6)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterNE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterNE"))
if mibBuilder.loadTexts: prvtSaaY1731JitterNEThreshold.setStatus('current')
prvtSaaY1731JitterFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 7)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterFE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterFE"))
if mibBuilder.loadTexts: prvtSaaY1731JitterFEThreshold.setStatus('current')
prvtSaaY1731FrLossNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 8)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossNE"))
if mibBuilder.loadTexts: prvtSaaY1731FrLossNEThreshold.setStatus('current')
prvtSaaY1731FrLossFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 9)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossFE"))
if mibBuilder.loadTexts: prvtSaaY1731FrLossFEThreshold.setStatus('current')
prvtSaaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 1))
prvtSaaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2))
prvtSaaY1731TestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731PmTestType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestExecStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestEncapType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestEncapValue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestUserPort"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestUplinkPort"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTargetMac"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCfmDomainLevel"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestRemoteCfmMep"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestProfile"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestHistoryDepth"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestPeriod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTimeout"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestMonitorInterval"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestFrequency"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestClocksInSync"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDelayMethod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDelayPvalue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestJitterMethod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestJitterPvalue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestPriority"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCCMAPSCount"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestLossMeasurementType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestSLMTransmit"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTestId"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDropEligible"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDataSize"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCountAllPriorities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731TestGroup = prvtSaaY1731TestGroup.setStatus('current')
prvtSaaRFC2544TestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 2)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestExecStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSourceType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSource"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTargetType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTarget"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTimeout"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCIR"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCBS"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestBurstPercentage"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestDuration"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestMaxFrameloss"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0Priority"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0DropEligible"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLAN"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLANPriority"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLANDropEligible"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestPDUSize"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestACKTimeout"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestLoopbackType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestPaternType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestEthertype"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaRFC2544TestGroup = prvtSaaRFC2544TestGroup.setStatus('current')
prvtSaaY1731TestResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 3)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesSentNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesSentFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesRcvdNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesRcvdFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultPacketsSent"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultNoTimeouts"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultNoErrors"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultCompletionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731TestResultsGroup = prvtSaaY1731TestResultsGroup.setStatus('current')
prvtSaaRFC2544TestResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 4)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultFrameSize"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultFrameLoss"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultThroughput"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultNetThroughput"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayMinimum"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayAverage"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayMaximum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaRFC2544TestResultsGroup = prvtSaaRFC2544TestResultsGroup.setStatus('current')
prvtSaaProfilesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 5)).setObjects(("PRVT-SAA-MIB", "prvtSaaProfileDelayNE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayFE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterNE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterFE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaProfileRowStatus"), ("PRVT-SAA-MIB", "prvtSaaProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaProfilesGroup = prvtSaaProfilesGroup.setStatus('current')
prvtSaaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 6)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ProbeFailed"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ProbeSuccess"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestFinished"), ("PRVT-SAA-MIB", "prvtSaaY1731DelayNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731DelayFEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731JitterNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731JitterFEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731FrLossNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731FrLossFEThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaNotificationsGroup = prvtSaaNotificationsGroup.setStatus('current')
prvtSaaY1731LoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 7)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestUserPort"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestUplinkPort"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestType"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestCCMAPSCount"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestCountAllPriorities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731LoopbackTestGroup = prvtSaaY1731LoopbackTestGroup.setStatus('current')
prvtSaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 1, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestGroup"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestGroup"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultsGroup"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultsGroup"), ("PRVT-SAA-MIB", "prvtSaaProfilesGroup"), ("PRVT-SAA-MIB", "prvtSaaNotificationsGroup"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaCompliance = prvtSaaCompliance.setStatus('current')
prvtTwampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4))
prvtTwampTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1))
prvtTwampServer = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2))
prvtTwampTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3))
class PrvtTwampTestNameType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtTwampDecimalPercent(TextualConvention, OctetString):
    status = 'current'
    displayHint = '3d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

prvtTwampTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1), )
if mibBuilder.loadTexts: prvtTwampTestTable.setStatus('current')
prvtTwampTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampTestName"))
if mibBuilder.loadTexts: prvtTwampTestEntry.setStatus('current')
prvtTwampTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 1), PrvtTwampTestNameType())
if mibBuilder.loadTexts: prvtTwampTestName.setStatus('current')
prvtTwampTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setStatus('current')
prvtTwampTestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestServer.setStatus('current')
prvtTwampTestSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setStatus('current')
prvtTwampTestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestPackets.setStatus('current')
prvtTwampTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestTimeout.setStatus('current')
prvtTwampTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestDelay.setStatus('current')
prvtTwampTestExecuteNow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setStatus('current')
prvtTwampClientTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6), )
if mibBuilder.loadTexts: prvtTwampClientTable.setStatus('current')
prvtTwampClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampClientIp"))
if mibBuilder.loadTexts: prvtTwampClientEntry.setStatus('current')
prvtTwampClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtTwampClientIp.setStatus('current')
prvtTwampClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setStatus('current')
prvtTwampServerInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setStatus('current')
prvtTwampServerSessionInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setStatus('current')
prvtTwampServerMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setStatus('current')
prvtTwampServerMaxParallelSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setStatus('current')
prvtTwampServerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 5), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerShutdown.setStatus('current')
prvtTwampServerControlSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setStatus('current')
prvtTwampServerTestSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setStatus('current')
prvtTwampTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1), )
if mibBuilder.loadTexts: prvtTwampTestResultTable.setStatus('current')
prvtTwampTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampTestId"))
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setStatus('current')
prvtTwampTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestId.setStatus('current')
prvtTwampTestResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 2), PrvtTwampTestNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestResultName.setStatus('current')
prvtTwampTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestStartTime.setStatus('current')
prvtTwampTestServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setStatus('current')
prvtTwampTestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestSessions.setStatus('current')
prvtTwampTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 1), ("running", 2), ("stopped", 3), ("finished", 4))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestState.setStatus('current')
prvtTwampTestRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestRtt.setStatus('current')
prvtTwampTestMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setStatus('current')
prvtTwampTestMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setStatus('current')
prvtTwampTestPcktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setStatus('current')
prvtTwampTestPcktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setStatus('current')
prvtTwampTestPcktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setStatus('current')
prvtTwampTestVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariation.setStatus('current')
prvtTwampTestVariationLow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 14), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setStatus('current')
prvtTwampTestVariationMiddle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 15), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setStatus('current')
prvtTwampTestVariationHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 16), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setStatus('current')
mibBuilder.exportSymbols("PRVT-SAA-MIB", prvtSaaNotifications=prvtSaaNotifications, prvtSaaY1731LoopbackTestEncapType=prvtSaaY1731LoopbackTestEncapType, prvtTwampTestVariationHigh=prvtTwampTestVariationHigh, prvtSaaY1731PmTestUserPort=prvtSaaY1731PmTestUserPort, prvtSaaRFC2544ThroughputTestBurstPercentage=prvtSaaRFC2544ThroughputTestBurstPercentage, prvtTwampTestServer=prvtTwampTestServer, prvtSaaY1731PmTestTimeout=prvtSaaY1731PmTestTimeout, prvtTwampTestName=prvtTwampTestName, prvtSaaProfileDelayNE=prvtSaaProfileDelayNE, prvtSaaY1731TestResultFrameLossNE=prvtSaaY1731TestResultFrameLossNE, prvtTwampTestRtt=prvtTwampTestRtt, prvtSaaY1731TestResultEntry=prvtSaaY1731TestResultEntry, prvtTwampTestPcktSent=prvtTwampTestPcktSent, prvtSaaRFC2544TestResultEntry=prvtSaaRFC2544TestResultEntry, prvtSaaRFC2544TestResultDelayMinimum=prvtSaaRFC2544TestResultDelayMinimum, prvtSaaRFC2544ThroughputTestCBS=prvtSaaRFC2544ThroughputTestCBS, prvtSaaY1731PmTestDataSize=prvtSaaY1731PmTestDataSize, prvtSaaRFC2544ThroughputTestCVLAN0Priority=prvtSaaRFC2544ThroughputTestCVLAN0Priority, prvtTwampServerShutdown=prvtTwampServerShutdown, prvtSaaY1731TestResultsGroup=prvtSaaY1731TestResultsGroup, prvtSaaY1731TestResultJitterNE=prvtSaaY1731TestResultJitterNE, prvtTwampTestVariationLow=prvtTwampTestVariationLow, prvtTwampTestSessions=prvtTwampTestSessions, prvtSaaCompliances=prvtSaaCompliances, prvtSaaRFC2544ThroughputTestName=prvtSaaRFC2544ThroughputTestName, prvtSaaY1731TestResultDelayFE=prvtSaaY1731TestResultDelayFE, prvtSaaRFC2544TestResultTable=prvtSaaRFC2544TestResultTable, prvtSaaRFC2544ThroughputTestEntry=prvtSaaRFC2544ThroughputTestEntry, prvtSaaRFC2544ThroughputTestACKTimeout=prvtSaaRFC2544ThroughputTestACKTimeout, prvtSaaY1731FrLossFEThreshold=prvtSaaY1731FrLossFEThreshold, prvtSaaRFC2544ProbeSuccess=prvtSaaRFC2544ProbeSuccess, prvtSaaGroups=prvtSaaGroups, prvtSaaConformance=prvtSaaConformance, prvtTwampTestMinRtt=prvtTwampTestMinRtt, prvtTwampTestTimeout=prvtTwampTestTimeout, prvtSaaY1731PmTestHistoryDepth=prvtSaaY1731PmTestHistoryDepth, prvtSaaMib=prvtSaaMib, prvtSaaTestResult=prvtSaaTestResult, prvtTwampTestPcktLost=prvtTwampTestPcktLost, prvtSaaRFC2544ThroughputTestLoopbackType=prvtSaaRFC2544ThroughputTestLoopbackType, prvtSaaY1731PmTestDelayMethod=prvtSaaY1731PmTestDelayMethod, prvtSaaY1731PmTestTargetMac=prvtSaaY1731PmTestTargetMac, prvtTwampTestResultEntry=prvtTwampTestResultEntry, prvtSaaRFC2544ThroughputTestCVLAN0DropEligible=prvtSaaRFC2544ThroughputTestCVLAN0DropEligible, prvtTwampClientIp=prvtTwampClientIp, prvtSaaRFC2544ProbeFailed=prvtSaaRFC2544ProbeFailed, prvtSaaProfileJitterFE=prvtSaaProfileJitterFE, prvtSaaY1731TestResultNoErrors=prvtSaaY1731TestResultNoErrors, prvtTwampTestServerAddress=prvtTwampTestServerAddress, prvtSaaRFC2544ThroughputTestCVLAN0=prvtSaaRFC2544ThroughputTestCVLAN0, prvtTwampTestRowStatus=prvtTwampTestRowStatus, prvtSaaProfileTable=prvtSaaProfileTable, prvtSaaY1731PmTestRemoteCfmMep=prvtSaaY1731PmTestRemoteCfmMep, prvtSaaY1731PmTestTestId=prvtSaaY1731PmTestTestId, prvtSaaRFC2544ThroughputTestRowStatus=prvtSaaRFC2544ThroughputTestRowStatus, prvtSaaY1731PmTestFrequency=prvtSaaY1731PmTestFrequency, prvtSaaY1731DelayNEThreshold=prvtSaaY1731DelayNEThreshold, prvtTwampTestResultTable=prvtTwampTestResultTable, prvtSaaY1731PmTestCfmDomainLevel=prvtSaaY1731PmTestCfmDomainLevel, prvtSaaY1731PmTestName=prvtSaaY1731PmTestName, prvtSaaY1731PmTestTable=prvtSaaY1731PmTestTable, prvtSaaRFC2544ThroughputTestSVLANPriority=prvtSaaRFC2544ThroughputTestSVLANPriority, prvtSaaRFC2544TestResultThroughput=prvtSaaRFC2544TestResultThroughput, prvtSaaProfileEntry=prvtSaaProfileEntry, prvtTwampTestEntry=prvtTwampTestEntry, prvtTwampClientTable=prvtTwampClientTable, prvtSaaProfiles=prvtSaaProfiles, prvtSaaRFC2544ThroughputTestPaternType=prvtSaaRFC2544ThroughputTestPaternType, prvtSaaY1731PmTestExecStatus=prvtSaaY1731PmTestExecStatus, prvtSaaY1731PmTestProfile=prvtSaaY1731PmTestProfile, prvtSaaRFC2544ThroughputTestSVLANDropEligible=prvtSaaRFC2544ThroughputTestSVLANDropEligible, prvtSaaRFC2544TestResultDelayMaximum=prvtSaaRFC2544TestResultDelayMaximum, prvtSaaRFC2544TestResultsGroup=prvtSaaRFC2544TestResultsGroup, prvtSaaY1731PmTestCCMAPSCount=prvtSaaY1731PmTestCCMAPSCount, prvtTwampTestResult=prvtTwampTestResult, prvtTwampTestResultName=prvtTwampTestResultName, prvtSaaY1731PmTestType=prvtSaaY1731PmTestType, prvtTwampServerControlSessions=prvtTwampServerControlSessions, prvtTwampClientEntry=prvtTwampClientEntry, prvtTwampTestId=prvtTwampTestId, prvtSaaRFC2544ThroughputTestCIR=prvtSaaRFC2544ThroughputTestCIR, prvtSaaY1731PmTestRowStatus=prvtSaaY1731PmTestRowStatus, prvtSaaY1731TestGroup=prvtSaaY1731TestGroup, prvtSaaY1731LoopbackTestCCMAPSCount=prvtSaaY1731LoopbackTestCCMAPSCount, prvtTwampTestTable=prvtTwampTestTable, prvtTwampTestExecuteNow=prvtTwampTestExecuteNow, prvtSaaY1731PmTestSLMTransmit=prvtSaaY1731PmTestSLMTransmit, prvtTwampServerSessionInnactivity=prvtTwampServerSessionInnactivity, prvtSaaRFC2544TestResultStatus=prvtSaaRFC2544TestResultStatus, prvtSaaProfileIndex=prvtSaaProfileIndex, prvtSaaY1731TestResultCompletionTime=prvtSaaY1731TestResultCompletionTime, prvtSaaProfileFrameLossFE=prvtSaaProfileFrameLossFE, prvtSaaY1731TestResultFramesRcvdNE=prvtSaaY1731TestResultFramesRcvdNE, prvtSaaY1731PmTestPeriod=prvtSaaY1731PmTestPeriod, prvtSaaY1731LoopbackTestCountAllPriorities=prvtSaaY1731LoopbackTestCountAllPriorities, prvtSaaRFC2544TestResultIndex=prvtSaaRFC2544TestResultIndex, prvtSaaRFC2544TestResultFrameLoss=prvtSaaRFC2544TestResultFrameLoss, prvtSaaY1731TestResultFrameLossFE=prvtSaaY1731TestResultFrameLossFE, prvtSaaY1731DelayFEThreshold=prvtSaaY1731DelayFEThreshold, prvtSaaRFC2544ThroughputTestSVLAN=prvtSaaRFC2544ThroughputTestSVLAN, prvtSaaProfileJitterNE=prvtSaaProfileJitterNE, prvtSaaY1731TestResultDelayNE=prvtSaaY1731TestResultDelayNE, prvtSaaY1731PmTestMonitorInterval=prvtSaaY1731PmTestMonitorInterval, prvtTwampClientRowStatus=prvtTwampClientRowStatus, prvtSaaRFC2544ThroughputTestSource=prvtSaaRFC2544ThroughputTestSource, prvtSaaProfileDelayFE=prvtSaaProfileDelayFE, prvtTwampServer=prvtTwampServer, prvtSaaY1731TestResultIndex=prvtSaaY1731TestResultIndex, prvtTwampObjects=prvtTwampObjects, prvtSaaY1731JitterFEThreshold=prvtSaaY1731JitterFEThreshold, prvtSaaY1731PmTestEntry=prvtSaaY1731PmTestEntry, prvtSaaProfileFrameLossNE=prvtSaaProfileFrameLossNE, prvtSaaRFC2544ThroughputTestPDUSize=prvtSaaRFC2544ThroughputTestPDUSize, prvtSaaY1731PmTestEncapValue=prvtSaaY1731PmTestEncapValue, prvtSaaY1731PmTestUplinkPort=prvtSaaY1731PmTestUplinkPort, PrvtTwampTestNameType=PrvtTwampTestNameType, prvtSaaRFC2544ThroughputTestExecStatus=prvtSaaRFC2544ThroughputTestExecStatus, prvtSaaProfilesGroup=prvtSaaProfilesGroup, prvtSaaY1731LoopbackTestGroup=prvtSaaY1731LoopbackTestGroup, prvtTwampTestVariationMiddle=prvtTwampTestVariationMiddle, prvtSaaRFC2544TestResultNetThroughput=prvtSaaRFC2544TestResultNetThroughput, prvtSaaY1731PmTestJitterMethod=prvtSaaY1731PmTestJitterMethod, prvtSaaRFC2544ThroughputTestSourceType=prvtSaaRFC2544ThroughputTestSourceType, prvtSaaRFC2544TestFinished=prvtSaaRFC2544TestFinished, prvtSaaRFC2544ThroughputTestTargetType=prvtSaaRFC2544ThroughputTestTargetType, prvtSaaY1731LoopbackTestUserPort=prvtSaaY1731LoopbackTestUserPort, prvtSaaY1731TestResultFramesSentNE=prvtSaaY1731TestResultFramesSentNE, prvtSaaY1731LoopbackTestUplinkPort=prvtSaaY1731LoopbackTestUplinkPort, prvtSaaY1731TestResultNoTimeouts=prvtSaaY1731TestResultNoTimeouts, prvtSaaY1731LoopbackTestEntry=prvtSaaY1731LoopbackTestEntry, prvtSaaY1731TestResultPacketsSent=prvtSaaY1731TestResultPacketsSent, prvtSaaTest=prvtSaaTest, prvtSaaCompliance=prvtSaaCompliance, prvtSaaY1731PmTestCountAllPriorities=prvtSaaY1731PmTestCountAllPriorities, prvtSaaY1731PmTestDropEligible=prvtSaaY1731PmTestDropEligible, prvtSaaRFC2544ThroughputTestTarget=prvtSaaRFC2544ThroughputTestTarget, prvtSaaY1731PmTestLossMeasurementType=prvtSaaY1731PmTestLossMeasurementType, prvtTwampTestStartTime=prvtTwampTestStartTime, prvtSaaRFC2544ThroughputTestMaxFrameloss=prvtSaaRFC2544ThroughputTestMaxFrameloss, prvtTwampTestMaxRtt=prvtTwampTestMaxRtt, prvtSaaY1731FrLossNEThreshold=prvtSaaY1731FrLossNEThreshold, prvtTwampTest=prvtTwampTest, prvtSaaRFC2544ThroughputTestEthertype=prvtSaaRFC2544ThroughputTestEthertype, prvtSaaY1731TestResultFramesRcvdFE=prvtSaaY1731TestResultFramesRcvdFE, prvtSaaProfileName=prvtSaaProfileName, prvtSaaY1731PmTestOwner=prvtSaaY1731PmTestOwner, prvtTwampServerInnactivity=prvtTwampServerInnactivity, prvtSaaRFC2544TestResultFrameSize=prvtSaaRFC2544TestResultFrameSize, prvtSaaRFC2544ThroughputTestTable=prvtSaaRFC2544ThroughputTestTable, prvtSaaRFC2544ThroughputTestDuration=prvtSaaRFC2544ThroughputTestDuration, prvtSaaY1731TestResultFramesSentFE=prvtSaaY1731TestResultFramesSentFE, PYSNMP_MODULE_ID=prvtSaaMib, prvtSaaNotificationsGroup=prvtSaaNotificationsGroup, prvtSaaY1731LoopbackTestType=prvtSaaY1731LoopbackTestType, prvtSaaY1731LoopbackTestEncapValue=prvtSaaY1731LoopbackTestEncapValue, prvtSaaY1731LoopbackTestRowStatus=prvtSaaY1731LoopbackTestRowStatus, prvtSaaY1731TestResultTable=prvtSaaY1731TestResultTable, prvtSaaY1731JitterNEThreshold=prvtSaaY1731JitterNEThreshold, prvtSaaRFC2544ThroughputTestOwner=prvtSaaRFC2544ThroughputTestOwner, prvtSaaY1731PmTestEncapType=prvtSaaY1731PmTestEncapType, prvtSaaY1731LoopbackTestTable=prvtSaaY1731LoopbackTestTable, prvtTwampTestVariation=prvtTwampTestVariation, prvtSaaRFC2544TestGroup=prvtSaaRFC2544TestGroup, prvtTwampTestPcktDrop=prvtTwampTestPcktDrop, prvtSaaY1731TestResultJitterFE=prvtSaaY1731TestResultJitterFE, prvtSaaObjects=prvtSaaObjects, prvtTwampTestPackets=prvtTwampTestPackets, prvtTwampServerMaxSessions=prvtTwampServerMaxSessions, prvtTwampTestState=prvtTwampTestState, prvtSaaY1731PmTestDelayPvalue=prvtSaaY1731PmTestDelayPvalue, prvtSaaY1731PmTestPriority=prvtSaaY1731PmTestPriority, prvtTwampTestDelay=prvtTwampTestDelay, prvtSaaProfileRowStatus=prvtSaaProfileRowStatus, prvtTwampServerTestSessions=prvtTwampServerTestSessions, prvtTwampServerMaxParallelSessions=prvtTwampServerMaxParallelSessions, prvtSaaRFC2544TestResultDelayAverage=prvtSaaRFC2544TestResultDelayAverage, prvtTwampTestSessionsCount=prvtTwampTestSessionsCount, PrvtTwampDecimalPercent=PrvtTwampDecimalPercent, prvtSaaRFC2544ThroughputTestType=prvtSaaRFC2544ThroughputTestType, prvtSaaY1731PmTestJitterPvalue=prvtSaaY1731PmTestJitterPvalue, prvtSaaRFC2544ThroughputTestTimeout=prvtSaaRFC2544ThroughputTestTimeout, prvtSaaY1731PmTestClocksInSync=prvtSaaY1731PmTestClocksInSync)
