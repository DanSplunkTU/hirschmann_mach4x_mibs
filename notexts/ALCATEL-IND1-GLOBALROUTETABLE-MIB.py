#
# PySNMP MIB module ALCATEL-IND1-GLOBALROUTETABLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-GLOBALROUTETABLE-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:11:50 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
routingIND1GlobalRouteTable, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1GlobalRouteTable")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
Ipv6IfIndex, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6IfIndex", "Ipv6Address")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Bits, Counter64, NotificationType, Gauge32, Integer32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Bits", "Counter64", "NotificationType", "Gauge32", "Integer32", "Counter32", "iso")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1GRTMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1))
alcatelIND1GRTMIB.setRevisions(('2014-02-07 00:00',))
if mibBuilder.loadTexts: alcatelIND1GRTMIB.setLastUpdated('201402070000Z')
if mibBuilder.loadTexts: alcatelIND1GRTMIB.setOrganization('Alcatel-Lucent')
alcatelIND1GRTMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1))
alaGrtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1))
class AlaGrtRouteDistinguisher(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

alaGrtRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaGrtRouteTable.setStatus('current')
alaGrtRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteDistinguisher"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteDest"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteMaskLen"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteNextHop"))
if mibBuilder.loadTexts: alaGrtRouteEntry.setStatus('current')
alaGrtRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 1), AlaGrtRouteDistinguisher())
if mibBuilder.loadTexts: alaGrtRouteDistinguisher.setStatus('current')
alaGrtRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaGrtRouteDest.setStatus('current')
alaGrtRouteMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaGrtRouteMaskLen.setStatus('current')
alaGrtRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: alaGrtRouteNextHop.setStatus('current')
alaGrtRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrtRouteMetric.setStatus('current')
alaGrtRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrtRouteTag.setStatus('current')
alaGrtRouteVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrtRouteVrfName.setStatus('current')
alaGrtRouteIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrtRouteIsid.setStatus('current')
alaGrt6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaGrt6RouteTable.setStatus('current')
alaGrt6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteDistinguisher"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteDest"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteMaskLen"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteNextHop"), (0, "ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteIfIndex"))
if mibBuilder.loadTexts: alaGrt6RouteEntry.setStatus('current')
alaGrt6RouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 1), AlaGrtRouteDistinguisher())
if mibBuilder.loadTexts: alaGrt6RouteDistinguisher.setStatus('current')
alaGrt6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaGrt6RouteDest.setStatus('current')
alaGrt6RouteMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaGrt6RouteMaskLen.setStatus('current')
alaGrt6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: alaGrt6RouteNextHop.setStatus('current')
alaGrt6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 5), Ipv6IfIndex())
if mibBuilder.loadTexts: alaGrt6RouteIfIndex.setStatus('current')
alaGrt6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrt6RouteMetric.setStatus('current')
alaGrt6RouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrt6RouteTag.setStatus('current')
alaGrt6RouteVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGrt6RouteVrfName.setStatus('current')
alcatelIND1GRTMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 2))
alcatelIND1GRTMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 2, 1))
alcatelIND1GRTMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 2, 2))
alaGrtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaGrtCompliance = alaGrtCompliance.setStatus('current')
alaGrtConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 16, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteMetric"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteTag"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteVrfName"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrtRouteIsid"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteMetric"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteTag"), ("ALCATEL-IND1-GLOBALROUTETABLE-MIB", "alaGrt6RouteVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaGrtConfigMIBGroup = alaGrtConfigMIBGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-GLOBALROUTETABLE-MIB", alcatelIND1GRTMIBConformance=alcatelIND1GRTMIBConformance, alaGrtRouteTable=alaGrtRouteTable, alaGrtRouteIsid=alaGrtRouteIsid, alaGrt6RouteIfIndex=alaGrt6RouteIfIndex, alaGrtConfigMIBGroup=alaGrtConfigMIBGroup, alaGrtRouteDest=alaGrtRouteDest, alcatelIND1GRTMIB=alcatelIND1GRTMIB, AlaGrtRouteDistinguisher=AlaGrtRouteDistinguisher, alaGrtRouteDistinguisher=alaGrtRouteDistinguisher, alaGrtRouteNextHop=alaGrtRouteNextHop, alaGrt6RouteVrfName=alaGrt6RouteVrfName, alaGrtRouteVrfName=alaGrtRouteVrfName, alaGrtCompliance=alaGrtCompliance, alaGrtRouteEntry=alaGrtRouteEntry, alaGrt6RouteMaskLen=alaGrt6RouteMaskLen, alaGrtConfig=alaGrtConfig, PYSNMP_MODULE_ID=alcatelIND1GRTMIB, alaGrt6RouteTable=alaGrt6RouteTable, alcatelIND1GRTMIBGroups=alcatelIND1GRTMIBGroups, alaGrtRouteMaskLen=alaGrtRouteMaskLen, alaGrt6RouteNextHop=alaGrt6RouteNextHop, alaGrt6RouteTag=alaGrt6RouteTag, alcatelIND1GRTMIBCompliances=alcatelIND1GRTMIBCompliances, alaGrtRouteTag=alaGrtRouteTag, alaGrt6RouteDistinguisher=alaGrt6RouteDistinguisher, alaGrt6RouteEntry=alaGrt6RouteEntry, alaGrtRouteMetric=alaGrtRouteMetric, alaGrt6RouteDest=alaGrt6RouteDest, alcatelIND1GRTMIBObjects=alcatelIND1GRTMIBObjects, alaGrt6RouteMetric=alaGrt6RouteMetric)
