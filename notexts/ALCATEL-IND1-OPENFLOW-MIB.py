#
# PySNMP MIB module ALCATEL-IND1-OPENFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-OPENFLOW-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:14:19 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1OpenflowMIB, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1OpenflowMIB")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, IpAddress, ObjectIdentity, ModuleIdentity, Integer32, TimeTicks, Unsigned32, Bits, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Integer32", "TimeTicks", "Unsigned32", "Bits", "NotificationType", "iso")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1OpenflowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1))
alcatelIND1OpenflowMIB.setRevisions(('2014-03-26 00:00', '2014-10-08 00:00',))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setLastUpdated('201403260000Z')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setOrganization('Alcatel-Lucent')
alcatelIND1OpenflowMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 0))
alcatelIND1OpenflowMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBObjects.setStatus('current')
alcatelIND1OpenflowMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBConformance.setStatus('current')
alaOpenflowGlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1))
alaOpenflowGlobalBackoffMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalBackoffMax.setStatus('current')
alaOpenflowGlobalIdleProbeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalIdleProbeTimeout.setStatus('current')
alaOpenflowLogicalSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2), )
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTable.setStatus('current')
alaOpenflowLogicalSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitch"))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchEntry.setStatus('current')
alaOpenflowLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitch.setStatus('current')
alaOpenflowLogicalSwitchAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchAdminState.setStatus('current')
alaOpenflowLogicalSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("api", 2), ("pfcChannel", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchMode.setStatus('current')
alaOpenflowLogicalSwitchVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1))).clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVersions.setStatus('current')
alaOpenflowLogicalSwitchVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVlan.setStatus('current')
alaOpenflowLogicalSwitchControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchControllerCount.setStatus('current')
alaOpenflowLogicalSwitchInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchInterfaceCount.setStatus('current')
alaOpenflowLogicalSwitchFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFlowCount.setStatus('current')
alaOpenflowLogicalSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchRowStatus.setStatus('current')
alaOpenflowLogicalSwitchLearnedMacUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchLearnedMacUpdate.setStatus('current')
alaOpenflowLogicalSwitchProbeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchProbeTime.setStatus('current')
alaOpenflowLogicalSwitchFailureDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFailureDetectTime.setStatus('current')
alaOpenflowLogicalSwitchDPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchDPID.setStatus('current')
alaOpenflowLogicalSwitchTableMissAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("controller", 2))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTableMissAction.setStatus('current')
alaOpenflowLogicalSwitchTCPBufferSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(2)).setUnits('Kilo Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeTx.setStatus('current')
alaOpenflowLogicalSwitchTCPBufferSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(2)).setUnits('Kilo Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeRx.setStatus('current')
alaOpenflowControllerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3), )
if mibBuilder.loadTexts: alaOpenflowControllerTable.setStatus('current')
alaOpenflowControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIpType"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIp"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerPort"))
if mibBuilder.loadTexts: alaOpenflowControllerEntry.setStatus('current')
alaOpenflowControllerLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowControllerLogicalSwitch.setStatus('current')
alaOpenflowControllerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 2), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaOpenflowControllerIpType.setStatus('current')
alaOpenflowControllerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaOpenflowControllerIp.setStatus('current')
alaOpenflowControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowControllerPort.setStatus('current')
alaOpenflowControllerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("equal", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerRole.setStatus('current')
alaOpenflowControllerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerAdminState.setStatus('current')
alaOpenflowControllerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("disabled", 2), ("sendError", 3), ("init", 4), ("connecting", 5), ("backoff", 6), ("exchangingHello", 7), ("active", 8), ("idle", 9), ("disconnected", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerOperState.setStatus('current')
alaOpenflowControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerRowStatus.setStatus('current')
alaOpenflowControllerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerPriority.setStatus('current')
alaOpenflowInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4), )
if mibBuilder.loadTexts: alaOpenflowInterfaceTable.setStatus('current')
alaOpenflowInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterface"))
if mibBuilder.loadTexts: alaOpenflowInterfaceEntry.setStatus('current')
alaOpenflowInterfaceLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowInterfaceLogicalSwitch.setStatus('current')
alaOpenflowInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowInterface.setStatus('current')
alaOpenflowInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("api", 2), ("pfcChannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowInterfaceMode.setStatus('current')
alaOpenflowInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceRowStatus.setStatus('current')
alaOpenflowInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunk", 1), ("access", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceType.setStatus('current')
alaOpenflowInterfaceNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceNativeVlan.setStatus('current')
alaOpenflowInterfaceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5), )
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanTable.setStatus('current')
alaOpenflowInterfaceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterface"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceVlanVlanID"))
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanEntry.setStatus('current')
alaOpenflowInterfaceVlanVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), )))
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanVlanID.setStatus('current')
alaOpenflowInterfaceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanRowStatus.setStatus('current')
alcatelIND1OpenflowMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBGroups.setStatus('current')
alcatelIND1OpenflowMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBCompliances.setStatus('current')
alaOpenflowMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleConfigGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleLogicalSwitchGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleControllerGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleInterfaceGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleInterfaceVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowMIBCompliance = alaOpenflowMIBCompliance.setStatus('current')
alaOpenflowModuleConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalBackoffMax"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalIdleProbeTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleConfigGroup = alaOpenflowModuleConfigGroup.setStatus('current')
alaOpenflowModuleLogicalSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVersions"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVlan"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchControllerCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchInterfaceCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchFlowCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchLearnedMacUpdate"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchProbeTime"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchFailureDetectTime"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchDPID"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTableMissAction"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTCPBufferSizeTx"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTCPBufferSizeRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleLogicalSwitchGroup = alaOpenflowModuleLogicalSwitchGroup.setStatus('current')
alaOpenflowModuleControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRole"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerOperState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleControllerGroup = alaOpenflowModuleControllerGroup.setStatus('current')
alaOpenflowModuleInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceType"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceNativeVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleInterfaceGroup = alaOpenflowModuleInterfaceGroup.setStatus('current')
alaOpenflowModuleInterfaceVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleInterfaceVlanGroup = alaOpenflowModuleInterfaceVlanGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-OPENFLOW-MIB", alaOpenflowLogicalSwitchRowStatus=alaOpenflowLogicalSwitchRowStatus, alaOpenflowInterfaceEntry=alaOpenflowInterfaceEntry, alaOpenflowControllerAdminState=alaOpenflowControllerAdminState, alaOpenflowControllerTable=alaOpenflowControllerTable, alaOpenflowInterfaceTable=alaOpenflowInterfaceTable, alaOpenflowLogicalSwitchMode=alaOpenflowLogicalSwitchMode, alaOpenflowLogicalSwitchProbeTime=alaOpenflowLogicalSwitchProbeTime, alaOpenflowInterface=alaOpenflowInterface, alaOpenflowLogicalSwitchAdminState=alaOpenflowLogicalSwitchAdminState, alcatelIND1OpenflowMIBNotifications=alcatelIND1OpenflowMIBNotifications, alaOpenflowInterfaceVlanVlanID=alaOpenflowInterfaceVlanVlanID, alaOpenflowModuleInterfaceVlanGroup=alaOpenflowModuleInterfaceVlanGroup, alaOpenflowControllerOperState=alaOpenflowControllerOperState, alaOpenflowGlobalIdleProbeTimeout=alaOpenflowGlobalIdleProbeTimeout, alcatelIND1OpenflowMIBObjects=alcatelIND1OpenflowMIBObjects, alaOpenflowLogicalSwitchTCPBufferSizeRx=alaOpenflowLogicalSwitchTCPBufferSizeRx, alaOpenflowLogicalSwitchLearnedMacUpdate=alaOpenflowLogicalSwitchLearnedMacUpdate, alaOpenflowLogicalSwitchControllerCount=alaOpenflowLogicalSwitchControllerCount, alaOpenflowInterfaceLogicalSwitch=alaOpenflowInterfaceLogicalSwitch, PYSNMP_MODULE_ID=alcatelIND1OpenflowMIB, alaOpenflowInterfaceVlanRowStatus=alaOpenflowInterfaceVlanRowStatus, alcatelIND1OpenflowMIBCompliances=alcatelIND1OpenflowMIBCompliances, alaOpenflowGlobalBackoffMax=alaOpenflowGlobalBackoffMax, alcatelIND1OpenflowMIB=alcatelIND1OpenflowMIB, alaOpenflowControllerRowStatus=alaOpenflowControllerRowStatus, alaOpenflowGlobalConfigObjects=alaOpenflowGlobalConfigObjects, alaOpenflowInterfaceNativeVlan=alaOpenflowInterfaceNativeVlan, alaOpenflowLogicalSwitchFailureDetectTime=alaOpenflowLogicalSwitchFailureDetectTime, alcatelIND1OpenflowMIBConformance=alcatelIND1OpenflowMIBConformance, alaOpenflowModuleInterfaceGroup=alaOpenflowModuleInterfaceGroup, alaOpenflowControllerLogicalSwitch=alaOpenflowControllerLogicalSwitch, alcatelIND1OpenflowMIBGroups=alcatelIND1OpenflowMIBGroups, alaOpenflowLogicalSwitchVlan=alaOpenflowLogicalSwitchVlan, alaOpenflowInterfaceType=alaOpenflowInterfaceType, alaOpenflowControllerIp=alaOpenflowControllerIp, alaOpenflowLogicalSwitchVersions=alaOpenflowLogicalSwitchVersions, alaOpenflowLogicalSwitchFlowCount=alaOpenflowLogicalSwitchFlowCount, alaOpenflowLogicalSwitchTCPBufferSizeTx=alaOpenflowLogicalSwitchTCPBufferSizeTx, alaOpenflowModuleConfigGroup=alaOpenflowModuleConfigGroup, alaOpenflowLogicalSwitchInterfaceCount=alaOpenflowLogicalSwitchInterfaceCount, alaOpenflowLogicalSwitchTableMissAction=alaOpenflowLogicalSwitchTableMissAction, alaOpenflowInterfaceVlanEntry=alaOpenflowInterfaceVlanEntry, alaOpenflowControllerEntry=alaOpenflowControllerEntry, alaOpenflowLogicalSwitchEntry=alaOpenflowLogicalSwitchEntry, alaOpenflowInterfaceVlanTable=alaOpenflowInterfaceVlanTable, alaOpenflowLogicalSwitchTable=alaOpenflowLogicalSwitchTable, alaOpenflowControllerPriority=alaOpenflowControllerPriority, alaOpenflowControllerPort=alaOpenflowControllerPort, alaOpenflowModuleLogicalSwitchGroup=alaOpenflowModuleLogicalSwitchGroup, alaOpenflowControllerIpType=alaOpenflowControllerIpType, alaOpenflowMIBCompliance=alaOpenflowMIBCompliance, alaOpenflowInterfaceMode=alaOpenflowInterfaceMode, alaOpenflowLogicalSwitch=alaOpenflowLogicalSwitch, alaOpenflowLogicalSwitchDPID=alaOpenflowLogicalSwitchDPID, alaOpenflowInterfaceRowStatus=alaOpenflowInterfaceRowStatus, alaOpenflowModuleControllerGroup=alaOpenflowModuleControllerGroup, alaOpenflowControllerRole=alaOpenflowControllerRole)
