#
# PySNMP MIB module DEVICE (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/peplink/DEVICE
# Produced by pysmi-1.1.8 at Thu Jan 13 23:57:39 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Integer32, NotificationType, Counter64, MibIdentifier, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Bits, Counter32, TimeTicks, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "NotificationType", "Counter64", "MibIdentifier", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Bits", "Counter32", "TimeTicks", "enterprises", "ModuleIdentity")
RowStatus, MacAddress, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TextualConvention", "TruthValue")
peplink = MibIdentifier((1, 3, 6, 1, 4, 1, 23695))
productMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200))
generalMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1))
deviceMib = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1))
deviceInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1))
if mibBuilder.loadTexts: deviceInfo.setLastUpdated('201711150000Z')
if mibBuilder.loadTexts: deviceInfo.setOrganization('PEPLINK')
deviceInfoSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1))
deviceModel = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModel.setStatus('current')
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('current')
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFirmwareVersion.setStatus('current')
deviceInfoTime = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2))
deviceSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSystemTime.setStatus('current')
deviceSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSystemUpTime.setStatus('current')
deviceInfoUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3))
deviceCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoad.setStatus('current')
deviceTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalMemory.setStatus('current')
deviceMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMemoryUsage.setStatus('current')
deviceInfoHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4))
devicePSUTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: devicePSUTable.setStatus('current')
devicePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "DEVICE", "devicePSUId"))
if mibBuilder.loadTexts: devicePSUEntry.setStatus('current')
devicePSUId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUId.setStatus('current')
devicePSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUStatus.setStatus('current')
deviceCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCurrentPower.setStatus('current')
deviceMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMaxPower.setStatus('current')
devicePSUPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePSUPercentage.setStatus('current')
deviceFanTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: deviceFanTable.setStatus('current')
deviceFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "DEVICE", "deviceFanId"))
if mibBuilder.loadTexts: deviceFanEntry.setStatus('current')
deviceFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanId.setStatus('current')
deviceFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanStatus.setStatus('current')
deviceFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanSpeed.setStatus('current')
devicePowerSourceTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3), )
if mibBuilder.loadTexts: devicePowerSourceTable.setStatus('current')
devicePowerSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1), ).setIndexNames((0, "DEVICE", "devicePowerSourceId"))
if mibBuilder.loadTexts: devicePowerSourceEntry.setStatus('current')
devicePowerSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceId.setStatus('current')
devicePowerSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceName.setStatus('current')
devicePowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noCableDetected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePowerSourceStatus.setStatus('current')
deviceInfoTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4))
deviceTemperatureCelsius = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4, 1), Gauge32()).setUnits('mC').setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureCelsius.setStatus('current')
deviceTemperatureFahrenheit = MibScalar((1, 3, 6, 1, 4, 1, 23695, 200, 1, 1, 1, 4, 4, 2), Gauge32()).setUnits('mF').setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureFahrenheit.setStatus('current')
mibBuilder.exportSymbols("DEVICE", deviceInfoSystem=deviceInfoSystem, deviceFanId=deviceFanId, deviceFanStatus=deviceFanStatus, deviceMaxPower=deviceMaxPower, generalMib=generalMib, deviceTemperatureCelsius=deviceTemperatureCelsius, deviceModel=deviceModel, devicePSUEntry=devicePSUEntry, devicePowerSourceStatus=devicePowerSourceStatus, deviceFanEntry=deviceFanEntry, productMib=productMib, peplink=peplink, deviceCpuLoad=deviceCpuLoad, deviceTotalMemory=deviceTotalMemory, devicePowerSourceId=devicePowerSourceId, deviceInfoHardware=deviceInfoHardware, deviceInfoTime=deviceInfoTime, deviceFanSpeed=deviceFanSpeed, deviceSystemTime=deviceSystemTime, devicePowerSourceName=devicePowerSourceName, deviceInfoUsage=deviceInfoUsage, deviceMib=deviceMib, devicePSUId=devicePSUId, devicePSUPercentage=devicePSUPercentage, deviceInfo=deviceInfo, deviceCurrentPower=deviceCurrentPower, deviceMemoryUsage=deviceMemoryUsage, devicePSUTable=devicePSUTable, devicePowerSourceEntry=devicePowerSourceEntry, deviceTemperatureFahrenheit=deviceTemperatureFahrenheit, deviceInfoTemperature=deviceInfoTemperature, deviceFanTable=deviceFanTable, devicePSUStatus=devicePSUStatus, deviceSystemUpTime=deviceSystemUpTime, PYSNMP_MODULE_ID=deviceInfo, devicePowerSourceTable=devicePowerSourceTable, deviceFirmwareVersion=deviceFirmwareVersion, deviceSerialNumber=deviceSerialNumber)
