#
# PySNMP MIB module DOCS-QOS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-QOS3-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:32:40 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
DscpOrAny, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny")
ChannelList, ChId, Dsid, AttrAggrRuleMask, ChSetId, AttributeMask = mibBuilder.importSymbols("DOCS-IF3-MIB", "ChannelList", "ChId", "Dsid", "AttrAggrRuleMask", "ChSetId", "AttributeMask")
DocsL2vpnIfList, = mibBuilder.importSymbols("DOCS-L2VPN-MIB", "DocsL2vpnIfList")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Counter32, iso, ObjectIdentity, IpAddress, Bits, MibIdentifier, Counter64, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Counter32", "iso", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "Counter64", "Unsigned32", "Integer32")
RowStatus, TimeStamp, DisplayString, StorageType, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "DisplayString", "StorageType", "TextualConvention", "MacAddress", "TruthValue")
docsQos3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21))
docsQos3Mib.setRevisions(('2007-08-03 00:00', '2007-05-18 00:00', '2006-12-07 17:00',))
if mibBuilder.loadTexts: docsQos3Mib.setLastUpdated('200708030000Z')
if mibBuilder.loadTexts: docsQos3Mib.setOrganization('Cable Television Laboratories, Inc.')
class IfDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2))

class DOCSQOS3BitRate(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class SchedulingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

docsQos3MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1))
docsQos3PktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1), )
if mibBuilder.loadTexts: docsQos3PktClassTable.setStatus('current')
docsQos3PktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3PktClassEntry.setStatus('current')
docsQos3PktClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQos3PktClassId.setStatus('current')
docsQos3PktClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDirection.setStatus('current')
docsQos3PktClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassPriority.setStatus('current')
docsQos3PktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosLow.setStatus('current')
docsQos3PktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosHigh.setStatus('current')
docsQos3PktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosMask.setStatus('current')
docsQos3PktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpProtocol.setStatus('current')
docsQos3PktClassIpSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpSourceAddr.setStatus('current')
docsQos3PktClassIpSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpSourceMask.setStatus('current')
docsQos3PktClassIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpDestAddr.setStatus('current')
docsQos3PktClassIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpDestMask.setStatus('current')
docsQos3PktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourcePortStart.setStatus('current')
docsQos3PktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourcePortEnd.setStatus('current')
docsQos3PktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestPortStart.setStatus('current')
docsQos3PktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 15), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestPortEnd.setStatus('current')
docsQos3PktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestMacAddr.setStatus('current')
docsQos3PktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestMacMask.setStatus('current')
docsQos3PktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourceMacAddr.setStatus('current')
docsQos3PktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocolType.setStatus('current')
docsQos3PktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocol.setStatus('current')
docsQos3PktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassUserPriLow.setStatus('current')
docsQos3PktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassUserPriHigh.setStatus('current')
docsQos3PktClassVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassVlanId.setStatus('current')
docsQos3PktClassState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassState.setStatus('current')
docsQos3PktClassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassPkts.setStatus('current')
docsQos3PktClassBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16), ("flowLabel", 17), ("cmInterfaceMask", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassBitMap.setStatus('current')
docsQos3PktClassIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpAddrType.setStatus('current')
docsQos3PktClassFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassFlowLabel.setStatus('current')
docsQos3PktClassCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 30), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassCmInterfaceMask.setStatus('current')
docsQos3ParamSetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2), )
if mibBuilder.loadTexts: docsQos3ParamSetTable.setStatus('current')
docsQos3ParamSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ParamSetType"), (0, "DOCS-QOS3-MIB", "docsQos3ParamSetServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ParamSetEntry.setStatus('current')
docsQos3ParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetServiceClassName.setStatus('current')
docsQos3ParamSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetPriority.setStatus('current')
docsQos3ParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 6), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficRate.setStatus('current')
docsQos3ParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 7), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficBurst.setStatus('current')
docsQos3ParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 8), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedRate.setStatus('current')
docsQos3ParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedPkt.setStatus('current')
docsQos3ParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetActiveTimeout.setStatus('current')
docsQos3ParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAdmittedTimeout.setStatus('current')
docsQos3ParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxConcatBurst.setStatus('current')
docsQos3ParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 13), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetSchedulingType.setStatus('current')
docsQos3ParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetNomPollInterval.setStatus('current')
docsQos3ParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTolPollJitter.setStatus('current')
docsQos3ParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetUnsolicitGrantSize.setStatus('current')
docsQos3ParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetNomGrantInterval.setStatus('current')
docsQos3ParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTolGrantJitter.setStatus('current')
docsQos3ParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetGrantsPerInterval.setStatus('current')
docsQos3ParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTosAndMask.setStatus('current')
docsQos3ParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTosOrMask.setStatus('current')
docsQos3ParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxLatency.setStatus('current')
docsQos3ParamSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3))))
if mibBuilder.loadTexts: docsQos3ParamSetType.setStatus('current')
docsQos3ParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetRequestPolicyOct.setStatus('current')
docsQos3ParamSetBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 25), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17), ("requiredAttrMask", 18), ("forbiddenAttrMask", 19), ("attrAggrMask", 20), ("applicationId", 21), ("multipCntnReqWindow", 22), ("multipBytesReq", 23), ("maxReqPerSidCluster", 24), ("maxOutstandingBytesPerSidCluster", 25), ("maxTotalBytesReqPerSidCluster", 26), ("maximumTimeInSidCluster", 27), ("peakTrafficRate", 28), ("dsResequencing", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetBitMap.setStatus('current')
docsQos3ParamSetServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3ParamSetServiceFlowId.setStatus('current')
docsQos3ParamSetRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 27), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetRequiredAttrMask.setStatus('current')
docsQos3ParamSetForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 28), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetForbiddenAttrMask.setStatus('current')
docsQos3ParamSetAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 29), AttrAggrRuleMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAttrAggrRuleMask.setStatus('current')
docsQos3ParamSetAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAppId.setStatus('current')
docsQos3ParamSetMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12))).setUnits('eighths').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierContentionReqWindow.setStatus('current')
docsQos3ParamSetMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierBytesReq.setStatus('current')
docsQos3ParamSetMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxReqPerSidCluster.setStatus('current')
docsQos3ParamSetMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxOutstandingBytesPerSidCluster.setStatus('current')
docsQos3ParamSetMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 35), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTotBytesReqPerSidCluster.setStatus('current')
docsQos3ParamSetMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTimeInSidCluster.setStatus('current')
docsQos3ParamSetPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 37), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetPeakTrafficRate.setStatus('current')
docsQos3ParamSetDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resequencingDsid", 0), ("noResequencingDsid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetDsResequencing.setStatus('current')
docsQos3ServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3), )
if mibBuilder.loadTexts: docsQos3ServiceFlowTable.setStatus('current')
docsQos3ServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowEntry.setStatus('current')
docsQos3ServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsQos3ServiceFlowId.setStatus('current')
docsQos3ServiceFlowSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowSID.setStatus('current')
docsQos3ServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 7), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowDirection.setStatus('current')
docsQos3ServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPrimary.setStatus('current')
docsQos3ServiceFlowParamSetTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("active", 0), ("admitted", 1), ("provisioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowParamSetTypeStatus.setStatus('current')
docsQos3ServiceFlowChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 10), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowChSetId.setStatus('current')
docsQos3ServiceFlowAttrAssignSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowAttrAssignSuccess.setStatus('current')
docsQos3ServiceFlowDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 12), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowDsid.setStatus('current')
docsQos3ServiceFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4), )
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsTable.setStatus('current')
docsQos3ServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsEntry.setStatus('current')
docsQos3ServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPkts.setStatus('current')
docsQos3ServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowOctets.setStatus('current')
docsQos3ServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeCreated.setStatus('current')
docsQos3ServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeActive.setStatus('current')
docsQos3ServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPHSUnknowns.setStatus('current')
docsQos3ServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDropPkts.setStatus('current')
docsQos3ServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDelayPkts.setStatus('current')
docsQos3UpstreamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5), )
if mibBuilder.loadTexts: docsQos3UpstreamStatsTable.setStatus('current')
docsQos3UpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3SID"))
if mibBuilder.loadTexts: docsQos3UpstreamStatsEntry.setStatus('current')
docsQos3SID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsQos3SID.setStatus('current')
docsQos3UpstreamFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 2), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamFragments.setStatus('current')
docsQos3UpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 3), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamFragDiscards.setStatus('current')
docsQos3UpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 4), Counter32()).setUnits('headers').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamConcatBursts.setStatus('current')
docsQos3DynamicServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6), )
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsTable.setStatus('current')
docsQos3DynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3IfDirection"))
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsEntry.setStatus('current')
docsQos3IfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsQos3IfDirection.setStatus('current')
docsQos3DSAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSAReqs.setStatus('current')
docsQos3DSARsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSARsps.setStatus('current')
docsQos3DSAAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSAAcks.setStatus('current')
docsQos3DSCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCReqs.setStatus('current')
docsQos3DSCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCRsps.setStatus('current')
docsQos3DSCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCAcks.setStatus('current')
docsQos3DSDReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSDReqs.setStatus('current')
docsQos3DSDRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSDRsps.setStatus('current')
docsQos3DynamicAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicAdds.setStatus('current')
docsQos3DynamicAddFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicAddFails.setStatus('current')
docsQos3DynamicChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicChanges.setStatus('current')
docsQos3DynamicChangeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicChangeFails.setStatus('current')
docsQos3DynamicDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicDeletes.setStatus('current')
docsQos3DynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicDeleteFails.setStatus('current')
docsQos3DCCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCReqs.setStatus('current')
docsQos3DCCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRsps.setStatus('current')
docsQos3DCCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCAcks.setStatus('current')
docsQos3DCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCs.setStatus('current')
docsQos3DCCFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCFails.setStatus('current')
docsQos3DCCRspDeparts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRspDeparts.setStatus('current')
docsQos3DCCRspArrives = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRspArrives.setStatus('current')
docsQos3DbcReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcReqs.setStatus('current')
docsQos3DbcRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcRsps.setStatus('current')
docsQos3DbcAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcAcks.setStatus('current')
docsQos3DbcSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcSuccesses.setStatus('current')
docsQos3DbcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcFails.setStatus('current')
docsQos3DbcPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcPartial.setStatus('current')
docsQos3ServiceFlowLogTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7), )
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTable.setStatus('current')
docsQos3ServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsQos3ServiceFlowLogEntry.setStatus('current')
docsQos3ServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIndex.setStatus('current')
docsQos3ServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIfIndex.setStatus('current')
docsQos3ServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogSFID.setStatus('current')
docsQos3ServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogCmMac.setStatus('current')
docsQos3ServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPkts.setStatus('current')
docsQos3ServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogOctets.setStatus('current')
docsQos3ServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeDeleted.setStatus('current')
docsQos3ServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeCreated.setStatus('current')
docsQos3ServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeActive.setStatus('current')
docsQos3ServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogDirection.setStatus('current')
docsQos3ServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPrimary.setStatus('current')
docsQos3ServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogServiceClassName.setStatus('current')
docsQos3ServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDropPkts.setStatus('current')
docsQos3ServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDelayPkts.setStatus('current')
docsQos3ServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogControl.setStatus('current')
docsQos3ServiceClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8), )
if mibBuilder.loadTexts: docsQos3ServiceClassTable.setStatus('current')
docsQos3ServiceClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3ServiceClassName"))
if mibBuilder.loadTexts: docsQos3ServiceClassEntry.setStatus('current')
docsQos3ServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: docsQos3ServiceClassName.setStatus('current')
docsQos3ServiceClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassStatus.setStatus('current')
docsQos3ServiceClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassPriority.setStatus('current')
docsQos3ServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 5), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficRate.setStatus('current')
docsQos3ServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 6), Unsigned32().clone(3044)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficBurst.setStatus('current')
docsQos3ServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 7), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedRate.setStatus('current')
docsQos3ServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedPkt.setStatus('current')
docsQos3ServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1522)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxConcatBurst.setStatus('current')
docsQos3ServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassNomPollInterval.setStatus('current')
docsQos3ServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTolPollJitter.setStatus('current')
docsQos3ServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassUnsolicitGrantSize.setStatus('current')
docsQos3ServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassNomGrantInterval.setStatus('current')
docsQos3ServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTolGrantJitter.setStatus('current')
docsQos3ServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassGrantsPerInterval.setStatus('current')
docsQos3ServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxLatency.setStatus('current')
docsQos3ServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassActiveTimeout.setStatus('current')
docsQos3ServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAdmittedTimeout.setStatus('current')
docsQos3ServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 19), SchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassSchedulingType.setStatus('current')
docsQos3ServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassRequestPolicy.setStatus('current')
docsQos3ServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTosAndMask.setStatus('current')
docsQos3ServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTosOrMask.setStatus('current')
docsQos3ServiceClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 23), IfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDirection.setStatus('current')
docsQos3ServiceClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 24), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassStorageType.setStatus('current')
docsQos3ServiceClassDSCPOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 25), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDSCPOverwrite.setStatus('current')
docsQos3ServiceClassRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 26), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassRequiredAttrMask.setStatus('current')
docsQos3ServiceClassForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 27), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassForbiddenAttrMask.setStatus('current')
docsQos3ServiceClassAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 28), AttrAggrRuleMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAttrAggrRuleMask.setStatus('current')
docsQos3ServiceClassAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAppId.setStatus('current')
docsQos3ServiceClassMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(8)).setUnits('eighths').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierContentionReqWindow.setStatus('current')
docsQos3ServiceClassMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), )).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierBytesReq.setStatus('current')
docsQos3ServiceClassMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('requests').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxReqPerSidCluster.setStatus('current')
docsQos3ServiceClassMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 33), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxOutstandingBytesPerSidCluster.setStatus('current')
docsQos3ServiceClassMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTotBytesReqPerSidCluster.setStatus('current')
docsQos3ServiceClassMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTimeInSidCluster.setStatus('current')
docsQos3ServiceClassPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 36), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassPeakTrafficRate.setStatus('current')
docsQos3ServiceClassDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resequencingDsid", 0), ("noResequencingDsid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDsResequencing.setStatus('current')
docsQos3PHSTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10), )
if mibBuilder.loadTexts: docsQos3PHSTable.setStatus('current')
docsQos3PHSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3PHSEntry.setStatus('current')
docsQos3PHSField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSField.setStatus('current')
docsQos3PHSMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSMask.setStatus('current')
docsQos3PHSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSSize.setStatus('current')
docsQos3PHSVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSVerify.setStatus('current')
docsQos3PHSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSIndex.setStatus('current')
docsQos3CmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11), )
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowTable.setStatus('current')
docsQos3CmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmtsCmMac"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsServiceFlowId"))
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowEntry.setStatus('current')
docsQos3CmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsQos3CmtsCmMac.setStatus('current')
docsQos3CmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3CmtsServiceFlowId.setStatus('current')
docsQos3CmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsIfIndex.setStatus('current')
docsQos3ServiceFlowSidClusterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12), )
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterTable.setStatus('current')
docsQos3ServiceFlowSidClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterId"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterUcid"))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterEntry.setStatus('current')
docsQos3ServiceFlowSidClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterId.setStatus('current')
docsQos3ServiceFlowSidClusterUcid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 2), ChId().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterUcid.setStatus('current')
docsQos3ServiceFlowSidClusterSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterSid.setStatus('current')
docsQos3GrpServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13), )
if mibBuilder.loadTexts: docsQos3GrpServiceFlowTable.setStatus('current')
docsQos3GrpServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3GrpServiceFlowEntry.setStatus('current')
docsQos3GrpServiceFlowIsDef = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowIsDef.setStatus('current')
docsQos3GrpServiceFlowQosConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowQosConfigId.setStatus('current')
docsQos3GrpServiceFlowNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowNumSess.setStatus('current')
docsQos3GrpPktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14), )
if mibBuilder.loadTexts: docsQos3GrpPktClassTable.setStatus('current')
docsQos3GrpPktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3GrpPktClassEntry.setStatus('current')
docsQos3GrpPktClassGrpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpPktClassGrpConfigId.setStatus('current')
docsQos3UpChCounterExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15), )
if mibBuilder.loadTexts: docsQos3UpChCounterExtTable.setStatus('current')
docsQos3UpChCounterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsQos3UpChCounterExtEntry.setStatus('current')
docsQos3UpChCounterExtSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtValids.setStatus('current')
docsQos3UpChCounterExtSgmtDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtDiscards.setStatus('current')
docsQos3ServiceFlowCcfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16), )
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsTable.setStatus('current')
docsQos3ServiceFlowCcfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsEntry.setStatus('current')
docsQos3ServiceFlowCcfStatsSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtValids.setStatus('current')
docsQos3ServiceFlowCcfStatsSgmtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtLost.setStatus('current')
docsQos3CmServiceUsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17), )
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTable.setStatus('current')
docsQos3CmServiceUsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsEntry.setStatus('current')
docsQos3CmServiceUsStatsTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 1), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsImmed.setStatus('current')
docsQos3CmServiceUsStatsTxSlotsDed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 2), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsDed.setStatus('current')
docsQos3CmServiceUsStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 3), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxRetries.setStatus('current')
docsQos3CmServiceUsStatsTxExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxExceededs.setStatus('current')
docsQos3CmServiceUsStatsRqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 5), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqRetries.setStatus('current')
docsQos3CmServiceUsStatsRqExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 6), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqExceededs.setStatus('current')
docsQos3CmServiceUsStatsSgmts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 7), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsSgmts.setStatus('current')
docsQos3CmtsDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18), )
if mibBuilder.loadTexts: docsQos3CmtsDsidTable.setStatus('current')
docsQos3CmtsDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmtsDsidEntry.setStatus('current')
docsQos3CmtsDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmtsDsidDsid.setStatus('current')
docsQos3CmtsDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1), ("multicastReplication", 2), ("bonding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidUsage.setStatus('current')
docsQos3CmtsDsidDsChSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 3), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidDsChSet.setStatus('current')
docsQos3CmtsDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWaitTime.setStatus('current')
docsQos3CmtsDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWarnThrshld.setStatus('current')
docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
docsQos3CmtsDsidCurrentSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidCurrentSeqNum.setStatus('current')
docsQos3CmtsDebugDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19), )
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidTable.setStatus('current')
docsQos3CmtsDebugDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidEntry.setStatus('current')
docsQos3CmtsDebugDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidDsid.setStatus('current')
docsQos3CmtsDebugDsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidRowStatus.setStatus('current')
docsQos3CmtsDebugDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20), )
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsTable.setStatus('current')
docsQos3CmtsDebugDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidDsid"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsIfIndex"))
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsEntry.setStatus('current')
docsQos3CmtsDebugDsidStatsDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsIfIndex.setStatus('current')
docsQos3CmtsDebugDsidStatsDsidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidPackets.setStatus('current')
docsQos3CmtsDebugDsidStatsDsidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidOctets.setStatus('current')
docsQos3CmDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21), )
if mibBuilder.loadTexts: docsQos3CmDsidTable.setStatus('current')
docsQos3CmDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmDsidEntry.setStatus('current')
docsQos3CmDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidDsid.setStatus('current')
docsQos3CmDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidUsage.setStatus('current')
docsQos3CmDsidNumReseqChs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidNumReseqChs.setStatus('current')
docsQos3CmDsidReseqChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 4), ChannelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqChList.setStatus('current')
docsQos3CmDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqWaitTime.setStatus('current')
docsQos3CmDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqWarnThrshld.setStatus('current')
docsQos3CmDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
docsQos3CmDsidOutOfRangeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidOutOfRangeDiscards.setStatus('current')
docsQos3CmDsidNextExpectedSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidNextExpectedSeqNum.setStatus('current')
docsQos3CmDsidCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 10), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidCmInterfaceMask.setStatus('current')
docsQos3CmDsidFwdCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 11), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidFwdCmInterfaceMask.setStatus('current')
docsQos3CmDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22), )
if mibBuilder.loadTexts: docsQos3CmDsidStatsTable.setStatus('current')
docsQos3CmDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmDsidStatsDsid"))
if mibBuilder.loadTexts: docsQos3CmDsidStatsEntry.setStatus('current')
docsQos3CmDsidStatsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidStatsDsid.setStatus('current')
docsQos3CmDsidStatsSeqNumMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsSeqNumMissing.setStatus('current')
docsQos3CmDsidStatsSkewThreshExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsSkewThreshExceeds.setStatus('current')
docsQos3CmDsidStatsOutOfRangePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsOutOfRangePackets.setStatus('current')
docsQos3CmDsidStatsNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsNumPackets.setStatus('current')
docsQos3CmDsidClientTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23), )
if mibBuilder.loadTexts: docsQos3CmDsidClientTable.setStatus('current')
docsQos3CmDsidClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmDsidClientDsid"), (0, "DOCS-QOS3-MIB", "docsQos3CmDsidClientClientMacId"))
if mibBuilder.loadTexts: docsQos3CmDsidClientEntry.setStatus('current')
docsQos3CmDsidClientDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidClientDsid.setStatus('current')
docsQos3CmDsidClientClientMacId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacId.setStatus('current')
docsQos3CmDsidClientClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacAddr.setStatus('current')
docsQos3MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2))
docsQos3MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1))
docsQos3MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2))
docsQos3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1, 1)).setObjects(("DOCS-QOS3-MIB", "docsQos3BaseGroup"), ("DOCS-QOS3-MIB", "docsQos3CmtsGroup"), ("DOCS-QOS3-MIB", "docsQos3CmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3Compliance = docsQos3Compliance.setStatus('current')
docsQos3BaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 1)).setObjects(("DOCS-QOS3-MIB", "docsQos3PktClassDirection"), ("DOCS-QOS3-MIB", "docsQos3PktClassPriority"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosLow"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosHigh"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpProtocol"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpSourceAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpSourceMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpDestAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpDestMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourcePortStart"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourcePortEnd"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestPortStart"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestPortEnd"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestMacAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestMacMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourceMacAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassEnetProtocolType"), ("DOCS-QOS3-MIB", "docsQos3PktClassEnetProtocol"), ("DOCS-QOS3-MIB", "docsQos3PktClassUserPriLow"), ("DOCS-QOS3-MIB", "docsQos3PktClassUserPriHigh"), ("DOCS-QOS3-MIB", "docsQos3PktClassVlanId"), ("DOCS-QOS3-MIB", "docsQos3PktClassState"), ("DOCS-QOS3-MIB", "docsQos3PktClassPkts"), ("DOCS-QOS3-MIB", "docsQos3PktClassBitMap"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpAddrType"), ("DOCS-QOS3-MIB", "docsQos3PktClassFlowLabel"), ("DOCS-QOS3-MIB", "docsQos3PktClassCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetServiceClassName"), ("DOCS-QOS3-MIB", "docsQos3ParamSetPriority"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMinReservedRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQos3ParamSetActiveTimeout"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQos3ParamSetSchedulingType"), ("DOCS-QOS3-MIB", "docsQos3ParamSetNomPollInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTolPollJitter"), ("DOCS-QOS3-MIB", "docsQos3ParamSetUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQos3ParamSetNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQos3ParamSetGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTosAndMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTosOrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxLatency"), ("DOCS-QOS3-MIB", "docsQos3ParamSetRequestPolicyOct"), ("DOCS-QOS3-MIB", "docsQos3ParamSetRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAppId"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetDsResequencing"), ("DOCS-QOS3-MIB", "docsQos3ParamSetBitMap"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowSID"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPrimary"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowParamSetTypeStatus"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowChSetId"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowAttrAssignSuccess"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowDsid"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowOctets"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowTimeCreated"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowTimeActive"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPHSUnknowns"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQos3DSAReqs"), ("DOCS-QOS3-MIB", "docsQos3DSARsps"), ("DOCS-QOS3-MIB", "docsQos3DSAAcks"), ("DOCS-QOS3-MIB", "docsQos3DSCReqs"), ("DOCS-QOS3-MIB", "docsQos3DSCRsps"), ("DOCS-QOS3-MIB", "docsQos3DSCAcks"), ("DOCS-QOS3-MIB", "docsQos3DSDReqs"), ("DOCS-QOS3-MIB", "docsQos3DSDRsps"), ("DOCS-QOS3-MIB", "docsQos3DynamicAdds"), ("DOCS-QOS3-MIB", "docsQos3DynamicAddFails"), ("DOCS-QOS3-MIB", "docsQos3DynamicChanges"), ("DOCS-QOS3-MIB", "docsQos3DynamicChangeFails"), ("DOCS-QOS3-MIB", "docsQos3DynamicDeletes"), ("DOCS-QOS3-MIB", "docsQos3DynamicDeleteFails"), ("DOCS-QOS3-MIB", "docsQos3DCCReqs"), ("DOCS-QOS3-MIB", "docsQos3DCCRsps"), ("DOCS-QOS3-MIB", "docsQos3DCCAcks"), ("DOCS-QOS3-MIB", "docsQos3DCCs"), ("DOCS-QOS3-MIB", "docsQos3DCCFails"), ("DOCS-QOS3-MIB", "docsQos3DCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQos3DCCRspArrives"), ("DOCS-QOS3-MIB", "docsQos3DCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQos3DCCRspArrives"), ("DOCS-QOS3-MIB", "docsQos3DbcReqs"), ("DOCS-QOS3-MIB", "docsQos3DbcRsps"), ("DOCS-QOS3-MIB", "docsQos3DbcAcks"), ("DOCS-QOS3-MIB", "docsQos3DbcSuccesses"), ("DOCS-QOS3-MIB", "docsQos3DbcFails"), ("DOCS-QOS3-MIB", "docsQos3DbcPartial"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterSid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3BaseGroup = docsQos3BaseGroup.setStatus('current')
docsQos3CmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 2)).setObjects(("DOCS-QOS3-MIB", "docsQos3UpstreamFragments"), ("DOCS-QOS3-MIB", "docsQos3UpstreamFragDiscards"), ("DOCS-QOS3-MIB", "docsQos3UpstreamConcatBursts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogIfIndex"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogSFID"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogCmMac"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogOctets"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeDeleted"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeCreated"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeActive"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPrimary"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogServiceClassName"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogControl"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassStatus"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassPriority"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMinReservedRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassNomPollInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTolPollJitter"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxLatency"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassActiveTimeout"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassSchedulingType"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassRequestPolicy"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTosAndMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTosOrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassStorageType"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDSCPOverwrite"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAppId"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDsResequencing"), ("DOCS-QOS3-MIB", "docsQos3CmtsIfIndex"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowIsDef"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowQosConfigId"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowNumSess"), ("DOCS-QOS3-MIB", "docsQos3GrpPktClassGrpConfigId"), ("DOCS-QOS3-MIB", "docsQos3UpChCounterExtSgmtValids"), ("DOCS-QOS3-MIB", "docsQos3UpChCounterExtSgmtDiscards"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowCcfStatsSgmtValids"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowCcfStatsSgmtLost"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidUsage"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidDsChSet"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidCurrentSeqNum"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidRowStatus"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsidPackets"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsidOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3CmtsGroup = docsQos3CmtsGroup.setStatus('current')
docsQos3CmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 3)).setObjects(("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxSlotsImmed"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxSlotsDed"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxRetries"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxExceededs"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsRqRetries"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsRqExceededs"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsSgmts"), ("DOCS-QOS3-MIB", "docsQos3CmDsidUsage"), ("DOCS-QOS3-MIB", "docsQos3CmDsidNumReseqChs"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqChList"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQos3CmDsidOutOfRangeDiscards"), ("DOCS-QOS3-MIB", "docsQos3CmDsidNextExpectedSeqNum"), ("DOCS-QOS3-MIB", "docsQos3CmDsidCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3CmDsidFwdCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsSeqNumMissing"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsSkewThreshExceeds"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsOutOfRangePackets"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsNumPackets"), ("DOCS-QOS3-MIB", "docsQos3CmDsidClientClientMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3CmGroup = docsQos3CmGroup.setStatus('current')
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQos3ParamSetBitMap=docsQos3ParamSetBitMap, docsQos3ServiceClassTolGrantJitter=docsQos3ServiceClassTolGrantJitter, docsQos3ParamSetGrantsPerInterval=docsQos3ParamSetGrantsPerInterval, docsQos3CmServiceUsStatsSgmts=docsQos3CmServiceUsStatsSgmts, docsQos3ServiceClassMinReservedRate=docsQos3ServiceClassMinReservedRate, docsQos3ServiceFlowLogPkts=docsQos3ServiceFlowLogPkts, docsQos3CmtsDebugDsidStatsEntry=docsQos3CmtsDebugDsidStatsEntry, docsQos3ParamSetRequiredAttrMask=docsQos3ParamSetRequiredAttrMask, docsQos3CmtsDebugDsidTable=docsQos3CmtsDebugDsidTable, docsQos3PktClassPkts=docsQos3PktClassPkts, docsQos3ServiceClassMultiplierBytesReq=docsQos3ServiceClassMultiplierBytesReq, docsQos3ServiceFlowSidClusterId=docsQos3ServiceFlowSidClusterId, docsQos3ParamSetNomPollInterval=docsQos3ParamSetNomPollInterval, docsQos3ServiceFlowPolicedDelayPkts=docsQos3ServiceFlowPolicedDelayPkts, docsQos3PktClassDestPortEnd=docsQos3PktClassDestPortEnd, docsQos3PktClassDestMacAddr=docsQos3PktClassDestMacAddr, docsQos3ServiceFlowLogTimeCreated=docsQos3ServiceFlowLogTimeCreated, docsQos3ServiceFlowTable=docsQos3ServiceFlowTable, docsQos3DynamicChangeFails=docsQos3DynamicChangeFails, PYSNMP_MODULE_ID=docsQos3Mib, docsQos3UpstreamStatsTable=docsQos3UpstreamStatsTable, docsQos3DSARsps=docsQos3DSARsps, docsQos3ServiceFlowLogTimeActive=docsQos3ServiceFlowLogTimeActive, docsQos3PktClassSourceMacAddr=docsQos3PktClassSourceMacAddr, docsQos3SID=docsQos3SID, docsQos3ServiceFlowLogIndex=docsQos3ServiceFlowLogIndex, docsQos3ServiceClassUnsolicitGrantSize=docsQos3ServiceClassUnsolicitGrantSize, docsQos3ServiceClassMaxOutstandingBytesPerSidCluster=docsQos3ServiceClassMaxOutstandingBytesPerSidCluster, docsQos3UpstreamFragDiscards=docsQos3UpstreamFragDiscards, docsQos3ServiceFlowCcfStatsSgmtValids=docsQos3ServiceFlowCcfStatsSgmtValids, docsQos3CmDsidStatusHldoffTimerSeqOutOfRng=docsQos3CmDsidStatusHldoffTimerSeqOutOfRng, docsQos3ServiceFlowPolicedDropPkts=docsQos3ServiceFlowPolicedDropPkts, docsQos3PktClassUserPriHigh=docsQos3PktClassUserPriHigh, docsQos3ParamSetMaxLatency=docsQos3ParamSetMaxLatency, docsQos3CmDsidReseqWarnThrshld=docsQos3CmDsidReseqWarnThrshld, docsQos3CmDsidClientClientMacAddr=docsQos3CmDsidClientClientMacAddr, docsQos3ServiceFlowPkts=docsQos3ServiceFlowPkts, docsQos3CmtsCmMac=docsQos3CmtsCmMac, docsQos3ServiceClassAttrAggrRuleMask=docsQos3ServiceClassAttrAggrRuleMask, docsQos3UpChCounterExtTable=docsQos3UpChCounterExtTable, docsQos3ServiceFlowSID=docsQos3ServiceFlowSID, docsQos3PHSMask=docsQos3PHSMask, docsQos3CmServiceUsStatsTxSlotsDed=docsQos3CmServiceUsStatsTxSlotsDed, docsQos3CmtsDsidDsid=docsQos3CmtsDsidDsid, docsQos3ParamSetAttrAggrRuleMask=docsQos3ParamSetAttrAggrRuleMask, docsQos3PktClassIpDestAddr=docsQos3PktClassIpDestAddr, docsQos3PktClassIpDestMask=docsQos3PktClassIpDestMask, docsQos3ParamSetTosOrMask=docsQos3ParamSetTosOrMask, docsQos3CmDsidClientEntry=docsQos3CmDsidClientEntry, docsQos3CmDsidStatsEntry=docsQos3CmDsidStatsEntry, docsQos3ServiceFlowLogTable=docsQos3ServiceFlowLogTable, docsQos3ServiceClassTosOrMask=docsQos3ServiceClassTosOrMask, docsQos3ParamSetRequestPolicyOct=docsQos3ParamSetRequestPolicyOct, docsQos3ParamSetDsResequencing=docsQos3ParamSetDsResequencing, docsQos3DCCAcks=docsQos3DCCAcks, docsQos3ServiceClassStorageType=docsQos3ServiceClassStorageType, docsQos3CmDsidCmInterfaceMask=docsQos3CmDsidCmInterfaceMask, docsQos3PHSVerify=docsQos3PHSVerify, docsQos3CmtsDebugDsidStatsDsIfIndex=docsQos3CmtsDebugDsidStatsDsIfIndex, docsQos3ServiceClassTosAndMask=docsQos3ServiceClassTosAndMask, docsQos3CmDsidEntry=docsQos3CmDsidEntry, docsQos3GrpServiceFlowIsDef=docsQos3GrpServiceFlowIsDef, docsQos3CmtsDsidUsage=docsQos3CmtsDsidUsage, docsQos3DSCAcks=docsQos3DSCAcks, docsQos3PktClassSourcePortEnd=docsQos3PktClassSourcePortEnd, docsQos3PHSField=docsQos3PHSField, docsQos3CmServiceUsStatsEntry=docsQos3CmServiceUsStatsEntry, docsQos3ServiceFlowCcfStatsSgmtLost=docsQos3ServiceFlowCcfStatsSgmtLost, docsQos3CmtsDebugDsidStatsDsidPackets=docsQos3CmtsDebugDsidStatsDsidPackets, docsQos3DynamicServiceStatsTable=docsQos3DynamicServiceStatsTable, docsQos3CmDsidClientClientMacId=docsQos3CmDsidClientClientMacId, docsQos3PktClassIpAddrType=docsQos3PktClassIpAddrType, docsQos3GrpServiceFlowNumSess=docsQos3GrpServiceFlowNumSess, docsQos3CmDsidOutOfRangeDiscards=docsQos3CmDsidOutOfRangeDiscards, docsQos3PktClassEnetProtocol=docsQos3PktClassEnetProtocol, docsQos3PktClassCmInterfaceMask=docsQos3PktClassCmInterfaceMask, docsQos3ParamSetMultiplierContentionReqWindow=docsQos3ParamSetMultiplierContentionReqWindow, docsQos3ServiceClassMaxTrafficRate=docsQos3ServiceClassMaxTrafficRate, docsQos3CmtsDsidReseqWarnThrshld=docsQos3CmtsDsidReseqWarnThrshld, docsQos3PktClassSourcePortStart=docsQos3PktClassSourcePortStart, docsQos3DynamicChanges=docsQos3DynamicChanges, docsQos3ServiceClassRequiredAttrMask=docsQos3ServiceClassRequiredAttrMask, docsQos3ServiceClassMaxConcatBurst=docsQos3ServiceClassMaxConcatBurst, docsQos3ServiceClassAppId=docsQos3ServiceClassAppId, docsQos3ServiceClassMaxTrafficBurst=docsQos3ServiceClassMaxTrafficBurst, docsQos3ServiceClassMultiplierContentionReqWindow=docsQos3ServiceClassMultiplierContentionReqWindow, docsQos3DCCRspArrives=docsQos3DCCRspArrives, docsQos3PktClassUserPriLow=docsQos3PktClassUserPriLow, docsQos3CmtsDsidEntry=docsQos3CmtsDsidEntry, docsQos3ServiceClassName=docsQos3ServiceClassName, docsQos3ServiceClassNomPollInterval=docsQos3ServiceClassNomPollInterval, docsQos3DCCs=docsQos3DCCs, docsQos3DSDRsps=docsQos3DSDRsps, docsQos3CmDsidStatsTable=docsQos3CmDsidStatsTable, docsQos3DbcSuccesses=docsQos3DbcSuccesses, docsQos3ParamSetNomGrantInterval=docsQos3ParamSetNomGrantInterval, docsQos3ParamSetPriority=docsQos3ParamSetPriority, docsQos3ServiceFlowSidClusterEntry=docsQos3ServiceFlowSidClusterEntry, docsQos3ServiceFlowLogEntry=docsQos3ServiceFlowLogEntry, docsQos3ServiceClassDirection=docsQos3ServiceClassDirection, docsQos3CmtsDebugDsidStatsTable=docsQos3CmtsDebugDsidStatsTable, docsQos3DSCReqs=docsQos3DSCReqs, docsQos3ServiceClassRequestPolicy=docsQos3ServiceClassRequestPolicy, docsQos3ServiceClassForbiddenAttrMask=docsQos3ServiceClassForbiddenAttrMask, docsQos3ParamSetAdmittedTimeout=docsQos3ParamSetAdmittedTimeout, docsQos3CmtsIfIndex=docsQos3CmtsIfIndex, docsQos3ParamSetMaxOutstandingBytesPerSidCluster=docsQos3ParamSetMaxOutstandingBytesPerSidCluster, docsQos3ServiceClassMaxTotBytesReqPerSidCluster=docsQos3ServiceClassMaxTotBytesReqPerSidCluster, docsQos3PHSIndex=docsQos3PHSIndex, docsQos3CmServiceUsStatsTxRetries=docsQos3CmServiceUsStatsTxRetries, docsQos3PktClassIpTosHigh=docsQos3PktClassIpTosHigh, docsQos3MibConformance=docsQos3MibConformance, docsQos3PktClassPriority=docsQos3PktClassPriority, docsQos3IfDirection=docsQos3IfDirection, docsQos3CmtsDsidDsChSet=docsQos3CmtsDsidDsChSet, docsQos3ServiceFlowPrimary=docsQos3ServiceFlowPrimary, docsQos3ParamSetMaxTrafficBurst=docsQos3ParamSetMaxTrafficBurst, docsQos3ParamSetAppId=docsQos3ParamSetAppId, docsQos3DSCRsps=docsQos3DSCRsps, docsQos3ServiceFlowLogSFID=docsQos3ServiceFlowLogSFID, docsQos3PHSTable=docsQos3PHSTable, docsQos3CmDsidReseqWaitTime=docsQos3CmDsidReseqWaitTime, docsQos3ServiceFlowCcfStatsEntry=docsQos3ServiceFlowCcfStatsEntry, docsQos3UpstreamConcatBursts=docsQos3UpstreamConcatBursts, docsQos3PktClassTable=docsQos3PktClassTable, docsQos3PktClassIpSourceMask=docsQos3PktClassIpSourceMask, docsQos3PktClassState=docsQos3PktClassState, docsQos3DynamicAddFails=docsQos3DynamicAddFails, docsQos3CmServiceUsStatsRqExceededs=docsQos3CmServiceUsStatsRqExceededs, docsQos3CmDsidStatsDsid=docsQos3CmDsidStatsDsid, docsQos3ServiceClassMaxLatency=docsQos3ServiceClassMaxLatency, docsQos3PHSSize=docsQos3PHSSize, docsQos3ServiceClassStatus=docsQos3ServiceClassStatus, docsQos3CmtsMacToSrvFlowTable=docsQos3CmtsMacToSrvFlowTable, docsQos3ParamSetTolGrantJitter=docsQos3ParamSetTolGrantJitter, docsQos3ServiceFlowSidClusterTable=docsQos3ServiceFlowSidClusterTable, docsQos3PktClassIpSourceAddr=docsQos3PktClassIpSourceAddr, docsQos3CmtsMacToSrvFlowEntry=docsQos3CmtsMacToSrvFlowEntry, docsQos3DbcAcks=docsQos3DbcAcks, docsQos3ServiceClassDsResequencing=docsQos3ServiceClassDsResequencing, docsQos3ParamSetMaxConcatBurst=docsQos3ParamSetMaxConcatBurst, docsQos3DynamicDeleteFails=docsQos3DynamicDeleteFails, docsQos3ServiceFlowParamSetTypeStatus=docsQos3ServiceFlowParamSetTypeStatus, docsQos3DbcRsps=docsQos3DbcRsps, docsQos3CmDsidStatsNumPackets=docsQos3CmDsidStatsNumPackets, docsQos3Compliance=docsQos3Compliance, docsQos3ServiceClassAdmittedTimeout=docsQos3ServiceClassAdmittedTimeout, docsQos3ServiceFlowTimeCreated=docsQos3ServiceFlowTimeCreated, docsQos3ServiceFlowLogPolicedDropPkts=docsQos3ServiceFlowLogPolicedDropPkts, docsQos3CmDsidTable=docsQos3CmDsidTable, docsQos3ServiceClassTable=docsQos3ServiceClassTable, docsQos3ServiceFlowLogDirection=docsQos3ServiceFlowLogDirection, docsQos3ServiceClassActiveTimeout=docsQos3ServiceClassActiveTimeout, docsQos3CmDsidClientDsid=docsQos3CmDsidClientDsid, docsQos3PktClassDestPortStart=docsQos3PktClassDestPortStart, docsQos3ServiceClassMaxReqPerSidCluster=docsQos3ServiceClassMaxReqPerSidCluster, docsQos3CmDsidUsage=docsQos3CmDsidUsage, docsQos3PktClassDirection=docsQos3PktClassDirection, docsQos3ServiceFlowDirection=docsQos3ServiceFlowDirection, docsQos3ParamSetTosAndMask=docsQos3ParamSetTosAndMask, docsQos3ServiceFlowAttrAssignSuccess=docsQos3ServiceFlowAttrAssignSuccess, docsQos3ServiceClassEntry=docsQos3ServiceClassEntry, docsQos3ServiceClassPriority=docsQos3ServiceClassPriority, docsQos3ServiceClassTolPollJitter=docsQos3ServiceClassTolPollJitter, docsQos3CmDsidStatsOutOfRangePackets=docsQos3CmDsidStatsOutOfRangePackets, docsQos3ParamSetMaxTimeInSidCluster=docsQos3ParamSetMaxTimeInSidCluster, docsQos3UpstreamStatsEntry=docsQos3UpstreamStatsEntry, docsQos3DbcReqs=docsQos3DbcReqs, docsQos3UpChCounterExtSgmtValids=docsQos3UpChCounterExtSgmtValids, docsQos3PktClassId=docsQos3PktClassId, docsQos3PktClassBitMap=docsQos3PktClassBitMap, docsQos3ServiceFlowLogControl=docsQos3ServiceFlowLogControl, docsQos3DCCReqs=docsQos3DCCReqs, docsQos3ServiceClassGrantsPerInterval=docsQos3ServiceClassGrantsPerInterval, docsQos3CmDsidFwdCmInterfaceMask=docsQos3CmDsidFwdCmInterfaceMask, docsQos3CmtsDsidReseqWaitTime=docsQos3CmtsDsidReseqWaitTime, docsQos3PHSEntry=docsQos3PHSEntry, docsQos3ParamSetActiveTimeout=docsQos3ParamSetActiveTimeout, docsQos3DynamicAdds=docsQos3DynamicAdds, docsQos3ServiceClassSchedulingType=docsQos3ServiceClassSchedulingType, docsQos3CmtsDebugDsidRowStatus=docsQos3CmtsDebugDsidRowStatus, docsQos3CmDsidNextExpectedSeqNum=docsQos3CmDsidNextExpectedSeqNum, docsQos3DSDReqs=docsQos3DSDReqs, docsQos3PktClassEnetProtocolType=docsQos3PktClassEnetProtocolType, docsQos3ServiceFlowLogServiceClassName=docsQos3ServiceFlowLogServiceClassName, docsQos3ServiceFlowLogPrimary=docsQos3ServiceFlowLogPrimary, docsQos3ServiceFlowChSetId=docsQos3ServiceFlowChSetId, docsQos3DCCFails=docsQos3DCCFails, docsQos3ServiceFlowLogOctets=docsQos3ServiceFlowLogOctets, docsQos3ParamSetUnsolicitGrantSize=docsQos3ParamSetUnsolicitGrantSize, docsQos3MibCompliances=docsQos3MibCompliances, docsQos3CmGroup=docsQos3CmGroup, docsQos3PktClassVlanId=docsQos3PktClassVlanId, docsQos3ParamSetTolPollJitter=docsQos3ParamSetTolPollJitter, docsQos3ServiceFlowLogCmMac=docsQos3ServiceFlowLogCmMac, docsQos3ServiceFlowLogTimeDeleted=docsQos3ServiceFlowLogTimeDeleted, docsQos3CmDsidReseqChList=docsQos3CmDsidReseqChList, docsQos3ParamSetTable=docsQos3ParamSetTable, docsQos3ServiceFlowStatsEntry=docsQos3ServiceFlowStatsEntry, docsQos3ServiceClassPeakTrafficRate=docsQos3ServiceClassPeakTrafficRate, docsQos3PktClassEntry=docsQos3PktClassEntry, IfDirection=IfDirection, docsQos3GrpServiceFlowTable=docsQos3GrpServiceFlowTable, docsQos3ParamSetPeakTrafficRate=docsQos3ParamSetPeakTrafficRate, docsQos3BaseGroup=docsQos3BaseGroup, docsQos3ServiceClassMaxTimeInSidCluster=docsQos3ServiceClassMaxTimeInSidCluster, docsQos3PktClassFlowLabel=docsQos3PktClassFlowLabel, docsQos3CmtsServiceFlowId=docsQos3CmtsServiceFlowId, docsQos3ParamSetServiceClassName=docsQos3ParamSetServiceClassName, docsQos3ParamSetMinReservedRate=docsQos3ParamSetMinReservedRate, docsQos3GrpServiceFlowQosConfigId=docsQos3GrpServiceFlowQosConfigId, docsQos3CmDsidStatsSeqNumMissing=docsQos3CmDsidStatsSeqNumMissing, docsQos3CmtsDsidTable=docsQos3CmtsDsidTable, docsQos3ServiceFlowSidClusterUcid=docsQos3ServiceFlowSidClusterUcid, docsQos3CmDsidDsid=docsQos3CmDsidDsid, docsQos3UpstreamFragments=docsQos3UpstreamFragments, docsQos3CmDsidClientTable=docsQos3CmDsidClientTable, docsQos3DbcFails=docsQos3DbcFails, docsQos3GrpPktClassGrpConfigId=docsQos3GrpPktClassGrpConfigId, docsQos3PktClassIpTosMask=docsQos3PktClassIpTosMask, docsQos3GrpPktClassTable=docsQos3GrpPktClassTable, docsQos3CmtsDebugDsidEntry=docsQos3CmtsDebugDsidEntry, docsQos3PktClassIpTosLow=docsQos3PktClassIpTosLow, docsQos3PktClassDestMacMask=docsQos3PktClassDestMacMask, docsQos3ParamSetSchedulingType=docsQos3ParamSetSchedulingType, docsQos3ParamSetType=docsQos3ParamSetType, docsQos3ServiceFlowId=docsQos3ServiceFlowId, docsQos3CmtsDebugDsidDsid=docsQos3CmtsDebugDsidDsid, docsQos3ServiceClassMinReservedPkt=docsQos3ServiceClassMinReservedPkt, docsQos3CmtsDsidCurrentSeqNum=docsQos3CmtsDsidCurrentSeqNum, docsQos3DCCRspDeparts=docsQos3DCCRspDeparts, docsQos3UpChCounterExtSgmtDiscards=docsQos3UpChCounterExtSgmtDiscards, docsQos3ServiceFlowLogPolicedDelayPkts=docsQos3ServiceFlowLogPolicedDelayPkts, SchedulingType=SchedulingType, docsQos3DSAReqs=docsQos3DSAReqs, docsQos3DSAAcks=docsQos3DSAAcks, docsQos3ServiceFlowSidClusterSid=docsQos3ServiceFlowSidClusterSid, docsQos3CmtsDebugDsidStatsDsidOctets=docsQos3CmtsDebugDsidStatsDsidOctets, docsQos3ServiceFlowDsid=docsQos3ServiceFlowDsid, docsQos3CmServiceUsStatsTxExceededs=docsQos3CmServiceUsStatsTxExceededs, docsQos3ParamSetMaxTrafficRate=docsQos3ParamSetMaxTrafficRate, docsQos3MibGroups=docsQos3MibGroups, docsQos3DbcPartial=docsQos3DbcPartial, docsQos3UpChCounterExtEntry=docsQos3UpChCounterExtEntry, docsQos3ServiceFlowStatsTable=docsQos3ServiceFlowStatsTable, docsQos3DynamicServiceStatsEntry=docsQos3DynamicServiceStatsEntry, docsQos3ParamSetMaxReqPerSidCluster=docsQos3ParamSetMaxReqPerSidCluster, docsQos3MibObjects=docsQos3MibObjects, docsQos3DCCRsps=docsQos3DCCRsps, docsQos3ServiceFlowTimeActive=docsQos3ServiceFlowTimeActive, docsQos3GrpServiceFlowEntry=docsQos3GrpServiceFlowEntry, docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng=docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng, docsQos3CmDsidNumReseqChs=docsQos3CmDsidNumReseqChs, docsQos3ServiceFlowEntry=docsQos3ServiceFlowEntry)
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQos3CmtsGroup=docsQos3CmtsGroup, docsQos3ParamSetMinReservedPkt=docsQos3ParamSetMinReservedPkt, docsQos3CmServiceUsStatsTable=docsQos3CmServiceUsStatsTable, DOCSQOS3BitRate=DOCSQOS3BitRate, docsQos3CmServiceUsStatsRqRetries=docsQos3CmServiceUsStatsRqRetries, docsQos3Mib=docsQos3Mib, docsQos3PktClassIpProtocol=docsQos3PktClassIpProtocol, docsQos3DynamicDeletes=docsQos3DynamicDeletes, docsQos3ServiceClassDSCPOverwrite=docsQos3ServiceClassDSCPOverwrite, docsQos3ParamSetEntry=docsQos3ParamSetEntry, docsQos3ServiceFlowOctets=docsQos3ServiceFlowOctets, docsQos3ParamSetMaxTotBytesReqPerSidCluster=docsQos3ParamSetMaxTotBytesReqPerSidCluster, docsQos3ParamSetServiceFlowId=docsQos3ParamSetServiceFlowId, docsQos3ParamSetMultiplierBytesReq=docsQos3ParamSetMultiplierBytesReq, docsQos3GrpPktClassEntry=docsQos3GrpPktClassEntry, docsQos3ServiceFlowPHSUnknowns=docsQos3ServiceFlowPHSUnknowns, docsQos3ServiceFlowCcfStatsTable=docsQos3ServiceFlowCcfStatsTable, docsQos3ParamSetForbiddenAttrMask=docsQos3ParamSetForbiddenAttrMask, docsQos3ServiceFlowLogIfIndex=docsQos3ServiceFlowLogIfIndex, docsQos3CmServiceUsStatsTxSlotsImmed=docsQos3CmServiceUsStatsTxSlotsImmed, docsQos3ServiceClassNomGrantInterval=docsQos3ServiceClassNomGrantInterval, docsQos3CmDsidStatsSkewThreshExceeds=docsQos3CmDsidStatsSkewThreshExceeds)
