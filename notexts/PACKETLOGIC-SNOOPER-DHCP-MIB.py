#
# PySNMP MIB module PACKETLOGIC-SNOOPER-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/procera/PACKETLOGIC-SNOOPER-DHCP-MIB
# Produced by pysmi-1.1.8 at Mon Jan 17 19:29:35 2022
# On host fv-az36-128 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
snoopers, = mibBuilder.importSymbols("PACKETLOGIC-MIB", "snoopers")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Bits, iso, Counter64, NotificationType, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Bits", "iso", "Counter64", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
dhcp = ModuleIdentity((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1))
dhcp.setRevisions(('2019-09-12 15:00',))
if mibBuilder.loadTexts: dhcp.setLastUpdated('201909121500Z')
if mibBuilder.loadTexts: dhcp.setOrganization('Procera Networks, Inc.')
dhcpTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1), )
if mibBuilder.loadTexts: dhcpTable.setStatus('current')
dhcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpEntryIndex"))
if mibBuilder.loadTexts: dhcpEntry.setStatus('current')
dhcpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 999), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dhcpEntryIndex.setStatus('current')
dhcpRequestsInQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1))
dhcpRequestsInQueueVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueVal.setStatus('current')
dhcpRequestsInQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueMax.setStatus('current')
dhcpRequestsInQueueLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelTable.setStatus('current')
dhcpRequestsInQueueLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpRequestsInQueueLevelName"))
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelEntry.setStatus('current')
dhcpRequestsInQueueLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelName.setStatus('current')
dhcpRequestsInQueueLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelVal.setStatus('current')
dhcpRequestsInQueueLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 1, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequestsInQueueLevelMax.setStatus('current')
dhcpDynAddFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2))
dhcpDynAddFailuresVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresVal.setStatus('current')
dhcpDynAddFailuresMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresMom.setStatus('current')
dhcpDynAddFailuresMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresMax.setStatus('current')
dhcpDynAddFailuresLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelTable.setStatus('current')
dhcpDynAddFailuresLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpDynAddFailuresLevelName"))
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelEntry.setStatus('current')
dhcpDynAddFailuresLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelName.setStatus('current')
dhcpDynAddFailuresLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelVal.setStatus('current')
dhcpDynAddFailuresLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMom.setStatus('current')
dhcpDynAddFailuresLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 2, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDynAddFailuresLevelMax.setStatus('current')
dhcpPLDBReconnects = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3))
dhcpPLDBReconnectsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsVal.setStatus('current')
dhcpPLDBReconnectsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsMax.setStatus('current')
dhcpPLDBReconnectsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelTable.setStatus('current')
dhcpPLDBReconnectsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBReconnectsLevelName"))
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelEntry.setStatus('current')
dhcpPLDBReconnectsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelName.setStatus('current')
dhcpPLDBReconnectsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelVal.setStatus('current')
dhcpPLDBReconnectsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 3, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBReconnectsLevelMax.setStatus('current')
dhcpPLDBUptime = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4))
dhcpPLDBUptimeVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBUptimeVal.setStatus('current')
dhcpPLDBUptimeLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelTable.setStatus('current')
dhcpPLDBUptimeLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBUptimeLevelName"))
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelEntry.setStatus('current')
dhcpPLDBUptimeLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelName.setStatus('current')
dhcpPLDBUptimeLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 4, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBUptimeLevelVal.setStatus('current')
dhcpPLDBCommits = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5))
dhcpPLDBCommitsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsVal.setStatus('current')
dhcpPLDBCommitsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsMom.setStatus('current')
dhcpPLDBCommitsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsMax.setStatus('current')
dhcpPLDBCommitsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelTable.setStatus('current')
dhcpPLDBCommitsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDBCommitsLevelName"))
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelEntry.setStatus('current')
dhcpPLDBCommitsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelName.setStatus('current')
dhcpPLDBCommitsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelVal.setStatus('current')
dhcpPLDBCommitsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMom.setStatus('current')
dhcpPLDBCommitsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 5, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDBCommitsLevelMax.setStatus('current')
dhcpPLDReconnects = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6))
dhcpPLDReconnectsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsVal.setStatus('current')
dhcpPLDReconnectsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsMax.setStatus('current')
dhcpPLDReconnectsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4), )
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelTable.setStatus('current')
dhcpPLDReconnectsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDReconnectsLevelName"))
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelEntry.setStatus('current')
dhcpPLDReconnectsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelName.setStatus('current')
dhcpPLDReconnectsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelVal.setStatus('current')
dhcpPLDReconnectsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 6, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDReconnectsLevelMax.setStatus('current')
dhcpPLDUptime = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7))
dhcpPLDUptimeVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDUptimeVal.setStatus('current')
dhcpPLDUptimeLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: dhcpPLDUptimeLevelTable.setStatus('current')
dhcpPLDUptimeLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDUptimeLevelName"))
if mibBuilder.loadTexts: dhcpPLDUptimeLevelEntry.setStatus('current')
dhcpPLDUptimeLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDUptimeLevelName.setStatus('current')
dhcpPLDUptimeLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 7, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDUptimeLevelVal.setStatus('current')
dhcpPLDOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8))
dhcpPLDOperationsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsVal.setStatus('current')
dhcpPLDOperationsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsMom.setStatus('current')
dhcpPLDOperationsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsMax.setStatus('current')
dhcpPLDOperationsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4), )
if mibBuilder.loadTexts: dhcpPLDOperationsLevelTable.setStatus('current')
dhcpPLDOperationsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPLDOperationsLevelName"))
if mibBuilder.loadTexts: dhcpPLDOperationsLevelEntry.setStatus('current')
dhcpPLDOperationsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPLDOperationsLevelName.setStatus('current')
dhcpPLDOperationsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelVal.setStatus('current')
dhcpPLDOperationsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMom.setStatus('current')
dhcpPLDOperationsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 8, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPLDOperationsLevelMax.setStatus('current')
dhcpPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9))
dhcpPacketsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsVal.setStatus('current')
dhcpPacketsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsMom.setStatus('current')
dhcpPacketsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsMax.setStatus('current')
dhcpPacketsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4), )
if mibBuilder.loadTexts: dhcpPacketsLevelTable.setStatus('current')
dhcpPacketsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsLevelName"))
if mibBuilder.loadTexts: dhcpPacketsLevelEntry.setStatus('current')
dhcpPacketsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsLevelName.setStatus('current')
dhcpPacketsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelVal.setStatus('current')
dhcpPacketsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelMom.setStatus('current')
dhcpPacketsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 9, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsLevelMax.setStatus('current')
dhcpUnparsablePackets = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10))
dhcpUnparsablePacketsVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsVal.setStatus('current')
dhcpUnparsablePacketsMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsMom.setStatus('current')
dhcpUnparsablePacketsMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsMax.setStatus('current')
dhcpUnparsablePacketsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4), )
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelTable.setStatus('current')
dhcpUnparsablePacketsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpUnparsablePacketsLevelName"))
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelEntry.setStatus('current')
dhcpUnparsablePacketsLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelName.setStatus('current')
dhcpUnparsablePacketsLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelVal.setStatus('current')
dhcpUnparsablePacketsLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMom.setStatus('current')
dhcpUnparsablePacketsLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 10, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnparsablePacketsLevelMax.setStatus('current')
dhcpPacketsReq = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11))
dhcpPacketsReqVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqVal.setStatus('current')
dhcpPacketsReqMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqMom.setStatus('current')
dhcpPacketsReqMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqMax.setStatus('current')
dhcpPacketsReqLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4), )
if mibBuilder.loadTexts: dhcpPacketsReqLevelTable.setStatus('current')
dhcpPacketsReqLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsReqLevelName"))
if mibBuilder.loadTexts: dhcpPacketsReqLevelEntry.setStatus('current')
dhcpPacketsReqLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsReqLevelName.setStatus('current')
dhcpPacketsReqLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelVal.setStatus('current')
dhcpPacketsReqLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelMom.setStatus('current')
dhcpPacketsReqLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 11, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsReqLevelMax.setStatus('current')
dhcpPacketsAck = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12))
dhcpPacketsAckVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckVal.setStatus('current')
dhcpPacketsAckMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckMom.setStatus('current')
dhcpPacketsAckMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckMax.setStatus('current')
dhcpPacketsAckLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4), )
if mibBuilder.loadTexts: dhcpPacketsAckLevelTable.setStatus('current')
dhcpPacketsAckLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsAckLevelName"))
if mibBuilder.loadTexts: dhcpPacketsAckLevelEntry.setStatus('current')
dhcpPacketsAckLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsAckLevelName.setStatus('current')
dhcpPacketsAckLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelVal.setStatus('current')
dhcpPacketsAckLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelMom.setStatus('current')
dhcpPacketsAckLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 12, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsAckLevelMax.setStatus('current')
dhcpPacketsIgnored = MibIdentifier((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13))
dhcpPacketsIgnoredVal = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredVal.setStatus('current')
dhcpPacketsIgnoredMom = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredMom.setStatus('current')
dhcpPacketsIgnoredMax = MibScalar((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredMax.setStatus('current')
dhcpPacketsIgnoredLevelTable = MibTable((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4), )
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelTable.setStatus('current')
dhcpPacketsIgnoredLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1), ).setIndexNames((0, "PACKETLOGIC-SNOOPER-DHCP-MIB", "dhcpPacketsIgnoredLevelName"))
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelEntry.setStatus('current')
dhcpPacketsIgnoredLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelName.setStatus('current')
dhcpPacketsIgnoredLevelVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelVal.setStatus('current')
dhcpPacketsIgnoredLevelMom = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMom.setStatus('current')
dhcpPacketsIgnoredLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 15397, 2, 10, 1, 1, 1, 13, 4, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPacketsIgnoredLevelMax.setStatus('current')
mibBuilder.exportSymbols("PACKETLOGIC-SNOOPER-DHCP-MIB", dhcpPacketsReqLevelMax=dhcpPacketsReqLevelMax, dhcp=dhcp, dhcpPacketsIgnoredMax=dhcpPacketsIgnoredMax, dhcpPLDReconnectsMax=dhcpPLDReconnectsMax, dhcpPLDBCommitsMom=dhcpPLDBCommitsMom, dhcpPLDBCommitsLevelMom=dhcpPLDBCommitsLevelMom, dhcpPLDUptimeLevelEntry=dhcpPLDUptimeLevelEntry, dhcpRequestsInQueueMax=dhcpRequestsInQueueMax, dhcpRequestsInQueueLevelName=dhcpRequestsInQueueLevelName, dhcpPLDOperationsLevelEntry=dhcpPLDOperationsLevelEntry, dhcpPLDOperationsMom=dhcpPLDOperationsMom, dhcpPacketsAckLevelVal=dhcpPacketsAckLevelVal, dhcpTable=dhcpTable, dhcpPLDBCommitsMax=dhcpPLDBCommitsMax, dhcpPLDBReconnects=dhcpPLDBReconnects, dhcpEntry=dhcpEntry, dhcpRequestsInQueue=dhcpRequestsInQueue, dhcpPLDUptimeLevelTable=dhcpPLDUptimeLevelTable, dhcpPLDOperationsLevelMax=dhcpPLDOperationsLevelMax, dhcpPLDBReconnectsLevelVal=dhcpPLDBReconnectsLevelVal, dhcpDynAddFailuresLevelMom=dhcpDynAddFailuresLevelMom, dhcpPLDBUptimeVal=dhcpPLDBUptimeVal, dhcpUnparsablePacketsLevelMax=dhcpUnparsablePacketsLevelMax, dhcpPacketsReqLevelEntry=dhcpPacketsReqLevelEntry, dhcpPacketsMom=dhcpPacketsMom, dhcpPLDReconnectsVal=dhcpPLDReconnectsVal, dhcpRequestsInQueueVal=dhcpRequestsInQueueVal, dhcpPacketsReqLevelVal=dhcpPacketsReqLevelVal, dhcpUnparsablePacketsMax=dhcpUnparsablePacketsMax, dhcpPacketsReqLevelMom=dhcpPacketsReqLevelMom, dhcpPLDBReconnectsMax=dhcpPLDBReconnectsMax, dhcpUnparsablePacketsLevelTable=dhcpUnparsablePacketsLevelTable, dhcpPacketsIgnored=dhcpPacketsIgnored, dhcpUnparsablePacketsMom=dhcpUnparsablePacketsMom, dhcpPacketsLevelMom=dhcpPacketsLevelMom, dhcpPLDBReconnectsVal=dhcpPLDBReconnectsVal, dhcpDynAddFailuresLevelName=dhcpDynAddFailuresLevelName, dhcpUnparsablePacketsLevelMom=dhcpUnparsablePacketsLevelMom, dhcpPacketsLevelMax=dhcpPacketsLevelMax, dhcpPacketsReqLevelTable=dhcpPacketsReqLevelTable, dhcpDynAddFailuresLevelTable=dhcpDynAddFailuresLevelTable, dhcpPacketsIgnoredLevelMom=dhcpPacketsIgnoredLevelMom, dhcpPacketsAckVal=dhcpPacketsAckVal, dhcpPLDBUptime=dhcpPLDBUptime, dhcpPLDBCommitsLevelMax=dhcpPLDBCommitsLevelMax, dhcpDynAddFailuresVal=dhcpDynAddFailuresVal, dhcpPacketsIgnoredVal=dhcpPacketsIgnoredVal, dhcpPacketsLevelTable=dhcpPacketsLevelTable, dhcpPacketsReqMax=dhcpPacketsReqMax, dhcpPacketsLevelVal=dhcpPacketsLevelVal, dhcpPLDUptimeLevelName=dhcpPLDUptimeLevelName, dhcpPackets=dhcpPackets, dhcpPLDBCommits=dhcpPLDBCommits, dhcpPLDBUptimeLevelVal=dhcpPLDBUptimeLevelVal, dhcpPacketsReqVal=dhcpPacketsReqVal, dhcpEntryIndex=dhcpEntryIndex, dhcpPLDOperationsLevelVal=dhcpPLDOperationsLevelVal, PYSNMP_MODULE_ID=dhcp, dhcpPLDUptime=dhcpPLDUptime, dhcpRequestsInQueueLevelEntry=dhcpRequestsInQueueLevelEntry, dhcpPacketsIgnoredLevelVal=dhcpPacketsIgnoredLevelVal, dhcpPLDBUptimeLevelName=dhcpPLDBUptimeLevelName, dhcpPLDBReconnectsLevelTable=dhcpPLDBReconnectsLevelTable, dhcpPacketsReqMom=dhcpPacketsReqMom, dhcpPacketsIgnoredLevelName=dhcpPacketsIgnoredLevelName, dhcpUnparsablePacketsLevelEntry=dhcpUnparsablePacketsLevelEntry, dhcpPLDOperationsLevelName=dhcpPLDOperationsLevelName, dhcpDynAddFailuresMax=dhcpDynAddFailuresMax, dhcpPacketsMax=dhcpPacketsMax, dhcpPacketsAckMax=dhcpPacketsAckMax, dhcpPacketsAckLevelTable=dhcpPacketsAckLevelTable, dhcpPacketsAckLevelName=dhcpPacketsAckLevelName, dhcpDynAddFailures=dhcpDynAddFailures, dhcpPacketsAckLevelEntry=dhcpPacketsAckLevelEntry, dhcpRequestsInQueueLevelTable=dhcpRequestsInQueueLevelTable, dhcpPLDBCommitsLevelTable=dhcpPLDBCommitsLevelTable, dhcpPLDBReconnectsLevelMax=dhcpPLDBReconnectsLevelMax, dhcpUnparsablePacketsLevelName=dhcpUnparsablePacketsLevelName, dhcpPLDReconnectsLevelMax=dhcpPLDReconnectsLevelMax, dhcpRequestsInQueueLevelMax=dhcpRequestsInQueueLevelMax, dhcpPacketsAck=dhcpPacketsAck, dhcpPacketsAckMom=dhcpPacketsAckMom, dhcpPacketsVal=dhcpPacketsVal, dhcpPLDBCommitsLevelName=dhcpPLDBCommitsLevelName, dhcpDynAddFailuresLevelMax=dhcpDynAddFailuresLevelMax, dhcpPacketsLevelName=dhcpPacketsLevelName, dhcpUnparsablePacketsVal=dhcpUnparsablePacketsVal, dhcpPLDReconnectsLevelVal=dhcpPLDReconnectsLevelVal, dhcpPacketsIgnoredMom=dhcpPacketsIgnoredMom, dhcpPLDUptimeLevelVal=dhcpPLDUptimeLevelVal, dhcpPacketsIgnoredLevelMax=dhcpPacketsIgnoredLevelMax, dhcpPLDBUptimeLevelEntry=dhcpPLDBUptimeLevelEntry, dhcpPLDBCommitsLevelEntry=dhcpPLDBCommitsLevelEntry, dhcpPacketsLevelEntry=dhcpPacketsLevelEntry, dhcpPLDBCommitsVal=dhcpPLDBCommitsVal, dhcpUnparsablePacketsLevelVal=dhcpUnparsablePacketsLevelVal, dhcpDynAddFailuresLevelVal=dhcpDynAddFailuresLevelVal, dhcpPacketsReq=dhcpPacketsReq, dhcpPLDOperations=dhcpPLDOperations, dhcpPLDReconnectsLevelTable=dhcpPLDReconnectsLevelTable, dhcpDynAddFailuresMom=dhcpDynAddFailuresMom, dhcpPacketsReqLevelName=dhcpPacketsReqLevelName, dhcpPacketsAckLevelMom=dhcpPacketsAckLevelMom, dhcpPacketsIgnoredLevelTable=dhcpPacketsIgnoredLevelTable, dhcpPLDBUptimeLevelTable=dhcpPLDBUptimeLevelTable, dhcpPLDOperationsVal=dhcpPLDOperationsVal, dhcpPLDBReconnectsLevelName=dhcpPLDBReconnectsLevelName, dhcpDynAddFailuresLevelEntry=dhcpDynAddFailuresLevelEntry, dhcpUnparsablePackets=dhcpUnparsablePackets, dhcpPacketsIgnoredLevelEntry=dhcpPacketsIgnoredLevelEntry, dhcpPLDBCommitsLevelVal=dhcpPLDBCommitsLevelVal, dhcpRequestsInQueueLevelVal=dhcpRequestsInQueueLevelVal, dhcpPLDOperationsMax=dhcpPLDOperationsMax, dhcpPLDReconnectsLevelName=dhcpPLDReconnectsLevelName, dhcpPLDUptimeVal=dhcpPLDUptimeVal, dhcpPLDOperationsLevelMom=dhcpPLDOperationsLevelMom, dhcpPLDReconnectsLevelEntry=dhcpPLDReconnectsLevelEntry, dhcpPLDOperationsLevelTable=dhcpPLDOperationsLevelTable, dhcpPLDBReconnectsLevelEntry=dhcpPLDBReconnectsLevelEntry, dhcpPLDReconnects=dhcpPLDReconnects, dhcpPacketsAckLevelMax=dhcpPacketsAckLevelMax)
