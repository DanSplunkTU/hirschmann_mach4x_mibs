#
# PySNMP MIB module GIGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/GIGE-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:44:49 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
adr2500c, = mibBuilder.importSymbols("ADR2500C-MIB", "adr2500c")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
SagemBoolean, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "Severity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, ModuleIdentity, MibIdentifier, iso, Gauge32, NotificationType, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "NotificationType", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "TimeTicks", "Bits")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
gige = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 17, 10))
if mibBuilder.loadTexts: gige.setLastUpdated('0205220000Z')
if mibBuilder.loadTexts: gige.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
class BandwidthSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16, 64))
    namedValues = NamedValues(("none", 0), ("stm1", 1), ("stm4", 4), ("stm16", 16), ("stm64", 64))

gigeNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigeNumber.setStatus('current')
gigeTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11), )
if mibBuilder.loadTexts: gigeTable.setStatus('current')
gigeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1), ).setIndexNames((0, "GIGE-MIB", "gigeIndex"))
if mibBuilder.loadTexts: gigeEntry.setStatus('current')
gigeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigeIndex.setStatus('current')
gigeSdhBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 2), BandwidthSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeSdhBandwidth.setStatus('current')
gigeAutoTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeAutoTest.setStatus('current')
gigeWarmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeWarmStart.setStatus('current')
class LoopbackGE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10))
    namedValues = NamedValues(("none", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("remote", 10))

maintenanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenanceNumber.setStatus('current')
maintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21), )
if mibBuilder.loadTexts: maintenanceTable.setStatus('current')
maintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1), ).setIndexNames((0, "GIGE-MIB", "maintenanceIndex"))
if mibBuilder.loadTexts: maintenanceEntry.setStatus('current')
maintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenanceIndex.setStatus('current')
maintenanceAutoTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceAutoTest.setStatus('current')
maintenanceLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 3), LoopbackGE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceLoopback.setStatus('current')
maintenancePRBSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenancePRBSSent.setStatus('current')
maintenancePRBSReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenancePRBSReceived.setStatus('current')
maintenanceResetAllCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetAllCounters.setStatus('current')
maintenanceResetLanCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetLanCounters.setStatus('current')
maintenanceResetGfpCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 8), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetGfpCounters.setStatus('current')
maintenanceResetQosCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 9), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetQosCounters.setStatus('current')
class QosType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10, 11, 13))
    namedValues = NamedValues(("none", 0), ("pauseMode", 1), ("userPriority", 2), ("vlanId", 3), ("balanced", 4), ("ipv4TOS", 10), ("ipv6TClass", 11), ("dscp", 13))

class CongestionControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("red", 1), ("wred", 2))

class SchedulingSystem(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5, 10))
    namedValues = NamedValues(("unknown", 0), ("spq", 1), ("wfq", 4), ("cbwfq", 5), ("wrr", 10))

qosNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNumber.setStatus('current')
qosTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31), )
if mibBuilder.loadTexts: qosTable.setStatus('current')
qosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1), ).setIndexNames((0, "GIGE-MIB", "qosIndex"))
if mibBuilder.loadTexts: qosEntry.setStatus('current')
qosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIndex.setStatus('current')
qosClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosClassNumber.setStatus('current')
qosType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 3), QosType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosType.setStatus('current')
qosCongestionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 4), CongestionControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCongestionControl.setStatus('current')
qosSchedulingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 5), SchedulingSystem()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingSystem.setStatus('current')
qosBwREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBwREnable.setStatus('current')
qosHCInCCDiscardsGe = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosHCInCCDiscardsGe.setStatus('current')
qosHCInCCDiscardsWan = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosHCInCCDiscardsWan.setStatus('current')
class CosId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7))

cosNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosNumber.setStatus('current')
cosTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41), )
if mibBuilder.loadTexts: cosTable.setStatus('current')
cosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1), ).setIndexNames((0, "GIGE-MIB", "cosIndex"))
if mibBuilder.loadTexts: cosEntry.setStatus('current')
cosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosIndex.setStatus('current')
cosQosId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosQosId.setStatus('current')
cosId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 3), CosId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosId.setStatus('current')
cosDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosDefinition.setStatus('current')
cosBwRRatioMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBwRRatioMin.setStatus('current')
cosBwRRatioMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBwRRatioMax.setStatus('current')
cosHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInOctets.setStatus('current')
cosHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCOutOctets.setStatus('current')
cosHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInPkts.setStatus('current')
cosHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCOutPkts.setStatus('current')
cosHCInCCDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInCCDiscards.setStatus('current')
class GfpFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("oofd", 1), ("lofd", 2), ("fdsc", 3))

class GfpState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

gfpNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpNumber.setStatus('current')
gfpTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51), )
if mibBuilder.loadTexts: gfpTable.setStatus('current')
gfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1), ).setIndexNames((0, "GIGE-MIB", "gfpIndex"))
if mibBuilder.loadTexts: gfpEntry.setStatus('current')
gfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpIndex.setStatus('current')
gfpHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInPkts.setStatus('current')
gfpHCInIdlePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInIdlePkts.setStatus('current')
gfpHCInCorruptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInCorruptedPkts.setStatus('current')
gfpHCInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInErrors.setStatus('current')
gfpHCInCorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInCorrectedPkts.setStatus('current')
gfpHCFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCFCSErrors.setStatus('current')
gfpHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInOctets.setStatus('current')
gfpHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutPkts.setStatus('current')
gfpHCOutIdlePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutIdlePkts.setStatus('current')
gfpHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutOctets.setStatus('current')
gfpIdleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpIdleRate.setStatus('current')
gfpSendingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpSendingRate.setStatus('current')
gfpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 14), GfpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpState.setStatus('current')
gfpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpAdminStatus.setStatus('current')
gfpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpOperStatus.setStatus('current')
gfpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 17), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpMonitor.setStatus('current')
gfpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 18), GfpFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpFailure.setStatus('current')
gfpSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 19), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpSeverity.setStatus('current')
gfpOOFD = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpOOFD.setStatus('current')
gfpLOFD = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpLOFD.setStatus('current')
gfpFDSC = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpFDSC.setStatus('current')
class PauseFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("pauseModeRejected", 1))

pauseNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseNumber.setStatus('current')
pauseTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61), )
if mibBuilder.loadTexts: pauseTable.setStatus('current')
pauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1), ).setIndexNames((0, "GIGE-MIB", "pauseIndex"))
if mibBuilder.loadTexts: pauseEntry.setStatus('current')
pauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseIndex.setStatus('current')
pauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseTime.setStatus('current')
pauseBetweenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseBetweenTime.setStatus('current')
pauseMacSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMacSA.setStatus('current')
pauseMacDA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMacDA.setStatus('current')
pauseCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseCHT.setStatus('current')
pauseCLT = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseCLT.setStatus('current')
pauseMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 10), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMonitor.setStatus('current')
pauseFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 11), PauseFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseFailure.setStatus('current')
pauseSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 12), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseSeverity.setStatus('current')
pauseModeRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 13), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseModeRejected.setStatus('current')
mibBuilder.exportSymbols("GIGE-MIB", maintenanceTable=maintenanceTable, CongestionControl=CongestionControl, gfpFDSC=gfpFDSC, gigeWarmStart=gigeWarmStart, maintenanceAutoTest=maintenanceAutoTest, gfpOperStatus=gfpOperStatus, gfpIndex=gfpIndex, gige=gige, maintenanceEntry=maintenanceEntry, gfpIdleRate=gfpIdleRate, qosType=qosType, gfpAdminStatus=gfpAdminStatus, cosEntry=cosEntry, qosHCInCCDiscardsGe=qosHCInCCDiscardsGe, gfpNumber=gfpNumber, pauseTime=pauseTime, pauseCHT=pauseCHT, cosHCOutOctets=cosHCOutOctets, gfpHCInPkts=gfpHCInPkts, gigeIndex=gigeIndex, BandwidthSize=BandwidthSize, cosNumber=cosNumber, qosCongestionControl=qosCongestionControl, qosTable=qosTable, cosHCInOctets=cosHCInOctets, qosNumber=qosNumber, cosHCOutPkts=cosHCOutPkts, SchedulingSystem=SchedulingSystem, maintenanceLoopback=maintenanceLoopback, gfpMonitor=gfpMonitor, cosBwRRatioMin=cosBwRRatioMin, cosDefinition=cosDefinition, maintenancePRBSReceived=maintenancePRBSReceived, CosId=CosId, qosClassNumber=qosClassNumber, pauseModeRejected=pauseModeRejected, GfpState=GfpState, gigeTable=gigeTable, gigeAutoTest=gigeAutoTest, gfpSendingRate=gfpSendingRate, pauseIndex=pauseIndex, gfpHCOutPkts=gfpHCOutPkts, gfpHCOutIdlePkts=gfpHCOutIdlePkts, LoopbackGE=LoopbackGE, gfpOOFD=gfpOOFD, cosQosId=cosQosId, maintenanceResetQosCounters=maintenanceResetQosCounters, maintenancePRBSSent=maintenancePRBSSent, maintenanceResetGfpCounters=maintenanceResetGfpCounters, gfpSeverity=gfpSeverity, pauseMonitor=pauseMonitor, qosHCInCCDiscardsWan=qosHCInCCDiscardsWan, QosType=QosType, gfpHCInIdlePkts=gfpHCInIdlePkts, qosEntry=qosEntry, cosTable=cosTable, cosHCInPkts=cosHCInPkts, gfpHCInErrors=gfpHCInErrors, PYSNMP_MODULE_ID=gige, maintenanceResetLanCounters=maintenanceResetLanCounters, PauseFailure=PauseFailure, pauseTable=pauseTable, pauseEntry=pauseEntry, gfpState=gfpState, GfpFailure=GfpFailure, pauseMacSA=pauseMacSA, cosHCInCCDiscards=cosHCInCCDiscards, cosId=cosId, cosBwRRatioMax=cosBwRRatioMax, qosSchedulingSystem=qosSchedulingSystem, gfpFailure=gfpFailure, gigeNumber=gigeNumber, gfpHCFCSErrors=gfpHCFCSErrors, gfpHCInCorrectedPkts=gfpHCInCorrectedPkts, qosIndex=qosIndex, gfpTable=gfpTable, pauseBetweenTime=pauseBetweenTime, pauseNumber=pauseNumber, cosIndex=cosIndex, qosBwREnable=qosBwREnable, pauseSeverity=pauseSeverity, pauseCLT=pauseCLT, gfpHCInCorruptedPkts=gfpHCInCorruptedPkts, maintenanceIndex=maintenanceIndex, maintenanceNumber=maintenanceNumber, gfpHCInOctets=gfpHCInOctets, gigeEntry=gigeEntry, gfpEntry=gfpEntry, gfpLOFD=gfpLOFD, pauseFailure=pauseFailure, maintenanceResetAllCounters=maintenanceResetAllCounters, pauseMacDA=pauseMacDA, gigeSdhBandwidth=gigeSdhBandwidth, gfpHCOutOctets=gfpHCOutOctets)
