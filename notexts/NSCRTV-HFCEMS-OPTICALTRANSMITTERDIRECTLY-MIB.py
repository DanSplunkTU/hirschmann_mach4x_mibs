#
# PySNMP MIB module NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 17:47:50 2022
# On host fv-az126-670 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
otdIdent, = mibBuilder.importSymbols("NSCRTV-ROOT", "otdIdent")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Integer32, iso, Counter32, NotificationType, Gauge32, Counter64, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Integer32", "iso", "Counter32", "NotificationType", "Gauge32", "Counter64", "Unsigned32", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
otdVendorOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdVendorOID.setStatus('optional')
otdSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdSlotNumber.setStatus('mandatory')
otdOptDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3), )
if mibBuilder.loadTexts: otdOptDeviceTable.setStatus('mandatory')
otdOptDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdIndex"))
if mibBuilder.loadTexts: otdOptDeviceEntry.setStatus('mandatory')
otdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdIndex.setStatus('mandatory')
otdLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserWavelength.setStatus('mandatory')
otdLaserType = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserType.setStatus('optional')
otdDriveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDriveLevel.setStatus('optional')
otdInputRFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdInputRFLevel.setStatus('optional')
otdInputRFAttenuationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdInputRFAttenuationRange.setStatus('optional')
otdInputRFAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdInputRFAttenuation.setStatus('optional')
otdLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserTemp.setStatus('mandatory')
otdLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserCurrent.setStatus('mandatory')
otdOpicalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdOpicalOutputPower.setStatus('mandatory')
otdTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdTecCurrent.setStatus('optional')
otdAGCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdAGCControl.setStatus('optional')
otdConfigurationDriveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationDriveLevel.setStatus('optional')
otdConfigurationRFAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationRFAttenuation.setStatus('optional')
otdConfigurationRFChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationRFChannels.setStatus('optional')
otdFansNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansNumber.setStatus('mandatory')
otdFansTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5), )
if mibBuilder.loadTexts: otdFansTable.setStatus('optional')
otdFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdFansIndex"))
if mibBuilder.loadTexts: otdFansEntry.setStatus('optional')
otdFansIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansIndex.setStatus('optional')
otdFansState = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansState.setStatus('optional')
otdFansSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansSpeed.setStatus('optional')
otdFansControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdFansControl.setStatus('optional')
otdFansName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansName.setStatus('optional')
otdNumberDCPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdNumberDCPowerSupply.setStatus('mandatory')
otdDCPowerSupplyMode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadsharing", 1), ("switchedredundant", 2), ("alonesupply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerSupplyMode.setStatus('optional')
otdDCPowerTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8), )
if mibBuilder.loadTexts: otdDCPowerTable.setStatus('mandatory')
otdDCPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdDCPowerIndex"))
if mibBuilder.loadTexts: otdDCPowerEntry.setStatus('mandatory')
otdDCPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerIndex.setStatus('mandatory')
otdDCPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerVoltage.setStatus('mandatory')
otdDCPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerCurrent.setStatus('optional')
otdDCPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerName.setStatus('mandatory')
mibBuilder.exportSymbols("NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", otdIndex=otdIndex, otdInputRFLevel=otdInputRFLevel, otdDCPowerIndex=otdDCPowerIndex, otdDCPowerCurrent=otdDCPowerCurrent, otdFansNumber=otdFansNumber, otdFansState=otdFansState, otdDCPowerSupplyMode=otdDCPowerSupplyMode, otdFansTable=otdFansTable, otdDCPowerVoltage=otdDCPowerVoltage, otdInputRFAttenuationRange=otdInputRFAttenuationRange, otdTecCurrent=otdTecCurrent, otdNumberDCPowerSupply=otdNumberDCPowerSupply, otdFansControl=otdFansControl, otdConfigurationRFAttenuation=otdConfigurationRFAttenuation, otdConfigurationRFChannels=otdConfigurationRFChannels, otdDCPowerEntry=otdDCPowerEntry, otdDCPowerTable=otdDCPowerTable, otdAGCControl=otdAGCControl, otdLaserWavelength=otdLaserWavelength, otdInputRFAttenuation=otdInputRFAttenuation, otdFansSpeed=otdFansSpeed, otdDCPowerName=otdDCPowerName, otdFansIndex=otdFansIndex, otdVendorOID=otdVendorOID, otdLaserTemp=otdLaserTemp, otdOpicalOutputPower=otdOpicalOutputPower, otdLaserCurrent=otdLaserCurrent, otdConfigurationDriveLevel=otdConfigurationDriveLevel, otdFansName=otdFansName, otdOptDeviceTable=otdOptDeviceTable, otdSlotNumber=otdSlotNumber, otdFansEntry=otdFansEntry, otdDriveLevel=otdDriveLevel, otdLaserType=otdLaserType, otdOptDeviceEntry=otdOptDeviceEntry)
