#
# PySNMP MIB module SUPERMICRO-SD5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/supermicro/SUPERMICRO-SD5-MIB
# Produced by pysmi-1.1.8 at Mon Jan 17 15:06:45 2022
# On host fv-az127-428 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Bits, IpAddress, TimeTicks, ObjectIdentity, Counter32, Counter64, NotificationType, Gauge32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Bits", "IpAddress", "TimeTicks", "ObjectIdentity", "Counter32", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
smSSMInfo, = mibBuilder.importSymbols("SUPERMICRO-SMI", "smSSMInfo")
smSuperDoctor5MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10876, 100, 1))
if mibBuilder.loadTexts: smSuperDoctor5MIB.setLastUpdated('201307020000Z')
if mibBuilder.loadTexts: smSuperDoctor5MIB.setOrganization('Super Micro Computer Inc.')
sd5Table = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1), )
if mibBuilder.loadTexts: sd5Table.setStatus('current')
sd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "sd5Idx"))
if mibBuilder.loadTexts: sd5Entry.setStatus('current')
sd5Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5Idx.setStatus('current')
sd5Version = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5Version.setStatus('current')
sd5MIBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sd5MIBVersion.setStatus('current')
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2), )
if mibBuilder.loadTexts: cpuTable.setStatus('current')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuEntry.setStatus('current')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
cpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuName.setStatus('current')
cpuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDescription.setStatus('current')
cpuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuManufacturer.setStatus('current')
cpuDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceStatus.setStatus('current')
cpuMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuMaxSpeed.setStatus('current')
cpuCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCurrentSpeed.setStatus('current')
cpuLoadingPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoadingPercentage.setStatus('current')
cpuCoreEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCoreEnabled.setStatus('current')
cpuCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCoreCount.setStatus('current')
cpuThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuThreadCount.setStatus('current')
cpuSocketDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSocketDesignation.setStatus('current')
cpuDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceVersion.setStatus('current')
cpuDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDeviceID.setStatus('current')
cpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuID.setStatus('current')
memTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3), )
if mibBuilder.loadTexts: memTable.setStatus('current')
memEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "memTag"))
if mibBuilder.loadTexts: memEntry.setStatus('current')
memTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTag.setStatus('current')
memDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDescription.setStatus('current')
memDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDeviceStatus.setStatus('current')
memLabeledBank = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memLabeledBank.setStatus('current')
memDeviceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDeviceLocator.setStatus('current')
memModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModel.setStatus('current')
memManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memManufacturer.setStatus('current')
memPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memPartNumber.setStatus('current')
memSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSerialNumber.setStatus('current')
memCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCapacity.setStatus('current')
memDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memDataWidth.setStatus('current')
memTotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalWidth.setStatus('current')
memErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memErrorCount.setStatus('current')
memECCErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memECCErrorCount.setStatus('current')
memUECCErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUECCErrorCount.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "diskName"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
diskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSerialNumber.setStatus('current')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
diskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVendor.setStatus('current')
diskSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSmartStatus.setStatus('current')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('current')
diskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
diskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskMediaType.setStatus('current')
diskInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskInterfaceType.setStatus('current')
diskController = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskController.setStatus('current')
diskSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSlotID.setStatus('current')
sysBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5), )
if mibBuilder.loadTexts: sysBIOSTable.setStatus('current')
sysBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "sysBIOSIndex"))
if mibBuilder.loadTexts: sysBIOSEntry.setStatus('current')
sysBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSIndex.setStatus('current')
sysBIOSReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSReleaseDate.setStatus('current')
sysBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSVersion.setStatus('current')
sysBIOSManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBIOSManufacturer.setStatus('current')
mbTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6), )
if mibBuilder.loadTexts: mbTable.setStatus('current')
mbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "mbIndex"))
if mibBuilder.loadTexts: mbEntry.setStatus('current')
mbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbIndex.setStatus('current')
mbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbManufacturer.setStatus('current')
mbProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbProductName.setStatus('current')
mbVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbVersionName.setStatus('current')
mbAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbAssetTag.setStatus('current')
mbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbSerialNumber.setStatus('current')
osTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7), )
if mibBuilder.loadTexts: osTable.setStatus('current')
osEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "osIndex"))
if mibBuilder.loadTexts: osEntry.setStatus('current')
osIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osIndex.setStatus('current')
osName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osName.setStatus('current')
osVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osVersion.setStatus('current')
osManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osManufacturer.setStatus('current')
osSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSerialNumber.setStatus('current')
osCSDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osCSDVersion.setStatus('current')
dmiLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8))
ceccLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ceccLogTable.setStatus('current')
ceccLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "ceccLogIndex"))
if mibBuilder.loadTexts: ceccLogEntry.setStatus('current')
ceccLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogDatetime.setStatus('current')
ceccLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogInfo.setStatus('current')
ceccLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceccLogIndex.setStatus('current')
ueccLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ueccLogTable.setStatus('current')
ueccLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "ceccLogIndex"))
if mibBuilder.loadTexts: ueccLogEntry.setStatus('current')
ueccLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogDatetime.setStatus('current')
ueccLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogInfo.setStatus('current')
ueccLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ueccLogIndex.setStatus('current')
postLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8), )
if mibBuilder.loadTexts: postLogTable.setStatus('current')
postLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "postLogIndex"))
if mibBuilder.loadTexts: postLogEntry.setStatus('current')
postLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogDatetime.setStatus('current')
postLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogInfo.setStatus('current')
postLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogIndex.setStatus('current')
cpuLogTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11), )
if mibBuilder.loadTexts: cpuLogTable.setStatus('current')
cpuLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "cpuLogIndex"))
if mibBuilder.loadTexts: cpuLogEntry.setStatus('current')
cpuLogDatetime = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogDatetime.setStatus('current')
cpuLogInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogInfo.setStatus('current')
cpuLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 8, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLogIndex.setStatus('current')
raidAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9), )
if mibBuilder.loadTexts: raidAdapterTable.setStatus('current')
raidAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidAdapterIndex"))
if mibBuilder.loadTexts: raidAdapterEntry.setStatus('current')
raidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterIndex.setStatus('current')
raidAdapterGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup.setStatus('current')
raidAdapterId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId.setStatus('current')
raidAdapterProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterProductName.setStatus('current')
raidAdapterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSerialNumber.setStatus('current')
raidAdapterFWPackageBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterFWPackageBuild.setStatus('current')
raidAdapterFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterFWVersion.setStatus('current')
raidAdapterBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterBIOSVersion.setStatus('current')
raidAdapterVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterVendorId.setStatus('current')
raidAdapterDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterDeviceId.setStatus('current')
raidAdapterSubVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSubVendorId.setStatus('current')
raidAdapterSubDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterSubDeviceId.setStatus('current')
raidIsBBUAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIsBBUAbsent.setStatus('current')
raidIsBBUAbsentIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIsBBUAbsentIgnored.setStatus('current')
raidAdapterAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterAllinoneStatus.setStatus('current')
raidAdapterAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterAllinoneMsg.setStatus('current')
raidBBUTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10), )
if mibBuilder.loadTexts: raidBBUTable.setStatus('current')
raidBBUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidBBUIndex"))
if mibBuilder.loadTexts: raidBBUEntry.setStatus('current')
raidBBUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUIndex.setStatus('current')
raidAdapterGroup_BBU = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 2), DisplayString()).setLabel("raidAdapterGroup-BBU").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_BBU.setStatus('current')
raidAdapterId_BBU = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 3), DisplayString()).setLabel("raidAdapterId-BBU").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_BBU.setStatus('current')
raidBBUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUStatus.setStatus('current')
raidBBUAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUAllinoneStatus.setStatus('current')
raidBBUAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidBBUAllinoneMsg.setStatus('current')
raidVDTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11), )
if mibBuilder.loadTexts: raidVDTable.setStatus('current')
raidVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidVDIndex"))
if mibBuilder.loadTexts: raidVDEntry.setStatus('current')
raidVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDIndex.setStatus('current')
raidAdapterGroup_VD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 2), DisplayString()).setLabel("raidAdapterGroup-VD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_VD.setStatus('current')
raidAdapterId_VD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 3), DisplayString()).setLabel("raidAdapterId-VD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_VD.setStatus('current')
raidDiskGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskGroupId.setStatus('current')
raidVDId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDId.setStatus('current')
raidVDTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDTargetId.setStatus('current')
raidVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDName.setStatus('current')
raidVDRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDRaidLevel.setStatus('current')
raidVDSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSize.setStatus('current')
raidVDMirrorDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDMirrorDataSize.setStatus('current')
raidVDStripSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDStripSize.setStatus('current')
raidVDNumDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDNumDrives.setStatus('current')
raidVDSpanDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSpanDepth.setStatus('current')
raidVDDefaultCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultCachePolicy.setStatus('current')
raidVDCurrentCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentCachePolicy.setStatus('current')
raidVDDefaultAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultAccessPolicy.setStatus('current')
raidVDCurrentAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentAccessPolicy.setStatus('current')
raidVDDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDiskCachePolicy.setStatus('current')
raidVDEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDEncryptionType.setStatus('current')
raidVDDefaultPSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDDefaultPSPolicy.setStatus('current')
raidVDCurrentPSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCurrentPSPolicy.setStatus('current')
raidVDCanSpinUpIn1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCanSpinUpIn1Min.setStatus('current')
raidVDSupportT10Power = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSupportT10Power.setStatus('current')
raidVDSupportsMaxPS = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDSupportsMaxPS.setStatus('current')
raidVDBadBlocksExist = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDBadBlocksExist.setStatus('current')
raidVDCached = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDCached.setStatus('current')
raidVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDState.setStatus('current')
raidVDAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDAllinoneStatus.setStatus('current')
raidVDAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 11, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDAllinoneMsg.setStatus('current')
raidPDTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12), )
if mibBuilder.loadTexts: raidPDTable.setStatus('current')
raidPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1), ).setIndexNames((0, "SUPERMICRO-SD5-MIB", "raidPDIndex"))
if mibBuilder.loadTexts: raidPDEntry.setStatus('current')
raidPDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDIndex.setStatus('current')
raidAdapterGroup_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 2), DisplayString()).setLabel("raidAdapterGroup-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterGroup_PD.setStatus('current')
raidAdapterId_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 3), DisplayString()).setLabel("raidAdapterId-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidAdapterId_PD.setStatus('current')
raidDiskGroupId_PD = MibScalar((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 4), DisplayString()).setLabel("raidDiskGroupId-PD").setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskGroupId_PD.setStatus('current')
raidPDSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSlotNumber.setStatus('current')
raidPDFirmwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDFirmwareState.setStatus('current')
raidPDMediaErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDMediaErrorCount.setStatus('current')
raidPDOtherErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDOtherErrorCount.setStatus('current')
raidPDPredFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPredFailCount.setStatus('current')
raidPDLastPredFailEventSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDLastPredFailEventSeqNo.setStatus('current')
raidPDRawSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDRawSize.setStatus('current')
raidPDDeviceFwLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDDeviceFwLevel.setStatus('current')
raidPDInquiryData = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDInquiryData.setStatus('current')
raidPDDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDDeviceSpeed.setStatus('current')
raidPDLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDLinkSpeed.setStatus('current')
raidPDMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDMediaType.setStatus('current')
raidPDWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDWriteCache.setStatus('current')
raidPDNCQSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDNCQSetting.setStatus('current')
raidPDPort0Linkspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort0Linkspeed.setStatus('current')
raidPDPort0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort0Status.setStatus('current')
raidPDPort1Linkspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort1Linkspeed.setStatus('current')
raidPDPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDPort1Status.setStatus('current')
raidPDEnclosureDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDEnclosureDeviceID.setStatus('current')
raidPDOpProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDOpProgress.setStatus('current')
raidPDSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSpan.setStatus('current')
raidPDAllinoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDAllinoneStatus.setStatus('current')
raidPDAllinoneMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDAllinoneMsg.setStatus('current')
raidPDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDModel.setStatus('current')
raidPDSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDSerialNumber.setStatus('current')
raidPDFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 100, 1, 12, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDFirmwareRevision.setStatus('current')
smSD5TrapMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 100, 3))
trapFanNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,101))
trapFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,102))
trapFanCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,103))
trapVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,201))
trapVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,202))
trapVoltageCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,203))
trapTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,301))
trapTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,302))
trapTemperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,303))
trapChassisIntrusionCleared = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,401))
trapChassisIntrusion = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,403))
trapStorageSMARTCheckNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,601))
trapStorageSMARTCheckWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,602))
trapStorageSMARTCheckCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,603))
trapPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,701))
trapPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,702))
trapPowerSupplyCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,703))
trapMemoryCeccNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,801))
trapMemoryCeccWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,802))
trapMemoryCeccCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,803))
trapMemoryUeccNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,901))
trapMemoryUeccWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,902))
trapMemoryUeccCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,903))
trapGenericNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1001))
trapGenericWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1002))
trapGenericCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1003))
trapBbpStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1101))
trapBbpStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1102))
trapBbpStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1103))
trapCpuFaultNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1201))
trapCpuFaultWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1202))
trapCpuFaultCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1203))
trapStorageAdapterStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1301))
trapStorageAdapterStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1302))
trapStorageAdapterStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1303))
trapBatteryStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1401))
trapBatteryStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1402))
trapBatteryStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 10876, 100, 3) + (0,1403))
mibBuilder.exportSymbols("SUPERMICRO-SD5-MIB", trapCpuFaultWarning=trapCpuFaultWarning, raidIsBBUAbsent=raidIsBBUAbsent, memModel=memModel, ueccLogEntry=ueccLogEntry, sd5Entry=sd5Entry, memErrorCount=memErrorCount, raidAdapterSubVendorId=raidAdapterSubVendorId, osSerialNumber=osSerialNumber, trapPowerSupplyWarning=trapPowerSupplyWarning, sysBIOSVersion=sysBIOSVersion, raidPDAllinoneMsg=raidPDAllinoneMsg, cpuTable=cpuTable, diskSerialNumber=diskSerialNumber, mbProductName=mbProductName, postLogTable=postLogTable, memTag=memTag, raidPDRawSize=raidPDRawSize, ueccLogIndex=ueccLogIndex, trapFanWarning=trapFanWarning, raidVDCanSpinUpIn1Min=raidVDCanSpinUpIn1Min, raidPDSlotNumber=raidPDSlotNumber, cpuDeviceVersion=cpuDeviceVersion, osName=osName, raidAdapterFWVersion=raidAdapterFWVersion, trapPowerSupplyCritical=trapPowerSupplyCritical, postLogIndex=postLogIndex, raidVDDiskCachePolicy=raidVDDiskCachePolicy, trapMemoryCeccNormal=trapMemoryCeccNormal, sd5MIBVersion=sd5MIBVersion, raidVDIndex=raidVDIndex, ueccLogDatetime=ueccLogDatetime, memEntry=memEntry, osIndex=osIndex, raidPDLinkSpeed=raidPDLinkSpeed, raidVDCached=raidVDCached, raidPDPort1Status=raidPDPort1Status, raidPDEnclosureDeviceID=raidPDEnclosureDeviceID, memDeviceStatus=memDeviceStatus, smSuperDoctor5MIB=smSuperDoctor5MIB, raidVDDefaultCachePolicy=raidVDDefaultCachePolicy, sd5Table=sd5Table, dmiLogTable=dmiLogTable, raidVDSupportsMaxPS=raidVDSupportsMaxPS, raidPDLastPredFailEventSeqNo=raidPDLastPredFailEventSeqNo, raidAdapterIndex=raidAdapterIndex, raidIsBBUAbsentIgnored=raidIsBBUAbsentIgnored, raidPDOtherErrorCount=raidPDOtherErrorCount, cpuIndex=cpuIndex, memSerialNumber=memSerialNumber, mbTable=mbTable, raidVDCurrentAccessPolicy=raidVDCurrentAccessPolicy, diskEntry=diskEntry, raidPDSpan=raidPDSpan, trapTemperatureWarning=trapTemperatureWarning, diskSize=diskSize, cpuLogTable=cpuLogTable, raidAdapterTable=raidAdapterTable, raidAdapterGroup_PD=raidAdapterGroup_PD, trapStorageSMARTCheckNormal=trapStorageSMARTCheckNormal, cpuLogInfo=cpuLogInfo, memDeviceLocator=memDeviceLocator, raidAdapterVendorId=raidAdapterVendorId, raidPDTable=raidPDTable, raidPDInquiryData=raidPDInquiryData, raidVDSize=raidVDSize, cpuDeviceID=cpuDeviceID, raidPDMediaType=raidPDMediaType, raidVDBadBlocksExist=raidVDBadBlocksExist, osTable=osTable, raidVDMirrorDataSize=raidVDMirrorDataSize, ceccLogIndex=ceccLogIndex, raidPDPort0Linkspeed=raidPDPort0Linkspeed, cpuEntry=cpuEntry, diskSlotID=diskSlotID, cpuLogDatetime=cpuLogDatetime, memECCErrorCount=memECCErrorCount, raidVDStripSize=raidVDStripSize, raidPDFirmwareState=raidPDFirmwareState, memLabeledBank=memLabeledBank, raidAdapterSubDeviceId=raidAdapterSubDeviceId, mbEntry=mbEntry, diskController=diskController, trapMemoryUeccCritical=trapMemoryUeccCritical, raidBBUIndex=raidBBUIndex, trapBatteryStatusNormal=trapBatteryStatusNormal, osVersion=osVersion, trapPowerSupplyNormal=trapPowerSupplyNormal, raidAdapterFWPackageBuild=raidAdapterFWPackageBuild, trapFanCritical=trapFanCritical, raidPDEntry=raidPDEntry, cpuCoreEnabled=cpuCoreEnabled, trapBbpStatusCritical=trapBbpStatusCritical, osEntry=osEntry, osManufacturer=osManufacturer, raidVDRaidLevel=raidVDRaidLevel, cpuName=cpuName, raidDiskGroupId_PD=raidDiskGroupId_PD, raidVDCurrentPSPolicy=raidVDCurrentPSPolicy, trapChassisIntrusionCleared=trapChassisIntrusionCleared, cpuLogEntry=cpuLogEntry, trapBatteryStatusWarning=trapBatteryStatusWarning, diskTable=diskTable, cpuThreadCount=cpuThreadCount, sysBIOSTable=sysBIOSTable, raidPDIndex=raidPDIndex, trapMemoryUeccWarning=trapMemoryUeccWarning, raidVDAllinoneStatus=raidVDAllinoneStatus, ceccLogTable=ceccLogTable, memCapacity=memCapacity, cpuSocketDesignation=cpuSocketDesignation, raidPDNCQSetting=raidPDNCQSetting, raidAdapterId_VD=raidAdapterId_VD, raidPDDeviceFwLevel=raidPDDeviceFwLevel, mbVersionName=mbVersionName, raidAdapterAllinoneMsg=raidAdapterAllinoneMsg, trapStorageSMARTCheckCritical=trapStorageSMARTCheckCritical, raidPDModel=raidPDModel, raidVDEncryptionType=raidVDEncryptionType, trapStorageAdapterStatusWarning=trapStorageAdapterStatusWarning, trapMemoryUeccNormal=trapMemoryUeccNormal, trapMemoryCeccCritical=trapMemoryCeccCritical, trapVoltageNormal=trapVoltageNormal, trapTemperatureNormal=trapTemperatureNormal, raidVDState=raidVDState, trapBatteryStatusCritical=trapBatteryStatusCritical, memDataWidth=memDataWidth, sd5Version=sd5Version, raidPDMediaErrorCount=raidPDMediaErrorCount, sysBIOSManufacturer=sysBIOSManufacturer, raidAdapterId=raidAdapterId, diskMediaType=diskMediaType, raidDiskGroupId=raidDiskGroupId, raidAdapterSerialNumber=raidAdapterSerialNumber, trapCpuFaultNormal=trapCpuFaultNormal, postLogEntry=postLogEntry, raidAdapterBIOSVersion=raidAdapterBIOSVersion, raidAdapterAllinoneStatus=raidAdapterAllinoneStatus, raidPDOpProgress=raidPDOpProgress, cpuMaxSpeed=cpuMaxSpeed, raidAdapterGroup_BBU=raidAdapterGroup_BBU, raidPDWriteCache=raidPDWriteCache, trapBbpStatusWarning=trapBbpStatusWarning, trapStorageAdapterStatusCritical=trapStorageAdapterStatusCritical, raidVDDefaultAccessPolicy=raidVDDefaultAccessPolicy, cpuManufacturer=cpuManufacturer, postLogInfo=postLogInfo, raidVDName=raidVDName, trapCpuFaultCritical=trapCpuFaultCritical, ceccLogInfo=ceccLogInfo, cpuCurrentSpeed=cpuCurrentSpeed, raidPDFirmwareRevision=raidPDFirmwareRevision, trapStorageSMARTCheckWarning=trapStorageSMARTCheckWarning, memPartNumber=memPartNumber, cpuDescription=cpuDescription, trapGenericNormal=trapGenericNormal, raidAdapterProductName=raidAdapterProductName, raidVDId=raidVDId, memManufacturer=memManufacturer, raidVDEntry=raidVDEntry, trapBbpStatusNormal=trapBbpStatusNormal, cpuCoreCount=cpuCoreCount, cpuLogIndex=cpuLogIndex, raidAdapterId_BBU=raidAdapterId_BBU, mbAssetTag=mbAssetTag, ceccLogEntry=ceccLogEntry, diskName=diskName, sysBIOSEntry=sysBIOSEntry, diskVendor=diskVendor, raidAdapterId_PD=raidAdapterId_PD, smSD5TrapMIB=smSD5TrapMIB, trapStorageAdapterStatusNormal=trapStorageAdapterStatusNormal, memTotalWidth=memTotalWidth, raidBBUStatus=raidBBUStatus, sd5Idx=sd5Idx, raidVDAllinoneMsg=raidVDAllinoneMsg, trapVoltageWarning=trapVoltageWarning, raidVDSupportT10Power=raidVDSupportT10Power, trapVoltageCritical=trapVoltageCritical, raidVDSpanDepth=raidVDSpanDepth, sysBIOSReleaseDate=sysBIOSReleaseDate, raidAdapterDeviceId=raidAdapterDeviceId, raidBBUAllinoneStatus=raidBBUAllinoneStatus, trapChassisIntrusion=trapChassisIntrusion, PYSNMP_MODULE_ID=smSuperDoctor5MIB, trapGenericWarning=trapGenericWarning, raidPDAllinoneStatus=raidPDAllinoneStatus, trapMemoryCeccWarning=trapMemoryCeccWarning, diskInterfaceType=diskInterfaceType, mbSerialNumber=mbSerialNumber, raidPDPredFailCount=raidPDPredFailCount, raidVDDefaultPSPolicy=raidVDDefaultPSPolicy, diskModel=diskModel, raidVDCurrentCachePolicy=raidVDCurrentCachePolicy, ceccLogDatetime=ceccLogDatetime, cpuID=cpuID, raidAdapterEntry=raidAdapterEntry, cpuDeviceStatus=cpuDeviceStatus, trapTemperatureCritical=trapTemperatureCritical, memTable=memTable, raidBBUEntry=raidBBUEntry, raidBBUAllinoneMsg=raidBBUAllinoneMsg, raidAdapterGroup=raidAdapterGroup, memUECCErrorCount=memUECCErrorCount, mbManufacturer=mbManufacturer, postLogDatetime=postLogDatetime, raidBBUTable=raidBBUTable, raidPDDeviceSpeed=raidPDDeviceSpeed, osCSDVersion=osCSDVersion, ueccLogInfo=ueccLogInfo, trapGenericCritical=trapGenericCritical, raidVDTargetId=raidVDTargetId, raidPDSerialNumber=raidPDSerialNumber, raidPDPort1Linkspeed=raidPDPort1Linkspeed, cpuLoadingPercentage=cpuLoadingPercentage, sysBIOSIndex=sysBIOSIndex, raidAdapterGroup_VD=raidAdapterGroup_VD, raidVDTable=raidVDTable, memDescription=memDescription, raidPDPort0Status=raidPDPort0Status, ueccLogTable=ueccLogTable, mbIndex=mbIndex, diskSmartStatus=diskSmartStatus, raidVDNumDrives=raidVDNumDrives, trapFanNormal=trapFanNormal)
