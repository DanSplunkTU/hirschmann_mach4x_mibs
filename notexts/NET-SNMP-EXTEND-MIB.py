#
# PySNMP MIB module NET-SNMP-EXTEND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netsnmp/NET-SNMP-EXTEND-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:54:31 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
nsExtensions, = mibBuilder.importSymbols("NET-SNMP-AGENT-MIB", "nsExtensions")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ModuleIdentity, Unsigned32, Counter32, MibIdentifier, TimeTicks, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "Counter32", "MibIdentifier", "TimeTicks", "Counter64", "Bits")
StorageType, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TextualConvention")
netSnmpExtendMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8072, 1, 3, 1))
netSnmpExtendMIB.setRevisions(('2010-03-17 00:00', '2004-05-08 00:00',))
if mibBuilder.loadTexts: netSnmpExtendMIB.setLastUpdated('201003170000Z')
if mibBuilder.loadTexts: netSnmpExtendMIB.setOrganization('www.net-snmp.org')
nsExtendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2))
nsExtendGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3))
nsExtendNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendNumEntries.setStatus('current')
nsExtendConfigTable = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2), )
if mibBuilder.loadTexts: nsExtendConfigTable.setStatus('current')
nsExtendConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1), ).setIndexNames((0, "NET-SNMP-EXTEND-MIB", "nsExtendToken"))
if mibBuilder.loadTexts: nsExtendConfigEntry.setStatus('current')
nsExtendToken = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: nsExtendToken.setStatus('current')
nsExtendCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendCommand.setStatus('current')
nsExtendArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 3), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendArgs.setStatus('current')
nsExtendInput = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendInput.setStatus('current')
nsExtendCacheTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 5), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendCacheTime.setStatus('current')
nsExtendExecType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exec", 1), ("shell", 2))).clone('exec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendExecType.setStatus('current')
nsExtendRunType = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("run-on-read", 1), ("run-on-set", 2), ("run-command", 3))).clone('run-on-read')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendRunType.setStatus('current')
nsExtendStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 20), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendStorage.setStatus('current')
nsExtendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsExtendStatus.setStatus('current')
nsExtendOutput1Table = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3), )
if mibBuilder.loadTexts: nsExtendOutput1Table.setStatus('current')
nsExtendOutput1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1), )
nsExtendConfigEntry.registerAugmentions(("NET-SNMP-EXTEND-MIB", "nsExtendOutput1Entry"))
nsExtendOutput1Entry.setIndexNames(*nsExtendConfigEntry.getIndexNames())
if mibBuilder.loadTexts: nsExtendOutput1Entry.setStatus('current')
nsExtendOutput1Line = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutput1Line.setStatus('current')
nsExtendOutputFull = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutputFull.setStatus('current')
nsExtendOutNumLines = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutNumLines.setStatus('current')
nsExtendResult = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendResult.setStatus('current')
nsExtendOutput2Table = MibTable((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4), )
if mibBuilder.loadTexts: nsExtendOutput2Table.setStatus('current')
nsExtendOutput2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1), ).setIndexNames((0, "NET-SNMP-EXTEND-MIB", "nsExtendToken"), (0, "NET-SNMP-EXTEND-MIB", "nsExtendLineIndex"))
if mibBuilder.loadTexts: nsExtendOutput2Entry.setStatus('current')
nsExtendLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: nsExtendLineIndex.setStatus('current')
nsExtendOutLine = MibTableColumn((1, 3, 6, 1, 4, 1, 8072, 1, 3, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsExtendOutLine.setStatus('current')
nsExtendConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3, 1)).setObjects(("NET-SNMP-EXTEND-MIB", "nsExtendCommand"), ("NET-SNMP-EXTEND-MIB", "nsExtendArgs"), ("NET-SNMP-EXTEND-MIB", "nsExtendInput"), ("NET-SNMP-EXTEND-MIB", "nsExtendCacheTime"), ("NET-SNMP-EXTEND-MIB", "nsExtendExecType"), ("NET-SNMP-EXTEND-MIB", "nsExtendRunType"), ("NET-SNMP-EXTEND-MIB", "nsExtendStorage"), ("NET-SNMP-EXTEND-MIB", "nsExtendStatus"), ("NET-SNMP-EXTEND-MIB", "nsExtendNumEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsExtendConfigGroup = nsExtendConfigGroup.setStatus('current')
nsExtendOutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8072, 1, 3, 3, 2)).setObjects(("NET-SNMP-EXTEND-MIB", "nsExtendOutNumLines"), ("NET-SNMP-EXTEND-MIB", "nsExtendResult"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutLine"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutput1Line"), ("NET-SNMP-EXTEND-MIB", "nsExtendOutputFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nsExtendOutputGroup = nsExtendOutputGroup.setStatus('current')
mibBuilder.exportSymbols("NET-SNMP-EXTEND-MIB", nsExtendOutputGroup=nsExtendOutputGroup, nsExtendRunType=nsExtendRunType, nsExtendConfigGroup=nsExtendConfigGroup, PYSNMP_MODULE_ID=netSnmpExtendMIB, nsExtendOutput1Table=nsExtendOutput1Table, nsExtendOutNumLines=nsExtendOutNumLines, netSnmpExtendMIB=netSnmpExtendMIB, nsExtendResult=nsExtendResult, nsExtendOutput2Table=nsExtendOutput2Table, nsExtendOutLine=nsExtendOutLine, nsExtendNumEntries=nsExtendNumEntries, nsExtendConfigEntry=nsExtendConfigEntry, nsExtendExecType=nsExtendExecType, nsExtendArgs=nsExtendArgs, nsExtendObjects=nsExtendObjects, nsExtendStorage=nsExtendStorage, nsExtendCommand=nsExtendCommand, nsExtendLineIndex=nsExtendLineIndex, nsExtendOutput2Entry=nsExtendOutput2Entry, nsExtendConfigTable=nsExtendConfigTable, nsExtendGroups=nsExtendGroups, nsExtendStatus=nsExtendStatus, nsExtendToken=nsExtendToken, nsExtendCacheTime=nsExtendCacheTime, nsExtendOutput1Entry=nsExtendOutput1Entry, nsExtendOutputFull=nsExtendOutputFull, nsExtendOutput1Line=nsExtendOutput1Line, nsExtendInput=nsExtendInput)
