#
# PySNMP MIB module NETWORK-APPLIANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netapp/NETWORK-APPLIANCE-MIB
# Produced by pysmi-1.1.0 at Tue Nov 16 11:29:37 2021
# On host fv-az77-509 platform Linux version 5.11.0-1020-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, NotificationType, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32, iso, Integer32, enterprises, MibIdentifier, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "NotificationType", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "iso", "Integer32", "enterprises", "MibIdentifier", "TimeTicks", "Gauge32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eisa-based", 1), ("pci-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('mandatory')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('mandatory')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('mandatory')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("dell", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVendor.setStatus('mandatory')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('mandatory')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('mandatory')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productGuiUrl.setStatus('mandatory')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productApiUrl.setStatus('mandatory')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('mandatory')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartnerSerialNum.setStatus('mandatory')
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x86", 1), ("alpha", 2), ("mips", 3), ("sparc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productCPUArch.setStatus('mandatory')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTrapData.setStatus('mandatory')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMachineType.setStatus('mandatory')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUpTime.setStatus('mandatory')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTime.setStatus('mandatory')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTimePerCent.setStatus('mandatory')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTime.setStatus('mandatory')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTimePerCent.setStatus('mandatory')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCount.setStatus('mandatory')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSwitchInvocations.setStatus('mandatory')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuContextSwitches.setStatus('mandatory')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('mandatory')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterrupts.setStatus('mandatory')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCPInterruptPercent.setStatus('mandatory')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setStatus('mandatory')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setStatus('mandatory')
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNfsOps.setStatus('mandatory')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetRcvdKB.setStatus('mandatory')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetSentKB.setStatus('mandatory')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatus.setStatus('mandatory')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNfsOps.setStatus('mandatory')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNfsOps.setStatus('mandatory')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighCifsOps.setStatus('mandatory')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowCifsOps.setStatus('mandatory')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighHttpOps.setStatus('mandatory')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowHttpOps.setStatus('mandatory')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setStatus('mandatory')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setStatus('mandatory')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetSentBytes.setStatus('mandatory')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetSentBytes.setStatus('mandatory')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskReadBytes.setStatus('mandatory')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskReadBytes.setStatus('mandatory')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setStatus('mandatory')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setStatus('mandatory')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeReadBytes.setStatus('mandatory')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeReadBytes.setStatus('mandatory')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setStatus('mandatory')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setStatus('mandatory')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCacheAge.setStatus('mandatory')
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setStatus('mandatory')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatusMessage.setStatus('mandatory')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setStatus('mandatory')
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSettings.setStatus('mandatory')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfState.setStatus('mandatory')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCannotTakeoverCause.setStatus('mandatory')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerStatus.setStatus('mandatory')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setStatus('mandatory')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerName.setStatus('mandatory')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerSysid.setStatus('mandatory')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfInterconnectStatus.setStatus('mandatory')
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envOverTemperature.setStatus('mandatory')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanCount.setStatus('mandatory')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanMessage.setStatus('mandatory')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setStatus('mandatory')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setStatus('mandatory')
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramBatteryStatus.setStatus('mandatory')
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTime.setStatus('mandatory')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromTimerOps.setStatus('mandatory')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSnapshotOps.setStatus('mandatory')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowWaterOps.setStatus('mandatory')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromHighWaterOps.setStatus('mandatory')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLogFullOps.setStatus('mandatory')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpOps.setStatus('mandatory')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotalOps.setStatus('mandatory')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromFlushOps.setStatus('mandatory')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSyncOps.setStatus('mandatory')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowVbufOps.setStatus('mandatory')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpDeferredOps.setStatus('mandatory')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setStatus('mandatory')
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("smtpFailure", 2), ("postFailure", 3), ("smtp-postFailure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatus.setStatus('mandatory')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatusMessage.setStatus('mandatory')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportSuccessfulSends.setStatus('mandatory')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportFailedSends.setStatus('mandatory')
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcCalls.setStatus('mandatory')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadCalls.setStatus('mandatory')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcNullRecvs.setStatus('mandatory')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadLens.setStatus('mandatory')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcServXDRCalls.setStatus('mandatory')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpCalls.setStatus('mandatory')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadCalls.setStatus('mandatory')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpNullRecvs.setStatus('mandatory')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadLens.setStatus('mandatory')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setStatus('mandatory')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpCalls.setStatus('mandatory')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadCalls.setStatus('mandatory')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpNullRecvs.setStatus('mandatory')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadLens.setStatus('mandatory')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setStatus('mandatory')
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCalls.setStatus('mandatory')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServBadCalls.setStatus('mandatory')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cNulls.setStatus('mandatory')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cGetattrs.setStatus('mandatory')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSetattrs.setStatus('mandatory')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRoots.setStatus('mandatory')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLookups.setStatus('mandatory')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReadlinks.setStatus('mandatory')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReads.setStatus('mandatory')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrcaches.setStatus('mandatory')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrites.setStatus('mandatory')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cCreates.setStatus('mandatory')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRemoves.setStatus('mandatory')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRenames.setStatus('mandatory')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLinks.setStatus('mandatory')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSymlinks.setStatus('mandatory')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cMkdirs.setStatus('mandatory')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRmdirs.setStatus('mandatory')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReaddirs.setStatus('mandatory')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cStatfss.setStatus('mandatory')
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pNulls.setStatus('mandatory')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pGetattrs.setStatus('mandatory')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSetattrs.setStatus('mandatory')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRoots.setStatus('mandatory')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLookups.setStatus('mandatory')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReadlinks.setStatus('mandatory')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReads.setStatus('mandatory')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrcaches.setStatus('mandatory')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrites.setStatus('mandatory')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pCreates.setStatus('mandatory')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRemoves.setStatus('mandatory')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRenames.setStatus('mandatory')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLinks.setStatus('mandatory')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSymlinks.setStatus('mandatory')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pMkdirs.setStatus('mandatory')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRmdirs.setStatus('mandatory')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReaddirs.setStatus('mandatory')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pStatfss.setStatus('mandatory')
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccNulls.setStatus('mandatory')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccGetattrs.setStatus('mandatory')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSetattrs.setStatus('mandatory')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRoots.setStatus('mandatory')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLookups.setStatus('mandatory')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReadlinks.setStatus('mandatory')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReads.setStatus('mandatory')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrcaches.setStatus('mandatory')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrites.setStatus('mandatory')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccCreates.setStatus('mandatory')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRemoves.setStatus('mandatory')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRenames.setStatus('mandatory')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLinks.setStatus('mandatory')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSymlinks.setStatus('mandatory')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccMkdirs.setStatus('mandatory')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRmdirs.setStatus('mandatory')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReaddirs.setStatus('mandatory')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccStatfss.setStatus('mandatory')
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpNulls.setStatus('mandatory')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpGetattrs.setStatus('mandatory')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSetattrs.setStatus('mandatory')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRoots.setStatus('mandatory')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLookups.setStatus('mandatory')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReadlinks.setStatus('mandatory')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReads.setStatus('mandatory')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrcaches.setStatus('mandatory')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrites.setStatus('mandatory')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpCreates.setStatus('mandatory')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRemoves.setStatus('mandatory')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRenames.setStatus('mandatory')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLinks.setStatus('mandatory')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSymlinks.setStatus('mandatory')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpMkdirs.setStatus('mandatory')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRmdirs.setStatus('mandatory')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReaddirs.setStatus('mandatory')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpStatfss.setStatus('mandatory')
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cNulls.setStatus('mandatory')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cGetattrs.setStatus('mandatory')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSetattrs.setStatus('mandatory')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLookups.setStatus('mandatory')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cAccesss.setStatus('mandatory')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReadlinks.setStatus('mandatory')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReads.setStatus('mandatory')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cWrites.setStatus('mandatory')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCreates.setStatus('mandatory')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMkdirs.setStatus('mandatory')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSymlinks.setStatus('mandatory')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMknods.setStatus('mandatory')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRemoves.setStatus('mandatory')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRmdirs.setStatus('mandatory')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRenames.setStatus('mandatory')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLinks.setStatus('mandatory')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirs.setStatus('mandatory')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirPluss.setStatus('mandatory')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsstats.setStatus('mandatory')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsinfos.setStatus('mandatory')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cPathconfs.setStatus('mandatory')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCommits.setStatus('mandatory')
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pNulls.setStatus('mandatory')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pGetattrs.setStatus('mandatory')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSetattrs.setStatus('mandatory')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLookups.setStatus('mandatory')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pAccesss.setStatus('mandatory')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReadlinks.setStatus('mandatory')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReads.setStatus('mandatory')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pWrites.setStatus('mandatory')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCreates.setStatus('mandatory')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMkdirs.setStatus('mandatory')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSymlinks.setStatus('mandatory')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMknods.setStatus('mandatory')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRemoves.setStatus('mandatory')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRmdirs.setStatus('mandatory')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRenames.setStatus('mandatory')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLinks.setStatus('mandatory')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirs.setStatus('mandatory')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirPluss.setStatus('mandatory')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsstats.setStatus('mandatory')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsinfos.setStatus('mandatory')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pPathconfs.setStatus('mandatory')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCommits.setStatus('mandatory')
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccNulls.setStatus('mandatory')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccGetattrs.setStatus('mandatory')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSetattrs.setStatus('mandatory')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLookups.setStatus('mandatory')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccAccesss.setStatus('mandatory')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReadlinks.setStatus('mandatory')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReads.setStatus('mandatory')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccWrites.setStatus('mandatory')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCreates.setStatus('mandatory')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMkdirs.setStatus('mandatory')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSymlinks.setStatus('mandatory')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMknods.setStatus('mandatory')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRemoves.setStatus('mandatory')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRmdirs.setStatus('mandatory')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRenames.setStatus('mandatory')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLinks.setStatus('mandatory')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirs.setStatus('mandatory')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirPluss.setStatus('mandatory')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsstats.setStatus('mandatory')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsinfos.setStatus('mandatory')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccPathconfs.setStatus('mandatory')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCommits.setStatus('mandatory')
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpNulls.setStatus('mandatory')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpGetattrs.setStatus('mandatory')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSetattrs.setStatus('mandatory')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLookups.setStatus('mandatory')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpAccesss.setStatus('mandatory')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReadlinks.setStatus('mandatory')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReads.setStatus('mandatory')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpWrites.setStatus('mandatory')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCreates.setStatus('mandatory')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMkdirs.setStatus('mandatory')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSymlinks.setStatus('mandatory')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMknods.setStatus('mandatory')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRemoves.setStatus('mandatory')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRmdirs.setStatus('mandatory')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRenames.setStatus('mandatory')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLinks.setStatus('mandatory')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirs.setStatus('mandatory')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirPluss.setStatus('mandatory')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsstats.setStatus('mandatory')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsinfos.setStatus('mandatory')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpPathconfs.setStatus('mandatory')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCommits.setStatus('mandatory')
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcInProgressHits.setStatus('mandatory')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcDelayHits.setStatus('deprecated')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMisses.setStatus('mandatory')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemDoneHits.setStatus('mandatory')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setStatus('mandatory')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpInProgressHits.setStatus('mandatory')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpDelayHits.setStatus('deprecated')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpMisses.setStatus('mandatory')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setStatus('mandatory')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setStatus('mandatory')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpInProgressHits.setStatus('mandatory')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpDelayHits.setStatus('deprecated')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpMisses.setStatus('mandatory')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setStatus('mandatory')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setStatus('mandatory')
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read512Calls.setStatus('mandatory')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read1KCalls.setStatus('mandatory')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read2KCalls.setStatus('mandatory')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read4KCalls.setStatus('mandatory')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read8KCalls.setStatus('mandatory')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read16KCalls.setStatus('mandatory')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read32KCalls.setStatus('mandatory')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read64KCalls.setStatus('mandatory')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read128KCalls.setStatus('mandatory')
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write512Calls.setStatus('mandatory')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write1KCalls.setStatus('mandatory')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write2KCalls.setStatus('mandatory')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write4KCalls.setStatus('mandatory')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write8KCalls.setStatus('mandatory')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write16KCalls.setStatus('mandatory')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write32KCalls.setStatus('mandatory')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write64KCalls.setStatus('mandatory')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write128KCalls.setStatus('mandatory')
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read512Calls.setStatus('mandatory')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read1KCalls.setStatus('mandatory')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read2KCalls.setStatus('mandatory')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read4KCalls.setStatus('mandatory')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read8KCalls.setStatus('mandatory')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read16KCalls.setStatus('mandatory')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read32KCalls.setStatus('mandatory')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read64KCalls.setStatus('mandatory')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read128KCalls.setStatus('mandatory')
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write512Calls.setStatus('mandatory')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write1KCalls.setStatus('mandatory')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write2KCalls.setStatus('mandatory')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write4KCalls.setStatus('mandatory')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write8KCalls.setStatus('mandatory')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write16KCalls.setStatus('mandatory')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write32KCalls.setStatus('mandatory')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write64KCalls.setStatus('mandatory')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write128KCalls.setStatus('mandatory')
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pclTable.setStatus('mandatory')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "pclIpAddr"))
if mibBuilder.loadTexts: pclEntry.setStatus('mandatory')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclIpAddr.setStatus('mandatory')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcCalls.setStatus('mandatory')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadCalls.setStatus('mandatory')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcNullRecvs.setStatus('mandatory')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadLens.setStatus('mandatory')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcServXDRCalls.setStatus('mandatory')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsCalls.setStatus('mandatory')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsServBadCalls.setStatus('mandatory')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Nulls.setStatus('mandatory')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Getattrs.setStatus('mandatory')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Setattrs.setStatus('mandatory')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Roots.setStatus('mandatory')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Lookups.setStatus('mandatory')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readlinks.setStatus('mandatory')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Reads.setStatus('mandatory')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setStatus('mandatory')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Writes.setStatus('mandatory')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Creates.setStatus('mandatory')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Removes.setStatus('mandatory')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Renames.setStatus('mandatory')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Links.setStatus('mandatory')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Symlinks.setStatus('mandatory')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setStatus('mandatory')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setStatus('mandatory')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readdirs.setStatus('mandatory')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Statfss.setStatus('mandatory')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Nulls.setStatus('mandatory')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Getattrs.setStatus('mandatory')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Setattrs.setStatus('mandatory')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Lookups.setStatus('mandatory')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Accesss.setStatus('mandatory')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readlinks.setStatus('mandatory')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Reads.setStatus('mandatory')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Writes.setStatus('mandatory')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Creates.setStatus('mandatory')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setStatus('mandatory')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Symlinks.setStatus('mandatory')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mknods.setStatus('mandatory')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Removes.setStatus('mandatory')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setStatus('mandatory')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Renames.setStatus('mandatory')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Links.setStatus('mandatory')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readdirs.setStatus('mandatory')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setStatus('mandatory')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsstats.setStatus('mandatory')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setStatus('mandatory')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setStatus('mandatory')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Commits.setStatus('mandatory')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclPerCent.setStatus('mandatory')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setStatus('mandatory')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setStatus('mandatory')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setStatus('mandatory')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setStatus('mandatory')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setStatus('mandatory')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setStatus('mandatory')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setStatus('mandatory')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setStatus('mandatory')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setStatus('mandatory')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setStatus('mandatory')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setStatus('mandatory')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setStatus('mandatory')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setStatus('mandatory')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setStatus('mandatory')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setStatus('mandatory')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setStatus('mandatory')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setStatus('mandatory')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setStatus('mandatory')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setStatus('mandatory')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setStatus('mandatory')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setStatus('mandatory')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setStatus('mandatory')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setStatus('mandatory')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setStatus('mandatory')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setStatus('mandatory')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setStatus('mandatory')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setStatus('mandatory')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setStatus('mandatory')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setStatus('mandatory')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setStatus('mandatory')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setStatus('mandatory')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setStatus('mandatory')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setStatus('mandatory')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setStatus('mandatory')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setStatus('mandatory')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setStatus('mandatory')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setStatus('mandatory')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setStatus('mandatory')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setStatus('mandatory')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setStatus('mandatory')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setStatus('mandatory')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setStatus('mandatory')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setStatus('mandatory')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setStatus('mandatory')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setStatus('mandatory')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setStatus('mandatory')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setStatus('mandatory')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setStatus('mandatory')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setStatus('mandatory')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setStatus('mandatory')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setStatus('mandatory')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setStatus('mandatory')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setStatus('mandatory')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setStatus('mandatory')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setStatus('mandatory')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setStatus('mandatory')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setStatus('mandatory')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setStatus('mandatory')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setStatus('mandatory')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setStatus('mandatory')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setStatus('mandatory')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setStatus('mandatory')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setStatus('mandatory')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setStatus('mandatory')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setStatus('mandatory')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setStatus('mandatory')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setStatus('mandatory')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setStatus('mandatory')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setStatus('mandatory')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setStatus('mandatory')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setStatus('mandatory')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setStatus('mandatory')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setStatus('mandatory')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setStatus('mandatory')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setStatus('mandatory')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setStatus('mandatory')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNumber.setStatus('mandatory')
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcCalls.setStatus('mandatory')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadCalls.setStatus('mandatory')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcNullRecvs.setStatus('mandatory')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadLens.setStatus('mandatory')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcServXDRCalls.setStatus('mandatory')
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsCalls.setStatus('mandatory')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsServBadCalls.setStatus('mandatory')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cNulls.setStatus('mandatory')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cGetattrs.setStatus('mandatory')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSetattrs.setStatus('mandatory')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRoots.setStatus('mandatory')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLookups.setStatus('mandatory')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReadlinks.setStatus('mandatory')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReads.setStatus('mandatory')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrcaches.setStatus('mandatory')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrites.setStatus('mandatory')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cCreates.setStatus('mandatory')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRemoves.setStatus('mandatory')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRenames.setStatus('mandatory')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLinks.setStatus('mandatory')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSymlinks.setStatus('mandatory')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cMkdirs.setStatus('mandatory')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRmdirs.setStatus('mandatory')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReaddirs.setStatus('mandatory')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cStatfss.setStatus('mandatory')
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pNulls.setStatus('mandatory')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pGetattrs.setStatus('mandatory')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSetattrs.setStatus('mandatory')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRoots.setStatus('mandatory')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLookups.setStatus('mandatory')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReadlinks.setStatus('mandatory')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReads.setStatus('mandatory')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrcaches.setStatus('mandatory')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrites.setStatus('mandatory')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pCreates.setStatus('mandatory')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRemoves.setStatus('mandatory')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRenames.setStatus('mandatory')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLinks.setStatus('mandatory')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSymlinks.setStatus('mandatory')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pMkdirs.setStatus('mandatory')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRmdirs.setStatus('mandatory')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReaddirs.setStatus('mandatory')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pStatfss.setStatus('mandatory')
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccNulls.setStatus('mandatory')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccGetattrs.setStatus('mandatory')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSetattrs.setStatus('mandatory')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRoots.setStatus('mandatory')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLookups.setStatus('mandatory')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReadlinks.setStatus('mandatory')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReads.setStatus('mandatory')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrcaches.setStatus('mandatory')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrites.setStatus('mandatory')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccCreates.setStatus('mandatory')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRemoves.setStatus('mandatory')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRenames.setStatus('mandatory')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLinks.setStatus('mandatory')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSymlinks.setStatus('mandatory')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccMkdirs.setStatus('mandatory')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRmdirs.setStatus('mandatory')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReaddirs.setStatus('mandatory')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccStatfss.setStatus('mandatory')
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpNulls.setStatus('mandatory')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpGetattrs.setStatus('mandatory')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSetattrs.setStatus('mandatory')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRoots.setStatus('mandatory')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLookups.setStatus('mandatory')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReadlinks.setStatus('mandatory')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReads.setStatus('mandatory')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrcaches.setStatus('mandatory')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrites.setStatus('mandatory')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpCreates.setStatus('mandatory')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRemoves.setStatus('mandatory')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRenames.setStatus('mandatory')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLinks.setStatus('mandatory')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSymlinks.setStatus('mandatory')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpMkdirs.setStatus('mandatory')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRmdirs.setStatus('mandatory')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReaddirs.setStatus('mandatory')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpStatfss.setStatus('mandatory')
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cNulls.setStatus('mandatory')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cGetattrs.setStatus('mandatory')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSetattrs.setStatus('mandatory')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLookups.setStatus('mandatory')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cAccesss.setStatus('mandatory')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReadlinks.setStatus('mandatory')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReads.setStatus('mandatory')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cWrites.setStatus('mandatory')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCreates.setStatus('mandatory')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMkdirs.setStatus('mandatory')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSymlinks.setStatus('mandatory')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMknods.setStatus('mandatory')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRemoves.setStatus('mandatory')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRmdirs.setStatus('mandatory')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRenames.setStatus('mandatory')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLinks.setStatus('mandatory')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirs.setStatus('mandatory')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirPluss.setStatus('mandatory')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsstats.setStatus('mandatory')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsinfos.setStatus('mandatory')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cPathconfs.setStatus('mandatory')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCommits.setStatus('mandatory')
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pNulls.setStatus('mandatory')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pGetattrs.setStatus('mandatory')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSetattrs.setStatus('mandatory')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLookups.setStatus('mandatory')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pAccesss.setStatus('mandatory')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReadlinks.setStatus('mandatory')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReads.setStatus('mandatory')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pWrites.setStatus('mandatory')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCreates.setStatus('mandatory')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMkdirs.setStatus('mandatory')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSymlinks.setStatus('mandatory')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMknods.setStatus('mandatory')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRemoves.setStatus('mandatory')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRmdirs.setStatus('mandatory')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRenames.setStatus('mandatory')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLinks.setStatus('mandatory')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirs.setStatus('mandatory')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirPluss.setStatus('mandatory')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsstats.setStatus('mandatory')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsinfos.setStatus('mandatory')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pPathconfs.setStatus('mandatory')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCommits.setStatus('mandatory')
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccNulls.setStatus('mandatory')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccGetattrs.setStatus('mandatory')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSetattrs.setStatus('mandatory')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLookups.setStatus('mandatory')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccAccesss.setStatus('mandatory')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReadlinks.setStatus('mandatory')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReads.setStatus('mandatory')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccWrites.setStatus('mandatory')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCreates.setStatus('mandatory')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMkdirs.setStatus('mandatory')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSymlinks.setStatus('mandatory')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMknods.setStatus('mandatory')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRemoves.setStatus('mandatory')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRmdirs.setStatus('mandatory')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRenames.setStatus('mandatory')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLinks.setStatus('mandatory')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirs.setStatus('mandatory')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirPluss.setStatus('mandatory')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsstats.setStatus('mandatory')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsinfos.setStatus('mandatory')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccPathconfs.setStatus('mandatory')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCommits.setStatus('mandatory')
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpNulls.setStatus('mandatory')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpGetattrs.setStatus('mandatory')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSetattrs.setStatus('mandatory')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLookups.setStatus('mandatory')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpAccesss.setStatus('mandatory')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReadlinks.setStatus('mandatory')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReads.setStatus('mandatory')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpWrites.setStatus('mandatory')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCreates.setStatus('mandatory')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMkdirs.setStatus('mandatory')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSymlinks.setStatus('mandatory')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMknods.setStatus('mandatory')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRemoves.setStatus('mandatory')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRmdirs.setStatus('mandatory')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRenames.setStatus('mandatory')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLinks.setStatus('mandatory')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirs.setStatus('mandatory')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirPluss.setStatus('mandatory')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsstats.setStatus('mandatory')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsinfos.setStatus('mandatory')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpPathconfs.setStatus('mandatory')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCommits.setStatus('mandatory')
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcInProgressHits.setStatus('mandatory')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcDelayHits.setStatus('deprecated')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcMisses.setStatus('mandatory')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemDoneHits.setStatus('mandatory')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setStatus('mandatory')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpInProgressHits.setStatus('mandatory')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpDelayHits.setStatus('deprecated')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpMisses.setStatus('mandatory')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setStatus('mandatory')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setStatus('mandatory')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpInProgressHits.setStatus('mandatory')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpDelayHits.setStatus('deprecated')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpMisses.setStatus('mandatory')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setStatus('mandatory')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setStatus('mandatory')
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read512Calls.setStatus('mandatory')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read1KCalls.setStatus('mandatory')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read2KCalls.setStatus('mandatory')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read4KCalls.setStatus('mandatory')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read8KCalls.setStatus('mandatory')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read16KCalls.setStatus('mandatory')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read32KCalls.setStatus('mandatory')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read64KCalls.setStatus('mandatory')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read128KCalls.setStatus('mandatory')
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write512Calls.setStatus('mandatory')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write1KCalls.setStatus('mandatory')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write2KCalls.setStatus('mandatory')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write4KCalls.setStatus('mandatory')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write8KCalls.setStatus('mandatory')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write16KCalls.setStatus('mandatory')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write32KCalls.setStatus('mandatory')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write64KCalls.setStatus('mandatory')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write128KCalls.setStatus('mandatory')
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read512Calls.setStatus('mandatory')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read1KCalls.setStatus('mandatory')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read2KCalls.setStatus('mandatory')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read4KCalls.setStatus('mandatory')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read8KCalls.setStatus('mandatory')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read16KCalls.setStatus('mandatory')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read32KCalls.setStatus('mandatory')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read64KCalls.setStatus('mandatory')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read128KCalls.setStatus('mandatory')
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write512Calls.setStatus('mandatory')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write1KCalls.setStatus('mandatory')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write2KCalls.setStatus('mandatory')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write4KCalls.setStatus('mandatory')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write8KCalls.setStatus('mandatory')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write16KCalls.setStatus('mandatory')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write32KCalls.setStatus('mandatory')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write64KCalls.setStatus('mandatory')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write128KCalls.setStatus('mandatory')
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsIsLicensed.setStatus('mandatory')
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaState.setStatus('deprecated')
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInitPercent.setStatus('deprecated')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3), )
if mibBuilder.loadTexts: qrTable.setStatus('deprecated')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrIndex"))
if mibBuilder.loadTexts: qrEntry.setStatus('deprecated')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrIndex.setStatus('deprecated')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrTypeUser", 1), ("qrTypeGroup", 2), ("qrTypeTree", 3), ("qrTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrType.setStatus('deprecated')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrId.setStatus('deprecated')
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesUsed.setStatus('deprecated')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesLimit.setStatus('deprecated')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFilesUsed.setStatus('deprecated')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFileLimit.setStatus('deprecated')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrPathName.setStatus('deprecated')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4), )
if mibBuilder.loadTexts: qvStateTable.setStatus('mandatory')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qvStateVolume"))
if mibBuilder.loadTexts: qvStateEntry.setStatus('mandatory')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVolume.setStatus('mandatory')
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateName.setStatus('mandatory')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateStat.setStatus('mandatory')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateInitPercent.setStatus('mandatory')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5), )
if mibBuilder.loadTexts: qrVTable.setStatus('deprecated')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrVVolume"), (0, "NETWORK-APPLIANCE-MIB", "qrVIndex"))
if mibBuilder.loadTexts: qrVEntry.setStatus('deprecated')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIndex.setStatus('deprecated')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrVTypeUser", 1), ("qrVTypeGroup", 2), ("qrVTypeTree", 3), ("qrVTypeUserDefault", 4), ("qrVTypeGroupDefault", 5), ("qrVTypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVType.setStatus('deprecated')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVId.setStatus('deprecated')
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesUsed.setStatus('deprecated')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimit.setStatus('deprecated')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFilesUsed.setStatus('deprecated')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimit.setStatus('deprecated')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVPathName.setStatus('deprecated')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVVolume.setStatus('deprecated')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVTree.setStatus('deprecated')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrVIdValid", 1), ("qrVSidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIdType.setStatus('deprecated')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVSid.setStatus('deprecated')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesThreshold.setStatus('deprecated')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setStatus('deprecated')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimitSoft.setStatus('deprecated')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6), )
if mibBuilder.loadTexts: qrV2Table.setStatus('mandatory')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrV2Volume"), (0, "NETWORK-APPLIANCE-MIB", "qrV2Index"))
if mibBuilder.loadTexts: qrV2Entry.setStatus('mandatory')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Index.setStatus('mandatory')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrV2TypeUser", 1), ("qrV2TypeGroup", 2), ("qrV2TypeTree", 3), ("qrV2TypeUserDefault", 4), ("qrV2TypeGroupDefault", 5), ("qrV2TypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Type.setStatus('mandatory')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Id.setStatus('mandatory')
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setStatus('mandatory')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setStatus('mandatory')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setStatus('mandatory')
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setStatus('mandatory')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setStatus('mandatory')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FilesUsed.setStatus('mandatory')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setStatus('mandatory')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileLimit.setStatus('mandatory')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2PathName.setStatus('mandatory')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Volume.setStatus('mandatory')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Tree.setStatus('mandatory')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrV2IdValid", 1), ("qrV2SidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2IdType.setStatus('mandatory')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Sid.setStatus('mandatory')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setStatus('mandatory')
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setStatus('mandatory')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setStatus('mandatory')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setStatus('mandatory')
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setStatus('mandatory')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setStatus('mandatory')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setStatus('mandatory')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileLimit.setStatus('mandatory')
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesAvail.setStatus('deprecated')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesUsed.setStatus('deprecated')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesPossible.setStatus('deprecated')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4), )
if mibBuilder.loadTexts: dfTable.setStatus('mandatory')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dfIndex"))
if mibBuilder.loadTexts: dfEntry.setStatus('mandatory')
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfIndex.setStatus('mandatory')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfFileSys.setStatus('mandatory')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesTotal.setStatus('mandatory')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesUsed.setStatus('mandatory')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesAvail.setStatus('mandatory')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setStatus('mandatory')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesUsed.setStatus('mandatory')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesFree.setStatus('mandatory')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setStatus('mandatory')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMountedOn.setStatus('mandatory')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesAvail.setStatus('mandatory')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesUsed.setStatus('mandatory')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesPossible.setStatus('mandatory')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighTotalKBytes.setStatus('mandatory')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowTotalKBytes.setStatus('mandatory')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighUsedKBytes.setStatus('mandatory')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowUsedKBytes.setStatus('mandatory')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighAvailKBytes.setStatus('mandatory')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowAvailKBytes.setStatus('mandatory')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unmounted", 1), ("mounted", 2), ("frozen", 3), ("destroying", 4), ("creating", 5), ("mounting", 6), ("unmounting", 7), ("nofsinfo", 8), ("replaying", 9), ("replayed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStatus.setStatus('mandatory')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("uninitialized", 2), ("needcpcheck", 3), ("cpcheckwait", 4), ("unmirrored", 5), ("normal", 6), ("degraded", 7), ("resyncing", 8), ("failed", 9), ("limbo", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMirrorStatus.setStatus('mandatory')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPlexCount.setStatus('mandatory')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfType.setStatus('mandatory')
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1), )
if mibBuilder.loadTexts: slTable.setStatus('deprecated')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slIndex"))
if mibBuilder.loadTexts: slEntry.setStatus('deprecated')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slIndex.setStatus('deprecated')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMonth.setStatus('deprecated')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDay.setStatus('deprecated')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHour.setStatus('deprecated')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMinutes.setStatus('deprecated')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slName.setStatus('deprecated')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2), )
if mibBuilder.loadTexts: slVTable.setStatus('mandatory')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slVVolume"), (0, "NETWORK-APPLIANCE-MIB", "slVIndex"))
if mibBuilder.loadTexts: slVEntry.setStatus('mandatory')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVIndex.setStatus('mandatory')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMonth.setStatus('mandatory')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVDay.setStatus('mandatory')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVHour.setStatus('mandatory')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMinutes.setStatus('mandatory')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVName.setStatus('mandatory')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolume.setStatus('mandatory')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVNumber.setStatus('mandatory')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolumeName.setStatus('mandatory')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVType.setStatus('mandatory')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3), )
if mibBuilder.loadTexts: slQTable.setStatus('mandatory')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slQVolume"), (0, "NETWORK-APPLIANCE-MIB", "slQQtree"), (0, "NETWORK-APPLIANCE-MIB", "slQIndex"))
if mibBuilder.loadTexts: slQEntry.setStatus('mandatory')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQIndex.setStatus('mandatory')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolume.setStatus('mandatory')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtree.setStatus('mandatory')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotName.setStatus('mandatory')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotTime.setStatus('mandatory')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeName.setStatus('mandatory')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replica", 1), ("transitioning", 2), ("original", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeContent.setStatus('mandatory')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSource.setStatus('mandatory')
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSourceTime.setStatus('mandatory')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolumeName.setStatus('mandatory')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfNumber.setStatus('mandatory')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("nearlyFull", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOverallStatus.setStatus('mandatory')
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusMessage.setStatus('mandatory')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setStatus('mandatory')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setStatus('mandatory')
fsMaxUsedReservedPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedReservedPerCent.setStatus('mandatory')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8), )
if mibBuilder.loadTexts: volTable.setStatus('mandatory')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('mandatory')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('mandatory')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('mandatory')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFSID.setStatus('mandatory')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOwningHost.setStatus('mandatory')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volState.setStatus('mandatory')
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('mandatory')
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOptions.setStatus('mandatory')
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volUUID.setStatus('mandatory')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volAggrName.setStatus('optional')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("flexible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volType.setStatus('optional')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volClone.setStatus('optional')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneOf.setStatus('optional')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneSnap.setStatus('optional')
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNumber.setStatus('mandatory')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10), )
if mibBuilder.loadTexts: qtreeTable.setStatus('mandatory')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qtreeVolume"), (0, "NETWORK-APPLIANCE-MIB", "qtreeIndex"))
if mibBuilder.loadTexts: qtreeEntry.setStatus('mandatory')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIndex.setStatus('mandatory')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolume.setStatus('mandatory')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolumeName.setStatus('mandatory')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeId.setStatus('mandatory')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeName.setStatus('mandatory')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unix", 1), ("ntfs", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStyle.setStatus('mandatory')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("snapmirrored", 2), ("snapvaulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStatus.setStatus('mandatory')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeOplock.setStatus('mandatory')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11), )
if mibBuilder.loadTexts: aggrTable.setStatus('mandatory')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "aggrIndex"))
if mibBuilder.loadTexts: aggrEntry.setStatus('mandatory')
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrIndex.setStatus('mandatory')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrName.setStatus('mandatory')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFSID.setStatus('mandatory')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwningHost.setStatus('mandatory')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrState.setStatus('mandatory')
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrStatus.setStatus('mandatory')
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOptions.setStatus('mandatory')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrUUID.setStatus('mandatory')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFlexvollist.setStatus('mandatory')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("aggregate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrType.setStatus('mandatory')
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrNumber.setStatus('mandatory')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1), )
if mibBuilder.loadTexts: raidTable.setStatus('deprecated')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('deprecated')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('deprecated')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskName.setStatus('deprecated')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("addingSpare", 7), ("spare", 8), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('deprecated')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskId.setStatus('deprecated')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiAdapter.setStatus('deprecated')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiId.setStatus('deprecated')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedMb.setStatus('deprecated')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedBlocks.setStatus('deprecated')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalMb.setStatus('deprecated')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalBlocks.setStatus('deprecated')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCompletionPerCent.setStatus('deprecated')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2), )
if mibBuilder.loadTexts: raidVTable.setStatus('mandatory')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidVVol"), (0, "NETWORK-APPLIANCE-MIB", "raidVGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidVIndex"))
if mibBuilder.loadTexts: raidVEntry.setStatus('mandatory')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVIndex.setStatus('mandatory')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskName.setStatus('mandatory')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVStatus.setStatus('mandatory')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskId.setStatus('mandatory')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiAdapter.setStatus('mandatory')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiId.setStatus('mandatory')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedMb.setStatus('mandatory')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedBlocks.setStatus('mandatory')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalMb.setStatus('mandatory')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalBlocks.setStatus('mandatory')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCompletionPerCent.setStatus('mandatory')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVVol.setStatus('mandatory')
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroup.setStatus('mandatory')
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskNumber.setStatus('mandatory')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroupNumber.setStatus('mandatory')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPort.setStatus('mandatory')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskName.setStatus('mandatory')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setStatus('mandatory')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVShelf.setStatus('mandatory')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVBay.setStatus('mandatory')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlex.setStatus('mandatory')
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexGroup.setStatus('mandatory')
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexNumber.setStatus('mandatory')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexName.setStatus('mandatory')
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSectorSize.setStatus('mandatory')
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskSerialNumber.setStatus('mandatory')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskVendor.setStatus('mandatory')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskModel.setStatus('mandatory')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setStatus('mandatory')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskRPM.setStatus('mandatory')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskType.setStatus('mandatory')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPool.setStatus('mandatory')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setStatus('mandatory')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3), )
if mibBuilder.loadTexts: spareTable.setStatus('mandatory')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareEntry.setStatus('mandatory')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('mandatory')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskName.setStatus('mandatory')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spare", 1), ("addingspare", 2), ("bypassed", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareStatus.setStatus('mandatory')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskId.setStatus('mandatory')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiAdapter.setStatus('mandatory')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiId.setStatus('mandatory')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalMb.setStatus('mandatory')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalBlocks.setStatus('mandatory')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskPort.setStatus('mandatory')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskName.setStatus('mandatory')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskPort.setStatus('mandatory')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareShelf.setStatus('mandatory')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareBay.setStatus('mandatory')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePool.setStatus('mandatory')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSectorSize.setStatus('mandatory')
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskSerialNumber.setStatus('mandatory')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskVendor.setStatus('mandatory')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskModel.setStatus('mandatory')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setStatus('mandatory')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskRPM.setStatus('mandatory')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskType.setStatus('mandatory')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalCount.setStatus('mandatory')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskActiveCount.setStatus('mandatory')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingCount.setStatus('mandatory')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingParityCount.setStatus('mandatory')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVerifyingParityCount.setStatus('mandatory')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskScrubbingCount.setStatus('mandatory')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedCount.setStatus('mandatory')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSpareCount.setStatus('mandatory')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAddingSpareCount.setStatus('mandatory')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedMessage.setStatus('mandatory')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrefailedCount.setStatus('mandatory')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVNumber.setStatus('mandatory')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumber.setStatus('mandatory')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskNumber.setStatus('mandatory')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPNumber.setStatus('mandatory')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9), )
if mibBuilder.loadTexts: otherDiskTable.setStatus('mandatory')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "otherDiskIndex"))
if mibBuilder.loadTexts: otherDiskEntry.setStatus('mandatory')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskIndex.setStatus('mandatory')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskName.setStatus('mandatory')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broken", 1), ("bypassed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskStatus.setStatus('mandatory')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskId.setStatus('mandatory')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiAdapter.setStatus('mandatory')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiId.setStatus('mandatory')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalMb.setStatus('mandatory')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalBlocks.setStatus('mandatory')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskPort.setStatus('mandatory')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setStatus('mandatory')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setStatus('mandatory')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskShelf.setStatus('mandatory')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskBay.setStatus('mandatory')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskPool.setStatus('mandatory')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSectorSize.setStatus('mandatory')
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSerialNumber.setStatus('mandatory')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskVendor.setStatus('mandatory')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskModel.setStatus('mandatory')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setStatus('mandatory')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskRPM.setStatus('mandatory')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskType.setStatus('mandatory')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10), )
if mibBuilder.loadTexts: raidPTable.setStatus('mandatory')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidPVol"), (0, "NETWORK-APPLIANCE-MIB", "raidPPlex"), (0, "NETWORK-APPLIANCE-MIB", "raidPGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidPIndex"))
if mibBuilder.loadTexts: raidPEntry.setStatus('mandatory')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPIndex.setStatus('mandatory')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPStatus.setStatus('mandatory')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPVol.setStatus('mandatory')
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlex.setStatus('mandatory')
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroup.setStatus('mandatory')
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexNumber.setStatus('mandatory')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroupNumber.setStatus('mandatory')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskNumber.setStatus('mandatory')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexName.setStatus('mandatory')
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskName.setStatus('mandatory')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPort.setStatus('mandatory')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskName.setStatus('mandatory')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setStatus('mandatory')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiAdapter.setStatus('mandatory')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiId.setStatus('mandatory')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskId.setStatus('mandatory')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPShelf.setStatus('mandatory')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPBay.setStatus('mandatory')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSectorSize.setStatus('mandatory')
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedMb.setStatus('mandatory')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedBlocks.setStatus('mandatory')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalMb.setStatus('mandatory')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalBlocks.setStatus('mandatory')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCompletionPerCent.setStatus('mandatory')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskSerialNumber.setStatus('mandatory')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskVendor.setStatus('mandatory')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskModel.setStatus('mandatory')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setStatus('mandatory')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskRPM.setStatus('mandatory')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskType.setStatus('mandatory')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPool.setStatus('mandatory')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setStatus('mandatory')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11), )
if mibBuilder.loadTexts: plexTable.setStatus('mandatory')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "plexIndex"))
if mibBuilder.loadTexts: plexEntry.setStatus('mandatory')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexIndex.setStatus('mandatory')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('mandatory')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexVolName.setStatus('mandatory')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("resyncing", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStatus.setStatus('mandatory')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexPercentResyncing.setStatus('mandatory')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCount.setStatus('mandatory')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13), )
if mibBuilder.loadTexts: outOfDateDiskTable.setStatus('mandatory')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "outOfDateDiskIndex"))
if mibBuilder.loadTexts: outOfDateDiskEntry.setStatus('mandatory')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskIndex.setStatus('mandatory')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskName.setStatus('mandatory')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskId.setStatus('mandatory')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setStatus('mandatory')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiId.setStatus('mandatory')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setStatus('mandatory')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setStatus('mandatory')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setStatus('mandatory')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setStatus('mandatory')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setStatus('mandatory')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskShelf.setStatus('mandatory')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskBay.setStatus('mandatory')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskPool.setStatus('mandatory')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setStatus('mandatory')
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setStatus('mandatory')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskVendor.setStatus('mandatory')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskModel.setStatus('mandatory')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setStatus('mandatory')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskRPM.setStatus('mandatory')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskType.setStatus('mandatory')
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsEnabled.setStatus('mandatory')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLoginEnabled.setStatus('mandatory')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsHostName.setStatus('mandatory')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAltNames.setStatus('mandatory')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainJoined.setStatus('mandatory')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainName.setStatus('mandatory')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWGName.setStatus('mandatory')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDCName.setStatus('mandatory')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsWinsEnabled.setStatus('mandatory')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWinsServers.setStatus('mandatory')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSecurityModel.setStatus('mandatory')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPCGenericUser.setStatus('mandatory')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOplocksEnabled.setStatus('mandatory')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setStatus('mandatory')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-preserve-case", 1), ("preserve-case", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPreserveCase.setStatus('mandatory')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinksEnabled.setStatus('mandatory')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setStatus('mandatory')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLicensed.setStatus('mandatory')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setStatus('mandatory')
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatus.setStatus('mandatory')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNeedPW.setStatus('mandatory')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTimeToShutdown.setStatus('mandatory')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxConnections.setStatus('mandatory')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxTrees.setStatus('mandatory')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxShares.setStatus('mandatory')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxFiles.setStatus('mandatory')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxACLs.setStatus('mandatory')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsConnectedUsers.setStatus('mandatory')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTrees.setStatus('mandatory')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNShares.setStatus('mandatory')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNSessions.setStatus('mandatory')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenFiles.setStatus('mandatory')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenDirs.setStatus('mandatory')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setStatus('mandatory')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockAckWaits.setStatus('mandatory')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSuspectOps.setStatus('mandatory')
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalOps.setStatus('mandatory')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalCalls.setStatus('mandatory')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsBadCalls.setStatus('mandatory')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetAttrs.setStatus('mandatory')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReads.setStatus('mandatory')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWrites.setStatus('mandatory')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLocks.setStatus('mandatory')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpens.setStatus('mandatory')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDirOps.setStatus('mandatory')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOthers.setStatus('mandatory')
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProts.setStatus('mandatory')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXs.setStatus('mandatory')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXs.setStatus('mandatory')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXs.setStatus('mandatory')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnects.setStatus('mandatory')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setStatus('mandatory')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchos.setStatus('mandatory')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancels.setStatus('mandatory')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCreateAndXs.setStatus('mandatory')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactCreates.setStatus('mandatory')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaries.setStatus('mandatory')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXs.setStatus('mandatory')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXs.setStatus('mandatory')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXs.setStatus('mandatory')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeeks.setStatus('mandatory')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushes.setStatus('mandatory')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCloses.setStatus('mandatory')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletes.setStatus('mandatory')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenames.setStatus('mandatory')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMoves.setStatus('mandatory')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopies.setStatus('mandatory')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setStatus('mandatory')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setStatus('mandatory')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setStatus('mandatory')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setStatus('mandatory')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirs.setStatus('mandatory')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirs.setStatus('mandatory')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setStatus('mandatory')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2s.setStatus('mandatory')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2s.setStatus('mandatory')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setStatus('mandatory')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setStatus('mandatory')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setStatus('mandatory')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFiles.setStatus('mandatory')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueues.setStatus('mandatory')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctls.setStatus('mandatory')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setStatus('mandatory')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setStatus('mandatory')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirs.setStatus('mandatory')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNs.setStatus('mandatory')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOthers.setStatus('mandatory')
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setStatus('mandatory')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreates.setStatus('mandatory')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirs.setStatus('mandatory')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNews.setStatus('mandatory')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReads.setStatus('mandatory')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRanges.setStatus('mandatory')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpens.setStatus('mandatory')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXs.setStatus('mandatory')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExits.setStatus('mandatory')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfos.setStatus('mandatory')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setStatus('mandatory')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReads.setStatus('mandatory')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXs.setStatus('mandatory')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRaws.setStatus('mandatory')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchs.setStatus('mandatory')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfos.setStatus('mandatory')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2s.setStatus('mandatory')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setStatus('mandatory')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setStatus('mandatory')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnects.setStatus('mandatory')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setStatus('mandatory')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWrites.setStatus('mandatory')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setStatus('mandatory')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setStatus('mandatory')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXs.setStatus('mandatory')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setStatus('mandatory')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRaws.setStatus('mandatory')
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProtPct.setStatus('mandatory')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setStatus('mandatory')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXPct.setStatus('mandatory')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setStatus('mandatory')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setStatus('mandatory')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setStatus('mandatory')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchoPct.setStatus('mandatory')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelPct.setStatus('mandatory')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateAndXPct.setStatus('mandatory')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTransactCreatePct.setStatus('mandatory')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaryPct.setStatus('mandatory')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXPct.setStatus('mandatory')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXPct.setStatus('mandatory')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXPct.setStatus('mandatory')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeekPct.setStatus('mandatory')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushPct.setStatus('mandatory')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbClosePct.setStatus('mandatory')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletePct.setStatus('mandatory')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenamePct.setStatus('mandatory')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMovePct.setStatus('mandatory')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopyPct.setStatus('mandatory')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setStatus('mandatory')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setStatus('mandatory')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setStatus('mandatory')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setStatus('mandatory')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirPct.setStatus('mandatory')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirPct.setStatus('mandatory')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setStatus('mandatory')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setStatus('mandatory')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2Pct.setStatus('mandatory')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setStatus('mandatory')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setStatus('mandatory')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setStatus('mandatory')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFilePct.setStatus('mandatory')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueuePct.setStatus('mandatory')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setStatus('mandatory')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setStatus('mandatory')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setStatus('mandatory')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setStatus('mandatory')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNPct.setStatus('mandatory')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOtherPct.setStatus('mandatory')
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setStatus('mandatory')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreatePct.setStatus('mandatory')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirPct.setStatus('mandatory')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNewPct.setStatus('mandatory')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setStatus('mandatory')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setStatus('mandatory')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenPct.setStatus('mandatory')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setStatus('mandatory')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExitPct.setStatus('mandatory')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setStatus('mandatory')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setStatus('mandatory')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadPct.setStatus('mandatory')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXPct.setStatus('mandatory')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRawPct.setStatus('mandatory')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchPct.setStatus('mandatory')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfoPct.setStatus('mandatory')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setStatus('mandatory')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setStatus('mandatory')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setStatus('mandatory')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setStatus('mandatory')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setStatus('mandatory')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePct.setStatus('mandatory')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setStatus('mandatory')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setStatus('mandatory')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setStatus('mandatory')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setStatus('mandatory')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRawPct.setStatus('mandatory')
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCancelLocks.setStatus('mandatory')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWaitLocks.setStatus('mandatory')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCopyToAligns.setStatus('mandatory')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmalls.setStatus('mandatory')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLarges.setStatus('mandatory')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmallRels.setStatus('mandatory')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLargeRels.setStatus('mandatory')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMbufWaits.setStatus('mandatory')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNbtWaits.setStatus('mandatory')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCwaWaits.setStatus('mandatory')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMultipleVCs.setStatus('mandatory')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPDCUpcalls.setStatus('mandatory')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setStatus('mandatory')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNBTDisconnects.setStatus('mandatory')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSMBDisconnects.setStatus('mandatory')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDupDisconnects.setStatus('mandatory')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setStatus('mandatory')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setStatus('mandatory')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setStatus('mandatory')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setStatus('mandatory')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setStatus('mandatory')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setStatus('mandatory')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharingErrorRetries.setStatus('mandatory')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setStatus('mandatory')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setStatus('mandatory')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setStatus('mandatory')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setStatus('mandatory')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setStatus('mandatory')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClearTextPasswd.setStatus('mandatory')
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsEnabled.setStatus('mandatory')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsLicensed.setStatus('mandatory')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIsEnabled.setStatus('mandatory')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpIsEnabled.setStatus('mandatory')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsEnabled.setStatus('mandatory')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsLicensed.setStatus('mandatory')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setStatus('mandatory')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setStatus('mandatory')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setStatus('mandatory')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setStatus('mandatory')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setStatus('mandatory')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setStatus('mandatory')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setStatus('mandatory')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setStatus('mandatory')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setStatus('mandatory')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsEnabled.setStatus('mandatory')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsLicensed.setStatus('mandatory')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setStatus('mandatory')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setStatus('mandatory')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setStatus('mandatory')
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setStatus('mandatory')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setStatus('mandatory')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCdIsEnabled.setStatus('mandatory')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setStatus('mandatory')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setStatus('mandatory')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCmsIsEnabled.setStatus('mandatory')
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncVersion.setStatus('mandatory')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAdminPort.setStatus('mandatory')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amNumber.setStatus('mandatory')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitor.setStatus('mandatory')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitorString.setStatus('mandatory')
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: amTable.setStatus('mandatory')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "amIndex"))
if mibBuilder.loadTexts: amEntry.setStatus('mandatory')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amIndex.setStatus('mandatory')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amAddress.setStatus('mandatory')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPort.setStatus('mandatory')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("up", 2), ("down", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amStatus.setStatus('mandatory')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigChanged.setStatus('mandatory')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigVersion.setStatus('mandatory')
grmmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitor.setStatus('mandatory')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorString.setStatus('mandatory')
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverAddrs.setStatus('mandatory')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("takingover", 2), ("takenover", 3), ("giveback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverMode.setStatus('mandatory')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("unknown", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverStatus.setStatus('mandatory')
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncObjectsStored.setStatus('mandatory')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToClients.setStatus('mandatory')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromClients.setStatus('mandatory')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToServers.setStatus('mandatory')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromServers.setStatus('mandatory')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRequests.setStatus('mandatory')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHitRequests.setStatus('mandatory')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpMissRequests.setStatus('mandatory')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpServConns.setStatus('mandatory')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpCliConns.setStatus('mandatory')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavings.setStatus('mandatory')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitrate.setStatus('mandatory')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setStatus('mandatory')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgRespTime.setStatus('mandatory')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setStatus('mandatory')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setStatus('mandatory')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setStatus('mandatory')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setStatus('mandatory')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setStatus('mandatory')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRespTime.setStatus('mandatory')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setStatus('mandatory')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setStatus('mandatory')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToClients.setStatus('mandatory')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromClients.setStatus('mandatory')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToServers.setStatus('mandatory')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromServers.setStatus('mandatory')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setStatus('mandatory')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setStatus('mandatory')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setStatus('mandatory')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setStatus('mandatory')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setStatus('mandatory')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setStatus('mandatory')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpReqRate.setStatus('mandatory')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setStatus('mandatory')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setStatus('mandatory')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setStatus('mandatory')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setStatus('mandatory')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setStatus('mandatory')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setStatus('mandatory')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveServConns.setStatus('mandatory')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveCliConns.setStatus('mandatory')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37), )
if mibBuilder.loadTexts: ncHttpAccelTable.setStatus('mandatory')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpAccelIndex"))
if mibBuilder.loadTexts: ncHttpAccelEntry.setStatus('mandatory')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelIndex.setStatus('mandatory')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setStatus('mandatory')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setStatus('mandatory')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelHits.setStatus('mandatory')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38), )
if mibBuilder.loadTexts: ncHttpsAccelTable.setStatus('mandatory')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpsAccelIndex"))
if mibBuilder.loadTexts: ncHttpsAccelEntry.setStatus('mandatory')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelIndex.setStatus('mandatory')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setStatus('mandatory')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setStatus('mandatory')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelHits.setStatus('mandatory')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpTotalRequests.setStatus('mandatory')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCacheableRequests.setStatus('mandatory')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpProxyRequests.setStatus('mandatory')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpServConns.setStatus('mandatory')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCliConns.setStatus('mandatory')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBWSavings.setStatus('mandatory')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setStatus('mandatory')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToClients.setStatus('mandatory')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromClients.setStatus('mandatory')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToServers.setStatus('mandatory')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromServers.setStatus('mandatory')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpObjHitrate.setStatus('mandatory')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveServConns.setStatus('mandatory')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveCliConns.setStatus('mandatory')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpTotalRequests.setStatus('mandatory')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpHitRequests.setStatus('mandatory')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpMissRequests.setStatus('mandatory')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpServConns.setStatus('mandatory')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpCliConns.setStatus('mandatory')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBWSavings.setStatus('mandatory')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setStatus('mandatory')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToClients.setStatus('mandatory')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromClients.setStatus('mandatory')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToServers.setStatus('mandatory')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromServers.setStatus('mandatory')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpObjHitrate.setStatus('mandatory')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveServConns.setStatus('mandatory')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveCliConns.setStatus('mandatory')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingServConns.setStatus('mandatory')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingCliConns.setStatus('mandatory')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingBWSavings.setStatus('mandatory')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setStatus('mandatory')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingHitRequests.setStatus('mandatory')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMissRequests.setStatus('mandatory')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingTotalRequests.setStatus('mandatory')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setStatus('mandatory')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setStatus('mandatory')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setStatus('mandatory')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setStatus('mandatory')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setStatus('mandatory')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setStatus('mandatory')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setStatus('mandatory')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setStatus('mandatory')
ncStreamingOndemandBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesToClients.setStatus('mandatory')
ncStreamingOndemandBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromClients.setStatus('mandatory')
ncStreamingOndemandBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesToServers.setStatus('mandatory')
ncStreamingOndemandBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromServers.setStatus('mandatory')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingObjHitrate.setStatus('mandatory')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setStatus('mandatory')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setStatus('mandatory')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setStatus('mandatory')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setStatus('mandatory')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setStatus('mandatory')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setStatus('mandatory')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setStatus('mandatory')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setStatus('mandatory')
ncStreamingQuickTimeBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToClients.setStatus('mandatory')
ncStreamingQuickTimeBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromClients.setStatus('mandatory')
ncStreamingQuickTimeBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToServers.setStatus('mandatory')
ncStreamingQuickTimeBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromServers.setStatus('mandatory')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setStatus('mandatory')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setStatus('mandatory')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setStatus('mandatory')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setStatus('mandatory')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setStatus('mandatory')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveServConns.setStatus('mandatory')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setStatus('mandatory')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setStatus('mandatory')
ncStreamingRtspWMBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromClients.setStatus('mandatory')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setStatus('mandatory')
ncStreamingRtspWMBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromServers.setStatus('mandatory')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setStatus('mandatory')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45), )
if mibBuilder.loadTexts: ncStreamingAccelTable.setStatus('mandatory')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncStreamingAccelIndex"))
if mibBuilder.loadTexts: ncStreamingAccelEntry.setStatus('mandatory')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelIndex.setStatus('mandatory')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setStatus('mandatory')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setStatus('mandatory')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelHits.setStatus('mandatory')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setStatus('mandatory')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncTotalBWSavings.setStatus('mandatory')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsRequestsReceived.setStatus('mandatory')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheHits.setStatus('mandatory')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheMisses.setStatus('mandatory')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setStatus('mandatory')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setStatus('mandatory')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setStatus('mandatory')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setStatus('mandatory')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setStatus('mandatory')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setStatus('mandatory')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setStatus('mandatory')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setStatus('mandatory')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setStatus('mandatory')
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setStatus('mandatory')
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setStatus('mandatory')
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setStatus('mandatory')
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setStatus('mandatory')
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemTotal.setStatus('mandatory')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemFree.setStatus('mandatory')
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorOn.setStatus('mandatory')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setStatus('mandatory')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setStatus('mandatory')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupNumber.setStatus('mandatory')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setStatus('mandatory')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setStatus('mandatory')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupAborts.setStatus('mandatory')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setStatus('mandatory')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setStatus('mandatory')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setStatus('mandatory')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorReadBytes.setStatus('mandatory')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setStatus('mandatory')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setStatus('mandatory')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setStatus('mandatory')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setStatus('mandatory')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setStatus('mandatory')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setStatus('mandatory')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setStatus('mandatory')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIsLicensed.setStatus('mandatory')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20), )
if mibBuilder.loadTexts: snapmirrorStatusTable.setStatus('mandatory')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorIndex"))
if mibBuilder.loadTexts: snapmirrorStatusEntry.setStatus('mandatory')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIndex.setStatus('mandatory')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSrc.setStatus('mandatory')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorDst.setStatus('mandatory')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("migrating", 5), ("quiescing", 6), ("resyncing", 7), ("waiting", 8), ("syncing", 9), ("in-sync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorStatus.setStatus('mandatory')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapmirrored", 2), ("broken-off", 3), ("quiesced", 4), ("source", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorState.setStatus('mandatory')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLag.setStatus('mandatory')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setStatus('mandatory')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setStatus('mandatory')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalFailures.setStatus('mandatory')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setStatus('mandatory')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setStatus('mandatory')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setStatus('mandatory')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorThrottleValue.setStatus('mandatory')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setStatus('mandatory')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setStatus('mandatory')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransType.setStatus('mandatory')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setStatus('mandatory')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setStatus('mandatory')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSchedule.setStatus('mandatory')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setStatus('mandatory')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorArguments.setStatus('mandatory')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setStatus('mandatory')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21), )
if mibBuilder.loadTexts: snapmirrorConnTable.setStatus('mandatory')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorConnIndex"))
if mibBuilder.loadTexts: snapmirrorConnEntry.setStatus('mandatory')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnIndex.setStatus('mandatory')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnName.setStatus('mandatory')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi", 1), ("failover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnType.setStatus('mandatory')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc1.setStatus('mandatory')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst1.setStatus('mandatory')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc2.setStatus('mandatory')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst2.setStatus('mandatory')
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svOn.setStatus('mandatory')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveDstNumber.setStatus('mandatory')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setStatus('mandatory')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setStatus('mandatory')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setStatus('mandatory')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setStatus('mandatory')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setStatus('mandatory')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setStatus('mandatory')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrimaryIsLicensed.setStatus('mandatory')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecondaryIsLicensed.setStatus('mandatory')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11), )
if mibBuilder.loadTexts: snapvaultStatusTable.setStatus('mandatory')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svIndex"))
if mibBuilder.loadTexts: snapvaultStatusEntry.setStatus('mandatory')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svIndex.setStatus('mandatory')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrc.setStatus('mandatory')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDst.setStatus('mandatory')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("quiescing", 6), ("resyncing", 7), ("paused", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatus.setStatus('mandatory')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapvaulted", 2), ("broken-off", 3), ("quiesced", 4), ("source", 5), ("unknown", 6), ("restoring", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svState.setStatus('mandatory')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLag.setStatus('mandatory')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalSuccesses.setStatus('mandatory')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalRestartSuccesses.setStatus('mandatory')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalFailures.setStatus('mandatory')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalDeferments.setStatus('mandatory')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransMBs.setStatus('mandatory')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setStatus('mandatory')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svThrottleValue.setStatus('mandatory')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrcSnapshotTime.setStatus('mandatory')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svBaseSnapshot.setStatus('mandatory')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransType.setStatus('mandatory')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransMBs.setStatus('mandatory')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransTimeSeconds.setStatus('mandatory')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12), )
if mibBuilder.loadTexts: snapvaultHostTable.setStatus('mandatory')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svHostIndex"))
if mibBuilder.loadTexts: snapvaultHostEntry.setStatus('mandatory')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostIndex.setStatus('mandatory')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostName.setStatus('mandatory')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostType.setStatus('mandatory')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalSuccesses.setStatus('mandatory')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalFailures.setStatus('mandatory')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalDeferments.setStatus('mandatory')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13), )
if mibBuilder.loadTexts: snapvaultSchedTable.setStatus('mandatory')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svSchedIndex"))
if mibBuilder.loadTexts: snapvaultSchedEntry.setStatus('mandatory')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedIndex.setStatus('mandatory')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedVolume.setStatus('mandatory')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSnapshot.setStatus('mandatory')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("queued", 2), ("active", 3), ("aborting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedStatus.setStatus('mandatory')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("xfer", 2), ("create", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedType.setStatus('mandatory')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSchedule.setStatus('mandatory')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setStatus('mandatory')
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpOn.setStatus('mandatory')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpSessionOpened.setStatus('mandatory')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupActive.setStatus('mandatory')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreActive.setStatus('mandatory')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpTapeActive.setStatus('mandatory')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupSuccesses.setStatus('mandatory')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setStatus('mandatory')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailures.setStatus('mandatory')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailures.setStatus('mandatory')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailureReason.setStatus('mandatory')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setStatus('mandatory')
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdOn.setStatus('mandatory')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdCurrentConns.setStatus('mandatory')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdMaxConns.setStatus('mandatory')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdTotalConns.setStatus('mandatory')
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricInstances.setStatus('mandatory')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2), )
if mibBuilder.loadTexts: fabricTable.setStatus('mandatory')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fabricIndex"))
if mibBuilder.loadTexts: fabricEntry.setStatus('mandatory')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricIndex.setStatus('mandatory')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatus.setStatus('mandatory')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatusMessage.setStatus('mandatory')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricName.setStatus('mandatory')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("other", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricOwner.setStatus('mandatory')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3), )
if mibBuilder.loadTexts: switchTable.setStatus('mandatory')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "switchFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('mandatory')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIndex.setStatus('mandatory')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchName.setStatus('mandatory')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSymbolicName.setStatus('mandatory')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hub", 1), ("switch", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('mandatory')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDomain.setStatus('mandatory')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchManagementId.setStatus('mandatory')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatus.setStatus('mandatory')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatusMessage.setStatus('mandatory')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLinkSpeed.setStatus('mandatory')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsProcessed.setStatus('mandatory')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsProcessed.setStatus('mandatory')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsRejected.setStatus('mandatory')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsRejected.setStatus('mandatory')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFabricIndex.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "portFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "portSwitchIndex"), (0, "NETWORK-APPLIANCE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchIndex.setStatus('mandatory')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchName.setStatus('mandatory')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unidentified", 1), ("n-port", 2), ("nl-port", 3), ("f-port", 4), ("fl-port", 5), ("e-port", 6), ("b-port", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('mandatory')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFabricIndex.setStatus('mandatory')
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpActives.setStatus('mandatory')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpAttempts.setStatus('mandatory')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpSuccesses.setStatus('mandatory')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpFailures.setStatus('mandatory')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5), )
if mibBuilder.loadTexts: dmpTable.setStatus('mandatory')
dmpSubtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dmpIndex"))
if mibBuilder.loadTexts: dmpSubtreeEntry.setStatus('mandatory')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpIndex.setStatus('mandatory')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStPath.setStatus('mandatory')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStAttempts.setStatus('mandatory')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStSuccesses.setStatus('mandatory')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStFailures.setStatus('mandatory')
lastdump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6))
lastsuccess = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7))
dmpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpTime.setStatus('mandatory')
dmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("restartable", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStatus.setStatus('mandatory')
dmpLevel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpLevel.setStatus('mandatory')
dmpNumFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpNumFiles.setStatus('mandatory')
dmpDataAmount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDataAmount.setStatus('mandatory')
dmpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStartTime.setStatus('mandatory')
dmpDuration = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDuration.setStatus('mandatory')
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstActives.setStatus('mandatory')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstAttempts.setStatus('mandatory')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstSuccesses.setStatus('mandatory')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstFailures.setStatus('mandatory')
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsIsLicensed.setStatus('optional')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestsServer.setStatus('optional')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequests.setStatus('optional')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestSize.setStatus('mandatory')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxResponseSize.setStatus('mandatory')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setStatus('optional')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsUseChecksums.setStatus('mandatory')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setStatus('optional')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setStatus('mandatory')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerEnabled.setStatus('mandatory')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultUid.setStatus('mandatory')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultGid.setStatus('mandatory')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setStatus('mandatory')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setStatus('mandatory')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2), )
if mibBuilder.loadTexts: dafsNicTable.setStatus('mandatory')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsNicIndex"))
if mibBuilder.loadTexts: dafsNicEntry.setStatus('mandatory')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicIndex.setStatus('mandatory')
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicName.setStatus('mandatory')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDevice.setStatus('mandatory')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicState.setStatus('mandatory')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicListenAddr.setStatus('mandatory')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setStatus('optional')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicInBytes.setStatus('mandatory')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectInBytes.setStatus('mandatory')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicOutBytes.setStatus('mandatory')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setStatus('mandatory')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsPendingRequests.setStatus('optional')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCurrentRequests.setStatus('optional')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCalls.setStatus('mandatory')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientAuths.setStatus('mandatory')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnects.setStatus('mandatory')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnectAuths.setStatus('mandatory')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsConnectBinds.setStatus('mandatory')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDisconnects.setStatus('mandatory')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRegisterCreds.setStatus('mandatory')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReleaseCreds.setStatus('mandatory')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSecinfos.setStatus('mandatory')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerAuths.setStatus('mandatory')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCheckResponses.setStatus('mandatory')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsFetchResponses.setStatus('mandatory')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDiscardResponses.setStatus('mandatory')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAccesses.setStatus('mandatory')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCacheHints.setStatus('mandatory')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCloses.setStatus('mandatory')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCommits.setStatus('mandatory')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCreates.setStatus('mandatory')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegPurges.setStatus('mandatory')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegReturns.setStatus('mandatory')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFsattrs.setStatus('mandatory')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetRootHandles.setStatus('mandatory')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrInlines.setStatus('mandatory')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrDirects.setStatus('mandatory')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLinks.setStatus('mandatory')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLocks.setStatus('mandatory')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockts.setStatus('mandatory')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockus.setStatus('mandatory')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUps.setStatus('mandatory')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUpps.setStatus('mandatory')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNulls.setStatus('mandatory')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNverifys.setStatus('mandatory')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpens.setStatus('mandatory')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenDowngrades.setStatus('mandatory')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenattrs.setStatus('mandatory')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadInlines.setStatus('mandatory')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadDirects.setStatus('mandatory')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirInlines.setStatus('mandatory')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirDirects.setStatus('mandatory')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkInlines.setStatus('mandatory')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkDirects.setStatus('mandatory')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRemoves.setStatus('mandatory')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRenames.setStatus('mandatory')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrInlines.setStatus('mandatory')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrDirects.setStatus('mandatory')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsVerifys.setStatus('mandatory')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBatchSubmits.setStatus('mandatory')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteInlines.setStatus('mandatory')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteDirects.setStatus('mandatory')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcGetattrs.setStatus('mandatory')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcNulls.setStatus('mandatory')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcRecalls.setStatus('mandatory')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcBatchCompletions.setStatus('mandatory')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendInlines.setStatus('mandatory')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendDirects.setStatus('mandatory')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFencingLists.setStatus('mandatory')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetFencingLists.setStatus('mandatory')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsHurryUps.setStatus('mandatory')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsInBytes.setStatus('mandatory')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectInBytes.setStatus('mandatory')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOutBytes.setStatus('mandatory')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectOutBytes.setStatus('mandatory')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5), )
if mibBuilder.loadTexts: dafsSessionTable.setStatus('mandatory')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsSessionIndex"))
if mibBuilder.loadTexts: dafsSessionEntry.setStatus('mandatory')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionIndex.setStatus('mandatory')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionId.setStatus('mandatory')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionEndian.setStatus('mandatory')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setStatus('mandatory')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setStatus('mandatory')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionUseChecksums.setStatus('mandatory')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setStatus('mandatory')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setStatus('mandatory')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setStatus('mandatory')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequests.setStatus('mandatory')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setStatus('mandatory')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientIdString.setStatus('mandatory')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientVerifier.setStatus('mandatory')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumCredentials.setStatus('mandatory')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumRequests.setStatus('mandatory')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6), )
if mibBuilder.loadTexts: dafsExportTable.setStatus('mandatory')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsExportIndex"))
if mibBuilder.loadTexts: dafsExportEntry.setStatus('mandatory')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportIndex.setStatus('mandatory')
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportName.setStatus('mandatory')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportPath.setStatus('mandatory')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportEnabled.setStatus('mandatory')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("readmostly", 2), ("readonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportRwMode.setStatus('mandatory')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportAccessList.setStatus('mandatory')
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNodeSystemName.setStatus('mandatory')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCreated.setStatus('mandatory')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectRequest.setStatus('mandatory')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectWait.setStatus('mandatory')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaDisconnect.setStatus('mandatory')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectTimeOut.setStatus('mandatory')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnected.setStatus('mandatory')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectPending.setStatus('mandatory')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setStatus('mandatory')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnected.setStatus('mandatory')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrError.setStatus('mandatory')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaTotalError.setStatus('mandatory')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInMsgs.setStatus('mandatory')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRdma.setStatus('mandatory')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInBytes.setStatus('mandatory')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAReadBytes.setStatus('mandatory')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setStatus('mandatory')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutMsgs.setStatus('mandatory')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRdma.setStatus('mandatory')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutBytes.setStatus('mandatory')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setStatus('mandatory')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setStatus('mandatory')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23), )
if mibBuilder.loadTexts: viaConnTable.setStatus('mandatory')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaConnVINumber"))
if mibBuilder.loadTexts: viaConnEntry.setStatus('mandatory')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("pendingConnect", 2), ("connected", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnState.setStatus('mandatory')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnVINumber.setStatus('mandatory')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setStatus('mandatory')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalNetAddress.setStatus('mandatory')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemotePortNumber.setStatus('mandatory')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalPortNumber.setStatus('mandatory')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalDescriminator.setStatus('mandatory')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setStatus('mandatory')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setStatus('mandatory')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setStatus('mandatory')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setStatus('mandatory')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setStatus('mandatory')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setStatus('mandatory')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setStatus('mandatory')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentMessages.setStatus('mandatory')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setStatus('mandatory')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setStatus('mandatory')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdMessages.setStatus('mandatory')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setStatus('mandatory')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setStatus('mandatory')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrPostDesc.setStatus('mandatory')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrConnLost.setStatus('mandatory')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRecvQEmpty.setStatus('mandatory')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmawProt.setStatus('mandatory')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmarProt.setStatus('mandatory')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrCompProt.setStatus('mandatory')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viaErrorThreshold.setStatus('mandatory')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1), )
if mibBuilder.loadTexts: viaNicTable.setStatus('mandatory')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaNicIndex"))
if mibBuilder.loadTexts: viaNicEntry.setStatus('mandatory')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicIndex.setStatus('mandatory')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaName.setStatus('mandatory')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaHardwareVersion.setStatus('mandatory')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaProviderVersion.setStatus('mandatory')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicAddress.setStatus('mandatory')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaThreadSafe.setStatus('mandatory')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setStatus('mandatory')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBytes.setStatus('mandatory')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterRegions.setStatus('mandatory')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setStatus('mandatory')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxVI.setStatus('mandatory')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setStatus('mandatory')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setStatus('mandatory')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQ.setStatus('mandatory')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQEntries.setStatus('mandatory')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxTransferSize.setStatus('mandatory')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNativeMTU.setStatus('mandatory')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxPTags.setStatus('mandatory')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterBytes.setStatus('mandatory')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterRegions.setStatus('mandatory')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrVI.setStatus('mandatory')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrCQ.setStatus('mandatory')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrPTags.setStatus('mandatory')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectionListenPort.setStatus('mandatory')
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfilerIsLicensed.setStatus('mandatory')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFilers.setStatus('mandatory')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3), )
if mibBuilder.loadTexts: vfTable.setStatus('mandatory')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfIndex"))
if mibBuilder.loadTexts: vfEntry.setStatus('mandatory')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIndex.setStatus('mandatory')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfName.setStatus('mandatory')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfUuid.setStatus('mandatory')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddresses.setStatus('mandatory')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfStoragePaths.setStatus('mandatory')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpSpace.setStatus('mandatory')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfAllowedProtocols.setStatus('mandatory')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDisallowedProtocols.setStatus('mandatory')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfState.setStatus('mandatory')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4), )
if mibBuilder.loadTexts: vfIpTable.setStatus('mandatory')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFiIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfIpIndex"))
if mibBuilder.loadTexts: vfIpEntry.setStatus('mandatory')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFiIndex.setStatus('mandatory')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpIndex.setStatus('mandatory')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddr.setStatus('mandatory')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5), )
if mibBuilder.loadTexts: vfSpTable.setStatus('mandatory')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFsIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfSpIndex"))
if mibBuilder.loadTexts: vfSpEntry.setStatus('mandatory')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFsIndex.setStatus('mandatory')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpIndex.setStatus('mandatory')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpName.setStatus('mandatory')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6), )
if mibBuilder.loadTexts: vfProTable.setStatus('mandatory')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFpIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfProIndex"))
if mibBuilder.loadTexts: vfProEntry.setStatus('mandatory')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFpIndex.setStatus('mandatory')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProIndex.setStatus('mandatory')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProName.setStatus('mandatory')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProStatus.setStatus('mandatory')
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpIsLicensed.setStatus('mandatory')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIsLicensed.setStatus('mandatory')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowReadBytes.setStatus('mandatory')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighReadBytes.setStatus('mandatory')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowWriteBytes.setStatus('mandatory')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighWriteBytes.setStatus('mandatory')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowReadBytes.setStatus('mandatory')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighReadBytes.setStatus('mandatory')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowWriteBytes.setStatus('mandatory')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighWriteBytes.setStatus('mandatory')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighOps.setStatus('mandatory')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowOps.setStatus('mandatory')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighOps.setStatus('mandatory')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowOps.setStatus('mandatory')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCount.setStatus('mandatory')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('mandatory')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('mandatory')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('mandatory')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('mandatory')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunComment.setStatus('mandatory')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('mandatory')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('mandatory')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapped.setStatus('mandatory')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('mandatory')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunQtreeName.setStatus('mandatory')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOps.setStatus('mandatory')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOps.setStatus('mandatory')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadBytes.setStatus('mandatory')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadBytes.setStatus('mandatory')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteBytes.setStatus('mandatory')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteBytes.setStatus('mandatory')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighErrors.setStatus('mandatory')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowErrors.setStatus('mandatory')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunOnline.setStatus('mandatory')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapStatus.setStatus('mandatory')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("write", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunShareStatus.setStatus('mandatory')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSpaceReserved.setStatus('mandatory')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatsResetTime.setStatus('mandatory')
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadOps.setStatus('mandatory')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadOps.setStatus('mandatory')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteOps.setStatus('mandatory')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteOps.setStatus('mandatory')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOtherOps.setStatus('mandatory')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOtherOps.setStatus('mandatory')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3), )
if mibBuilder.loadTexts: lunMapTable.setStatus('mandatory')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunMapLUNIndex"), (0, "NETWORK-APPLIANCE-MIB", "lunMapInitiatorGroupIndex"))
if mibBuilder.loadTexts: lunMapEntry.setStatus('mandatory')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNIndex.setStatus('mandatory')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setStatus('mandatory')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNName.setStatus('mandatory')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setStatus('mandatory')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setStatus('mandatory')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1), )
if mibBuilder.loadTexts: initiatorGroupTable.setStatus('mandatory')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupIndex"))
if mibBuilder.loadTexts: initiatorGroupEntry.setStatus('mandatory')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupIndex.setStatus('mandatory')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupName.setStatus('mandatory')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupType.setStatus('mandatory')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("default", 1), ("solaris", 2), ("windows", 3), ("hpux", 4), ("aix", 5), ("linux", 6), ("default-partner", 7), ("netware", 8), ("vmware", 9), ("invalid", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupOS.setStatus('mandatory')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setStatus('mandatory')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setStatus('mandatory')
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUsePartner.setStatus('mandatory')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2), )
if mibBuilder.loadTexts: initiatorGroupMemberTable.setStatus('mandatory')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberNameIndex"))
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setStatus('mandatory')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setStatus('mandatory')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setStatus('mandatory')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorName.setStatus('mandatory')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3), )
if mibBuilder.loadTexts: initiatorListTable.setStatus('mandatory')
initiatorListMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorListMemberEntryIndex"))
if mibBuilder.loadTexts: initiatorListMemberEntry.setStatus('mandatory')
initiatorListMemberEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorListMemberEntryIndex.setStatus('mandatory')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetAdapterName.setStatus('mandatory')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorNodeName.setStatus('mandatory')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortName.setStatus('mandatory')
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorType.setStatus('mandatory')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorIsid.setStatus('mandatory')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setStatus('mandatory')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1), )
if mibBuilder.loadTexts: fcpTargetTable.setStatus('mandatory')
fcpTargetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fcpTargetTableIndex"))
if mibBuilder.loadTexts: fcpTargetTableEntry.setStatus('mandatory')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTableIndex.setStatus('mandatory')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetName.setStatus('mandatory')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetNN.setStatus('mandatory')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPN.setStatus('mandatory')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetSpeed.setStatus('mandatory')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("startup", 1), ("uninitialized", 2), ("initializing-fw", 3), ("link-not-connected", 4), ("waiting-for-link-up", 5), ("online", 6), ("link-disconnected", 7), ("resetting", 8), ("offline", 9), ("offlined-by-user-system", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStatus.setStatus('mandatory')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStandby.setStatus('mandatory')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("point-to-point", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTopology.setStatus('mandatory')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("physical", 1), ("local", 2), ("standby", 3), ("partner", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetType.setStatus('mandatory')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))).clone(namedValues=NamedValues(("mixed", 1), ("standby", 2), ("partner", 3), ("partner-proxy", 4), ("partner-standby", 5), ("local-primary", 6), ("dual-fabric", 7), ("ssi", 8), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpCfMode.setStatus('mandatory')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1), )
if mibBuilder.loadTexts: psetTable.setStatus('mandatory')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetIndex"))
if mibBuilder.loadTexts: psetEntry.setStatus('mandatory')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetIndex.setStatus('mandatory')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetName.setStatus('mandatory')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetType.setStatus('mandatory')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2), )
if mibBuilder.loadTexts: psetMemberTable.setStatus('mandatory')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "psetMemberNameIndex"))
if mibBuilder.loadTexts: psetMemberEntry.setStatus('mandatory')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberIndex.setStatus('mandatory')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberNameIndex.setStatus('mandatory')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortName.setStatus('mandatory')
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsEnabled.setStatus('mandatory')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsLicensed.setStatus('mandatory')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setStatus('mandatory')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToClients.setStatus('mandatory')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setStatus('mandatory')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToServers.setStatus('mandatory')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheTotalRequests.setStatus('mandatory')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHitRequests.setStatus('mandatory')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissRequests.setStatus('mandatory')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setStatus('mandatory')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setStatus('mandatory')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheEjectRequests.setStatus('mandatory')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setStatus('mandatory')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheRpcRecords.setStatus('mandatory')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBWSavings.setStatus('mandatory')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setStatus('mandatory')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setStatus('mandatory')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setStatus('mandatory')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setStatus('mandatory')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setStatus('mandatory')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setStatus('mandatory')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setStatus('mandatory')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setStatus('mandatory')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setStatus('mandatory')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setStatus('mandatory')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setStatus('mandatory')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setStatus('mandatory')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setStatus('mandatory')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setStatus('mandatory')
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('mandatory')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2), )
if mibBuilder.loadTexts: enclTable.setStatus('mandatory')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('mandatory')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('mandatory')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("transitioning", 2), ("active", 3), ("inactive", 4), ("reconfiguring", 5), ("nonexistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclContactState.setStatus('mandatory')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannelShelfAddr.setStatus('mandatory')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductLogicalID.setStatus('mandatory')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductID.setStatus('mandatory')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductVendor.setStatus('mandatory')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductModel.setStatus('mandatory')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductRevision.setStatus('mandatory')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductSerialNo.setStatus('mandatory')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberDiskBays.setStatus('mandatory')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDisksPresent.setStatus('mandatory')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setStatus('mandatory')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setStatus('mandatory')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setStatus('mandatory')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setStatus('mandatory')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansMaximum.setStatus('mandatory')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansPresent.setStatus('mandatory')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansFailed.setStatus('mandatory')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsMaximum.setStatus('mandatory')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsPresent.setStatus('mandatory')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setStatus('mandatory')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setStatus('mandatory')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setStatus('mandatory')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setStatus('mandatory')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setStatus('mandatory')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setStatus('mandatory')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setStatus('mandatory')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setStatus('mandatory')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setStatus('mandatory')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsMaximum.setStatus('mandatory')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPresent.setStatus('mandatory')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsSerialNos.setStatus('mandatory')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsFailed.setStatus('mandatory')
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifNumber.setStatus('mandatory')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2), )
if mibBuilder.loadTexts: netifTable.setStatus('mandatory')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "netifIndex"))
if mibBuilder.loadTexts: netifEntry.setStatus('mandatory')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifIndex.setStatus('mandatory')
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifDescr.setStatus('mandatory')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInOctets.setStatus('mandatory')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInOctets.setStatus('mandatory')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUcastPkts.setStatus('mandatory')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUcastPkts.setStatus('mandatory')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInNUcastPkts.setStatus('mandatory')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInNUcastPkts.setStatus('mandatory')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInDiscards.setStatus('mandatory')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInDiscards.setStatus('mandatory')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInErrors.setStatus('mandatory')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInErrors.setStatus('mandatory')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUnknownProtos.setStatus('mandatory')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUnknownProtos.setStatus('mandatory')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutOctets.setStatus('mandatory')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutOctets.setStatus('mandatory')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutUcastPkts.setStatus('mandatory')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutUcastPkts.setStatus('mandatory')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setStatus('mandatory')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setStatus('mandatory')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutDiscards.setStatus('mandatory')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutDiscards.setStatus('mandatory')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutErrors.setStatus('mandatory')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutErrors.setStatus('mandatory')
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,2))
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,6))
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,7))
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,11))
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,12))
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,13))
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,14))
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,15))
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,16))
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,17))
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,18))
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,21))
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,22))
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,26))
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,31))
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,33))
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,35))
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,36))
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,41))
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,43))
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,45))
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,46))
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,55))
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,56))
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,62))
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,63))
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,72))
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,75))
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,76))
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,82))
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,85))
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,86))
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,91))
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,95))
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,96))
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,103))
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,106))
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,111))
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,113))
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,115))
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,116))
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,126))
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,127))
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,134))
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,135))
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,136))
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,142))
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,143))
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,144))
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,145))
upsLinePowerRetored = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,146))
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,151))
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,152))
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,153))
appError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,154))
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,155))
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,156))
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,157))
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,158))
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,162))
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,166))
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,167))
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,176))
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,177))
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,187))
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,192))
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,195))
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,204))
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,206))
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,216))
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,222))
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,224))
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,226))
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,237))
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,238))
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,245))
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,246))
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,254))
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,255))
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,256))
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,257))
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,266))
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,272))
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,274))
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,275))
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,276))
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,283))
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,284))
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,294))
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,296))
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,297))
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,298))
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,304))
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,314))
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,324))
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,334))
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,344))
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,354))
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,364))
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,366))
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,371))
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,372))
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,375))
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,376))
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,381))
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,383))
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,386))
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,391))
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,392))
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,393))
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,394))
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,395))
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,396))
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,397))
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,403))
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,406))
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,412))
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,413))
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,414))
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,415))
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,416))
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,424))
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,435))
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,444))
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,454))
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,482))
maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,485))
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", viaInBytes=viaInBytes, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, snapmirrorSrc=snapmirrorSrc, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, dafsSessionNumRequests=dafsSessionNumRequests, nfs=nfs, tv3cpCreates=tv3cpCreates, upsBatteryWarning=upsBatteryWarning, tv3Calls=tv3Calls, amEntry=amEntry, softQuotaExceeded=softQuotaExceeded, v3pCommits=v3pCommits, tv2cpRenames=tv2cpRenames, dfPerCentInodeCapacity=dfPerCentInodeCapacity, svTotalFailures=svTotalFailures, qrFileLimit=qrFileLimit, otherDiskEntry=otherDiskEntry, rpcUdpBadLens=rpcUdpBadLens, viaMaxTransferSize=viaMaxTransferSize, v3cReaddirPluss=v3cReaddirPluss, shelfFault=shelfFault, vfFilers=vfFilers, ifHighOutErrors=ifHighOutErrors, v3cpReads=v3cpReads, viaConnEntry=viaConnEntry, raidPDiskSerialNumber=raidPDiskSerialNumber, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, v3Write4KCalls=v3Write4KCalls, vfProStatus=vfProStatus, dafsBatchSubmits=dafsBatchSubmits, cpFromTimerOps=cpFromTimerOps, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, tv2Write128KCalls=tv2Write128KCalls, viaErrRdmawProt=viaErrRdmawProt, cifsMaxShares=cifsMaxShares, vfSpName=vfSpName, dafsIsLicensed=dafsIsLicensed, cifsSuspectOps=cifsSuspectOps, productSerialNum=productSerialNum, smbLockingAndXPct=smbLockingAndXPct, miscNfsOps=miscNfsOps, switchStatusMessage=switchStatusMessage, pclNfsV2Removes=pclNfsV2Removes, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, envFailedFanMessage=envFailedFanMessage, ndmpRestoreFailures=ndmpRestoreFailures, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, tv2Percent=tv2Percent, chassisPowerSupplyOk=chassisPowerSupplyOk, ifHighInDiscards=ifHighInDiscards, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, ifLowInDiscards=ifLowInDiscards, smbNTCancelOthers=smbNTCancelOthers, viaErrors=viaErrors, smbCheckDirs=smbCheckDirs, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, autosupportConfigurationError=autosupportConfigurationError, tv3ccRmdirs=tv3ccRmdirs, dmpDataAmount=dmpDataAmount, viaCurrVI=viaCurrVI, pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, fsMaxUsedReservedPerCent=fsMaxUsedReservedPerCent, volumeNearlyFull=volumeNearlyFull, chassisFanDegraded=chassisFanDegraded, lunSerialNumber=lunSerialNumber, v3cpFsstats=v3cpFsstats, v3ccMknods=v3ccMknods, dafsNicIndex=dafsNicIndex, obsSmbClosePrintFiles=obsSmbClosePrintFiles, snapmirrorState=snapmirrorState, raidVTotalBlocks=raidVTotalBlocks, enclProductVendor=enclProductVendor, initiatorGroupMemberTable=initiatorGroupMemberTable, ftpdCurrentConns=ftpdCurrentConns, dafsServerEnabled=dafsServerEnabled, raidVPlexNumber=raidVPlexNumber, spareIndex=spareIndex, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, dafsSessionUseChecksums=dafsSessionUseChecksums, v2ccMkdirs=v2ccMkdirs, initiatorGroupType=initiatorGroupType, obsSmbLockByteRangePct=obsSmbLockByteRangePct, iscsiLowWriteBytes=iscsiLowWriteBytes, ncNntpBytesToClients=ncNntpBytesToClients, tv2cpReads=tv2cpReads, cifsPCGenericUser=cifsPCGenericUser, diskSpareCount=diskSpareCount, raidPGroupNumber=raidPGroupNumber, v3cpPathconfs=v3cpPathconfs, tv3ccNulls=tv3ccNulls, raidPDiskId=raidPDiskId, tv3pCommits=tv3pCommits, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, ncFtpBytesToServers=ncFtpBytesToServers, ncStats=ncStats, raidVDiskRPM=raidVDiskRPM, ifLowInErrors=ifLowInErrors, ncHttpActiveCliConns=ncHttpActiveCliConns, dafsVerifys=dafsVerifys, tv3ccLookups=tv3ccLookups, initiatorGroupOS=initiatorGroupOS, pclEntry=pclEntry, diskFailedCount=diskFailedCount, curDafs=curDafs, v3pWrites=v3pWrites, tv3cpReaddirPluss=tv3cpReaddirPluss, svLag=svLag, snapmirrorScheduleDesc=snapmirrorScheduleDesc, viaProviderVersion=viaProviderVersion, grmMonitor=grmMonitor, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, tv2ccSetattrs=tv2ccSetattrs, slVHour=slVHour, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, viaConnRemotePortNumber=viaConnRemotePortNumber, raidPNumber=raidPNumber, v3ccCommits=v3ccCommits, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, tv2ccRmdirs=tv2ccRmdirs, obsSmbOpens=obsSmbOpens, volUUID=volUUID, qrVFileLimitSoft=qrVFileLimitSoft, portIndex=portIndex, v2Write32KCalls=v2Write32KCalls, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, svTotalRestartSuccesses=svTotalRestartSuccesses, v3pFsstats=v3pFsstats, dmpAttempts=dmpAttempts, tv3Write128KCalls=tv3Write128KCalls, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, dafsMaxIdleSeconds=dafsMaxIdleSeconds, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, raidUsedMb=raidUsedMb, ifLowOutUcastPkts=ifLowOutUcastPkts, v2cLinks=v2cLinks, aggrEntry=aggrEntry, spareTotalMb=spareTotalMb, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, v3pSetattrs=v3pSetattrs, tv2Read8KCalls=tv2Read8KCalls, v3Write64KCalls=v3Write64KCalls, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent, iscsiIsLicensed=iscsiIsLicensed, tv2cpWrcaches=tv2cpWrcaches, raidTotalBlocks=raidTotalBlocks, obsSmbReadMPXs=obsSmbReadMPXs, pclNfsV2Renames=pclNfsV2Renames, slMinutes=slMinutes, tv3pReaddirPluss=tv3pReaddirPluss, v3ccReads=v3ccReads, raidPStatus=raidPStatus, fcpTargetStatus=fcpTargetStatus, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, viaConnRemoteDescriminator=viaConnRemoteDescriminator, tv3cpNulls=tv3cpNulls, qtreeTable=qtreeTable, otherDiskScsiId=otherDiskScsiId, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, globalStatusNonCritical=globalStatusNonCritical, nfsCacheHighMissRequests=nfsCacheHighMissRequests, ncLocalConfigVersion=ncLocalConfigVersion, ncFtpBytesFromClients=ncFtpBytesFromClients, dafsWriteInlines=dafsWriteInlines, chassisPowerOk=chassisPowerOk, v2Read8KCalls=v2Read8KCalls, ncStreamingAccelHits=ncStreamingAccelHits, slVName=slVName, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, v2Read512Calls=v2Read512Calls, switchLinkSpeed=switchLinkSpeed, tv3cpSetattrs=tv3cpSetattrs, volumeFull=volumeFull, pclRpcCalls=pclRpcCalls, v2cLookups=v2cLookups, aggrOwningHost=aggrOwningHost, ncHttpAccelIndex=ncHttpAccelIndex, outOfDateDiskRPM=outOfDateDiskRPM, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, tv2cSymlinks=tv2cSymlinks, v3cSetattrs=v3cSetattrs, tv3ccGetattrs=tv3ccGetattrs, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, v2Read128KCalls=v2Read128KCalls, v3cWrites=v3cWrites, trcTcpInProgressHits=trcTcpInProgressHits, dafsReadlinkDirects=dafsReadlinkDirects, raidVDiskType=raidVDiskType, volTable=volTable, tv2Read64KCalls=tv2Read64KCalls, lunMapTable=lunMapTable, raidVDiskNumber=raidVDiskNumber, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, volOptions=volOptions, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, smbCreateAndXPct=smbCreateAndXPct, lunMapped=lunMapped, viaMaxPTags=viaMaxPTags, qrV2HighKBytesLimit=qrV2HighKBytesLimit, fcpTargetTable=fcpTargetTable, appInfo=appInfo, ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, dafsConnectBinds=dafsConnectBinds, enclPowerSuppliesPresent=enclPowerSuppliesPresent, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, tv2ccLinks=tv2ccLinks, dafsClientAuths=dafsClientAuths, qrIndex=qrIndex, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, tv3Write1KCalls=tv3Write1KCalls, v3pMkdirs=v3pMkdirs, viaNodeSystemName=viaNodeSystemName, tv3cpReads=tv3cpReads, psetMemberIndex=psetMemberIndex, connectedInitiatorNodeName=connectedInitiatorNodeName, volumeOnline=volumeOnline, miscHighTapeWriteBytes=miscHighTapeWriteBytes, viaCurrCQ=viaCurrCQ, switchFabricIndex=switchFabricIndex, cp=cp, pclNfsV3Rmdirs=pclNfsV3Rmdirs, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, pclNfsV3Write512Calls=pclNfsV3Write512Calls, v3ccAccesss=v3ccAccesss, viaConnLocalPortNumber=viaConnLocalPortNumber, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, volumeOfflineTooBig=volumeOfflineTooBig, tv2Write64KCalls=tv2Write64KCalls, cifsWrites=cifsWrites, qrV2Type=qrV2Type, cifsCancelLocks=cifsCancelLocks, otherDiskSectorSize=otherDiskSectorSize, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, fabricEntry=fabricEntry, iscsiHighWriteBytes=iscsiHighWriteBytes, clusterNodeFailed=clusterNodeFailed, dafsOptions=dafsOptions, cpuCount=cpuCount, dafsBcRecalls=dafsBcRecalls, rcpTcpCalls=rcpTcpCalls, tv3ccReaddirPluss=tv3ccReaddirPluss, viaMaxCQEntries=viaMaxCQEntries, tv3Read16KCalls=tv3Read16KCalls, tv2Read16KCalls=tv2Read16KCalls, dafsOpenDowngrades=dafsOpenDowngrades, slQVolume=slQVolume, accelmonitor=accelmonitor, dhmNoticePFAEvent=dhmNoticePFAEvent, chassisCPUFanStopped=chassisCPUFanStopped, raidVScsiId=raidVScsiId)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", netifNumber=netifNumber, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, obsSmbSetInfoPct=obsSmbSetInfoPct, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, dafsExportName=dafsExportName, qrVKBytesThreshold=qrVKBytesThreshold, dafsBcNulls=dafsBcNulls, slName=slName, dafsDefaultUid=dafsDefaultUid, cpFromSyncOps=cpFromSyncOps, tv3cReaddirs=tv3cReaddirs, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, pclIpAddr=pclIpAddr, v2cWrites=v2cWrites, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, raidVDiskVendor=raidVDiskVendor, pclRpcServXDRCalls=pclRpcServXDRCalls, dfInodesUsed=dfInodesUsed, v2cpReadlinks=v2cpReadlinks, raidTotalMb=raidTotalMb, vfIpAddr=vfIpAddr, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, tv2pWrcaches=tv2pWrcaches, raidVNumber=raidVNumber, smbCopyPct=smbCopyPct, volNumber=volNumber, v3Calls=v3Calls, obsSmbWriteMPXs=obsSmbWriteMPXs, dafsOpens=dafsOpens, diskReconstructingParityCount=diskReconstructingParityCount, otherDiskDiskId=otherDiskDiskId, plexVolName=plexVolName, qtreeVolumeName=qtreeVolumeName, miscNetSentKB=miscNetSentKB, viaErrConnLost=viaErrConnLost, nfsCacheVerifyRequests=nfsCacheVerifyRequests, ncIsEnabled=ncIsEnabled, snapmirrorWrittenBytes=snapmirrorWrittenBytes, ncStreamingOptions=ncStreamingOptions, v3pNulls=v3pNulls, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, viaMaxVI=viaMaxVI, diskVerifyingParityCount=diskVerifyingParityCount, outOfDateDiskDiskName=outOfDateDiskDiskName, raidVIndex=raidVIndex, v3ccSetattrs=v3ccSetattrs, snapmirrorConnEntry=snapmirrorConnEntry, obsSmbWriteMPXPct=obsSmbWriteMPXPct, emergencyTrap=emergencyTrap, obsSmbLockAndReads=obsSmbLockAndReads, cifsWGName=cifsWGName, nfsCacheBytesFromServers=nfsCacheBytesFromServers, lunHighWriteOps=lunHighWriteOps, maxDirSizeWarning=maxDirSizeWarning, ncNntp=ncNntp, cpFromLowWaterOps=cpFromLowWaterOps, ncStreamingAccelTable=ncStreamingAccelTable, psetName=psetName, tv2ccStatfss=tv2ccStatfss, qtreeStatus=qtreeStatus, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, dfNumber=dfNumber, tnfsServ=tnfsServ, vfFpIndex=vfFpIndex, totDafs=totDafs, cifsSecurityModel=cifsSecurityModel, ncDnsRequestsReceived=ncDnsRequestsReceived, tv2ccRoots=tv2ccRoots, fcpLowReadBytes=fcpLowReadBytes, v3ccCreates=v3ccCreates, powerSupplyFailed=powerSupplyFailed, v3cAccesss=v3cAccesss, switchName=switchName, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, fcpHighOps=fcpHighOps, tv3cLinks=tv3cLinks, tv3ccFsstats=tv3ccFsstats, dafsDelegReturns=dafsDelegReturns, tv3ccFsinfos=tv3ccFsinfos, tv3pLookups=tv3pLookups, pclNfsV2WritePerCent=pclNfsV2WritePerCent, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, dafsNicListenAddr=dafsNicListenAddr, volIndex=volIndex, snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, pclNfsV3NullPerCent=pclNfsV3NullPerCent, snapmirrorOn=snapmirrorOn, v3cpRmdirs=v3cpRmdirs, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, ncCdOptions=ncCdOptions, ncHttpsAccelEntry=ncHttpsAccelEntry, ncNntpBWSavings=ncNntpBWSavings, trcTcpDelayHits=trcTcpDelayHits, ncFtpActiveServConns=ncFtpActiveServConns, qrV2Id=qrV2Id, tv3cpPathconfs=tv3cpPathconfs, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, v3ccWrites=v3ccWrites, obsSmbLockAndReadPct=obsSmbLockAndReadPct, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, v3Read4KCalls=v3Read4KCalls, enclProductSerialNo=enclProductSerialNo, dfHighUsedKBytes=dfHighUsedKBytes, snapmirrorSyncOk=snapmirrorSyncOk, ncOptions=ncOptions, ncFtpObjHitrate=ncFtpObjHitrate, qvStateVolume=qvStateVolume, dmpActives=dmpActives, cifsWinsServers=cifsWinsServers, smbTrans2CreateDirs=smbTrans2CreateDirs, obsSmbCreateDirPct=obsSmbCreateDirPct, v2ReadStats=v2ReadStats, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, trpcBadLens=trpcBadLens, tv2ReadStats=tv2ReadStats, amIndex=amIndex, portState=portState, v2CachedPerCent=v2CachedPerCent, v2ccCreates=v2ccCreates, chassisTemperatureOk=chassisTemperatureOk, svDst=svDst, lunCount=lunCount, aggrFlexvollist=aggrFlexvollist, dafsGetattrDirects=dafsGetattrDirects, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, autosupportFailedSends=autosupportFailedSends, lunLowReadOps=lunLowReadOps, raidVCompletionPerCent=raidVCompletionPerCent, v2pSymlinks=v2pSymlinks, smbNTCreateAndXs=smbNTCreateAndXs, dafs=dafs, cifsIsLoginEnabled=cifsIsLoginEnabled, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, tv3pSetattrs=tv3pSetattrs, spareDiskName=spareDiskName, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, tv2Read1KCalls=tv2Read1KCalls, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, aggrState=aggrState, lunHighReadBytes=lunHighReadBytes, otherDiskBay=otherDiskBay, rpcUdpNullRecvs=rpcUdpNullRecvs, vfFiIndex=vfFiIndex, raidVSecondaryDiskName=raidVSecondaryDiskName, diskReconstructingCount=diskReconstructingCount, iscsiLowReadBytes=iscsiLowReadBytes, fcpHighWriteBytes=fcpHighWriteBytes, v2cpStatfss=v2cpStatfss, tv2cRmdirs=tv2cRmdirs, smbOpenPrintFiles=smbOpenPrintFiles, cf=cf, volCloneSnap=volCloneSnap, tv3cpReaddirs=tv3cpReaddirs, miscHighNetSentBytes=miscHighNetSentBytes, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, fcpTargetTableIndex=fcpTargetTableIndex, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, smbWriteAndXs=smbWriteAndXs, vfIpTable=vfIpTable, tv2cLookups=tv2cLookups, ncHttpIsEnabled=ncHttpIsEnabled, vfStarted=vfStarted, obsSmbReadPct=obsSmbReadPct, viaConnRcvdMessages=viaConnRcvdMessages, raidVUsedBlocks=raidVUsedBlocks, replyCache=replyCache, otherDiskDiskPort=otherDiskDiskPort, v3ccSymlinks=v3ccSymlinks, smbWriteAndXPct=smbWriteAndXPct, cifsNTrees=cifsNTrees, nfsCacheBytesToClients=nfsCacheBytesToClients, dafsSetFencingLists=dafsSetFencingLists, cfCannotTakeoverCause=cfCannotTakeoverCause, dmpStPath=dmpStPath, pclNfsServBadCalls=pclNfsServBadCalls, ndmpSessionOpened=ndmpSessionOpened, chassisTemperatureWarning=chassisTemperatureWarning, ifLowOutOctets=ifLowOutOctets, snapmirrorDst=snapmirrorDst, dafsLocks=dafsLocks, psetEntry=psetEntry, overTempRepaired=overTempRepaired, v3pMknods=v3pMknods, tv2Read4KCalls=tv2Read4KCalls, qrVEntry=qrVEntry, outOfDateDiskModel=outOfDateDiskModel, tv2CachedCalls=tv2CachedCalls, ncNntpBytesFromServers=ncNntpBytesFromServers, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, ncHttpAccelTable=ncHttpAccelTable, raidUsedBlocks=raidUsedBlocks, qrV2Entry=qrV2Entry, productVersion=productVersion, envFailedPowerSupplyCount=envFailedPowerSupplyCount, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, fcpTargetTableEntry=fcpTargetTableEntry, trcUdpInProgressHits=trcUdpInProgressHits, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, v2cpMkdirs=v2cpMkdirs, rpcBadCalls=rpcBadCalls, dfMaxFilesAvail=dfMaxFilesAvail, cifsClearTextPasswd=cifsClearTextPasswd, viaCurrConnected=viaCurrConnected, dafsNicInBytes=dafsNicInBytes, spareDiskSerialNumber=spareDiskSerialNumber, dafsDirectOutBytes=dafsDirectOutBytes, v2cMkdirs=v2cMkdirs, raidVSectorSize=raidVSectorSize, vfProTable=vfProTable, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, v3CachedPerCent=v3CachedPerCent, v3WriteStats=v3WriteStats, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, tv3cRmdirs=tv3cRmdirs, spareScsiAdapter=spareScsiAdapter, vfDisallowedProtocols=vfDisallowedProtocols, informationalTrap=informationalTrap, raidVStatus=raidVStatus, qrV2Sid=qrV2Sid, qrV2PathName=qrV2PathName, smbLogoffAndXPct=smbLogoffAndXPct, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, snapvault=snapvault, enclNumber=enclNumber, dfKBytesUsed=dfKBytesUsed, psetTable=psetTable, v2Write4KCalls=v2Write4KCalls, viaInMsgs=viaInMsgs, raidVDiskModel=raidVDiskModel, snapmirrorConnTable=snapmirrorConnTable, smbTransactCreatePct=smbTransactCreatePct, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, pclNfsV3Fsinfos=pclNfsV3Fsinfos, vscanVirusDetectedError=vscanVirusDetectedError, cpFromLogFullOps=cpFromLogFullOps, tv3Write32KCalls=tv3Write32KCalls, netappSupportConsole=netappSupportConsole, tv2pReadlinks=tv2pReadlinks, ncStreamingRealBWSavings=ncStreamingRealBWSavings, initiatorName=initiatorName, productApiUrl=productApiUrl, v2pStatfss=v2pStatfss, dafsClientConnects=dafsClientConnects, dmpIndex=dmpIndex, dfInodesFree=dfInodesFree, dafsReaddirDirects=dafsReaddirDirects, smbCopies=smbCopies, tv2pSymlinks=tv2pSymlinks, spareStatus=spareStatus)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", v3cpReaddirs=v3cpReaddirs, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, viaConnVINumber=viaConnVINumber, otherDiskDiskName=otherDiskDiskName, tv3pFsstats=tv3pFsstats, lunSnapStatus=lunSnapStatus, cifsConnectedUsers=cifsConnectedUsers, smbCloses=smbCloses, dafsReaddirInlines=dafsReaddirInlines, tnfsV2=tnfsV2, tv3pMkdirs=tv3pMkdirs, smbEchos=smbEchos, dafsOpenattrs=dafsOpenattrs, ncStreamingQuickTimeBytesToServers=ncStreamingQuickTimeBytesToServers, sparePool=sparePool, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, dafsGetFencingLists=dafsGetFencingLists, obsSmbProcessExits=obsSmbProcessExits, ncRMMem=ncRMMem, viaMaxRegisterBytes=viaMaxRegisterBytes, ncFtpServConns=ncFtpServConns, otherDiskFirmwareRevision=otherDiskFirmwareRevision, outOfDateDiskEntry=outOfDateDiskEntry, cifsCopyToAligns=cifsCopyToAligns, portSwitchIndex=portSwitchIndex, tv3pFsinfos=tv3pFsinfos, plexEntry=plexEntry, qvStateStat=qvStateStat, ncNntpRespTimePerByte=ncNntpRespTimePerByte, viaErrRdmarProt=viaErrRdmarProt, pclTable=pclTable, obsSmbCreateDirs=obsSmbCreateDirs, dafsBcGetattrs=dafsBcGetattrs, slVEntry=slVEntry, pclNfsV2NullPerCent=pclNfsV2NullPerCent, viaName=viaName, tv3ccCommits=tv3ccCommits, smbNTTransactIoctls=smbNTTransactIoctls, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, lunTable=lunTable, cpuContextSwitches=cpuContextSwitches, portEntry=portEntry, ndmpOn=ndmpOn, ifLowInOctets=ifLowInOctets, aggrTable=aggrTable, raidCompletionPerCent=raidCompletionPerCent, vfSpIndex=vfSpIndex, pclNfsV2Setattrs=pclNfsV2Setattrs, miscHighHttpOps=miscHighHttpOps, dafsNicDevice=dafsNicDevice, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, rcInProgressHits=rcInProgressHits, autosupportStatusMessage=autosupportStatusMessage, qrV2LowKBytesUsed=qrV2LowKBytesUsed, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, miscGlobalStatusMessage=miscGlobalStatusMessage, slVVolumeName=slVVolumeName, raidEntry=raidEntry, ifHighInUnknownProtos=ifHighInUnknownProtos, envFailedFanCount=envFailedFanCount, fcpTargetNN=fcpTargetNN, cifsReads=cifsReads, volumeStateChanged=volumeStateChanged, cpuCPInterruptPercent=cpuCPInterruptPercent, dafsSetattrInlines=dafsSetattrInlines, cpTime=cpTime, ifLowInUcastPkts=ifLowInUcastPkts, dfKBytesTotal=dfKBytesTotal, ncStreamingTotalRequests=ncStreamingTotalRequests, iscsiHighOps=iscsiHighOps, spareEntry=spareEntry, pclNfsV2Getattrs=pclNfsV2Getattrs, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, amMonitor=amMonitor, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, v3cpCreates=v3cpCreates, miscLowTapeReadBytes=miscLowTapeReadBytes, obsSmbTreeConnectPct=obsSmbTreeConnectPct, initiatorGroupIndex=initiatorGroupIndex, cifsObsPercent=cifsObsPercent, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, initiatorGroupMemberIndex=initiatorGroupMemberIndex, dfHighTotalKBytes=dfHighTotalKBytes, aggrName=aggrName, ftpdMaxConns=ftpdMaxConns, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, cfInterconnectStatus=cfInterconnectStatus, ncStreamingRtspWMBytesFromClients=ncStreamingRtspWMBytesFromClients, ftpdError=ftpdError, smbFlushPct=smbFlushPct, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, v2cpSetattrs=v2cpSetattrs, fsStatus=fsStatus, fabric=fabric, pclNfsV3Readdirs=pclNfsV3Readdirs, miscLowDiskWriteBytes=miscLowDiskWriteBytes, ncNntpObjHitrate=ncNntpObjHitrate, v3cLinks=v3cLinks, smbReadAndXPct=smbReadAndXPct, dafsExportRwMode=dafsExportRwMode, smbMoves=smbMoves, obsSmbTrans2Open2s=obsSmbTrans2Open2s, tv2Calls=tv2Calls, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, ncGrmAgentOptions=ncGrmAgentOptions, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, v3pPathconfs=v3pPathconfs, v2ccSetattrs=v2ccSetattrs, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, obsSmbQueryInfoPct=obsSmbQueryInfoPct, chassisTemperatureUnknown=chassisTemperatureUnknown, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, storage=storage, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, viaHardwareVersion=viaHardwareVersion, viaNicEntry=viaNicEntry, v3cpNulls=v3cpNulls, v3cpRemoves=v3cpRemoves, enclProductModel=enclProductModel, v3cReadlinks=v3cReadlinks, enclTempSensorsPresent=enclTempSensorsPresent, tv2ccRemoves=tv2ccRemoves, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, dafsReadDirects=dafsReadDirects, userDefined=userDefined, netappNetCache=netappNetCache, qtreeOplock=qtreeOplock, ncIcapOptions=ncIcapOptions, connectedInitiatorPortName=connectedInitiatorPortName, svSchedIndex=svSchedIndex, pclNfsV2Statfss=pclNfsV2Statfss, netcache=netcache, amStatus=amStatus, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent, raidPDiskVendor=raidPDiskVendor, enclNumberDiskBays=enclNumberDiskBays, ncDns=ncDns, spareSecondaryDiskName=spareSecondaryDiskName, nfsV2=nfsV2, qvStateEntry=qvStateEntry, svSystemActiveSrcNumber=svSystemActiveSrcNumber, v2cNulls=v2cNulls, cifsDirOps=cifsDirOps, dafsLookUps=dafsLookUps, tv2ccReadlinks=tv2ccReadlinks, tv3cLookups=tv3cLookups, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct, ncBytesToServers=ncBytesToServers, smbNTCancels=smbNTCancels, enclContactState=enclContactState, netifIndex=netifIndex, nfsOptions=nfsOptions, v2ccRoots=v2ccRoots, qtreeName=qtreeName, switchTable=switchTable, viaNativeMTU=viaNativeMTU, ncHttpAvgRespTime=ncHttpAvgRespTime, tv3CachedPerCent=tv3CachedPerCent, dafsSetattrDirects=dafsSetattrDirects, initiatorGroupTable=initiatorGroupTable, raidPPlexNumber=raidPPlexNumber, raidVDiskSerialNumber=raidVDiskSerialNumber, pclNfsV3Symlinks=pclNfsV3Symlinks, dhmNoticeDegradedIO=dhmNoticeDegradedIO, lunHighOps=lunHighOps, snapmirrorStatusTable=snapmirrorStatusTable, psetType=psetType, enclIndex=enclIndex, dafsReadlinkInlines=dafsReadlinkInlines, pset=pset, raidVBay=raidVBay, smbCheckDirPct=smbCheckDirPct, svThrottleValue=svThrottleValue, v2Write8KCalls=v2Write8KCalls, volumeRepaired=volumeRepaired, ncDnsCacheHits=ncDnsCacheHits, raidVPlexGroup=raidVPlexGroup, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, ncHttpOptions=ncHttpOptions, v2pGetattrs=v2pGetattrs, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, v2Read32KCalls=v2Read32KCalls, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, pclRpcBadLens=pclRpcBadLens, tv3pNulls=tv3pNulls, spareTotalBlocks=spareTotalBlocks, productId=productId, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, raidPTotalMb=raidPTotalMb, netifEntry=netifEntry, enclElectronicsMaximum=enclElectronicsMaximum, dafsSessionEntry=dafsSessionEntry, v3cMknods=v3cMknods, productPartnerSerialNum=productPartnerSerialNum, v3ccReaddirs=v3ccReaddirs, v2cpCreates=v2cpCreates, svHostName=svHostName, cifsAlignedSmalls=cifsAlignedSmalls, dfMaxFilesPossible=dfMaxFilesPossible, quotaExceeded=quotaExceeded, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, dafsSessionTable=dafsSessionTable, tv3pRmdirs=tv3pRmdirs, miscHighNetRcvdBytes=miscHighNetRcvdBytes, dafsLockus=dafsLockus, obsSmbReads=obsSmbReads, rcMisses=rcMisses, cifsPreserveCase=cifsPreserveCase, v3pAccesss=v3pAccesss, dafsSessionClientVerifier=dafsSessionClientVerifier, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, snapmirrorBackupNumber=snapmirrorBackupNumber, v3cReads=v3cReads, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, tv3Read512Calls=tv3Read512Calls, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, snapmirrorStatus=snapmirrorStatus, v2cpNulls=v2cpNulls, tv2cpNulls=tv2cpNulls, switchIndex=switchIndex, alfFilewrap=alfFilewrap, dafsRegisterCreds=dafsRegisterCreds, tv3cpMkdirs=tv3cpMkdirs, pclNfsV3Reads=pclNfsV3Reads, nfsServBadCalls=nfsServBadCalls, autosupport=autosupport, tv2pStatfss=tv2pStatfss, ncStreamingMissRequests=ncStreamingMissRequests, lunLowErrors=lunLowErrors, miscHighTapeReadBytes=miscHighTapeReadBytes, switchStatus=switchStatus, smbCreateTemporaries=smbCreateTemporaries, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, tv2cpSymlinks=tv2cpSymlinks, slEntry=slEntry, viaOutMsgs=viaOutMsgs, switchLowPacketsProcessed=switchLowPacketsProcessed, smbOpenPrintFilePct=smbOpenPrintFilePct, v3ReadStats=v3ReadStats, slVType=slVType, productMachineType=productMachineType, volClone=volClone, viaCurrError=viaCurrError, ncDnsCacheMisses=ncDnsCacheMisses, tv3cRemoves=tv3cRemoves, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, ncFtpBytesFromServers=ncFtpBytesFromServers, ncObjectsStored=ncObjectsStored, dafsCloses=dafsCloses)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", ncRMMemTotal=ncRMMemTotal, powerSupplyWarning=powerSupplyWarning, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, pclNfsV2Mkdirs=pclNfsV2Mkdirs, tv3cPathconfs=tv3cPathconfs, ncGrmServerIsEnabled=ncGrmServerIsEnabled, snapmirrorReadBytes=snapmirrorReadBytes, nfsCacheMissRequests=nfsCacheMissRequests, raidPTotalBlocks=raidPTotalBlocks, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, viaConnLocalDescriminator=viaConnLocalDescriminator, amNumber=amNumber, vfProEntry=vfProEntry, cifsIsWinsEnabled=cifsIsWinsEnabled, tv3cpMknods=tv3cpMknods, dafsPendingRequests=dafsPendingRequests, tv3cpSymlinks=tv3cpSymlinks, slQIndex=slQIndex, dafsNicNumRequestDemons=dafsNicNumRequestDemons, cpFromCpDeferredOps=cpFromCpDeferredOps, dafsBcBatchCompletions=dafsBcBatchCompletions, fcpTargetPN=fcpTargetPN, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, viaTotalError=viaTotalError, snapmirrorLastTransMBs=snapmirrorLastTransMBs, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, v2cpRenames=v2cpRenames, tv3cReadlinks=tv3cReadlinks, pclNfsV3Mkdirs=pclNfsV3Mkdirs, svSchedType=svSchedType, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, appTrap=appTrap, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, tv2Write32KCalls=tv2Write32KCalls, vfIpIndex=vfIpIndex, v2CachedCalls=v2CachedCalls, viaCurrConnectWaitPending=viaCurrConnectWaitPending, misc=misc, qtreeStyle=qtreeStyle, ncDnsIresForwardLookups=ncDnsIresForwardLookups, tv2cpReadlinks=tv2cpReadlinks, tv2ccRenames=tv2ccRenames, diskScrubbingCount=diskScrubbingCount, obsSmbWriteRawPct=obsSmbWriteRawPct, pclNfsV2Writes=pclNfsV2Writes, cpuOk=cpuOk, cifsOpLkL2ToNones=cifsOpLkL2ToNones, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, snapmirrorArguments=snapmirrorArguments, viaInRDMAReadBytes=viaInRDMAReadBytes, dafsLockts=dafsLockts, rpcServ=rpcServ, enclChannelShelfAddr=enclChannelShelfAddr, lunShareStatus=lunShareStatus, ncDnsIsEnabled=ncDnsIsEnabled, snapmirrorConnDst1=snapmirrorConnDst1, v3Write16KCalls=v3Write16KCalls, raidStatus=raidStatus, obsSmbCreates=obsSmbCreates, tv3cFsstats=tv3cFsstats, dmpStSuccesses=dmpStSuccesses, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, outOfDateDiskDiskId=outOfDateDiskDiskId, vscanConfigurationChange=vscanConfigurationChange, cifsMultipleVCs=cifsMultipleVCs, trcTcpMisses=trcTcpMisses, cifsDCName=cifsDCName, ncNntpProxyRequests=ncNntpProxyRequests, vscanServerUpgrade=vscanServerUpgrade, v3cpLinks=v3cpLinks, warningTrap=warningTrap, vscanConnection=vscanConnection, snapmirrorTotalDeferments=snapmirrorTotalDeferments, errorTrap=errorTrap, tv2pRmdirs=tv2pRmdirs, dmpNumFiles=dmpNumFiles, dafsNulls=dafsNulls, ncInfo=ncInfo, v3ccFsinfos=v3ccFsinfos, tv3pLinks=tv3pLinks, ndmpBackupSuccesses=ndmpBackupSuccesses, miscHighDiskReadBytes=miscHighDiskReadBytes, smbLockingAndXs=smbLockingAndXs, productTrapData=productTrapData, productFirmwareVersion=productFirmwareVersion, cifsReqs=cifsReqs, viaConnectWait=viaConnectWait, qvStateName=qvStateName, clusterNodeRepaired=clusterNodeRepaired, powerSupplyRepaired=powerSupplyRepaired, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, viaConnLocalNetAddress=viaConnLocalNetAddress, obsSmbLockByteRanges=obsSmbLockByteRanges, tv3Read64KCalls=tv3Read64KCalls, tv3ccRemoves=tv3ccRemoves, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, vscanDisConnection=vscanDisConnection, chassisFanWarning=chassisFanWarning, nfsCacheOptions=nfsCacheOptions, tv3cGetattrs=tv3cGetattrs, viaNicAddress=viaNicAddress, smbReadAndXs=smbReadAndXs, slMonth=slMonth, pclNfsV3Commits=pclNfsV3Commits, ncHttpServConns=ncHttpServConns, switchHighPacketsProcessed=switchHighPacketsProcessed, tv2ccGetattrs=tv2ccGetattrs, ncHttpTotalRequests=ncHttpTotalRequests, portNumber=portNumber, aggrType=aggrType, smbNTTransactCreates=smbNTTransactCreates, ncHttp=ncHttp, nfsServ=nfsServ, v3Read512Calls=v3Read512Calls, rpcServXDRCalls=rpcServXDRCalls, v2Write512Calls=v2Write512Calls, diskRepaired=diskRepaired, v2ccReadlinks=v2ccReadlinks, rmcCardMissingCables=rmcCardMissingCables, smbTreeDisconnects=smbTreeDisconnects, smbDeleteDirPct=smbDeleteDirPct, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, initiatorGroupEntry=initiatorGroupEntry, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, tv2cRemoves=tv2cRemoves, ndmp=ndmp, tv3pAccesss=tv3pAccesss, nfsV3=nfsV3, dafsCacheHints=dafsCacheHints, dafsNicEntry=dafsNicEntry, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, ncNntpCacheableRequests=ncNntpCacheableRequests, v3cReaddirs=v3cReaddirs, tv3Read128KCalls=tv3Read128KCalls, tv2cNulls=tv2cNulls, pclNfsV3Mknods=pclNfsV3Mknods, ncStreamingActiveServConns=ncStreamingActiveServConns, v2Write128KCalls=v2Write128KCalls, svTotalTransTimeSeconds=svTotalTransTimeSeconds, dmpSuccesses=dmpSuccesses, filesysMaxfilesUsed=filesysMaxfilesUsed, rcpTcpServXDRCalls=rcpTcpServXDRCalls, slQVolumeName=slQVolumeName, rcTcpInProgressHits=rcTcpInProgressHits, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, chassisPowerSuppliesOk=chassisPowerSuppliesOk, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, tv2ccNulls=tv2ccNulls, appAlert=appAlert, ncHttpBytesToServers=ncHttpBytesToServers, cpuBusyTimePerCent=cpuBusyTimePerCent, dafsSessionMaxRequests=dafsSessionMaxRequests, vfStoragePaths=vfStoragePaths, qrVVolume=qrVVolume, dfMountedOn=dfMountedOn, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, ncStreamingObjHitrate=ncStreamingObjHitrate, v2cpLookups=v2cpLookups, diskSummary=diskSummary, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, slVMinutes=slVMinutes, dafsGetFsattrs=dafsGetFsattrs, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, ncAuth=ncAuth, v3ccLookups=v3ccLookups, v3cNulls=v3cNulls, outOfDateDiskType=outOfDateDiskType, netifTable=netifTable, qrV2HighKBytesUsed=qrV2HighKBytesUsed, treplyCache=treplyCache, obsSmbReadRawPct=obsSmbReadRawPct, miscNetRcvdKB=miscNetRcvdKB, v3ccRmdirs=v3ccRmdirs, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, productVendor=productVendor, v3pRemoves=v3pRemoves, miscCorrectedMachineChecks=miscCorrectedMachineChecks, slIndex=slIndex, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds, netappClusteredFiler=netappClusteredFiler, tv2cpRmdirs=tv2cpRmdirs, dmpDuration=dmpDuration, dafsMaxRequestSize=dafsMaxRequestSize, tv3pMknods=tv3pMknods, dfLowTotalKBytes=dfLowTotalKBytes, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, v2Read64KCalls=v2Read64KCalls, ncBytesToClients=ncBytesToClients, autosupportSent=autosupportSent, ncNntpTotalRequests=ncNntpTotalRequests, ncNntpOptions=ncNntpOptions, plexTable=plexTable, fabricTable=fabricTable, maxDirSizeAlert=maxDirSizeAlert, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, plexName=plexName, v2pNulls=v2pNulls, viaErrRecvQEmpty=viaErrRecvQEmpty, cifsOpens=cifsOpens, dmpStatus=dmpStatus, environment=environment, cfPartnerSysid=cfPartnerSysid, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, fcpIsLicensed=fcpIsLicensed, dafsDisconnects=dafsDisconnects, switchSymbolicName=switchSymbolicName, viaInRDMAWriteBytes=viaInRDMAWriteBytes, volEntry=volEntry, outOfDateDiskSectorSize=outOfDateDiskSectorSize, initiatorListMemberEntryIndex=initiatorListMemberEntryIndex, svSrcSnapshotTime=svSrcSnapshotTime, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, upsLinePowerRetored=upsLinePowerRetored, alfFileSaved=alfFileSaved, obsSmbCreateNewPct=obsSmbCreateNewPct, miscLowDiskReadBytes=miscLowDiskReadBytes, v2pCreates=v2pCreates, volumeError=volumeError, cifsTimeToShutdown=cifsTimeToShutdown, backup=backup, nfsIsLicensed=nfsIsLicensed, criticalTrap=criticalTrap, network=network, viaNicIndex=viaNicIndex, lunOnline=lunOnline, ifHighOutNUcastPkts=ifHighOutNUcastPkts, writeVerificationFailed=writeVerificationFailed, v3pReaddirs=v3pReaddirs, smbNegProtPct=smbNegProtPct, svSchedSchedule=svSchedSchedule, svOn=svOn, raidScsiId=raidScsiId, v3cPathconfs=v3cPathconfs, v3Write1KCalls=v3Write1KCalls, vfAllowedProtocols=vfAllowedProtocols, enclProductRevision=enclProductRevision, v3cpWrites=v3cpWrites, dafsSessionIndex=dafsSessionIndex, cifsNOpenFiles=cifsNOpenFiles, ncGrmServerOptions=ncGrmServerOptions, tv2ccWrcaches=tv2ccWrcaches, smbTrans2CreateDirPct=smbTrans2CreateDirPct, outOfDateDiskVendor=outOfDateDiskVendor, ncFtpRespTimePerByte=ncFtpRespTimePerByte, v2cRenames=v2cRenames, ncRM=ncRM, cifsLocks=cifsLocks, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, tv2Write8KCalls=tv2Write8KCalls, fanFailed=fanFailed)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, dafsMaxRequests=dafsMaxRequests, dafsSessionId=dafsSessionId, tv3cpFsinfos=tv3cpFsinfos, switchHighPacketsRejected=switchHighPacketsRejected, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, tv2Write4KCalls=tv2Write4KCalls, v2pLinks=v2pLinks, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, qrVSid=qrVSid, ncHttpReqRate=ncHttpReqRate, clusterNodeTakenOver=clusterNodeTakenOver, trcNonIdemDoneHits=trcNonIdemDoneHits, ndmpBackupFailureReason=ndmpBackupFailureReason, lunMapLUNName=lunMapLUNName, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, trpcServ=trpcServ, dafsExportEnabled=dafsExportEnabled, tv2cpLookups=tv2cpLookups, ncHttpBytesFromServers=ncHttpBytesFromServers, v2pWrites=v2pWrites, svTotalSuccesses=svTotalSuccesses, portName=portName, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, rcpTcpNullRecvs=rcpTcpNullRecvs, smbFindClose2s=smbFindClose2s, ndmpRestoreFailureReason=ndmpRestoreFailureReason, ncHttpTotalRespTime=ncHttpTotalRespTime, svSchedSnapshot=svSchedSnapshot, nfscache=nfscache, cifsMbufWaits=cifsMbufWaits, obsSmbProcessExitPct=obsSmbProcessExitPct, cifsNeedPW=cifsNeedPW, raidTable=raidTable, nfsrwStats=nfsrwStats, viaConnRemoteNetAddress=viaConnRemoteNetAddress, cifsOthers=cifsOthers, cpuIdleTimePerCent=cpuIdleTimePerCent, otherDiskTotalBlocks=otherDiskTotalBlocks, tv2cpMkdirs=tv2cpMkdirs, snapmirrorConnSrc2=snapmirrorConnSrc2, diskFailedShutdown=diskFailedShutdown, outOfDateDiskBay=outOfDateDiskBay, volumeOffline=volumeOffline, cifsCwaWaits=cifsCwaWaits, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, nfsCacheRpcRecords=nfsCacheRpcRecords, pclNfsV3Readlinks=pclNfsV3Readlinks, aggrOptions=aggrOptions, qtreeId=qtreeId, aggrIndex=aggrIndex, ncDnsIresReverseLookups=ncDnsIresReverseLookups, eccMasked=eccMasked, enclElectronicsFailed=enclElectronicsFailed, vifPrimaryLinkFailed=vifPrimaryLinkFailed, dafsExportTable=dafsExportTable, dfTable=dfTable, qrV2FileLimit=qrV2FileLimit, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, v3cRmdirs=v3cRmdirs, tv3cSetattrs=tv3cSetattrs, pclRpcNullRecvs=pclRpcNullRecvs, lunLowOps=lunLowOps, tv2cLinks=tv2cLinks, dfKBytesAvail=dfKBytesAvail, cifsNSessions=cifsNSessions, fabricIndex=fabricIndex, raidPIndex=raidPIndex, dafsCheckResponses=dafsCheckResponses, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, ncHttpsAccelHits=ncHttpsAccelHits, lunLowReadBytes=lunLowReadBytes, productGuiUrl=productGuiUrl, v3cpCommits=v3cpCommits, enclTempSensorsMaximum=enclTempSensorsMaximum, miscGlobalStatus=miscGlobalStatus, quotaInitPercent=quotaInitPercent, dump=dump, spareDiskType=spareDiskType, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, vfProIndex=vfProIndex, smbNTCancelOtherPct=smbNTCancelOtherPct, dafsGetattrInlines=dafsGetattrInlines, smbSessionSetupAndXPct=smbSessionSetupAndXPct, fabricOwner=fabricOwner, v2ccReads=v2ccReads, diskAddingSpareCount=diskAddingSpareCount, tv3ccMkdirs=tv3ccMkdirs, dafsUseChecksums=dafsUseChecksums, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, raidVTable=raidVTable, smbSeekPct=smbSeekPct, v2pRenames=v2pRenames, tv3pReads=tv3pReads, obsSmbQueryInfo2s=obsSmbQueryInfo2s, tv2pLookups=tv2pLookups, cifsMisc=cifsMisc, alertTrap=alertTrap, restore=restore, connectedInitiatorType=connectedInitiatorType, pclNfsV3Lookups=pclNfsV3Lookups, spareShelf=spareShelf, volumeRemoteOk=volumeRemoteOk, quotaState=quotaState, dafsDelegPurges=dafsDelegPurges, cifsServ=cifsServ, lunLowWriteOps=lunLowWriteOps, v3Read8KCalls=v3Read8KCalls, upsBatteryCritical=upsBatteryCritical, v3Read32KCalls=v3Read32KCalls, ncNntpActiveServConns=ncNntpActiveServConns, switchLowPacketsRejected=switchLowPacketsRejected, lastdump=lastdump, cifsDomainJoined=cifsDomainJoined, pclNfsV3Renames=pclNfsV3Renames, trpcServXDRCalls=trpcServXDRCalls, lunEntry=lunEntry, v3ccReaddirPluss=v3ccReaddirPluss, snapvaultSchedTable=snapvaultSchedTable, cifsDomainName=cifsDomainName, ncStreamingBWSavings=ncStreamingBWSavings, ncFtpTotalRequests=ncFtpTotalRequests, volType=volType, qrVKBytesUsed=qrVKBytesUsed, cifsOplocksEnabled=cifsOplocksEnabled, fabricStatus=fabricStatus, vfSpEntry=vfSpEntry, tv2Read512Calls=tv2Read512Calls, tv3WriteStats=tv3WriteStats, dfPlexCount=dfPlexCount, netappDataFabricManager=netappDataFabricManager, v3cpMknods=v3cpMknods, ncHttpCliConns=ncHttpCliConns, fcpTargetType=fcpTargetType, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, tv3Read32KCalls=tv3Read32KCalls, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, dmpSubtreeEntry=dmpSubtreeEntry, ncHttpObjHitrate=ncHttpObjHitrate, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, spareDiskFirmwareRevision=spareDiskFirmwareRevision, cifsWaitLocks=cifsWaitLocks, dafsHurryUps=dafsHurryUps, ncIcapIsLicensed=ncIcapIsLicensed, tv2WriteStats=tv2WriteStats, lunLowWriteBytes=lunLowWriteBytes, fabricName=fabricName, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, svBaseSnapshot=svBaseSnapshot, outOfDateDiskPool=outOfDateDiskPool, tv2ccLookups=tv2ccLookups, v3ccReadlinks=v3ccReadlinks, tv3cpRemoves=tv3cpRemoves, viaInRdma=viaInRdma, targetAdapterName=targetAdapterName, svSrc=svSrc, tv2cRenames=tv2cRenames, sysStat=sysStat, qrId=qrId, v2cpRmdirs=v2cpRmdirs, rstSuccesses=rstSuccesses, v3Read2KCalls=v3Read2KCalls, v3cSymlinks=v3cSymlinks, tv3cpAccesss=tv3cpAccesss, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, cifsDupDisconnects=cifsDupDisconnects, cifsOps=cifsOps, pclNfsV2Reads=pclNfsV2Reads, plexOffline=plexOffline, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, v3pReadlinks=v3pReadlinks, tv2cpCreates=tv2cpCreates, tv2pGetattrs=tv2pGetattrs, ncStreamingServConns=ncStreamingServConns, dafsInBytes=dafsInBytes, cifsTotalOps=cifsTotalOps, slVIndex=slVIndex, v2pLookups=v2pLookups, snapvaultStatusEntry=snapvaultStatusEntry, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, dafsDiscardResponses=dafsDiscardResponses, svStatus=svStatus, slQSnapshotTime=slQSnapshotTime, ndmpTapeActive=ndmpTapeActive, tv3cMkdirs=tv3cMkdirs, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, ncCmsIsEnabled=ncCmsIsEnabled, dfFileSys=dfFileSys, snapmirrorConnSrc1=snapmirrorConnSrc1, trpcBadCalls=trpcBadCalls, viaConnTable=viaConnTable, fcpHighReadBytes=fcpHighReadBytes, plexStatus=plexStatus, snapmirrorTotalFailures=snapmirrorTotalFailures, raidPVol=raidPVol, tv3Write8KCalls=tv3Write8KCalls, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, svHostTotalDeferments=svHostTotalDeferments, cifsObsReqs=cifsObsReqs, netappProducts=netappProducts, raidVScsiAdapter=raidVScsiAdapter, fanRepaired=fanRepaired, ncStreamingHitRequests=ncStreamingHitRequests, dfMaxFilesUsed=dfMaxFilesUsed, tv3pRemoves=tv3pRemoves, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, tnfsrwStats=tnfsrwStats, ncCmsOptions=ncCmsOptions, tv3pReadlinks=tv3pReadlinks, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, lunMapInitiatorGroupName=lunMapInitiatorGroupName, psetMemberEntry=psetMemberEntry, tv3Read2KCalls=tv3Read2KCalls, obsSmbReadMPXPct=obsSmbReadMPXPct, diskFailed=diskFailed, tv3pSymlinks=tv3pSymlinks, svHostType=svHostType, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, smbNTTransactIoctlPct=smbNTTransactIoctlPct, miscHighNfsOps=miscHighNfsOps, raidVDiskPort=raidVDiskPort, viaThreadSafe=viaThreadSafe, ncStreamingOndemandBytesFromClients=ncStreamingOndemandBytesFromClients, tv2ccMkdirs=tv2ccMkdirs, ncVersion=ncVersion, qrKBytesLimit=qrKBytesLimit, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, slQQtreeName=slQQtreeName, tv2pReads=tv2pReads, spareDiskModel=spareDiskModel, dafsNicDirectOutBytes=dafsNicDirectOutBytes, v2pRmdirs=v2pRmdirs, v3cpMkdirs=v3cpMkdirs, volumeRemoteRestored=volumeRemoteRestored, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, pclNfsV2Symlinks=pclNfsV2Symlinks, snapmirrorIsLicensed=snapmirrorIsLicensed, dafsAccesses=dafsAccesses, viaCurrRegisterBytes=viaCurrRegisterBytes, otherDiskRPM=otherDiskRPM, dafsSessionClientIdString=dafsSessionClientIdString, cpFromHighWaterOps=cpFromHighWaterOps, pclNfsV3Fsstats=pclNfsV3Fsstats, snapmirrorThrottleValue=snapmirrorThrottleValue, portFabricIndex=portFabricIndex, slQSource=slQSource, dafsExportAccessList=dafsExportAccessList)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", v2cRmdirs=v2cRmdirs, pclNfsV3Writes=pclNfsV3Writes, takeoverAddrs=takeoverAddrs, svLastTransType=svLastTransType, ncStreamingOndemandBytesToServers=ncStreamingOndemandBytesToServers, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, viaConnectRequest=viaConnectRequest, portSwitchName=portSwitchName, dafsDirectInBytes=dafsDirectInBytes, v2Write16KCalls=v2Write16KCalls, ncNntpBytesFromClients=ncNntpBytesFromClients, obsSmbWriteAndCloses=obsSmbWriteAndCloses, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, v3ccRemoves=v3ccRemoves, outOfDateDiskScsiId=outOfDateDiskScsiId, obsSmbReadRaws=obsSmbReadRaws, snapmirrorLastTransType=snapmirrorLastTransType, v3pLinks=v3pLinks, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, v2cReadlinks=v2cReadlinks, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, takeoverMode=takeoverMode, rstAttempts=rstAttempts, cifsPDCUpcalls=cifsPDCUpcalls, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, cifsInfo=cifsInfo, enclFansFailed=enclFansFailed, ncNntpActiveCliConns=ncNntpActiveCliConns, tv3Percent=tv3Percent, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, vfIpSpace=vfIpSpace, nfsCacheIsEnabled=nfsCacheIsEnabled, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, ndmpBackupFailures=ndmpBackupFailures, cifsQueuedWriteRaws=cifsQueuedWriteRaws, tv3ccPathconfs=tv3ccPathconfs, obsSmbWriteRaws=obsSmbWriteRaws, ifLowOutNUcastPkts=ifLowOutNUcastPkts, qrVFilesUsed=qrVFilesUsed, v2pSetattrs=v2pSetattrs, obsSmbQueryInfos=obsSmbQueryInfos, shelfRepaired=shelfRepaired, cpuTotalDomainSwitches=cpuTotalDomainSwitches, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, v3pGetattrs=v3pGetattrs, tv3cpLinks=tv3cpLinks, raidVPlex=raidVPlex, dmpStAttempts=dmpStAttempts, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, tv3cpRmdirs=tv3cpRmdirs, psetMemberNameIndex=psetMemberNameIndex, tv3cNulls=tv3cNulls, viaErrPostDesc=viaErrPostDesc, viaNicTable=viaNicTable, ncHttpHitRequests=ncHttpHitRequests, chassisFanStopped=chassisFanStopped, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, svHostIndex=svHostIndex, dmpTime=dmpTime, takeoverStatus=takeoverStatus, spareSectorSize=spareSectorSize, v2pReadlinks=v2pReadlinks, v3cpRenames=v3cpRenames, tv2pRoots=tv2pRoots, chassisCPUFanSlow=chassisCPUFanSlow, raidPDiskType=raidPDiskType, tv3ccAccesss=tv3ccAccesss, raidVEntry=raidVEntry, rpcUdpCalls=rpcUdpCalls, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, smbTreeConnectAndXs=smbTreeConnectAndXs, enclTable=enclTable, cifsIsLicensed=cifsIsLicensed, dfHighAvailKBytes=dfHighAvailKBytes, ncNtlm=ncNtlm, cifsSymlinksEnabled=cifsSymlinksEnabled, snapmirrorSyncFailed=snapmirrorSyncFailed, v3pSymlinks=v3pSymlinks, v2Write1KCalls=v2Write1KCalls, cpTotalOps=cpTotalOps, aggrStatus=aggrStatus, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, tv3ccLinks=tv3ccLinks, dafsMaxResponseSize=dafsMaxResponseSize, lastsuccess=lastsuccess, raidVGroupNumber=raidVGroupNumber, ncStreamingAccelEntry=ncStreamingAccelEntry, v3Write128KCalls=v3Write128KCalls, tv2cpStatfss=tv2cpStatfss, appNotice=appNotice, otherDiskIndex=otherDiskIndex, cpFromFlushOps=cpFromFlushOps, v3CachedCalls=v3CachedCalls, cifsOptions=cifsOptions, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, ncFtpBWSavings=ncFtpBWSavings, globalStatusCritical=globalStatusCritical, svPrimaryIsLicensed=svPrimaryIsLicensed, tv3cRenames=tv3cRenames, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, dmpFailures=dmpFailures, qtreeIndex=qtreeIndex, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, qrV2Index=qrV2Index, pclNfsV3Getattrs=pclNfsV3Getattrs, cifsMaxFiles=cifsMaxFiles, snapmirrorBackupAborts=snapmirrorBackupAborts, cpuTooBusy=cpuTooBusy, dafsRemoves=dafsRemoves, v2cpReads=v2cpReads, ncNntpIsEnabled=ncNntpIsEnabled, appCritical=appCritical, ncNtlmPossibleProblem=ncNtlmPossibleProblem, switchDomain=switchDomain, tv2cWrcaches=tv2cWrcaches, v3Write8KCalls=v3Write8KCalls, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, v3cCommits=v3cCommits, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, volumeInconsistentUmount=volumeInconsistentUmount, ncCdIsEnabled=ncCdIsEnabled, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, tv3pRenames=tv3pRenames, qrVIdType=qrVIdType, raidPPlexName=raidPPlexName, tv2cReadlinks=tv2cReadlinks, ncFtp=ncFtp, fcpTargetSpeed=fcpTargetSpeed, volName=volName, diskTotalCount=diskTotalCount, svSchedVolume=svSchedVolume, dafsCalls=dafsCalls, cifsStatus=cifsStatus, v3ccGetattrs=v3ccGetattrs, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, outOfDateDiskDiskPort=outOfDateDiskDiskPort, dafsAppendDirects=dafsAppendDirects, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, nfsCacheEjectRequests=nfsCacheEjectRequests, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, rcUdpDelayHits=rcUdpDelayHits, raidPUsedMb=raidPUsedMb, pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, pclNfsV2Readlinks=pclNfsV2Readlinks, vfEntry=vfEntry, dafsLinks=dafsLinks, powerSupplyFailureShutdown=powerSupplyFailureShutdown, productCPUArch=productCPUArch, v2cpGetattrs=v2cpGetattrs, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct, spareDiskVendor=spareDiskVendor, otherDiskVendor=otherDiskVendor, qrPathName=qrPathName, ncHttpsAccelTable=ncHttpsAccelTable, vfiler=vfiler, raidPBay=raidPBay, smbTrans2SetPathInfos=smbTrans2SetPathInfos, pclNfsV2Nulls=pclNfsV2Nulls, qrV2LowKBytesLimit=qrV2LowKBytesLimit, v3ccLinks=v3ccLinks, cifsMaxACLs=cifsMaxACLs, cfPartnerStatus=cfPartnerStatus, dafsWriteDirects=dafsWriteDirects, v3pLookups=v3pLookups, slQTable=slQTable, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, tv2Write16KCalls=tv2Write16KCalls, cifsNbtWaits=cifsNbtWaits, dafsAnonymousAuthentication=dafsAnonymousAuthentication, v2ccGetattrs=v2ccGetattrs, dafsGetRootHandles=dafsGetRootHandles, iscsiHighReadBytes=iscsiHighReadBytes, cpuUpTime=cpuUpTime, dafsMaxRequestsServer=dafsMaxRequestsServer, lunSizeLow=lunSizeLow, slVDay=slVDay, tv3cMknods=tv3cMknods, v3ccFsstats=v3ccFsstats, v3cpSetattrs=v3cpSetattrs, cifsIsEnabled=cifsIsEnabled, cfState=cfState, trcInProgressHits=trcInProgressHits, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, qrVIndex=qrVIndex, slHour=slHour, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages, netapp=netapp, pclNfsV3Accesss=pclNfsV3Accesss, tv3cFsinfos=tv3cFsinfos, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, dmpTable=dmpTable, ftpdMaxConnNotice=ftpdMaxConnNotice, snapmirrorSchedule=snapmirrorSchedule, ndmpBackupActive=ndmpBackupActive, ncAdminPort=ncAdminPort, nfsCacheHighHitRequests=nfsCacheHighHitRequests, tv2Read32KCalls=tv2Read32KCalls, v2Read1KCalls=v2Read1KCalls, cpFromLowVbufOps=cpFromLowVbufOps, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, tv2pRemoves=tv2pRemoves, pclNfsV2Roots=pclNfsV2Roots, slDay=slDay, slVTable=slVTable, v3Read64KCalls=v3Read64KCalls, dafsServerAuths=dafsServerAuths, psetIndex=psetIndex, rcTcpDelayHits=rcTcpDelayHits, v2cRoots=v2cRoots, lunHighWriteBytes=lunHighWriteBytes, outOfDateDiskTotalMb=outOfDateDiskTotalMb, viaConnectTimeOut=viaConnectTimeOut, filesys=filesys, tv2pSetattrs=tv2pSetattrs, grmmonitor=grmmonitor, nfsCacheBytesToServers=nfsCacheBytesToServers, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, netInterfaces=netInterfaces, ncStreamingOndemandBytesFromServers=ncStreamingOndemandBytesFromServers, dafsNicDirectInBytes=dafsNicDirectInBytes, v3pCreates=v3pCreates, cifsSharingErrorRetries=cifsSharingErrorRetries, vfilerIsLicensed=vfilerIsLicensed, aggrFSID=aggrFSID, tnfsV3=tnfsV3, productType=productType, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, pclNfsV2Rmdirs=pclNfsV2Rmdirs, lunStatsResetTime=lunStatsResetTime, ncStreamingQuickTimeBytesFromServers=ncStreamingQuickTimeBytesFromServers, tv3ccReads=tv3ccReads, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, ncLocalConfigChanged=ncLocalConfigChanged, tv2Write512Calls=tv2Write512Calls, obsSmbTreeConnects=obsSmbTreeConnects, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, slVNumber=slVNumber, fsOverallStatus=fsOverallStatus, envOverTemperature=envOverTemperature, v2cSetattrs=v2cSetattrs, raidPSectorSize=raidPSectorSize, tv2cStatfss=tv2cStatfss, enclProductLogicalID=enclProductLogicalID, smbFlushes=smbFlushes, dafsSessionNumCredentials=dafsSessionNumCredentials, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, ncNntpBytesToServers=ncNntpBytesToServers, aggrNumber=aggrNumber, pclRpcBadCalls=pclRpcBadCalls)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, tnfsServBadCalls=tnfsServBadCalls, v2cStatfss=v2cStatfss, tv2cpGetattrs=tv2cpGetattrs, diskActiveCount=diskActiveCount, snapshot=snapshot, globalStatusOk=globalStatusOk, tv3cpWrites=tv3cpWrites, dafsReadInlines=dafsReadInlines, ifHighInUcastPkts=ifHighInUcastPkts, svTotalTransMBs=svTotalTransMBs, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, cifsAltNames=cifsAltNames, appEmergency=appEmergency, cifsMaxTrees=cifsMaxTrees, cpFromLowDatavecsOps=cpFromLowDatavecsOps, dafsAppendInlines=dafsAppendInlines, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, raidPDiskRPM=raidPDiskRPM, vifAllLinksFailed=vifAllLinksFailed, nvramBatteryDischarged=nvramBatteryDischarged, obsSmbWritePrintFiles=obsSmbWritePrintFiles, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, ncStreamingCliConns=ncStreamingCliConns, cpuIdleTime=cpuIdleTime, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, svHostTotalFailures=svHostTotalFailures, otherDiskModel=otherDiskModel, raidPDiskModel=raidPDiskModel, tv3cCommits=tv3cCommits, ifLowOutDiscards=ifLowOutDiscards, connectedInitiatorIsid=connectedInitiatorIsid, ncTotalBWSavings=ncTotalBWSavings, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, v3cFsstats=v3cFsstats, fcpCfMode=fcpCfMode, v2ccRemoves=v2ccRemoves, tv3cpCommits=tv3cpCommits, smbRenamePct=smbRenamePct, ncHttpRespTimePerByte=ncHttpRespTimePerByte, raidPDiskNumber=raidPDiskNumber, smbGetPrintQueuePct=smbGetPrintQueuePct, v2cpRoots=v2cpRoots, outOfDateDiskShelf=outOfDateDiskShelf, viaNicAttributes=viaNicAttributes, tv2ccWrites=tv2ccWrites, v3pRmdirs=v3pRmdirs, qrTable=qrTable, smbFindClose2Pct=smbFindClose2Pct, dafsCurrentRequests=dafsCurrentRequests, ifLowInNUcastPkts=ifLowInNUcastPkts, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, tv2cSetattrs=tv2cSetattrs, v2pMkdirs=v2pMkdirs, pclNfsV3WritePerCent=pclNfsV3WritePerCent, v3cCreates=v3cCreates, raidVPlexName=raidVPlexName, ncGrmOptions=ncGrmOptions, ncDnsOptions=ncDnsOptions, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, snapmirrorConnType=snapmirrorConnType, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, ncHttpBytesFromClients=ncHttpBytesFromClients, dafsNicNumRqstDemons=dafsNicNumRqstDemons, psetMemberTable=psetMemberTable, v3pRenames=v3pRenames, ifHighInNUcastPkts=ifHighInNUcastPkts, dfType=dfType, dafsFetchResponses=dafsFetchResponses, notificationTrap=notificationTrap, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, ncStreaming=ncStreaming, tv3cCreates=tv3cCreates, miscLowCifsOps=miscLowCifsOps, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, vfState=vfState, ncBytesFromClients=ncBytesFromClients, tv2cpReaddirs=tv2cpReaddirs, v2Read16KCalls=v2Read16KCalls, viaConnState=viaConnState, enclProductID=enclProductID, qrVId=qrVId, raidPSecondaryDiskPort=raidPSecondaryDiskPort, miscHighCifsOps=miscHighCifsOps, viaErrCompProt=viaErrCompProt, spareDiskRPM=spareDiskRPM, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, ncHttpAccelHits=ncHttpAccelHits, v2ccRenames=v2ccRenames, pclNfsV2Readdirs=pclNfsV2Readdirs, qrVPathName=qrVPathName, volAggrName=volAggrName, viaCreated=viaCreated, tv3ccSymlinks=tv3ccSymlinks, nfsCacheStats=nfsCacheStats, spareDiskPort=spareDiskPort, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, scsitgtThrottleNotice=scsitgtThrottleNotice, viaNodeConnection=viaNodeConnection, qrKBytesUsed=qrKBytesUsed, appError=appError, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, cifsStats=cifsStats, nvramBatteryStatus=nvramBatteryStatus, tv2cpWrites=tv2cpWrites, qrV2FilesUsed=qrV2FilesUsed, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed, v2Read4KCalls=v2Read4KCalls, otherDiskScsiAdapter=otherDiskScsiAdapter, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, amMonitorString=amMonitorString, ncHttpActiveServConns=ncHttpActiveServConns, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, ncBytesFromServers=ncBytesFromServers, spareNumber=spareNumber, ncHttpBWSavings=ncHttpBWSavings, otherDiskStatus=otherDiskStatus, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, pclNfsV2Creates=pclNfsV2Creates, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, dfMirrorStatus=dfMirrorStatus, v3cpFsinfos=v3cpFsinfos, v2cpLinks=v2cpLinks, initiatorGroupUsePartner=initiatorGroupUsePartner, smbDeletes=smbDeletes, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent, smbDeletePct=smbDeletePct, ftpdOn=ftpdOn, chassisPowerSupplyFailed=chassisPowerSupplyFailed, dbgTrap=dbgTrap, cifsPercent=cifsPercent, alfFileNearlyFull=alfFileNearlyFull, svHostTotalSuccesses=svHostTotalSuccesses, qrVKBytesLimit=qrVKBytesLimit, dfEntry=dfEntry, qrVKBytesLimitSoft=qrVKBytesLimitSoft, svState=svState, outOfDateDiskTable=outOfDateDiskTable, tv3cReaddirPluss=tv3cReaddirPluss, aggrUUID=aggrUUID, pclNfsV2Write512Calls=pclNfsV2Write512Calls, v3cpGetattrs=v3cpGetattrs, vfSpTable=vfSpTable, v2cReads=v2cReads, v2ccRmdirs=v2ccRmdirs, slQSnapshotName=slQSnapshotName, volFSID=volFSID, v2pRoots=v2pRoots, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, portTable=portTable, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, autosupportStatus=autosupportStatus, filesysMaxfilesPossible=filesysMaxfilesPossible, enclDisksPresent=enclDisksPresent, rcNonIdemDoneHits=rcNonIdemDoneHits, qrV2Tree=qrV2Tree, tv2pRenames=tv2pRenames, tv3cWrites=tv3cWrites, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, lunName=lunName, tv3pReaddirs=tv3pReaddirs, v3cFsinfos=v3cFsinfos, ncHttpBytesToClients=ncHttpBytesToClients, tv3pPathconfs=tv3pPathconfs, rpcUdpServXDRCalls=rpcUdpServXDRCalls, takeoverinfo=takeoverinfo, raidDiskId=raidDiskId, dafsExportEntry=dafsExportEntry, nfsCacheLowMissRequests=nfsCacheLowMissRequests, quota=quota, rcpTcpBadCalls=rcpTcpBadCalls, pclNfsV3Read512Calls=pclNfsV3Read512Calls, tv3cSymlinks=tv3cSymlinks, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, v2ccStatfss=v2ccStatfss, v2ccLinks=v2ccLinks, overTempShutdown=overTempShutdown, snapmirrorConnName=snapmirrorConnName, rcTcpMisses=rcTcpMisses, dafsExportIndex=dafsExportIndex, amAddress=amAddress, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, fcpLowOps=fcpLowOps, dafsNverifys=dafsNverifys, v3pFsinfos=v3pFsinfos, v2cRemoves=v2cRemoves, fcpTargetName=fcpTargetName, snapmirrorStatusEntry=snapmirrorStatusEntry, tv2pNulls=tv2pNulls, tv3Write2KCalls=tv3Write2KCalls, enclosure=enclosure, snapmirrorSyncToAsync=snapmirrorSyncToAsync, raidPDiskPool=raidPDiskPool, pclNfsV2Wrcaches=pclNfsV2Wrcaches, svLastTransTimeSeconds=svLastTransTimeSeconds, spareBay=spareBay, enclFansMaximum=enclFansMaximum, fcpLowWriteBytes=fcpLowWriteBytes, initiatorGroupName=initiatorGroupName, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, qrV2Volume=qrV2Volume, lunSpaceReserved=lunSpaceReserved, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, v3Write32KCalls=v3Write32KCalls, otherDiskTable=otherDiskTable, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, v3cpLookups=v3cpLookups, ifHighInOctets=ifHighInOctets, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo, tv3ccWrites=tv3ccWrites, cifsBadCalls=cifsBadCalls, qrFilesUsed=qrFilesUsed, enclPowerSuppliesFailed=enclPowerSuppliesFailed, obsSmbOpenAndXPct=obsSmbOpenAndXPct, ncStreamingQuickTimeBytesToClients=ncStreamingQuickTimeBytesToClients, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, tv2pMkdirs=tv2pMkdirs, smbTrans2FindFirst2s=smbTrans2FindFirst2s, miscLowHttpOps=miscLowHttpOps, smbLogoffAndXs=smbLogoffAndXs, dfLowAvailKBytes=dfLowAvailKBytes, tv3pCreates=tv3pCreates, ncHttpsAccelIndex=ncHttpsAccelIndex, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, svSecondaryIsLicensed=svSecondaryIsLicensed, tv2cRoots=tv2cRoots, miscHighDiskWriteBytes=miscHighDiskWriteBytes, chassisPowerSupplyOff=chassisPowerSupplyOff, cfPartnerName=cfPartnerName, vfStopped=vfStopped, qrEntry=qrEntry, v2cReaddirs=v2cReaddirs, volumeRestricted=volumeRestricted, rpcCalls=rpcCalls, v3cpSymlinks=v3cpSymlinks, rpcNullRecvs=rpcNullRecvs, cpFromSnapshotOps=cpFromSnapshotOps, dfStatus=dfStatus, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, netappFiler=netappFiler, snapmirrorIndex=snapmirrorIndex, tv2cpLinks=tv2cpLinks, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, cifsNShares=cifsNShares, v3Percent=v3Percent, v3cGetattrs=v3cGetattrs, ncHttpMissRequests=ncHttpMissRequests)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, v2ccReaddirs=v2ccReaddirs, fanFailureShutdown=fanFailureShutdown, ncIsLicensed=ncIsLicensed, tv3Read1KCalls=tv3Read1KCalls, slQQtree=slQQtree, chassisPowerDegraded=chassisPowerDegraded, obsSmbOpenPct=obsSmbOpenPct, smbNegProts=smbNegProts, portType=portType, tv2ccReaddirs=tv2ccReaddirs, slTable=slTable, tnfsCalls=tnfsCalls, cpFromCpOps=cpFromCpOps, ncStreamingAccelIndex=ncStreamingAccelIndex, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, dafsCreates=dafsCreates, tv2ccCreates=tv2ccCreates, obsSmbSearchs=obsSmbSearchs, smbNTCancelCNPct=smbNTCancelCNPct, dafsNicName=dafsNicName, raidVDiskName=raidVDiskName, nfsCacheTotalRequests=nfsCacheTotalRequests, upsLinePowerOff=upsLinePowerOff, tv2cMkdirs=tv2cMkdirs, viaConnSentMessages=viaConnSentMessages, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, qrV2Table=qrV2Table, cifsTotalCalls=cifsTotalCalls, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, smbNTCancelCNs=smbNTCancelCNs, spareSecondaryDiskPort=spareSecondaryDiskPort, dafsRenames=dafsRenames, otherDiskPool=otherDiskPool, spareDiskId=spareDiskId, raidPDiskPort=raidPDiskPort, v3pReads=v3pReads, obsSmbOpenAndXs=obsSmbOpenAndXs, lun=lun, pclPerCent=pclPerCent, viaConnectionListenPort=viaConnectionListenPort, cpuInterrupts=cpuInterrupts, v3pReaddirPluss=v3pReaddirPluss, tv3ReadStats=tv3ReadStats, spareScsiId=spareScsiId, plexIndex=plexIndex, obsSmbCreatePct=obsSmbCreatePct, tv2Write1KCalls=tv2Write1KCalls, dafsReleaseCreds=dafsReleaseCreds, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, svSystemActiveDstNumber=svSystemActiveDstNumber, smbEchoPct=smbEchoPct, spareTable=spareTable, ncDnsIresIsEnabled=ncDnsIresIsEnabled, cifsNOplockAckWaits=cifsNOplockAckWaits, switchEntry=switchEntry, raidVUsedMb=raidVUsedMb, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex, smbTrans2FindNext2s=smbTrans2FindNext2s, qrV2QuotaUnlimited=qrV2QuotaUnlimited, snapmirrorConnDst2=snapmirrorConnDst2, tv3cAccesss=tv3cAccesss, smbNTCancelPct=smbNTCancelPct, v2ccSymlinks=v2ccSymlinks, smbTrans2SetFileInfos=smbTrans2SetFileInfos, raidPEntry=raidPEntry, v2cpSymlinks=v2cpSymlinks, otherDiskNumber=otherDiskNumber, snapmirrorLag=snapmirrorLag, miscLowNfsOps=miscLowNfsOps, v2WriteStats=v2WriteStats, raidVTotalMb=raidVTotalMb, dmpStFailures=dmpStFailures, tv2cpSetattrs=tv2cpSetattrs, raidPTable=raidPTable, qrVFileLimit=qrVFileLimit, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, svIndex=svIndex, pclNfsCalls=pclNfsCalls, miscCacheAge=miscCacheAge, raidScsiAdapter=raidScsiAdapter, snapvaultStatusTable=snapvaultStatusTable, v2cWrcaches=v2cWrcaches, v2pReaddirs=v2pReaddirs, dafsNicOutBytes=dafsNicOutBytes, qvStateTable=qvStateTable, domainControllerDisconnect=domainControllerDisconnect, autosupportSendError=autosupportSendError, ncDnsIres=ncDnsIres, enclElectronicsSerialNos=enclElectronicsSerialNos, nfsCacheBytesFromClients=nfsCacheBytesFromClients, quotaNormal=quotaNormal, viaCurrConnectPending=viaCurrConnectPending, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, raidPDiskName=raidPDiskName, v3cRenames=v3cRenames, raidPShelf=raidPShelf, vfProName=vfProName, tv2pCreates=tv2pCreates, raidVShelf=raidVShelf, slQEntry=slQEntry, v2pRemoves=v2pRemoves, lunLowOtherOps=lunLowOtherOps, lunHighErrors=lunHighErrors, viaConnected=viaConnected, ifHighOutDiscards=ifHighOutDiscards, tv2pWrites=tv2pWrites, lunHighReadOps=lunHighReadOps, smbSessionSetupAndXs=smbSessionSetupAndXs, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, dafsNicTable=dafsNicTable, tv2cReaddirs=tv2cReaddirs, ifHighOutOctets=ifHighOutOctets, tv2cGetattrs=tv2cGetattrs, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, raidVDiskPool=raidVDiskPool, dafsSecinfos=dafsSecinfos, tv2cCreates=tv2cCreates, snapmirror=snapmirror, filesysMaxfilesAvail=filesysMaxfilesAvail, nvramBatteryLow=nvramBatteryLow, enclEntry=enclEntry, viaCurrRegisterRegions=viaCurrRegisterRegions, tv3Write16KCalls=tv3Write16KCalls, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, tv2Read128KCalls=tv2Read128KCalls, otherDiskType=otherDiskType, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, fcpTarget=fcpTarget, dafsNicState=dafsNicState, qrType=qrType, raid=raid, viaMaxCQ=viaMaxCQ, fabricStatusMessage=fabricStatusMessage, productModel=productModel, slQSourceTime=slQSourceTime, lunMapLUNIndex=lunMapLUNIndex, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, v3ccMkdirs=v3ccMkdirs, v3cRemoves=v3cRemoves, tv2cReads=tv2cReads, dfIndex=dfIndex, v3Write2KCalls=v3Write2KCalls, diskPrefailedCount=diskPrefailedCount, cifsHostName=cifsHostName, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, v3Read1KCalls=v3Read1KCalls, tv3cReads=tv3cReads, enclElectronicsPresent=enclElectronicsPresent, tv3cpFsstats=tv3cpFsstats, dafsSessionMaxCredentials=dafsSessionMaxCredentials, vfIpAddresses=vfIpAddresses, v2cGetattrs=v2cGetattrs, vi=vi, rpcUdpBadCalls=rpcUdpBadCalls, raidPScsiId=raidPScsiId, nfsCacheHitRequests=nfsCacheHitRequests, tv2cpRemoves=tv2cpRemoves, v3Write512Calls=v3Write512Calls, ifHighOutUcastPkts=ifHighOutUcastPkts, ncStreamingOndemandBytesToClients=ncStreamingOndemandBytesToClients, tv2cWrites=tv2cWrites, slQQtreeContent=slQQtreeContent, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, v3cpReaddirPluss=v3cpReaddirPluss, raidPScsiAdapter=raidPScsiAdapter, snapvaultHostTable=snapvaultHostTable, obsSmbWrites=obsSmbWrites, totNfs=totNfs, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, v3Read128KCalls=v3Read128KCalls, tv2Write2KCalls=tv2Write2KCalls, cifsAlignedLargeRels=cifsAlignedLargeRels, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, miscLowNetSentBytes=miscLowNetSentBytes, rpcBadLens=rpcBadLens, v2cpReaddirs=v2cpReaddirs, tv3Write64KCalls=tv3Write64KCalls, cifsGetAttrs=cifsGetAttrs, ftpdTotalConns=ftpdTotalConns, viaMaxRegisterRegions=viaMaxRegisterRegions, v2cpWrites=v2cpWrites, cifsNOpenDirs=cifsNOpenDirs, smbGetPrintQueues=smbGetPrintQueues, nfsCacheBWSavings=nfsCacheBWSavings, trpcNullRecvs=trpcNullRecvs, rcDelayHits=rcDelayHits, svTotalDeferments=svTotalDeferments, tv3ccMknods=tv3ccMknods, tv3ccRenames=tv3ccRenames, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, v3cMkdirs=v3cMkdirs, lunQtreeName=lunQtreeName, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, netifDescr=netifDescr, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, qvStateInitPercent=qvStateInitPercent, netapp1=netapp1, raidPUsedBlocks=raidPUsedBlocks, dafsSessionEndian=dafsSessionEndian, raidVDiskId=raidVDiskId, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, volumeDegradedDirty=volumeDegradedDirty, v2Write2KCalls=v2Write2KCalls, ncFtpMissRequests=ncFtpMissRequests, initiatorListMemberEntry=initiatorListMemberEntry, ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, v2cCreates=v2cCreates, v2ccLookups=v2ccLookups, plexPercentResyncing=plexPercentResyncing, vfTable=vfTable, nfsCacheIsLicensed=nfsCacheIsLicensed, ncNntpServConns=ncNntpServConns, enclFansPresent=enclFansPresent, volState=volState, raidVVol=raidVVol, ncFtpBytesToClients=ncFtpBytesToClients, vfFsIndex=vfFsIndex, lunSizeHigh=lunSizeHigh, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, tv3CachedCalls=tv3CachedCalls, lunHighOtherOps=lunHighOtherOps, lunIndex=lunIndex, overTemp=overTemp, pclNfsV2Links=pclNfsV2Links, pclNfsV3Nulls=pclNfsV3Nulls, pclNfsV3Pathconfs=pclNfsV3Pathconfs, tv3Read8KCalls=tv3Read8KCalls, tv3ccReadlinks=tv3ccReadlinks, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, trcUdpDelayHits=trcUdpDelayHits, v2pWrcaches=v2pWrcaches, cifsOpLkBatchToNones=cifsOpLkBatchToNones, v3cpReadlinks=v3cpReadlinks, ncIcapIsEnabled=ncIcapIsEnabled, obsSmbSetInfo2s=obsSmbSetInfo2s, ifLowOutErrors=ifLowOutErrors, tv3cpGetattrs=tv3cpGetattrs, dafsOutBytes=dafsOutBytes, fcpTargetTopology=fcpTargetTopology, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, qrV2IdType=qrV2IdType, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, snapvaultHostEntry=snapvaultHostEntry, fabricInstances=fabricInstances, v2cpRemoves=v2cpRemoves, ncHttpAccelEntry=ncHttpAccelEntry, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", raidIndex=raidIndex, amPort=amPort, rstActives=rstActives, fanWarning=fanWarning, cfSettings=cfSettings, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, smbDeleteDirs=smbDeleteDirs, tv3ccSetattrs=tv3ccSetattrs, lunMapEntry=lunMapEntry, raidPSecondaryDiskName=raidPSecondaryDiskName, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, vfIndex=vfIndex, slVMonth=slVMonth, ncGrmServerIsLicensed=ncGrmServerIsLicensed, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, autosupportSuccessfulSends=autosupportSuccessfulSends, cifsNOplockBreakWaits=cifsNOplockBreakWaits, eccSummary=eccSummary, trcUdpMisses=trcUdpMisses, ncIcapv1IsEnabled=ncIcapv1IsEnabled, vfIpEntry=vfIpEntry, v3ccRenames=v3ccRenames, pclNfsV2Read512Calls=pclNfsV2Read512Calls, tv2pReaddirs=tv2pReaddirs, obsSmbSetInfos=obsSmbSetInfos, v3cLookups=v3cLookups, rstFailures=rstFailures, v2cSymlinks=v2cSymlinks, tv2ccReads=tv2ccReads, smbClosePct=smbClosePct, tv2CachedPerCent=tv2CachedPerCent, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, ifLowInUnknownProtos=ifLowInUnknownProtos, psetPortName=psetPortName, snapvaultSchedEntry=snapvaultSchedEntry, trcDelayHits=trcDelayHits, tv2pLinks=tv2pLinks, raidVSecondaryDiskPort=raidVSecondaryDiskPort, qtreeEntry=qtreeEntry, pclNfsV3Creates=pclNfsV3Creates, raidPCompletionPerCent=raidPCompletionPerCent, ncStreamingRtspWMBytesFromServers=ncStreamingRtspWMBytesFromServers, ncStreamingQuickTimeBytesFromClients=ncStreamingQuickTimeBytesFromClients, pclNfsV2RootPerCent=pclNfsV2RootPerCent, v2Read2KCalls=v2Read2KCalls, otherDiskTotalMb=otherDiskTotalMb, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, ndmpRestoreSuccesses=ndmpRestoreSuccesses, dafsDefaultGid=dafsDefaultGid, cpu=cpu, v2Percent=v2Percent, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, viaErrorThreshold=viaErrorThreshold, dafsClientConnectAuths=dafsClientConnectAuths, raidPPlex=raidPPlex, nfsCalls=nfsCalls, pclNfsV3Links=pclNfsV3Links, pclNumber=pclNumber, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, v3ccNulls=v3ccNulls, tv3ccCreates=tv3ccCreates, obsSmbWritePct=obsSmbWritePct, cpuBusyTime=cpuBusyTime, snapmirrorConnIndex=snapmirrorConnIndex, otherDiskSerialNumber=otherDiskSerialNumber, rmcCardNeedsReplacement=rmcCardNeedsReplacement, blocks=blocks, rcUdpMisses=rcUdpMisses, appWarning=appWarning, cpuNonCPInterrupts=cpuNonCPInterrupts, diskFailedMessage=diskFailedMessage, qtreeVolume=qtreeVolume, tv3pGetattrs=tv3pGetattrs, qrV2SoftFileLimit=qrV2SoftFileLimit, cifsNBTDisconnects=cifsNBTDisconnects, qrVTree=qrVTree, smbRenames=smbRenames, obsSmbCreateNews=obsSmbCreateNews, dmpLevel=dmpLevel, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, initiatorListTable=initiatorListTable, ncNntpIsLicensed=ncNntpIsLicensed, outOfDateDiskIndex=outOfDateDiskIndex, volCloneOf=volCloneOf, ncNntpCliConns=ncNntpCliConns, viaDisconnect=viaDisconnect, rcUdpInProgressHits=rcUdpInProgressHits, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, vfName=vfName, v2pReads=v2pReads, tv3cpLookups=tv3cpLookups, vfUuid=vfUuid, qrVTable=qrVTable, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers, viaOutRDMAReadBytes=viaOutRDMAReadBytes, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, obsSmbSearchPct=obsSmbSearchPct, pclNfsV3Removes=pclNfsV3Removes, rcpTcpBadLens=rcpTcpBadLens, smbCreateTemporaryPct=smbCreateTemporaryPct, fsStatusMessage=fsStatusMessage, cifsAlignedSmallRels=cifsAlignedSmallRels, ncFtpHitRequests=ncFtpHitRequests, v2Write64KCalls=v2Write64KCalls, pclNfsV2Lookups=pclNfsV2Lookups, ncFtpCliConns=ncFtpCliConns, switchType=switchType, ndmpRestoreActive=ndmpRestoreActive, cifsAlignedLarges=cifsAlignedLarges, v2ccWrites=v2ccWrites, tv2ccSymlinks=tv2ccSymlinks, softQuotaNormal=softQuotaNormal, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, initiator=initiator, miscLowTapeWriteBytes=miscLowTapeWriteBytes, ncStreamingActiveCliConns=ncStreamingActiveCliConns, v2ccWrcaches=v2ccWrcaches, iscsiLowOps=iscsiLowOps, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, curNfs=curNfs, tv3Write512Calls=tv3Write512Calls, initiatorGroupMemberEntry=initiatorGroupMemberEntry, svLastTransMBs=svLastTransMBs, tv3ccReaddirs=tv3ccReaddirs, smbTreeConnectAndXPct=smbTreeConnectAndXPct, outOfDateDiskCount=outOfDateDiskCount, plexFailed=plexFailed, dafsLookUpps=dafsLookUpps, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, tv3cpRenames=tv3cpRenames, cifsMaxConnections=cifsMaxConnections, raidPGroup=raidPGroup, tv3cpReadlinks=tv3cpReadlinks, tv3Read4KCalls=tv3Read4KCalls, chassisFanRemoved=chassisFanRemoved, chassisFanOk=chassisFanOk, slVVolume=slVVolume, viaOutBytes=viaOutBytes, grmMonitorString=grmMonitorString, volumeRemoteUnreachable=volumeRemoteUnreachable, upsShuttingDown=upsShuttingDown, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, product=product, volumeRestrictedRootConflict=volumeRestrictedRootConflict, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, tv2Read2KCalls=tv2Read2KCalls, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, pclNfsV3Setattrs=pclNfsV3Setattrs, volStatus=volStatus, volOwningHost=volOwningHost, v3Read16KCalls=v3Read16KCalls, miscLowNetRcvdBytes=miscLowNetRcvdBytes, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, nvram=nvram, viaOutRdma=viaOutRdma, cpuSwitchInvocations=cpuSwitchInvocations, switchManagementId=switchManagementId, tv2cpRoots=tv2cpRoots, trcMisses=trcMisses, nfsCacheLowHitRequests=nfsCacheLowHitRequests, smbSeeks=smbSeeks, amTable=amTable, raidDiskName=raidDiskName, chassisCPUFanOk=chassisCPUFanOk, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, v3cpAccesss=v3cpAccesss, lunComment=lunComment, otherDiskShelf=otherDiskShelf, dafsCommits=dafsCommits, raidVGroup=raidVGroup, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, dmpStartTime=dmpStartTime, ncDnsIresIsInitialised=ncDnsIresIsInitialised, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, v3ccPathconfs=v3ccPathconfs, ncFtpActiveCliConns=ncFtpActiveCliConns, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, ncRMMemFree=ncRMMemFree, ftpd=ftpd, waflDirFull=waflDirFull, v2cpWrcaches=v2cpWrcaches, fcpTargetStandby=fcpTargetStandby, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, v2ccNulls=v2ccNulls, nfsPerClient=nfsPerClient, ncHttpsProxyOptions=ncHttpsProxyOptions, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, trpcCalls=trpcCalls, qrVType=qrVType, cifs=cifs, v2Calls=v2Calls, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, tv3Write4KCalls=tv3Write4KCalls, viaCurrPTags=viaCurrPTags, ifHighInErrors=ifHighInErrors, chassisTemperatureShutdown=chassisTemperatureShutdown, globalStatusNonRecoverable=globalStatusNonRecoverable, svSchedStatus=svSchedStatus, dafsExportPath=dafsExportPath, tv3pWrites=tv3pWrites, smbMovePct=smbMovePct, dfLowUsedKBytes=dfLowUsedKBytes, cifsSMBDisconnects=cifsSMBDisconnects)
