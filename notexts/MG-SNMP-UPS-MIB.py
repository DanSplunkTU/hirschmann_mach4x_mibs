#
# PySNMP MIB module MG-SNMP-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/MG-SNMP-UPS-MIB
# Produced by pysmi-1.1.8 at Fri Feb 11 19:39:24 2022
# On host fv-az83-653 platform Linux version 5.11.0-1028-azure by user runner
# Using Python version 3.10.2 (main, Feb  7 2022, 07:35:17) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, TimeTicks, iso, NotificationType, Unsigned32, Integer32, ModuleIdentity, enterprises, Gauge32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "TimeTicks", "iso", "NotificationType", "Unsigned32", "Integer32", "ModuleIdentity", "enterprises", "Gauge32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
merlinGerin = MibIdentifier((1, 3, 6, 1, 4, 1, 705))
upsmg = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1))
upsmgIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 1))
upsmgManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 2))
upsmgReceptacle = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 3))
upsmgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 4))
upsmgBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 5))
upsmgInput = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 6))
upsmgOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 7))
upsmgEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 8))
upsmgControl = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 9))
upsmgTest = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 10))
upsmgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 11))
upsmgAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 12))
upsmgRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 705, 1, 13))
upsmgIdentFamilyName = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentFamilyName.setStatus('mandatory')
upsmgIdentModelName = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentModelName.setStatus('mandatory')
upsmgIdentRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentRevisionLevel.setStatus('mandatory')
upsmgIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentFirmwareVersion.setStatus('mandatory')
upsmgIdentUserID = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentUserID.setStatus('mandatory')
upsmgIdentInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentInstallationDate.setStatus('mandatory')
upsmgIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgIdentSerialNumber.setStatus('mandatory')
upsmgManagersNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgManagersNum.setStatus('mandatory')
upsmgManagersTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 2, 2), )
if mibBuilder.loadTexts: upsmgManagersTable.setStatus('mandatory')
upsmgManagersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgmanagerIndex"))
if mibBuilder.loadTexts: upsmgManagersEntry.setStatus('mandatory')
mgmanagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmanagerIndex.setStatus('mandatory')
mgmanagerDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerDeviceNumber.setStatus('mandatory')
mgmanagerNMSType = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("umclient", 1), ("decnetview", 2), ("umview", 3), ("dview", 4), ("hpopenview", 5), ("sunnetmanager", 6), ("novellnms", 7), ("ibmnetview", 8), ("other", 9), ("autolearning", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerNMSType.setStatus('mandatory')
mgmanagerCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("cmip", 3), ("snmpv1", 4), ("snmpv2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerCommType.setStatus('mandatory')
mgmanagerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerDescr.setStatus('mandatory')
mgmanagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerAddress.setStatus('mandatory')
mgmanagerCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerCommunity.setStatus('mandatory')
mgmanagerSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerSeverityLevel.setStatus('mandatory')
mgmanagerTrapAck = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mgack", 1), ("mgnoack", 2), ("stdnomg", 3), ("mgacks", 4), ("cpqnoack", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmanagerTrapAck.setStatus('mandatory')
upsmgReceptaclesNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgReceptaclesNum.setStatus('mandatory')
upsmgReceptaclesTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 3, 2), )
if mibBuilder.loadTexts: upsmgReceptaclesTable.setStatus('mandatory')
upsmgReceptaclesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgreceptacleIndex"))
if mibBuilder.loadTexts: upsmgReceptaclesEntry.setStatus('mandatory')
mgreceptacleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleIndex.setStatus('mandatory')
mgreceptacleLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleLevel.setStatus('mandatory')
mgreceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleType.setStatus('mandatory')
mgreceptacleIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleIdent.setStatus('mandatory')
mgreceptacleState = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("manualON", 1), ("manualOFF", 2), ("normalON", 3), ("normalOFF", 4), ("controlON", 5), ("controlOFF", 6), ("scheduleON", 7), ("scheduleOFF", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleState.setStatus('mandatory')
mgreceptacleReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleReceptacle.setStatus('mandatory')
mgreceptaclePowerCons = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptaclePowerCons.setStatus('mandatory')
mgreceptacleOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleOverload.setStatus('mandatory')
mgreceptacleAutonomy = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleAutonomy.setStatus('mandatory')
upsmgConfigBatteryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigBatteryInstalled.setStatus('mandatory')
upsmgConfigNominalBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigNominalBatteryVoltage.setStatus('mandatory')
upsmgConfigNominalBatteryTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigNominalBatteryTime.setStatus('mandatory')
upsmgConfigNominalRechargeTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigNominalRechargeTime.setStatus('mandatory')
upsmgConfigMinRechargeLevel = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigMinRechargeLevel.setStatus('mandatory')
upsmgConfigMaxRechargeTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigMaxRechargeTime.setStatus('mandatory')
upsmgConfigLowBatteryTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigLowBatteryTime.setStatus('mandatory')
upsmgConfigLowBatteryLevel = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigLowBatteryLevel.setStatus('mandatory')
upsmgConfigAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("never", 2), ("onmain", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigAutoRestart.setStatus('mandatory')
upsmgConfigShutdownTimer = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigShutdownTimer.setStatus('mandatory')
upsmgConfigSysShutDuration = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigSysShutDuration.setStatus('mandatory')
upsmgConfigVARating = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigVARating.setStatus('mandatory')
upsmgConfigLowTransfer = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigLowTransfer.setStatus('mandatory')
upsmgConfigHighTransfer = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHighTransfer.setStatus('mandatory')
upsmgConfigOutputNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigOutputNominalVoltage.setStatus('mandatory')
upsmgConfigOutputNominalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigOutputNominalCurrent.setStatus('mandatory')
upsmgConfigOutputNomFrequency = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigOutputNomFrequency.setStatus('mandatory')
upsmgConfigByPassType = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("relay", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigByPassType.setStatus('mandatory')
upsmgConfigAlarmAudible = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigAlarmAudible.setStatus('mandatory')
upsmgConfigAlarmTimeDelay = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigAlarmTimeDelay.setStatus('mandatory')
upsmgConfigDevicesNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigDevicesNum.setStatus('mandatory')
upsmgConfigDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 4, 22), )
if mibBuilder.loadTexts: upsmgConfigDevicesTable.setStatus('mandatory')
upsmgConfigDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgdeviceIndex"))
if mibBuilder.loadTexts: upsmgConfigDevicesEntry.setStatus('mandatory')
mgdeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgdeviceIndex.setStatus('mandatory')
mgdeviceReceptacleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceReceptacleNum.setStatus('mandatory')
mgdeviceIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceIdent.setStatus('mandatory')
mgdeviceVaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceVaRating.setStatus('mandatory')
mgdeviceSequenceOff = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceSequenceOff.setStatus('mandatory')
mgdeviceSequenceOn = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceSequenceOn.setStatus('mandatory')
mgdeviceShutdownDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceShutdownDuration.setStatus('mandatory')
mgdeviceBootUpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 22, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgdeviceBootUpDuration.setStatus('mandatory')
upsmgConfigReceptaclesTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 4, 23), )
if mibBuilder.loadTexts: upsmgConfigReceptaclesTable.setStatus('mandatory')
upsmgConfigReceptaclesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgreceptacleIndexb"))
if mibBuilder.loadTexts: upsmgConfigReceptaclesEntry.setStatus('mandatory')
mgreceptacleIndexb = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleIndexb.setStatus('mandatory')
mgreceptacleStateTurnOn = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last", 3), ("schedule", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleStateTurnOn.setStatus('mandatory')
mgreceptacleStateMainReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last", 3), ("schedule", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleStateMainReturn.setStatus('mandatory')
mgreceptacleStateDischarge = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("last", 3), ("schedule", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleStateDischarge.setStatus('mandatory')
mgreceptacleShutoffLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleShutoffLevel.setStatus('mandatory')
mgreceptacleShutoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleShutoffTimer.setStatus('mandatory')
mgreceptacleRestartLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleRestartLevel.setStatus('mandatory')
mgreceptacleRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleRestartDelay.setStatus('mandatory')
mgreceptacleShutdownDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleShutdownDuration.setStatus('mandatory')
mgreceptacleBootUpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleBootUpDuration.setStatus('mandatory')
upsmgConfigExtAlarmNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgConfigExtAlarmNum.setStatus('mandatory')
upsmgConfigExtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 4, 25), )
if mibBuilder.loadTexts: upsmgConfigExtAlarmTable.setStatus('mandatory')
upsmgConfigExtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 4, 25, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgextAlarmIndex"))
if mibBuilder.loadTexts: upsmgConfigExtAlarmEntry.setStatus('mandatory')
mgextAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgextAlarmIndex.setStatus('mandatory')
mgextAlarmUID = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 25, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgextAlarmUID.setStatus('mandatory')
upsmgConfigEmergencyTestFail = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigEmergencyTestFail.setStatus('mandatory')
upsmgConfigEmergencyOnByPass = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigEmergencyOnByPass.setStatus('mandatory')
upsmgConfigEmergencyOverload = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigEmergencyOverload.setStatus('mandatory')
upsmgConfigControlDayTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 4, 29), )
if mibBuilder.loadTexts: upsmgConfigControlDayTable.setStatus('mandatory')
upsmgConfigControlDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 4, 29, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgcontrolDayIndex"))
if mibBuilder.loadTexts: upsmgConfigControlDayEntry.setStatus('mandatory')
mgcontrolDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgcontrolDayIndex.setStatus('mandatory')
mgcontrolDayOn = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 29, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgcontrolDayOn.setStatus('mandatory')
mgcontrolDayOff = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 29, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgcontrolDayOff.setStatus('mandatory')
upsmgConfigLowBooster = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigLowBooster.setStatus('mandatory')
upsmgConfigHighBooster = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHighBooster.setStatus('mandatory')
upsmgConfigLowFader = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigLowFader.setStatus('mandatory')
upsmgConfigHighFader = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 4, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHighFader.setStatus('mandatory')
upsmgConfigEnvironmentTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 4, 34), )
if mibBuilder.loadTexts: upsmgConfigEnvironmentTable.setStatus('mandatory')
upsmgConfigEnvironmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "upsmgConfigSensorIndex"))
if mibBuilder.loadTexts: upsmgConfigEnvironmentEntry.setStatus('mandatory')
upsmgConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgConfigSensorIndex.setStatus('mandatory')
upsmgConfigSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigSensorName.setStatus('mandatory')
upsmgConfigTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigTemperatureLow.setStatus('mandatory')
upsmgConfigTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigTemperatureHigh.setStatus('mandatory')
upsmgConfigTemperatureHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigTemperatureHysteresis.setStatus('mandatory')
upsmgConfigHumidityLow = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHumidityLow.setStatus('mandatory')
upsmgConfigHumidityHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHumidityHigh.setStatus('mandatory')
upsmgConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigHumidityHysteresis.setStatus('mandatory')
upsmgConfigInput1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput1Name.setStatus('mandatory')
upsmgConfigInput1ClosedLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput1ClosedLabel.setStatus('mandatory')
upsmgConfigInput1OpenLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput1OpenLabel.setStatus('mandatory')
upsmgConfigInput2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput2Name.setStatus('mandatory')
upsmgConfigInput2ClosedLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput2ClosedLabel.setStatus('mandatory')
upsmgConfigInput2OpenLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 4, 34, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgConfigInput2OpenLabel.setStatus('mandatory')
upsmgBatteryRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryRemainingTime.setStatus('mandatory')
upsmgBatteryLevel = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryLevel.setStatus('mandatory')
upsmgBatteryRechargeTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryRechargeTime.setStatus('mandatory')
upsmgBatteryRechargeLevel = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryRechargeLevel.setStatus('mandatory')
upsmgBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryVoltage.setStatus('mandatory')
upsmgBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryCurrent.setStatus('mandatory')
upsmgBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryTemperature.setStatus('mandatory')
upsmgBatteryFullRechargeTime = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryFullRechargeTime.setStatus('mandatory')
upsmgBatteryFaultBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryFaultBattery.setStatus('mandatory')
upsmgBatteryNoBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryNoBattery.setStatus('mandatory')
upsmgBatteryReplacement = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryReplacement.setStatus('mandatory')
upsmgBatteryUnavailableBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryUnavailableBattery.setStatus('mandatory')
upsmgBatteryNotHighCharge = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryNotHighCharge.setStatus('mandatory')
upsmgBatteryLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryLowBattery.setStatus('mandatory')
upsmgBatteryChargerFault = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryChargerFault.setStatus('mandatory')
upsmgBatteryLowCondition = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryLowCondition.setStatus('mandatory')
upsmgBatteryLowRecharge = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgBatteryLowRecharge.setStatus('mandatory')
upsmgInputPhaseNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgInputPhaseNum.setStatus('mandatory')
upsmgInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 6, 2), )
if mibBuilder.loadTexts: upsmgInputPhaseTable.setStatus('mandatory')
upsmgInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mginputIndex"))
if mibBuilder.loadTexts: upsmgInputPhaseEntry.setStatus('mandatory')
mginputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputIndex.setStatus('mandatory')
mginputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputVoltage.setStatus('mandatory')
mginputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputFrequency.setStatus('mandatory')
mginputMinimumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputMinimumVoltage.setStatus('mandatory')
mginputMaximumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputMaximumVoltage.setStatus('mandatory')
mginputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mginputCurrent.setStatus('mandatory')
upsmgInputBadStatus = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgInputBadStatus.setStatus('mandatory')
upsmgInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("outoftolvolt", 2), ("outoftolfreq", 3), ("utilityoff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgInputLineFailCause.setStatus('mandatory')
upsmgOutputPhaseNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputPhaseNum.setStatus('mandatory')
upsmgOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 7, 2), )
if mibBuilder.loadTexts: upsmgOutputPhaseTable.setStatus('mandatory')
upsmgOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgoutputPhaseIndex"))
if mibBuilder.loadTexts: upsmgOutputPhaseEntry.setStatus('mandatory')
mgoutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgoutputPhaseIndex.setStatus('mandatory')
mgoutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgoutputVoltage.setStatus('mandatory')
mgoutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgoutputFrequency.setStatus('mandatory')
mgoutputLoadPerPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgoutputLoadPerPhase.setStatus('mandatory')
mgoutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgoutputCurrent.setStatus('mandatory')
upsmgOutputOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOnBattery.setStatus('mandatory')
upsmgOutputOnByPass = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOnByPass.setStatus('mandatory')
upsmgOutputUnavailableByPass = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputUnavailableByPass.setStatus('mandatory')
upsmgOutputNoByPass = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputNoByPass.setStatus('mandatory')
upsmgOutputUtilityOff = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputUtilityOff.setStatus('mandatory')
upsmgOutputOnBoost = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOnBoost.setStatus('mandatory')
upsmgOutputInverterOff = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputInverterOff.setStatus('mandatory')
upsmgOutputOverLoad = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOverLoad.setStatus('mandatory')
upsmgOutputOverTemp = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOverTemp.setStatus('mandatory')
upsmgOutputOnBuck = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgOutputOnBuck.setStatus('mandatory')
upsmgEnvironAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironAmbientTemp.setStatus('mandatory')
upsmgEnvironAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironAmbientHumidity.setStatus('mandatory')
upsmgEnvironExtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 8, 3), )
if mibBuilder.loadTexts: upsmgEnvironExtAlarmTable.setStatus('mandatory')
upsmgEnvironExtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 8, 3, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgalarmNum"))
if mibBuilder.loadTexts: upsmgEnvironExtAlarmEntry.setStatus('mandatory')
mgalarmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgalarmNum.setStatus('mandatory')
mgalarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgalarmState.setStatus('mandatory')
upsmgEnvironSensorNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironSensorNum.setStatus('mandatory')
upsmgEnvironSensorTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 8, 5), )
if mibBuilder.loadTexts: upsmgEnvironSensorTable.setStatus('mandatory')
upsmgEnvironSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 8, 5, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgsensorNum"))
if mibBuilder.loadTexts: upsmgEnvironSensorEntry.setStatus('mandatory')
mgsensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgsensorNum.setStatus('mandatory')
mgsensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgsensorTemp.setStatus('mandatory')
mgsensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgsensorHumidity.setStatus('mandatory')
upsmgEnvironmentNum = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentNum.setStatus('mandatory')
upsmgEnvironmentSensorTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 8, 7), )
if mibBuilder.loadTexts: upsmgEnvironmentSensorTable.setStatus('mandatory')
upsmgEnvironmentSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "upsmgEnvironmentIndex"))
if mibBuilder.loadTexts: upsmgEnvironmentSensorEntry.setStatus('mandatory')
upsmgEnvironmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentIndex.setStatus('mandatory')
upsmgEnvironmentComFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentComFailure.setStatus('mandatory')
upsmgEnvironmentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentTemperature.setStatus('mandatory')
upsmgEnvironmentTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentTemperatureLow.setStatus('mandatory')
upsmgEnvironmentTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentTemperatureHigh.setStatus('mandatory')
upsmgEnvironmentHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentHumidity.setStatus('mandatory')
upsmgEnvironmentHumidityLow = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentHumidityLow.setStatus('mandatory')
upsmgEnvironmentHumidityHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentHumidityHigh.setStatus('mandatory')
upsmgEnvironmentInput1State = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentInput1State.setStatus('mandatory')
upsmgEnvironmentInput2State = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 8, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgEnvironmentInput2State.setStatus('mandatory')
upsmgControlReceptaclesTable = MibTable((1, 3, 6, 1, 4, 1, 705, 1, 9, 1), )
if mibBuilder.loadTexts: upsmgControlReceptaclesTable.setStatus('mandatory')
upsmgControlReceptaclesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1), ).setIndexNames((0, "MG-SNMP-UPS-MIB", "mgreceptacleIndexc"))
if mibBuilder.loadTexts: upsmgControlReceptaclesEntry.setStatus('mandatory')
mgreceptacleIndexc = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleIndexc.setStatus('mandatory')
mgreceptacleOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleOnDelay.setStatus('mandatory')
mgreceptacleOnCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nothing", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleOnCtrl.setStatus('mandatory')
mgreceptacleOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("started", 2), ("inprogressinups", 3), ("completed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleOnStatus.setStatus('mandatory')
mgreceptacleOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleOffDelay.setStatus('mandatory')
mgreceptacleOffCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nothing", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleOffCtrl.setStatus('mandatory')
mgreceptacleOffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("started", 2), ("inprogressinups", 3), ("completed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleOffStatus.setStatus('mandatory')
mgreceptacleToggleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleToggleDelay.setStatus('mandatory')
mgreceptacleToggleCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nothing", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleToggleCtrl.setStatus('mandatory')
mgreceptacleToggleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("started", 2), ("inprogressinups", 3), ("completed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgreceptacleToggleStatus.setStatus('mandatory')
mgreceptacleToggleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 705, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgreceptacleToggleDuration.setStatus('mandatory')
upsmgControlDayOff = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saterday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgControlDayOff.setStatus('mandatory')
upsmgControlDayOn = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saterday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgControlDayOn.setStatus('mandatory')
upsmgTestBatterySchedule = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("weekly", 2), ("monthly", 3), ("atturnon", 4), ("none", 5), ("dayly", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestBatterySchedule.setStatus('mandatory')
upsmgTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestDiagnostics.setStatus('mandatory')
upsmgTestDiagResult = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgTestDiagResult.setStatus('mandatory')
upsmgTestBatteryCalibration = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestBatteryCalibration.setStatus('mandatory')
upsmgTestLastCalibration = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgTestLastCalibration.setStatus('mandatory')
upsmgTestIndicators = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestIndicators.setStatus('mandatory')
upsmgTestCommandLine = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestCommandLine.setStatus('mandatory')
upsmgTestCommandReady = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgTestCommandReady.setStatus('mandatory')
upsmgTestResponseLine = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgTestResponseLine.setStatus('mandatory')
upsmgTestResponseReady = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgTestResponseReady.setStatus('mandatory')
upsmgTestBatteryResult = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("msuccess", 1), ("mfailed", 2), ("ssuccess", 3), ("sfailed", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgTestBatteryResult.setStatus('mandatory')
upsmgBatteryFault = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,1))
upsmgBatteryOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,2))
upsmgBatteryReplacementIndicated = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,3))
upsmgBatteryReplaceNotIndicated = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,4))
upsmgAtLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,5)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,6)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgChargerFault = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,7))
upsmgChargerOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,8))
upsmgAtLowCondition = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,9)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgFromLowCondition = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,10)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,11)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgReturnFromBattery = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,12)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgOnByPass = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,13))
upsmgReturnFromByPass = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,14))
upsmgByPassUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,15))
upsmgByPassAvailable = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,16))
upsmgUtilityFailure = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,17))
upsmgUtilityRestored = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,18))
upsmgOnBoost = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,19))
upsmgReturnFromBoost = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,20))
upsmgOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,21))
upsmgLoadOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,22))
upsmgOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,23))
upsmgTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,24))
upsmgOnToStart = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,25)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleState"), ("MG-SNMP-UPS-MIB", "mgreceptacleOnDelay"), ("MG-SNMP-UPS-MIB", "mgreceptacleRestartDelay"))
upsmgOnAbort = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,26)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleOnDelay"))
upsmgOnInProgress = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,27)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleState"), ("MG-SNMP-UPS-MIB", "mgreceptacleBootUpDuration"))
upsmgOnComplete = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,28)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleOnDelay"))
upsmgOffToStart = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,29)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleState"), ("MG-SNMP-UPS-MIB", "mgreceptacleOffDelay"), ("MG-SNMP-UPS-MIB", "mgreceptacleShutoffTimer"), ("MG-SNMP-UPS-MIB", "upsmgConfigSysShutDuration"))
upsmgOffAbort = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,30)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleOffDelay"))
upsmgOffInProgress = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,31)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleState"), ("MG-SNMP-UPS-MIB", "mgreceptacleShutdownDuration"))
upsmgOffComplete = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,32)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleOffDelay"))
upsmgToggleToStart = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,33)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleToggleDelay"))
upsmgToggleAbort = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,34)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleToggleDelay"))
upsmgToggleInProgress = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,35)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleToggleDuration"))
upsmgToggleComplete = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,36)).setObjects(("MG-SNMP-UPS-MIB", "mgreceptacleIndex"), ("MG-SNMP-UPS-MIB", "mgreceptacleToggleDuration"))
upsmgCommunicationFailure = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,37))
upsmgCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,38))
upsmgInputBad = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,39))
upsmgInputOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,40))
upsmgBatteryUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,41))
upsmgBatteryAvailable = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,42))
upsmgAtLowRecharge = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,43)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgFromLowRecharge = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,44)).setObjects(("MG-SNMP-UPS-MIB", "upsmgBatteryRemainingTime"), ("MG-SNMP-UPS-MIB", "upsmgBatteryLevel"))
upsmgDiagnosticTestFail = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,45))
upsmgDiagnosticTestOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,46))
upsmgBatteryTestOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,47))
upsmgBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,48))
upsmgExternalAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,49)).setObjects(("MG-SNMP-UPS-MIB", "mgextAlarmIndex"), ("MG-SNMP-UPS-MIB", "mgextAlarmUID"))
upsmgExternalAlarmInactive = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,50)).setObjects(("MG-SNMP-UPS-MIB", "mgextAlarmIndex"), ("MG-SNMP-UPS-MIB", "mgextAlarmUID"))
upsmgOnBuck = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,51))
upsmgReturnFromBuck = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,52))
upsmgEnvironComFailure = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,53))
upsmgEnvironComOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,54))
upsmgEnvironTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,55))
upsmgEnvironTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,56))
upsmgEnvironTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,57))
upsmgEnvironHumidityLow = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,58))
upsmgEnvironHumidityHigh = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,59))
upsmgEnvironHumidityOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,60))
upsmgEnvironInput1Closed = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,61))
upsmgEnvironInput1Open = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,62))
upsmgEnvironInput2Closed = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,63))
upsmgEnvironInput2Open = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,64))
upsRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,65))
upsRedundancyOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,66))
upsProtectionLost = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,67))
upsProtectionOK = NotificationType((1, 3, 6, 1, 4, 1, 705, 1, 11) + (0,68))
upsmgAgentIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentIpaddress.setStatus('mandatory')
upsmgAgentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentSubnetMask.setStatus('mandatory')
upsmgAgentDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentDefGateway.setStatus('mandatory')
upsmgAgentBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentBaudRate.setStatus('mandatory')
upsmgAgentPollRate = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentPollRate.setStatus('mandatory')
upsmgAgentType = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deviceEth", 1), ("deviceTR", 2), ("proxyEth", 3), ("proxyTR", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentType.setStatus('mandatory')
upsmgAgentTrapAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentTrapAlarmDelay.setStatus('mandatory')
upsmgAgentTrapAlarmRetry = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentTrapAlarmRetry.setStatus('mandatory')
upsmgAgentReset = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentReset.setStatus('mandatory')
upsmgAgentFactReset = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentFactReset.setStatus('mandatory')
upsmgAgentMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgAgentMibVersion.setStatus('mandatory')
upsmgAgentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgAgentFirmwareVersion.setStatus('mandatory')
upsmgAgentCommUPS = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgAgentCommUPS.setStatus('mandatory')
upsmgAgentTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentTrapAck.setStatus('mandatory')
upsmgAgentAutoLearning = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentAutoLearning.setStatus('mandatory')
upsmgAgentBootP = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentBootP.setStatus('mandatory')
upsmgAgentTFTP = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgAgentTFTP.setStatus('mandatory')
upsmgAgentTrapSignature = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 12, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmgAgentTrapSignature.setStatus('mandatory')
upsmgRemoteOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgRemoteOnBattery.setStatus('mandatory')
upsmgRemoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 705, 1, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmgRemoteIpAddress.setStatus('mandatory')
mibBuilder.exportSymbols("MG-SNMP-UPS-MIB", mginputMaximumVoltage=mginputMaximumVoltage, upsmgOnComplete=upsmgOnComplete, upsmgAgentTrapAlarmDelay=upsmgAgentTrapAlarmDelay, mgreceptaclePowerCons=mgreceptaclePowerCons, upsmgRemote=upsmgRemote, upsmgBatteryAvailable=upsmgBatteryAvailable, mginputIndex=mginputIndex, upsmgTestResponseLine=upsmgTestResponseLine, upsmgConfigHighTransfer=upsmgConfigHighTransfer, upsmgChargerOK=upsmgChargerOK, mgreceptacleIdent=mgreceptacleIdent, upsmgEnvironTemperatureLow=upsmgEnvironTemperatureLow, upsmgBatteryTestFail=upsmgBatteryTestFail, upsProtectionLost=upsProtectionLost, upsmgEnvironmentTemperature=upsmgEnvironmentTemperature, upsmgOffComplete=upsmgOffComplete, upsmgEnvironHumidityLow=upsmgEnvironHumidityLow, mgdeviceReceptacleNum=mgdeviceReceptacleNum, upsmgChargerFault=upsmgChargerFault, upsmgLoadOK=upsmgLoadOK, upsmgAgentReset=upsmgAgentReset, upsmgOffInProgress=upsmgOffInProgress, upsmgTestDiagResult=upsmgTestDiagResult, upsmgToggleComplete=upsmgToggleComplete, mgoutputLoadPerPhase=mgoutputLoadPerPhase, mgreceptacleShutoffTimer=mgreceptacleShutoffTimer, mgreceptacleType=mgreceptacleType, mgreceptacleOnStatus=mgreceptacleOnStatus, upsmgBatteryUnavailable=upsmgBatteryUnavailable, mgreceptacleLevel=mgreceptacleLevel, mgmanagerCommType=mgmanagerCommType, mgreceptacleIndex=mgreceptacleIndex, upsmgEnvironAmbientHumidity=upsmgEnvironAmbientHumidity, upsmgAgent=upsmgAgent, upsmgConfigExtAlarmEntry=upsmgConfigExtAlarmEntry, upsmgBatteryRemainingTime=upsmgBatteryRemainingTime, upsmgControlDayOn=upsmgControlDayOn, upsmgConfigSensorIndex=upsmgConfigSensorIndex, upsmgOutputPhaseNum=upsmgOutputPhaseNum, mgmanagerTrapAck=mgmanagerTrapAck, upsmgConfigAlarmTimeDelay=upsmgConfigAlarmTimeDelay, upsmgEnvironComOK=upsmgEnvironComOK, upsmgTest=upsmgTest, upsmgBatteryOK=upsmgBatteryOK, upsmgConfigNominalBatteryTime=upsmgConfigNominalBatteryTime, upsmgOutput=upsmgOutput, upsmgAgentSubnetMask=upsmgAgentSubnetMask, upsmgBatteryReplacementIndicated=upsmgBatteryReplacementIndicated, upsmgOutputOnBattery=upsmgOutputOnBattery, upsmgAgentIpaddress=upsmgAgentIpaddress, upsmgTestBatteryCalibration=upsmgTestBatteryCalibration, upsmgConfigVARating=upsmgConfigVARating, upsmgEnvironmentTemperatureHigh=upsmgEnvironmentTemperatureHigh, mgreceptacleState=mgreceptacleState, upsmgConfigInput2ClosedLabel=upsmgConfigInput2ClosedLabel, upsmgOutputNoByPass=upsmgOutputNoByPass, upsmgConfigNominalBatteryVoltage=upsmgConfigNominalBatteryVoltage, mgreceptacleAutonomy=mgreceptacleAutonomy, upsmgOnBuck=upsmgOnBuck, upsProtectionOK=upsProtectionOK, upsmgReturnFromBoost=upsmgReturnFromBoost, upsmgEnvironExtAlarmEntry=upsmgEnvironExtAlarmEntry, upsmgCommunicationRestored=upsmgCommunicationRestored, upsmgOnByPass=upsmgOnByPass, upsmgConfigNominalRechargeTime=upsmgConfigNominalRechargeTime, upsmgAgentFactReset=upsmgAgentFactReset, upsmgBatteryFullRechargeTime=upsmgBatteryFullRechargeTime, upsmgAgentAutoLearning=upsmgAgentAutoLearning, mgreceptacleToggleStatus=mgreceptacleToggleStatus, upsmgEnvironInput2Open=upsmgEnvironInput2Open, upsmgConfigReceptaclesEntry=upsmgConfigReceptaclesEntry, mgalarmState=mgalarmState, upsmgConfigEmergencyTestFail=upsmgConfigEmergencyTestFail, upsmgByPassAvailable=upsmgByPassAvailable, upsmgManagersTable=upsmgManagersTable, upsmgOffToStart=upsmgOffToStart, mgcontrolDayOff=mgcontrolDayOff, mginputVoltage=mginputVoltage, upsmgAgentBootP=upsmgAgentBootP, merlinGerin=merlinGerin, upsmgConfigLowBatteryTime=upsmgConfigLowBatteryTime, upsmgIdentUserID=upsmgIdentUserID, upsmgConfigInput1Name=upsmgConfigInput1Name, upsmgConfigControlDayEntry=upsmgConfigControlDayEntry, upsmgBatteryRechargeLevel=upsmgBatteryRechargeLevel, upsmgConfigLowFader=upsmgConfigLowFader, mginputFrequency=mginputFrequency, mgalarmNum=mgalarmNum, upsmgAgentMibVersion=upsmgAgentMibVersion, upsmgBatteryLowBattery=upsmgBatteryLowBattery, upsmgConfigHumidityHigh=upsmgConfigHumidityHigh, mgdeviceSequenceOn=mgdeviceSequenceOn, mgdeviceSequenceOff=mgdeviceSequenceOff, upsmgTemperatureOK=upsmgTemperatureOK, mgextAlarmUID=mgextAlarmUID, upsmgConfigOutputNominalCurrent=upsmgConfigOutputNominalCurrent, mgreceptacleIndexb=mgreceptacleIndexb, mgextAlarmIndex=mgextAlarmIndex, mgmanagerDescr=mgmanagerDescr, upsmgEnvironmentSensorTable=upsmgEnvironmentSensorTable, mgmanagerSeverityLevel=mgmanagerSeverityLevel, upsRedundancyLost=upsRedundancyLost, upsmgReceptaclesTable=upsmgReceptaclesTable, mgreceptacleStateTurnOn=mgreceptacleStateTurnOn, upsmgEnvironExtAlarmTable=upsmgEnvironExtAlarmTable, upsmgAgentTFTP=upsmgAgentTFTP, upsmgEnvironmentSensorEntry=upsmgEnvironmentSensorEntry, upsmgEnvironInput1Closed=upsmgEnvironInput1Closed, upsmgIdentModelName=upsmgIdentModelName, upsmgIdentSerialNumber=upsmgIdentSerialNumber, mgreceptacleOverload=mgreceptacleOverload, upsmgBatteryLowRecharge=upsmgBatteryLowRecharge, mgreceptacleShutdownDuration=mgreceptacleShutdownDuration, upsmgBatteryTestOK=upsmgBatteryTestOK, upsmgOutputPhaseEntry=upsmgOutputPhaseEntry, upsmgExternalAlarmActive=upsmgExternalAlarmActive, mgsensorNum=mgsensorNum, upsmgByPassUnavailable=upsmgByPassUnavailable, upsmgIdent=upsmgIdent, upsmgConfigInput2Name=upsmgConfigInput2Name, mgreceptacleReceptacle=mgreceptacleReceptacle, mgreceptacleBootUpDuration=mgreceptacleBootUpDuration, upsmgBatteryNoBattery=upsmgBatteryNoBattery, upsmgRemoteIpAddress=upsmgRemoteIpAddress, upsmgInputLineFailCause=upsmgInputLineFailCause, upsmgOnBattery=upsmgOnBattery, upsmgConfigMaxRechargeTime=upsmgConfigMaxRechargeTime, upsmgConfigBatteryInstalled=upsmgConfigBatteryInstalled, upsmgEnvironmentHumidityHigh=upsmgEnvironmentHumidityHigh, mgmanagerNMSType=mgmanagerNMSType, upsmgReturnFromByPass=upsmgReturnFromByPass, upsmgConfigEnvironmentTable=upsmgConfigEnvironmentTable, upsmgConfigTemperatureLow=upsmgConfigTemperatureLow, upsmgAtLowRecharge=upsmgAtLowRecharge, upsmgConfigSensorName=upsmgConfigSensorName, upsmgOnToStart=upsmgOnToStart, upsmgOnBoost=upsmgOnBoost, upsmgAtLowBattery=upsmgAtLowBattery, mgcontrolDayOn=mgcontrolDayOn, mgdeviceShutdownDuration=mgdeviceShutdownDuration, upsmgEnvironmentHumidityLow=upsmgEnvironmentHumidityLow, upsmgOutputOnBuck=upsmgOutputOnBuck, upsmgAgentCommUPS=upsmgAgentCommUPS, upsmgEnvironSensorNum=upsmgEnvironSensorNum, upsmgOutputPhaseTable=upsmgOutputPhaseTable, upsmgEnvironmentTemperatureLow=upsmgEnvironmentTemperatureLow, upsmgInputBad=upsmgInputBad, upsmgEnvironInput2Closed=upsmgEnvironInput2Closed, upsmgAgentPollRate=upsmgAgentPollRate, upsmgInputPhaseEntry=upsmgInputPhaseEntry, upsmgConfigDevicesNum=upsmgConfigDevicesNum, upsmgConfigInput2OpenLabel=upsmgConfigInput2OpenLabel, upsmgConfigLowBooster=upsmgConfigLowBooster, mgoutputPhaseIndex=mgoutputPhaseIndex, upsmgInputBadStatus=upsmgInputBadStatus, upsmgConfigTemperatureHigh=upsmgConfigTemperatureHigh, mgmanagerDeviceNumber=mgmanagerDeviceNumber, mgdeviceIdent=mgdeviceIdent, upsmgOverTemperature=upsmgOverTemperature, mgreceptacleShutoffLevel=mgreceptacleShutoffLevel, upsmgConfigMinRechargeLevel=upsmgConfigMinRechargeLevel, upsmgEnvironSensorEntry=upsmgEnvironSensorEntry, upsmgTraps=upsmgTraps, upsmgConfig=upsmgConfig, upsmgManagersNum=upsmgManagersNum, upsmgConfigEnvironmentEntry=upsmgConfigEnvironmentEntry, upsmgExternalAlarmInactive=upsmgExternalAlarmInactive, upsmgBatteryReplaceNotIndicated=upsmgBatteryReplaceNotIndicated, upsmgConfigHumidityHysteresis=upsmgConfigHumidityHysteresis, upsmgEnvironmentInput1State=upsmgEnvironmentInput1State, upsmgRemoteOnBattery=upsmgRemoteOnBattery, upsmgAgentTrapAlarmRetry=upsmgAgentTrapAlarmRetry, upsmgOutputOnByPass=upsmgOutputOnByPass, upsmgBatteryVoltage=upsmgBatteryVoltage, upsmgAgentFirmwareVersion=upsmgAgentFirmwareVersion, mgmanagerCommunity=mgmanagerCommunity, upsmgDiagnosticTestOK=upsmgDiagnosticTestOK, mgreceptacleToggleCtrl=mgreceptacleToggleCtrl, mgreceptacleOnDelay=mgreceptacleOnDelay, upsmgToggleInProgress=upsmgToggleInProgress, upsmgEnvironInput1Open=upsmgEnvironInput1Open, upsmgManagersEntry=upsmgManagersEntry, upsmgConfigControlDayTable=upsmgConfigControlDayTable, upsmgConfigShutdownTimer=upsmgConfigShutdownTimer, upsmgTestCommandLine=upsmgTestCommandLine, upsmgIdentFamilyName=upsmgIdentFamilyName, upsmgConfigHighBooster=upsmgConfigHighBooster, upsmgConfigTemperatureHysteresis=upsmgConfigTemperatureHysteresis, mgreceptacleIndexc=mgreceptacleIndexc, upsmgBatteryNotHighCharge=upsmgBatteryNotHighCharge, upsmgBatteryFaultBattery=upsmgBatteryFaultBattery, upsmgConfigEmergencyOverload=upsmgConfigEmergencyOverload, upsmgEnvironHumidityOK=upsmgEnvironHumidityOK, upsmgEnvironmentHumidity=upsmgEnvironmentHumidity, upsmgTestDiagnostics=upsmgTestDiagnostics, upsmgControlDayOff=upsmgControlDayOff, upsmgEnvironTemperatureHigh=upsmgEnvironTemperatureHigh, upsmgInputPhaseTable=upsmgInputPhaseTable, mgreceptacleToggleDuration=mgreceptacleToggleDuration, mginputMinimumVoltage=mginputMinimumVoltage, upsmgUtilityFailure=upsmgUtilityFailure, mgmanagerAddress=mgmanagerAddress, upsmgConfigEmergencyOnByPass=upsmgConfigEmergencyOnByPass, upsmgReceptacle=upsmgReceptacle, upsmgReturnFromBattery=upsmgReturnFromBattery, mgoutputCurrent=mgoutputCurrent, mgreceptacleStateMainReturn=mgreceptacleStateMainReturn, mgmanagerIndex=mgmanagerIndex, upsmgControlReceptaclesEntry=upsmgControlReceptaclesEntry, upsmgTestResponseReady=upsmgTestResponseReady, mgreceptacleRestartDelay=mgreceptacleRestartDelay, mgdeviceIndex=mgdeviceIndex, upsmgFromLowRecharge=upsmgFromLowRecharge, upsmgAgentTrapSignature=upsmgAgentTrapSignature, upsmgIdentRevisionLevel=upsmgIdentRevisionLevel, upsmgBatteryLowCondition=upsmgBatteryLowCondition, upsmgEnvironmentInput2State=upsmgEnvironmentInput2State, upsmgOutputUnavailableByPass=upsmgOutputUnavailableByPass, mgreceptacleOnCtrl=mgreceptacleOnCtrl, upsmgBatteryRechargeTime=upsmgBatteryRechargeTime, upsmgConfigExtAlarmTable=upsmgConfigExtAlarmTable, upsmgOverLoad=upsmgOverLoad, mgcontrolDayIndex=mgcontrolDayIndex, upsmgTestBatteryResult=upsmgTestBatteryResult, upsmgConfigDevicesTable=upsmgConfigDevicesTable, mgreceptacleOffDelay=mgreceptacleOffDelay, mgsensorTemp=mgsensorTemp, upsmgManagement=upsmgManagement, upsmgControlReceptaclesTable=upsmgControlReceptaclesTable, upsmgOnInProgress=upsmgOnInProgress, upsmgEnvironmentNum=upsmgEnvironmentNum, upsmgReturnFromBuck=upsmgReturnFromBuck, mgsensorHumidity=mgsensorHumidity, upsmgConfigExtAlarmNum=upsmgConfigExtAlarmNum, mgreceptacleToggleDelay=mgreceptacleToggleDelay, upsmgConfigAutoRestart=upsmgConfigAutoRestart, upsmgTestLastCalibration=upsmgTestLastCalibration, upsmgFromLowBattery=upsmgFromLowBattery, mgoutputVoltage=mgoutputVoltage, upsmgUtilityRestored=upsmgUtilityRestored, upsmgReceptaclesNum=upsmgReceptaclesNum, upsmgAgentDefGateway=upsmgAgentDefGateway, upsmgInput=upsmgInput, mgreceptacleOffCtrl=mgreceptacleOffCtrl, upsmgBatteryChargerFault=upsmgBatteryChargerFault, upsmgAgentTrapAck=upsmgAgentTrapAck, upsmgEnvironmentIndex=upsmgEnvironmentIndex, upsmgAgentType=upsmgAgentType, mgreceptacleOffStatus=mgreceptacleOffStatus, upsmgConfigLowTransfer=upsmgConfigLowTransfer, mgdeviceBootUpDuration=mgdeviceBootUpDuration, upsmgEnvironmentComFailure=upsmgEnvironmentComFailure, upsmgConfigInput1OpenLabel=upsmgConfigInput1OpenLabel, upsmgInputOK=upsmgInputOK)
mibBuilder.exportSymbols("MG-SNMP-UPS-MIB", upsmgReceptaclesEntry=upsmgReceptaclesEntry, upsmgTestBatterySchedule=upsmgTestBatterySchedule, upsmgEnvironTemperatureOK=upsmgEnvironTemperatureOK, upsRedundancyOK=upsRedundancyOK, upsmgBattery=upsmgBattery, mgoutputFrequency=mgoutputFrequency, upsmgConfigByPassType=upsmgConfigByPassType, upsmgOutputOnBoost=upsmgOutputOnBoost, upsmgAtLowCondition=upsmgAtLowCondition, upsmgControl=upsmgControl, upsmgIdentInstallationDate=upsmgIdentInstallationDate, upsmgOutputUtilityOff=upsmgOutputUtilityOff, upsmgIdentFirmwareVersion=upsmgIdentFirmwareVersion, upsmgEnvironAmbientTemp=upsmgEnvironAmbientTemp, upsmgConfigLowBatteryLevel=upsmgConfigLowBatteryLevel, upsmgOutputOverLoad=upsmgOutputOverLoad, upsmgDiagnosticTestFail=upsmgDiagnosticTestFail, mgreceptacleStateDischarge=mgreceptacleStateDischarge, upsmgEnviron=upsmgEnviron, upsmgConfigHighFader=upsmgConfigHighFader, upsmgBatteryFault=upsmgBatteryFault, upsmgConfigSysShutDuration=upsmgConfigSysShutDuration, upsmgInputPhaseNum=upsmgInputPhaseNum, upsmg=upsmg, mgdeviceVaRating=mgdeviceVaRating, upsmgEnvironSensorTable=upsmgEnvironSensorTable, upsmgTestCommandReady=upsmgTestCommandReady, upsmgTestIndicators=upsmgTestIndicators, upsmgOutputInverterOff=upsmgOutputInverterOff, upsmgBatteryTemperature=upsmgBatteryTemperature, upsmgOnAbort=upsmgOnAbort, upsmgBatteryUnavailableBattery=upsmgBatteryUnavailableBattery, mginputCurrent=mginputCurrent, upsmgConfigOutputNomFrequency=upsmgConfigOutputNomFrequency, upsmgConfigOutputNominalVoltage=upsmgConfigOutputNominalVoltage, upsmgCommunicationFailure=upsmgCommunicationFailure, upsmgBatteryReplacement=upsmgBatteryReplacement, upsmgToggleToStart=upsmgToggleToStart, upsmgConfigAlarmAudible=upsmgConfigAlarmAudible, upsmgConfigDevicesEntry=upsmgConfigDevicesEntry, upsmgConfigReceptaclesTable=upsmgConfigReceptaclesTable, mgreceptacleRestartLevel=mgreceptacleRestartLevel, upsmgBatteryCurrent=upsmgBatteryCurrent, upsmgConfigInput1ClosedLabel=upsmgConfigInput1ClosedLabel, upsmgToggleAbort=upsmgToggleAbort, upsmgOffAbort=upsmgOffAbort, upsmgOutputOverTemp=upsmgOutputOverTemp, upsmgBatteryLevel=upsmgBatteryLevel, upsmgEnvironHumidityHigh=upsmgEnvironHumidityHigh, upsmgEnvironComFailure=upsmgEnvironComFailure, upsmgFromLowCondition=upsmgFromLowCondition, upsmgConfigHumidityLow=upsmgConfigHumidityLow, upsmgAgentBaudRate=upsmgAgentBaudRate)
