#
# PySNMP MIB module LISP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/LISP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:07:50 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsL3VpnName, = mibBuilder.importSymbols("MPLS-L3VPN-STD-MIB", "MplsL3VpnName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Counter64, Unsigned32, mib_2, ModuleIdentity, TimeTicks, Counter32, NotificationType, IpAddress, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Unsigned32", "mib-2", "ModuleIdentity", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Gauge32")
TextualConvention, TruthValue, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TimeStamp", "DisplayString")
lispMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 220))
lispMIB.setRevisions(('2013-10-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lispMIB.setRevisionsDescriptions(('Initial version of the IETF LISP-MIB module.\n                  Published as RFC 7052.',))
if mibBuilder.loadTexts: lispMIB.setLastUpdated('201310210000Z')
if mibBuilder.loadTexts: lispMIB.setOrganization('IETF Locator/ID Separation Protocol (LISP) Working Group')
if mibBuilder.loadTexts: lispMIB.setContactInfo('Email: lisp@ietf.org\n             WG charter:\n             http://datatracker.ietf.org/wg/lisp/charter/')
if mibBuilder.loadTexts: lispMIB.setDescription("This MIB module contains managed objects to support\n             monitoring devices that support the Locator/ID Separation\n             Protocol (LISP).\n\n             Copyright (c) 2013 IETF Trust and the persons identified\n             as authors of the code.  All rights reserved.\n\n             Redistribution and use in source and binary forms, with\n             or without modification, is permitted pursuant to, and\n             subject to the license terms contained in, the Simplified\n             BSD License set forth in Section 4.c of the IETF Trust's\n             Legal Provisions Relating to IETF Documents\n             (http://trustee.ietf.org/license-info).")
class LispAddressType(TextualConvention, OctetString):
    reference = 'RFC 6830, Section 14.2 and\n         LISP Canonical Address Format (LCAF), Work in Progress,\n         March 2013.'
    description = 'LISP architecture can be applied to a wide variety of\n       address-families.  This textual-convention is a generalization\n       for representing addresses belonging to those address-families.\n       For convenience, this document refers to any such address as a\n       LISP address.  LispAddressType textual-convention consists of\n       the following four-tuple:\n       1. IANA Address Family Number: A field of length 2 octets,\n          whose value is of the form following the assigned\n          AddressFamilyNumbers textual-convention described in\n          IANA-ADDRESS-FAMILY-NUMBERS-MIB DEFINITIONS, available from\n          http://www.iana.org/assignments/ianaaddressfamilynumbers-mib.\n          The enumerations are also listed in [IANA].  Note that this\n          list of address family numbers is maintained by IANA.\n       2. Length of LISP address: A field of length 1 octet, whose\n          value indicates the octet-length of the next (third)\n          field of this LispAddressType four-tuple.\n       3. LISP address: A field of variable length as indicated in\n          the previous (second) field, whose value is an address\n          of the IANA Address Family indicated in the first field\n          of this LispAddressType four-tuple.  Note that any of\n          the IANA Address Families can be represented.\n          Particularly when the address family is LISP Canonical\n          Address Format (LCAF)\n          with IANA-assigned Address Family Number 16387, then the\n          first octet of this field indicates the LCAF type, and the\n          rest of this field is same as the encoding format of the\n          LISP Canonical Address after the length field, as defined\n          in LCAF document.\n       4. Mask-length of address: A field of length 1 octet, whose\n          value is the mask-length to be applied to the LISP\n          address specified in the previous (third) field.\n\n       To illustrate the use of this object, consider the LISP MIB\n       Object below titled lispMapCacheEntry.  This object begins\n       with the following entities:\n\n       lispMapCacheEntry ::= SEQUENCE {\n          lispMapCacheEidLength          INTEGER,\n          lispMapCacheEid                LispAddressType,\n           ... [skip] ...\n\n       Example 1: Suppose that the IPv4 EID-Prefix stored is\n       192.0.2.0/24.  In this case, the values within\n       lispMapCacheEntry would be:\n\n          lispMapCacheEidLength  = 8\n          lispMapCacheEid = 1, 4, 192.0.2.0, 24\n          ... [skip] ...\n\n       where 8 is the total length in octets of the next object\n       (lispMapCacheEID of type LispAddressType).  Then, the value\n       1 indicates the IPv4 AF (per the\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB), the value 4 indicates that\n       the AF is 4 octets in length, 192.0.2.0 is the IPv4 address,\n       and the value 24 is the mask-length in bits.  Note that the\n       lispMapCacheEidLength value of 8 is used to compute the\n       length of the fourth (last) field in lispMapCacheEid to be 1\n       octet -- as computed by 8 - (2 + 1 + 4) = 1.\n\n       Example 2: Suppose that the IPv6 EID-Prefix stored is\n       2001:db8:a::/48.  In this case, the values within\n       lispMapCacheEntry would be:\n\n          lispMapCacheEidLength  = 20\n          lispMapCacheEid = 2, 16, 2001:db8:a::, 48\n          ... [skip] ...\n\n       where 20 is the total length in octets of the next object\n       (lispMapCacheEID of type LispAddressType).  Then, the value\n       2 indicates the IPv6 AF (per the\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB), the value 16 indicates\n       that the AF is 16 octets in length, 2001:db8:a:: is the IPv6\n       address, and the value 48 is the mask-length in bits.  Note\n       that the lispMapCacheEidLength value of 20 is used to\n       compute the length of the fourth (last) field in\n       lispMapCacheEid to be 1 octet -- as computed by\n       20 - (2 + 1 + 16) = 1.\n\n       Example 3: As an example where LCAF is used, suppose\n       that the IPv4 EID-Prefix stored is 192.0.2.0/24 and it\n       is part of LISP Instance ID 101.  In this case, the values\n       within lispMapCacheEntry would be:\n\n          lispMapCacheEidLength  = 14\n          lispMapCacheEid = 16387, 10, 2, 101, 1, 192.0.2.0, 24\n          ... [skip] ...\n\n       where 14 is the total length in octets of the next object\n       (lispMapCacheEID of type LispAddressType).  Then, the value\n       16387 indicates the LCAF AF (see the\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB), the value 10 indicates that\n       the LCAF AF is 10 octets in length in this case, 2 indicates\n       that LCAF Type 2 encoding is used (see the LCAF document), 101\n       gives the Instance ID, 1 gives the AFI (per the\n       IANA-ADDRESS-FAMILY-NUMBERS-MIB) for an IPv4 address, 192.0.2.0\n       is the IPv4 address, and 24 is the mask-length in bits.  Note\n       that the lispMapCacheEidLength value of 14 octets is used to\n       compute the length of the last field in lispMapCacheEid to be 1\n       octet -- as computed by 14 - (2 + 1 + 1 + 3 + 2 + 4) = 1.\n\n       Note: all LISP header formats and locations of specific\n       flags, bits, and fields are as given in the base LISP\n       references of RFC 6830, RFC 6832, and RFC 6833.'
    status = 'current'
    displayHint = '39a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 39)

lispObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 1))
lispConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2))
lispFeaturesTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 1), )
if mibBuilder.loadTexts: lispFeaturesTable.setReference('RFC 6830, Section 4, Section 5.5., Section 6.3.')
if mibBuilder.loadTexts: lispFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesTable.setDescription('This table represents the ON/OFF status of the\n           various LISP features that can be enabled on LISP devices.')
lispFeaturesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 1, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"), (0, "LISP-MIB", "lispFeaturesAddressFamily"))
if mibBuilder.loadTexts: lispFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesEntry.setDescription('An entry (conceptual row) in the lispFeaturesTable.')
lispFeaturesInstanceID = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: lispFeaturesInstanceID.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesInstanceID.setDescription('This represents the Instance ID of the LISP header.\n           An Instance ID in the LISP address encoding helps\n           uniquely identify the AFI-based address space to which\n           a given EID belongs.  Its default value is 0.')
lispFeaturesAddressFamily = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 2), AddressFamilyNumbers())
if mibBuilder.loadTexts: lispFeaturesAddressFamily.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesAddressFamily.setDescription('The IANA Address Family Number of destination address\n           of packets that this LISP device is enabled to process.')
lispFeaturesItrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesItrEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesItrEnabled.setDescription('Indicates the status of ITR role on this device.  If\n           this object is true, then the ITR feature is enabled.')
lispFeaturesEtrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesEtrEnabled.setDescription('Indicates the status of ETR role on this device.  If\n           this object is true, then the ETR feature is enabled.')
lispFeaturesProxyItrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesProxyItrEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesProxyItrEnabled.setDescription('Indicates the status of Proxy-ITR role on this device.\n           If this object is true, then the Proxy-ITR feature is\n           enabled.')
lispFeaturesProxyEtrEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesProxyEtrEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesProxyEtrEnabled.setDescription('Indicates the status of Proxy-ETR role on this device.\n           If this object is true, then the Proxy-ETR feature is\n           enabled.')
lispFeaturesMapServerEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapServerEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesMapServerEnabled.setDescription('Indicates the status of Map Server role on this device.\n           If this object is true, then the Map-Server feature is\n           enabled.')
lispFeaturesMapResolverEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapResolverEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesMapResolverEnabled.setDescription('Indicates the status of Map Resolver role on this device.\n           If this object is true, then Map-Resolver feature is\n           enabled.')
lispFeaturesMapCacheSize = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapCacheSize.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesMapCacheSize.setDescription('Size of EID-to-RLOC map-cache on this device.')
lispFeaturesMapCacheLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesMapCacheLimit.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesMapCacheLimit.setDescription('Maximum permissible entries in EID-to-RLOC map-cache on\n           this device.')
lispFeaturesEtrMapCacheTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrMapCacheTtl.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesEtrMapCacheTtl.setDescription('The stored Record TTL of the EID-to-RLOC map record in\n           the map-cache.')
lispFeaturesRlocProbeEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesRlocProbeEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesRlocProbeEnabled.setDescription('Indicates the status of RLOC-Probing feature on this\n           device.  If this object is true, then this feature is\n           enabled.')
lispFeaturesEtrAcceptMapDataEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataEnabled.setDescription('Indicates the status of accepting piggybacked mapping\n           data received in a map-request on this device.  If this\n           object is true, then this device accepts piggybacked\n           mapping data.')
lispFeaturesEtrAcceptMapDataVerifyEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataVerifyEnabled.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesEtrAcceptMapDataVerifyEnabled.setDescription('Indicates the status of verifying accepted piggybacked\n           mapping data received in a map-request on this device.\n           If this object is true, then this device verifies\n           accepted piggybacked mapping data.')
lispFeaturesRouterTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispFeaturesRouterTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispFeaturesRouterTimeStamp.setDescription('The value of sysUpTime at which the LISP feature was\n           enabled on this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem,\n           then this object contains a zero value.')
lispIidToVrfTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 2), )
if mibBuilder.loadTexts: lispIidToVrfTable.setReference('RFC 6830, Section 5.5., and RFC 4382, Section 7.')
if mibBuilder.loadTexts: lispIidToVrfTable.setStatus('current')
if mibBuilder.loadTexts: lispIidToVrfTable.setDescription('This table represents the mapping of a LISP Instance ID\n           to a VRF.')
lispIidToVrfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 2, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"))
if mibBuilder.loadTexts: lispIidToVrfEntry.setStatus('current')
if mibBuilder.loadTexts: lispIidToVrfEntry.setDescription('An entry (conceptual row) in the lispIidToVrfTable.')
lispIidToVrfName = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 2, 1, 1), MplsL3VpnName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispIidToVrfName.setStatus('current')
if mibBuilder.loadTexts: lispIidToVrfName.setDescription('The identifier for each VPN that is mapped to the\n           given LISP Instance ID.')
lispGlobalStatsTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 3), )
if mibBuilder.loadTexts: lispGlobalStatsTable.setReference('RFC 6830, Section 6.1.')
if mibBuilder.loadTexts: lispGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsTable.setDescription('This table provides global statistics for a given\n           Instance ID per address family on a LISP device.')
lispGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 3, 1), ).setIndexNames((0, "LISP-MIB", "lispFeaturesInstanceID"), (0, "LISP-MIB", "lispFeaturesAddressFamily"))
if mibBuilder.loadTexts: lispGlobalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsEntry.setDescription('An entry (conceptual row) in the\n           lispGlobalStatsTable.')
lispGlobalStatsMapRequestsIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsIn.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsIn.setDescription('Total number of map requests received by this device for\n           any EID-Prefix of the given address family and Instance ID.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispGlobalStatsMapRequestsOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsOut.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRequestsOut.setDescription('Total number of map requests sent by this device for any\n           EID-Prefix of the given address family and Instance ID.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispGlobalStatsMapRepliesIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesIn.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesIn.setDescription('Total number of map replies received by this device for any\n           EID-Prefix of the given address family and Instance ID.\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispGlobalStatsMapRepliesOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesOut.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRepliesOut.setDescription('Total number of map replies sent by this device for any EID\n           prefix of the given address family and Instance ID.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispGlobalStatsMapRegistersIn = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersIn.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersIn.setDescription('Total number of map registers received by this device for\n           any EID-Prefix of the given address family and Instance ID.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispGlobalStatsMapRegistersOut = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersOut.setStatus('current')
if mibBuilder.loadTexts: lispGlobalStatsMapRegistersOut.setDescription('Total number of map registers sent by this device for any\n           EID-Prefix of the given address family and Instance ID.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispFeaturesRouterTimeStamp.')
lispMappingDatabaseTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 4), )
if mibBuilder.loadTexts: lispMappingDatabaseTable.setReference('RFC 6830, Section 6.')
if mibBuilder.loadTexts: lispMappingDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseTable.setDescription('This table represents the EID-to-RLOC mapping database\n            that contains the EID-Prefix to RLOC mappings configured\n            on an ETR.\n           This table represents all such mappings for the given LISP\n           site to which this device belongs.')
lispMappingDatabaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 4, 1), ).setIndexNames((0, "LISP-MIB", "lispMappingDatabaseEidLength"), (0, "LISP-MIB", "lispMappingDatabaseEid"))
if mibBuilder.loadTexts: lispMappingDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEntry.setDescription('An entry (conceptual row) in lispMappingDatabaseTable.')
lispMappingDatabaseEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMappingDatabaseEidLength.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEidLength.setDescription('This object gives the octet-length of\n           lispMappingDatabaseEid.')
lispMappingDatabaseEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMappingDatabaseEid.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEid.setDescription('The EID-Prefix of the mapping database.')
lispMappingDatabaseLsb = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLsb.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLsb.setDescription('The locator status bits for this EID-Prefix.')
lispMappingDatabaseEidPartitioned = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEidPartitioned.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEidPartitioned.setDescription('Indicates if this device is partitioned from the site that\n           contains this EID-Prefix.  If this object is true, then it\n           means this device is partitioned from the site.')
lispMappingDatabaseTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseTimeStamp.setDescription('The value of sysUpTime at which the EID Prefix information\n           represented by this mapping database entry was configured\n           on this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispMappingDatabaseDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseDecapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseDecapOctets.setDescription('The number of octets, after decapsulation, of LISP packets\n           that were decapsulated by this device addressed to a host\n           within this EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispMappingDatabaseTimeStamp.')
lispMappingDatabaseDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseDecapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseDecapPackets.setDescription('The number of LISP packets that were decapsulated by this\n           device addressed to a host within this EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispMappingDatabaseTimeStamp.')
lispMappingDatabaseEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEncapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEncapOctets.setDescription('The number of octets, before encapsulation, of LISP packets\n           that were encapsulated by this device, whose inner header\n           source address matched this EID-Prefix.\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispMappingDatabaseTimeStamp.')
lispMappingDatabaseEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseEncapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseEncapPackets.setDescription('The number of LISP packets that were encapsulated by this\n           device whose inner header source address matched this EID\n           prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of LISP features\n           being removed, which can be detected by observing the value\n           of lispMappingDatabaseTimeStamp.')
lispMappingDatabaseLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 5), )
if mibBuilder.loadTexts: lispMappingDatabaseLocatorTable.setReference('RFC 6830, Section 6.2.')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorTable.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorTable.setDescription('This table represents the set of routing locators per EID\n           prefix contained in the EID-to-RLOC database configured on\n           this ETR.')
lispMappingDatabaseLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 5, 1), ).setIndexNames((0, "LISP-MIB", "lispMappingDatabaseEidLength"), (0, "LISP-MIB", "lispMappingDatabaseEid"), (0, "LISP-MIB", "lispMappingDatabaseLocatorRlocLength"), (0, "LISP-MIB", "lispMappingDatabaseLocatorRloc"))
if mibBuilder.loadTexts: lispMappingDatabaseLocatorEntry.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorEntry.setDescription('An entry (conceptual row) in the\n           lispMappingDatabaseLocatorTable.')
lispMappingDatabaseLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLength.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLength.setDescription('This object is used to get the octet-length of\n           lispMappingDatabaseLocatorRloc.')
lispMappingDatabaseLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRloc.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRloc.setDescription('This object is a locator for the given EID-Prefix in\n           the mapping database.')
lispMappingDatabaseLocatorRlocPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocPriority.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocPriority.setDescription('The unicast priority of the RLOC.')
lispMappingDatabaseLocatorRlocWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocWeight.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocWeight.setDescription('The unicast weight of the RLOC.')
lispMappingDatabaseLocatorRlocMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMPriority.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMPriority.setDescription('The multicast priority of the RLOC.')
lispMappingDatabaseLocatorRlocMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMWeight.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocMWeight.setDescription('The multicast weight of the RLOC.')
lispMappingDatabaseLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocState.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocState.setDescription('The state of this RLOC as per this device.\n           (1 = RLOC is up; 2 = RLOC is down; 3 = RLOC is unreachable).')
lispMappingDatabaseLocatorRlocLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("siteself", 1), ("sitelocal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLocal.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocLocal.setDescription('Indicates whether the RLOC is local to this device\n           (or remote, meaning local to another device in the same LISP\n           site).  (1 = RLOC is an address on this device; 2 = RLOC is\n           an address on another device).')
lispMappingDatabaseLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocTimeStamp.setDescription('The value of sysUpTime at which the RLOC of the EID Prefix\n           represented by this mapping database entry was configured\n           on this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispMappingDatabaseLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapOctets.setDescription('The number of octets of LISP packets that were\n           addressed to this RLOC of the EID-Prefix and\n           were decapsulated.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of database\n           mappings getting reconfigured or RLOC status changes, which\n           can be detected by observing the value of\n           lispMappingDatabaseLocatorRlocTimeStamp.')
lispMappingDatabaseLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocDecapPackets.setDescription('The number of LISP packets that were addressed to this RLOC\n           of the EID-Prefix and were decapsulated.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n\n           Discontinuities can also occur as a result of database\n           mappings getting reconfigured or RLOC status changes, which\n           can be detected by observing the value of\n           lispMappingDatabaseLocatorRlocTimeStamp.')
lispMappingDatabaseLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapOctets.setDescription('The number of octets of LISP packets that were encapsulated\n           by this device using this RLOC address as the source, and\n           that were sourced by an address of this EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of database\n           mappings getting reconfigured or RLOC status changes, which\n           can be detected by observing the value of\n           lispMappingDatabaseLocatorRlocTimeStamp.')
lispMappingDatabaseLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMappingDatabaseLocatorRlocEncapPackets.setDescription('The number of LISP packets that were encapsulated by this\n           device using this RLOC address as the source and that were\n           sourced by an address of this EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of database\n           mappings getting reconfigured or RLOC status changes, which\n           can be detected by observing the value of\n           lispMappingDatabaseLocatorRlocTimeStamp.')
lispMapCacheTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 6), )
if mibBuilder.loadTexts: lispMapCacheTable.setReference('RFC 6830, Sections 6 and Section 12.')
if mibBuilder.loadTexts: lispMapCacheTable.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheTable.setDescription('This table represents the short-lived, on-demand table on\n           an ITR that stores, tracks, and is responsible for\n           timing-out and otherwise validating EID-to-RLOC mappings.')
lispMapCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 6, 1), ).setIndexNames((0, "LISP-MIB", "lispMapCacheEidLength"), (0, "LISP-MIB", "lispMapCacheEid"))
if mibBuilder.loadTexts: lispMapCacheEntry.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEntry.setDescription('An entry (conceptual row) in the\n           lispMapCacheTable.')
lispMapCacheEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMapCacheEidLength.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidLength.setDescription('This object is used to get the octet-length of\n           lispMapCacheEid.')
lispMapCacheEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMapCacheEid.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEid.setDescription('The EID-Prefix in the mapping cache.')
lispMapCacheEidTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidTimeStamp.setDescription('The value of sysUpTime at which the EID Prefix information\n           represented by this entry was learned by this device.\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispMapCacheEidExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidExpiryTime.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidExpiryTime.setDescription('The time remaining before the ITR times-out this\n           EID-Prefix.')
lispMapCacheEidState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidState.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidState.setDescription('This object is used to indicate the activity of this EID\n           prefix.  If this object is true, then it means this EID\n           prefix is seeing activity.')
lispMapCacheEidAuthoritative = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidAuthoritative.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidAuthoritative.setDescription('This object is used to indicate whether the EID-Prefix was\n           installed by an authoritative map-reply.  If this object is\n           true, then it means this EID-Prefix was installed by an\n           authoritative map-reply.')
lispMapCacheEidDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidDecapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidDecapOctets.setDescription('The number of octets of LISP packets that were decapsulated\n           by this device and were sourced from a remote host within\n           this EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of cache being\n           removed and replaced, which can be detected by observing the\n           value of lispMapCacheEidTimeStamp.')
lispMapCacheEidDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidDecapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidDecapPackets.setDescription('The number of LISP packets that were decapsulated by this\n           device and were sourced from a remote host within this\n           EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of cache being\n           removed and replaced, which can be detected by observing the\n           value of lispMapCacheEidTimeStamp.')
lispMapCacheEidEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidEncapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidEncapOctets.setDescription('The number of octets of LISP packets that were encapsulated\n           by this device using the given EID-Prefix in the map-cache.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of cache being\n           removed and replaced, which can be detected by observing the\n           value of lispMapCacheEidTimeStamp.')
lispMapCacheEidEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheEidEncapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheEidEncapPackets.setDescription('The number of LISP packets that were encapsulated by this\n           device using the given EID-Prefix in the map-cache.\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of cache being\n           removed and replaced, which can be detected by observing the\n           value of lispMapCacheEidTimeStamp.')
lispMapCacheLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 7), )
if mibBuilder.loadTexts: lispMapCacheLocatorTable.setReference('RFC 6830, Section 6.3.')
if mibBuilder.loadTexts: lispMapCacheLocatorTable.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorTable.setDescription('This table represents the set of locators per EID-Prefix\n           contained in the map-cache table of an ITR.')
lispMapCacheLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 7, 1), ).setIndexNames((0, "LISP-MIB", "lispMapCacheEidLength"), (0, "LISP-MIB", "lispMapCacheEid"), (0, "LISP-MIB", "lispMapCacheLocatorRlocLength"), (0, "LISP-MIB", "lispMapCacheLocatorRloc"))
if mibBuilder.loadTexts: lispMapCacheLocatorEntry.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorEntry.setDescription('An entry (conceptual row) in the\n           lispMapCacheLocatorTable.')
lispMapCacheLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLength.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLength.setDescription('This object is used to get the octet-length of\n           lispMapCacheLocatorRloc.')
lispMapCacheLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispMapCacheLocatorRloc.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRloc.setDescription('The locator for the EID-Prefix in the mapping cache.')
lispMapCacheLocatorRlocPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocPriority.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocPriority.setDescription('The unicast priority of the RLOC for this EID-Prefix\n           (0-255); lower is more preferred.')
lispMapCacheLocatorRlocWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocWeight.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocWeight.setDescription('The unicast weight of the RLOC for this EID-Prefix\n           (0 - 100) percentage.')
lispMapCacheLocatorRlocMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMPriority.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMPriority.setDescription('The multicast priority of the RLOC for this EID-Prefix\n           (0-255); lower is more preferred.')
lispMapCacheLocatorRlocMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMWeight.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocMWeight.setDescription('The multicast weight of the RLOC for this EID-Prefix\n           (0 - 100) percentage.')
lispMapCacheLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocState.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocState.setDescription('The state of this RLOC as per this device\n           (1 = RLOC is up; 2 = RLOC is down; 3 = RLOC is unreachable).')
lispMapCacheLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocTimeStamp.setDescription('The value of sysUpTime at which the RLOC of EID-Prefix\n           information represented by this entry was learned by\n           this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem,\n           then this object contains a zero value.')
lispMapCacheLocatorRlocLastPriorityChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastPriorityChange.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastPriorityChange.setDescription('Time elapsed since the last change of the unicast priority\n           of the RLOC for this EID-Prefix.  Note that this is\n           independent of lispMapCacheLocatorRlocTimeStamp.')
lispMapCacheLocatorRlocLastWeightChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastWeightChange.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastWeightChange.setDescription('Time elapsed since the last change of the unicast weight\n           of the RLOC for this EID-Prefix.  Note that this is\n           independent of lispMapCacheLocatorRlocTimeStamp.')
lispMapCacheLocatorRlocLastMPriorityChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMPriorityChange.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMPriorityChange.setDescription('Time since the last change of the multicast priority of the\n           RLOC for this EID-Prefix.')
lispMapCacheLocatorRlocLastMWeightChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMWeightChange.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastMWeightChange.setDescription('Time since the last change of the multicast weight of the\n           RLOC for this EID-Prefix.')
lispMapCacheLocatorRlocLastStateChange = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastStateChange.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocLastStateChange.setDescription('Time since the last change of the up/down state of the\n           RLOC for this EID-Prefix.')
lispMapCacheLocatorRlocRtt = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocRtt.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocRtt.setDescription('Round-trip time of RLOC probe and map-reply for this RLOC\n           address for this prefix.')
lispMapCacheLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapOctets.setDescription('The number of octets of LISP packets that were decapsulated\n           by this device and were sourced from a remote host within\n           this EID-Prefix and were encapsulated for this RLOC.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of RLOC of cache\n           being removed and replaced, which can be detected by\n           observing the value of lispMapCacheLocatorRlocTimeStamp.')
lispMapCacheLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocDecapPackets.setDescription('The number of LISP packets that were decapsulated by this\n           device and were sourced from a remote host within this\n           EID-Prefix and were encapsulated for this RLOC.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of RLOC of cache\n           being removed and replaced, which can be detected by\n           observing the value of lispMapCacheLocatorRlocTimeStamp.')
lispMapCacheLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapOctets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapOctets.setDescription('The number of octets of LISP packets that matched this\n           EID-Prefix and were encapsulated using this RLOC address.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of RLOC of cache\n           being removed and replaced, which can be detected by\n           observing the value of lispMapCacheLocatorRlocTimeStamp.')
lispMapCacheLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapPackets.setStatus('current')
if mibBuilder.loadTexts: lispMapCacheLocatorRlocEncapPackets.setDescription('The number of LISP packets that matched this EID-Prefix\n           and were encapsulated using this RLOC address.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of RLOC of cache\n           being removed and replaced, which can be detected by\n           observing the value of lispMapCacheLocatorRlocTimeStamp.')
lispConfiguredLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 8), )
if mibBuilder.loadTexts: lispConfiguredLocatorTable.setReference('RFC 6830, Section 6.3.')
if mibBuilder.loadTexts: lispConfiguredLocatorTable.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorTable.setDescription('This table represents the set of routing locators\n           configured on this device.  Note that the addresses\n           configured by Proxy-ITR are treated as routing locators\n           and therefore can be part of this table.')
lispConfiguredLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 8, 1), ).setIndexNames((0, "LISP-MIB", "lispConfiguredLocatorRlocLength"), (0, "LISP-MIB", "lispConfiguredLocatorRloc"))
if mibBuilder.loadTexts: lispConfiguredLocatorEntry.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorEntry.setDescription('An entry (conceptual row) in the\n           lispConfiguredLocatorTable.')
lispConfiguredLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLength.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLength.setDescription('This object is used to get the octet-length of\n           lispConfiguredLocatorRloc.')
lispConfiguredLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispConfiguredLocatorRloc.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRloc.setDescription('This object is an RLOC address configured on this device.\n           It can be an RLOC that is local to this device or can be an\n           RLOC that belongs to another ETR within the same site.\n           Proxy-ITR address is treated as an RLOC.')
lispConfiguredLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocState.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocState.setDescription('The state of this RLOC as per this device.  (1 = RLOC is up;\n           2 = RLOC is down; 3 = RLOC is unreachable).')
lispConfiguredLocatorRlocLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("siteself", 1), ("sitelocal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLocal.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocLocal.setDescription('Indicates whether the RLOC is local to this device (or\n           remote, meaning local to another device in the same LISP\n           site).  (1 = RLOC is an address on this device; 2 = RLOC is\n           an address on another device).')
lispConfiguredLocatorRlocTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocTimeStamp.setDescription('The value of sysUpTime at which the RLOC was configured on\n           this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispConfiguredLocatorRlocDecapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapOctets.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapOctets.setDescription('The number of octets of LISP packets that were addressed to\n           this RLOC and were decapsulated.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of configured\n           RLOC being removed and replaced, which can be detected by\n           observing the value of lispConfiguredLocatorRlocTimeStamp.')
lispConfiguredLocatorRlocDecapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapPackets.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocDecapPackets.setDescription('The number of LISP packets that were addressed to this RLOC\n           and were decapsulated.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of configured\n           RLOC being removed and replaced, which can be detected by\n           observing the value of lispConfiguredLocatorRlocTimeStamp.')
lispConfiguredLocatorRlocEncapOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapOctets.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapOctets.setDescription('The number of octets of LISP packets that were encapsulated\n           by this device using this RLOC address as the source.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of configured\n           RLOC being removed and replaced, which can be detected by\n           observing the value of lispConfiguredLocatorRlocTimeStamp.')
lispConfiguredLocatorRlocEncapPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapPackets.setStatus('current')
if mibBuilder.loadTexts: lispConfiguredLocatorRlocEncapPackets.setDescription('The number of LISP packets that were encapsulated by this\n           device using this RLOC address as the source.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of configured\n           RLOC being removed and replaced, which can be detected by\n           observing the value of lispConfiguredLocatorRlocTimeStamp.')
lispEidRegistrationTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 9), )
if mibBuilder.loadTexts: lispEidRegistrationTable.setReference('RFC 6833, Section 4.')
if mibBuilder.loadTexts: lispEidRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationTable.setDescription('This table provides the properties of each LISP EID-Prefix\n           that is registered with this device when configured to be\n           a Map-Server.')
lispEidRegistrationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 9, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"))
if mibBuilder.loadTexts: lispEidRegistrationEntry.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEntry.setDescription('An entry (conceptual row) in the lispEidRegistrationTable.')
lispEidRegistrationEidLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationEidLength.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEidLength.setDescription('This object is used to get the octet-length of\n           lispEidRegistrationEid.')
lispEidRegistrationEid = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationEid.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEid.setDescription('The EID-Prefix that is being registered.')
lispEidRegistrationSiteName = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationSiteName.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationSiteName.setDescription('Site name used by a Map-Server to distinguish different\n           LISP sites that are registering with it.')
lispEidRegistrationSiteDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationSiteDescription.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationSiteDescription.setDescription('Description for a site name used by a Map-Server.  The EID\n           prefix that is being registered belongs to this site.')
lispEidRegistrationIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationIsRegistered.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationIsRegistered.setDescription('Indicates the registration status of the given EID-Prefix.\n           If this object is true, then it means the EID-Prefix is\n           registered.\n\n           The value false implies the EID-Prefix is not registered\n           with the Map Server.  There are multiple scenarios when this\n           could happen like authentication failures, routing problems,\n           misconfigs to name a few.')
lispEidRegistrationFirstTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationFirstTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationFirstTimeStamp.setDescription('The value of sysUpTime at which the first valid register\n           message for the EID Prefix information represented by this\n           entry was received by this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispEidRegistrationLastTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLastTimeStamp.setDescription('The value of sysUpTime at which the last valid register\n           message for the EID Prefix information represented by this\n           entry was received by this device.\n           If this information was present at the most recent\n           reinitialization of the local management subsystem, then\n           this object contains a zero value.')
lispEidRegistrationLastRegisterSenderLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSenderLength.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSenderLength.setDescription('This object is used to get the octet-length of\n           lispEidRegistrationLastRegisterSender, the next\n           object.')
lispEidRegistrationLastRegisterSender = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 9), LispAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSender.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLastRegisterSender.setDescription('Source address of the last valid register message for the\n           given EID-Prefix that was received by this device.')
lispEidRegistrationAuthenticationErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationAuthenticationErrors.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationAuthenticationErrors.setDescription('Count of total authentication errors of map-registers\n           received for the given EID-Prefix.\n\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of site config\n           changes, which can be detected by observing the value of\n           lispEidRegistrationFirstTimeStamp.')
lispEidRegistrationRlocsMismatch = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationRlocsMismatch.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationRlocsMismatch.setDescription('Count of total map-registers received that had at least one\n           RLOC that was not in the allowed list of RLOCs for the given\n           EID-Prefix.\n           Discontinuities in this monotonically increasing value occur\n           at reinitialization of the management system.\n           Discontinuities can also occur as a result of site config\n           changes, which can be detected by observing the value of\n           lispEidRegistrationFirstTimeStamp.')
lispEidRegistrationEtrTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 10), )
if mibBuilder.loadTexts: lispEidRegistrationEtrTable.setReference('RFC 6830, Section 6.1.')
if mibBuilder.loadTexts: lispEidRegistrationEtrTable.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrTable.setDescription('This table provides the properties of ETRs that register\n           the given EID-Prefix with this device when configured to\n           be a Map-Server.')
lispEidRegistrationEtrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 10, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"), (0, "LISP-MIB", "lispEidRegistrationEtrSenderLength"), (0, "LISP-MIB", "lispEidRegistrationEtrSender"))
if mibBuilder.loadTexts: lispEidRegistrationEtrEntry.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrEntry.setDescription('An entry (conceptual row) in the\n           lispEidRegistrationEtrTable.')
lispEidRegistrationEtrSenderLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationEtrSenderLength.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrSenderLength.setDescription('This object is used to get the octet-length of\n           lispEidRegistrationEtrSender.')
lispEidRegistrationEtrSender = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationEtrSender.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrSender.setDescription('Source address of the ETR that is sending valid register\n           messages for this EID-Prefix to this device.')
lispEidRegistrationEtrLastTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrLastTimeStamp.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrLastTimeStamp.setDescription('The value of sysUpTime at which the last valid register\n           message from this ETR for the EID Prefix information\n           represented by this entry was received by this device.\n\n           If this information was present at the most recent\n           reinitialization of the local management subsystem,\n           then this object contains a zero value.')
lispEidRegistrationEtrTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrTtl.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrTtl.setDescription('The Record TTL of the registering ETR device for this\n           EID-Prefix.')
lispEidRegistrationEtrProxyReply = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrProxyReply.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrProxyReply.setDescription('Indicates proxy-replying status of the registering ETR for\n           this EID-Prefix.  If this object is true, then it means the\n           Map-Server can proxy-reply.')
lispEidRegistrationEtrWantsMapNotify = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 10, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationEtrWantsMapNotify.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationEtrWantsMapNotify.setDescription('Indicates whether the EID-Prefix wants Map-Notifications.\n           If this object is true, then it means the EID-Prefix wants\n           Map-Notifications.')
lispEidRegistrationLocatorTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 11), )
if mibBuilder.loadTexts: lispEidRegistrationLocatorTable.setReference('RFC 6830, Section 6.1.')
if mibBuilder.loadTexts: lispEidRegistrationLocatorTable.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorTable.setDescription('This table provides the properties of all locators per\n           LISP site that are served by this device when configured\n           to be a Map-Server.')
lispEidRegistrationLocatorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 11, 1), ).setIndexNames((0, "LISP-MIB", "lispEidRegistrationEidLength"), (0, "LISP-MIB", "lispEidRegistrationEid"), (0, "LISP-MIB", "lispEidRegistrationEtrSenderLength"), (0, "LISP-MIB", "lispEidRegistrationEtrSender"), (0, "LISP-MIB", "lispEidRegistrationLocatorRlocLength"), (0, "LISP-MIB", "lispEidRegistrationLocatorRloc"))
if mibBuilder.loadTexts: lispEidRegistrationLocatorEntry.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorEntry.setDescription('An entry (conceptual row) in the\n           lispEidRegistrationLocatorTable.')
lispEidRegistrationLocatorRlocLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocLength.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocLength.setDescription('This object is used to get the octet-length of\n           lispEidRegistrationLocatorRloc.')
lispEidRegistrationLocatorRloc = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispEidRegistrationLocatorRloc.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorRloc.setDescription('The locator of the given EID-Prefix being registered by the\n           given ETR with this device.')
lispEidRegistrationLocatorRlocState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocState.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorRlocState.setDescription('The cached state of this RLOC received in map-register from\n           the ETR by the device, in the capacity of a Map-Server.\n           Value 1 refers to up, value 2 refers to down.')
lispEidRegistrationLocatorIsLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorIsLocal.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorIsLocal.setDescription('Indicates if the given locator is local to the registering\n           ETR.  If this object is true,  it means the locator is\n           local.')
lispEidRegistrationLocatorPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorPriority.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorPriority.setDescription('The unicast priority of the RLOC for this EID-Prefix in the\n           register message sent by the given ETR.')
lispEidRegistrationLocatorWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorWeight.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorWeight.setDescription('The unicast weight of the RLOC for this EID-Prefix in the\n           register message sent by the given ETR.')
lispEidRegistrationLocatorMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorMPriority.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorMPriority.setDescription('The multicast priority of the RLOC for this EID-Prefix in\n           the register message sent by the given ETR.')
lispEidRegistrationLocatorMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispEidRegistrationLocatorMWeight.setStatus('current')
if mibBuilder.loadTexts: lispEidRegistrationLocatorMWeight.setDescription('The multicast weight of the RLOC for this EID-Prefix in the\n           register message sent by the given ETR.')
lispUseMapServerTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 12), )
if mibBuilder.loadTexts: lispUseMapServerTable.setReference('RFC 6833, Section 4.3.')
if mibBuilder.loadTexts: lispUseMapServerTable.setStatus('current')
if mibBuilder.loadTexts: lispUseMapServerTable.setDescription('This table provides the properties of the Map-Server(s)\n           with which this device is configured to register.')
lispUseMapServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 12, 1), ).setIndexNames((0, "LISP-MIB", "lispUseMapServerAddressLength"), (0, "LISP-MIB", "lispUseMapServerAddress"))
if mibBuilder.loadTexts: lispUseMapServerEntry.setStatus('current')
if mibBuilder.loadTexts: lispUseMapServerEntry.setDescription('An entry (conceptual row) in the lispUseMapServerTable.')
lispUseMapServerAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseMapServerAddressLength.setStatus('current')
if mibBuilder.loadTexts: lispUseMapServerAddressLength.setDescription('This object is used to get the octet-length of\n           lispUseMapServerAddress.')
lispUseMapServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseMapServerAddress.setStatus('current')
if mibBuilder.loadTexts: lispUseMapServerAddress.setDescription('Address of a Map-Server configured on this device.')
lispUseMapServerState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unreachable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseMapServerState.setStatus('current')
if mibBuilder.loadTexts: lispUseMapServerState.setDescription('State of this Map-Server configured on this device\n           (1 = Map-Server is up; 2 = Map-Server is down).')
lispUseMapResolverTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 13), )
if mibBuilder.loadTexts: lispUseMapResolverTable.setReference('RFC 6833, Section 4.4.')
if mibBuilder.loadTexts: lispUseMapResolverTable.setStatus('current')
if mibBuilder.loadTexts: lispUseMapResolverTable.setDescription('This table provides the properties of the Map-Resolver(s)\n           this device is configured to use.')
lispUseMapResolverEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 13, 1), ).setIndexNames((0, "LISP-MIB", "lispUseMapResolverAddressLength"), (0, "LISP-MIB", "lispUseMapResolverAddress"))
if mibBuilder.loadTexts: lispUseMapResolverEntry.setStatus('current')
if mibBuilder.loadTexts: lispUseMapResolverEntry.setDescription('An entry (conceptual row) in the\n           lispUseMapResolverTable.')
lispUseMapResolverAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseMapResolverAddressLength.setStatus('current')
if mibBuilder.loadTexts: lispUseMapResolverAddressLength.setDescription('This object is used to get the octet-length of\n           lispUseMapResolverAddress.')
lispUseMapResolverAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseMapResolverAddress.setStatus('current')
if mibBuilder.loadTexts: lispUseMapResolverAddress.setDescription('Address of Map-Resolver configured on this device.')
lispUseMapResolverState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseMapResolverState.setStatus('current')
if mibBuilder.loadTexts: lispUseMapResolverState.setDescription('State of this Map-Resolver configured on this device\n           (1 = Map-Resolver is up; 2 = Map-Resolver is down).')
lispUseProxyEtrTable = MibTable((1, 3, 6, 1, 2, 1, 220, 1, 14), )
if mibBuilder.loadTexts: lispUseProxyEtrTable.setReference('RFC 6830, Section 6.')
if mibBuilder.loadTexts: lispUseProxyEtrTable.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrTable.setDescription('This table provides the properties of all Proxy ETRs that\n           this device is configured to use.')
lispUseProxyEtrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 220, 1, 14, 1), ).setIndexNames((0, "LISP-MIB", "lispUseProxyEtrAddressLength"), (0, "LISP-MIB", "lispUseProxyEtrAddress"))
if mibBuilder.loadTexts: lispUseProxyEtrEntry.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrEntry.setDescription('An entry (conceptual row) in the\n           lispUseProxyEtrTable.')
lispUseProxyEtrAddressLength = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 39)))
if mibBuilder.loadTexts: lispUseProxyEtrAddressLength.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrAddressLength.setDescription('This object is used to get the octet-length of\n           lispUseProxyEtrAddress.')
lispUseProxyEtrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 2), LispAddressType())
if mibBuilder.loadTexts: lispUseProxyEtrAddress.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrAddress.setDescription('Address of Proxy ETR configured on this device.')
lispUseProxyEtrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrPriority.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrPriority.setDescription('The unicast priority of the PETR locator.')
lispUseProxyEtrWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrWeight.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrWeight.setDescription('The unicast weight of the PETR locator.')
lispUseProxyEtrMPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrMPriority.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrMPriority.setDescription('The multicast priority of the PETR locator.')
lispUseProxyEtrMWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrMWeight.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrMWeight.setDescription('The multicast weight of the PETR locator.')
lispUseProxyEtrState = MibTableColumn((1, 3, 6, 1, 2, 1, 220, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lispUseProxyEtrState.setStatus('current')
if mibBuilder.loadTexts: lispUseProxyEtrState.setDescription('State of this Proxy ETR configured on this device\n           (0 = Proxy ETR is down; 1 = Proxy ETR is up).')
lispCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2, 1))
lispGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 220, 2, 2))
lispMIBComplianceEtr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 1)).setObjects(("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceEtr = lispMIBComplianceEtr.setStatus('current')
if mibBuilder.loadTexts: lispMIBComplianceEtr.setDescription('The compliance statement for LISP ETRs.  It conveys\n               whether the device supports the ETR feature, and,\n               if so, the relevant state associated with that feature.')
lispMIBComplianceItr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 2)).setObjects(("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceItr = lispMIBComplianceItr.setStatus('current')
if mibBuilder.loadTexts: lispMIBComplianceItr.setDescription('The compliance statement for LISP ITRs.  It conveys\n               whether the device supports the ITR feature, and,\n               if so, the relevant state associated with that feature.')
lispMIBCompliancePetr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 3)).setObjects(("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBCompliancePetr = lispMIBCompliancePetr.setStatus('current')
if mibBuilder.loadTexts: lispMIBCompliancePetr.setDescription('The compliance statement for LISP Proxy-ETRs.  It\n               conveys whether the device supports the Proxy-ETR\n               feature, and, if so, the relevant state associated\n               with that feature.')
lispMIBCompliancePitr = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 4)).setObjects(("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBCompliancePitr = lispMIBCompliancePitr.setStatus('current')
if mibBuilder.loadTexts: lispMIBCompliancePitr.setDescription('The compliance statement for LISP Proxy-ITRs.  It\n               conveys whether the device supports the Proxy-ITR\n               feature, and, if so, the relevant state associated\n               with that feature.')
lispMIBComplianceMapServer = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 5)).setObjects(("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceMapServer = lispMIBComplianceMapServer.setStatus('current')
if mibBuilder.loadTexts: lispMIBComplianceMapServer.setDescription('The compliance statement for LISP Map Servers.  It\n               conveys whether the device supports the Map Server\n               feature, and, if so, the relevant state associated\n               with that feature.')
lispMIBComplianceMapResolver = ModuleCompliance((1, 3, 6, 1, 2, 1, 220, 2, 1, 6)).setObjects(("LISP-MIB", "lispMIBMapResolverGroup"), ("LISP-MIB", "lispMIBEtrGroup"), ("LISP-MIB", "lispMIBItrGroup"), ("LISP-MIB", "lispMIBPetrGroup"), ("LISP-MIB", "lispMIBPitrGroup"), ("LISP-MIB", "lispMIBMapServerGroup"), ("LISP-MIB", "lispMIBEtrExtendedGroup"), ("LISP-MIB", "lispMIBItrExtendedGroup"), ("LISP-MIB", "lispMIBMapServerExtendedGroup"), ("LISP-MIB", "lispMIBTuningParametersGroup"), ("LISP-MIB", "lispMIBEncapStatisticsGroup"), ("LISP-MIB", "lispMIBDecapStatisticsGroup"), ("LISP-MIB", "lispMIBDiagnosticsGroup"), ("LISP-MIB", "lispMIBVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBComplianceMapResolver = lispMIBComplianceMapResolver.setStatus('current')
if mibBuilder.loadTexts: lispMIBComplianceMapResolver.setDescription('The compliance statement for LISP Map Resolvers.  It\n               conveys whether the device supports the Map Resolver\n               feature, and, if so, the relevant state associated\n               with that feature.')
lispMIBEtrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 1)).setObjects(("LISP-MIB", "lispFeaturesEtrEnabled"), ("LISP-MIB", "lispMappingDatabaseLsb"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocPriority"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocWeight"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocMPriority"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocMWeight"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocState"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocLocal"), ("LISP-MIB", "lispConfiguredLocatorRlocState"), ("LISP-MIB", "lispConfiguredLocatorRlocLocal"), ("LISP-MIB", "lispUseMapServerState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEtrGroup = lispMIBEtrGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBEtrGroup.setDescription('A collection of objects to support reporting of basic\n                LISP ETR parameters.')
lispMIBItrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 2)).setObjects(("LISP-MIB", "lispFeaturesItrEnabled"), ("LISP-MIB", "lispFeaturesMapCacheSize"), ("LISP-MIB", "lispMappingDatabaseLsb"), ("LISP-MIB", "lispMapCacheLocatorRlocPriority"), ("LISP-MIB", "lispMapCacheLocatorRlocWeight"), ("LISP-MIB", "lispMapCacheLocatorRlocMPriority"), ("LISP-MIB", "lispMapCacheLocatorRlocMWeight"), ("LISP-MIB", "lispMapCacheLocatorRlocState"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidExpiryTime"), ("LISP-MIB", "lispUseMapResolverState"), ("LISP-MIB", "lispUseProxyEtrPriority"), ("LISP-MIB", "lispUseProxyEtrWeight"), ("LISP-MIB", "lispUseProxyEtrMPriority"), ("LISP-MIB", "lispUseProxyEtrMWeight"), ("LISP-MIB", "lispUseProxyEtrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBItrGroup = lispMIBItrGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBItrGroup.setDescription('A collection of objects to support reporting of basic\n                LISP ITR parameters.')
lispMIBPetrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 3)).setObjects(("LISP-MIB", "lispFeaturesProxyEtrEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBPetrGroup = lispMIBPetrGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBPetrGroup.setDescription('A collection of objects to support reporting of basic\n                LISP Proxy-ETR parameters.')
lispMIBPitrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 4)).setObjects(("LISP-MIB", "lispFeaturesProxyItrEnabled"), ("LISP-MIB", "lispConfiguredLocatorRlocState"), ("LISP-MIB", "lispConfiguredLocatorRlocLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBPitrGroup = lispMIBPitrGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBPitrGroup.setDescription('A collection of objects to support reporting of basic\n                LISP Proxy-ITR parameters.')
lispMIBMapServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 5)).setObjects(("LISP-MIB", "lispFeaturesMapServerEnabled"), ("LISP-MIB", "lispEidRegistrationIsRegistered"), ("LISP-MIB", "lispEidRegistrationLocatorRlocState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapServerGroup = lispMIBMapServerGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBMapServerGroup.setDescription('A collection of objects to support reporting of basic\n                LISP Map Server parameters.')
lispMIBMapResolverGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 6)).setObjects(("LISP-MIB", "lispFeaturesMapResolverEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapResolverGroup = lispMIBMapResolverGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBMapResolverGroup.setDescription('A collection of objects to support reporting of basic\n                LISP Map Resolver parameters.')
lispMIBEtrExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 7)).setObjects(("LISP-MIB", "lispFeaturesRlocProbeEnabled"), ("LISP-MIB", "lispFeaturesEtrAcceptMapDataEnabled"), ("LISP-MIB", "lispFeaturesEtrAcceptMapDataVerifyEnabled"), ("LISP-MIB", "lispMappingDatabaseEidPartitioned"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEtrExtendedGroup = lispMIBEtrExtendedGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBEtrExtendedGroup.setDescription('A collection of objects to support reporting of\n                LISP features and properties on ETRs.')
lispMIBItrExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 8)).setObjects(("LISP-MIB", "lispFeaturesRlocProbeEnabled"), ("LISP-MIB", "lispMapCacheEidState"), ("LISP-MIB", "lispMapCacheEidAuthoritative"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocLastPriorityChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastWeightChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastMPriorityChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastMWeightChange"), ("LISP-MIB", "lispMapCacheLocatorRlocLastStateChange"), ("LISP-MIB", "lispMapCacheLocatorRlocRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBItrExtendedGroup = lispMIBItrExtendedGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBItrExtendedGroup.setDescription('A collection of objects to support reporting of\n                LISP features and properties on ITRs.')
lispMIBMapServerExtendedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 9)).setObjects(("LISP-MIB", "lispEidRegistrationSiteName"), ("LISP-MIB", "lispEidRegistrationSiteDescription"), ("LISP-MIB", "lispEidRegistrationIsRegistered"), ("LISP-MIB", "lispEidRegistrationFirstTimeStamp"), ("LISP-MIB", "lispEidRegistrationLastTimeStamp"), ("LISP-MIB", "lispEidRegistrationLastRegisterSenderLength"), ("LISP-MIB", "lispEidRegistrationLastRegisterSender"), ("LISP-MIB", "lispEidRegistrationEtrLastTimeStamp"), ("LISP-MIB", "lispEidRegistrationEtrTtl"), ("LISP-MIB", "lispEidRegistrationEtrProxyReply"), ("LISP-MIB", "lispEidRegistrationEtrWantsMapNotify"), ("LISP-MIB", "lispEidRegistrationLocatorIsLocal"), ("LISP-MIB", "lispEidRegistrationLocatorPriority"), ("LISP-MIB", "lispEidRegistrationLocatorWeight"), ("LISP-MIB", "lispEidRegistrationLocatorMPriority"), ("LISP-MIB", "lispEidRegistrationLocatorMWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBMapServerExtendedGroup = lispMIBMapServerExtendedGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBMapServerExtendedGroup.setDescription('A collection of objects to support the reporting of\n                LISP features and properties on Map Servers\n                related to EID registrations.')
lispMIBTuningParametersGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 10)).setObjects(("LISP-MIB", "lispFeaturesMapCacheLimit"), ("LISP-MIB", "lispFeaturesEtrMapCacheTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBTuningParametersGroup = lispMIBTuningParametersGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBTuningParametersGroup.setDescription('A collection of objects used to support the reporting of\n                parameters used to control LISP behavior and to tune\n                performance.')
lispMIBEncapStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 11)).setObjects(("LISP-MIB", "lispMappingDatabaseTimeStamp"), ("LISP-MIB", "lispMappingDatabaseEncapOctets"), ("LISP-MIB", "lispMappingDatabaseEncapPackets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocTimeStamp"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocEncapOctets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocEncapPackets"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidEncapOctets"), ("LISP-MIB", "lispMapCacheEidEncapPackets"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocEncapOctets"), ("LISP-MIB", "lispMapCacheLocatorRlocEncapPackets"), ("LISP-MIB", "lispConfiguredLocatorRlocTimeStamp"), ("LISP-MIB", "lispConfiguredLocatorRlocEncapOctets"), ("LISP-MIB", "lispConfiguredLocatorRlocEncapPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBEncapStatisticsGroup = lispMIBEncapStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBEncapStatisticsGroup.setDescription('A collection of objects used to support the reporting of\n                LISP encapsulation statistics for the device.')
lispMIBDecapStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 12)).setObjects(("LISP-MIB", "lispMappingDatabaseTimeStamp"), ("LISP-MIB", "lispMappingDatabaseDecapOctets"), ("LISP-MIB", "lispMappingDatabaseDecapPackets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocTimeStamp"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocDecapOctets"), ("LISP-MIB", "lispMappingDatabaseLocatorRlocDecapPackets"), ("LISP-MIB", "lispMapCacheEidTimeStamp"), ("LISP-MIB", "lispMapCacheEidDecapOctets"), ("LISP-MIB", "lispMapCacheEidDecapPackets"), ("LISP-MIB", "lispMapCacheLocatorRlocTimeStamp"), ("LISP-MIB", "lispMapCacheLocatorRlocDecapOctets"), ("LISP-MIB", "lispMapCacheLocatorRlocDecapPackets"), ("LISP-MIB", "lispConfiguredLocatorRlocTimeStamp"), ("LISP-MIB", "lispConfiguredLocatorRlocDecapOctets"), ("LISP-MIB", "lispConfiguredLocatorRlocDecapPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBDecapStatisticsGroup = lispMIBDecapStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBDecapStatisticsGroup.setDescription('A collection of objects used to support the reporting of\n                LISP decapsulation statistics for the device.')
lispMIBDiagnosticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 13)).setObjects(("LISP-MIB", "lispFeaturesRouterTimeStamp"), ("LISP-MIB", "lispGlobalStatsMapRequestsIn"), ("LISP-MIB", "lispGlobalStatsMapRequestsOut"), ("LISP-MIB", "lispGlobalStatsMapRepliesIn"), ("LISP-MIB", "lispGlobalStatsMapRepliesOut"), ("LISP-MIB", "lispGlobalStatsMapRegistersIn"), ("LISP-MIB", "lispGlobalStatsMapRegistersOut"), ("LISP-MIB", "lispEidRegistrationAuthenticationErrors"), ("LISP-MIB", "lispEidRegistrationRlocsMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBDiagnosticsGroup = lispMIBDiagnosticsGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBDiagnosticsGroup.setDescription('A collection of objects used to support the reporting of\n                additional diagnostics related to the LISP control-plane\n                state of a LISP device.')
lispMIBVrfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 220, 2, 2, 14)).setObjects(("LISP-MIB", "lispIidToVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lispMIBVrfGroup = lispMIBVrfGroup.setStatus('current')
if mibBuilder.loadTexts: lispMIBVrfGroup.setDescription('A collection of objects used to support reporting of\n                VRF-related information on a LISP device.')
mibBuilder.exportSymbols("LISP-MIB", lispEidRegistrationLastTimeStamp=lispEidRegistrationLastTimeStamp, lispMIBMapResolverGroup=lispMIBMapResolverGroup, lispFeaturesRlocProbeEnabled=lispFeaturesRlocProbeEnabled, lispMappingDatabaseTimeStamp=lispMappingDatabaseTimeStamp, lispEidRegistrationLocatorIsLocal=lispEidRegistrationLocatorIsLocal, LispAddressType=LispAddressType, lispMapCacheEidDecapOctets=lispMapCacheEidDecapOctets, lispConfiguredLocatorRlocDecapOctets=lispConfiguredLocatorRlocDecapOctets, lispFeaturesMapCacheSize=lispFeaturesMapCacheSize, lispMapCacheLocatorRlocMPriority=lispMapCacheLocatorRlocMPriority, lispEidRegistrationEtrProxyReply=lispEidRegistrationEtrProxyReply, lispFeaturesProxyItrEnabled=lispFeaturesProxyItrEnabled, lispMapCacheLocatorRlocLastMPriorityChange=lispMapCacheLocatorRlocLastMPriorityChange, lispEidRegistrationLocatorRlocState=lispEidRegistrationLocatorRlocState, lispGlobalStatsMapRequestsOut=lispGlobalStatsMapRequestsOut, lispFeaturesItrEnabled=lispFeaturesItrEnabled, lispUseProxyEtrMPriority=lispUseProxyEtrMPriority, lispFeaturesTable=lispFeaturesTable, lispMapCacheEntry=lispMapCacheEntry, lispMapCacheLocatorRlocEncapPackets=lispMapCacheLocatorRlocEncapPackets, lispConfiguredLocatorEntry=lispConfiguredLocatorEntry, lispMapCacheEidExpiryTime=lispMapCacheEidExpiryTime, lispMIBComplianceEtr=lispMIBComplianceEtr, lispConfiguredLocatorRlocTimeStamp=lispConfiguredLocatorRlocTimeStamp, lispMIBComplianceItr=lispMIBComplianceItr, lispMappingDatabaseLocatorRloc=lispMappingDatabaseLocatorRloc, lispMIBVrfGroup=lispMIBVrfGroup, lispMappingDatabaseLocatorRlocTimeStamp=lispMappingDatabaseLocatorRlocTimeStamp, lispFeaturesRouterTimeStamp=lispFeaturesRouterTimeStamp, lispMapCacheLocatorRlocWeight=lispMapCacheLocatorRlocWeight, lispUseProxyEtrEntry=lispUseProxyEtrEntry, lispFeaturesEntry=lispFeaturesEntry, lispMapCacheEidState=lispMapCacheEidState, lispEidRegistrationLocatorEntry=lispEidRegistrationLocatorEntry, lispEidRegistrationSiteDescription=lispEidRegistrationSiteDescription, lispMIBPetrGroup=lispMIBPetrGroup, lispUseProxyEtrPriority=lispUseProxyEtrPriority, lispMapCacheLocatorRlocEncapOctets=lispMapCacheLocatorRlocEncapOctets, lispMappingDatabaseLocatorRlocEncapOctets=lispMappingDatabaseLocatorRlocEncapOctets, lispConfiguredLocatorRloc=lispConfiguredLocatorRloc, lispMapCacheLocatorRlocDecapPackets=lispMapCacheLocatorRlocDecapPackets, lispEidRegistrationEidLength=lispEidRegistrationEidLength, lispEidRegistrationEtrTtl=lispEidRegistrationEtrTtl, lispMapCacheLocatorRlocMWeight=lispMapCacheLocatorRlocMWeight, lispMapCacheEidDecapPackets=lispMapCacheEidDecapPackets, lispMIBEtrExtendedGroup=lispMIBEtrExtendedGroup, lispMapCacheLocatorRlocTimeStamp=lispMapCacheLocatorRlocTimeStamp, lispMapCacheLocatorRlocRtt=lispMapCacheLocatorRlocRtt, lispFeaturesAddressFamily=lispFeaturesAddressFamily, lispEidRegistrationLocatorTable=lispEidRegistrationLocatorTable, lispMapCacheEidLength=lispMapCacheEidLength, lispMIBDiagnosticsGroup=lispMIBDiagnosticsGroup, lispMappingDatabaseEid=lispMappingDatabaseEid, lispConfiguredLocatorTable=lispConfiguredLocatorTable, lispUseProxyEtrState=lispUseProxyEtrState, lispMappingDatabaseLocatorRlocWeight=lispMappingDatabaseLocatorRlocWeight, lispEidRegistrationSiteName=lispEidRegistrationSiteName, lispEidRegistrationEntry=lispEidRegistrationEntry, lispMapCacheTable=lispMapCacheTable, lispEidRegistrationEtrWantsMapNotify=lispEidRegistrationEtrWantsMapNotify, lispUseMapResolverEntry=lispUseMapResolverEntry, lispMIBEtrGroup=lispMIBEtrGroup, lispGlobalStatsMapRegistersIn=lispGlobalStatsMapRegistersIn, lispFeaturesEtrAcceptMapDataEnabled=lispFeaturesEtrAcceptMapDataEnabled, lispConfiguredLocatorRlocLocal=lispConfiguredLocatorRlocLocal, lispFeaturesEtrAcceptMapDataVerifyEnabled=lispFeaturesEtrAcceptMapDataVerifyEnabled, lispFeaturesMapServerEnabled=lispFeaturesMapServerEnabled, lispMapCacheEidTimeStamp=lispMapCacheEidTimeStamp, lispFeaturesMapCacheLimit=lispFeaturesMapCacheLimit, lispUseProxyEtrAddressLength=lispUseProxyEtrAddressLength, lispEidRegistrationLocatorRloc=lispEidRegistrationLocatorRloc, lispEidRegistrationIsRegistered=lispEidRegistrationIsRegistered, lispMapCacheEid=lispMapCacheEid, lispEidRegistrationRlocsMismatch=lispEidRegistrationRlocsMismatch, lispUseProxyEtrTable=lispUseProxyEtrTable, lispIidToVrfTable=lispIidToVrfTable, lispMapCacheLocatorRloc=lispMapCacheLocatorRloc, lispMapCacheLocatorRlocState=lispMapCacheLocatorRlocState, lispMIBComplianceMapResolver=lispMIBComplianceMapResolver, lispUseProxyEtrMWeight=lispUseProxyEtrMWeight, lispUseMapServerAddress=lispUseMapServerAddress, lispMappingDatabaseLocatorRlocDecapPackets=lispMappingDatabaseLocatorRlocDecapPackets, lispMappingDatabaseLocatorRlocLength=lispMappingDatabaseLocatorRlocLength, lispMappingDatabaseLsb=lispMappingDatabaseLsb, lispGlobalStatsEntry=lispGlobalStatsEntry, lispGlobalStatsMapRepliesIn=lispGlobalStatsMapRepliesIn, lispMappingDatabaseEncapPackets=lispMappingDatabaseEncapPackets, lispMapCacheEidEncapPackets=lispMapCacheEidEncapPackets, lispConfiguredLocatorRlocState=lispConfiguredLocatorRlocState, lispUseMapServerTable=lispUseMapServerTable, lispGlobalStatsMapRequestsIn=lispGlobalStatsMapRequestsIn, lispFeaturesEtrEnabled=lispFeaturesEtrEnabled, lispMappingDatabaseDecapPackets=lispMappingDatabaseDecapPackets, lispEidRegistrationEid=lispEidRegistrationEid, lispMIBDecapStatisticsGroup=lispMIBDecapStatisticsGroup, lispEidRegistrationLastRegisterSender=lispEidRegistrationLastRegisterSender, lispEidRegistrationEtrLastTimeStamp=lispEidRegistrationEtrLastTimeStamp, lispUseMapResolverAddress=lispUseMapResolverAddress, lispIidToVrfName=lispIidToVrfName, lispEidRegistrationLocatorWeight=lispEidRegistrationLocatorWeight, lispEidRegistrationTable=lispEidRegistrationTable, lispMappingDatabaseLocatorRlocPriority=lispMappingDatabaseLocatorRlocPriority, PYSNMP_MODULE_ID=lispMIB, lispMappingDatabaseTable=lispMappingDatabaseTable, lispConfiguredLocatorRlocLength=lispConfiguredLocatorRlocLength, lispMIBCompliancePetr=lispMIBCompliancePetr, lispEidRegistrationEtrSenderLength=lispEidRegistrationEtrSenderLength, lispMapCacheLocatorRlocPriority=lispMapCacheLocatorRlocPriority, lispUseProxyEtrAddress=lispUseProxyEtrAddress, lispMIBMapServerGroup=lispMIBMapServerGroup, lispUseMapResolverTable=lispUseMapResolverTable, lispMappingDatabaseEidPartitioned=lispMappingDatabaseEidPartitioned, lispMapCacheLocatorRlocDecapOctets=lispMapCacheLocatorRlocDecapOctets, lispUseMapResolverState=lispUseMapResolverState, lispMappingDatabaseLocatorRlocMWeight=lispMappingDatabaseLocatorRlocMWeight, lispGlobalStatsMapRegistersOut=lispGlobalStatsMapRegistersOut, lispMapCacheLocatorRlocLength=lispMapCacheLocatorRlocLength, lispMappingDatabaseLocatorRlocDecapOctets=lispMappingDatabaseLocatorRlocDecapOctets, lispMappingDatabaseEncapOctets=lispMappingDatabaseEncapOctets, lispEidRegistrationEtrEntry=lispEidRegistrationEtrEntry, lispGroups=lispGroups, lispMIBItrGroup=lispMIBItrGroup, lispMapCacheLocatorEntry=lispMapCacheLocatorEntry, lispConformance=lispConformance, lispMIB=lispMIB, lispEidRegistrationLocatorPriority=lispEidRegistrationLocatorPriority, lispMappingDatabaseLocatorRlocLocal=lispMappingDatabaseLocatorRlocLocal, lispMappingDatabaseLocatorTable=lispMappingDatabaseLocatorTable, lispGlobalStatsTable=lispGlobalStatsTable, lispMapCacheLocatorRlocLastPriorityChange=lispMapCacheLocatorRlocLastPriorityChange, lispMapCacheLocatorRlocLastStateChange=lispMapCacheLocatorRlocLastStateChange, lispEidRegistrationEtrTable=lispEidRegistrationEtrTable, lispMappingDatabaseLocatorRlocMPriority=lispMappingDatabaseLocatorRlocMPriority, lispCompliances=lispCompliances, lispMIBItrExtendedGroup=lispMIBItrExtendedGroup, lispFeaturesMapResolverEnabled=lispFeaturesMapResolverEnabled, lispMappingDatabaseEntry=lispMappingDatabaseEntry, lispMapCacheLocatorRlocLastWeightChange=lispMapCacheLocatorRlocLastWeightChange, lispUseMapServerAddressLength=lispUseMapServerAddressLength, lispConfiguredLocatorRlocEncapOctets=lispConfiguredLocatorRlocEncapOctets, lispEidRegistrationEtrSender=lispEidRegistrationEtrSender, lispMapCacheLocatorRlocLastMWeightChange=lispMapCacheLocatorRlocLastMWeightChange, lispMapCacheLocatorTable=lispMapCacheLocatorTable, lispUseProxyEtrWeight=lispUseProxyEtrWeight, lispFeaturesInstanceID=lispFeaturesInstanceID, lispMIBComplianceMapServer=lispMIBComplianceMapServer, lispMappingDatabaseLocatorRlocEncapPackets=lispMappingDatabaseLocatorRlocEncapPackets, lispMappingDatabaseLocatorEntry=lispMappingDatabaseLocatorEntry, lispMapCacheEidEncapOctets=lispMapCacheEidEncapOctets, lispEidRegistrationLocatorRlocLength=lispEidRegistrationLocatorRlocLength, lispEidRegistrationAuthenticationErrors=lispEidRegistrationAuthenticationErrors, lispEidRegistrationLastRegisterSenderLength=lispEidRegistrationLastRegisterSenderLength, lispUseMapServerEntry=lispUseMapServerEntry, lispGlobalStatsMapRepliesOut=lispGlobalStatsMapRepliesOut, lispMIBTuningParametersGroup=lispMIBTuningParametersGroup, lispEidRegistrationLocatorMWeight=lispEidRegistrationLocatorMWeight, lispMIBMapServerExtendedGroup=lispMIBMapServerExtendedGroup, lispConfiguredLocatorRlocDecapPackets=lispConfiguredLocatorRlocDecapPackets, lispIidToVrfEntry=lispIidToVrfEntry, lispUseMapServerState=lispUseMapServerState, lispMIBPitrGroup=lispMIBPitrGroup, lispMIBCompliancePitr=lispMIBCompliancePitr, lispEidRegistrationFirstTimeStamp=lispEidRegistrationFirstTimeStamp, lispObjects=lispObjects, lispFeaturesEtrMapCacheTtl=lispFeaturesEtrMapCacheTtl, lispUseMapResolverAddressLength=lispUseMapResolverAddressLength, lispMapCacheEidAuthoritative=lispMapCacheEidAuthoritative, lispMappingDatabaseLocatorRlocState=lispMappingDatabaseLocatorRlocState, lispMIBEncapStatisticsGroup=lispMIBEncapStatisticsGroup, lispConfiguredLocatorRlocEncapPackets=lispConfiguredLocatorRlocEncapPackets, lispMappingDatabaseEidLength=lispMappingDatabaseEidLength, lispEidRegistrationLocatorMPriority=lispEidRegistrationLocatorMPriority, lispFeaturesProxyEtrEnabled=lispFeaturesProxyEtrEnabled, lispMappingDatabaseDecapOctets=lispMappingDatabaseDecapOctets)
