#
# PySNMP MIB module ALCATEL-IND1-DCBX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-DCBX-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:29 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Dcbx, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Dcbx")
VfcEnableState, = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "VfcEnableState")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
IEEE8021PriorityValue, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PriorityValue")
LldpXdot1dcbxTrafficClassValue, lldpXdot1dcbxAdminApplicationPriorityAESelector, lldpXdot1dcbxAdminApplicationPriorityAEProtocol, LldpXdot1dcbxSupportedCapacity, LldpXdot1dcbxAppSelector, LldpXdot1dcbxTrafficSelectionAlgorithm, LldpXdot1dcbxAppProtocol, LldpXdot1dcbxTrafficClassBandwidthValue = mibBuilder.importSymbols("LLDP-EXT-DOT1-V2-MIB", "LldpXdot1dcbxTrafficClassValue", "lldpXdot1dcbxAdminApplicationPriorityAESelector", "lldpXdot1dcbxAdminApplicationPriorityAEProtocol", "LldpXdot1dcbxSupportedCapacity", "LldpXdot1dcbxAppSelector", "LldpXdot1dcbxTrafficSelectionAlgorithm", "LldpXdot1dcbxAppProtocol", "LldpXdot1dcbxTrafficClassBandwidthValue")
lldpV2LocPortIfIndex, = mibBuilder.importSymbols("LLDP-V2-MIB", "lldpV2LocPortIfIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, TimeTicks, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "TimeTicks", "Integer32", "iso")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1DcbxMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1))
alcatelIND1DcbxMIB.setRevisions(('2011-06-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1DcbxMIB.setRevisionsDescriptions(('Capability Manager is used to set system wide limitation.',))
if mibBuilder.loadTexts: alcatelIND1DcbxMIB.setLastUpdated('201106280000Z')
if mibBuilder.loadTexts: alcatelIND1DcbxMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1DcbxMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n         Telephone:              North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n         Electronic Mail:         support@ind.alcatel.com\n             World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n             File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DcbxMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line\n        System Capability Manager, to allow for system control and limitation setting, of\n        different, features through out the system.\n        Capability manager is a centralized process which provides hardware information and\n        capability to other processes. To optimize the system performance , certain features\n        may be configured to a lower than the hardware limit through capability manager.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2011 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1DcbxMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1))
if mibBuilder.loadTexts: alcatelIND1DcbxMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DcbxMIBObjects.setDescription('Branch For VFC-DCBX Subsystem Managed Objects.')
alcatelIND1DcbxMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2))
if mibBuilder.loadTexts: alcatelIND1DcbxMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DcbxMIBConformance.setDescription('Branch For VFC-DCBX Subsystem Conformance Information.')
alcatelIND1DcbxMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1DcbxMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DcbxMIBGroups.setDescription('Branch For VFC-DCBX Subsystem Units Of Conformance.')
alcatelIND1DcbxMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1DcbxMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DcbxMIBCompliances.setDescription('Branch For VFC-DCBX Subsystem Compliance Statements.')
alaDcbxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1))
alaDcbxConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 2))
class DcbxTrafficFlow(TextualConvention, Integer32):
    description = 'Indicates the traffic flow\n        0: Lossy\n        1: Lossless'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("tfLossy", 0), ("tfLossless", 1))

class DcbxPriorityTCMap(TextualConvention, OctetString):
    description = 'Each group of four octets in this string specify\n        a 32-bit Traffic class ID.  The IDs are stored in network\n        byte order; i.e. octet N corresponds to the most\n        significant 8 bits of the ID, and octet N+3 correspond\n        to the least significant 8 bits.  The list is\n        large enough to hold 8 TC IDs, one per priority. The first\n        first 4 octets represent the first priority.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

class DcbxStatus(TextualConvention, Integer32):
    description = 'Indicates the dcbx status (could be related to hardware)\n        0: OK\n        1: PFC Resources Exhausted\n        2: PFC TLV Mismatch\n        3: ETS TLV Mismatch\n        4: PFC and ETS TLV Mismatch'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("ok", 0), ("pfcResourcesExhausted", 1), ("pfcTlvMismatch", 2), ("etsTlvMismatch", 3), ("etsPfcTlvMismatch", 4))

class DcbxActionTaken(TextualConvention, Integer32):
    description = 'Indicates the action taken as a result of DcbxStatus\n        0: No action taken (dcbx might not be operationaly UP)\n        1: Restored ETS admin config\n        2: Restored PFC admin config\n        3: Disabled PFC\n        4: Restored ETS and PFC admin config\n        5: Configured local admin\n        6: Configured local recommended\n        7: Configured remote admin\n        8: Configured remote recommended'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("na", 0), ("restEtsAdminCfg", 1), ("restPfcAdminCfg", 2), ("disabledPfc", 3), ("restEtsPfcAdminCfg", 4), ("cfgLocalAdmin", 5), ("cfgLocalRecom", 6), ("cfgRemoteAdmin", 7), ("cfgRemoteRecom", 8))

class DcbxTCsPresent(TextualConvention, OctetString):
    description = 'Octet representing the traffic classes present\n        in a particular profile. Each bit represents the \n        presence of the traffic class. The first bit indicates\n        if TC 0 is present, the second bit indicates TC 1,\n        and so forth. Bit value 1 indicates the TC is present.\n        Bit value 0 indicates the TC is not present.\n        Can be used to change the TC numbering.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class DcbxVersion(TextualConvention, Integer32):
    description = 'Indicates the dcbx version\n        0: IEEE\n        1: CEE\n        2: AUTO'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ieee", 0), ("cee", 1), ("auto", 2))

class RemoteDcbxVersion(TextualConvention, Integer32):
    description = 'Indicates the remote dcbx version\n        0: IEEE\n        1: CEE\n        2: AUTO\n        3: Unknown'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ieee", 0), ("cee", 1), ("auto", 2), ("unknown", 3))

alaDcbxDCProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaDcbxDCProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCProfileTable.setDescription('A table of Data Center profiles.')
alaDcbxDCProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPId"))
if mibBuilder.loadTexts: alaDcbxDCProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCProfileEntry.setDescription('A DCB profile entry.')
alaDcbxDCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: alaDcbxDCPId.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPId.setDescription('Identifier of DCB profile.')
alaDcbxDCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCPName.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPName.setDescription('Name of DCB profile.')
alaDcbxDCPETSTrafficClassesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 3), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPETSTrafficClassesSupported.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPETSTrafficClassesSupported.setDescription('Indicates the number of traffic classes supported.')
alaDcbxDCPPFCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 4), LldpXdot1dcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPPFCCap.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPPFCCap.setDescription('Indicates the number of traffic classes on the local device\n        that may simultaneously have PFC enabled.')
alaDcbxDCPPriorityTCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 5), DcbxPriorityTCMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPPriorityTCMap.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPPriorityTCMap.setDescription('Indicates the priority TC map. All 8 priorities are assigned a TC.')
alaDcbxDCPTemplateDCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCPTemplateDCPId.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTemplateDCPId.setDescription('Identifier of Template DCB profile. Used when creating a new profile.\n        The template profile values will be copied to the new profile.')
alaDcbxDCPTemplateDCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCPTemplateDCPName.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTemplateDCPName.setDescription('Name of Template DCB profile. Used when creating a new profile.\n        The template profile values will be copied to the new profile.')
alaDcbxDCPTCsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 8), DcbxTCsPresent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCPTCsPresent.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCsPresent.setDescription('Represents the traffic classes present in this particular profile.\n        Can be used to change the TC numbering. For example, a profile\n        with TCs numbered 0, 1, 2, can be changed to 1, 5, 7. The numbering\n        is assigned in increasing order. The number of TCs specified must\n        match the current number of TCs in the profile.')
alaDcbxDCP8023xPauseReady = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 9), VfcEnableState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCP8023xPauseReady.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCP8023xPauseReady.setDescription('Makes a profile pause-ready. Can only be set during profile creation.\n         When enabled, the PFC is lossy for all traffic classes in the profile\n         and they cannot be changed to lossless. Applying this profile to a port\n         will allow the port to have 802.2x pause enabled through the interfaces\n         commands. Can be applied to ports with a standard VFC profile. Can\n         be applied to a DCB port only if pfc willing and pfc tlv bits are disabled.')
alaDcbxDCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxDCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPRowStatus.setDescription('alaDcbxDCPRowStatus controls the creation and deletion of\n         rows in the table.')
alaDcbxDCPTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaDcbxDCPTrafficClassTable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTrafficClassTable.setDescription('A table of Traffic Classes for the DCB Profiles.')
alaDcbxDCPTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCDCPId"), (0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCTrafficClass"))
if mibBuilder.loadTexts: alaDcbxDCPTCEntry.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCEntry.setDescription('A DCB profile traffic class entry.')
alaDcbxDCPTCDCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: alaDcbxDCPTCDCPId.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCDCPId.setDescription('Identifier of DCB profile.')
alaDcbxDCPTCTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 2), LldpXdot1dcbxTrafficClassValue())
if mibBuilder.loadTexts: alaDcbxDCPTCTrafficClass.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCTrafficClass.setDescription('Indicates the traffic class.')
alaDcbxDCPTCDCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCDCPName.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCDCPName.setDescription('Name of DCB profile.')
alaDcbxDCPTCMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 4), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCMaximumBandwidth.setDescription('Indicates the max bandwidth assigned to this traffic class.')
alaDcbxDCPTCMinimumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 5), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCMinimumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCMinimumBandwidth.setDescription('Indicates the min bandwidth assigned to this traffic class.')
alaDcbxDCPTCPFCLinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 100), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCPFCLinkDelay.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCPFCLinkDelay.setDescription('PFC link delay allowance.\n         Default for a lossy TC is 0 and cannot be any other value.\n         Default for a lossless TC is 52 and can be changed in a valid range (10-100).')
alaDcbxDCPTCPFCLinkDelayUserModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPTCPFCLinkDelayUserModified.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCPFCLinkDelayUserModified.setDescription('Indicates if the Link Delay value has been modified by the user.')
alaDcbxDCPTCPFCTrafficFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 8), DcbxTrafficFlow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCPFCTrafficFlow.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCPFCTrafficFlow.setDescription('Indicates if PFC traffic flow is enabled on this traffic class')
alaDcbxDCPTCPriorityMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPTCPriorityMap.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCPriorityMap.setDescription('A bitmap that indicates the priorities assigned to this traffic \n        class.')
alaDcbxDCPTCTrafficScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 10), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPTCTrafficScheduler.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCTrafficScheduler.setDescription('Indicates the traffic class scheduler algorithm assigned to \n         this traffic class.')
alaDcbxDCPTCRecommendedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 11), LldpXdot1dcbxTrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDcbxDCPTCRecommendedBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCRecommendedBandwidth.setDescription('Indicates the recommended min bandwidth assigned to this traffic class.')
alaDcbxDCPTCRecommendedTrafficScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 2, 1, 12), LldpXdot1dcbxTrafficSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxDCPTCRecommendedTrafficScheduler.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTCRecommendedTrafficScheduler.setDescription('Indicates the recommended traffic class scheduler algorithm assigned to \n         this traffic class.')
alaDcbxPortInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaDcbxPortInstanceTable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPortInstanceTable.setDescription('A table of DCP Port Instances.')
alaDcbxPortInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxPIIfIndex"))
if mibBuilder.loadTexts: alaDcbxPortInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPortInstanceEntry.setDescription('A DCP Port Instance Entry.\n         Creating this entry for a port will change the port mode\n         to DCB, set the default DCB profile (if none is specified),\n         will disable NDCB features, and will create a set of\n         alaDcbxPIPrioEntrys for the port.')
alaDcbxPIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaDcbxPIIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIIfIndex.setDescription('Identifier of DCB profile applied to this port.')
alaDcbxPIDCBXAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 2), VfcEnableState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIDCBXAdmin.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIDCBXAdmin.setDescription('DCBX Admin State. Enable or Disable all DCBX features on this port.')
alaDcbxPIDCBXOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 3), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIDCBXOper.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIDCBXOper.setDescription('DCBX Oper State. Enable or Disable all DCBX features on this port.')
alaDcbxPIAdminDCPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIAdminDCPId.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIAdminDCPId.setDescription('Identifier of DCB profile applied to this port.')
alaDcbxPIAdminDCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIAdminDCPName.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIAdminDCPName.setDescription('Name of DCB profile applied to this port.')
alaDcbxPILocalModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPILocalModified.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPILocalModified.setDescription('Value is true if local configuration is different from configuration\n         imported from the DCB profile applied to this port.')
alaDcbxPIPFCDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 7), VfcEnableState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIPFCDefense.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPFCDefense.setDescription('PFC Defense Mode. Applies when PFC negotiation fails. If value is enabled,\n        then PFC becomes disabled but traffic still flows. If the value is disabled,\n        then PFC local configuration remains on the port.')
alaDcbxPIPFCStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 8), VfcEnableState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIPFCStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPFCStatsClear.setDescription('Clear the PFC stats for this port.')
alaDcbxPIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 9), DcbxStatus().clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIStatus.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIStatus.setDescription('Indicates port status.')
alaDcbxPIActionTaken = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 10), DcbxActionTaken().clone('na')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIActionTaken.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIActionTaken.setDescription('Indicates the action taken as a result of the status.')
alaDcbxPIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIRowStatus.setDescription('Controls the creation and deletion of\n         rows in the alaDcbxPortInstanceTable.')
alaDcbxPIDCBXVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 12), DcbxVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDcbxPIDCBXVersion.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIDCBXVersion.setDescription('DCBX Version selected on this port.')
alaDcbxPIDCBXOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 13), DcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIDCBXOperVersion.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIDCBXOperVersion.setDescription('DCBX Version operating on this port.')
alaDcbxPIDCBXRemoteOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 3, 1, 14), RemoteDcbxVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIDCBXRemoteOperVersion.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIDCBXRemoteOperVersion.setDescription('DCBX Remote Version operating on this port.')
alaDcbxPIPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaDcbxPIPriorityTable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPriorityTable.setDescription('A table of Priorities for DCP Port Instances.')
alaDcbxPIPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPrioIfIndex"), (0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPrioPriority"))
if mibBuilder.loadTexts: alaDcbxPIPrioEntry.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioEntry.setDescription('A DCB profile traffic class entry.')
alaDcbxPIPrioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaDcbxPIPrioIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioIfIndex.setDescription('Identifier of DCP Port Instance.')
alaDcbxPIPrioPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: alaDcbxPIPrioPriority.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioPriority.setDescription('Indicates the priority of the DCP Port Instance.')
alaDcbxPIPrioTC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1, 3), LldpXdot1dcbxTrafficClassValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIPrioTC.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioTC.setDescription('Indicates the traffic class this priority belongs to.')
alaDcbxPIPrioPFCPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIPrioPFCPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioPFCPacketsReceived.setDescription('Total PFC received packet count.')
alaDcbxPIPrioPFCPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPIPrioPFCPacketsTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPIPrioPFCPacketsTransmitted.setDescription('Total PFC transmitted packet count.')
alaDcbxPfcLLPrioritiesUsed = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesUsed.setDescription('This object specifies the number of PFC Lossless Priorities\n         in use in the system.')
alaDcbxPfcLLPrioritiesReserved = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesReserved.setStatus('deprecated')
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesReserved.setDescription('This object specifies the number of PFC Lossless Priorities\n         in reserved in the system.')
alaDcbxPfcLLPrioritiesAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesAvailable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDcbxPfcLLPrioritiesAvailable.setDescription('This object specifies the number of Priorities\n         available to be configured as PFC Lossless.')
alaDcbxPfcUsageTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8), )
if mibBuilder.loadTexts: alaDcbxPfcUsageTable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsageTable.setDescription('A table of chassis entries. Each depicts the pfc priorities available\n         per chassis. Only valid for TOR platform. In Virtual Chassis mode there is\n         an entry per chassis. In non-Virtual Chassis mode, only one entry is present.')
alaDcbxPfcUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsageChassisId"))
if mibBuilder.loadTexts: alaDcbxPfcUsageEntry.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsageEntry.setDescription('A PFC usage class entry.')
alaDcbxPfcUsageChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaDcbxPfcUsageChassisId.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsageChassisId.setDescription('Chassis ID.')
alaDcbxPfcUsagePrioritiesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesUsed.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesUsed.setDescription('This object specifies the number of PFC Lossless Priorities\n         in use.')
alaDcbxPfcUsagePrioritiesReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesReserved.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesReserved.setDescription('This object specifies the number of PFC Lossless Priorities\n         reserved.')
alaDcbxPfcUsagePrioritiesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesAvailable.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsagePrioritiesAvailable.setDescription('This object specifies the number of Priorities\n         available to be configured as PFC Lossless.')
alaXdot1dcbxAdminApplicationPriorityAppTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 9), )
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppTable.setStatus('current')
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppTable.setDescription('Table containing entries indicating the status of the corresponding row in lldpXdot1dcbxAdminApplicationPriorityAppTable ')
alaXdot1dcbxAdminApplicationPriorityAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 9, 1), ).setIndexNames((0, "LLDP-V2-MIB", "lldpV2LocPortIfIndex"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationPriorityAESelector"), (0, "LLDP-EXT-DOT1-V2-MIB", "lldpXdot1dcbxAdminApplicationPriorityAEProtocol"))
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppEntry.setStatus('current')
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppEntry.setDescription('Entry that indicates the rowstatus of application priority entry in lldpXdot1dcbxAdminApplicationPriorityAppTable ')
alaXdot1dcbxAdminApplicationPriorityAEPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 9, 1, 1), IEEE8021PriorityValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAEPriority.setStatus('current')
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAEPriority.setDescription('The priority code point that should be used in\n        frames transporting the protocol indicated by\n        alaXdot1dcbxAdminApplicationPriorityAESelector and\n        alaXdot1dcbxAdminApplicationPriorityAEProtocol')
alaXdot1dcbxAdminApplicationPriorityAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityAppRowStatus.setDescription('This object controls only the deletion of an entry in \n        lldpXdot1dcbxAdminApplicationPriorityAppTable.')
alcatelIND1DcbxMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCProfileGroup"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTrafficClassGroup"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPortInstanceGroup"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPortInstancePriorityGroup"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsageGroup"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsageNewGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1DcbxMIBCompliance = alcatelIND1DcbxMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1DcbxMIBCompliance.setDescription('Compliance statement for VFC-DCBX Subsystem.')
alaDcbxDCProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPName"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPETSTrafficClassesSupported"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPPFCCap"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPPriorityTCMap"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTemplateDCPId"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTemplateDCPName"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCsPresent"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCP8023xPauseReady"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxDCProfileGroup = alaDcbxDCProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCProfileGroup.setDescription('Collection of DCB Profile for management of DCBX.')
alaDcbxDCPTrafficClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCDCPName"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCMaximumBandwidth"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCMinimumBandwidth"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCPFCLinkDelay"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCPFCLinkDelayUserModified"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCPFCTrafficFlow"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCPriorityMap"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCTrafficScheduler"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCRecommendedBandwidth"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxDCPTCRecommendedTrafficScheduler"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxDCPTrafficClassGroup = alaDcbxDCPTrafficClassGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxDCPTrafficClassGroup.setDescription('Collection of DCB Profile Traffic Class for management of DCBX.')
alaDcbxPortInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIDCBXAdmin"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIDCBXOper"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIAdminDCPId"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIAdminDCPName"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPILocalModified"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPFCDefense"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPFCStatsClear"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIStatus"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIActionTaken"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIRowStatus"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIDCBXVersion"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIDCBXOperVersion"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIDCBXRemoteOperVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxPortInstanceGroup = alaDcbxPortInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPortInstanceGroup.setDescription('Collection of DCP Port Instances for management of DCBX.')
alaDcbxPortInstancePriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPrioTC"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPrioPFCPacketsReceived"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPIPrioPFCPacketsTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxPortInstancePriorityGroup = alaDcbxPortInstancePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPortInstancePriorityGroup.setDescription('Collection of DCP Port Instance Traffic Class for management of DCBX.')
alaDcbxPfcUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcLLPrioritiesUsed"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcLLPrioritiesReserved"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcLLPrioritiesAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxPfcUsageGroup = alaDcbxPfcUsageGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsageGroup.setDescription('Collection of PFC Lossless TC Usage Objects.')
alaDcbxPfcUsageNewGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsagePrioritiesUsed"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsagePrioritiesReserved"), ("ALCATEL-IND1-DCBX-MIB", "alaDcbxPfcUsagePrioritiesAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDcbxPfcUsageNewGroup = alaDcbxPfcUsageNewGroup.setStatus('current')
if mibBuilder.loadTexts: alaDcbxPfcUsageNewGroup.setDescription('Collection of PFC Lossless Priorities Usage Objects. Compatible with\n         Virtual Chassis mode.')
alaXdot1dcbxAdminApplicationPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 72, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-DCBX-MIB", "alaXdot1dcbxAdminApplicationPriorityAEPriority"), ("ALCATEL-IND1-DCBX-MIB", "alaXdot1dcbxAdminApplicationPriorityAppRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaXdot1dcbxAdminApplicationPriorityGroup = alaXdot1dcbxAdminApplicationPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: alaXdot1dcbxAdminApplicationPriorityGroup.setDescription('Collection of dcbx app priority configuration Usage Objects. ')
mibBuilder.exportSymbols("ALCATEL-IND1-DCBX-MIB", alaDcbxPIPriorityTable=alaDcbxPIPriorityTable, alaDcbxDCPTemplateDCPName=alaDcbxDCPTemplateDCPName, alaDcbxPIDCBXVersion=alaDcbxPIDCBXVersion, alaDcbxPIPrioPFCPacketsTransmitted=alaDcbxPIPrioPFCPacketsTransmitted, DcbxVersion=DcbxVersion, alaDcbxDCPETSTrafficClassesSupported=alaDcbxDCPETSTrafficClassesSupported, alaDcbxPfcUsagePrioritiesReserved=alaDcbxPfcUsagePrioritiesReserved, alaDcbxPIDCBXRemoteOperVersion=alaDcbxPIDCBXRemoteOperVersion, alaDcbxDCP8023xPauseReady=alaDcbxDCP8023xPauseReady, DcbxTCsPresent=DcbxTCsPresent, alaDcbxDCPPriorityTCMap=alaDcbxDCPPriorityTCMap, alaDcbxPIDCBXAdmin=alaDcbxPIDCBXAdmin, alaDcbxConformance=alaDcbxConformance, alaDcbxPortInstanceEntry=alaDcbxPortInstanceEntry, alaDcbxDCPTCEntry=alaDcbxDCPTCEntry, alaDcbxDCProfileTable=alaDcbxDCProfileTable, alcatelIND1DcbxMIBCompliance=alcatelIND1DcbxMIBCompliance, alaDcbxDCPTCDCPName=alaDcbxDCPTCDCPName, alaDcbxDCPTCMinimumBandwidth=alaDcbxDCPTCMinimumBandwidth, DcbxTrafficFlow=DcbxTrafficFlow, alaDcbxDCPPFCCap=alaDcbxDCPPFCCap, alaDcbxConfig=alaDcbxConfig, alaDcbxDCPTCPFCLinkDelayUserModified=alaDcbxDCPTCPFCLinkDelayUserModified, alaDcbxDCPRowStatus=alaDcbxDCPRowStatus, alaDcbxDCPTCRecommendedBandwidth=alaDcbxDCPTCRecommendedBandwidth, alaDcbxPortInstanceTable=alaDcbxPortInstanceTable, alcatelIND1DcbxMIBConformance=alcatelIND1DcbxMIBConformance, alaXdot1dcbxAdminApplicationPriorityAppRowStatus=alaXdot1dcbxAdminApplicationPriorityAppRowStatus, alaDcbxPIIfIndex=alaDcbxPIIfIndex, alaDcbxDCPTCPFCLinkDelay=alaDcbxDCPTCPFCLinkDelay, alaDcbxDCPTCMaximumBandwidth=alaDcbxDCPTCMaximumBandwidth, alaXdot1dcbxAdminApplicationPriorityGroup=alaXdot1dcbxAdminApplicationPriorityGroup, alaDcbxDCPTCPriorityMap=alaDcbxDCPTCPriorityMap, alcatelIND1DcbxMIBCompliances=alcatelIND1DcbxMIBCompliances, DcbxActionTaken=DcbxActionTaken, alaDcbxDCPTrafficClassGroup=alaDcbxDCPTrafficClassGroup, alaDcbxDCPId=alaDcbxDCPId, alaDcbxDCPTrafficClassTable=alaDcbxDCPTrafficClassTable, alaDcbxPIAdminDCPId=alaDcbxPIAdminDCPId, alaDcbxDCPTCTrafficClass=alaDcbxDCPTCTrafficClass, alaDcbxPILocalModified=alaDcbxPILocalModified, alaDcbxPIPrioIfIndex=alaDcbxPIPrioIfIndex, alaDcbxPfcUsageGroup=alaDcbxPfcUsageGroup, alaDcbxPfcUsageNewGroup=alaDcbxPfcUsageNewGroup, alaDcbxDCProfileEntry=alaDcbxDCProfileEntry, alaDcbxPIStatus=alaDcbxPIStatus, alaDcbxPortInstancePriorityGroup=alaDcbxPortInstancePriorityGroup, alaDcbxPortInstanceGroup=alaDcbxPortInstanceGroup, alaDcbxPIPFCStatsClear=alaDcbxPIPFCStatsClear, alaXdot1dcbxAdminApplicationPriorityAppTable=alaXdot1dcbxAdminApplicationPriorityAppTable, alaDcbxPIDCBXOperVersion=alaDcbxPIDCBXOperVersion, alaDcbxDCPTCRecommendedTrafficScheduler=alaDcbxDCPTCRecommendedTrafficScheduler, alaDcbxPfcUsageTable=alaDcbxPfcUsageTable, alaDcbxPfcLLPrioritiesUsed=alaDcbxPfcLLPrioritiesUsed, alaDcbxDCProfileGroup=alaDcbxDCProfileGroup, alaDcbxPfcUsagePrioritiesAvailable=alaDcbxPfcUsagePrioritiesAvailable, RemoteDcbxVersion=RemoteDcbxVersion, alaDcbxPIDCBXOper=alaDcbxPIDCBXOper, alaXdot1dcbxAdminApplicationPriorityAppEntry=alaXdot1dcbxAdminApplicationPriorityAppEntry, alaDcbxPfcUsageChassisId=alaDcbxPfcUsageChassisId, alaDcbxDCPTCDCPId=alaDcbxDCPTCDCPId, alaDcbxPIPrioPFCPacketsReceived=alaDcbxPIPrioPFCPacketsReceived, alaDcbxPIRowStatus=alaDcbxPIRowStatus, alaXdot1dcbxAdminApplicationPriorityAEPriority=alaXdot1dcbxAdminApplicationPriorityAEPriority, alaDcbxDCPTCTrafficScheduler=alaDcbxDCPTCTrafficScheduler, alcatelIND1DcbxMIBGroups=alcatelIND1DcbxMIBGroups, alaDcbxDCPTemplateDCPId=alaDcbxDCPTemplateDCPId, alaDcbxPfcLLPrioritiesAvailable=alaDcbxPfcLLPrioritiesAvailable, alaDcbxPIPrioPriority=alaDcbxPIPrioPriority, alcatelIND1DcbxMIBObjects=alcatelIND1DcbxMIBObjects, alaDcbxDCPTCsPresent=alaDcbxDCPTCsPresent, alaDcbxPIAdminDCPName=alaDcbxPIAdminDCPName, DcbxStatus=DcbxStatus, alaDcbxPfcUsagePrioritiesUsed=alaDcbxPfcUsagePrioritiesUsed, alaDcbxPIPrioEntry=alaDcbxPIPrioEntry, alaDcbxPIActionTaken=alaDcbxPIActionTaken, alaDcbxPIPrioTC=alaDcbxPIPrioTC, alaDcbxPIPFCDefense=alaDcbxPIPFCDefense, DcbxPriorityTCMap=DcbxPriorityTCMap, alaDcbxPfcUsageEntry=alaDcbxPfcUsageEntry, alcatelIND1DcbxMIB=alcatelIND1DcbxMIB, alaDcbxDCPName=alaDcbxDCPName, alaDcbxPfcLLPrioritiesReserved=alaDcbxPfcLLPrioritiesReserved, alaDcbxDCPTCPFCTrafficFlow=alaDcbxDCPTCPFCTrafficFlow, PYSNMP_MODULE_ID=alcatelIND1DcbxMIB)
