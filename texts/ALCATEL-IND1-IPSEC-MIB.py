#
# PySNMP MIB module ALCATEL-IND1-IPSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-IPSEC-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:12:03 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1IPsec, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1IPsec")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, iso, Integer32, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "iso", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Bits")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
alcatelIND1IPsecMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1))
alcatelIND1IPsecMIB.setRevisions(('2010-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPsecMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPsecMIB.setLastUpdated('201007200000Z')
if mibBuilder.loadTexts: alcatelIND1IPsecMIB.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: alcatelIND1IPsecMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate\n         version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPsecMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Proprietary IPsec MIB definitions\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n         or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n           Copyright (C) 1995-2010 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPsecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1))
class IPsecDescription(TextualConvention, OctetString):
    description = 'Optional description of a table entry.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 200)

class IPsecPortNumber(TextualConvention, Integer32):
    description = 'A port number value.  0 is the wildcard value to match any port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class IPsecPrefixLength(TextualConvention, Integer32):
    description = 'Significant bits in an IPv6 address prefix. 0..32 is the valid range\n        for IPv4 addresses.  0..128 is valid for IPv6 addresses'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 128)

class IPsecULProtocol(TextualConvention, Integer32):
    description = 'An upper-layer protocol number.  255 is the wildcard value to match\n        any protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class IPsecAdminState(TextualConvention, Integer32):
    description = 'Administrative state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class IPsecSAType(TextualConvention, Integer32):
    description = 'SA type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("ah", 2), ("esp", 3))

class IPsecESPAlgorithm(TextualConvention, Integer32):
    description = 'ESP algorithms.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 11, 12, 13))
    namedValues = NamedValues(("none", 0), ("descbc", 2), ("des3cbc", 3), ("null", 11), ("aescbc", 12), ("aesctr", 13))

class IPsecAHAlgorithm(TextualConvention, Integer32):
    description = 'AH algorithms.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 9))
    namedValues = NamedValues(("none", 0), ("hmacmd5", 2), ("hmacsha1", 3), ("aesxcbcmac", 9))

class IPsecOperationalState(TextualConvention, Integer32):
    description = 'Operational state.\n\n        enabled(1) - The entry is enabled.\n\n        disabled(2) - The entry is administratively disabled or\n        DNS resolution has experienced a permanent failure.\n\n        dnspending(3) - Awaiting DNS resolution before making\n        the entry active.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("dnspending", 3))

alaIPsecConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1))
alaIPsecSecurityKeyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaIPsecSecurityKeyTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityKeyTable.setDescription("Table allowing the configuration of the switch's IPsec security key.\n        The security key is used to encrypt and IPsec related information\n        retained in permanent storage.\n\n        There is always a single row in this table with an index value of 1.")
alaIPsecSecurityKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityKeyID"))
if mibBuilder.loadTexts: alaIPsecSecurityKeyEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityKeyEntry.setDescription('The security key entry.')
alaIPsecSecurityKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPsecSecurityKeyID.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityKeyID.setDescription("The row's identifier.  Only one entry is ever present, with an\n        ID value of 1.")
alaIPsecSecurityKeyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPsecSecurityKeyCurrent.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityKeyCurrent.setDescription('The current value of the 16-byte IPsec security key.  If an attempt\n        is made to read the value of this object, a zero-length octet\n        string will be returned.')
alaIPsecSecurityKeyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPsecSecurityKeyNew.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityKeyNew.setDescription('Used to set a new 16-byte value for the IPsec security key.\n\n        Both alaIPsecSecurityKeyCurrent (with its correct value) and\n        alaIPsecSecurityKeyNew must be specified in the same SNMP SET\n        message.  If alaIPsecSecurityKeyCurrent is not present, or if\n        its value is incorrect, the attempt to set a new key will fail.\n\n\tIf an attempt is made to read the value of this object, a zero-length\n\toctet string will be returned.')
alaIPsecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaIPsecStatisticsTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsTable.setDescription('Table allowing the IPv6 statistics to be retrieved.')
alaIPsecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsProtocol"))
if mibBuilder.loadTexts: alaIPsecStatisticsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsEntry.setDescription('The statistics entry.')
alaIPsecStatisticsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6))).clone(namedValues=NamedValues(("ipv6", 6))))
if mibBuilder.loadTexts: alaIPsecStatisticsProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsProtocol.setDescription('IP protocol version covered by the IPsec statistics.')
alaIPsecStatisticsInSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInSuccessful.setDescription('Number of incoming packets requiring IPsec processing\n        that were successfully handled.')
alaIPsecStatisticsInPolicyViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInPolicyViolation.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInPolicyViolation.setDescription('Number of incoming packets that were dropped because\n        of policy violations.')
alaIPsecStatisticsInNoSA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInNoSA.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInNoSA.setDescription('Number of incoming packets dropped because no\n        matching SA was found.')
alaIPsecStatisticsInUnknownSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInUnknownSPI.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInUnknownSPI.setDescription('Number of incoming packets dropped because the SPI was\n        unknown.')
alaIPsecStatisticsInAHReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInAHReplay.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInAHReplay.setDescription('Number of incoming packets that failed the AH replay\n        check.')
alaIPsecStatisticsInESPReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInESPReplay.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInESPReplay.setDescription('Number of incoming packets taht failed the ESP\n        replay check.')
alaIPsecStatisticsInAHAuthenticationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInAHAuthenticationSuccess.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInAHAuthenticationSuccess.setDescription('Number of incoming packets that successfully passed\n        AH authentication.')
alaIPsecStatisticsInAHAuthenticationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInAHAuthenticationFail.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInAHAuthenticationFail.setDescription('Number of incoming packets that failed AH\n        authentication.')
alaIPsecStatisticsInESPAuthenticationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInESPAuthenticationSuccess.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInESPAuthenticationSuccess.setDescription('Number of incoming packets that successfully passed\n        ESP authentication.')
alaIPsecStatisticsInESPAuthenticationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInESPAuthenticationFail.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInESPAuthenticationFail.setDescription('Number of incoming packets that failed ESP\n        authentication.')
alaIPsecStatisticsInBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInBadPacket.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInBadPacket.setDescription('Number of incoming packets requiring IPsec\n        processing that were not valid.')
alaIPsecStatisticsInNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInNoMemory.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInNoMemory.setDescription('Number of incoming IPsec packets dropped because\n        no memory was available.')
alaIPsecStatisticsOutSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutSuccessful.setDescription('Number of outgoing packets requiring IPsec processing\n        that were successfully handled.')
alaIPsecStatisticsOutPolicyViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutPolicyViolation.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutPolicyViolation.setDescription('Number of outgoing packets dropped because of a\n        policy violation.')
alaIPsecStatisticsOutNoSA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutNoSA.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutNoSA.setDescription('Number of outgoing packets dropped because no matching\n        SA was found.')
alaIPsecStatisticsOutBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutBadPacket.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutBadPacket.setDescription('Number of outgoing packets requiring IPsec processing\n        that were not valid.')
alaIPsecStatisticsOutNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutNoMemory.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutNoMemory.setDescription('Number of outgoing IPsec packets dropped because no\n        memory was available.')
alaIPsecStatisticsInDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsInDiscarded.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsInDiscarded.setDescription('Number of incoming packets dropped because they matched\n        a discard policy.')
alaIPsecStatisticsOutDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecStatisticsOutDiscarded.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsOutDiscarded.setDescription('Number of outgoing packets dropped because they matched\n        a discard policy.')
alaIPsecSecurityPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2), )
if mibBuilder.loadTexts: alaIPsecSecurityPolicyTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyTable.setDescription('Table allowing the configuration of IPsec security policies.')
alaIPsecSecurityPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyID"))
if mibBuilder.loadTexts: alaIPsecSecurityPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyEntry.setDescription('A security policy entry.')
alaIPsecSecurityPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPsecSecurityPolicyID.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyID.setDescription('A unique identifier for this security policy.  When creating a\n        new policy, a zero value must be specified.  An available\n        policy ID will then be automatically assigned to the policy.')
alaIPsecSecurityPolicySourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourceType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourceType.setDescription('The type of source address specified.  Currently only ipv6(2) is allowed.')
alaIPsecSecurityPolicySource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicySource.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicySource.setDescription('The source of packets covered by this policy.')
alaIPsecSecurityPolicySourcePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 4), IPsecPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourcePrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourcePrefixLength.setDescription('The number of bits of the source address used to determine\n        which packets are covered by this policy.\n\n        The default value varies depending upon the type of\n        source address specified:\n           IPv4 - 32\n           IPv6 - 128\n           DNS name - 0 (any other value is ignored)')
alaIPsecSecurityPolicySourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 5), IPsecPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourcePort.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicySourcePort.setDescription('The source port of packets covered by this policy. To\n        match packets from any port, specify the 0 wildcard value.  A\n        wildcard policy will only be used when there is no exact match\n        to a destination port in another entry.')
alaIPsecSecurityPolicyDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationType.setDescription('The type of destination address specified.  Currently only ipv6(2) is allowed.')
alaIPsecSecurityPolicyDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestination.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestination.setDescription('The destination of packets covered by this policy.')
alaIPsecSecurityPolicyDestinationPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 8), IPsecPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationPrefixLength.setDescription('The number of bits of the destination prefix used to determine\n        which packets are covered by this policy.\n\n        The default value varies depending upon the type of\n        destination address specified:\n           IPv4 - 32\n           IPv6 - 128\n           DNS name - 0 (any other value is ignored)')
alaIPsecSecurityPolicyDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 9), IPsecPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDestinationPort.setDescription('The destination port of packets covered by this policy. To\n        match packets from any port, specify the 0 wildcard value.  A\n        wildcard policy will only be used when there is no exact match\n        to a destination port in another entry.')
alaIPsecSecurityPolicyULProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 10), IPsecULProtocol().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyULProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyULProtocol.setDescription('The upper-layer protocol of packets covered by this policy.\n        To match all protocols, specify the 255 wildcard value.  A wildcard\n        policy will only be used when there is no exact match to the protocol\n        value specified in another entry.')
alaIPsecSecurityPolicyICMPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyICMPv6Type.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyICMPv6Type.setDescription('If the upper-layer protocol is ICMPv6, an ICMPv6 type value may\n        be specified to restrict the policy to a specific packet type.\n\n        To match all ICMPv6 packets, the 0 wildcard value should be\n        specified.')
alaIPsecSecurityPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDirection.setDescription('The direction of traffic covered by this policy.')
alaIPsecSecurityPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyName.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyName.setDescription('A name for this policy.')
alaIPsecSecurityPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 14), IPsecDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyDescription.setDescription('A detailed description of this policy.')
alaIPsecSecurityPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discard", 0), ("none", 1), ("ipsec", 2))).clone('ipsec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyAction.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyAction.setDescription('The action to take on traffic covered by this policy.\n\n        discard(0) means that all traffic covered by the policy\n        will be discarded.\n\n        none(1) means that no IPsec processing will be done on\n        the traffic covered by this policy.\n\n        ipsec(2) means that IPsec processing will take place on\n        the traffic. One or more rules should be defined in the\n        IPsec Rule Table.  If no rules are defined processing\n        is identical to none(0) being specified.')
alaIPsecSecurityPolicyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 16), IPsecAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyAdminState.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyAdminState.setDescription('Allows a policy to be administratively enabled or\n        disabled.')
alaIPsecSecurityPolicyOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 17), IPsecOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyOperationalState.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyOperationalState.setDescription('The operational state of this policy.')
alaIPsecSecurityPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyPriority.setDescription('The priority for this policy.  When traffic would be covered by\n        multiple policies the policy with the highest priority value is\n        used.  If two policies have the same priority, the one configured\n        first has precedence.')
alaIPsecSecurityPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRowStatus.setDescription('Used to control the addition and removal of security\n        policy entries.')
alaIPsecSecurityPolicyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3), )
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleTable.setDescription('Table allowing the configuration of the IPsec rules for\n        a security policy.')
alaIPsecSecurityPolicyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyID"), (0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyRuleIndex"))
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleEntry.setDescription('A security policy entry.')
alaIPsecSecurityPolicyRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleIndex.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleIndex.setDescription('Index specifying the order in which multiple rules for\n        the same security policy will be applied.  Rules are\n        indexed by the order in which they are applied to the\n        original payload.\n\n        For example, for a security policy where an IPv6 payload\n        should be protected by an ESP header, which should be protected\n        by an AH header, there would be two Rule Table entries.\n        The ESP entry would have an index of 1 (first rule applied\n        to the payload).  The AH entry would have an index of 2\n        (second rule applied).')
alaIPsecSecurityPolicyRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleProtocol.setDescription('Indicates the type of header required by the rule.')
alaIPsecSecurityPolicyRuleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("transport", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleMode.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleMode.setDescription("The mode in which the rule's protocol is running.  At present,\n        only transport(1) is allowed.  Until tunnel mode is supported,\n        transport(1) will be treated as the default value.")
alaIPsecSecurityPolicyRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyRuleRowStatus.setDescription('Used to control the addition and removal of security\n        policy IPsec rule entries.')
alaIPsecSAConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4), )
if mibBuilder.loadTexts: alaIPsecSAConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigTable.setDescription('Table allowing the manual configuration of Security\n        Associations in the Security Association Database (SAD).')
alaIPsecSAConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigID"))
if mibBuilder.loadTexts: alaIPsecSAConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigEntry.setDescription('Manually configured security association (SA) parameters.')
alaIPsecSAConfigID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPsecSAConfigID.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigID.setDescription('A unique identifier for this manually configured SA.\n        When creating a new SA, a zero value must be specified.\n        An available ID will then be automatically assigned to\n        the SA.')
alaIPsecSAConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 2), IPsecSAType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigType.setDescription('The type of this SA: AH or ESP.  Once set,\n        the type may not be changed.')
alaIPsecSAConfigSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigSourceType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigSourceType.setDescription('The type of source address specified.  Currently only ipv6(2) is allowed.')
alaIPsecSAConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigSource.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigSource.setDescription('The source of packets covered by this SA.')
alaIPsecSAConfigDestinationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigDestinationType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigDestinationType.setDescription('The type of destination address specified.  Currently only ipv6(2) is allowed.')
alaIPsecSAConfigDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigDestination.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigDestination.setDescription('The destination of packets covered by this SA.')
alaIPsecSAConfigSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigSPI.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigSPI.setDescription('The Security Parameters Index (SPI) of this SA.')
alaIPsecSAConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigName.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigName.setDescription('The name of this manually configured SA.')
alaIPsecSAConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 9), IPsecDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigDescription.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigDescription.setDescription('A detailed description for the manually created IPsec SA.')
alaIPsecSAConfigEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 10), IPsecESPAlgorithm().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigEncryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigEncryptionAlgorithm.setDescription('For an ESP SA, defines the encryption algorithm to be used.\n        null(11) should be specified if ESP is being used for integrity\n        only.  If null(11) is specified,\n        alaIPsecSAConfigAuthenticationAlgorithm may not be none(0).\n\n\taesctr(13) is not valid for manually configured SAs.\n\n        The value of this object is none(0) for AH SAs.')
alaIPsecSAConfigEncryptionKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 11), Unsigned32()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigEncryptionKeyLength.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigEncryptionKeyLength.setDescription('For those algorithms where multiple key lengths are supported,\n        specifies the key length to be used.  Zero may be specified to\n        use the default key length.')
alaIPsecSAConfigAuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 12), IPsecAHAlgorithm().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigAuthenticationAlgorithm.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigAuthenticationAlgorithm.setDescription('Defines the authentication algorithm to be used.\n\n        For ESP SAs, none(0) may be specified for encryption-only ESP.\n        For ESP integrity-only, ESP integrity and encryption, or for\n        AH SAs, hmacmd5(2), hmacsha1(3), or aesxcbcmac(9)  must\n        be specified.')
alaIPsecSAConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 13), IPsecAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigAdminState.setDescription('Allows a manually configured SA to be administratively enabled\n        or disabled.')
alaIPsecSAConfigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 14), IPsecOperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecSAConfigOperationalState.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigOperationalState.setDescription('The operational state of the manually configured SA.')
alaIPsecSAConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecSAConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigRowStatus.setDescription('Used to control the addition and removal of manually configured\n        IPsec SAs.')
alaIPsecKeyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5), )
if mibBuilder.loadTexts: alaIPsecKeyTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyTable.setDescription('Table used to configure the keys used by manually\n        configured Security Associations in the IPsec Security\n        Association Configuration table.')
alaIPsecKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyID"))
if mibBuilder.loadTexts: alaIPsecKeyEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyEntry.setDescription('An IPsec key.  Keys in the table must be uniquely\n        identified by the combination of key type and key name.\n        However, since the key name can be up to 255 characters,\n        beyond the 128-element size limit for SNMP index objects,\n        the key ID is used to uniquely identify a key for SNMP\n        access.')
alaIPsecKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPsecKeyID.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyID.setDescription('A unique identifier for this key.  When creating a\n        new key, a zero value must be specified.  An available\n        ID will then be automatically assigned to the key.')
alaIPsecKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saAuthentication", 1), ("saEncryption", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecKeyType.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyType.setDescription('Indicates if the key is to be used for encryption or\n        authentication by a SA.  Once a key is created, its type\n        may not be changed.')
alaIPsecKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecKeyName.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyName.setDescription('The name of the key.\n\n        For manually-configured SA keys, the name is limited to\n        a maximum length of 20 characters and should correspond\n        to an entry in the alaIPsecSAConfigTable.\n\n        The key name may not be changed once a key is created.')
alaIPsecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecKey.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKey.setDescription('The key value.  The value specified must match the required\n        key length for the algorithm using the key.  If\n        an attempt is made to read the value of this object a\n        zero-length octet string will be returned.')
alaIPsecKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyEncrypted.setDescription('If true, the key value is specified in AOS encrypted form.\n        For example, keys being restored from the configuration file.')
alaIPsecKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPsecKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyRowStatus.setDescription('Used to control the addition and removal of keys.')
alaIPsecErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6), )
if mibBuilder.loadTexts: alaIPsecErrorsTable.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsTable.setDescription('Table allowing retrieval of the IPsec error counters.')
alaIPsecErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsProtocol"))
if mibBuilder.loadTexts: alaIPsecErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsEntry.setDescription('The error counters entry.')
alaIPsecErrorsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6))).clone(namedValues=NamedValues(("ipv6", 6))))
if mibBuilder.loadTexts: alaIPsecErrorsProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsProtocol.setDescription('IP protocol version covered by the IPsec error counters.')
alaIPsecErrorsInPolicyViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInPolicyViolation.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInPolicyViolation.setDescription('Number of incoming packets that were dropped because\n        of policy violations.')
alaIPsecErrorsInNoSA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInNoSA.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInNoSA.setDescription('Number of incoming packets dropped because no\n        matching SA was found.')
alaIPsecErrorsInReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInReplay.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInReplay.setDescription('Number of incoming packets that failed a replay check.')
alaIPsecErrorsInAuthenticationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInAuthenticationFail.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInAuthenticationFail.setDescription('Number of incoming packets that failed authentication.')
alaIPsecErrorsInDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInDiscarded.setDescription('Number of incoming packets dropped because they matched\n        a discard policy.')
alaIPsecErrorsInOther = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsInOther.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsInOther.setDescription('Number of incoming packets dropped for a reason not\n\totherwise counted.')
alaIPsecErrorsOutNoSA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsOutNoSA.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsOutNoSA.setDescription('Number of outgoing packets dropped because no matching\n        SA was found.')
alaIPsecErrorsOutDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsOutDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsOutDiscarded.setDescription('Number of outgoing packets dropped because they matched\n        a discard policy.')
alaIPsecErrorsOutOther = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPsecErrorsOutOther.setStatus('current')
if mibBuilder.loadTexts: alaIPsecErrorsOutOther.setDescription('Number of outgoing packets dropped for a reason not\n\totherwise counted.')
alcatelIND1IPsecMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2))
alcatelIND1IPsecMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 1))
alcatelIND1IPsecMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2))
alaIPsecCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecConfigGroup"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyGroup"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigGroup"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyGroup"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecCompliance = alaIPsecCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIPsecCompliance.setDescription('The compliance statement for Alcatel switches\n        implementing ALCATEL-IND1-IPSEC-MIB.')
alaIPsecConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityKeyCurrent"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityKeyNew"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecConfigGroup = alaIPsecConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPsecConfigGroup.setDescription('A collection of objects to support global configuration\n        of IPsec.')
alaIPsecSecurityPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicySource"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicySourceType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicySourcePrefixLength"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicySourcePort"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDestination"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDestinationType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDestinationPrefixLength"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDestinationPort"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyULProtocol"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyICMPv6Type"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDirection"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyName"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyDescription"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyAction"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyAdminState"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyOperationalState"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyPriority"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyRowStatus"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyRuleProtocol"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyRuleMode"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSecurityPolicyRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecSecurityPolicyGroup = alaIPsecSecurityPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSecurityPolicyGroup.setDescription('A collection of objects to support management of IPsec\n        security policies.')
alaIPsecSAConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigSource"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigSourceType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigDestination"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigDestinationType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigSPI"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigName"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigDescription"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigEncryptionAlgorithm"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigEncryptionKeyLength"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigAuthenticationAlgorithm"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigAdminState"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigOperationalState"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecSAConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecSAConfigGroup = alaIPsecSAConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPsecSAConfigGroup.setDescription('A collection of objects to support management of manually\n        configured IPsec SAs.')
alaIPsecKeyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyType"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyName"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKey"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyEncrypted"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecKeyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecKeyGroup = alaIPsecKeyGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPsecKeyGroup.setDescription('A collection of objects to support management of keys.')
alaIPsecCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInPolicyViolation"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInNoSA"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInReplay"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInAuthenticationFail"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInDiscarded"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsInOther"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsOutNoSA"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsOutDiscarded"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecErrorsOutOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecCountersGroup = alaIPsecCountersGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPsecCountersGroup.setDescription('A collection of objects to support management of IPsec\n         counters.')
alaIPsecStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 43, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInSuccessful"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInPolicyViolation"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInNoSA"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInUnknownSPI"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInAHReplay"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInESPReplay"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInAHAuthenticationSuccess"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInAHAuthenticationFail"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInESPAuthenticationSuccess"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInESPAuthenticationFail"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInBadPacket"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInNoMemory"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutSuccessful"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutPolicyViolation"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutNoSA"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutBadPacket"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutNoMemory"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsInDiscarded"), ("ALCATEL-IND1-IPSEC-MIB", "alaIPsecStatisticsOutDiscarded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPsecStatisticsGroup = alaIPsecStatisticsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPsecStatisticsGroup.setDescription('A collection of objects to support management of IPsec\n         statistics.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPSEC-MIB", alaIPsecSecurityPolicyRuleTable=alaIPsecSecurityPolicyRuleTable, alaIPsecStatisticsGroup=alaIPsecStatisticsGroup, alaIPsecSAConfigTable=alaIPsecSAConfigTable, alaIPsecStatisticsProtocol=alaIPsecStatisticsProtocol, alaIPsecSecurityPolicyRuleMode=alaIPsecSecurityPolicyRuleMode, alaIPsecStatisticsEntry=alaIPsecStatisticsEntry, alaIPsecSAConfigDestinationType=alaIPsecSAConfigDestinationType, alaIPsecSAConfigEncryptionKeyLength=alaIPsecSAConfigEncryptionKeyLength, alaIPsecKeyID=alaIPsecKeyID, alaIPsecErrorsOutDiscarded=alaIPsecErrorsOutDiscarded, alaIPsecSecurityPolicyULProtocol=alaIPsecSecurityPolicyULProtocol, alaIPsecSecurityPolicySourcePort=alaIPsecSecurityPolicySourcePort, alaIPsecStatisticsInAHAuthenticationSuccess=alaIPsecStatisticsInAHAuthenticationSuccess, alaIPsecErrorsOutNoSA=alaIPsecErrorsOutNoSA, alaIPsecSecurityPolicyDestinationType=alaIPsecSecurityPolicyDestinationType, alaIPsecKeyTable=alaIPsecKeyTable, alaIPsecCompliance=alaIPsecCompliance, alaIPsecSecurityKeyNew=alaIPsecSecurityKeyNew, IPsecOperationalState=IPsecOperationalState, IPsecPrefixLength=IPsecPrefixLength, IPsecULProtocol=IPsecULProtocol, alaIPsecKeyEncrypted=alaIPsecKeyEncrypted, alaIPsecErrorsInAuthenticationFail=alaIPsecErrorsInAuthenticationFail, alaIPsecErrorsEntry=alaIPsecErrorsEntry, alaIPsecSecurityPolicyName=alaIPsecSecurityPolicyName, alaIPsecSAConfigSPI=alaIPsecSAConfigSPI, alaIPsecErrorsInReplay=alaIPsecErrorsInReplay, alaIPsecStatisticsOutPolicyViolation=alaIPsecStatisticsOutPolicyViolation, alcatelIND1IPsecMIBGroups=alcatelIND1IPsecMIBGroups, alaIPsecStatisticsOutDiscarded=alaIPsecStatisticsOutDiscarded, alaIPsecSecurityPolicyAction=alaIPsecSecurityPolicyAction, alaIPsecKeyEntry=alaIPsecKeyEntry, alcatelIND1IPsecMIB=alcatelIND1IPsecMIB, alaIPsecSAConfigName=alaIPsecSAConfigName, alaIPsecKeyName=alaIPsecKeyName, IPsecAHAlgorithm=IPsecAHAlgorithm, alaIPsecSecurityPolicyDestinationPort=alaIPsecSecurityPolicyDestinationPort, alaIPsecSecurityPolicySourceType=alaIPsecSecurityPolicySourceType, alaIPsecSecurityPolicySource=alaIPsecSecurityPolicySource, alaIPsecStatisticsInSuccessful=alaIPsecStatisticsInSuccessful, alaIPsecErrorsTable=alaIPsecErrorsTable, alaIPsecSAConfigType=alaIPsecSAConfigType, alaIPsecSecurityPolicyRowStatus=alaIPsecSecurityPolicyRowStatus, alaIPsecSAConfigDescription=alaIPsecSAConfigDescription, alaIPsecSAConfigAuthenticationAlgorithm=alaIPsecSAConfigAuthenticationAlgorithm, alaIPsecErrorsProtocol=alaIPsecErrorsProtocol, alaIPsecSecurityPolicyGroup=alaIPsecSecurityPolicyGroup, alaIPsecStatisticsInNoSA=alaIPsecStatisticsInNoSA, alaIPsecSAConfigEncryptionAlgorithm=alaIPsecSAConfigEncryptionAlgorithm, alaIPsecStatisticsOutBadPacket=alaIPsecStatisticsOutBadPacket, alaIPsecSAConfigDestination=alaIPsecSAConfigDestination, alaIPsecSecurityPolicyDestinationPrefixLength=alaIPsecSecurityPolicyDestinationPrefixLength, alaIPsecSAConfigSourceType=alaIPsecSAConfigSourceType, alaIPsecStatisticsOutNoSA=alaIPsecStatisticsOutNoSA, alaIPsecKeyGroup=alaIPsecKeyGroup, alaIPsecCountersGroup=alaIPsecCountersGroup, alaIPsecSecurityPolicyEntry=alaIPsecSecurityPolicyEntry, alaIPsecSecurityPolicyDescription=alaIPsecSecurityPolicyDescription, alaIPsecStatisticsInESPAuthenticationFail=alaIPsecStatisticsInESPAuthenticationFail, alaIPsecSecurityPolicyAdminState=alaIPsecSecurityPolicyAdminState, PYSNMP_MODULE_ID=alcatelIND1IPsecMIB, alaIPsecSecurityKeyTable=alaIPsecSecurityKeyTable, alcatelIND1IPsecMIBCompliances=alcatelIND1IPsecMIBCompliances, alaIPsecErrorsInPolicyViolation=alaIPsecErrorsInPolicyViolation, alaIPsecErrorsInNoSA=alaIPsecErrorsInNoSA, alaIPsecStatisticsInAHAuthenticationFail=alaIPsecStatisticsInAHAuthenticationFail, alaIPsecKeyType=alaIPsecKeyType, alaIPsecConfig=alaIPsecConfig, alaIPsecStatisticsInESPReplay=alaIPsecStatisticsInESPReplay, alaIPsecSecurityPolicyRuleProtocol=alaIPsecSecurityPolicyRuleProtocol, alaIPsecKeyRowStatus=alaIPsecKeyRowStatus, alaIPsecErrorsInOther=alaIPsecErrorsInOther, alaIPsecStatisticsInAHReplay=alaIPsecStatisticsInAHReplay, alaIPsecSAConfigOperationalState=alaIPsecSAConfigOperationalState, IPsecDescription=IPsecDescription, IPsecESPAlgorithm=IPsecESPAlgorithm, alaIPsecStatisticsInDiscarded=alaIPsecStatisticsInDiscarded, alaIPsecSAConfigSource=alaIPsecSAConfigSource, alaIPsecStatisticsInESPAuthenticationSuccess=alaIPsecStatisticsInESPAuthenticationSuccess, alaIPsecSecurityPolicyRuleRowStatus=alaIPsecSecurityPolicyRuleRowStatus, alaIPsecSecurityKeyID=alaIPsecSecurityKeyID, alaIPsecSecurityPolicySourcePrefixLength=alaIPsecSecurityPolicySourcePrefixLength, alaIPsecSecurityKeyCurrent=alaIPsecSecurityKeyCurrent, alaIPsecStatisticsInPolicyViolation=alaIPsecStatisticsInPolicyViolation, alcatelIND1IPsecMIBConformance=alcatelIND1IPsecMIBConformance, alaIPsecSAConfigAdminState=alaIPsecSAConfigAdminState, alaIPsecSAConfigEntry=alaIPsecSAConfigEntry, alaIPsecErrorsOutOther=alaIPsecErrorsOutOther, alaIPsecStatisticsOutSuccessful=alaIPsecStatisticsOutSuccessful, alcatelIND1IPsecMIBObjects=alcatelIND1IPsecMIBObjects, alaIPsecSecurityPolicyTable=alaIPsecSecurityPolicyTable, alaIPsecSAConfigGroup=alaIPsecSAConfigGroup, alaIPsecSAConfigID=alaIPsecSAConfigID, alaIPsecSecurityPolicyDirection=alaIPsecSecurityPolicyDirection, alaIPsecStatisticsInNoMemory=alaIPsecStatisticsInNoMemory, alaIPsecStatisticsOutNoMemory=alaIPsecStatisticsOutNoMemory, alaIPsecSAConfigRowStatus=alaIPsecSAConfigRowStatus, alaIPsecSecurityPolicyOperationalState=alaIPsecSecurityPolicyOperationalState, alaIPsecSecurityPolicyRuleIndex=alaIPsecSecurityPolicyRuleIndex, alaIPsecSecurityPolicyICMPv6Type=alaIPsecSecurityPolicyICMPv6Type, alaIPsecSecurityPolicyID=alaIPsecSecurityPolicyID, alaIPsecSecurityPolicyDestination=alaIPsecSecurityPolicyDestination, IPsecPortNumber=IPsecPortNumber, IPsecSAType=IPsecSAType, alaIPsecStatisticsInBadPacket=alaIPsecStatisticsInBadPacket, alaIPsecStatisticsTable=alaIPsecStatisticsTable, alaIPsecSecurityPolicyPriority=alaIPsecSecurityPolicyPriority, alaIPsecErrorsInDiscarded=alaIPsecErrorsInDiscarded, alaIPsecStatisticsInUnknownSPI=alaIPsecStatisticsInUnknownSPI, alaIPsecSecurityPolicyRuleEntry=alaIPsecSecurityPolicyRuleEntry, alaIPsecKey=alaIPsecKey, IPsecAdminState=IPsecAdminState, alaIPsecConfigGroup=alaIPsecConfigGroup, alaIPsecSecurityKeyEntry=alaIPsecSecurityKeyEntry)
