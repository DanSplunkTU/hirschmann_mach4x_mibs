#
# PySNMP MIB module DOCS-DRF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-DRF-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 19:25:46 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
docsIfDownstreamChannelEntry, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfDownstreamChannelEntry")
PhysicalIndex, PhysicalIndexOrZero = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "PhysicalIndexOrZero")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Counter32, TimeTicks, IpAddress, ObjectIdentity, iso, ModuleIdentity, Integer32, Unsigned32, Bits, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "TimeTicks", "IpAddress", "ObjectIdentity", "iso", "ModuleIdentity", "Integer32", "Unsigned32", "Bits", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, AutonomousType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "AutonomousType", "TruthValue")
docsDrfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23))
docsDrfMib.setRevisions(('2007-12-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsDrfMib.setRevisionsDescriptions(('Initial version,  published as as part of the CableLabs \n            MOSSI specification CM-SP-M-OSSI-I07-YYMMDD via ECN\n            M-OSSI-R-07.0562-x',))
if mibBuilder.loadTexts: docsDrfMib.setLastUpdated('200712060000Z')
if mibBuilder.loadTexts: docsDrfMib.setOrganization('Cable Television Laboratories, Inc')
if mibBuilder.loadTexts: docsDrfMib.setContactInfo('Postal: Cable Television Laboratories, Inc. \n            858 Coal Creek Circle \n            Louisville, Colorado 80027-9750 \n            U.S.A. \n            Phone: +1 303-661-9100 \n            Fax:   +1 303-661-9199 \n            E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsDrfMib.setDescription('This MIB module contains the management objects for the \n            management of the Downstream RF Interface specification.\n            Copyright 1999-2007 Cable Television Laboratories, Inc.\n            All rights reserved.')
docsDrfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 0))
docsDrfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1))
docsDrfRegistry = ObjectIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 1))
if mibBuilder.loadTexts: docsDrfRegistry.setStatus('current')
if mibBuilder.loadTexts: docsDrfRegistry.setDescription('Registration point for M-CMTS characterization of PHY \n            parameters dependencies.')
docsDrfPhyParamFixValue = ObjectIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 1, 1))
if mibBuilder.loadTexts: docsDrfPhyParamFixValue.setStatus('current')
if mibBuilder.loadTexts: docsDrfPhyParamFixValue.setDescription('Indicates that this PHY parameter is fixed and cannot\n            be changed.')
docsDrfPhyParamSameValue = ObjectIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 1, 2))
if mibBuilder.loadTexts: docsDrfPhyParamSameValue.setStatus('current')
if mibBuilder.loadTexts: docsDrfPhyParamSameValue.setDescription('Indicates that the PHY parameter value is the same for\n            the elements in a dependency group; thus, a change in \n            the PHY parameter of an element in the group will change\n            the PHY parameter value in the other elements of the\n            dependency group.')
docsDrfPhyParamAdjacentValues = ObjectIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 1, 3))
if mibBuilder.loadTexts: docsDrfPhyParamAdjacentValues.setStatus('current')
if mibBuilder.loadTexts: docsDrfPhyParamAdjacentValues.setDescription('Indicates that the PHY parameter has an adjacency or\n            sequence pattern for the elements in a dependency group\n            e.g., A group of channels all using J.83 Annex A, may set \n            frequencies in the group by setting a 6 MHz spacing \n            between the channels in the group. Vendors may rather\n            use a more detailed vendor-specific OBJECT-IDENTITY or a\n            table pointer to describe this type of PHY parameter \n            dependency.')
docsDrfPhyParamFrequencyRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 1, 4))
if mibBuilder.loadTexts: docsDrfPhyParamFrequencyRange.setStatus('current')
if mibBuilder.loadTexts: docsDrfPhyParamFrequencyRange.setDescription('This object indicates that the frequency in a TSID Group\n            is constrained to a frequency range. Vendors may extend\n            the MIB construct containing this reference to detail such \n            constraints or rather use a more detailed vendor-specific \n            OBJECT-IDENTITY or a table pointer to describe the \n            frequency range supported.')
docsDrfDownstreamTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 2), )
if mibBuilder.loadTexts: docsDrfDownstreamTable.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamTable.setDescription('Extensions for the DOCSIS RFI Downstream\n            docsIfDownstreamChannelTable.')
docsDrfDownstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 2, 1), )
docsIfDownstreamChannelEntry.registerAugmentions(("DOCS-DRF-MIB", "docsDrfDownstreamEntry"))
docsDrfDownstreamEntry.setIndexNames(*docsIfDownstreamChannelEntry.getIndexNames())
if mibBuilder.loadTexts: docsDrfDownstreamEntry.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamEntry.setDescription('A conceptual row for this table.\n            There is a corresponding entry for each entry of \n            docsIfDownstreamChannelTable.')
docsDrfDownstreamPhyDependencies = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("frequency", 0), ("bandwidth", 1), ("power", 2), ("modulation", 3), ("interleaver", 4), ("j83Annex", 5), ("symbolRate", 6), ("mute", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamPhyDependencies.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamPhyDependencies.setDescription("The summary of the Downstream Interface \n            dependencies based on the constraints of \n            docsDrfGroupDependencyEntry.\n            A BIT position set to '1' indicates the PHY parameter\n            belongs to a dependency group.\n            A BIT position set to '0', indicates the PHY parameter\n            does not belong to a dependency group.\n            \n            For Interfaces configured via DEPI this information is \n            reflected in the DEPI session as DEPI TSID group \n            dependencies. \n                    \n            If this object value is the zero-length string, it indicates \n            this interface is configurable via DEPI but no session is\n            currently active.")
docsDrfDownstreamCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3), )
if mibBuilder.loadTexts: docsDrfDownstreamCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabilitiesTable.setDescription('This table contains the QAM channel capabilities\n            for the Downstream Interface PHY parameters.')
docsDrfDownstreamCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsDrfDownstreamCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabilitiesEntry.setDescription('A conceptual row for this table.')
docsDrfDownstreamCapabFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("adjacentChannel", 1), ("adjacentChannelOrder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabFrequency.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabFrequency.setDescription("The QAM channel frequency capabilities. \n            'qamDependency' BIT set to '1' indicates the QAM channel\n            frequency value has dependencies with other QAM channels \n            and an entry that includes this QAM channel is in \n            in docsDrfGroupDependencyTable for the PHY \n            parameter 'frequency'.\n\n            'adjacentChannel' BIT set to '1' indicates the QAM channel\n            frequencies in the dependency group (DEPI TSID group) are \n            adjacent and constrained in a frequency range based on \n            the number of QAM channels in the dependency group.\n            \n            'adjacentChannelOrder' BIT set to '1' indicates the QAM \n            channel frequency adjacency is based in the QAM channel \n            sequence like entPhysicalParentRelPos in EntPhysicalTable\n            or other vendor sequence.\n            \n            e.g., a dependency group of four QAM channels \n            with 'adjacentChannelOrder' BIT set to '1':\n            The 4th QAM channel in the sequence gets a frequency\n            assignment f + 1*bandwidth when the frequency value of \n            the 3rd QAM channel in the sequence is set to f. \n            Similarly the 1st QAM channel in the sequence gets a \n            frequency assignment of f - 2*bandwidth and the 2nd QAM \n            channels gets a frequency of f -1*bandwidth.\n\n            'adjacentChannel' 'adjacentChannelOrder' BITs may be set to\n            '1' when a dependency group includes the QAM channel\n            of this M-CMTS Downstream interface and the value of the \n            object docsDrfGroupDependencyType is \n            docsDrfPhyParamAdjacentValues.\n            \n            'adjacentChannel' BIT may be set to '1' if \n            'qamDependency' BIT is set to '1'. The same way, \n            'adjacentChannelOrder' BIT may be set to '1' and implies\n            'adjacentChannel' BIT is set to '1'.")
docsDrfDownstreamCapabBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("chan6Mhz", 1), ("chan8Mhz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabBandwidth.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabBandwidth.setDescription("The QAM channel Bandwidth capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            bandwidth value has dependencies with other QAM channels \n            as indicated in docsDrfGroupDependencyTable.\n\n            'chan6Mhz' set to '1' indicates 6 MHz channel width \n            support.\n            'chan8Mhz' set to '1' indicates 8 MHz channel width \n            support.\n            \n            When 'qamDependency' BIT is set to '1', a set to the \n            channel bandwidth PHY parameter of a QAM channels in a\n            dependency group (with docsDrfGroupDependencyType\n            set to docsDrfPhyParamSameValue), sets the same channel \n            bandwidth  value to all QAM channels in the dependency\n            group.")
docsDrfDownstreamCapabPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("qamDependency", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabPower.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabPower.setDescription("The QAM channel Power capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            power value has dependencies with other QAM channels \n            as indicated in docsDrfGroupDependencyTable.\n\n            When 'qamDependency' BIT is set to '1', a set to the \n            power level PHY parameter of a QAM channels in a\n            dependency group (with docsDrfGroupDependencyType\n            set to docsDrfPhyParamSameValue), sets the same power \n            level to all QAM channels in the dependency group.")
docsDrfDownstreamCapabModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 4), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("qam64", 1), ("qam256", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabModulation.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabModulation.setDescription("The QAM channel Modulation capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            modulation value has dependencies with other QAM channels\n            as indicated in docsDrfGroupDependencyTable.\n            \n            'qam64' set to '1' indicates 64 QAM modulation support.\n            'qam256' set to '1' indicates 256 QAM modulation support.\n\n            When 'qamDependency' BIT is set to '1', a set to the \n            modulation PHY parameter of a QAM channels in a \n            dependency group (with docsDrfGroupDependencyType\n            set to docsDrfPhyParamSameValue), sets the same modulation \n            type to all QAM channels in the dependency group.")
docsDrfDownstreamCapabInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 5), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("taps8Increment16", 1), ("taps16Increment8", 2), ("taps32Increment4", 3), ("taps64Increment2", 4), ("taps128Increment1", 5), ("taps12increment17", 6), ("taps128increment2", 7), ("taps128increment3", 8), ("taps128increment4", 9), ("taps128increment5", 10), ("taps128increment6", 11), ("taps128increment7", 12), ("taps128increment8", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabInterleaver.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabInterleaver.setDescription("The QAM channel Interleaver capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            interleave value has dependencies with other QAM channels\n            as indicated in docsDrfGroupDependencyTable.\n            \n             'taps8Increment16'  set to '1' indicates the support of\n                                 j = 8, i = 16 interleave.\n \n             'taps16Increment8'  set to '1' indicates the support of\n                                 j = 16, i = 8 interleave.\n \n             'taps32Increment4'  set to '1' indicates the support of\n                                 j = 32, i = 4 interleave.\n \n             'taps64Increment2'  set to '1' indicates the support of\n                                 j = 64, i = 2 interleave.\n \n             'taps128Increment1' set to '1' indicates the support of\n                                 j = 128, i = 1 interleave.\n \n             'taps12increment17' set to '1' indicates the support of\n                                 j = 12, i = 17 interleave.\n \n             'taps128increment2' set to '1' indicates the support of\n                                 j = 128, i = 2 interleave.\n \n             'taps128increment3' set to '1' indicates the support of\n                                 j = 128, i = 3 interleave.\n \n             'taps128increment4' set to '1' indicates the support of\n                                 j = 128, i = 4 interleave.\n \n             'taps128increment5' set to '1' indicates the support of\n                                 j = 128, i = 5 interleave.\n \n             'taps128increment6' set to '1' indicates the support of\n                                 j = 128, i = 6 interleave.\n \n             'taps128increment7' set to '1' indicates the support of\n                                 j = 128, i = 7 interleave.\n \n             'taps128increment8' set to '1' indicates the support of\n                                 j = 128, i = 8 interleave.\n\n            When 'qamDependency' BIT is set to '1', a set to the \n            interleave PHY parameter of a QAM channels in a\n            dependency group (with docsDrfGroupDependencyType\n            set to docsDrfPhyParamSameValue), sets the same Interleave \n            value to all QAM channels in the dependency group.")
docsDrfDownstreamCapabJ83Annex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 6), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("annexA", 1), ("annexB", 2), ("annexC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabJ83Annex.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabJ83Annex.setDescription("The QAM channel J.83 Annex Capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            J.83 Annex value has dependencies with other QAM channels\n            as indicated in docsDrfGroupDependencyTable.\n\n            'annexA' set to '1' indicates J.83 Annex A support.\n            'annexB' set to '1' indicates J.83 Annex B support.\n            'annexC' set to '1' indicates J.83 Annex C support.\n            \n            When 'qamDependency' BIT is set to '1', a set to the \n            J.83 Annex PHY parameter of a QAM channels in a\n            dependency group (with docsDrfGroupDependencyType\n            set to docsDrfPhyParamSameValue), sets the same J.83 Annex\n            value to all QAM channels in the dependency group.")
docsDrfDownstreamCapabConcurrentServices = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 7), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("videoAndDocsis", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabConcurrentServices.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabConcurrentServices.setDescription("The QAM channel Concurrent Services Capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            is part of a dependency group that supports concurrent \n            services mode as indicated in \n            docsDrfGroupDependencyTable.\n\n            'videoAndDocsis' BIT set to '1' indicates video transport\n            and DOCSIS transport can be supported simultaneously.\n\n            Video and DOCSIS transport service types are described in\n            docsDrfDownstreamCapabServicesTransport.")
docsDrfDownstreamCapabServicesTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 8), Bits().clone(namedValues=NamedValues(("qamDependency", 0), ("mpeg2OverIP", 1), ("dmpt", 2), ("psp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabServicesTransport.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabServicesTransport.setDescription("The QAM channel Services transports modes Capabilities.\n\n            'qamDependency' BIT set to '1' indicates the QAM channel\n            Service transport type has dependencies with other QAM \n            channels as indicated in \n            docsDrfGroupDependencyTable.\n\n            'mpeg2OverIP' set to '1' indicates video transports as \n            conventional VoD is supported (known as MPT mode, MPEG-2\n            transport).\n            'dmpt' set to 1 indicates DOCSIS MPT mode (D-MPT) support.\n            'psp' set to 1 indicates DOCSIS Packet Streaming Protocol\n            mode (PSP) support.\n\n            When 'qamDependency' BIT is set to '1', a request to set\n            a QAM channel to a service type in a dependency group \n            (with docsDrfGroupDependencyType set to \n            docsDrfPhyParamSameValue) may be rejected.")
docsDrfDownstreamCapabMuting = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("qamDependency", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfDownstreamCapabMuting.setStatus('current')
if mibBuilder.loadTexts: docsDrfDownstreamCapabMuting.setDescription("The QAM channel muting capabilities.\n            'qamDependency' BIT set to '1' indicates the QAM Mute\n            state has dependencies with other QAM channels as \n            indicated in docsDrfGroupDependencyTable.\n\n            When 'qamDependency' BIT is set to '1', a request to \n            mute a QAM channels in a dependency group (with \n            docsDrfGroupDependencyType set to \n            docsDrfPhyParamSameValue), sets all QAM channels in the \n            dependency group to mute.")
docsDrfGroupDependencyTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4), )
if mibBuilder.loadTexts: docsDrfGroupDependencyTable.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyTable.setDescription("This table describes the rules that identify groups of \n            QAM channels with PHY parameters dependencies. \n            A PHY parameter dependency group means that a set to \n            a QAM channel parameter may affect the value of \n            other QAM Channels in the group.\n\n            TSID is a broadcast term borrowed by the M-CMTS \n            architecture to represent a unique identifier of QAM\n            channels in the M-CMTS architecture. \n            \n            TSID Group is the DEPI concept of a set of QAM channels\n            with a PHY parameter dependency. This module refers to \n            TSID group as a PHY dependency Group.\n            \n            This table uses the ENTITY-MIB physical component structure\n            to allows the managed system to describe the QAM channels'\n            PHY parameters dependencies. A management entity can use\n            the information from this table to generate the DEPI TSID\n            Groups.\n            \n            Examples of PHY dependencies could be usage of adjacent\n            frequencies, or QAM channels of RF ports restricted, or \n            same interleaver value, modulation and J.83 Annex value.\n            \n            Additional details and rules to describe the PHY parameter\n            dependency is indicated in \n            docsDrfGroupDependencyType.\n            Vendors may extend via other MIB modules the usage of\n            docsDrfGroupDependencyType.")
docsDrfGroupDependencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4, 1), ).setIndexNames((0, "DOCS-DRF-MIB", "docsDrfGroupDependencyPhyParam"), (0, "DOCS-DRF-MIB", "docsDrfGroupDependencyPhysicalIndex"))
if mibBuilder.loadTexts: docsDrfGroupDependencyEntry.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyEntry.setDescription("A conceptual row of this table.\n            \n            QAM channels are modeled as PhysicalClass 'port' from \n            the ENTITY-MIB.\n            An QAM channel can be represented as part of an entity \n            MIB containment tree as follows: \n            chassis(device)\n                  .container(Slot)\n                        .module(field-replaceable-module) \n                             .module ( Physical RF spigot)\n                                 . port (QAM channel) \n            \n            PhysicalClass 'stack' is left optional and not included \n            as a reference or examples for this table.\n            \n            Based on the hardware capabilities the Agent will create\n            entries in this table including the entPhysicalEntry of\n            the close element to the root (e.g., up to 'chassis' or \n            'stack') including the PHY parameter of the dependency \n            as part of the entry index\n            \n            The Aggregation is then defined as all the QAM channels\n            (entity PhysicalClass = 'port') below the tree as \n            indicated in entyPhysicalContainsTable.\n\n            Logical or software dependencies of the QAM channels PHY\n            parameters in addition to the hardware dependency entries\n            can be present and MUST persist during system\n            re-initialization. The storage realization of hardware \n            dependent entries are 'permanent' or 'readOnly'. The \n            storage realization of logical dependency entries is \n            'nonVolatile'.\n            \n            PHY parameter dependencies that are logically defined may\n            be present in this table but its configuration is outside \n            of the scope of this MIB Module, including the definition \n            of simulated Physical components such backplane types or \n            modules accomplish its logical grouping.\n            \n            PHY parameters with no Physical entities associated in \n            this table indicate no PHY dependencies for certain groups\n            of QAM channels.\n            \n            Administrative changes to the \n            docsDrfGroupDependencyPhyParamLock are preserved in\n            non-volatile memory upon system re-initialization.\n            \n            Note that any change in the system due to the\n            insertion or removal or components will reset to factory\n            default the entries associated with those components.\n            \n            An entry in this table is reflected in the MIB object\n            docsIfMExtDownstreamTSIDGroupPhyParamFlag for individual\n            QAM channels.\n            \n            A recursive method to find the PHY dependency group of an\n            QAM channel A, PHY parameter X is as follows:\n            \n            The parent tree of QAM channel A is recursively calculated\n            by navigating entyPhysicalContainsTable from bottom to top\n            Pi(P1..Pn)\n            \n            The list Mj (M1..Mn) of \n            docsDrfGroupDependencyPhysicalIndex represents the \n            values from this table with PHY parameter \n            docsDrfGroupDependencyPhyParam X and/or 'all' \n            \n            The list Qi (Q1..n) is the list of matches of Mi in Pi\n\n            Qi with the lower position in the entyPhysicalContainsTable\n            is selected Qy and My is the group criteria selected.\n            \n            All QAM channels Bi below My are candidates for inclusion\n            in the dependency group.\n\n            Each Bi is verified as A for its own BPi parent tree to\n            verify that in effect My is the lowest denominator in Mi \n            BPi intersection to become part of the Dependency Group \n            of A.")
docsDrfGroupDependencyPhyParam = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noDependencies", 0), ("all", 1), ("frequency", 2), ("bandwidth", 3), ("power", 4), ("modulation", 5), ("interleave", 6), ("annex", 7), ("symbolRate", 8), ("mute", 9))))
if mibBuilder.loadTexts: docsDrfGroupDependencyPhyParam.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyPhyParam.setDescription("This object represents the type of PHY parameter \n            that may have dependencies when setting an individual \n            object in the dependency group.\n            The value 'all' may be used as a wildcard to indicate\n            all PHY parameters have dependencies. The other \n            enumeration values are common QAM PHY parameters.\n            \n            The opposite to 'all' is 'noDependencies', which indicates\n            no dependencies in PHY parameters, but is only used to \n            indicate no dependencies across all the device. Thus,\n            when used, 'noDependencies' is accompanied by \n            docsDrfGroupDependencyPhysicalIndex '0' as the only\n            entry in the table. \n            In this way it is clearly distinguished when a device\n            has dependencies instead of an empty table.")
docsDrfGroupDependencyPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4, 1, 2), PhysicalIndexOrZero())
if mibBuilder.loadTexts: docsDrfGroupDependencyPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyPhysicalIndex.setDescription('Indicates the physical element from where the PHY \n            parameter dependency for QAM channels is derived.\n            All the QAM channels elements under this Physical index\n            will belong to a dependency group of the specified PHY \n            parameter.')
docsDrfGroupDependencyGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfGroupDependencyGroupID.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyGroupID.setDescription('The internal ID assigned for the QAM channels in the \n            dependency group. \n            The value of this object is unique in the scope of the\n            PHY parameter being mapped.')
docsDrfGroupDependencyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 4, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfGroupDependencyType.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroupDependencyType.setDescription('The description of the type of dependency associated \n            with this dependency group.\n            Basic type of dependencies are docsDrfPhyParamSameValue, \n            docsDrfPhyParamAdjacentValues, docsDrfPhyParamFrequencyRange. \n            Vendors may define their own rules and policies to describe\n            their implementation dependency definitions such as\n            RowPointers to table entries or OBJECT-IDENTITY clauses.\n            If the dependency is not described this object is set to\n            zeroDotZero, although the dependency does exist.')
docsDrfChannelBlockTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5), )
if mibBuilder.loadTexts: docsDrfChannelBlockTable.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockTable.setDescription("This table configure attributes of block channels and\n             Controls channel Block Tests.\n            A channel block is an ENTITY-MIB containment of \n            PhysicalClass 'module' that represent an RF connector.")
docsDrfChannelBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1), ).setIndexNames((0, "DOCS-DRF-MIB", "docsDrfChannelBlockPhysicalIndex"))
if mibBuilder.loadTexts: docsDrfChannelBlockEntry.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockEntry.setDescription('The conceptual row of this table. \n            Entries in this table are created at system \n            Initialization for Block Channels compliant to DRFI \n            Specification.\n            Sets in entries of this table persist after system\n            initialization.')
docsDrfChannelBlockPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: docsDrfChannelBlockPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockPhysicalIndex.setDescription('The Physical Index of the QAM Channel Block.')
docsDrfChannelBlockNumberChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfChannelBlockNumberChannels.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockNumberChannels.setDescription('The Number of QAM Channels N associated with this entry.\n             \n            The value of this attribute corresponds to the number\n            of channels that can be transmitted from this block')
docsDrfChannelBlockCfgNumberChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDrfChannelBlockCfgNumberChannels.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockCfgNumberChannels.setDescription("The Number of QAM Channels N' to configure for the \n            QAM block. \n            \n            This number corresponds to the number of channels that\n            are configured to be currently transmitted by the block.\n            \n            The maximum number of channels per block follows the \n            consideration of maximum number of digital channels in \n            a headend described in the DRFI specification.\n            As a rule N' is valid if it is less than or equal to N. \n            In addition N minimal requirements consist of even \n            numbers and 1 (one QAM channel per Block Channel). Odd \n            number of QAM channels per Block Channel are optional \n            for implementation.\n            A Set to an invalid value or not supported value returns\n            Error 'wrongValue'.")
docsDrfChannelBlockMute = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDrfChannelBlockMute.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockMute.setDescription("The Mute control object for the Block Channel\n            A set to this object to 'true' is reflected in \n            ifOperStatus set to 'down' of the QAM channels \n            associated to the block Channel.\n            The opposite, a set to this object to 'false', is not \n            necessarily reflected as ifOperStatus set to 'up' since\n            other interface conditions might prevent such status.")
docsDrfChannelBlockTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noTest", 1), ("offOthersNormal", 2), ("allOff", 3), ("onOthersOff", 4), ("cwOnOthersOff", 5), ("cwOnOthersNormal", 6), ("clockTest", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsDrfChannelBlockTestType.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockTestType.setDescription("A set of in-service and out-of-service test modes.\n             The value 'noTest'(1) is the normal condition after\n             reinitialization where the QAM channels are expected in\n             operation.\n\n             'noTest' \n             It is also used to take out of testing mode\n             a QAM channel within the block.\n             \n             In-service tests modes:\n             'offOthersNormal'\n             It is the condition where the QAM Channel indicated in\n             docsDrfChannelBlockTestIfIndex has its carrier \n             suppressed and the other channels in the \n             Block Channel are operational.\n             'allOff'\n             All QAM channel carriers in the channel block are\n             Suppressed. \n             'onOthersOff'\n             It is the condition where the QAM channel indicated in\n             docsDrfChannelBlockTestIfIndex is in operation\n             and the other QAM channels in the channel Block have\n             their carriers suppressed.\n\n             Out-of-service test modes:\n             'cwOnOthersOff'\n             It is the condition where the QAM channel indicated in \n             docsDrfChannelBlockTestIfIndex transmits a \n             continuous wave (CW) while the other QAM \n             channels in the channel Block have their carriers \n             suppressed.\n             'cwOnOthersNormal'\n             It is the condition where the QAM channel indicated\n             in docsDrfChannelBlockTestIfIndex transmits a \n             continuous wave (CW) while the other QAM channels in\n             the channel Block are operational.\n              \n             'clockTest'\n             It is the condition where the QAM channel indicated in\n             docsDrfChannelBlockTestIfIndex transmits a sequence \n             of alternating -1 and 1 symbols.\n\n             This object value does not persist after system \n             Reinitialization.\n             The value of this object is meaningless if \n             docsDrfChannelBlockTestIfIndex is set to zero.")
docsDrfChannelBlockTestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 1, 5, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDrfChannelBlockTestIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsDrfChannelBlockTestIfIndex.setDescription("The ifIndex of the QAM channel to perform the QAM\n             channel test.\n             A Set to a value that does not correspond to a QAM \n             Channel within the Block channel returns error \n             'wrongValue'.\n             A set to zero stops a current test execution.")
docsDrfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2))
docsDrfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 1))
docsDrfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 2))
docsDrfDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 1, 1)).setObjects(("DOCS-DRF-MIB", "docsDrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDrfDeviceCompliance = docsDrfDeviceCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDrfDeviceCompliance.setDescription('The compliance statement DOCSIS DRFI compliant \n            devices.')
docsDrfCmtsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 1, 2)).setObjects(("DOCS-DRF-MIB", "docsDrfGroup"), ("DOCS-DRF-MIB", "docsDrfCmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDrfCmtsCompliance = docsDrfCmtsCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDrfCmtsCompliance.setDescription('The compliance statement for CMTS compliant \n            devices.')
docsDrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 2, 1)).setObjects(("DOCS-DRF-MIB", "docsDrfDownstreamCapabFrequency"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabBandwidth"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabPower"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabModulation"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabInterleaver"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabJ83Annex"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabConcurrentServices"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabServicesTransport"), ("DOCS-DRF-MIB", "docsDrfDownstreamCapabMuting"), ("DOCS-DRF-MIB", "docsDrfGroupDependencyGroupID"), ("DOCS-DRF-MIB", "docsDrfGroupDependencyType"), ("DOCS-DRF-MIB", "docsDrfChannelBlockNumberChannels"), ("DOCS-DRF-MIB", "docsDrfChannelBlockCfgNumberChannels"), ("DOCS-DRF-MIB", "docsDrfChannelBlockMute"), ("DOCS-DRF-MIB", "docsDrfChannelBlockTestType"), ("DOCS-DRF-MIB", "docsDrfChannelBlockTestIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDrfGroup = docsDrfGroup.setStatus('current')
if mibBuilder.loadTexts: docsDrfGroup.setDescription('Group of objects implemented in M-CMTS compliant devices.')
docsDrfCmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 23, 2, 2, 2)).setObjects(("DOCS-DRF-MIB", "docsDrfDownstreamPhyDependencies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDrfCmtsGroup = docsDrfCmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsDrfCmtsGroup.setDescription('Group of objects speficic for CMTS.')
mibBuilder.exportSymbols("DOCS-DRF-MIB", docsDrfDownstreamEntry=docsDrfDownstreamEntry, docsDrfDownstreamCapabConcurrentServices=docsDrfDownstreamCapabConcurrentServices, docsDrfDownstreamCapabServicesTransport=docsDrfDownstreamCapabServicesTransport, docsDrfPhyParamAdjacentValues=docsDrfPhyParamAdjacentValues, docsDrfMib=docsDrfMib, docsDrfDownstreamCapabFrequency=docsDrfDownstreamCapabFrequency, docsDrfCmtsGroup=docsDrfCmtsGroup, docsDrfGroupDependencyTable=docsDrfGroupDependencyTable, docsDrfObjects=docsDrfObjects, docsDrfChannelBlockMute=docsDrfChannelBlockMute, docsDrfChannelBlockNumberChannels=docsDrfChannelBlockNumberChannels, docsDrfChannelBlockTestType=docsDrfChannelBlockTestType, docsDrfGroupDependencyGroupID=docsDrfGroupDependencyGroupID, docsDrfChannelBlockTestIfIndex=docsDrfChannelBlockTestIfIndex, docsDrfDownstreamCapabJ83Annex=docsDrfDownstreamCapabJ83Annex, docsDrfGroupDependencyEntry=docsDrfGroupDependencyEntry, docsDrfGroup=docsDrfGroup, docsDrfDownstreamCapabilitiesEntry=docsDrfDownstreamCapabilitiesEntry, docsDrfNotifications=docsDrfNotifications, docsDrfDownstreamPhyDependencies=docsDrfDownstreamPhyDependencies, docsDrfDownstreamCapabModulation=docsDrfDownstreamCapabModulation, docsDrfChannelBlockEntry=docsDrfChannelBlockEntry, docsDrfPhyParamSameValue=docsDrfPhyParamSameValue, docsDrfChannelBlockPhysicalIndex=docsDrfChannelBlockPhysicalIndex, docsDrfPhyParamFrequencyRange=docsDrfPhyParamFrequencyRange, docsDrfGroupDependencyPhysicalIndex=docsDrfGroupDependencyPhysicalIndex, docsDrfChannelBlockCfgNumberChannels=docsDrfChannelBlockCfgNumberChannels, docsDrfGroupDependencyPhyParam=docsDrfGroupDependencyPhyParam, docsDrfCmtsCompliance=docsDrfCmtsCompliance, docsDrfDeviceCompliance=docsDrfDeviceCompliance, PYSNMP_MODULE_ID=docsDrfMib, docsDrfDownstreamTable=docsDrfDownstreamTable, docsDrfRegistry=docsDrfRegistry, docsDrfDownstreamCapabilitiesTable=docsDrfDownstreamCapabilitiesTable, docsDrfConformance=docsDrfConformance, docsDrfCompliances=docsDrfCompliances, docsDrfDownstreamCapabInterleaver=docsDrfDownstreamCapabInterleaver, docsDrfGroupDependencyType=docsDrfGroupDependencyType, docsDrfDownstreamCapabBandwidth=docsDrfDownstreamCapabBandwidth, docsDrfDownstreamCapabMuting=docsDrfDownstreamCapabMuting, docsDrfChannelBlockTable=docsDrfChannelBlockTable, docsDrfPhyParamFixValue=docsDrfPhyParamFixValue, docsDrfGroups=docsDrfGroups, docsDrfDownstreamCapabPower=docsDrfDownstreamCapabPower)
