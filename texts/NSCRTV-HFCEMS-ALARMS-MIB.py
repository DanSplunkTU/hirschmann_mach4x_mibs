#
# PySNMP MIB module NSCRTV-HFCEMS-ALARMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-HFCEMS-ALARMS-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 17:58:10 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
commonNELogicalID, commonPhysAddress = mibBuilder.importSymbols("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID", "commonPhysAddress")
alarmsIdent, nscrtvHFCemsTree = mibBuilder.importSymbols("NSCRTV-ROOT", "alarmsIdent", "nscrtvHFCemsTree")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Unsigned32, Integer32, ObjectIdentity, NotificationType, NotificationType, MibIdentifier, IpAddress, Gauge32, Bits, Counter32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Unsigned32", "Integer32", "ObjectIdentity", "NotificationType", "NotificationType", "MibIdentifier", "IpAddress", "Gauge32", "Bits", "Counter32", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alarmLogNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogNumberOfEntries.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogNumberOfEntries.setDescription('澯¼еļ¼')
alarmLogLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogLastIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogLastIndex.setDescription('һ澯¼ֵ')
alarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3), )
if mibBuilder.loadTexts: alarmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogTable.setDescription('澯¼֧16¼ÿڱеǼһµļ¼ʱ\n        ӦӦ߷Ϣ')
alarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-ALARMS-MIB", "alarmLogIndex"))
if mibBuilder.loadTexts: alarmLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogEntry.setDescription('澯¼Ŀ')
alarmLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogIndex.setDescription('Ψһʶ澯¼еһ¼ֵ1ʼÿ¼¼ʱ1\n        ֱ32767һ¼ֵ´1ʼɸݴ洢ѡɾ\n        Щ¼ʵϸڴ˲涨')
alarmLogInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLogInformation.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLogInformation.setDescription('澯¼Ϣֽڴ£\n        ֽ 14: 澯ʱ(POSIXʽЧֽǰ)\n        ֽ 5: 澯(ö٣)\n        ֽ 6: 澯commonNeStatusֵ\n        ֽ 7m: 澯Ķʶ(ASN.1)\n        ֽ nz: 澯ֵ (ASN.1)\n        澯öͣ\n        1 NOMINAL\n        2 HIHI\n        3 HI\n        4 LO\n        5 LOLO\n        6 Discrete Major\n        7 Discrete Minor ')
alarmText = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 2, 4), DisplayString())
if mibBuilder.loadTexts: alarmText.setStatus('optional')
if mibBuilder.loadTexts: alarmText.setDescription('˶ҪϢаһıϢֶεӦӦʵֵġ\n        ֶаıȡڸ澯Ķ壬ǲȷģ\n        涨˶ܷʡ')
hfcAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,1)).setObjects(("NSCRTV-HFCEMS-COMMON-MIB", "commonPhysAddress"), ("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID"), ("NSCRTV-HFCEMS-ALARMS-MIB", "alarmLogInformation"), ("NSCRTV-HFCEMS-ALARMS-MIB", "alarmText"))
if mibBuilder.loadTexts: hfcAlarmEvent.setDescription('\u2d7d澯¼ʱʹϢǷalarmTextݸ澯ȷ\n        ĳЩĸ澯ֻҪǰ')
mibBuilder.exportSymbols("NSCRTV-HFCEMS-ALARMS-MIB", alarmLogIndex=alarmLogIndex, alarmLogLastIndex=alarmLogLastIndex, alarmText=alarmText, hfcAlarmEvent=hfcAlarmEvent, alarmLogInformation=alarmLogInformation, alarmLogNumberOfEntries=alarmLogNumberOfEntries, alarmLogTable=alarmLogTable, alarmLogEntry=alarmLogEntry)
