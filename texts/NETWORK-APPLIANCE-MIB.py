#
# PySNMP MIB module NETWORK-APPLIANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netapp/NETWORK-APPLIANCE-MIB
# Produced by pysmi-1.1.8 at Tue Feb  1 21:09:05 2022
# On host fv-az121-510 platform Linux version 5.11.0-1027-azure by user runner
# Using Python version 3.10.2 (main, Jan 16 2022, 11:55:27) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, NotificationType, Counter32, Integer32, Unsigned32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, enterprises, TimeTicks, Bits, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "NotificationType", "Counter32", "Integer32", "Unsigned32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "enterprises", "TimeTicks", "Bits", "NotificationType", "Gauge32")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eisa-based", 1), ("pci-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('mandatory')
if mibBuilder.loadTexts: productType.setDescription('The product type representing the target platform.')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('mandatory')
if mibBuilder.loadTexts: productVersion.setDescription('Version String for the Software Running on\n\t\t\t this platform.')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('mandatory')
if mibBuilder.loadTexts: productId.setDescription('The System ID of this system.')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("dell", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVendor.setStatus('mandatory')
if mibBuilder.loadTexts: productVendor.setDescription('The vendor id of this system, indicating the company\n\t\t\tthat has supplied the product.')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('mandatory')
if mibBuilder.loadTexts: productModel.setDescription('The model name of the system.  Examples\n\t\t\t are FAS980 and FAS3050.')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: productFirmwareVersion.setDescription('Version string for the Firmware running on\n\t\t\t this platform.')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productGuiUrl.setStatus('mandatory')
if mibBuilder.loadTexts: productGuiUrl.setDescription('The complete URL used to access the administrative GUI\n\t\t\t for a browser-based interface.')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productApiUrl.setStatus('mandatory')
if mibBuilder.loadTexts: productApiUrl.setDescription('The complete URL used to access the administrative API\n\t\t\t for a programmatic interface.')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: productSerialNum.setDescription('The product serial number. Returns unknown if it \n\t\t\t   cannot be determined.')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartnerSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: productPartnerSerialNum.setDescription("The partner's serial number, not applicable\n\t\t\t\t   if there is no partner, and unknown if it\n\t\t\t\t   cannot be determined.")
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x86", 1), ("alpha", 2), ("mips", 3), ("sparc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productCPUArch.setStatus('mandatory')
if mibBuilder.loadTexts: productCPUArch.setDescription('The CPU architecture type of this appliance')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTrapData.setStatus('mandatory')
if mibBuilder.loadTexts: productTrapData.setDescription('This returns a static string. This object is used\n\t\t\tas a placeholder for enterprise traps.')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMachineType.setStatus('mandatory')
if mibBuilder.loadTexts: productMachineType.setDescription('The machine type of the system.  Examples\n\t\t\t are FAS980 and FAS3050.')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpuUpTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been up since the last boot.')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpuBusyTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been doing useful work since the last\n\t\t\t boot.')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTimePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: cpuBusyTimePerCent.setDescription('The percent of time that the CPU has been doing\n\t\t\t useful work since the last time a client requested\n\t\t\t the cpuBusyTimePerCent.')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpuIdleTime.setDescription('The time (in hundredths of a second) that the\n\t\t\t CPU has been idle since the last boot.')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTimePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: cpuIdleTimePerCent.setDescription('The percent of time that the CPU has been idle\n\t\t\t since the last time a client requested the\n\t\t\t cpuBusyTimePerCent.')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCount.setStatus('mandatory')
if mibBuilder.loadTexts: cpuCount.setDescription('The number of CPUs in the system.')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSwitchInvocations.setStatus('mandatory')
if mibBuilder.loadTexts: cpuSwitchInvocations.setDescription('The number of sk_switch invocations.')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuContextSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: cpuContextSwitches.setDescription('The number of hardware context switches.')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: cpuInterrupts.setDescription('The number of interrupts during a CP.')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: cpuNonCPInterrupts.setDescription('The number of interrupts not during a CP.')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCPInterruptPercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpuCPInterruptPercent.setDescription(' The percentage of time handling CP interrupts.')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setDescription(' The percentage of time handling non-cp interrupts.')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setDescription(' The total number of Domain Switches.')
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNfsOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetRcvdKB.setStatus('mandatory')
if mibBuilder.loadTexts: miscNetRcvdKB.setDescription('The total number of KBytes received on all the\n\t\t\t network interfaces, since the last boot.')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetSentKB.setStatus('mandatory')
if mibBuilder.loadTexts: miscNetSentKB.setDescription('The total number of KBytes transmitted on all the\n\t\t\t network interfaces, since the last boot.')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: miscGlobalStatus.setDescription('This indicates the overall status of the appliance.\n\t\t\tThe algorithm to determine the value uses both\n\t\t\thardware status (e.g. the number of failed fans) and\n\t\t\tvolume status (e.g. number of volumes that are full).\n\t\t\tThe algorithm is subject to change in future releases,\n\t\t\tbut the range of values will not change.')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNfsOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNfsOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowNfsOps.setDescription('The total number of Server side NFS calls since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighCifsOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighCifsOps.setDescription('The total number of Server side CIFS calls since\n\t\t\t the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowCifsOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowCifsOps.setDescription('The total number of Server side CIFS calls since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighHttpOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighHttpOps.setDescription('The total number of HTTP operations received\n\t\t\t since the last boot.  This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowHttpOps.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowHttpOps.setDescription('The total number of HTTP operations received\n\t\t\t since the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setDescription('The total number of bytes received on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the most significant 32 bits\n\t\t\t of the 64 bit unsigned integer.')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setDescription('The total number of bytes received on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the least significant 32 bits\n\t\t\t of the 64 bit unsigned integer.')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighNetSentBytes.setDescription('The total number of bytes transmitted on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the most significant 32 bits\n\t\t\t of the 64 bit unsigned integer.')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowNetSentBytes.setDescription('The total number of bytes transmitted on all the\n\t\t\t network interfaces, since the last boot.  This\n\t\t\t object returns the least significant 32 bits\n\t\t\t of the 64 bit unsigned integer.')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighDiskReadBytes.setDescription('The total number of bytes read from disk\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowDiskReadBytes.setDescription('The total number of bytes read from disk since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setDescription('The total number of bytes written to disk\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned\n\t\t\t integer.')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setDescription('The total number of bytes written to disk since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighTapeReadBytes.setDescription('The total number of bytes read from tape\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowTapeReadBytes.setDescription('The total number of bytes read from tape since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setDescription('The total number of bytes written to tape\n\t\t\t since the last boot.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setDescription('The total number of bytes written to tape since\n\t\t\t the last boot.  This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: miscCacheAge.setDescription("Age in minutes of the oldest read-only blocks\n\t\t\t in the buffer cache.  This indicates how fast\n\t\t\t read operations are cycling through system\n\t\t\t memory; when the appliance is reading very\n\t\t\t large files (larger than the machine's memory\n\t\t\t size), buffer cache age will be very low.")
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setStatus('mandatory')
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setDescription('Number of corrected machine checks since\n\t\t\tthe last boot.')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: miscGlobalStatusMessage.setDescription('A string describing the global status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setDescription('The version number of Windows Setup Wizard \n\t\t\trequired to configure the appliance.  Windows\n\t\t\tSetup Wizard with a version number lower than \n\t\t\tthis integer is not capable of configuring the \n\t\t\tappliance.')
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSettings.setStatus('mandatory')
if mibBuilder.loadTexts: cfSettings.setDescription('Clustered Failover configuration settings.\n\t\t\t\t The value notConfigured(1) indicates that the\n\t\t\t\t cluster is not licensed. The thisNodeDead(5)\n\t\t\t\t setting indicates that this node has been \n\t\t\t\t taken over.')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfState.setStatus('mandatory')
if mibBuilder.loadTexts: cfState.setDescription('Clustered Failover state.')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCannotTakeoverCause.setStatus('mandatory')
if mibBuilder.loadTexts: cfCannotTakeoverCause.setDescription('The reason this node cannot takeover its\n\t\t\t\t partner')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cfPartnerStatus.setDescription('This is the status last returned by the\n\t\t\t\t Clustered Failover partner.')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setDescription('If non-zero, the absolute time of the last\n\t\t\t\t update from the Clustered Failover partner.')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerName.setStatus('mandatory')
if mibBuilder.loadTexts: cfPartnerName.setDescription('Hostname for Clustered Failover partner.')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerSysid.setStatus('mandatory')
if mibBuilder.loadTexts: cfPartnerSysid.setDescription('System ID for Clustered Failover partner.')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfInterconnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cfInterconnectStatus.setDescription('The current status of the interconnect.\n\t\t\t\t The partialFailure(3) status indicates that\n\t\t\t\t one of the links in the interconnect hardware\n\t\t\t\t is down.')
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: envOverTemperature.setDescription('An indication of whether the hardware is\n\t\t\t currently operating outside of its recommended\n\t\t\t temperature range.  The hardware will shutdown\n\t\t\t if the temperature exceeds critical thresholds.')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanCount.setStatus('mandatory')
if mibBuilder.loadTexts: envFailedFanCount.setDescription('Count of the number of chassis fans which\n\t\t\t are not operating within the recommended\n\t\t\t RPM range.')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanMessage.setStatus('mandatory')
if mibBuilder.loadTexts: envFailedFanMessage.setDescription('Text message describing the current condition of\n\t\t\t chassis fans.  This is useful only if\n\t\t\t envFailedFanCount is not zero.')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setDescription('Count of the number of power supplies which\n\t\t\t are in degraded mode.')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setStatus('mandatory')
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setDescription('Text message describing the state of any\n\t\t\t power supplies which are currently degraded.\n\t\t\t This is useful only if envFailedPowerSupplyCount\n\t\t\t is not zero.')
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvramBatteryStatus.setDescription("An indication of the current status of the\n\t\t\t NVRAM battery or batteries.  Batteries which\n\t\t\t are fully or partially discharged may not\n\t\t\t fully protect the system during a crash.\n\n\t\t\t The end-of-life status values are based on\n\t\t\t the manufacturer's recommended life for the\n\t\t\t batteries.")
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpTime.setDescription('The time (in hundredths of a second) since boot\n\t\t\t during which the system has had a consistency point\n\t\t\t (cp) operation in progress.')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromTimerOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromTimerOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by timer.')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSnapshotOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromSnapshotOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by snapshot operation.')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowWaterOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromLowWaterOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by low water mark.')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromHighWaterOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromHighWaterOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by high water mark.')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLogFullOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromLogFullOps.setDescription('The number of consistency point operations since boot\n\t\t\t that were caused by nv-log full.')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromCpOps.setDescription('The number of back to back consistency point \n\t\t\toperations since boot.')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotalOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpTotalOps.setDescription('The total number of consistency point operations\n\t\t\t since boot.')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromFlushOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromFlushOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by flushing unlogged write data.')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSyncOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromSyncOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by file system sync requests.')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowVbufOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromLowVbufOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by low virtual buffers.')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpDeferredOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromCpDeferredOps.setDescription('The number of back to back consistency point\n\t\t\toperations since boot that were deferred.')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setStatus('mandatory')
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setDescription('The number of consistency point operations since boot\n\t\t\tthat were caused by low datavecs.')
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("smtpFailure", 2), ("postFailure", 3), ("smtp-postFailure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: autosupportStatus.setDescription('An indication of the current status of\n\t\t\t autosupport on the appliance.  describes\n\t\t\t the success or failure of most recent \n\t\t\t attempts to send autosupports.')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: autosupportStatusMessage.setDescription('A string describing the autosupport status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(1).')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportSuccessfulSends.setStatus('mandatory')
if mibBuilder.loadTexts: autosupportSuccessfulSends.setDescription('Count of the number of autosupport messages\n\t\t\t successfully sent since the last reset.')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportFailedSends.setStatus('mandatory')
if mibBuilder.loadTexts: autosupportFailedSends.setDescription('Count of the number of autosupport messages\n\t\t\t not sent successfully since the last reset.')
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcCalls.setDescription('The total number of RPC calls received, since\n\t\t\t the last time the statistics were cleared.')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer, since the last time the statistics were\n\t\t\t cleared.')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcNullRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: rpcNullRecvs.setDescription('The number of times an RPC call was not available\n\t\t\t when it was thought to be received, since the\n\t\t\t last time the statistics were cleared.')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadLens.setStatus('mandatory')
if mibBuilder.loadTexts: rpcBadLens.setDescription('The number of RPC calls received with a length\n\t\t\t shorter than a minimum-sized RPC call, since the\n\t\t\t last time the statistics were cleared.')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcServXDRCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcServXDRCalls.setDescription('The number of RPC calls received whose header\n\t\t\t could not be XDR decoded, since the last time\n\t\t\t the statistics were cleared.')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rcpTcpCalls.setDescription('The total number of RPC calls received for the\n\t\t\t TCP protocol, since the last time the statistics\n\t\t\t were cleared.')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rcpTcpBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer for the TCP protocol, since the last \n\t\t\t time the statistics were cleared.')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpNullRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: rcpTcpNullRecvs.setDescription('The number of times an RPC call for the TCP \n\t\t\t protocol was not available when it was thought \n\t\t\t to be received, since the last time the \n\t\t\t statistics were cleared.')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadLens.setStatus('mandatory')
if mibBuilder.loadTexts: rcpTcpBadLens.setDescription('The number of RPC calls for the TCP protocol\n\t\t\t received with a length shorter than a minimum-sized \n\t\t\t RPC call, since the last time the statistics \n\t\t\t were cleared.')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setDescription('The number of RPC calls for the TCP protocol\n\t\t\t received whose header could not be XDR decoded, \n\t\t\t since the last time the statistics were cleared.')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcUdpCalls.setDescription('The total number of RPC calls received for the\n\t\t\t UDP protocol, since the last time the statistics\n\t\t\t were cleared.')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcUdpBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer for the UDP protocol, since the last \n\t\t\t time the statistics were cleared.')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpNullRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: rpcUdpNullRecvs.setDescription('The number of times an RPC call for the UDP \n\t\t\t protocol was not available when it was thought \n\t\t\t to be received, since the last time the \n\t\t\t statistics were cleared.')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadLens.setStatus('mandatory')
if mibBuilder.loadTexts: rpcUdpBadLens.setDescription('The number of RPC calls for the UDP protocol\n\t\t\t received with a length shorter than a minimum-sized \n\t\t\t RPC call, since the last time the statistics \n\t\t\t were cleared.')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setStatus('mandatory')
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setDescription('The number of RPC calls for the UDP protocol\n\t\t\t received whose header could not be XDR decoded, \n\t\t\t since the last time the statistics were cleared.')
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCalls.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCalls.setDescription('The total number of NFS calls received, since\n\t\t\t the last time the statistics were cleared.')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: nfsServBadCalls.setDescription('The total number of received NFS calls rejected,\n\t\t\t since the last time the statistics were cleared.')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v2cNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t since the last time the statistics were cleared.')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRoots.setStatus('mandatory')
if mibBuilder.loadTexts: v2cRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v2cLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReads.setStatus('mandatory')
if mibBuilder.loadTexts: v2cReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: v2cWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v2cWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v2cCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v2cRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v2cRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: v2cStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, since the last time\n\t\t\t the statistics were cleared.')
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v2pNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure\n\t\t\t as a percentage of total NFS calls received,\n\t\t\t since the last time the statistics were cleared.')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2pGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2pSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRoots.setStatus('mandatory')
if mibBuilder.loadTexts: v2pRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v2pLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2pReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure as a percentage of total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReads.setStatus('mandatory')
if mibBuilder.loadTexts: v2pReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: v2pWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v2pWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v2pCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v2pRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v2pRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2pLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2pSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2pMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2pRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2pReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: v2pStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure as a percentage of\n\t\t\t total NFS calls received, since the last\n\t\t\t time the statistics were cleared.')
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRoots.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReads.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: v2ccStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last time the statistics were cleared.')
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRoots.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReads.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: v2cpStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number\n\t\t\t of calls received for this procedure, since\n\t\t\t the last time the statistics were cleared.')
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v3cNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t since the last time the statistics were cleared.')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v3cLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: v3cAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReads.setStatus('mandatory')
if mibBuilder.loadTexts: v3cReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v3cWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v3cCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMknods.setStatus('mandatory')
if mibBuilder.loadTexts: v3cMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v3cRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v3cRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, since the last time the statistics\n\t\t\t were cleared.')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: v3cReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: v3cFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, since the\n\t\t\t last time the statistics were cleared.')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: v3cFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, since the last time\n\t\t\t the statistics were cleared.')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCommits.setStatus('mandatory')
if mibBuilder.loadTexts: v3cCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, since\n\t\t\t the last time the statistics were cleared.')
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v3pNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t as a percentage of the total NFS calls\n\t\t\t received, since the last time the statistics\n\t\t\t were cleared.')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v3pLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: v3pAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access\n\t\t\t Permission) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3pReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReads.setStatus('mandatory')
if mibBuilder.loadTexts: v3pReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v3pWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v3pCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3pSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMknods.setStatus('mandatory')
if mibBuilder.loadTexts: v3pMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last\n\t\t\t time the statistics were cleared.')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v3pRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v3pRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3pLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last time the\n\t\t\t statistics were cleared.')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: v3pReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: v3pFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last time the statistics were cleared.')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: v3pFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last time\n\t\t\t the statistics were cleared.')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: v3pPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last time\n\t\t\t the statistics were cleared.')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCommits.setStatus('mandatory')
if mibBuilder.loadTexts: v3pCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, as a\n\t\t\t percentage of the total NFS calls received,\n\t\t\t since the last time the statistics were cleared.')
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReads.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last\n\t\t\t time the statistics were cleared.')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMknods.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, since\n\t\t\t the last time the statistics were cleared.')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last time the statistics were cleared.')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCommits.setStatus('mandatory')
if mibBuilder.loadTexts: v3ccCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that did\n\t\t\t not result in the filesystem blocking to read\n\t\t\t from disk, since the last time the statistics\n\t\t\t were cleared.')
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpNulls.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLookups.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last time the\n\t\t\t statistics were cleared.')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReads.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpWrites.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCreates.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMknods.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRenames.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLinks.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number of\n\t\t\t calls received for this procedure, since the\n\t\t\t last time the statistics were cleared.')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t time the statistics were cleared.')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCommits.setStatus('mandatory')
if mibBuilder.loadTexts: v3cpCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that\n\t\t\t did not result in the filesystem blocking to\n\t\t\t read from disk, as a percentage of the total\n\t\t\t number of calls received for this procedure,\n\t\t\t since the last time the statistics were cleared.')
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcInProgressHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for calls already in progress, since the last\n\t\t\t time the statistics were cleared.')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcDelayHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for replies already generated within a short\n\t\t\t interval, since the last time the statistics\n\t\t\t were cleared. These stats are deprecated.\n\t\t\t A value of zero will always be returned\n\t\t\t for these stats.')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMisses.setStatus('mandatory')
if mibBuilder.loadTexts: rcMisses.setDescription('The number of NFS requests received for which\n\t\t\t there were no corresponding entries already in\n\t\t\t the Reply Cache, since the last time the\n\t\t\t statistics were cleared.')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcNonIdemDoneHits.setDescription('The number of NFS requests received that\n\t\t\t resulted in replies being replayed from\n\t\t\t the Reply Cache, since the last time the\n\t\t\t statistics were cleared.')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls\n\t\t\t that resulted in this request being processed\n\t\t\t as a new request even when a corresponding\n\t\t\t entry existed in the Reply Cache, since the\n\t\t\t last time the statistics were cleared.')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcTcpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for calls already in\n\t\t\t progress, since the last time the statistics\n\t\t\t were cleared.')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcTcpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last time the statistics were cleared. These \n\t\t\t stats are deprecated. A value of zero will \n\t\t\t always be returned for these stats.')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpMisses.setStatus('mandatory')
if mibBuilder.loadTexts: rcTcpMisses.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for which there were no\n\t\t\t corresponding entries already in the Reply\n\t\t\t Cache, since the last time the statistics\n\t\t\t were cleared.')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the last\n\t\t\t time the statistics were cleared.')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last time the statistics were\n\t\t\t cleared.')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcUdpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for calls already in\n\t\t\t progress, since the last time the statistics\n\t\t\t were cleared.')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcUdpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last time the statistics were cleared. These \n\t\t\t stats are deprecated. A value of zero will \n\t\t\t always be returned for these stats.')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpMisses.setStatus('mandatory')
if mibBuilder.loadTexts: rcUdpMisses.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for which there were no\n\t\t\t corresponding entries already in the Reply\n\t\t\t Cache, since the last time the statistics\n\t\t\t were cleared.')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the last\n\t\t\t time the statistics were cleared.')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last time the statistics were\n\t\t\t cleared.')
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read512Calls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read1KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read2KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read4KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read8KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read16KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read32KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read64KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Read128KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n                        with request sizes between 0-511 bytes.')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 0-511 bytes.')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 512-1023 bytes.')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 1K-2047 bytes.')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 2K-4095 bytes.')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 4K-8191 bytes.')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 8K-16383 bytes.')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 16K-32767 bytes.')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 32K-65535 bytes.')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: v3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last zeroing\n                        with request sizes between 64K-131071 bytes.')
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pclTable.setStatus('mandatory')
if mibBuilder.loadTexts: pclTable.setDescription('Provide a report of per-client NFS statistics\n\t\t\t since the last time the statistics were cleared.')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "pclIpAddr"))
if mibBuilder.loadTexts: pclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pclEntry.setDescription('Provide a report of NFS statistics for the\n\t\t\t referenced NFS client since the last time the\n\t\t\t statistics were cleared.')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pclIpAddr.setDescription('The IP address of the referenced client.')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclRpcCalls.setDescription('The total number of RPC calls received from\n\t\t\t the referenced client, since the last time the\n\t\t\t statistics were cleared.')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclRpcBadCalls.setDescription('The total number of calls received from the\n\t\t\t referenced client that were rejected by the\n\t\t\t RPC layer, since the last time the\n\t\t\t statistics were cleared.')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcNullRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: pclRpcNullRecvs.setDescription('The number of times an RPC call was not available\n\t\t\t when it was thought to be received from\n\t\t\t referenced client, since the last time the\n\t\t\t statistics were cleared.')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadLens.setStatus('mandatory')
if mibBuilder.loadTexts: pclRpcBadLens.setDescription('The number of RPC calls received from the\n\t\t\t referenced client with a length shorter\n\t\t\t than a minimum-sized RPC call, since the\n\t\t\t last time the statistics were cleared.')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcServXDRCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclRpcServXDRCalls.setDescription('The number of RPC calls received from the\n\t\t\t    referenced client whose header could not\n\t\t\t    be XDR decoded, since the last time the\n\t\t\t    statistics were cleared.')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsCalls.setDescription('The total number of NFS calls received from\n\t\t\t    the referenced client, since the last time\n\t\t\t    the statistics were cleared.')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsServBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsServBadCalls.setDescription('The total number of NFS calls received from\n\t\t\t    the referenced client that were rejected, since\n\t\t\t    the last time the statistics were cleared.')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Nulls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Nulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_NULL\n\t\t\t (Do Nothing) procedure, since the last time the\n\t\t\t statistics were cleared.')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Getattrs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Getattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_GETATTR\n\t\t\t (Get File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Setattrs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Setattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_SETATTR\n\t\t\t (Set File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Roots.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Roots.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_ROOT\n\t\t\t (Get Filesystem Root) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Lookups.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Lookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_LOOKUP\n\t\t\t (Look Up File Name) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readlinks.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Readlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t  from the referenced client for the NFSPROC_READLINK\n\t\t\t  (Read From Symbolic Link) procedure, since the last\n\t\t\t  time the statistics were cleared.')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Reads.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Reads.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_READ\n\t\t\t (Read From File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_WRITECACHE\n\t\t\t (Write to Cache) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Writes.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Writes.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_WRITE\n\t\t\t (Write to File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Creates.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Creates.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_CREATE\n\t\t\t (Create File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Removes.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Removes.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_REMOVE\n\t\t\t (Remove File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Renames.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Renames.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_RENAME\n\t\t\t (Rename File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Links.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Links.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_LINK\n\t\t\t (Create Link to File) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Symlinks.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Symlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_SYMLINK\n\t\t\t (Create Symbolic Link) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_MKDIR\n\t\t\t (Create Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_RMDIR\n\t\t\t (Remove Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Readdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_READDIR\n\t\t\t (Read From Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Statfss.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Statfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t from the referenced client for the NFSPROC_STATFS\n\t\t\t (Get Filesystem Attributes) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Nulls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Nulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_NULL\n\t\t\t (Do Nothing) procedure, since the last time the\n\t\t\t statistics were cleared.')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Getattrs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Getattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_GETATTR\n\t\t\t (Get File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Setattrs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Setattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_SETATTR\n\t\t\t (Set File Attributes) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Lookups.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Lookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_LOOKUP\n\t\t\t (Lookup Filename) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Accesss.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Accesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_ACCESS\n\t\t\t (Check Access Permission) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readlinks.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Readlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READLINK\n\t\t\t (Read from Symbolic Link) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Reads.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Reads.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READ\n\t\t\t (Read From File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Writes.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Writes.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_WRITE\n\t\t\t (Write to File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Creates.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Creates.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_CREATE\n\t\t\t (Create a File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_MKDIR\n\t\t\t (Create a Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Symlinks.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Symlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_SYMLINK\n\t\t\t (Create a Symbolic Link) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mknods.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Mknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_MKNOD\n\t\t\t (Create a Special Device) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Removes.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Removes.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_REMOVE\n\t\t\t (Remove a File) procedure, since the last time\n\t\t\t the statistics were cleared.')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_RMDIR\n\t\t\t (Remove a Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Renames.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Renames.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_RENAME\n\t\t\t (Rename a File or Directory) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Links.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Links.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_LINK\n\t\t\t (Create Link to an Object) procedure, since the\n\t\t\t last time the statistics were cleared.')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readdirs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Readdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_READDIR\n\t\t\t (Read From Directory) procedure, since the last\n\t\t\t time the statistics were cleared.')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t      from the referenced client for the\n\t\t\t      NFSPROC3_READDIRPLUS (Extended Read from\n\t\t\t      Directory) procedure, since the last time\n\t\t\t      the statistics were cleared.')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsstats.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Fsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_FSSTAT\n\t\t\t (Get Dynamic File System Information) procedure,\n\t\t\t since the last time the statistics were cleared.')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_FSINFO\n\t\t\t (Get Static File System Information) procedure,\n\t\t\t since the last time the statistics were cleared.')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t   from the referenced client for the NFSPROC3_PATHCONF\n\t\t\t   (Retrieve POSIX Information) procedure, since the\n\t\t\t   last time the statistics were cleared.')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Commits.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Commits.setDescription('The number of NFS Version 3 calls received\n\t\t\t from the referenced client for the NFSPROC3_COMMIT\n\t\t\t (Commit Cached Data on a Server to Stable Storage)\n\t\t\t procedure, since the last time the statistics were\n\t\t\t cleared.')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclPerCent.setDescription('The number of the total NFS calls for the\n\t\t\t\t referenced client as a percentage of the\n\t\t\t\t total NFS calls received from all\n\t\t\t\t clients, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t\t as a percentage of the total calls\n\t\t\t\t received from this client, since the\n\t\t\t\t last time the statistics were cleared.')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READLINK (Read From Symbolic\n\t\t\t\t Link) procedure, as a percentage of the\n\t\t\t\t total calls received from this client,\n\t\t\t\t since the last time the statistics were\n\t\t\t\t cleared.')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READ (Read From File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_WRITE (Write to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_CREATE (Create File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_REMOVE (Remove File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_RENAME (Rename File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_LINK (Create Link to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_MKDIR (Create Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_RMDIR (Remove Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_READDIR (Read From Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setDescription('The number of NFS Version 2 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC_STATFS (Get Filesystem\n\t\t\t\t Attributes) procedure, as a percentage\n\t\t\t\t of the total calls received from this\n\t\t\t\t client, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_NULL (Do Nothing) \n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t\t Link) procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READ (Read From File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_WRITE (Write to File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_CREATE (Create a File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t\t Link) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_MKNOD (Create a Special\n\t\t\t\t Device) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_REMOVE (Remove a File)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_RENAME (Rename a File or\n\t\t\t\t Directory) procedure, as a percentage of\n\t\t\t\t the total calls received from this client,\n\t\t\t\t since the last time the statistics were\n\t\t\t\t cleared.')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_LINK (Create Link to an Object) \n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READDIR (Read From Directory)\n\t\t\t\t procedure, as a percentage of the total\n\t\t\t\t calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_READDIRPLUS (Extended Read from\n\t\t\t\t Directory) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t\t System Information) procedure, as a\n\t\t\t\t percentage of the total calls received\n\t\t\t\t from this client, since the last time\n\t\t\t\t the statistics were cleared.')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_FSINFO (Get Static File System\n\t\t\t\t Information) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t\t Information) procedure, as a percentage of the\n\t\t\t\t total calls received from this client, since\n\t\t\t\t the last time the statistics were cleared.')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setDescription('The number of NFS Version 3 calls\n\t\t\t\t received from the referenced client for\n\t\t\t\t the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t\t a Server to Stable Storage) procedure, as\n\t\t\t\t a percentage of the total calls received\n\t\t\t\t from this client, since the last time the\n\t\t\t\t statistics were cleared.')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 0-511 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 512-1023 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 1K-2047 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 2K-4095 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 4K-8191 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 8K-16383 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 16K-32767 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 32K-65535 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setDescription('The number of NFS Version 2 read calls \n\t\t\t\twith request sizes between 64K-131071 bytes \n\t\t\t\treceived from this client.')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 0-511 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 512-1023 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 1K-2047 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 2K-4095 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 4K-8191 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 8K-16383 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 16K-32767 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 32K-65535 bytes\n\t\t\t\treceived from this client.')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\t\twith request sizes between 64K-131071 bytes\n\t\t\t\treceived from this client.')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pclNumber.setDescription('Number of entries in the pclTable table.')
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcCalls.setStatus('mandatory')
if mibBuilder.loadTexts: trpcCalls.setDescription('The total number of RPC calls received,\n\t\t\t since the last boot.')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: trpcBadCalls.setDescription('The total number of calls rejected by the RPC\n\t\t\t layer, since the last boot.')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcNullRecvs.setStatus('mandatory')
if mibBuilder.loadTexts: trpcNullRecvs.setDescription('The number of times an RPC call was not\n\t\t\t available when it was thought to be received,\n\t\t\t since the last boot.')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadLens.setStatus('mandatory')
if mibBuilder.loadTexts: trpcBadLens.setDescription('The number of RPC calls received with a length\n\t\t\t shorter than a minimum-sized RPC call, since\n\t\t\t the last boot.')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcServXDRCalls.setStatus('mandatory')
if mibBuilder.loadTexts: trpcServXDRCalls.setDescription('The number of RPC calls received whose header\n\t\t\t could not be XDR decoded, since the last boot.')
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tnfsCalls.setDescription('The total number of NFS calls received, since\n\t\t\t  last boot.')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsServBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tnfsServBadCalls.setDescription('The total number of received NFS calls rejected,\n\t\t\t  since last boot.')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t since the last boot.')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last boot.')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, since the the last boot.')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRoots.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, since the last boot.')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, since the last boot.')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, since the last boot.')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, since the last boot.')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, since the last boot.')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, since the last boot.')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, since the last boot.')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, since the last boot.')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, since the last boot.')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, since the last boot.')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, since the last boot.')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, since the last boot.')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, since the last boot.')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, since the last boot.')
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure\n\t\t\t as a percentage of total NFS calls received,\n\t\t\t since the last boot.')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRoots.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure as a percentage of total NFS\n\t\t\t calls received, since the last boot.')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure as a percentage of total NFS calls\n\t\t\t received, since the last boot.')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: tv2pStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure as a percentage of\n\t\t\t total NFS calls received, since the last boot.')
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem blocking\n\t\t\t to read from disk, since the last boot.')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRoots.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic Link)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: tv2ccStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpNulls.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpGetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpSetattrs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRoots.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpRoots.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_ROOT (Get Filesystem Root)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpLookups.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LOOKUP (Look Up File Name)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpReadlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READLINK (Read From Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpReads.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrcaches.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpWrcaches.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITECACHE (Write to Cache)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpWrites.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpCreates.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_CREATE (Create File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpRemoves.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_REMOVE (Remove File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpRenames.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RENAME (Rename File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpLinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_LINK (Create Link to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpSymlinks.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_SYMLINK (Create Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpMkdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_MKDIR (Create Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpRmdirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_RMDIR (Remove Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpReaddirs.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpStatfss.setStatus('mandatory')
if mibBuilder.loadTexts: tv2cpStatfss.setDescription('The number of NFS Version 2 calls received\n\t\t\t for the NFSPROC_STATFS (Get Filesystem\n\t\t\t Attributes) procedure, that did not result\n\t\t\t in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number\n\t\t\t of calls received for this procedure, \n\t\t\t since the last boot.')
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t since the last boot.')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, since the last boot.')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, since the last boot.')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, since the last boot.')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, since the last boot.')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, since the last boot.')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, since the last boot.')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, since the last boot.')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, since the last boot.')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, since the last boot.')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMknods.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, since the last boot.')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, since the last boot.')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, since the last boot.')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, since the last boot.')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, since the last boot.')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, since the last boot.')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, since the last boot.')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, since the\n\t\t\t last boot.')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, since the last boot.')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, since the last boot.')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCommits.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, since\n\t\t\t the last boot.')
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t as a percentage of the total NFS calls\n\t\t\t received, since the last boot.')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access\n\t\t\t Permission) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the last boot.')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last boot.')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, as a percentage of the total\n\t\t\t NFS calls received, since the last boot.')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMknods.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last boot.')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, as a percentage of\n\t\t\t the total NFS calls received, since the\n\t\t\t last boot.')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, as a percentage of the total NFS\n\t\t\t calls received, since the last boot.')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last boot.')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, as a percentage\n\t\t\t of the total NFS calls received, since the\n\t\t\t last boot.')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, as a percentage of the\n\t\t\t total NFS calls received, since the last boot.')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCommits.setStatus('mandatory')
if mibBuilder.loadTexts: tv3pCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, as a\n\t\t\t percentage of the total NFS calls received,\n\t\t\t since the last boot.')
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem blocking\n\t\t\t to read from disk, since the last boot.')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, since the last boot.')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMknods.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, since\n\t\t\t the last boot.')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk, \n\t\t\t since the last boot.')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t since the last boot.')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCommits.setStatus('mandatory')
if mibBuilder.loadTexts: tv3ccCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that did\n\t\t\t not result in the filesystem blocking to read\n\t\t\t from disk, since the last boot.')
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpNulls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpNulls.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_NULL (Do Nothing) procedure,\n\t\t\t that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpGetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_GETATTR (Get File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpSetattrs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SETATTR (Set File Attributes)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLookups.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpLookups.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LOOKUP (Lookup Filename)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpAccesss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpAccesss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_ACCESS (Check Access Permission)\n\t\t\t procedure, that did not result in the filesystem\n\t\t\t blocking to read from disk, as a percentage\n\t\t\t of the total number of calls received for\n\t\t\t this procedure, since the last boot.')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReadlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpReadlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READLINK (Read from Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last\n\t\t\t last boot.')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReads.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpReads.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READ (Read From File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpWrites.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpWrites.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_WRITE (Write to File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCreates.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpCreates.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_CREATE (Create a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMkdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpMkdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKDIR (Create a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSymlinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpSymlinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_SYMLINK (Create a Symbolic\n\t\t\t Link) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMknods.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpMknods.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_MKNOD (Create a Special\n\t\t\t Device) procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpRemoves.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_REMOVE (Remove a File)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRmdirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpRmdirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RMDIR (Remove a Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRenames.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpRenames.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_RENAME (Rename a File or\n\t\t\t Directory) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLinks.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpLinks.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_LINK (Create Link to an\n\t\t\t Object) procedure, that did not result in\n\t\t\t the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpReaddirs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READDIR (Read From Directory)\n\t\t\t procedure, that did not result in the\n\t\t\t filesystem blocking to read from disk, as a\n\t\t\t percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirPluss.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_READIRPLUS (Extended Read\n\t\t\t from Directory) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsstats.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpFsstats.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSSTAT (Get Dynamic File\n\t\t\t System Information) procedure, that did not\n\t\t\t result in the filesystem blocking to read from\n\t\t\t disk, as a percentage of the total number of\n\t\t\t calls received for this procedure, since the\n\t\t\t last boot.')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsinfos.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpFsinfos.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_FSINFO (Get Static File System\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpPathconfs.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpPathconfs.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_PATHCONF (Retrieve POSIX\n\t\t\t Information) procedure, that did not result\n\t\t\t in the filesystem blocking to read from disk,\n\t\t\t as a percentage of the total number of calls\n\t\t\t received for this procedure, since the last boot.')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCommits.setStatus('mandatory')
if mibBuilder.loadTexts: tv3cpCommits.setDescription('The number of NFS Version 3 calls received\n\t\t\t for the NFSPROC3_COMMIT (Commit Cached Data on\n\t\t\t a Server to Stable Storage) procedure, that\n\t\t\t did not result in the filesystem blocking to\n\t\t\t read from disk, as a percentage of the total\n\t\t\t number of calls received for this procedure,\n\t\t\t since the last boot.')
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcInProgressHits.setDescription('The number of NFS requests that were dropped, for\n\t\t\t calls already in progress, since the last boot.')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcDelayHits.setDescription('The number of NFS requests that were dropped,\n\t\t\t for replies already generated within a short\n\t\t\t interval, since the last boot. These stats are \n\t\t\t deprecated. A value of zero will always be \n\t\t\t returned for these stats.')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcMisses.setStatus('mandatory')
if mibBuilder.loadTexts: trcMisses.setDescription('The number of NFS requests received for which\n\t\t\t there were no corresponding entries already in\n\t\t\t the Reply Cache, since the last boot.')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcNonIdemDoneHits.setDescription('The number of NFS requests received that\n\t\t\t resulted in replies being replayed from\n\t\t\t the Reply Cache, since the last boot.')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls\n\t\t\t that resulted in this request being processed\n\t\t\t as a new request even when a corresponding\n\t\t\t entry existed in the Reply Cache, since the\n\t\t\t last boot.')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcTcpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for calls already in\n\t\t\t progress, since the last boot.')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcTcpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the TCP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last boot. These stats are deprecated. A value \n\t\t\t of zero will always be returned for these stats.')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpMisses.setStatus('mandatory')
if mibBuilder.loadTexts: trcTcpMisses.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for which there were no corresponding\n\t\t\t entries already in the Reply Cache, since the\n\t\t\t last boot.')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the\n\t\t\t last boot.')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t TCP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last boot.')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpInProgressHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcUdpInProgressHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for calls already in\n\t\t\t progress, since the last boot.')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcUdpDelayHits.setDescription('The number of NFS requests that were dropped\n\t\t\t for the UDP protocol, for replies already\n\t\t\t generated within a short interval, since the\n\t\t\t last boot. These stats are deprecated. A value \n\t\t\t of zero will always be returned for these stats.')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpMisses.setStatus('mandatory')
if mibBuilder.loadTexts: trcUdpMisses.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for which there were no corresponding\n\t\t\t entries already in the Reply Cache, since the\n\t\t\t last boot.')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol that resulted in replies being\n\t\t\t replayed from the Reply Cache, since the\n\t\t\t last boot.')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setStatus('mandatory')
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the\n\t\t\t UDP protocol for calls that resulted in this\n\t\t\t request being processed as a new request even\n\t\t\t when a corresponding entry existed in the Reply\n\t\t\t Cache, since the last boot.')
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read512Calls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read1KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read2KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read4KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read8KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read16KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read32KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read64KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Read128KCalls.setDescription('The number of NFS Version 2 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write512Calls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write1KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write2KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write4KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write8KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write16KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write32KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write64KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv2Write128KCalls.setDescription('The number of NFS Version 2 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read512Calls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read1KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read2KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read4KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read8KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read16KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read32KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read64KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Read128KCalls.setDescription('The number of NFS Version 3 read calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write512Calls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write512Calls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 0-511 bytes.')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write1KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write1KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 512-1023 bytes.')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write2KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write2KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 1K-2047 bytes.')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write4KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write4KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 2K-4095 bytes.')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write8KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write8KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 4K-8191 bytes.')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write16KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write16KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 8K-16383 bytes.')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write32KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write32KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 16K-32767 bytes.')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write64KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write64KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 32K-65535 bytes.')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write128KCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tv3Write128KCalls.setDescription('The number of NFS Version 3 write calls\n\t\t\treceived by the server since last boot\n\t\t\twith request sizes between 64K-131071 bytes.')
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: nfsIsLicensed.setDescription('Whether the nfs protocol is licensed on the\n\t\t\t filer.')
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaState.setStatus('deprecated')
if mibBuilder.loadTexts: quotaState.setDescription("Indicates whether the root volume's quotas are ON, \n\t\t\t OFF or initializing.  This object is deprecated -\n\t\t\t use qvStateTable.qvStateStat instead.")
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInitPercent.setStatus('deprecated')
if mibBuilder.loadTexts: quotaInitPercent.setDescription('Indicates percentage of root volume quota \n\t\t\t computation done while quotas are in initializing \n\t\t\t state. This object is deprecated - use \n\t\t\t qvStateTable.qvInitPercent instead.')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3), )
if mibBuilder.loadTexts: qrTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrTable.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.  All quotas are displayed\n\t\t\t regardless of volume, and no volume information\n\t\t\t is given.  This table is deprecated - use qrVTable \n\t\t\t instead.')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrIndex"))
if mibBuilder.loadTexts: qrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrEntry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.\n\t\t\t All quotas are displayed regardless of volume, \n\t\t\t and no volume information is given.  This object is \n\t\t\t deprecated - use qrVEntry instead.')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrIndex.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas.')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrTypeUser", 1), ("qrTypeGroup", 2), ("qrTypeTree", 3), ("qrTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrType.setStatus('deprecated')
if mibBuilder.loadTexts: qrType.setDescription('Identifies the kind of quota for this qrEntry.')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrId.setStatus('deprecated')
if mibBuilder.loadTexts: qrId.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrEntry.")
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrEntry.')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrEntry.')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrFilesUsed.setDescription('The current number of files used for this\n\t\t\t qrEntry.')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrEntry.')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrPathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrEntry.')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4), )
if mibBuilder.loadTexts: qvStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateTable.setDescription('Provide a report of the current quota state of\n\t\t\teach volume in the system.')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qvStateVolume"))
if mibBuilder.loadTexts: qvStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateEntry.setDescription('Provide a report of the current quota state of\n\t\t\teach volume in the system.')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVolume.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateVolume.setDescription("A number that identifies this volume.  The mapping\n       \t\t\t of this number to actual volumes may change if \n\t\t\t volumes are added or deleted.  Use qvStateName to \n\t\t\t unambiguously identify a volume.  The mapping\n\t\t\t established by this object is the same as \n\t\t\t the mapping of qrVVolume (below) to actual volumes.\n\t\t\t For instance, if a qvStateVolume value of '5'\n\t\t\t represents the volume 'vol2', a value of '5'\n\t\t\t in qrVVolume also represents the volume 'vol2'.")
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateName.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateName.setDescription('Indicates the name of this volume.')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateStat.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateStat.setDescription('Indicates whether quotas are ON, OFF or\n\t\t\t initializing.')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateInitPercent.setStatus('mandatory')
if mibBuilder.loadTexts: qvStateInitPercent.setDescription('Indicates percentage of quota computation done\n\t\t\t while quotas are in initializing state.')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5), )
if mibBuilder.loadTexts: qrVTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTable.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrVVolume"), (0, "NETWORK-APPLIANCE-MIB", "qrVIndex"))
if mibBuilder.loadTexts: qrVEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrVEntry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.  Indices\n\t\t\t select the volume of the quota and the quota entry\n\t\t\t itself.')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIndex.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas in the given volume.')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrVTypeUser", 1), ("qrVTypeGroup", 2), ("qrVTypeTree", 3), ("qrVTypeUserDefault", 4), ("qrVTypeGroupDefault", 5), ("qrVTypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVType.setDescription('Identifies the kind of quota for this qrVEntry.')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVId.setStatus('deprecated')
if mibBuilder.loadTexts: qrVId.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrVEntry. Check\n                         the qrVIdType field to see if this field is valid.")
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrVEntry.')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrVEntry.')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFilesUsed.setDescription('The current number of files used for this\n\t\t\t qrVEntry.')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrVEntry.')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrVPathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrVEntry.')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVVolume.setStatus('deprecated')
if mibBuilder.loadTexts: qrVVolume.setDescription('A number that identifies the volume for which\n\t\t\tthis quota is in effect on.  The volume that this\n\t\t\tvalue represents can be determined by checking\n\t\t\tthe value of qvStateName (above) with \n\t\t\tqvStateVolume set to the value found here.')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVTree.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTree.setDescription('A string that indicates which qtree this quota\n\t\t\tbelongs to.')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrVIdValid", 1), ("qrVSidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIdType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIdType.setDescription('A value that indicates which ID field is valid.')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVSid.setStatus('deprecated')
if mibBuilder.loadTexts: qrVSid.setDescription('The one or more IDs associated with this qrVEntry.\n                         If the qrVentry is associated with a Windows ID, the\n\t\t\t text form of the Windows ID (the SID) is here. If\n\t\t\t the qrVEntry is associated with more than one id,\n\t\t\t this contains a blank separated list of those IDs.\n                         Check the qrVIdType field to see if this field is\n                         valid.')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message.')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrVEntry before a warning message and SNMP\n\t\t\t trap is produced.')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimitSoft.setDescription('The limit of files that can be used for this\n\t\t\t qrVEntry before a warning message and SNMP\n\t\t\t trap is produced.')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6), )
if mibBuilder.loadTexts: qrV2Table.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Table.setDescription('Provide a report of the current file and\n\t\t\t space consumption for each user or group with\n\t\t\t a quota in /etc/quotas.')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrV2Volume"), (0, "NETWORK-APPLIANCE-MIB", "qrV2Index"))
if mibBuilder.loadTexts: qrV2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Entry.setDescription('Provide a report of the current file and\n\t\t\t space consumption for a referenced entry\n\t\t\t with a quota in the file /etc/quotas.  Indices\n\t\t\t select the volume of the quota and the quota entry\n\t\t\t itself.')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Index.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Index.setDescription('A number that identifies this entry in the\n\t\t\t file /etc/quotas in the given volume.')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrV2TypeUser", 1), ("qrV2TypeGroup", 2), ("qrV2TypeTree", 3), ("qrV2TypeUserDefault", 4), ("qrV2TypeGroupDefault", 5), ("qrV2TypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Type.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Type.setDescription('Identifies the kind of quota for this qrV2Entry.')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Id.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Id.setDescription("The UID (user's numerical ID) or the GID (numerical\n\t\t\t ID of  the  group  that a user belongs to), as\n\t\t\t applicable, associated with this qrV2Entry. Check\n                         the qrV2IdType field to see if this field is valid.")
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrV2Entry. This object returns the most significant\n\t\t\t 32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setDescription('The current number of KBytes used for this\n\t\t\t qrV2Entry. This object returns the least significant\n\t\t\t 32 bits of the 64 bit unsigned integer.')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tsize based quota limit for this qrV2Entry is unlimited.\n\t\t\tIf false(1) then qrV2HighKBytesLimit and\n\t\t\tqrV2LowKBytesLimit are valid, if true(0) both\n\t\t\tqrV2HighKBytesLimit and qrV2LowKBytesLimit are unused\n\t\t\tand will return 0.')
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry. This object returns the most significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This will \n\t\t\t return 0 if qrV2QuotaUnlimited is true.')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry. This object returns the least significant\n\t\t\t 32 bits of the 64 bit unsigned integer. This will \n\t\t\t return 0 if qrV2QuotaUnlimited is true.')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FilesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2FilesUsed.setDescription('The current number of files used for this\n\t\t\t qrV2Entry.')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tfile based quota limit for this qrV2Entry is unlimited.\n\t\t\tIf false(1) then qrV2FileLimit is valid, if true(0)\n\t\t\tqrV2FileLimit will return 0.')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2FileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrV2Entry.')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2PathName.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2PathName.setDescription('A textual string that contains the path\n\t\t\t corresponding to this qrV2Entry.')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Volume.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Volume.setDescription('A number that identifies the volume for which\n\t\t\tthis quota is in effect on.  The volume that this\n\t\t\tvalue represents can be determined by checking\n\t\t\tthe value of qvStateName (above) with \n\t\t\tqvStateVolume set to the value found here.')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Tree.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Tree.setDescription('A string that indicates which qtree this quota\n\t\t\tbelongs to.')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrV2IdValid", 1), ("qrV2SidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2IdType.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2IdType.setDescription('A value that indicates which ID field is valid.')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Sid.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2Sid.setDescription('The one or more IDs associated with this qrV2Entry.\n                         If the qrV2entry is associated with a Windows ID, the\n\t\t\t text form of the Windows ID (the SID) is here. If\n\t\t\t the qrV2Entry is associated with more than one id,\n\t\t\t this contains a blank separated list of those IDs.\n                         Check the qrV2IdType field to see if this field is\n                         valid.')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setDescription('This flag designates whether or not the\n\t\t\tsize based threshold limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2HighKBytesThreshold and\n\t\t\tqrV2LowKBytesThreshold are valid, if true(0) both\n\t\t\tqrV2HighKBytesThreshold and qrV2LowKBytesThreshold \n\t\t\tare unused and will return 0.')
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message. This object returns the \n\t\t\t most significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This will return 0 if qrV2ThresholdUnlimited\n\t\t\t is true.')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setDescription('A number of KBytes that when used by this entry\n\t\t\t produces a warning message. This object returns the \n\t\t\t least significant 32 bits of the 64 bit unsigned \n\t\t\t integer. This will return 0 if qrV2ThresholdUnlimited\n\t\t\t is true.')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tsize based soft quota limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2HighKBytesSoftLimit and\n\t\t\tqrV2LowKBytesSoftLimit are valid, if true(0) both\n\t\t\tqrV2HighKBytesSoftLimit and qrV2LowKBytesSoftLimit \n\t\t\tare unused and will return 0.')
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This object returns the most\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This object returns the least\n\t\t\t significant 32 bits of the 64 bit unsigned integer.')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setDescription('This flag designates whether or not the\n\t\t\tfile based soft quota limit for this qrV2Entry is \n\t\t\tunlimited. If false(1) then qrV2SoftFileLimit is valid,\n\t\t\tif true(0) qrV2SoftFileLimit is unused and will \n\t\t\treturn 0.')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qrV2SoftFileLimit.setDescription('The limit of files that can be used for this\n\t\t\t qrV2Entry before a warning message and SNMP\n\t\t\t trap is produced. This will return 0 if \n\t\t\t qrV2SoftFileQuotaUnlimited is true.')
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesAvail.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesAvail.setDescription('The count of the maximum number of\n\t\t\t\t files allowable on the root volume.  This\n\t\t\t\t object is deprecated - use \n\t\t\t\t dfEntry.dfMaxFilesAvail instead.')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesUsed.setDescription('The count of the number of files\n\t\t\t\t currently in use on the root volume.  \n\t\t\t\t This object is deprecated - use\n\t\t\t\t dfEntry.dfMaxFilesUsed instead.')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesPossible.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesPossible.setDescription('The largest value to which the\n\t\t\t\t filesysMaxfilesAvail parameter above can\n\t\t\t\t be increased by reconfiguration on the\n\t\t\t\t root volume.  This object is deprecated -\n\t\t\t\t use dfEntry.dfMaxFilesPossible.')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4), )
if mibBuilder.loadTexts: dfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dfTable.setDescription('Provide a report of the available disk space\n\t\t\t\t on the file systems. The tables shows the\n\t\t\t\t available disk space for volumes as well as\n\t\t\t\t aggregates.')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dfIndex"))
if mibBuilder.loadTexts: dfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dfEntry.setDescription('Provide a report of the available disk space on\n\t\t\t the referenced file system.')
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dfIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfFileSys.setStatus('mandatory')
if mibBuilder.loadTexts: dfFileSys.setDescription('The name for the referenced file system.')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: dfKBytesTotal.setDescription('The total capacity in KBytes for the\n\t\t\t referenced file system.')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: dfKBytesUsed.setDescription('The total disk space in KBytes that is in use\n\t\t\t on the referenced file system.')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesAvail.setStatus('mandatory')
if mibBuilder.loadTexts: dfKBytesAvail.setDescription('The total disk space in KBytes that is\n\t\t\t free for use on the referenced file system.')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setDescription('The percentage of disk space currently\n\t\t\t\t in use on the referenced file system.')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: dfInodesUsed.setDescription('The total number of inodes in use on the\n\t\t\t\t referenced file system.')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesFree.setStatus('mandatory')
if mibBuilder.loadTexts: dfInodesFree.setDescription('The total number of inodes that are\n\t\t\t\t available for use on the referenced\n\t\t\t\t file system.')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setDescription('The percentage of disk space currently\n\t\t\t\t in use based on inode counts, on the\n\t\t\t\t referenced file system.')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMountedOn.setStatus('mandatory')
if mibBuilder.loadTexts: dfMountedOn.setDescription('The name of the file on which this file\n\t\t\t\t system is mounted.')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesAvail.setStatus('mandatory')
if mibBuilder.loadTexts: dfMaxFilesAvail.setDescription('The count of the maximum number of\n\t\t\t\t files allowable on the referenced file\n\t\t\t\t system.')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: dfMaxFilesUsed.setDescription('The count of the number of files\n\t\t\t\t currently in use on the referenced file\n\t\t\t\t system.')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesPossible.setStatus('mandatory')
if mibBuilder.loadTexts: dfMaxFilesPossible.setDescription('The largest value to which the\n\t\t\t\t filesysMaxfilesAvail parameter above can\n\t\t\t\t be increased by reconfiguration on the\n\t\t\t\t referenced file system.')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighTotalKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfHighTotalKBytes.setDescription('The total capacity in KBytes for the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the most significant 32 bits of the 64 bit \n\t\t\t\t unsigned integer.')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowTotalKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfLowTotalKBytes.setDescription('The total capacity in KBytes for the\n\t\t\t\t referenced file system.  This object returns\n\t\t\t\t the least significant 32 bits of the 64 bit \n\t\t\t\t unsigned integer.')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighUsedKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfHighUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object\n\t\t\t\t returns the most significant 32 bits of the\n\t\t\t\t 64 bit unsigned integer.')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowUsedKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfLowUsedKBytes.setDescription('The total disk space in KBytes that is in use\n\t\t\t\t on the referenced file system.  This object\n\t\t\t\t returns the least significant 32 bits of the\n\t\t\t\t 64 bit unsigned integer.')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighAvailKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfHighAvailKBytes.setDescription('The total disk space in KBytes that is free\n\t\t\t\t for use on the referenced file system.\n\t\t\t\t This object returns the most significant\n\t\t\t\t 32 bits of the 64 bit unsigned integer.')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowAvailKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dfLowAvailKBytes.setDescription('The total disk space in KBytes that is free\n\t\t\t\t for use on the referenced file system.\n\t\t\t\t This object returns the least significant\n\t\t\t\t 32 bits of the 64 bit unsigned integer.')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unmounted", 1), ("mounted", 2), ("frozen", 3), ("destroying", 4), ("creating", 5), ("mounting", 6), ("unmounting", 7), ("nofsinfo", 8), ("replaying", 9), ("replayed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dfStatus.setDescription('The status of the file system.')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("uninitialized", 2), ("needcpcheck", 3), ("cpcheckwait", 4), ("unmirrored", 5), ("normal", 6), ("degraded", 7), ("resyncing", 8), ("failed", 9), ("limbo", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMirrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dfMirrorStatus.setDescription('Overall mirror status of the file system.')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPlexCount.setStatus('mandatory')
if mibBuilder.loadTexts: dfPlexCount.setDescription('Number of plexes in this file system.')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfType.setStatus('mandatory')
if mibBuilder.loadTexts: dfType.setDescription('Indicates the type of container.')
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1), )
if mibBuilder.loadTexts: slTable.setStatus('deprecated')
if mibBuilder.loadTexts: slTable.setDescription('Provide a report of the snapshots on the\n\t\t\t root volume.  This table is deprecated - use\n\t\t\t slVTable instead.')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slIndex"))
if mibBuilder.loadTexts: slEntry.setStatus('deprecated')
if mibBuilder.loadTexts: slEntry.setDescription('Provide a report on a given snapshot on the\n\t\t\t root volume.  This object is deprecated - use\n\t\t\t slVEntry instead.')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slIndex.setStatus('deprecated')
if mibBuilder.loadTexts: slIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMonth.setStatus('deprecated')
if mibBuilder.loadTexts: slMonth.setDescription('The month in which the snapshot was created.')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDay.setStatus('deprecated')
if mibBuilder.loadTexts: slDay.setDescription('The day on which the snapshot was created.')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHour.setStatus('deprecated')
if mibBuilder.loadTexts: slHour.setDescription('The hour in which the snapshot was created.')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMinutes.setStatus('deprecated')
if mibBuilder.loadTexts: slMinutes.setDescription('The minute in which the snapshot was created.')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slName.setStatus('deprecated')
if mibBuilder.loadTexts: slName.setDescription('The name of the referenced snapshot.')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2), )
if mibBuilder.loadTexts: slVTable.setStatus('mandatory')
if mibBuilder.loadTexts: slVTable.setDescription('Provide a report of the snapshots on the\n\t\t\t file systems.')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slVVolume"), (0, "NETWORK-APPLIANCE-MIB", "slVIndex"))
if mibBuilder.loadTexts: slVEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slVEntry.setDescription('Provide a report on a given snapshot on the\n\t\t\t file system.  Indices select the volume of\n\t\t\t the snapshot and the snapshot entry itself.')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slVIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMonth.setStatus('mandatory')
if mibBuilder.loadTexts: slVMonth.setDescription('The month in which the snapshot was created.')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVDay.setStatus('mandatory')
if mibBuilder.loadTexts: slVDay.setDescription('The day on which the snapshot was created.')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVHour.setStatus('mandatory')
if mibBuilder.loadTexts: slVHour.setDescription('The hour in which the snapshot was created.')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: slVMinutes.setDescription('The minute in which the snapshot was created.')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVName.setStatus('mandatory')
if mibBuilder.loadTexts: slVName.setDescription('The name of the referenced snapshot.')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolume.setStatus('mandatory')
if mibBuilder.loadTexts: slVVolume.setDescription('A number that identifies the volume  / aggregate that \n\t\t\t contains this snapshot.')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slVNumber.setDescription('Number of snapshots for this volume / aggregate.')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: slVVolumeName.setDescription('The name of the volume / aggregate. This does not \n\t\t\t have a /vol/ prefix.')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVType.setStatus('mandatory')
if mibBuilder.loadTexts: slVType.setDescription('Indicates the type of container for this\n\t\t\t snapshot.')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3), )
if mibBuilder.loadTexts: slQTable.setStatus('mandatory')
if mibBuilder.loadTexts: slQTable.setDescription('Provide a report of the snapshots and their contents\n\t\t\ton the file systems.')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slQVolume"), (0, "NETWORK-APPLIANCE-MIB", "slQQtree"), (0, "NETWORK-APPLIANCE-MIB", "slQIndex"))
if mibBuilder.loadTexts: slQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slQEntry.setDescription('Provide a report on a given snapshot for a given \n\t\t\tqtree on the file system.  Indices select the volume \n\t\t\tand qtree of the snapshot and the snapshot entry \n\t\t\titself.')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slQIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced file system.')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolume.setStatus('mandatory')
if mibBuilder.loadTexts: slQVolume.setDescription('A number that identifies the volume that contains\n\t\t\tthis snapshot.')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtree.setStatus('mandatory')
if mibBuilder.loadTexts: slQQtree.setDescription('A number that identifies the qtree that contains\n\t\t\tthis snapshot.')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotName.setStatus('mandatory')
if mibBuilder.loadTexts: slQSnapshotName.setDescription('The name of the referenced snapshot.')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotTime.setStatus('mandatory')
if mibBuilder.loadTexts: slQSnapshotTime.setDescription('Time of the snapshot on the system. The time in \n\t\t\tseconds since January 1, 1970.')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeName.setStatus('mandatory')
if mibBuilder.loadTexts: slQQtreeName.setDescription('A string that indicates which qtree is in this \n\t\t\tsnapshot')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replica", 1), ("transitioning", 2), ("original", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeContent.setStatus('mandatory')
if mibBuilder.loadTexts: slQQtreeContent.setDescription('The content of the qtree tree')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSource.setStatus('mandatory')
if mibBuilder.loadTexts: slQSource.setDescription("The source of this qtree for a replicated qtree.\n\t\t\t'-' for a original qtree.")
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSourceTime.setStatus('mandatory')
if mibBuilder.loadTexts: slQSourceTime.setDescription('Time of the source snapshot for a replicated qtree.\n\t\t\tTime of the current snapshot for an original qtree.\n\t\t\tThe time in seconds since January 1, 1970. 0 if the \n\t\t\tqtree is in a transitioning stage')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: slQVolumeName.setDescription('The name of the volume. This does not have a /vol/\n\t\t\tprefix.')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dfNumber.setDescription('Number of entries in the dfTable table.')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("nearlyFull", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fsOverallStatus.setDescription("An indication of overall file system\n\t\t\thealth.  'ok' indicates that all file systems\n\t\t\thave adequate space.  'nearlyFull' means\n\t\t\tthat one or more is nearly full (more than\n\t\t\t95% full). 'full' means that one or more\n\t\t\tare more than 98% full.")
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: fsStatusMessage.setDescription('A string indicating any file systems which\n\t\t\tare full or nearly full.')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setDescription('The percentage of space currently in use\n\t\t\tby the file system which is most full.')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setDescription('The percentage of inodes currently in use\n\t\t\tby the file system which is most full.')
fsMaxUsedReservedPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedReservedPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: fsMaxUsedReservedPerCent.setDescription('The percentage of reserved space currently \n\t\t\tin use by the file system which is most full.')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8), )
if mibBuilder.loadTexts: volTable.setStatus('mandatory')
if mibBuilder.loadTexts: volTable.setDescription('List the volumes defined on the system,\n\t\t\tincluding offline volumes.')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volEntry.setDescription('Provide details about a particular volume.')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('mandatory')
if mibBuilder.loadTexts: volIndex.setDescription('A number that identifies this volume.  The\n\t\t\tvolIndex is not related to any other table\n\t\t\tdefined in this MIB, and may change as\n\t\t\tvolumes are created and destroyed.')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('mandatory')
if mibBuilder.loadTexts: volName.setDescription('Name of the volume.  This includes no /vol/\n\t\t\tprefix.')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFSID.setStatus('mandatory')
if mibBuilder.loadTexts: volFSID.setDescription('Unique identifier for this volume.')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOwningHost.setStatus('mandatory')
if mibBuilder.loadTexts: volOwningHost.setDescription('Indication of which host owns this volume.')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volState.setStatus('mandatory')
if mibBuilder.loadTexts: volState.setDescription("State of the volume, such as 'online' or\n\t\t\t'offline'.")
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('mandatory')
if mibBuilder.loadTexts: volStatus.setDescription("Status of the volume, such as 'normal' or\n\t\t\t'reconstructing'. May include several values\n\t\t\tseparated by comma and space.")
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOptions.setStatus('mandatory')
if mibBuilder.loadTexts: volOptions.setDescription("Options associated with the volume, such \n\t\t\tas 'root' and 'nosnapdir=off'. May include\n\t\t\tseveral values separated by comma.")
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volUUID.setStatus('mandatory')
if mibBuilder.loadTexts: volUUID.setDescription('A unique id associated with the volume.')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volAggrName.setStatus('optional')
if mibBuilder.loadTexts: volAggrName.setDescription('Name of the aggregate this flexible volume is a\n                         part of.')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("flexible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volType.setStatus('optional')
if mibBuilder.loadTexts: volType.setDescription('Type of this volume, older volumes are\n                         traditional while newer volumes contained in\n                         aggregates are flexible.')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volClone.setStatus('optional')
if mibBuilder.loadTexts: volClone.setDescription('True indicates flexible volume is a clone.')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneOf.setStatus('optional')
if mibBuilder.loadTexts: volCloneOf.setDescription('Name of flexible volume this flexible volume is\n                         a clone of.')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneSnap.setStatus('optional')
if mibBuilder.loadTexts: volCloneSnap.setDescription('Name of original cloned snapshot.')
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNumber.setStatus('mandatory')
if mibBuilder.loadTexts: volNumber.setDescription('Number of volumes in the volTable.')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10), )
if mibBuilder.loadTexts: qtreeTable.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeTable.setDescription('Provide a list of the qtrees on the system.')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qtreeVolume"), (0, "NETWORK-APPLIANCE-MIB", "qtreeIndex"))
if mibBuilder.loadTexts: qtreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeEntry.setDescription('Provide details about a particular qtree.')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeIndex.setDescription('Index into the qtree table.')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolume.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeVolume.setDescription('A number that identifies the volume that contains\n\t\t\tthis qtree.')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeVolumeName.setDescription('The name of the volume that contains this qtree. \n\t\t\tThis includes no /vol/prefix.')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeId.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeId.setDescription('The Id number of the qtree.')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeName.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeName.setDescription('The name of the qtree.')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unix", 1), ("ntfs", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStyle.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeStyle.setDescription('The security style of the qtree.')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("snapmirrored", 2), ("snapvaulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeStatus.setDescription('The status of the qtree.')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeOplock.setStatus('mandatory')
if mibBuilder.loadTexts: qtreeOplock.setDescription('An indication of whether the oplocks is enabled or not\n\t\t\tfor this qtree.')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11), )
if mibBuilder.loadTexts: aggrTable.setStatus('mandatory')
if mibBuilder.loadTexts: aggrTable.setDescription('List the aggregates defined on the system,\n                        including offline aggregates.')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "aggrIndex"))
if mibBuilder.loadTexts: aggrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aggrEntry.setDescription('Provide details about a particular aggregate.')
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aggrIndex.setDescription('A number that identifies this aggregate.  The\n                        aggrIndex is not related to any other table\n                        defined in this MIB, and may change as\n                        aggregates are created and destroyed.')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrName.setStatus('mandatory')
if mibBuilder.loadTexts: aggrName.setDescription('Name of the aggregate.  This includes no /vol/\n                        prefix.')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFSID.setStatus('mandatory')
if mibBuilder.loadTexts: aggrFSID.setDescription('Unique identifier for this aggregate.')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwningHost.setStatus('mandatory')
if mibBuilder.loadTexts: aggrOwningHost.setDescription('Indication of which host owns this aggregate.')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrState.setStatus('mandatory')
if mibBuilder.loadTexts: aggrState.setDescription("State of the aggregate, such as 'online' or\n                        'offline'.")
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aggrStatus.setDescription("Status of the aggregate, such as 'normal' or\n                        'reconstructing'. May include several values\n                        separated by comma and space.")
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: aggrOptions.setDescription('Options associated with the aggregate.')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrUUID.setStatus('mandatory')
if mibBuilder.loadTexts: aggrUUID.setDescription('A unique id associated with the aggregate.')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFlexvollist.setStatus('mandatory')
if mibBuilder.loadTexts: aggrFlexvollist.setDescription('List of all the flexible volumes within this\n\t\t\t aggregate.')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("aggregate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrType.setStatus('mandatory')
if mibBuilder.loadTexts: aggrType.setDescription('Type of this container, containers\n\t\t\t containing flexible volumes are aggregate.')
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aggrNumber.setDescription('Number of aggregates in the aggrTable.')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1), )
if mibBuilder.loadTexts: raidTable.setStatus('deprecated')
if mibBuilder.loadTexts: raidTable.setDescription('Display RAID configuration information for the\n\t\t\t root volume.  This table is deprecated - use\n\t\t\t raidVTable instead.')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('deprecated')
if mibBuilder.loadTexts: raidEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced disk drive.  This only works for\n\t\t\t disks contained within the root volume, and will\n\t\t\t include spare drives.  This object is \n\t\t\t deprecated - use raidVEntry instead.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('deprecated')
if mibBuilder.loadTexts: raidIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive.')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskName.setDescription('The name identifying the referenced disk drive.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("addingSpare", 7), ("spare", 8), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('deprecated')
if mibBuilder.loadTexts: raidStatus.setDescription('The status of the referenced disk drive.')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive.')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCompletionPerCent.setStatus('deprecated')
if mibBuilder.loadTexts: raidCompletionPerCent.setDescription('In the case when reconstruction/adding a\n\t\t\t  spare, verification or scrubbing is in progress,\n\t\t\t  the percent of such reconstruction, verification\n\t\t\t  or scrubbing that has been completed on the\n\t\t\t  referenced disk drive.')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2), )
if mibBuilder.loadTexts: raidVTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidVTable.setDescription('Display RAID configuration information.')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidVVol"), (0, "NETWORK-APPLIANCE-MIB", "raidVGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidVIndex"))
if mibBuilder.loadTexts: raidVEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidVEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced volume, raid group, and disk drive.')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVIndex.setStatus('mandatory')
if mibBuilder.loadTexts: raidVIndex.setDescription('A number that identifies this disk drive within \n\t\t\t the given volume and RAID group.')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskName.setDescription('The name identifying the referenced disk drive.')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVStatus.setStatus('mandatory')
if mibBuilder.loadTexts: raidVStatus.setDescription('The status of the referenced disk drive.')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: raidVScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: raidVScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedMb.setStatus('mandatory')
if mibBuilder.loadTexts: raidVUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: raidVUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive.')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalMb.setStatus('mandatory')
if mibBuilder.loadTexts: raidVTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: raidVTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCompletionPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: raidVCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy,\n\t\t\t  reconstruction/adding a spare, verification or \n\t\t\t  scrubbing is in progress, the percent of such \n\t\t\t  copy, reconstruction, verification or scrubbing \n\t\t\t  that has been completed on the referenced disk \n\t\t\t  drive.')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVVol.setStatus('mandatory')
if mibBuilder.loadTexts: raidVVol.setDescription("A number that identifies the volume that this entry\n\t\t\t belongs to.  The first volume is '1'.")
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroup.setStatus('mandatory')
if mibBuilder.loadTexts: raidVGroup.setDescription("A number that identifies the RAID group within the\n\t\t\t given volume that this entry belongs to.  The\n\t\t\t first RAID group is '1', and number across all plexes.")
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskNumber.setDescription('The number of disks within this RAID group.')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidVGroupNumber.setDescription('The number of RAID groups within this volume.')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidVSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive.')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVShelf.setStatus('mandatory')
if mibBuilder.loadTexts: raidVShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVBay.setStatus('mandatory')
if mibBuilder.loadTexts: raidVBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlex.setStatus('mandatory')
if mibBuilder.loadTexts: raidVPlex.setDescription("A number that identifies the plex within the\n                         given volume that this entry belongs to.  The\n                         first plex is '1'.")
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexGroup.setStatus('mandatory')
if mibBuilder.loadTexts: raidVPlexGroup.setDescription("A number that identifies the RAID group within\n                         the given plex that this entry belongs to.  The\n                         first RAID group is '1'.")
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidVPlexNumber.setDescription('The number of plexes within this volume.\n                        This number is always 1 or 2.')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexName.setStatus('mandatory')
if mibBuilder.loadTexts: raidVPlexName.setDescription("A name that identifies the plex that this entry\n\t\t\t belongs to.  A plex name can be anything, but\n                         is usually a string like 'plex0' or 'plex1'.")
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: raidVSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskModel.setDescription('Model string of the referenced disk drive.')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskRPM.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskRPM.setDescription('RPM of the referenced disk drive.')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPool.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskPool.setDescription('A name that identifies the disk pool that this entry \n\t\t belongs to.')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setDescription('When raidVStatus value is prefailed, this string identifies \n\t\t the name of the disk which is the copy target of the \n\t\t referenced prefailed disk.')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3), )
if mibBuilder.loadTexts: spareTable.setStatus('mandatory')
if mibBuilder.loadTexts: spareTable.setDescription('Display spare disk configuration information.')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: spareEntry.setDescription('Display configuration information for\n\t\t\t the referenced spare disk drive.')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spareIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of spare disk\n\t\t\t drives.')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskName.setDescription('The name identifying the referenced spare disk \n\t\t\t drive.')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spare", 1), ("addingspare", 2), ("bypassed", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spareStatus.setDescription('The status of the referenced spare disk drive.')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskId.setDescription('The disk identifier for the referenced spare disk\n\t\t\t drive.')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: spareScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced spare disk drive.')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: spareScsiId.setDescription('The identifier for the referenced spare disk drive\n\t\t\t on the referenced SCSI adapter.')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalMb.setStatus('mandatory')
if mibBuilder.loadTexts: spareTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced spare disk drive.')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: spareTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced spare disk drive.')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: spareSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive.')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: spareSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareShelf.setStatus('mandatory')
if mibBuilder.loadTexts: spareShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareBay.setStatus('mandatory')
if mibBuilder.loadTexts: spareBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePool.setStatus('mandatory')
if mibBuilder.loadTexts: sparePool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: spareSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskVendor.setDescription('The vendor of the referenced disk drive.')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskModel.setDescription('Model string of the referenced disk drive.')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskRPM.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskRPM.setDescription('RPM of the referenced disk drive.')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: spareDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskTotalCount.setDescription('The total number of disks on the system.')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskActiveCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskActiveCount.setDescription('The number of disks which are currently active,\n\t\t\tincluding parity disks.')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskReconstructingCount.setDescription('The number of disks which are\n\t\t\tcurrently being reconstructed.')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingParityCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskReconstructingParityCount.setDescription('The number of parity disks which are\n\t\t\tcurrently being reconstructed.')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVerifyingParityCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskVerifyingParityCount.setDescription('The number of parity disks which are\n\t\t\tcurrently being verified.')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskScrubbingCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskScrubbingCount.setDescription('The number of disks which are\n\t\t\tcurrently being scrubbed.')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskFailedCount.setDescription('The number of disks which are\n\t\t\tcurrently broken.')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSpareCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskSpareCount.setDescription('The number of available spare disks.')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAddingSpareCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskAddingSpareCount.setDescription('The number of spare disks which are\n\t\t\tcurrently being added into a RAID group.')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedMessage.setStatus('mandatory')
if mibBuilder.loadTexts: diskFailedMessage.setDescription('If diskFailedCount is non-zero, this is\n\t\t\ta string describing the failed disk or \n\t\t\tdisks.  Each failed disk is described with\n\t\t\ta sentence like\n\n\t\t\tParity disk in volume vol0, RAID group 1, failed.\n\n\t\t\tor\n\n\t\t\tDisk on adapter 8a, shelf 1, bay 0, failed.')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrefailedCount.setStatus('mandatory')
if mibBuilder.loadTexts: diskPrefailedCount.setDescription('The number of disks which are prefailed and marked\n\t\t\t  for rapid raid recovery.')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidVNumber.setDescription('Number of entries in the raidVTable table.\n\t\t\tThis is the number of volumes in the system.')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumber.setStatus('mandatory')
if mibBuilder.loadTexts: spareNumber.setDescription('Number of entries in the spareTable table.')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskNumber.setDescription('Number of entries in the otherDiskTable table.')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidPNumber.setDescription('Number of entries in the raidPTable table.\n\t\t\tThis is the number of volumes in the system.')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9), )
if mibBuilder.loadTexts: otherDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskTable.setDescription('Display out-of-service disk configuration information.')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "otherDiskIndex"))
if mibBuilder.loadTexts: otherDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskEntry.setDescription('Display configuration information for\n\t\t\t the referenced disk drive.')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of out-of-service\n\t\t\t diskdrives. Out-of-service disks include all disks\n                         that are not in service in a raid group or available\n                         as a spare disk.')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskDiskName.setDescription('The name identifying the referenced disk \n\t\t\t drive.')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broken", 1), ("bypassed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskStatus.setDescription('The status of the referenced disk drive.')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalMb.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive.')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskShelf.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskBay.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskPool.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskPool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskVendor.setDescription('The vendor of the referenced disk drive.')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskModel.setDescription('Model string of the referenced disk drive.')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskRPM.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskRPM.setDescription('RPM of the referenced disk drive.')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: otherDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10), )
if mibBuilder.loadTexts: raidPTable.setStatus('mandatory')
if mibBuilder.loadTexts: raidPTable.setDescription('Display RAID configuration information.')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidPVol"), (0, "NETWORK-APPLIANCE-MIB", "raidPPlex"), (0, "NETWORK-APPLIANCE-MIB", "raidPGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidPIndex"))
if mibBuilder.loadTexts: raidPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: raidPEntry.setDescription('Display RAID configuration information for\n\t\t\t the referenced volume, plex, raid group, and disk drive.')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: raidPIndex.setDescription('A number that identifies this disk drive within \n\t\t\t the given volume and RAID group.')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: raidPStatus.setDescription('The status of the referenced disk drive.')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPVol.setStatus('mandatory')
if mibBuilder.loadTexts: raidPVol.setDescription("A number that identifies the volume that this entry\n\t\t\t belongs to. The first volume is '1'.")
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlex.setStatus('mandatory')
if mibBuilder.loadTexts: raidPPlex.setDescription("A number that identifies the plex that this entry\n\t\t\t belongs to. The first plex is '1'.")
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroup.setStatus('mandatory')
if mibBuilder.loadTexts: raidPGroup.setDescription("A number that identifies the RAID group within the\n\t\t\t given plex that this entry belongs to. The\n\t\t\t first RAID group is '1'.")
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidPPlexNumber.setDescription('The number of plexes within this volume.\n                        This number is always 1 or 2.')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidPGroupNumber.setDescription('The number of RAID groups within this plex.')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskNumber.setDescription('The number of disks within this RAID group.')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexName.setStatus('mandatory')
if mibBuilder.loadTexts: raidPPlexName.setDescription("A name that identifies the plex that this entry\n\t\t\t belongs to.  A plex name can be anything, but\n                         is usually a string like 'plex0' or 'plex1'.")
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskName.setDescription('The name identifying the referenced disk drive.')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidPSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive.')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: raidPScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: raidPScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPShelf.setStatus('mandatory')
if mibBuilder.loadTexts: raidPShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPBay.setStatus('mandatory')
if mibBuilder.loadTexts: raidPBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: raidPSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedMb.setStatus('mandatory')
if mibBuilder.loadTexts: raidPUsedMb.setDescription('The number of MBytes currently in use on\n\t\t\t the referenced disk drive.')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: raidPUsedBlocks.setDescription('The number of Blocks currently in use on\n\t\t\t the referenced disk drive.')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalMb.setStatus('mandatory')
if mibBuilder.loadTexts: raidPTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: raidPTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCompletionPerCent.setStatus('mandatory')
if mibBuilder.loadTexts: raidPCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy,\n\t\t\t  reconstruction or adding a spare, verification or \n\t\t\t  scrubbing is in progress, the percent of such copy, \n\t\t\t  reconstruction, verification or scrubbing that has \n\t\t\t  been completed on the referenced disk drive.')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskModel.setDescription('Model string of the referenced disk drive.')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskRPM.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskRPM.setDescription('RPM of the referenced disk drive.')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPool.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskPool.setDescription('A name that identifies the disk pool that this entry \n\t\t belongs to.')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setDescription('When raidPStatus value is prefailed, this string identifies \n\t\t the name of the disk which is the copy target of the \n\t\t referenced prefailed disk.')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11), )
if mibBuilder.loadTexts: plexTable.setStatus('mandatory')
if mibBuilder.loadTexts: plexTable.setDescription('A table containing plex specific information.')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "plexIndex"))
if mibBuilder.loadTexts: plexEntry.setStatus('mandatory')
if mibBuilder.loadTexts: plexEntry.setDescription('Provide a report on file system plexes.')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexIndex.setStatus('mandatory')
if mibBuilder.loadTexts: plexIndex.setDescription('A number that identifies this entry for the\n                         referenced plex.')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('mandatory')
if mibBuilder.loadTexts: plexName.setDescription('The identifier of the plex.')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexVolName.setStatus('mandatory')
if mibBuilder.loadTexts: plexVolName.setDescription('The volume to which this plex belongs.')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("resyncing", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStatus.setStatus('mandatory')
if mibBuilder.loadTexts: plexStatus.setDescription('The status of the plex.')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexPercentResyncing.setStatus('mandatory')
if mibBuilder.loadTexts: plexPercentResyncing.setDescription('If the plex is resyncing, the percent \n                              completion of the resync.')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCount.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskCount.setDescription('Number of entries in the outOfDateDiskTable table.')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13), )
if mibBuilder.loadTexts: outOfDateDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskTable.setDescription('Display out-of-date disk information.')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "outOfDateDiskIndex"))
if mibBuilder.loadTexts: outOfDateDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskEntry.setDescription('Display information for the referenced\n\t\t\t out-of-date disk.')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskIndex.setDescription('A number that identifies this entry for the\n\t\t\t referenced disk drive in the list of out-of-date\n\t\t\t diskdrives.')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskDiskName.setDescription('The name identifying the referenced disk \n\t\t\t drive.')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskId.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskDiskId.setDescription('The disk identifier for the referenced disk\n\t\t\t drive.')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the\n\t\t\t referenced disk drive.')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskScsiId.setDescription('The identifier for the referenced disk drive\n\t\t\t on the referenced SCSI adapter.')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setDescription('The number of MBytes physically available\n\t\t\t on the referenced disk drive.')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setDescription('The number of Blocks physically available\n\t\t\t on the referenced disk drive.')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the primary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setDescription('The name identifying the secondary path to\n\t\t\tthe referenced disk drive.')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setDescription('A number that indicates which port of the\n\t\t\tdisk is being used by the secondary path to the disk.\n\t\t\tFor a dual-ported disk, values of portA and portB\n\t\t\tindicate which port is being used.\n\t\t\tIf the disk only has a single port, the value\n\t\t\tis portSingle, and if the port is not active, \n\t\t\tthe value is portNone.')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskShelf.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskShelf.setDescription('Number identifying the shelf where the disk\n\t\t\tis located.')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskBay.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskBay.setDescription('Number identifying the disk bay within\n\t\t\tthe shelf where the disk is located.')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskPool.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskPool.setDescription('A name that identifies the disk pool that this\n                         entry belongs to.')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setDescription("A number that specifies bytes per sector\n                         for this entry.  Values are '512' or '520'.")
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskVendor.setDescription('The vendor of the referenced disk drive.')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskModel.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskModel.setDescription('Model string of the referenced disk drive.')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskRPM.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskRPM.setDescription('RPM of the referenced disk drive.')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskType.setStatus('mandatory')
if mibBuilder.loadTexts: outOfDateDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, \n\t\t or ATA.')
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsIsEnabled.setDescription('Whether the CIFS protocol is active on the\n\t\t\t filer.')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLoginEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsIsLoginEnabled.setDescription('Whether new CIFS connections to the filer\n\t\t\t are currently allowed.')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cifsHostName.setDescription('The host name used by the CIFS protocol on this\n\t\t\t filer.')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAltNames.setStatus('mandatory')
if mibBuilder.loadTexts: cifsAltNames.setDescription('Alternate names recognized by the filer.')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainJoined.setStatus('mandatory')
if mibBuilder.loadTexts: cifsDomainJoined.setDescription('Has the filer joined an NT domain?\n\t\t\t If this value is true, cifsDomainName\n\t\t\t will contain the name of the domain.\n\t\t\t Otherwise, the filer may have joined\n\t\t\t a WorkGroup, and cifsWGName will contain\n\t\t\t the name of the WorkGroup. ')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: cifsDomainName.setDescription('The domain name used by the CIFS \n\t\t\t protocol on this filer.')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWGName.setStatus('mandatory')
if mibBuilder.loadTexts: cifsWGName.setDescription('The workgroup name (if any) used by \n\t\t\t the CIFS protocol on this filer.')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDCName.setStatus('mandatory')
if mibBuilder.loadTexts: cifsDCName.setDescription('The name of the Domain Controller used by\n\t\t\t this filer to authenticate users and file\n\t\t\t requests.')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsWinsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsIsWinsEnabled.setDescription('True if WINS name resolution is enabled\n\t\t\t on the filer.')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWinsServers.setStatus('mandatory')
if mibBuilder.loadTexts: cifsWinsServers.setDescription('The name(s) of the WINS servers registered\n\t\t\t with the filer.')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSecurityModel.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSecurityModel.setDescription('Which type of authentication semantics\n\t\t\t (Unix or PC) are in use for PC access to \n\t\t\t Unix files on the filer. If Unix semantics\n\t\t\t are in use, no ACL on a Unix file is ever \n\t\t\t checked. If PC semantics are in use, the \n\t\t\t share level ACL on the share containing the \n\t\t\t file is used for authentication instead of \n\t\t\t the group portion of the permissions on \n\t\t\t the file.')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPCGenericUser.setStatus('mandatory')
if mibBuilder.loadTexts: cifsPCGenericUser.setDescription('The name of the generic PC user, if any.  This\n\t\t\t username is used for CIFS access by Unix users\n\t\t\t who have not authenticated through CIFS or NT.')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOplocksEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOplocksEnabled.setDescription('Whether oplocks are enabled on the filer.')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setDescription('Whether level 2 oplocks are enabled on the filer.')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-preserve-case", 1), ("preserve-case", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPreserveCase.setStatus('mandatory')
if mibBuilder.loadTexts: cifsPreserveCase.setDescription('If this option is set to preserve-case\n\t\t\t (the default), all filename references\n\t\t\t will be case preserving.  Otherwise,\n\t\t\t they are forced to lowercase.')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinksEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSymlinksEnabled.setDescription('If this option is enabled, CIFS accesses will\n\t\t\t follow symbolic links using Unix semantics.')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-enabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setDescription('If this option is enabled, CIFS accesses will\n\t\t\t through symbolic links will check for cycles\n\t\t\t in the link graph.')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: cifsIsLicensed.setDescription('Whether the CIFS protocol is licensed on the\n\t\t\t filer.')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setDescription('True when cifs.per_client_stats are\n\t\t\t being collected.')
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cifsStatus.setDescription('Encoding of CIFS startup state on the filer.')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNeedPW.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNeedPW.setDescription('Does the administrative password need \n\t\t\t to be set before start?')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTimeToShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: cifsTimeToShutdown.setDescription('Time remaining until CIFS shutdown')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxConnections.setDescription('The maximum number of simultaneous CIFS \n\t\t\t connections allowed on the filer.')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxTrees.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxTrees.setDescription('The maximum number of simultaneous CIFS\n\t\t\t trees allowed on the filer.')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxShares.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxShares.setDescription('The maximum number of simultaneous CIFS\n\t\t\t shares allowed on the filer.')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxFiles.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxFiles.setDescription('The maximum number of concurrently open CIFS\n\t\t\t files and directories allowed on the filer.')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxACLs.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxACLs.setDescription('This object is deprecated, and always has a\n\t\t\t value of 0.')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsConnectedUsers.setStatus('mandatory')
if mibBuilder.loadTexts: cifsConnectedUsers.setDescription('The current number of CIFS users on the\n\t\t\t filer.')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTrees.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNTrees.setDescription('The current number of CIFS trees on the\n\t\t\t filer.')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNShares.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNShares.setDescription('The current number of CIFS shares on the\n\t\t\t filer.')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNSessions.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNSessions.setDescription('The current number of active CIFS sessions\n\t\t\t on the filer.')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNOpenFiles.setDescription('The number of open CIFS files and directories\n\t\t\t on the filer.')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenDirs.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNOpenDirs.setDescription('The number of open CIFS directories on the\n\t\t\t filer.')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setDescription('The number of open files waiting for oplock\n\t\t\t break messages to be sent.')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockAckWaits.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNOplockAckWaits.setDescription('The number of open files waiting for \n\t\t\t acknowledgements to oplock break messages.')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSuspectOps.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSuspectOps.setDescription('A smoothed average of the number of events \n\t\t\t per second of the type frequently seen\n\t\t\t during virus attacks.')
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalOps.setStatus('mandatory')
if mibBuilder.loadTexts: cifsTotalOps.setDescription('The number of CIFS operations done by the filer,\n\t\t\t since the last time the statistics were cleared.')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cifsTotalCalls.setDescription('The total number of CIFS calls received, since\n\t\t\t the last time the statistics were cleared.  This\n\t\t\t is the number of cifsTotalOps plus the number of\n\t\t\t miscellaneous operations that are not logged\n\t\t\t which were received in that time period.')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsBadCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cifsBadCalls.setDescription('The total number of received CIFS calls rejected,\n\t\t\t since the last time the statistics were cleared.')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetAttrs.setStatus('mandatory')
if mibBuilder.loadTexts: cifsGetAttrs.setDescription('The total number of CIFS operations to get\n\t\t\t the attributes on a file or directory, since\n\t\t\t the last time the statistics were reset.')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReads.setStatus('mandatory')
if mibBuilder.loadTexts: cifsReads.setDescription('The total number of CIFS Read operations on\n\t\t\t a file or directory, since the last time the\n\t\t\t statistics were reset.')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWrites.setStatus('mandatory')
if mibBuilder.loadTexts: cifsWrites.setDescription('The total number of CIFS write operations on\n\t\t\t a file or directory, since the last time the\n\t\t\t statistics were reset.')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLocks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsLocks.setDescription('The number of CIFS file locking requests\n\t\t\t since the last time the statistics were reset.')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpens.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpens.setDescription('The number of calls, via CIFS, to open\n\t\t\t a file or directory, since the last time\n\t\t\t the statistics were reset.')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDirOps.setStatus('mandatory')
if mibBuilder.loadTexts: cifsDirOps.setDescription('The number of CIFS directory operations,\n\t\t\t since the last time the statistics were reset.')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOthers.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOthers.setDescription("The number of CIFS operations, since the\n\t\t\t last time the statistics were reset, that\n\t\t\t don't fall into the categories for GetAttr,\n\t\t\t Read, Write, Lock, DirOp and Open.")
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProts.setStatus('mandatory')
if mibBuilder.loadTexts: smbNegProts.setDescription('The number of SMB NEGOTIATE requests,\n\t\t\t since the last time the statistics were cleared.')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbSessionSetupAndXs.setDescription('The number of SMB SESSION_SETUP_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbLogoffAndXs.setDescription('The number of SMB LOGOFF_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbTreeConnectAndXs.setDescription('The number of SMB TREE_CONNECT_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: smbTreeDisconnects.setDescription('The number of SMB TREE_DISCONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchos.setStatus('mandatory')
if mibBuilder.loadTexts: smbEchos.setDescription('The number of SMB ECHO requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancels.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancels.setDescription('The number of SMB NT_CANCEL requests, since the\n\t\t\t last time the statistics were cleared.')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCreateAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCreateAndXs.setDescription('The number of SMB NT_CREATE_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactCreates.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactCreates.setDescription('The number of SMB NT_TRANSACT_CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaries.setStatus('mandatory')
if mibBuilder.loadTexts: smbCreateTemporaries.setDescription('The SMB CREATE_TEMPORARY operation is not presently\n\t\t\t supported, so this value should always be zero.')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbReadAndXs.setDescription('The number of SMB READ_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbWriteAndXs.setDescription('The number of SMB WRITE_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: smbLockingAndXs.setDescription('The number of SMB LOCKING_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeeks.setStatus('mandatory')
if mibBuilder.loadTexts: smbSeeks.setDescription('The number of SMB SEEK requests,\n\t\t\t since the last time the statistics were cleared.')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushes.setStatus('mandatory')
if mibBuilder.loadTexts: smbFlushes.setDescription('The number of SMB FLUSH requests,\n\t\t\t since the last time the statistics were cleared.')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCloses.setStatus('mandatory')
if mibBuilder.loadTexts: smbCloses.setDescription('The number of SMB CLOSE requests,\n\t\t\t since the last time the statistics were cleared.')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: smbDeletes.setDescription('The number of SMB DELETE requests,\n\t\t\t since the last time the statistics were cleared.')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenames.setStatus('mandatory')
if mibBuilder.loadTexts: smbRenames.setDescription('The number of SMB RENAME requests,\n\t\t\t since the last time the statistics were cleared.')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMoves.setStatus('mandatory')
if mibBuilder.loadTexts: smbMoves.setDescription('The SMB MOVE request is not presently supported,\n\t\t\t so this value should always be zero.')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopies.setStatus('mandatory')
if mibBuilder.loadTexts: smbCopies.setDescription('The SMB COPY request is not presently supported,\n\t\t\t so this value should always be zero.')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirs.setStatus('mandatory')
if mibBuilder.loadTexts: smbDeleteDirs.setDescription('The number of SMB DELETE_DIRECTORY requests,\n\t\t\t since the last time the statistics were cleared.')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirs.setStatus('mandatory')
if mibBuilder.loadTexts: smbCheckDirs.setDescription('The SMB COPY request is not presently supported,\n\t\t\t so this value should always be zero.')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2s.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2FindNext2s.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2s.setStatus('mandatory')
if mibBuilder.loadTexts: smbFindClose2s.setDescription('The number of SMB FIND_CLOSE2 requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setDescription('The SMB TRANS2_GET_DFS_REFERRAL request is \n\t\t\t not presently supported, so this value should \n\t\t\t always be zero.')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setDescription('The SMB TRANS2_REPORT_DFS_INCONSISTENCY request is \n\t\t\t not presently supported, so this value should \n\t\t\t always be zero.')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFiles.setStatus('mandatory')
if mibBuilder.loadTexts: smbOpenPrintFiles.setDescription('The SMB OPEN_PRINT_FILE request is not supported,\n\t\t\t so this value should always be zero.')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueues.setStatus('mandatory')
if mibBuilder.loadTexts: smbGetPrintQueues.setDescription('The SMB GET_PRINT_QUEUE request is not supported,\n\t\t\t so this value should always be zero.')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctls.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactIoctls.setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirs.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2CreateDirs.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNs.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancelCNs.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t change notifications since the last time\n\t\t\t the statistics were cleared.')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOthers.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancelOthers.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t operations other than change notifications,\n\t\t\t since the last time the statistics\n\t\t\t were cleared.')
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setDescription('The number of SMB CLOSE_PRINT_FILE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreates.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreates.setDescription('The number of SMB CREATE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirs.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreateDirs.setDescription('The number of SMB CREATE_DIRECTORY requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNews.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreateNews.setDescription('The number of SMB CREATE_NEW requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReads.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbLockAndReads.setDescription('The number of SMB LOCK_AND_READ requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRanges.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbLockByteRanges.setDescription('The number of SMB LOCK_BYTE_RANGE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpens.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbOpens.setDescription('The number of SMB OPEN requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXs.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbOpenAndXs.setDescription('The number of SMB OPEN_ANDX requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExits.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbProcessExits.setDescription('The number of SMB PROCESS_EXIT requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfos.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfos.setDescription('The number of SMB QUERY_INFORMATION requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setDescription('The number of SMB QUERY_INFORMATION2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReads.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReads.setDescription('The number of SMB READ requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXs.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReadMPXs.setDescription('The SMB READ_MPX request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRaws.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReadRaws.setDescription('The number of SMB READ_RAW requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchs.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSearchs.setDescription('The number of SMB SEARCH requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfos.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSetInfos.setDescription('The number of SMB SET_INFORMATION requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2s.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSetInfo2s.setDescription('The number of SMB SET_INFORMATION2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setDescription('The number of SMB QUERY_INFORMATION_DISK\n\t\t\t requests, since the last time the statistics \n\t\t\t were cleared.')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setDescription('The number of SMB TRANS2_OPEN2 requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnects.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbTreeConnects.setDescription('The number of SMB TREE_CONNECT requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWrites.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWrites.setDescription('The number of SMB WRITE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setDescription('The number of SMB WRITE_AND_UNLOCK requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setDescription('The number of SMB WRITE_AND_CLOSE requests,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXs.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteMPXs.setDescription('The SMB WRITE_MPX request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setDescription('The SMB WRITE_PRINT_FILE request is not supported,\n\t\t\t so this value should always be zero.')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRaws.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteRaws.setDescription('The number of SMB WRITE_RAW requests,\n\t\t\t since the last time the statistics were cleared.')
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProtPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNegProtPct.setDescription('The number of SMB NEGOTIATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setDescription('The number of SMB SESSION_SETUP_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbLogoffAndXPct.setDescription('The number of SMB LOGOFF_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setDescription('The number of SMB TREE_CONNECT_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setDescription('The number of SMB TREE_DISCONNECT_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbEchoPct.setDescription('The number of SMB ECHO requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancelPct.setDescription('The number of SMB NT_CANCEL requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbCreateAndXPct.setDescription('The number of SMB NT_CREATE_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTransactCreatePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTransactCreatePct.setDescription('The number of SMB NT_TRANSACT_CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaryPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbCreateTemporaryPct.setDescription('The number of SMB CREATE_TEMPORARY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbReadAndXPct.setDescription('The number of SMB READ_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbWriteAndXPct.setDescription('The number of SMB WRITE_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbLockingAndXPct.setDescription('The number of SMB LOCKING_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeekPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbSeekPct.setDescription('The number of SMB SEEK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbFlushPct.setDescription('The number of SMB FLUSH requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbClosePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbClosePct.setDescription('The number of SMB CLOSE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbDeletePct.setDescription('The number of SMB DELETE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenamePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbRenamePct.setDescription('The number of SMB RENAME requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMovePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbMovePct.setDescription('The number of SMB MOVE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopyPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbCopyPct.setDescription('The number of SMB COPY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbDeleteDirPct.setDescription('The number of SMB DELETE_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbCheckDirPct.setDescription('The number of SMB CHECK_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: smbFindClose2Pct.setDescription('The number of SMB FIND_CLOSE2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setDescription('The number of SMB TRANS2_GET_DFS_REFERRAL\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setDescription('The number of SMB TRANS2_REPORT_DFS_INCONSISTENCY\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFilePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbOpenPrintFilePct.setDescription('The number of SMB OPEN_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueuePct.setStatus('mandatory')
if mibBuilder.loadTexts: smbGetPrintQueuePct.setDescription('The number of SMB GET_PRINT_QUEUE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setDescription('The number of SMB NT_TRANSACT_IOCTL requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY \n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancelCNPct.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t change notifications, as a percentage of\n\t\t\t total CIFS calls received, since the last\n\t\t\t time the statistics were cleared.')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOtherPct.setStatus('mandatory')
if mibBuilder.loadTexts: smbNTCancelOtherPct.setDescription('The number of SMB NT_CANCEL requests against\n\t\t\t calls other than change notifications, as \n\t\t\t a percentage of total CIFS calls received, \n\t\t\t since the last time the statistics were \n\t\t\t cleared.')
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setDescription('The number of SMB CLOSE_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreatePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreatePct.setDescription('The number of SMB CREATE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreateDirPct.setDescription('The number of SMB CREATE_DIRECTORY requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNewPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbCreateNewPct.setDescription('The number of SMB CREATE_NEW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setDescription('The number of SMB LOCK_AND_READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setDescription('The number of SMB LOCK_BYTE_RANGE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbOpenPct.setDescription('The number of SMB OPEN requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setDescription('The number of SMB OPEN_ANDX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExitPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbProcessExitPct.setDescription('The number of SMB PROCESS_EXIT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setDescription('The number of SMB QUERY_INFORMATION requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setDescription('The number of SMB QUERY_INFORMATION2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReadPct.setDescription('The number of SMB READ requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReadMPXPct.setDescription('The number of SMB READ_MPX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRawPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbReadRawPct.setDescription('The number of SMB READ_RAW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSearchPct.setDescription('The number of SMB SEARCH requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfoPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSetInfoPct.setDescription('The number of SMB SET_INFORMATION requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setDescription('The number of SMB SET_INFORMATION2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setDescription('The number of SMB QUERY_INFORMATION_DISK\n\t\t\t requests, as a percentage of total CIFS calls\n\t\t\t received, since the last time the statistics \n\t\t\t were cleared.')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setDescription('The number of SMB TRANS2_OPEN2 requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setDescription('The number of SMB TREE_CONNECT requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWritePct.setDescription('The number of SMB WRITE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setDescription('The number of SMB WRITE_AND_UNLOCK requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setDescription('The number of SMB WRITE_AND_CLOSE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setDescription('The number of SMB WRITE_MPX requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setDescription('The number of SMB WRITE_PRINT_FILE requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRawPct.setStatus('mandatory')
if mibBuilder.loadTexts: obsSmbWriteRawPct.setDescription('The number of SMB WRITE_RAW requests,\n\t\t\t as a percentage of total CIFS calls received,\n\t\t\t since the last time the statistics were cleared.')
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCancelLocks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsCancelLocks.setDescription('Undocumented')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWaitLocks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsWaitLocks.setDescription('Undocumented')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCopyToAligns.setStatus('mandatory')
if mibBuilder.loadTexts: cifsCopyToAligns.setDescription('Undocumented')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmalls.setStatus('mandatory')
if mibBuilder.loadTexts: cifsAlignedSmalls.setDescription('Undocumented')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLarges.setStatus('mandatory')
if mibBuilder.loadTexts: cifsAlignedLarges.setDescription('Undocumented')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmallRels.setStatus('mandatory')
if mibBuilder.loadTexts: cifsAlignedSmallRels.setDescription('Undocumented')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLargeRels.setStatus('mandatory')
if mibBuilder.loadTexts: cifsAlignedLargeRels.setDescription('Undocumented')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMbufWaits.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMbufWaits.setDescription('Undocumented')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNbtWaits.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNbtWaits.setDescription('Undocumented')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCwaWaits.setStatus('mandatory')
if mibBuilder.loadTexts: cifsCwaWaits.setDescription('Undocumented')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMultipleVCs.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMultipleVCs.setDescription('Undocumented')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPDCUpcalls.setStatus('mandatory')
if mibBuilder.loadTexts: cifsPDCUpcalls.setDescription('Undocumented')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setStatus('mandatory')
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setDescription('Undocumented')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNBTDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: cifsNBTDisconnects.setDescription('Undocumented')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSMBDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSMBDisconnects.setDescription('Undocumented')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDupDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: cifsDupDisconnects.setDescription('Undocumented')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setDescription('Undocumented')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setDescription('Undocumented')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setDescription('Undocumented')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setDescription('Undocumented')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setDescription('Undocumented')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setDescription('Undocumented')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharingErrorRetries.setStatus('mandatory')
if mibBuilder.loadTexts: cifsSharingErrorRetries.setDescription('Undocumented')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setDescription('Undocumented')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setDescription('Undocumented')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setDescription('Undocumented')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setStatus('mandatory')
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setDescription('Undocumented')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setStatus('mandatory')
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setDescription('Undocumented')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClearTextPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: cifsClearTextPasswd.setDescription('This indicates whether the cifs clients are \n\t\t\t\t using clear text passwords when authenticating \n\t\t\t\t with the filer. If cifsDomainJoined is false and\n\t\t\t\t this variable is also false, then the filer is\n\t\t\t\t using NT Security from a local user list.')
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncIsEnabled.setDescription('Whether Netcache is enabled on this system.')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncIsLicensed.setDescription('Whether Netcache is licensed on this system.')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIsEnabled.setDescription('Whether the Domain Name System (DNS)\n\t\t\tis enabled on this system.')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpIsEnabled.setDescription('Whether HTTP is enabled on this system.')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpIsEnabled.setDescription('Whether NNTP is enabled on this system.')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpIsLicensed.setDescription('Whether NNTP is licensed on this system.')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setDescription('Whether Microsoft Media Services (MMS)\n\t\t\tis enabled on this system.')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setDescription('Whether Microsoft Windows Media Service (MMS)\n\t\t\tis licensed on this system.')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setDescription('Whether Microsoft Windows Media Service Pro (MMS)\n\t\t\tis licensed on this system.')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setDescription('Whether the Real Time Streaming Protocol (RTSP)\n\t\t\tis enabled on this system.')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setDescription('Whether QuickTime is licensed on this system.')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setDescription('Whether Real Media streaming is licensed on \n\t\t\tthis system.')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setDescription('Whether Microsoft Windows Media Service Ultra (MMS)\n\t\t\tis licensed on this system.')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setDescription('Whether Real Media Pro streaming is licensed on \n\t\t\tthis system.')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setDescription('Whether Real Media Ultra streaming is licensed on \n\t\t\tthis system.')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncIcapIsEnabled.setDescription('Whether ICAP v0.95 is enabled on this system.')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncIcapIsLicensed.setDescription('Whether ICAP is licensed on this system.')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setDescription('Whether ICAP v1.0 is enabled on this system.')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setDescription('Whether the Global Request Manager (GRM) Server\n\t\t\tis enabled on this system.')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setDescription('Whether the Global Request Manager (GRM) Server\n\t\t\tis licensed on this system.')
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setDescription('Whether the Global Request Manager (GRM) Agent\n\t\t\tenabled on this system.')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setDescription('Whether the Global Request Manager (GRM) Agent\n\t\t\tis licensed on this system.')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCdIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncCdIsEnabled.setDescription('Whether Content Director is enabled on this system.')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setDescription('Whether HTTPS is enabled on this system.')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setDescription('Whether HTTPS is licensed on this system.')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCmsIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncCmsIsEnabled.setDescription('Whether CMS is enabled on this system.')
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ncVersion.setDescription('The Netcache version string.')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: ncAdminPort.setDescription('Netcache Admin Port number - this\n\t\t\t is the first in the list of admin\n\t\t\t ports configured for the NetCache.')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amNumber.setStatus('mandatory')
if mibBuilder.loadTexts: amNumber.setDescription('The number of entries in the acceleration monitor table.')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: amMonitor.setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the acceleration \n\t\tservers that netcache is probing.')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitorString.setStatus('mandatory')
if mibBuilder.loadTexts: amMonitorString.setDescription("Used in conjunction with amMonitor. This returns a string\n\t\tin format of: 'IP:port status' which reports the status\n\t\tof all the servers netcache is accelerating as of last\n\t\tstatus change.")
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: amTable.setStatus('mandatory')
if mibBuilder.loadTexts: amTable.setDescription('A list of acceleration server and port entries. The\n\t\t     number of entries is given by the value of amNumber.')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "amIndex"))
if mibBuilder.loadTexts: amEntry.setStatus('mandatory')
if mibBuilder.loadTexts: amEntry.setDescription('An acceleration monitor entry contains: the server\n\t\t    IP address, server port and the status.')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amIndex.setStatus('mandatory')
if mibBuilder.loadTexts: amIndex.setDescription(' A unique value for each entry in the acceleration monitor\n\t\t    table.')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amAddress.setStatus('mandatory')
if mibBuilder.loadTexts: amAddress.setDescription('The IP address of the acceleration server the NetCache\n\t\t    is monitoring.')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPort.setStatus('mandatory')
if mibBuilder.loadTexts: amPort.setDescription('The corresponding port on the server that NetCache is\n\t\t   monitoring.')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("up", 2), ("down", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amStatus.setStatus('mandatory')
if mibBuilder.loadTexts: amStatus.setDescription('The status of the service running on the server.\n\t\t    active -  in queue but no probes done yet.\n\t\t    up - the server is reachable and responding to probes.\n\t\t    down - the server is unreachable.\n\t\t    inactive - monitoring is disabled.')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigChanged.setStatus('mandatory')
if mibBuilder.loadTexts: ncLocalConfigChanged.setDescription('Whether the local configuration file on NetCache\n\t\t\twas changed without using DFM configuration management.')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ncLocalConfigVersion.setDescription("The current cache configuration's version.")
grmmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: grmMonitor.setDescription('Variable for user defined SNMP traps to monitor whether\t\t\tthere has been a status change of any of the GRM \n\t\tagents reporting to this GRM server.')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorString.setStatus('mandatory')
if mibBuilder.loadTexts: grmMonitorString.setDescription("Used in conjunction with grmMonitor. This returns a string\n\t\tin format of: 'IP status.' which reports the status\n\t\tof all the GRM agents reporting to this GRM server as of last\n\t\tstatus change.")
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: takeoverAddrs.setDescription('Indicates the list of interfaces and their corresponding IP\n\t\t addresses of the partner NetCache that this appliance has taken \t\t over.')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("takingover", 2), ("takenover", 3), ("giveback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverMode.setStatus('mandatory')
if mibBuilder.loadTexts: takeoverMode.setDescription('Indicates the current takeover mode of this appliance.')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("unknown", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverStatus.setStatus('mandatory')
if mibBuilder.loadTexts: takeoverStatus.setDescription("Indicates the current status of the takeover partner of \n\t\t this appliance. up(1) indicates that the takeover partner is \n\t\t reachable. unknown(2) indicates that an unknown error occured.\n\t\t failed(3) indicates that the partner has failed, takeoverAddrs\n\t\t indicates the partner's IP address this appliance has taken\n\t\t over.")
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncObjectsStored.setStatus('mandatory')
if mibBuilder.loadTexts: ncObjectsStored.setDescription('The total number of objects stored currently.')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncBytesToClients.setDescription('Total bytes sent to clients')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncBytesFromClients.setDescription('Total bytes received from clients')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncBytesToServers.setDescription('Total bytes sent to servers')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncBytesFromServers.setDescription('Total bytes received from servers')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpTotalRequests.setDescription('Total HTTP requests so far')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpHitRequests.setDescription('HTTP requests that resulted in hits so far')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpMissRequests.setDescription('HTTP requests that resulted in misses so far')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpServConns.setDescription('Number of currently open TCP/IP connections to HTTP servers (active and idle)')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpCliConns.setDescription('Number of currently open TCP/IP connections to HTTP clients (active and idle)')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBWSavings.setDescription('Bandwidth savings for HTTP requests')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitrate.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpObjHitrate.setDescription('Object Hitrate HTTP requests')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setDescription('Response time in milliseconds per byte for HTTP requests.')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests.')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests.')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests.')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests during the last 60 seconds.')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests during the last 60 seconds.')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests during the last 60 seconds.')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpTotalRespTime.setDescription('Total fetch time in milliseconds for HTTP requests')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setDescription('Total fetch time in milliseconds for HTTP HIT requests')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setDescription('Total fetch time in milliseconds for HTTP MISS requests')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBytesToClients.setDescription('Total HTTP bytes sent to clients')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBytesFromClients.setDescription('Total HTTP bytes received from clients')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBytesToServers.setDescription('Total HTTP bytes sent to servers')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBytesFromServers.setDescription('Total HTTP bytes received from servers')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests.\n\t\t\tThis object returns the most significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests.\n\t\t\tThis object returns the least significant 32 bits \n\t\t\tof the 64 bit unsigned integer.')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpReqRate.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpReqRate.setDescription('Request Rate for HTTP requests')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setDescription('HTTP object hit rate in the last 1 minute.')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setDescription('HTTP object hit rate in the last 5 minutes.')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setDescription('HTTP byte hit rate in the last 1 minute.')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setDescription('HTTP byte hit rate in the last 5 minutes.')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setDescription('Bandwidth savings for HTTP requests in the last\n\t\t\t 1 minute')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setDescription('Bandwidth savings for HTTP requests in the last\n\t\t\t 5 minutes')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpActiveServConns.setDescription('Number of currently active TCP/IP connections to HTTP servers')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpActiveCliConns.setDescription('Number of currently active TCP/IP connections to HTTP clients')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37), )
if mibBuilder.loadTexts: ncHttpAccelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelTable.setDescription('Number of kilobytes sent to and recieved from the client side\n\t\t\tper acceleration rule')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpAccelIndex"))
if mibBuilder.loadTexts: ncHttpAccelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n \t\t\treceived to/from the clients side per acceleration \n\t\t\trule')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelIndex.setDescription('A unique value for each entry in the http acceleration\n\t\t\t stats table')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n \t\t\tfor this acceleration rule')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n \t\t\tthis acceleration rule')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelHits.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38), )
if mibBuilder.loadTexts: ncHttpsAccelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelTable.setDescription('Number of kilobytes sent to and recieved from the client side\n \t\t\tper acceleration rule')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpsAccelIndex"))
if mibBuilder.loadTexts: ncHttpsAccelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n\t\t\t received to/from the clients side per acceleration\n\t\t\t\trule')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelIndex.setDescription('A unique value for each entry in the http acceleration\n\t\t\t stats table')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n\t\t\t for this acceleration rule')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n\t\t\t this acceleration rule')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelHits.setStatus('mandatory')
if mibBuilder.loadTexts: ncHttpsAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpTotalRequests.setDescription('NNTP total requests so far')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCacheableRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpCacheableRequests.setDescription('NNTP requests that were cacheable')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpProxyRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpProxyRequests.setDescription('NNTP requests that were non-cacheable')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpServConns.setDescription('Number of currently open TCP/IP connections to NNTP servers (active and idle)')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpCliConns.setDescription('Number of currently open TCP/IP connections to NNTP clients (active and idle)')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpBWSavings.setDescription('Bandwidth savings for NNTP requests')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setDescription('Response time per byte for NNTP requests')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpBytesToClients.setDescription('Total NNTP bytes sent to clients')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpBytesFromClients.setDescription('Total NNTP bytes received from clients')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpBytesToServers.setDescription('Total NNTP bytes sent to servers')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpBytesFromServers.setDescription('Total NNTP bytes received from servers')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpObjHitrate.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpObjHitrate.setDescription('Object Hitrate of NNTP requests')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpActiveServConns.setDescription('Number of currently active TCP/IP connections to NNTP servers')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncNntpActiveCliConns.setDescription('Number of currently active TCP/IP connections to NNTP clients')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpTotalRequests.setDescription('FTP total requests so far')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpHitRequests.setDescription('FTP requests that resulted in hits so far')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpMissRequests.setDescription('FTP requests that resulted in misses so far')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpServConns.setDescription('Number of currently open TCP/IP connections to FTP servers (active and idle)')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpCliConns.setDescription('Number of currently open TCP/IP connections to FTP clients (active and idle)')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpBWSavings.setDescription('Bandwidth savings for FTP requests')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setDescription('Response time per byte for FTP requests')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpBytesToClients.setDescription('Total FTP bytes sent to clients')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpBytesFromClients.setDescription('Total FTP bytes received from clients')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpBytesToServers.setDescription('Total FTP bytes sent to servers')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpBytesFromServers.setDescription('Total FTP bytes received from servers')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpObjHitrate.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpObjHitrate.setDescription('Object Hitrate of FTP requests')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpActiveServConns.setDescription('Number of currently active TCP/IP connections to FTP servers')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncFtpActiveCliConns.setDescription('Number of currently active TCP/IP connections to FTP clients')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingServConns.setDescription('Number of currently open TCP/IP connections to streaming servers (active and idle)')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingCliConns.setDescription('Number of currently open TCP/IP connections to streaming clients (active and idle)')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingBWSavings.setDescription('Bandwidth savings for all streaming requests')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setDescription('Response time per byte for all streaming requests')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingHitRequests.setDescription('STREAMING requests that resulted in hits so far')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMissRequests.setDescription('STREAMING requests that resulted in misses so far')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingTotalRequests.setDescription('STREAMING total requests so far')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setDescription('Total Streaming Live bytes sent to clients')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setDescription('Total Streaming Live bytes received from clients')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setDescription('Total Streaming Live bytes sent to servers')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setDescription('Total Streaming Live bytes received from servers')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setDescription('Total Streaming Proxy bytes sent to clients')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setDescription('Total Streaming Proxy bytes received from clients')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setDescription('Total Streaming Proxy bytes sent to servers')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setDescription('Total Streaming Proxy bytes received from servers')
ncStreamingOndemandBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingOndemandBytesToClients.setDescription('Total Streaming Ondemand bytes sent to clients')
ncStreamingOndemandBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromClients.setDescription('Total Streaming Ondemand bytes received from clients')
ncStreamingOndemandBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingOndemandBytesToServers.setDescription('Total Streaming Ondemand bytes sent to servers')
ncStreamingOndemandBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingOndemandBytesFromServers.setDescription('Total Streaming Ondemand bytes received from servers')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingObjHitrate.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingObjHitrate.setDescription('Object Hitrate of Streaming requests')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setDescription('Total Streaming Real bytes sent to clients')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setDescription('Total Streaming Real bytes received from clients')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setDescription('Total Streaming Real bytes sent to servers')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setDescription('Total Streaming Real bytes received from servers')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setDescription('Total Streaming Mms bytes sent to clients')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setDescription('Total Streaming Mms bytes received from clients')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setDescription('Total Streaming Mms bytes sent to servers')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setDescription('Total Streaming Mms bytes received from servers')
ncStreamingQuickTimeBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToClients.setDescription('Total Streaming QuickTime bytes sent to clients')
ncStreamingQuickTimeBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromClients.setDescription('Total Streaming QuickTime bytes received from clients')
ncStreamingQuickTimeBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesToServers.setDescription('Total Streaming QuickTime bytes sent to servers')
ncStreamingQuickTimeBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeBytesFromServers.setDescription('Total Streaming QuickTime bytes received from servers')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setDescription('Bandwidth savings for all Live streaming requests')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setDescription('Bandwidth savings for all VOD streaming requests')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setDescription('Bandwidth savings for all Real streaming requests')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setDescription('Bandwidth savings for all MMS streaming requests')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setDescription('Bandwidth savings for all QuickTime streaming requests')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveServConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingActiveServConns.setDescription('Number of currently active TCP/IP connections to streaming servers')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setDescription('Number of currently active TCP/IP connections to streaming clients')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setDescription('Total Streaming Windows Media RTSP bytes sent to clients')
ncStreamingRtspWMBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromClients.setDescription('Total Streaming Windows Media RTSP bytes received from clients')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setDescription('Total Streaming Windows Media RTSP bytes sent to servers')
ncStreamingRtspWMBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesFromServers.setDescription('Total Streaming Windows Media RTSP bytes received from servers')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setDescription('Bandwidth savings for all Windows Media RTSP streaming requests')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45), )
if mibBuilder.loadTexts: ncStreamingAccelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelTable.setDescription('Number of kilobytes sent to and recieved from the \n\t\t\t client side per acceleration rule')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncStreamingAccelIndex"))
if mibBuilder.loadTexts: ncStreamingAccelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelEntry.setDescription('Each entry contains the number of kilobytes sent and\n\t\t\t received to/from the clients side per acceleration\n\t\t\t rule')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelIndex.setDescription('A unique value for each entry in the streaming\n\t\t\t acceleration  stats table')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client\n\t\t\t for this acceleration rule')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for\n\t\t\t this acceleration rule')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelHits.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingAccelHits.setDescription(' The number of times this acceleration rule has \n\t\t\t\tbeen hit')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setStatus('mandatory')
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setDescription('Number of clients delayed because of a Bandwidth Limit')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncTotalBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: ncTotalBWSavings.setDescription('Total Bandwidth savings for HTTP, FTP, NNTP, and Streaming protocols')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsRequestsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsRequestsReceived.setDescription('Total DNS requests received from clients')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsCacheHits.setDescription('Hits on the DNS cache.  This includes hits\n\t\t\tfor DNS lookups generated by NetCache internally')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsCacheMisses.setDescription('Misses on the DNS cache.  This includes misses\n\t\t\tfor DNS lookups generated by NetCache internally')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setDescription('Forward DNS lookups that are successful')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setDescription('Forward DNS lookups that failed')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setDescription('Forward DNS lookups that are in progress')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setDescription('Reverse DNS lookups that are successful')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setDescription('Reverse DNS lookups that failed')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setDescription('Reverse DNS lookups that are in progress')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setDescription('Has Full Service Resolver been enabled')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setDescription('Has Full Service Resolver initalised')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setDescription("Full Service Resolver's Forward Lookups")
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setDescription("Full Service Resolver's Pending Forward Lookups")
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setDescription("Full Service Resolver's Reverse Lookups")
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setStatus('mandatory')
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setDescription("Full Service Resolver's Pending Reverse Lookups")
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setStatus('mandatory')
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setDescription("Whether a possible ntlm problem is detected \n\t\t\tin the appliance's domain environment.")
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ncRMMemTotal.setDescription('Total memory in kilobytes available for \n\t\t\t\t\tallocations after boot. It does not imply \n\t\t\t\t\tthe total system memory.')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: ncRMMemFree.setDescription('Current free memory in kilobytes available \n\t\t\t\t\tfor allocations.')
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorOn.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorOn.setDescription('Indicates whether snapmirror has been turned on\n\t\t\tor not.')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setDescription('Number of active SnapMirror restores.')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setDescription('Number of scheduled SnapMirror restores.')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorBackupNumber.setDescription('Number of active SnapMirror backups.')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setDescription('Number of SnapMirror backups which completed.\n\t\t\tReset on reboot.')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setDescription('Number of SnapMirror restores which completed.\n\t\t\tReset on reboot.')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupAborts.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorBackupAborts.setDescription('Number of SnapMirror backup transfers which have\n\t\t\taborted. Reset on reboot.')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setDescription('Number of SnapMirror restore temporary aborts.\n\t\t\tReset on reboot.')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setDescription('Number of SnapMirror restore permanent aborts.\n\t\t\tReset on reboot.')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setDescription('Number of Megabytes written by SnapMirror.\n\t\t\tReset on reboot.')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorReadBytes.setDescription('Number of Megabytes read by SnapMirror.\n\t\t\tReset on reboot.')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setDescription('Number of active SnapMirror destination.')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setDescription('Number of active SnapMirror Source.')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setDescription('Total number of successful snapmirror transfers to\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setDescription('Total number of successful snapmirror transfers\n\t\t\tfrom the source. Persistent across reboot.')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setDescription('Total number of failed SnapMirror transfers on\n\t\t\tthe source. Persistent across reboot.')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setDescription('Total number of failed SnapMirror transfers on\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setDescription('Total number of deferred snapmirror transfer on\n\t\t\tthe destination. Persistent across reboot.')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorIsLicensed.setDescription('Whether the snapmirror is licensed on the filer.')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20), )
if mibBuilder.loadTexts: snapmirrorStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorStatusTable.setDescription('provide a list of snapmirror status.')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorIndex"))
if mibBuilder.loadTexts: snapmirrorStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorStatusEntry.setDescription('Provide a report of current status of snapmirror.')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorIndex.setDescription('Index into the snapmirror status table.')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSrc.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorSrc.setDescription('Source of the snapmirror. <filer>:<vol> or\n\t\t\t<filer>:/vol/<qtree_name>')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorDst.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorDst.setDescription('Destination of the snapmirror.\n\t\t\t<filer>:<vol> or <filer>:/vol/<qtree_name>')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("migrating", 5), ("quiescing", 6), ("resyncing", 7), ("waiting", 8), ("syncing", 9), ("in-sync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorStatus.setDescription('Current transfer status of the snapmirror.')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapmirrored", 2), ("broken-off", 3), ("quiesced", 4), ("source", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorState.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorState.setDescription('Current state of the snapmirror.')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLag.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorLag.setDescription('How far behind from the source the destination is.')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setDescription('Total number of successful transfer since the snapmirror\n\t\tis initialized. Persistent across reboot.')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since\n\t\tthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalFailures.setDescription('Total number of failed or aborted transfer since\n\t\tthe snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setDescription('Total number of deferment since the snapmirror\n\t\tis initialized. Persistent across reboot.')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setDescription('Total transfer size in MB for the snapmirror.\n\t\tReset on reboot.')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the \n\t\tsnapmirror. Reset on reboot.')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorThrottleValue.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorThrottleValue.setDescription('Current throttle value for the snapmirror.')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setDescription('Timestamp of the last snapshot successfully transferred from \n\t\t the source to the destination.')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setDescription('The name of the current base snapshot for the snapmirror.')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransType.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorLastTransType.setDescription('The type of the previous successful transfer.')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setDescription('Last successful transfer size in MB for the snapmirror.')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the\n\t\t snapmirror.')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorSchedule.setDescription('Update schedule for the snapmirror in conf file format.')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setDescription('Description of the update schedule for the snapmirror.')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorArguments.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorArguments.setDescription('Arguments for the snapmirror in conf file format.')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setDescription('The number of times changing from sync mode to async mode \n\t\tsince the snapmirror is initialized. Persistent across reboot.')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21), )
if mibBuilder.loadTexts: snapmirrorConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnTable.setDescription('Provide a list of snapmirror connection definitions.')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorConnIndex"))
if mibBuilder.loadTexts: snapmirrorConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnEntry.setDescription('Provide a report of a defined multipath connection.')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnIndex.setDescription('Index into the snapmirror multipath connection table.')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnName.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnName.setDescription('The name of the snapmirror multipath connection.')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi", 1), ("failover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnType.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnType.setDescription('The type of the snapmirror multipath connection.')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc1.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnSrc1.setDescription('The name of the source for the first path.')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst1.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnDst1.setDescription('The name of the destination for the first path.')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc2.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnSrc2.setDescription('The name of the source for the second path.')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst2.setStatus('mandatory')
if mibBuilder.loadTexts: snapmirrorConnDst2.setDescription('The name of the destination for the second path.')
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svOn.setStatus('mandatory')
if mibBuilder.loadTexts: svOn.setDescription('Indicates whether snapvault has been turned on\n\t\t\tor not.')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveDstNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemActiveDstNumber.setDescription('Number of active snapvault destionations.')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setDescription('Number of active snapvault sources.')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setDescription('Total number of successful snapvault transfers\n\t\t\tfrom the snapvault primary. Persistent across reboot.')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setDescription('Total number of successful snapvault transfers to\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setDescription('Total number of failed snapvault transfers on\n\t\t\tthe snapvault primary. Persistent across reboot.')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setDescription('Total number of failed snapvault transfers on\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setStatus('mandatory')
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setDescription('Total number of deferred snapvault transfers on\n\t\t\tthe snapvault secondary. Persistent across reboot.')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrimaryIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: svPrimaryIsLicensed.setDescription('Whether the snapvault_client(primary) is licensed on the filer.')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecondaryIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: svSecondaryIsLicensed.setDescription('Whether the snapvault_server(secondary) is licensed on the filer.')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11), )
if mibBuilder.loadTexts: snapvaultStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultStatusTable.setDescription('provide a list of snapvault status.')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svIndex"))
if mibBuilder.loadTexts: snapvaultStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultStatusEntry.setDescription('Provide a report of current status of snapvault.')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svIndex.setDescription('Index into the snapvault status table.')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrc.setStatus('mandatory')
if mibBuilder.loadTexts: svSrc.setDescription('Source of the snapvault relationship.\n\t\t\t<filer>:/vol/<qtree_name>')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDst.setStatus('mandatory')
if mibBuilder.loadTexts: svDst.setDescription('Destionation of the snapvault relationship.\n\t\t\t<filer>:/vol/<qtree_name>')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("quiescing", 6), ("resyncing", 7), ("paused", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svStatus.setDescription('Current transfer status of the snapvault relationship.')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapvaulted", 2), ("broken-off", 3), ("quiesced", 4), ("source", 5), ("unknown", 6), ("restoring", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svState.setStatus('mandatory')
if mibBuilder.loadTexts: svState.setDescription('Current state of the snapvault relationship.')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLag.setStatus('mandatory')
if mibBuilder.loadTexts: svLag.setDescription('How far behind from the source the destination is.')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalSuccesses.setDescription('Total number of successful transfer since the snapvault\n\t\t relationship was established. Persistent across reboot.')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalRestartSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since\n\t\t the snapvault relationship was established. Persistent \n\t\t across reboot.')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalFailures.setDescription('Total number of failed or aborted transfer since\n\t\t the snapvault relationship was established. Persistent \n\t\t across reboot.')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalDeferments.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalDeferments.setDescription('Total number of deferment since the snapvault\n\t\t relationship was established. Persistent across reboot.')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransMBs.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalTransMBs.setDescription('Total transfer size in MB for the snapvault.\n\t\tReset on reboot.')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the \n\t\t snapvault relationship. Reset on reboot.')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svThrottleValue.setStatus('mandatory')
if mibBuilder.loadTexts: svThrottleValue.setDescription('Current throttle value for the snapvault relationship.')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrcSnapshotTime.setStatus('mandatory')
if mibBuilder.loadTexts: svSrcSnapshotTime.setDescription('Time when the source snapshot was created. The time in \n\t\tseconds since January 1, 1970. The source snapshot here \n\t\tis the last snapshot successfully transferred from the \n\t\tsource to the destination.')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svBaseSnapshot.setStatus('mandatory')
if mibBuilder.loadTexts: svBaseSnapshot.setDescription('The name of the current base snapshot for the \n\t\t snapvault relationship.')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransType.setStatus('mandatory')
if mibBuilder.loadTexts: svLastTransType.setDescription('The type of the previous successful transfer.')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransMBs.setStatus('mandatory')
if mibBuilder.loadTexts: svLastTransMBs.setDescription('Last successful transfer size in MB for the snapvault \n\t\t relationship.')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: svLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the\n\t\t snapvault relationship.')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12), )
if mibBuilder.loadTexts: snapvaultHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultHostTable.setDescription('Provide a list of remote snapvault hosts.')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svHostIndex"))
if mibBuilder.loadTexts: snapvaultHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultHostEntry.setDescription('Provide snapvault statistics for a remote host\n\t\t\t which has one or more current established \n\t\t\t relationships with the local snapvault system.')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svHostIndex.setDescription('Index into the snapvault remote host table.')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostName.setStatus('mandatory')
if mibBuilder.loadTexts: svHostName.setDescription('The name of the remote snapvault host.')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostType.setStatus('mandatory')
if mibBuilder.loadTexts: svHostType.setDescription('The type of the remote snapvault host.')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: svHostTotalSuccesses.setDescription('Total number of successful snapvault transfers\n\t\tfor all current established relationships between\n\t\tthe local snapvault system and the given remote host.')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: svHostTotalFailures.setDescription('Total number of failed snapvault transfers\n\t\tfor all current established relationships between\n\t\tthe local snapvault system and the given remote host.')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalDeferments.setStatus('mandatory')
if mibBuilder.loadTexts: svHostTotalDeferments.setDescription('Total number of deferred snapvault transfers for\n\t\tall current established relationships between\n\t\tthe local snapvault system and the given remote host.\n\t\t0 for snapvault client host.')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13), )
if mibBuilder.loadTexts: snapvaultSchedTable.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultSchedTable.setDescription('Provide a list of snapvault schedules.')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svSchedIndex"))
if mibBuilder.loadTexts: snapvaultSchedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snapvaultSchedEntry.setDescription('Provide a report of schedules of snapvault.')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedIndex.setDescription('Index into the snapvault schedule table.')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedVolume.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedVolume.setDescription('The name of the volume on the snapvault for the \n\t\t snapvault schedule. This does not have a /vol/ prefix.')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSnapshot.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedSnapshot.setDescription('The name of the snapshot for the snapvault schedule.')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("queued", 2), ("active", 3), ("aborting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedStatus.setDescription('Current status of the snapvault schedule.')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("xfer", 2), ("create", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedType.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedType.setDescription('The type of the snapvault schedule.')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: svSchedSchedule.setDescription('The update schedule of the snapvault.')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setDescription('Whether the snapvault disaster recovery primary is\n\t\tlicensed on the filer.')
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpOn.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpOn.setDescription('Indicates whether ndmpd has been turned on or not.')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpSessionOpened.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpSessionOpened.setDescription('Total number of ndmpd sessions currently opened.\n\t\tSessions may be running backups, restores or neither.')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupActive.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpBackupActive.setDescription('Number of ndmpd backups currently active.')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreActive.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpRestoreActive.setDescription('Number of ndmpd restores currently active.')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpTapeActive.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpTapeActive.setDescription('Number of tape drives currently active.')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpBackupSuccesses.setDescription('Number of ndmpd backups that succeeded.')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setDescription('Number of ndmpd restores that succeeded.')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailures.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpBackupFailures.setDescription('Number of ndmpd backups that failed.')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailures.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpRestoreFailures.setDescription('Number of ndmpd restores that failed.')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpBackupFailureReason.setDescription('When the ndmpBackupFailures value is non-zero, this string\n\t\tdescribes the reason for the most recent backup failure.')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setDescription('When the ndmpRestoreFailures value is non-zero, this string\n\t\tdescribes the reason for the most recent restore failure.')
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdOn.setStatus('mandatory')
if mibBuilder.loadTexts: ftpdOn.setDescription('Indicates whether ftpd has been turned on or not.')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdCurrentConns.setStatus('mandatory')
if mibBuilder.loadTexts: ftpdCurrentConns.setDescription('Number of currently open TCP/IP connections to ftp daemon (active and idle)')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdMaxConns.setStatus('mandatory')
if mibBuilder.loadTexts: ftpdMaxConns.setDescription('Number of maximum simultaneous TCP/IP connections to ftp daemon')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdTotalConns.setStatus('mandatory')
if mibBuilder.loadTexts: ftpdTotalConns.setDescription('Number of total TCP/IP connections to ftp daemon')
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricInstances.setStatus('mandatory')
if mibBuilder.loadTexts: fabricInstances.setDescription('The number of distinct fabrics present.')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2), )
if mibBuilder.loadTexts: fabricTable.setStatus('mandatory')
if mibBuilder.loadTexts: fabricTable.setDescription('Provide a list of fabrics.')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fabricIndex"))
if mibBuilder.loadTexts: fabricEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fabricEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of fabrics.')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fabricIndex.setDescription('A number that identifies this fabric entry.')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fabricStatus.setDescription('This indicates the overall status of the SAN fabric(s).')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: fabricStatusMessage.setDescription('A string describing the fabric status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricName.setStatus('mandatory')
if mibBuilder.loadTexts: fabricName.setDescription('This is the WWN of the fabric.')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("other", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricOwner.setStatus('mandatory')
if mibBuilder.loadTexts: fabricOwner.setDescription('This indicates who owns the management of\n\t\t\tthe fabric.')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3), )
if mibBuilder.loadTexts: switchTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchTable.setDescription('Provide a list of switches and hubs\n\t\t\tconnected to the fabric.')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "switchFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of fabric interconnect elements.  This\n\t\t\tinclude switches and hubs.')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: switchIndex.setDescription('A number that identifies this switch entry.')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchName.setStatus('mandatory')
if mibBuilder.loadTexts: switchName.setDescription('This is the WWN of the switch.')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSymbolicName.setStatus('mandatory')
if mibBuilder.loadTexts: switchSymbolicName.setDescription('This is the symbolic name of the switch.')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hub", 1), ("switch", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('mandatory')
if mibBuilder.loadTexts: switchType.setDescription('The type of the switch.')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDomain.setStatus('mandatory')
if mibBuilder.loadTexts: switchDomain.setDescription('The domain identifier of the switch.')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchManagementId.setStatus('mandatory')
if mibBuilder.loadTexts: switchManagementId.setDescription('The in-band management identifier of the switch.')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchStatus.setDescription('The current status of the switch.')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: switchStatusMessage.setDescription('A string describing the switch status,\n\t\t\tincluding a description of the condition (if\n\t\t\tany) that caused the status to be anything\n\t\t\tother than ok(3).')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: switchLinkSpeed.setDescription('The link speed of the switch.  The value is an integer\n\t\t\twhose units are Gbits (for example, a value of 2 represents\n\t\t\ta link speed of 2 Gbit).')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: switchHighPacketsProcessed.setDescription('Number of Packets successfully processed\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the most\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: switchLowPacketsProcessed.setDescription('Number of Packets successfully processed\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the least\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer.')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: switchHighPacketsRejected.setDescription('Number of Packets rejected\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the most\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: switchLowPacketsRejected.setDescription('Number of Packets rejected\n\t\t\tsince the last reboot/reset of the switch.\n\t\t\tThis object returns the least\n\t\t\tsignificant 32 bits of the 64 bit unsigned integer.')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFabricIndex.setStatus('mandatory')
if mibBuilder.loadTexts: switchFabricIndex.setDescription('The index of the fabric on which this switch\n\t\t\tresides.  The value ranges from 1 to the value\n\t\t\tof fabricInstances.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('Provide a list of ports\n\t\t\tconnected to the fabric.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "portFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "portSwitchIndex"), (0, "NETWORK-APPLIANCE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('Provide a report of current configuration and\n\t\t\tstatus of ports in the fabric.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('A number that identifies this port entry.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
if mibBuilder.loadTexts: portName.setDescription('This is the WWN of the port.')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portSwitchIndex.setDescription('The index of the switch on which this port\n\t\t\tresides.  The value ranges from 1 to the number of\n\t\t\tof switches.')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: portSwitchName.setDescription('This is the WWN of the switch to which\n\t\t\tthe port is attached.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portNumber.setDescription('The port number on the switch.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unidentified", 1), ("n-port", 2), ("nl-port", 3), ("f-port", 4), ("fl-port", 5), ("e-port", 6), ("b-port", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
if mibBuilder.loadTexts: portType.setDescription('The type of the port.')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('mandatory')
if mibBuilder.loadTexts: portState.setDescription('The current state of the port.')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFabricIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portFabricIndex.setDescription('The index of the fabric on which this port\n\t\t\tresides.  The value ranges from 1 to the value\n\t\t\tof fabricInstances.')
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpActives.setStatus('mandatory')
if mibBuilder.loadTexts: dmpActives.setDescription('Number of active dump.')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: dmpAttempts.setDescription('Number of dump attempted.')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: dmpSuccesses.setDescription('Number of dump succeeded.')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpFailures.setStatus('mandatory')
if mibBuilder.loadTexts: dmpFailures.setDescription('Number of dump failed.')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5), )
if mibBuilder.loadTexts: dmpTable.setStatus('mandatory')
if mibBuilder.loadTexts: dmpTable.setDescription('Provides a report of dumps on each\n\t\t\t\t dump subtree.')
dmpSubtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dmpIndex"))
if mibBuilder.loadTexts: dmpSubtreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dmpSubtreeEntry.setDescription('Shows statistics of dumps on an unique\n\t\t\t\t dump subtree.')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dmpIndex.setDescription('Index into the subtree dump table.')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStPath.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStPath.setDescription('The full path to the dump subtree. In the\n\t\t\t\t format of /vol/<volname>/...')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStAttempts.setDescription('No. of dump attempted for the subtree.')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStSuccesses.setDescription('No. of dump succeeded for the subtree.')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStFailures.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStFailures.setDescription('No. of dump failed for the subtree.')
lastdump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6))
lastsuccess = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7))
dmpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpTime.setStatus('mandatory')
if mibBuilder.loadTexts: dmpTime.setDescription('The start time for the last attempt\n\t\t\t\t to dump the subtree, including the\n\t\t\t\t currently running one. The time in\n\t\t\t\t seconds since January 1, 1970.')
dmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("restartable", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStatus.setDescription('The status for the last dump attempt\n\t\t\t\t on the subtree.')
dmpLevel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dmpLevel.setDescription('The level of the dump.')
dmpNumFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: dmpNumFiles.setDescription('The number of files dumped.')
dmpDataAmount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDataAmount.setStatus('mandatory')
if mibBuilder.loadTexts: dmpDataAmount.setDescription('The amount of data dumped, in Megabytes.')
dmpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: dmpStartTime.setDescription('The start time of the dump. The time is\n\t\t\t\t in seconds since January 1, 1970.')
dmpDuration = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDuration.setStatus('mandatory')
if mibBuilder.loadTexts: dmpDuration.setDescription('The duration of the dump.')
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstActives.setStatus('mandatory')
if mibBuilder.loadTexts: rstActives.setDescription('Number of active restore.')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: rstAttempts.setDescription('Number of restore attempted.')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: rstSuccesses.setDescription('Number of restore succeeded.')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstFailures.setStatus('mandatory')
if mibBuilder.loadTexts: rstFailures.setDescription('Number of restore failed.')
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsIsLicensed.setStatus('optional')
if mibBuilder.loadTexts: dafsIsLicensed.setDescription('Whether the dafs protocol is licensed on the filer.\n\t\tData OnTap Specific')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestsServer.setStatus('optional')
if mibBuilder.loadTexts: dafsMaxRequestsServer.setDescription('Server wide maximum number of concurrent requests\n\t\tData OnTap Specific')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequests.setStatus('optional')
if mibBuilder.loadTexts: dafsMaxRequests.setDescription('Server maximum number of concurrent requests per session\n\t\tData OnTap Specific')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestSize.setStatus('mandatory')
if mibBuilder.loadTexts: dafsMaxRequestSize.setDescription('Server maximum size of an inline request')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxResponseSize.setStatus('mandatory')
if mibBuilder.loadTexts: dafsMaxResponseSize.setDescription('Server maximum size of an inline response')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setStatus('optional')
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setDescription('Server wide maximum number of requests that can queue\n\t\twaiting for resources Data OnTap Specific')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsUseChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: dafsUseChecksums.setDescription('Server uses checksums')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setStatus('optional')
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setDescription('Server default number of request demons per Nic.\n\t\tData OnTap Specific')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setDescription('Allow the server to acception connections with\n\t\tauthentication type NONE.')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dafsServerEnabled.setDescription('Current status of the DAFS server. If true, the DAFS\n\t\tserver is running.')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultUid.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDefaultUid.setDescription('Default client User ID if anonymously connected.')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultGid.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDefaultGid.setDescription('Default client Group ID if anonymously connected.')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setDescription('Maximum number of disconnected sessions for which the\n\t\tDAFS server will retain response cache data.')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setDescription('Maximum number of seconds server will keep a session\n                open without hearing from the client.')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2), )
if mibBuilder.loadTexts: dafsNicTable.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicTable.setDescription('A table containing DAFS NIC specific\n                      information.')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsNicIndex"))
if mibBuilder.loadTexts: dafsNicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicEntry.setDescription('Information about a particular current DAFS\n                      nic.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the nic is detached.')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicIndex.setDescription("A unique value for each interface.  Its value\n                      ranges between 1 and the value of DafsNicNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.")
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicName.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicName.setDescription('A textual string containing the logical name \n                      under which the nic has been attached.')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDevice.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicDevice.setDescription('A textual string containing the physical name\n                      of the nic that has been attached.')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicState.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicState.setDescription('Current state of DAFS nic')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicListenAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicListenAddr.setDescription('Transport specific address structure giving the\n\t\t      DAFS listen address for this NIC.')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setStatus('optional')
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setDescription('Number of request demons assigned to this Nic\n\t\t      to handle Nic related events. Data OnTap Specific')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicInBytes.setDescription('Total number of bytes, include DMA, received on\n\t\t      this interface')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicDirectInBytes.setDescription('Total number of bytes read directly from the\n\t\t      peer memory through this interface')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicOutBytes.setDescription('Total number of bytes, include DMA, sent on\n\t\t      this interface')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setDescription('Total number of bytes written directly to the\n\t\t      peer memory through this interface')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsPendingRequests.setStatus('optional')
if mibBuilder.loadTexts: dafsPendingRequests.setDescription('Server wide current number of requests that are\n\t\tqueued waiting for resources Data OnTap Specific')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCurrentRequests.setStatus('optional')
if mibBuilder.loadTexts: dafsCurrentRequests.setDescription('Server wide current number of active requests\n\t\tData OnTap Specific')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCalls.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCalls.setDescription('Total number of DAFS calls since last reboot')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientAuths.setStatus('mandatory')
if mibBuilder.loadTexts: dafsClientAuths.setDescription('Total number of Client Auth calls since last reboot')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsClientConnects.setDescription('Total number of Client Connect calls since last reboot')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnectAuths.setStatus('mandatory')
if mibBuilder.loadTexts: dafsClientConnectAuths.setDescription('Total number of Client Connect Auth calls since last reboot')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsConnectBinds.setStatus('mandatory')
if mibBuilder.loadTexts: dafsConnectBinds.setDescription('Total number of Connect Bind calls since last reboot')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDisconnects.setDescription('Total number of Disconnect calls since last reboot')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRegisterCreds.setStatus('mandatory')
if mibBuilder.loadTexts: dafsRegisterCreds.setDescription('Total number of Register Credential calls since last reboot')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReleaseCreds.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReleaseCreds.setDescription('Total number of Release Credential calls since last reboot')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSecinfos.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSecinfos.setDescription('Total number of Secinfo calls since last reboot')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerAuths.setStatus('mandatory')
if mibBuilder.loadTexts: dafsServerAuths.setDescription('Total number of Server Auth calls since last reboot')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCheckResponses.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCheckResponses.setDescription('Total number of Check Response calls since last reboot')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsFetchResponses.setStatus('mandatory')
if mibBuilder.loadTexts: dafsFetchResponses.setDescription('Total number of Fetch Response calls since last reboot')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDiscardResponses.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDiscardResponses.setDescription('Total number of Discard Responses calls since last reboot')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAccesses.setStatus('mandatory')
if mibBuilder.loadTexts: dafsAccesses.setDescription('Total number of Access calls since last reboot')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCacheHints.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCacheHints.setDescription('Total number of Cache Hint calls since last reboot')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCloses.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCloses.setDescription('Total number of Close calls since last reboot')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCommits.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCommits.setDescription('Total number of Commit calls since last reboot')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCreates.setStatus('mandatory')
if mibBuilder.loadTexts: dafsCreates.setDescription('Total number of Create calls since last reboot')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegPurges.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDelegPurges.setDescription('Total number of Delegate Purge calls since last reboot')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegReturns.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDelegReturns.setDescription('Total number of Delegate Return calls since last reboot')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFsattrs.setStatus('mandatory')
if mibBuilder.loadTexts: dafsGetFsattrs.setDescription('Total number of Get Fsattr  calls since last reboot')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetRootHandles.setStatus('mandatory')
if mibBuilder.loadTexts: dafsGetRootHandles.setDescription('Total number of Get Root Handle calls since last reboot')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsGetattrInlines.setDescription('Total number of Getattr Inline calls since last reboot')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsGetattrDirects.setDescription('Total number of Getattr Direct calls since last reboot')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLinks.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLinks.setDescription('Total number of Link calls since last reboot')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLocks.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLocks.setDescription('Total number of Lock calls since last reboot')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockts.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLockts.setDescription('Total number of LockT calls since last reboot')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockus.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLockus.setDescription('Total number of LockU calls since last reboot')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUps.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLookUps.setDescription('Total number of LookUp calls since last reboot')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUpps.setStatus('mandatory')
if mibBuilder.loadTexts: dafsLookUpps.setDescription('Total number of LookUpp calls since last reboot')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNulls.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNulls.setDescription('Total number of Null calls since last reboot')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNverifys.setStatus('mandatory')
if mibBuilder.loadTexts: dafsNverifys.setDescription('Total number of Nverify calls since last reboot')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpens.setStatus('mandatory')
if mibBuilder.loadTexts: dafsOpens.setDescription('Total number of Open calls since last reboot')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenDowngrades.setStatus('mandatory')
if mibBuilder.loadTexts: dafsOpenDowngrades.setDescription('Total number of Open Downgrade calls since last reboot')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenattrs.setStatus('mandatory')
if mibBuilder.loadTexts: dafsOpenattrs.setDescription('Total number of Openattr calls since last reboot')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReadInlines.setDescription('Total number of Read Inline calls since last reboot')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReadDirects.setDescription('Total number of Read Direct calls since last reboot')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReaddirInlines.setDescription('Total number of Readdir Inline calls since last reboot')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReaddirDirects.setDescription('Total number of Readdir Direct calls since last reboot')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReadlinkInlines.setDescription('Total number of Readlink Inline calls since last reboot')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsReadlinkDirects.setDescription('Total number of Readlink Direct calls since last reboot')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: dafsRemoves.setDescription('Total number of Remove calls since last reboot')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRenames.setStatus('mandatory')
if mibBuilder.loadTexts: dafsRenames.setDescription('Total number of Rename calls since last reboot')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSetattrInlines.setDescription('Total number of Setattr Inline calls since last reboot')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSetattrDirects.setDescription('Total number of Setattr Direct calls since last reboot')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsVerifys.setStatus('mandatory')
if mibBuilder.loadTexts: dafsVerifys.setDescription('Total number of Verify calls since last reboot')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBatchSubmits.setStatus('mandatory')
if mibBuilder.loadTexts: dafsBatchSubmits.setDescription('Total number of Batch Submit calls since last reboot')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsWriteInlines.setDescription('Total number of Write Inline calls since last reboot')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsWriteDirects.setDescription('Total number of Write Direct calls since last reboot')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcGetattrs.setStatus('mandatory')
if mibBuilder.loadTexts: dafsBcGetattrs.setDescription('Total number of BC Getattr calls since last reboot')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcNulls.setStatus('mandatory')
if mibBuilder.loadTexts: dafsBcNulls.setDescription('Total number of BC Null calls since last reboot')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcRecalls.setStatus('mandatory')
if mibBuilder.loadTexts: dafsBcRecalls.setDescription('Total number of BC Recall calls since last reboot')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcBatchCompletions.setStatus('mandatory')
if mibBuilder.loadTexts: dafsBcBatchCompletions.setDescription('Total number of BC Batch Completion calls since\n\t\tlast reboot')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendInlines.setStatus('mandatory')
if mibBuilder.loadTexts: dafsAppendInlines.setDescription('Total number of Append Inline calls since\n                last reboot')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendDirects.setStatus('mandatory')
if mibBuilder.loadTexts: dafsAppendDirects.setDescription('Total number of Append Direct calls since\n                last reboot')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFencingLists.setStatus('mandatory')
if mibBuilder.loadTexts: dafsGetFencingLists.setDescription('Total number of Get Fencing List calls since\n                last reboot')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetFencingLists.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSetFencingLists.setDescription('Total number of Set Fencing List calls since\n                last reboot')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsHurryUps.setStatus('mandatory')
if mibBuilder.loadTexts: dafsHurryUps.setDescription('Total number of Hurry Up calls since\n                last reboot')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsInBytes.setDescription('Total number of bytes, including DMA, received since the\n\t\tlast reboot')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDirectInBytes.setDescription('Total number of bytes received directly into memory\n\t\tsince last reboot')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsOutBytes.setDescription('Total number of bytes, including DMA, sent since the\n\t\tlast reboot')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: dafsDirectOutBytes.setDescription('Total number of bytes sent directly into remote memory since\n\t\tthe last reboot')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5), )
if mibBuilder.loadTexts: dafsSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionTable.setDescription('A table containing current DAFS client session\n                      information.')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsSessionIndex"))
if mibBuilder.loadTexts: dafsSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionEntry.setDescription('Information about a particular DAFS\n                      session.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the client disconnects.')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionIndex.setDescription('A unique value for each session.')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionId.setDescription('Session Identifier assigned by the server.')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionEndian.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionEndian.setDescription('Byte order used on this session.')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setDescription('Session may use a back control channel.')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setDescription('Session may use a RDMA read channel.')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionUseChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionUseChecksums.setDescription('Session uses checksums.')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setDescription('Maximum number of credientials that can be registered\n\t\ton this session.')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setDescription('Maximum size of a DAFS request.')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setDescription('Maximum size of a DAFS response.')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionMaxRequests.setDescription('Maximum number of concurrent requests.')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setDescription('Size of DAFS headers plus padding to the start of\n\t\tdata.  Used to better align inline data.')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientIdString.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionClientIdString.setDescription('Client ID string supplied by the client.  Intended to\n\t\tuniquely identify that client.')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientVerifier.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionClientVerifier.setDescription('Supplied by the client to uniquely identify an\n\t\tinstnce of a client.')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumCredentials.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionNumCredentials.setDescription('Current number of credentials registered on this\n\t\tsession')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dafsSessionNumRequests.setDescription('Current number of active requests on this session')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6), )
if mibBuilder.loadTexts: dafsExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportTable.setDescription('A table containing DAFS Export filesystems.')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsExportIndex"))
if mibBuilder.loadTexts: dafsExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportEntry.setDescription('Information about a particular current DAFS\n                      export.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the export is deleted.')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportIndex.setDescription("A unique value for each export.  Its value\n                      ranges between 1 and the number of exports.  The\n                      value for each export must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.")
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportName.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportName.setDescription('A textual string containing information about the\n                      export.  This is the logical export name.')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportPath.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportPath.setDescription('A textual string containing information about the\n                      export.  This is the local filesystem path to\n\t\t      the export.')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportEnabled.setDescription('This export is available for access.')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("readmostly", 2), ("readonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportRwMode.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportRwMode.setDescription('Global export mode. This represents the maximum\n\t\taccess rights.')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: dafsExportAccessList.setDescription('A textual string containing information about the\n                      export.  This is the list of hosts that may\n\t\t      access the export. If empty, all hosts may\n\t\t      access the export.')
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNodeSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: viaNodeSystemName.setDescription('A string by which the node is identified in the cluster.')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCreated.setStatus('mandatory')
if mibBuilder.loadTexts: viaCreated.setDescription('The number of VIs created.')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectRequest.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnectRequest.setDescription('The number of times Connect Request call is made.')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectWait.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnectWait.setDescription('The number of times Connect wait call is made.')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: viaDisconnect.setDescription('Number of times VI got disconnected with out any error.')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnectTimeOut.setDescription('Number of times VI connect request got timed out.')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnected.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnected.setDescription('Number of time VI got connected with out any error.')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectPending.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrConnectPending.setDescription('The number of VIs for which connect request is pending.')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setDescription('The number of VIs for which connect wait request is pending.')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnected.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrConnected.setDescription('The number of VIs for which the current state is CONNECTED.')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrError.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrError.setDescription('The number of VIs for which the current state is ERROR')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaTotalError.setStatus('mandatory')
if mibBuilder.loadTexts: viaTotalError.setDescription('The number of VIs which encountered error state.')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: viaInMsgs.setDescription('The total number of incoming Messages received.')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRdma.setStatus('mandatory')
if mibBuilder.loadTexts: viaInRdma.setDescription('The total number of incoming RDMA requests received.')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaInBytes.setDescription('The total number of incoming bytes received, including those \n        received in error. This count includes bytes received on \n        currently established connections. This corresponds to the sum\n        of bytes received through received messages, incoming RDMA writes \n        and RDMA reads issued')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaInRDMAReadBytes.setDescription('The total number of incoming bytes received through RDMA read, \n        including those received in error. This count includes bytes \n        received on currently established connections.')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setDescription('The total number of bytes received through incoming RDMA writes, \n        including those received in error. This count includes bytes \n        received on currently established connections.')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: viaOutMsgs.setDescription('The total number of Messages sent.')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRdma.setStatus('mandatory')
if mibBuilder.loadTexts: viaOutRdma.setDescription('The total number of RDMA requests sent.')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaOutBytes.setDescription('The total number of bytes sent, including those \n        sent in error. This count includes bytes sent on \n        currently established connections.')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setDescription('The total number of bytes sent through an incoming \n        RDMA read request, including those sent in error. \n        This count includes bytes sent on currently established \n        connections.')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setDescription('The total number of bytes sent through a RDMA write\n        operation, including those sent in error. This count \n        includes bytes sent on currently established connections.')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23), )
if mibBuilder.loadTexts: viaConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnTable.setDescription('A table containing via connection specific information.')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaConnVINumber"))
if mibBuilder.loadTexts: viaConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnEntry.setDescription('A conceptual row of the viaConnTable containing information\n        about a particular current via connection. Each row of this\n        table is transient, and it ceases to exist when the \n        connection makes transition to the CLOSED state.')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("pendingConnect", 2), ("connected", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnState.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnState.setDescription('The state of this via connection\n             Legal States:\n                   Idle            1 \n                   Pending Connect 2\n                   Connected       3\n                   Error           4')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnVINumber.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnVINumber.setDescription('A number which uniquely defines a     connection.')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setDescription('IP address of the remote system of the connection.')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalNetAddress.setDescription('Local IPadress of the connection.')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemotePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemotePortNumber.setDescription('Remote TCP portnumber of the connection.')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalPortNumber.setDescription('Local TCP Portnumber of the connection.')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalDescriminator.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalDescriminator.setDescription('An identifier used by the local process to identify the\n        VI connection.')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setDescription('An identifier used by the remote process to identify the\n        VI connection.')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setDescription('The local limit on the maximum packet size that can be \n        transfered through the connection.')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setDescription('The remote limit on the maximum packet size that can be \n        transfered through the connection.')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled\n            in the local system otherwise, it is 0.')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled\n            in the local system otherwise, it is 0.')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled\n            in the remote system otherwise, it is 0.')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled\n            in the remote system otherwise, it is 0.')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnSentMessages.setDescription('Total number of messages sent through the connection.')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setDescription('Total number of rdma read messages sent through the \n            connection.')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setDescription('Total number of rdma write messages sent through the \n            connection.')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRcvdMessages.setDescription('Total number of messages received through the connection.')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setDescription('Total number of rdma read messages received through the \n            connection.')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setDescription('Total number of rdma write messages received through the \n            connection.')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrPostDesc.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrPostDesc.setDescription('The total number of descriptors completed in error\n            by NIC.')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrConnLost.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrConnLost.setDescription('The total number of Lost Connection errors. ')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRecvQEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrRecvQEmpty.setDescription('The total number of errors due to an empty receive Queue. ')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmawProt.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrRdmawProt.setDescription('The total number of remote DMA write protection errors. ')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmarProt.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrRdmarProt.setDescription('The total number of remote DMA read protection errors. ')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrCompProt.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrCompProt.setDescription('The total number of protection errors. ')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viaErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: viaErrorThreshold.setDescription('Setting this threshold will cause a trap to be enabled\n        such that if the total error exceeds error threshold set \n        a viaNodeErrorsTrap trap will be generated.')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1), )
if mibBuilder.loadTexts: viaNicTable.setStatus('mandatory')
if mibBuilder.loadTexts: viaNicTable.setDescription('A table containing via NIC-specific information.')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaNicIndex"))
if mibBuilder.loadTexts: viaNicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: viaNicEntry.setDescription('A conceptual row of the viaNicTable containing information\n            about a particular present VINic.')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: viaNicIndex.setDescription('The index of the NIC in the NIC table.')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaName.setStatus('mandatory')
if mibBuilder.loadTexts: viaName.setDescription('The symbolic name of the NIC device.')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: viaHardwareVersion.setDescription('The version of the VINIC described by this MIB.')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaProviderVersion.setStatus('mandatory')
if mibBuilder.loadTexts: viaProviderVersion.setDescription('The version of the VI provider.')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicAddress.setStatus('mandatory')
if mibBuilder.loadTexts: viaNicAddress.setDescription('The Network address of this NIC.')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaThreadSafe.setStatus('mandatory')
if mibBuilder.loadTexts: viaThreadSafe.setDescription('1 if synchronisation model is thread safe else 0.')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setDescription('The maximum number of bytes that the VI provider allows\n        for a connection descriminator.')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxRegisterBytes.setDescription('Maximum number of bytes that can be registered.')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterRegions.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxRegisterRegions.setDescription('Maximum number of memory regions that can be registered.')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setDescription('Largest contiguous block of memory that can be registered.')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxVI.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxVI.setDescription('The limit on the total number of VI instances this entity can\n        support.')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setDescription('Maximum Descriptors per VI Work Queue that this VI provider\n        can support.')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setDescription('Maximum number of segments per descriptor that this VI provider\n        can support.')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQ.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxCQ.setDescription('Maximum number of completion queues this VI provider can support.')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQEntries.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxCQEntries.setDescription('Maximum number of Completion queue entries per completion queue\n        that this VI provider can support.')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxTransferSize.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxTransferSize.setDescription('The maximum transfer size supported by the VI Nic. The maximum \n        transfer size is the amount of data that can be described by a \n        single VI descriptor.')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNativeMTU.setStatus('mandatory')
if mibBuilder.loadTexts: viaNativeMTU.setDescription('The native MTU size of the underlying network. For frame-based \n        networks, this could reflect its native frame size. For cell-based \n        networks, it could reflect the MTU of the appropriate abstraction \n        layer that it supports.')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxPTags.setStatus('mandatory')
if mibBuilder.loadTexts: viaMaxPTags.setDescription('The maximum number of protection tags that are supported by this\n        VI provider.')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterBytes.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrRegisterBytes.setDescription('Number of bytes registered by the VI user for this\n           NIC.')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterRegions.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrRegisterRegions.setDescription('Number of memory regions that is registered by VI user\n           for this NIC.')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrVI.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrVI.setDescription('The current number of VI instances for this NIC.')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrCQ.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrCQ.setDescription('Current number of completion queues this VI provider\n           has.')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrPTags.setStatus('mandatory')
if mibBuilder.loadTexts: viaCurrPTags.setDescription('Current Number of protection tags this VI provider has.')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectionListenPort.setStatus('mandatory')
if mibBuilder.loadTexts: viaConnectionListenPort.setDescription('Port number on which VI server is listening for VI connection\n        request.')
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfilerIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: vfilerIsLicensed.setDescription('Whether vfiler  is licensed on the\n\t\t\tfiler.')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFilers.setStatus('mandatory')
if mibBuilder.loadTexts: vfFilers.setDescription('Number of vfilers in the physical Filer.')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3), )
if mibBuilder.loadTexts: vfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vfTable.setDescription('Provide a report of pre-vfiler general information ')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfIndex"))
if mibBuilder.loadTexts: vfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vfEntry.setDescription('Provide a report of per-vfiler information')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfIndex.setDescription('A number that identifies this entry for the referenced vfiler.')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfName.setStatus('mandatory')
if mibBuilder.loadTexts: vfName.setDescription(' A textual string that contains the name of the referenced vfiler.')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfUuid.setStatus('mandatory')
if mibBuilder.loadTexts: vfUuid.setDescription('The UUID of the referenced vfiler.')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpAddresses.setDescription('The total number of IP addresses for the referenced vfiler.')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfStoragePaths.setStatus('mandatory')
if mibBuilder.loadTexts: vfStoragePaths.setDescription('The total number of storage paths for the referenced vfiler.')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpSpace.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpSpace.setDescription(' A textual string that contains the name of the ipspace that the referenced vfiler belongs to.')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfAllowedProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: vfAllowedProtocols.setDescription('Total number of protocols allowed for the referenced vfiler.')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDisallowedProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: vfDisallowedProtocols.setDescription('Total number of protocols disallowed for the referenced vfiler.')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfState.setStatus('mandatory')
if mibBuilder.loadTexts: vfState.setDescription('Status of the vfiler: Running or stopped.')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4), )
if mibBuilder.loadTexts: vfIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpTable.setDescription('Provide a report of per-vfiler IP addresses information ')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFiIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfIpIndex"))
if mibBuilder.loadTexts: vfIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpEntry.setDescription('Provide a report of per-vfiler IP addresses information')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfFiIndex.setDescription('A number that identifies the referenced vfiler.')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpIndex.setDescription('A number that identifies which IP address in the referenced vfiler.')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vfIpAddr.setDescription('A IP address for the referenced vfiler.')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5), )
if mibBuilder.loadTexts: vfSpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vfSpTable.setDescription('Provide a report of per-vfiler storage path information ')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFsIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfSpIndex"))
if mibBuilder.loadTexts: vfSpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vfSpEntry.setDescription('Provide a report of per-vfiler storage path information')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfFsIndex.setDescription('A number that identifies the referenced vfiler.')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfSpIndex.setDescription('A number that identifies which storage path in the referenced vfiler.')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpName.setStatus('mandatory')
if mibBuilder.loadTexts: vfSpName.setDescription('The storage path name  for the referenced vfiler.')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6), )
if mibBuilder.loadTexts: vfProTable.setStatus('mandatory')
if mibBuilder.loadTexts: vfProTable.setDescription('Provide a report of per-vfiler protocol information ')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFpIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfProIndex"))
if mibBuilder.loadTexts: vfProEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vfProEntry.setDescription('Provide a report of per-vfiler protocol information')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfFpIndex.setDescription('A number that identifies the referenced vfiler.')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vfProIndex.setDescription('A number that identifies a protocol in the referenced vfiler.')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProName.setStatus('mandatory')
if mibBuilder.loadTexts: vfProName.setDescription('A textual string that contains the protocol name  for the referenced vfiler.')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vfProStatus.setDescription('Whether the referenced vfiler protocol  is allowed or disallowed.')
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: fcpIsLicensed.setDescription('Whether FCP access protocols are licensed on the\n\t\t\tfiler.')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiIsLicensed.setDescription('Whether iSCSI access protocols are licensed on the\n\t\t\tfiler.')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: fcpLowReadBytes.setDescription('The total number of bytes read via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: fcpHighReadBytes.setDescription('The total number of bytes read via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: fcpLowWriteBytes.setDescription('The total number of bytes written via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: fcpHighWriteBytes.setDescription('The total number of bytes written via FCP  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiLowReadBytes.setDescription('The total number of bytes read via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiHighReadBytes.setDescription('The total number of bytes read via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiLowWriteBytes.setDescription('The total number of bytes written via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tleast significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiHighWriteBytes.setDescription('The total number of bytes written via iSCSI  \n\t\t\tsince the last boot.  This object returns the \n\t\t\tmost significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighOps.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiHighOps.setDescription('The total number of iSCSI ops handled since the\n\t\t\tlast boot.  This object returns the most significant\n\t\t\t32 bits of the 64 bit unsigned integer.')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowOps.setStatus('mandatory')
if mibBuilder.loadTexts: iscsiLowOps.setDescription('The total number of iSCSI ops handled since the\n\t\t\tlast boot.  This object returns the least significant\n\t\t\t32 bits of the 64 bit unsigned integer.')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighOps.setStatus('mandatory')
if mibBuilder.loadTexts: fcpHighOps.setDescription('The total number of FCP ops handled since the\n\t\t\tlast boot.  This object returns the most significant\n\t\t\t32 bits of the 64 bit unsigned integer.')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowOps.setStatus('mandatory')
if mibBuilder.loadTexts: fcpLowOps.setDescription('The total number of FCP ops handled since the\n\t\t\tlast boot.  This object returns the least significant\n\t\t\t32 bits of the 64 bit unsigned integer.')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCount.setStatus('mandatory')
if mibBuilder.loadTexts: lunCount.setDescription('Number of LUNs in the Filer.')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('mandatory')
if mibBuilder.loadTexts: lunTable.setDescription('Provide a report of per-LUN general information ')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lunEntry.setDescription('Provide a report of per-LUN information')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lunIndex.setDescription('A number that identifies the referenced LUN.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('mandatory')
if mibBuilder.loadTexts: lunName.setDescription('The name of the LUN.  This is also the path to the LUN\n\t\t      on the filer.')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunComment.setStatus('mandatory')
if mibBuilder.loadTexts: lunComment.setDescription('The comment, if any, for this LUN.')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('mandatory')
if mibBuilder.loadTexts: lunSizeLow.setDescription('Size of the LUN in bytes.  This object returns the \n\t\t     least significant 32 bits of the 64 bit unsigned integer.')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('mandatory')
if mibBuilder.loadTexts: lunSizeHigh.setDescription('Size of the LUN in bytes.  This object returns the \n\t\t     most significant 32 bits of the 64 bit unsigned integer.')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapped.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapped.setDescription('This LUN has been mapped to at least one initiator group.')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lunSerialNumber.setDescription('The 12 character SCSI serial number of the LUN.')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunQtreeName.setStatus('mandatory')
if mibBuilder.loadTexts: lunQtreeName.setDescription('A string that indicates which qtree this LUN belongs to.')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighOps.setDescription('The total number of Target side SCSI ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowOps.setDescription('The total number of Target side SCSI ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighReadBytes.setDescription('The total number of bytes read from this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe most significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadBytes.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowReadBytes.setDescription('The total number of bytes read from this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe least significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighWriteBytes.setDescription('The total number of bytes written to this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe most significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteBytes.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowWriteBytes.setDescription('The total number of bytes written to this LUN \n\t\t\tsince the stats were last reset.  This object returns \n\t\t\tthe least significant 32 bits of the 64 bit unsigned \n\t\t\tinteger.')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighErrors.setDescription('The total number of errors seen on this LUN \n\t\t\tsince the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowErrors.setDescription('The total number of errors seen on this LUN \n\t\t\tsince the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunOnline.setStatus('mandatory')
if mibBuilder.loadTexts: lunOnline.setDescription('Whether the LUN is online.')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunSnapStatus.setDescription('Whether a snapshot of this LUN can be taken.')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("write", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunShareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lunShareStatus.setDescription('The sharing status for the LUN.')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSpaceReserved.setStatus('mandatory')
if mibBuilder.loadTexts: lunSpaceReserved.setDescription('Whether the LUN has space reservation enabled.')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatsResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: lunStatsResetTime.setDescription("Number of seconds since this LUN's stats were\n\t\t\tlast reset.")
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighReadOps.setDescription('The total number of Target side SCSI read ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowReadOps.setDescription('The total number of Target side SCSI read ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighWriteOps.setDescription('The total number of Target side SCSI write ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the least significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowWriteOps.setDescription('The total number of Target side SCSI write ops for \n\t\t\tthis LUN since the stats were last reset.  This object \n\t\t\treturns the most significant 32 bits of the 64 bit \n\t\t\tunsigned integer.')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOtherOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunHighOtherOps.setDescription('The total number of Target side SCSI ops that are not \n\t\t\tread or write for this LUN since the stats were last \n\t\t\treset.  This object returns the least significant 32 \n\t\t\tbits of the 64 bit unsigned integer.')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOtherOps.setStatus('mandatory')
if mibBuilder.loadTexts: lunLowOtherOps.setDescription('The total number of Target side SCSI ops that are not \n\t\t\tread or write for this LUN since the stats were last \n\t\t\treset. This object returns the most significant 32 \n\t\t\tbits of the 64 bit unsigned integer.')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3), )
if mibBuilder.loadTexts: lunMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapTable.setDescription('Provide a table listing the initiator group to \n\t\t\tLogical Unit Number mapping for each LUN.')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunMapLUNIndex"), (0, "NETWORK-APPLIANCE-MIB", "lunMapInitiatorGroupIndex"))
if mibBuilder.loadTexts: lunMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapEntry.setDescription('Provide a per LUN and Initiator group mapping of \n\t\t\tSCSI logical unit numbers.')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapLUNIndex.setDescription('A number that identifies the LUN in the table.')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setDescription('A number that identifies an initiator group in \n\t\t     the table.')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNName.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapLUNName.setDescription('The name of the LUN.')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setDescription('The name of the initiator group that this LUN is \n\t\t    mapped to.')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setDescription('SCSI Logical Unit Number that this LUN is mapped to \n\t\t     for this initiator group.')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1), )
if mibBuilder.loadTexts: initiatorGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupTable.setDescription('Provide a report of per-initiator group general \n\t\t\tinformation ')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupIndex"))
if mibBuilder.loadTexts: initiatorGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupName.setDescription('The name of the initiator group')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupType.setDescription('Type of this initiator group, either iSCSI or FCP')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("default", 1), ("solaris", 2), ("windows", 3), ("hpux", 4), ("aix", 5), ("linux", 6), ("default-partner", 7), ("netware", 8), ("vmware", 9), ("invalid", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupOS.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupOS.setDescription('Operating system the clients in this initiator\n\t\t    group run.  This governs  the finer details of \n\t\t    SCSI protocol interaction with these initiators')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setDescription('Percentage of filer scsi command blocks reserved for\n\t\t    this initiator group')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setDescription("True if this inititiator group is allowed to\n\t\t    exceed it's throttle settings if more resources\n\t\t    are needed and otherwise available.  If\n\t\t    initiatorGroupThrottleReserve is 0, this value\n\t\t    is meaningless")
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUsePartner.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupUsePartner.setDescription('The takeover mode for the initiator group.  This is\n\t\t    only applicable to FCP initiator groups on clustered\n\t\t    filers')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2), )
if mibBuilder.loadTexts: initiatorGroupMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupMemberTable.setDescription('Table of individual Initator names in each Initiator \n\t\t\tgroup')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberNameIndex"))
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setDescription('A number the identifies the initiator in the group.')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorName.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorName.setDescription('A textual name for this initiator.')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3), )
if mibBuilder.loadTexts: initiatorListTable.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorListTable.setDescription('Table of initiators that are connected to the filer.')
initiatorListMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorListMemberEntryIndex"))
if mibBuilder.loadTexts: initiatorListMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorListMemberEntry.setDescription('Provide a report of per-connected-initiator information.')
initiatorListMemberEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorListMemberEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: initiatorListMemberEntryIndex.setDescription('A number that identifies the initiator connected to\n\t\t     the target adapter.')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetAdapterName.setStatus('mandatory')
if mibBuilder.loadTexts: targetAdapterName.setDescription('The name of the target adapter in the filer.')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: connectedInitiatorNodeName.setDescription('A textual name for this initiator node.')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortName.setStatus('mandatory')
if mibBuilder.loadTexts: connectedInitiatorPortName.setDescription("The FibreChannel device's portname. This is FCP only.")
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorType.setStatus('mandatory')
if mibBuilder.loadTexts: connectedInitiatorType.setDescription('Type of this init group, either iSCSI or FCP')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorIsid.setStatus('mandatory')
if mibBuilder.loadTexts: connectedInitiatorIsid.setDescription('The iSCSI isid (initiator session id) for this initiator.\n\t\t    This is iSCSI only.')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setStatus('mandatory')
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setDescription('The iSCSI portal group ID for this initiator. \n\t\t    This is iSCSI only.')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1), )
if mibBuilder.loadTexts: fcpTargetTable.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetTable.setDescription('Provide a report of fcp target adapter general \n\t\t\tinformation ')
fcpTargetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fcpTargetTableIndex"))
if mibBuilder.loadTexts: fcpTargetTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetTableEntry.setDescription('Provide a report of per fcp target device information')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetTableIndex.setDescription('A number that identifies a specific fcp target device.')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetName.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetName.setDescription('The name of the fcp target device')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetNN.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetNN.setDescription('The FC WWNN of the fcp target device')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPN.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetPN.setDescription('The FC WWPN of the fcp target device')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetSpeed.setDescription('speed in gigabits per second. 0 is unknown.')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("startup", 1), ("uninitialized", 2), ("initializing-fw", 3), ("link-not-connected", 4), ("waiting-for-link-up", 5), ("online", 6), ("link-disconnected", 7), ("resetting", 8), ("offline", 9), ("offlined-by-user-system", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetStatus.setDescription('Status of the fcp target adapter')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStandby.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetStandby.setDescription('Whether this target adapter is in standby mode.')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("point-to-point", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTopology.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetTopology.setDescription('fibre channel topology for this adapter. ')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("physical", 1), ("local", 2), ("standby", 3), ("partner", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetType.setStatus('mandatory')
if mibBuilder.loadTexts: fcpTargetType.setDescription('Responsibility/Type for this adapter.')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))).clone(namedValues=NamedValues(("mixed", 1), ("standby", 2), ("partner", 3), ("partner-proxy", 4), ("partner-standby", 5), ("local-primary", 6), ("dual-fabric", 7), ("ssi", 8), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpCfMode.setStatus('mandatory')
if mibBuilder.loadTexts: fcpCfMode.setDescription('Failover setting for the FCP target cluster.')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1), )
if mibBuilder.loadTexts: psetTable.setStatus('mandatory')
if mibBuilder.loadTexts: psetTable.setDescription('Provide a report of portset general \n\t\t\tinformation ')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetIndex"))
if mibBuilder.loadTexts: psetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psetEntry.setDescription('Provide a report of portset information')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psetIndex.setDescription('A number that identifies a specific port set.')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetName.setStatus('mandatory')
if mibBuilder.loadTexts: psetName.setDescription('The name of the port set')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetType.setStatus('mandatory')
if mibBuilder.loadTexts: psetType.setDescription('Type of this port set, either iSCSI or FCP')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2), )
if mibBuilder.loadTexts: psetMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: psetMemberTable.setDescription('Table of individual Port names in each Port\n\t\t\tset')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "psetMemberNameIndex"))
if mibBuilder.loadTexts: psetMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psetMemberEntry.setDescription('Provide a report of portset port information')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psetMemberIndex.setDescription('A number that identifies a specific port set.')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psetMemberNameIndex.setDescription('A number the identifies the port in the set.')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortName.setStatus('mandatory')
if mibBuilder.loadTexts: psetPortName.setDescription('A textual name for this port.')
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheIsEnabled.setDescription('Whether NFS caching is enabled on this system.')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsLicensed.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheIsLicensed.setDescription('Whether NFS caching is licensed on this system.')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setDescription('Total NFS bytes received from clients')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheBytesToClients.setDescription('Total NFS bytes sent to clients')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setDescription('Total NFS bytes received from servers')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheBytesToServers.setDescription('Total NFS bytes sent to servers')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheTotalRequests.setDescription('Total NFS requests received')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHitRequests.setDescription('Total NFS requests resulting in cache hits')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheMissRequests.setDescription('Total NFS requests resulting in cache misses')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setDescription('Total NFS requests that were cacheable misses')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setDescription('Total NFS requests that were uncacheable misses')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheEjectRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheEjectRequests.setDescription('Total NFS requests resulting in object eject due to expiration')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setDescription('Total NFS requests resulting in object verification')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheRpcRecords.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheRpcRecords.setDescription('Total RPC records received')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBWSavings.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheBWSavings.setDescription('Bandwidth savings for NFS requests')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setDescription('Total NFS bytes received from clients.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer.')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setDescription('Total NFS bytes received from clients.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit \n\t\t\t unsigned integer.')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setDescription('Total NFS bytes sent to clients.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setDescription('Total NFS bytes sent to clients.  This object returns\n\t\t\t the least significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setDescription('Total NFS bytes received from servers.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer.')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setDescription('Total NFS bytes received from servers.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit\n\t\t\t unsigned integer.')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setDescription('Total NFS bytes sent to servers.  This object\n\t\t\t returns the most significant 32 bits of the 64 bit \n\t\t\t unsigned integer.')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setDescription('Total NFS bytes sent to servers.  This object\n\t\t\t returns the least significant 32 bits of the 64 bit \n\t\t\t unsigned integer.')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setDescription('Total NFS requests received.  This object returns\n\t\t\t the most significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setDescription('Total NFS requests received.  This object returns\n\t\t\t the least significant 32 bits of the 64 bit unsigned \n\t\t\t integer.')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setDescription('Total NFS requests resulting in cache hits.  This\n\t\t\t object returns the most significant 32 bits of the \n\t\t\t 64 bit unsigned integer.')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setDescription('Total NFS requests resulting in cache hits.  This\n\t\t\t object returns the least significant 32 bits of the\n\t\t\t 64 bit unsigned integer.')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setDescription('Total NFS requests resulting in cache misses.  This\n\t\t\t object returns the most significant 32 bits of the \n\t\t\t 64 bit unsigned integer.')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setDescription('Total NFS requests resulting in cache misses.  This\n\t\t\t object returns the least significant 32 bits of the\n\t\t\t 64 bit unsigned integer.')
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclNumber.setDescription('The number of storage enclosures in the storage subsystem.')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2), )
if mibBuilder.loadTexts: enclTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclTable.setDescription('Display disk enclosure environmental information for fiber\n\t     channel shelves and NearStore SCSI shelves. Shelves that do not\n\t     support SCSI Enclosure Services, such as DEC Storage Shelf,\n\t     Eurologic XL8 are not supported.')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enclEntry.setDescription('Display disk enclosure (shelf) environmental\n\t     information for the referenced disk enclosure.')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('mandatory')
if mibBuilder.loadTexts: enclIndex.setDescription('A number that identifies this enclosure among the\n\t\t\t possible monitored enclosures. This number normally\n\t\t\t uniquely identifies one shelf within one boot,\n\t\t\t but may it change between boots. The number may\n\t\t\t also change within a boot if shelves are removed\n\t\t\t and added.')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("transitioning", 2), ("active", 3), ("inactive", 4), ("reconfiguring", 5), ("nonexistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclContactState.setStatus('mandatory')
if mibBuilder.loadTexts: enclContactState.setDescription('The state of the communication between the filer or storage\n\t    engine and the enclosure monitoring device in the enclosure.')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannelShelfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: enclChannelShelfAddr.setDescription('The adapter number or switch name and the port number\n\t    (together, called the channel), and shelf ID of this\n\t    enclosure. Examples are 8a.1 and switch:5.1. ')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductLogicalID.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductLogicalID.setDescription('The logical identifier of this enclosure. This a form of the\n\t    World-Wide Name (WWN).')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductID.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductID.setDescription('The product ID of the shelf hardware module that provides\n\t    the enclosure monitoring function. Example is LRC.')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductVendor.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductVendor.setDescription('The name of the vendor of this enclosure. Example is Xyratex.')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductModel.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductModel.setDescription('The model name of this enclosure. Example is DiskShelf14.')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductRevision.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductRevision.setDescription('The revision number of this enclosure.')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: enclProductSerialNo.setDescription('The serial number of this enclosure.')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberDiskBays.setStatus('mandatory')
if mibBuilder.loadTexts: enclNumberDiskBays.setDescription('The number of disk bays in this enclosure.')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDisksPresent.setStatus('mandatory')
if mibBuilder.loadTexts: enclDisksPresent.setDescription('The list of disks present by bay number in this enclosure.')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setDescription('The maximum number of power supplies is this enclosure.')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setStatus('mandatory')
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setDescription('The list of power supplies present in the enclosure. \n\t     Numbering is from left to right in their intended location\n\t     in the shelf, while facing the supplies.')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setStatus('mandatory')
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setDescription('The list of serial numbers of power supplies present\n\t     in the enclosure. Not all shelves are able to report the\n\t     power supply serial number. Communication errors may\n\t     make the serial number unavailable. Numbering is from left\n\t     to right in their intended location in the shelf, while\n\t     facing the supplies.')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setStatus('mandatory')
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setDescription('The list of failed power supplies in this enclosure, numbered as\n\t     in enclPowerSuppliesPresent.')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: enclFansMaximum.setDescription('The maximum number of fans or fan modules monitored by this\n\t     enclosure. R100/R150 shelf power supply fans are not included\n\t     in this number.')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansPresent.setStatus('mandatory')
if mibBuilder.loadTexts: enclFansPresent.setDescription('The list of fans or fan modules present and for which status\n\t     is known in this enclosure. Fans are numbered left-to-right as\n\t     facing the fans. R100/R150 shelf power supply fans are\n\t     not included in this list.')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansFailed.setStatus('mandatory')
if mibBuilder.loadTexts: enclFansFailed.setDescription('The list of failed fans or fan modules in this enclosure. Fans\n\t     are numbered as described in enclFansPresent.')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsMaximum.setDescription('The maximum number of temperature sensors monitored\n\t     by this enclosure.')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsPresent.setDescription('The list of temperature sensors present and for which\n\t     status is known in this enclosure. Temperature sensors are\n\t     numbered top-to-bottom and left-to-right, beginning with\n\t     the front of the enclosure, then the rear, as the modules\n\t     containing them are faced.')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setDescription('The list of temperature sensors reporting\n\t     overtemperature failure in this enclosure. Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setDescription('The list of temperature sensors reporting overtemperature\n\t     warning in this enclosure. Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setDescription('The list of temperature sensors reporting undertemperature\n\t     failure in this enclosure. Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setDescription('The list of temperature sensors reporting undertemperature\n\t     warning in this enclosure. Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setDescription('The list of temperatures reported by all temperature sensors in\n\t     the enclosure, including the ambient temperature. Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setDescription('The list of overtemperature failure thresholds for all\n\t     temperature sensors in the enclosure. Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setDescription('The list of overtemperature warning thresholds for all\n\t     temperature sensors in the enclosure. Sensors are\n\t     numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setDescription('The list of undertemperature failure thresholds for all\n\t     temperature sensors in the enclosure. Sensors are numbered as in\n\t     TempSensorsPresent.')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setStatus('mandatory')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setDescription('The list of undertemperature warning thresholds for all\n\t     temperature sensors in the enclosure. Sensors are numbered as in\n\t     TempSensorsPresent.')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: enclElectronicsMaximum.setDescription('The number of enclosure services electronics modules that it is\n\t     possible for this enclosure to detect and/or monitor.')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: enclElectronicsPresent.setDescription('The list those enclosure services electronics modules present in\n\t     this enclosure. Numbering is from left-to-right or top-to-bottom\n\t     in their intended location in the shelf, while facing the\n\t     electronics modules. It is normal for the R200 FC-AT module to be\n\t     reported as the second module.')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsSerialNos.setStatus('mandatory')
if mibBuilder.loadTexts: enclElectronicsSerialNos.setDescription('The list of serial numbers of the enclosure services electronics\n\t     modules present in this enclosure. The order follows that of\n\t     enclElectronicsPresent.')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: enclElectronicsFailed.setDescription('The list of failed electronics elements. Valid only if\n\t     enclElectronicsPresent shows that some are present.')
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: netifNumber.setDescription('The number of network interfaces (regardless of\n                      their current state) present on this system.')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2), )
if mibBuilder.loadTexts: netifTable.setStatus('mandatory')
if mibBuilder.loadTexts: netifTable.setDescription('A list of interface entries.  The number of\n                 entries is given by the value of netifNumber.')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "netifIndex"))
if mibBuilder.loadTexts: netifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netifEntry.setDescription('An interface entry containing objects at the\n                      subnetwork layer and below for a particular\n                      interface.')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: netifIndex.setDescription("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.")
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: netifDescr.setDescription('A textual string containing information about the\n                      interface.  This string should include the name of\n                      the manufacturer, the product name and the version\n                      of the hardware interface.')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInOctets.setDescription('The total number of octets received on the\n                      interface, including framing characters.\n\t\t      This object returns the most significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInOctets.setDescription('The total number of octets received on the\n                      interface, including framing characters.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInUcastPkts.setDescription('The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the most significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInUcastPkts.setDescription('The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the most significant 32 bits of \n\t\t      the 64 bit unsigned integer.')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.\n\t\t      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInDiscards.setDescription('The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space. This object returns the most \n\t\t      significant 32 bits of the 64 bit unsigned integer.')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInDiscards.setDescription('The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space. This object returns the least \n\t\t      significant 32 bits of the 64 bit unsigned integer.')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInErrors.setDescription('The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol. This object returns the \n\t\t      most significant 32 bits of the 64 bit unsigned integer.')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInErrors.setDescription('The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol. This object returns the \n\t\t      least significant 32 bits of the 64 bit unsigned integer.')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighInUnknownProtos.setDescription('The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol. This object returns the \n\t\t      most significant 32 bits of the 64 bit unsigned integer.')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowInUnknownProtos.setDescription('The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol. This object returns the \n\t\t      least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighOutOctets.setDescription('The total number of octets transmitted out of the\n                      interface, including framing characters.\n                      This object returns the most significant 32 bits of the\n\t\t      64 bit unsigned integer.')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowOutOctets.setDescription('The total number of octets transmitted out of the\n                      interface, including framing characters.\n                      This object returns the least significant 32 bits of\n\t\t      the 64 bit unsigned integer.')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighOutUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowOutUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setDescription('The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighOutDiscards.setDescription('The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowOutDiscards.setDescription('The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifHighOutErrors.setDescription('The number of outbound packets that could not be\n                      transmitted because of errors. This object returns \n\t\t      the most significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifLowOutErrors.setDescription('The number of outbound packets that could not be\n                      transmitted because of errors. This object returns \n\t\t      the least significant 32 bits of the 64 bit unsigned \n\t\t      integer.')
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,2))
if mibBuilder.loadTexts: userDefined.setDescription("A polling-style trap built using the 'snmp traps'\n\t     command on the filer.")
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,6))
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setDescription('Disk Health Monitor -\n                Reported a Disk Degraded-I/O  Event')
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,7))
if mibBuilder.loadTexts: dhmNoticePFAEvent.setDescription('Disk Health Monitor -\n                Reported a Disk Predictive-Failure Event')
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,11))
if mibBuilder.loadTexts: emergencyTrap.setDescription('A user-defined trap indicating an extremely urgent\n             situation, usually indicating that the system has\n             failed and is shutting down.')
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,12))
if mibBuilder.loadTexts: alertTrap.setDescription('A user-defined trap indicating a condition that\n             should be corrected immediately, such as a failed disk.')
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,13))
if mibBuilder.loadTexts: criticalTrap.setDescription('A user-defined trap indicating a critical condition,\n             such as a hard device error.')
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,14))
if mibBuilder.loadTexts: errorTrap.setDescription('A user-defined trap indicating an error condition,\n             such as a mistake in a configuration file.')
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,15))
if mibBuilder.loadTexts: warningTrap.setDescription('A user-defined trap indicating a condition which\n            is not an error, but which may require special handling.')
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,16))
if mibBuilder.loadTexts: notificationTrap.setDescription('A user-defined trap meant to provide notification,\n             such as an hourly uptime message.')
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,17))
if mibBuilder.loadTexts: informationalTrap.setDescription('A user-defined trap used for informational purposes.')
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,18))
if mibBuilder.loadTexts: dbgTrap.setDescription('A user-defined trap used for debugging purposes.\n\t     This trap was previously mis-documented as being trap\n\t     number 17, with the name debugTrap.  It has always,\n\t     actually, been trap 18.  The name change is to avoid\n\t     issues with environments that already have a record\n\t     for debugTrap.')
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,21))
if mibBuilder.loadTexts: diskFailedShutdown.setDescription('System is shutting down because the system has been\n\t\trunning in degraded mode for 24 hours.\n\t\tThe trap includes a string describing the failed disk.')
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,22))
if mibBuilder.loadTexts: diskFailed.setDescription('One or more disks failed.\n\t\tThe trap includes a string describing the failed disk(s).')
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,26))
if mibBuilder.loadTexts: diskRepaired.setDescription('The failed disks have been repaired.\n\t\tThis trap is a placeholder -\n\t\tit is not currently sent by ONTAP.')
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,31))
if mibBuilder.loadTexts: fanFailureShutdown.setDescription('Critical chassis or cpu fans have failed and the system\n\t\tis shutting down.')
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,33))
if mibBuilder.loadTexts: fanFailed.setDescription('One or more chassis fans failed.\n\t\tThe trap includes a string describing the failed fan(s).')
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,35))
if mibBuilder.loadTexts: fanWarning.setDescription('One or more chassis or cpu fans are in warning state.\n\t\tThe trap includes a string describing the fan(s) in\n\t\tthe warning state.')
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,36))
if mibBuilder.loadTexts: fanRepaired.setDescription('All fans are repaired.')
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,41))
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setDescription('Critical power supplies or power rails failed and\n\t\tthe system is shutting down.')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,43))
if mibBuilder.loadTexts: powerSupplyFailed.setDescription('One or more redundant power supplies failed.\n\t\tInclude in the trap a string describing\n\t\tthe failed power supply(ies).')
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,45))
if mibBuilder.loadTexts: powerSupplyWarning.setDescription('One or more power supplies or power rails in\n\t\twarning state. Include in the trap a string describing\n\t\tthe power supply(ies) or the power rail(s) in the\n\t\twarning state.')
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,46))
if mibBuilder.loadTexts: powerSupplyRepaired.setDescription('Previously-failed power supplies or power rails have been\n\t\trepaired.')
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,55))
if mibBuilder.loadTexts: cpuTooBusy.setDescription('CPU utilization exceeds 90%.\n\t\tThis trap is not enabled by default.\n\t\tTo enable this trap set the registry\n\t\tentry options.monitor.cpu.enable to on. \n\t\tNote that as the threshold for this trap is\n\t\tchecked once a minute it is possible to receive\n\t\tmultiple instances of this trap in a short time.')
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,56))
if mibBuilder.loadTexts: cpuOk.setDescription('CPU utilization has dropped back below 90%.\n\t\tThis trap is a placeholder -\n\t\tit is not currently sent by ONTAP.')
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,62))
if mibBuilder.loadTexts: nvramBatteryDischarged.setDescription('The NVRAM battery is fully discharged.')
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,63))
if mibBuilder.loadTexts: nvramBatteryLow.setDescription('The charge in the NVRAM battery is low.')
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,72))
if mibBuilder.loadTexts: clusterNodeFailed.setDescription('A node in a Cluster FailOver configuration failed.\n\t\tIts partner will assume service for the failed node.')
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,75))
if mibBuilder.loadTexts: clusterNodeTakenOver.setDescription('The partner has taken over for a failed cluster node.')
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,76))
if mibBuilder.loadTexts: clusterNodeRepaired.setDescription('A cluster node has resumed operation.')
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,82))
if mibBuilder.loadTexts: volumeFull.setDescription('At least one volume is more than 98% full.\n\t\tThe string sent with the trap gives the \n\t\tname of the volume or volumes which exceed\n\t\tthe threshold.')
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,85))
if mibBuilder.loadTexts: volumeNearlyFull.setDescription('At least one volume is more than 95% full.\n\t\tThe string sent with the trap gives the \n\t\tname of the volume or volumes which exceed\n\t\tthe threshold.')
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,86))
if mibBuilder.loadTexts: volumeRepaired.setDescription('All volumes are now under 95% full.')
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,91))
if mibBuilder.loadTexts: overTempShutdown.setDescription('System temperature is too high to continue\n\t\toperating.  The system is shutting down.')
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,95))
if mibBuilder.loadTexts: overTemp.setDescription('System temperature is too high and in the\n\t\twarning level.')
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,96))
if mibBuilder.loadTexts: overTempRepaired.setDescription('System temperature has returned to an\n\t\tacceptable value.')
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,103))
if mibBuilder.loadTexts: shelfFault.setDescription('A disk storage shelf reported a fault, probably due\n\t\tto a problem with drive placement, fans, power,\n\t\tor temperature.')
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,106))
if mibBuilder.loadTexts: shelfRepaired.setDescription('A previously-reported shelf fault is now corrected.')
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,111))
if mibBuilder.loadTexts: globalStatusNonRecoverable.setDescription("The appliance's overall status changed to\n\t\t'nonRecoverable', indicating a problem so severe\n\t\tthat the appliance is shutting down.")
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,113))
if mibBuilder.loadTexts: globalStatusCritical.setDescription("The appliance's overall status changed to 'critical',\n\t\tindicating a problem that needs immediate attention.")
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,115))
if mibBuilder.loadTexts: globalStatusNonCritical.setDescription("The appliance's overall status changed to 'nonCritical',\n\t\tindicating a problem that needs attention.")
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,116))
if mibBuilder.loadTexts: globalStatusOk.setDescription("The appliance's overall status returned to normal.")
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,126))
if mibBuilder.loadTexts: softQuotaExceeded.setDescription('A user has exceeded their soft quota limit.')
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,127))
if mibBuilder.loadTexts: softQuotaNormal.setDescription('A user is safely back under their soft quota limit.')
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,134))
if mibBuilder.loadTexts: autosupportSendError.setDescription('Unable to send autosupport.\n\t\tThe trap includes a string describing the reason for the failure.')
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,135))
if mibBuilder.loadTexts: autosupportConfigurationError.setDescription('Autosupport may be configured incorrectly.\n\t\tThe trap includes a string describing the mis-configuration.')
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,136))
if mibBuilder.loadTexts: autosupportSent.setDescription('Autosupport was sent successfully.')
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,142))
if mibBuilder.loadTexts: upsLinePowerOff.setDescription('UPS: Input line power has failed and UPS is now on battery.')
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,143))
if mibBuilder.loadTexts: upsBatteryCritical.setDescription('UPS: Battery is nearly exhausted, starting graceful shutdown.')
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,144))
if mibBuilder.loadTexts: upsShuttingDown.setDescription('UPS: Shutting down now: Time left on battery is exhuasted.')
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,145))
if mibBuilder.loadTexts: upsBatteryWarning.setDescription('UPS: Warning: Time left on battery is getting critical.')
upsLinePowerRetored = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,146))
if mibBuilder.loadTexts: upsLinePowerRetored.setDescription('UPS:  Input line power has been restored and UPS is now off battery.')
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,151))
if mibBuilder.loadTexts: appEmergency.setDescription('The application encountered an extremely urgent\n\t\tsituation and requires an immediate response.')
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,152))
if mibBuilder.loadTexts: appAlert.setDescription('The application is in a condition that should \n\t\tbe corrected immediately.')
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,153))
if mibBuilder.loadTexts: appCritical.setDescription('The application encountered a critical condition.')
appError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,154))
if mibBuilder.loadTexts: appError.setDescription('The application encountered an error condition.')
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,155))
if mibBuilder.loadTexts: appWarning.setDescription('The application is in a condition which is not an \n\t\terror, but which may require special handling.')
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,156))
if mibBuilder.loadTexts: appNotice.setDescription('The application is notifing of a certain event.')
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,157))
if mibBuilder.loadTexts: appInfo.setDescription("The application's message is meant for informational \n\t\tpurposes.")
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,158))
if mibBuilder.loadTexts: appTrap.setDescription('The application requires to be debugged.')
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,162))
if mibBuilder.loadTexts: alfFilewrap.setDescription('The internal audit file has wrapped. You are currently losing event\n\t\trecords.Warning the user')
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,166))
if mibBuilder.loadTexts: alfFileSaved.setDescription('The internal audit log has been autosaved to an external evt file.\n\t\tNotifying the user.')
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,167))
if mibBuilder.loadTexts: alfFileNearlyFull.setDescription('The internal audit log file is nearly full. The file is going to \n\t\twrap. Notifying the user')
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,176))
if mibBuilder.loadTexts: quotaExceeded.setDescription('One of the quota limits has been exceeded.\n\t    The trap includes a string describing the specific event\n\t    which triggered the trap.  The string is structured\n\t    in the following form:\n\n\t\tQuota Event: status=exceeded, type={hard|soft|threshold},\n\t\tuser={username}, volume={volume}, limit_item={files|disk},\n\t\tlimit_value={#files|#kilobytes}\n\t\t[ , treeid={tree-id} ] [ , vfiler={vfiler} ]\n\n\t    An example of a complete message would be:\n\n\t\tQuota Event: status=exceeded, type=soft,\n\t\tuser=admin, volume=vol1, limit_item=disk, limit_value=1000000,\n\t\ttreeid=8\n\n\t    Additional key=value items may, in the future, be appended\n\t    to this message.')
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,177))
if mibBuilder.loadTexts: quotaNormal.setDescription('One of the quota limits has gone back down to a normal level.\n\t    The trap includes a string describing the specific event\n\t    which triggered the trap.  The string is structured\n\t    in the following form:\n\n\t\tQuota Event: status=normal, type={hard|soft|threshold},\n\t\tuser={username}, volume={volume}, limit_item={files|disk},\n\t\tlimit_value={#files|#kilobytes}\n\t\t[ , treeid={tree-id} ] [ , vfiler={vfiler} ]\n\n\t    An example of a complete message would be:\n\n\t\tQuota Event: status=normal, type=soft,\n\t\tuser=admin, volume=vol1, limit_item=disk, limit_value=1000000,\n\t\ttreeid=8\n\n\t    Additional key=value items may, in the future, be appended\n\t    to this message.')
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,187))
if mibBuilder.loadTexts: waflDirFull.setDescription('The directory has been filled to its limit')
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,192))
if mibBuilder.loadTexts: eccSummary.setDescription('Memory ECC: number of new correctable ECC errors')
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,195))
if mibBuilder.loadTexts: eccMasked.setDescription('Memory ECC: High frequency of ECC errors')
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,204))
if mibBuilder.loadTexts: ftpdError.setDescription('Ftp daemon: service stopped')
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,206))
if mibBuilder.loadTexts: ftpdMaxConnNotice.setDescription('Ftp daemon: number of connections hits maximum number')
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,216))
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setDescription('Ftp daemon: number of connections nearly hits maximum number')
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,222))
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setDescription('SCSI Target: Link Break on FCP adapter')
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,224))
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setDescription('SCSI Target: FCP Partner Path Misconfigured')
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,226))
if mibBuilder.loadTexts: scsitgtThrottleNotice.setDescription('SCSI Target: Throttle limit event notification')
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,237))
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setDescription('Vif: The primary Interface on a Single mode vif has failed')
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,238))
if mibBuilder.loadTexts: vifAllLinksFailed.setDescription('Vif: All the links of the vif have failed')
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,245))
if mibBuilder.loadTexts: vfStopped.setDescription('A vFiler has stopped.')
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,246))
if mibBuilder.loadTexts: vfStarted.setDescription('A vFiler has started.')
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,254))
if mibBuilder.loadTexts: vscanVirusDetectedError.setDescription('VScan: A virus scanner has detected a virus on the Filer')
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,255))
if mibBuilder.loadTexts: vscanDisConnection.setDescription('VScan: A virus scanner has dropped its connection from the Filer')
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,256))
if mibBuilder.loadTexts: vscanConfigurationChange.setDescription('VScan: There has been a change to the vscan configuration')
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,257))
if mibBuilder.loadTexts: vscanConnection.setDescription('VScan: A virus scanner has made a connection to the Filer')
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,266))
if mibBuilder.loadTexts: vscanServerUpgrade.setDescription('VScan: The Vscan server has been upgraded')
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,272))
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setDescription('A volume that experienced a medium error during reconstruction \n\t\tis restricted and marked wafl-inconsistent, but starting \n\t\twafliron has failed. This trap is issued to alert operator \n\t\tthat a volume is not accessible and wafliron must be started \n\t\tto allow access to it.')
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,274))
if mibBuilder.loadTexts: volumeInconsistentUmount.setDescription('This trap is issued when we unmount a volume due to an \n\t\tinconsistency.')
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,275))
if mibBuilder.loadTexts: volumeStateChanged.setDescription('Volume is being taken offline or being restricted. \n\t\tThe string sent with trap specifies name of affected volume \n\t\tand its state.')
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,276))
if mibBuilder.loadTexts: volumeOnline.setDescription('Volume is online now. The string sent with trap specifies \n\t\tname of volume which is online now.')
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,283))
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setDescription('Remote Management Controller card needs replacement. The trap \n\t\tincludes a string specifying the reason for replacement')
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,284))
if mibBuilder.loadTexts: rmcCardMissingCables.setDescription('Remote Management Controller card is missing its internal \n\t\tcable, or LAN cable or power supply cable. The trap includes \n\t\ta string specifing the missing component.')
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,294))
if mibBuilder.loadTexts: volumeRemoteUnreachable.setDescription('Local volume encountered an error while communicating\n\t\tto remote volume.')
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,296))
if mibBuilder.loadTexts: volumeRemoteOk.setDescription('The communication between remote volume and local volume \n\t\treturned to normal.')
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,297))
if mibBuilder.loadTexts: volumeRemoteRestored.setDescription('The data on remote volume has been fully restored to local\n\t\tvolume.')
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,298))
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setDescription('The data on remote volume has started being restored to local\n\t\tvolume by Restore-on-Demand.')
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,304))
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setDescription('Volume is restricted due to a root volume conflict. The \n\t\tstring sent with trap specifies name of conflicting volume \n\t\twhich is being restricted.')
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,314))
if mibBuilder.loadTexts: volumeOfflineTooBig.setDescription('Volume can not be brought online because its raw size is \n\t\tlarger than maximum allowed size. The string sent with trap \n\t\tspecifies name of affected volume and its raw size, and \n\t\tmaximum allowed size.')
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,324))
if mibBuilder.loadTexts: volumeOffline.setDescription('Volume is being taken offline. The string sent with trap \n\t\tspecifies name of affected volume and reason for being \n\t\ttaken offline.')
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,334))
if mibBuilder.loadTexts: volumeRestricted.setDescription('Volume is being restricted. The string sent with trap \n\t\tspecifies name of affected volume and reason for being \n\t\trestricted.')
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,344))
if mibBuilder.loadTexts: volumeDegradedDirty.setDescription('Volume is degraded and has dirty parity. WAFL_check must be \n\t\trun on this volume before it can be brought online. The string\n\t\tsent with trap specifies name of affected volume.')
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,354))
if mibBuilder.loadTexts: volumeError.setDescription('This trap is issued when a volume can not be brought online \n\t\tdue to an error.  The string sent with trap specifies name of \n\t\taffected volume and error description.')
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,364))
if mibBuilder.loadTexts: snapmirrorSyncFailed.setDescription('Synchronous SnapMirror failed and went into asynchronous mode.')
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,366))
if mibBuilder.loadTexts: snapmirrorSyncOk.setDescription('Synchronous SnapMirror went into synchronous mode.')
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,371))
if mibBuilder.loadTexts: chassisTemperatureShutdown.setDescription('The chassis temperature is extreme.  The appliance has\n\t\tinitiated a shutdown to protect itself.  The operating\n\t\tenvironment should be monitored and corrected before\n\t\trestarting the appliance.')
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,372))
if mibBuilder.loadTexts: chassisTemperatureWarning.setDescription('The chassis temperature is either too high or too low.\n\t\tThe temperature should be monitored and, if possible, corrected.')
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,375))
if mibBuilder.loadTexts: chassisTemperatureUnknown.setDescription("The chassis temperature is unknown, because reading can't be\n\t\tobtained from the chassis temperature sensor.")
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,376))
if mibBuilder.loadTexts: chassisTemperatureOk.setDescription('The chassis temperature is OK.')
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,381))
if mibBuilder.loadTexts: chassisCPUFanStopped.setDescription('One or more CPU fans have stopped.  The appliance\n\t\thas initiated a shutdown to protect itself.  A new\n\t\tmotherboard may be required to correct the fan.\n\t\tContact Network Appliance for direction.')
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,383))
if mibBuilder.loadTexts: chassisCPUFanSlow.setDescription('A CPU fan is spinning too slowly.  A new motherboard\n\t\tmay be required to correct the fan.  Contact Network\n\t\tAppliance for direction.')
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,386))
if mibBuilder.loadTexts: chassisCPUFanOk.setDescription('All CPU fan(s) are properly functioning.')
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,391))
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setDescription('Multiple chassis power supplies failed.')
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,392))
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setDescription('One or more chassis power supplies are degraded.\n\t\tA description of the degraded state has been\n\t\tlogged to the console and message log file.')
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,393))
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setDescription('One chassis power supply failed.')
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,394))
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setDescription('One or more chassis power supplies are removed.')
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,395))
if mibBuilder.loadTexts: chassisPowerSupplyOff.setDescription('One or more chassis power supplies are off.')
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,396))
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setDescription('The chassis power supplies are all functioning properly.')
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,397))
if mibBuilder.loadTexts: chassisPowerSupplyOk.setDescription('This chassis power supply is functioning properly.')
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,403))
if mibBuilder.loadTexts: chassisPowerDegraded.setDescription('The power within the chassis is degraded.\n\t\tA description of the degraded state has been\n\t\tlogged to the console and message log file.')
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,406))
if mibBuilder.loadTexts: chassisPowerOk.setDescription('The power within the chassis is functioning properly.')
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,412))
if mibBuilder.loadTexts: chassisFanDegraded.setDescription('A chassis fan has been degraded.')
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,413))
if mibBuilder.loadTexts: chassisFanRemoved.setDescription('A chassis fan FRU has been removed.')
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,414))
if mibBuilder.loadTexts: chassisFanStopped.setDescription('One or more chassis fans have stopped.')
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,415))
if mibBuilder.loadTexts: chassisFanWarning.setDescription('One or more chassis fans is spinning slowly or too fast.')
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,416))
if mibBuilder.loadTexts: chassisFanOk.setDescription('All chassis fans are functioning properly.')
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,424))
if mibBuilder.loadTexts: writeVerificationFailed.setDescription('A write has failed a verification test \n\t\ton a SnapValidator enabled volume.')
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,435))
if mibBuilder.loadTexts: domainControllerDisconnect.setDescription('A CIFS domain controller connection to the filer has failed.')
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,444))
if mibBuilder.loadTexts: plexFailed.setDescription('This trap is issued when one plex of a mirrored \n\t\ttraditional volume or aggregate is failed. The string \n\t\tsent with this trap specifies name of affected plex or\n\t\tmirrored traditional volume or aggregate.')
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,454))
if mibBuilder.loadTexts: plexOffline.setDescription('This trap is issued when a plex becomes offline. \n\t\tThe string sent with this trap specifies name of \n\t\taffected plex or mirrored traditional volume or aggregate.')
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,482))
if mibBuilder.loadTexts: maxDirSizeAlert.setDescription("A directory has reached it's maxdirsize limit. Either \n\t\tincrease the maxdirsize or clean up the directory.")
maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789) + (0,485))
if mibBuilder.loadTexts: maxDirSizeWarning.setDescription("A directory is getting close to it's maxdirsize limit. Either\n\t\tincrease the maxdirsize or clean up the directory.")
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, smbGetPrintQueuePct=smbGetPrintQueuePct, diskFailed=diskFailed, pclNfsV2Renames=pclNfsV2Renames, tv2pGetattrs=tv2pGetattrs, v2cSetattrs=v2cSetattrs, tv2Write2KCalls=tv2Write2KCalls, dmpSubtreeEntry=dmpSubtreeEntry, v3Write2KCalls=v3Write2KCalls, pclNfsV3Lookups=pclNfsV3Lookups, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, tv2ccReads=tv2ccReads, spareBay=spareBay, switchManagementId=switchManagementId, dafsDisconnects=dafsDisconnects, svBaseSnapshot=svBaseSnapshot, v3Write512Calls=v3Write512Calls, raidVUsedMb=raidVUsedMb, ncHttpsAccelHits=ncHttpsAccelHits, overTemp=overTemp, slName=slName, v3cSetattrs=v3cSetattrs, v2pRemoves=v2pRemoves, miscHighNetSentBytes=miscHighNetSentBytes, environment=environment, v3Read16KCalls=v3Read16KCalls, vfFsIndex=vfFsIndex, v3Read32KCalls=v3Read32KCalls, connectedInitiatorType=connectedInitiatorType, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, snapmirrorState=snapmirrorState, v3Calls=v3Calls, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, vfStarted=vfStarted, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, aggrTable=aggrTable, tnfsV2=tnfsV2, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, volCloneSnap=volCloneSnap, vi=vi, ncRMMemTotal=ncRMMemTotal, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, productMachineType=productMachineType, dafsBcNulls=dafsBcNulls, obsSmbTreeConnectPct=obsSmbTreeConnectPct, portSwitchName=portSwitchName, snapvaultHostEntry=snapvaultHostEntry, smbNTTransactIoctlPct=smbNTTransactIoctlPct, volumeError=volumeError, viaCurrCQ=viaCurrCQ, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, tv2cReads=tv2cReads, cifsPCGenericUser=cifsPCGenericUser, tv3Write1KCalls=tv3Write1KCalls, smbWriteAndXPct=smbWriteAndXPct, smbTransactCreatePct=smbTransactCreatePct, tv3pCommits=tv3pCommits, dafsDirectInBytes=dafsDirectInBytes, psetPortName=psetPortName, v2Read4KCalls=v2Read4KCalls, nfsCacheBWSavings=nfsCacheBWSavings, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, viaCurrPTags=viaCurrPTags, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, raidPGroup=raidPGroup, productType=productType, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, miscLowTapeWriteBytes=miscLowTapeWriteBytes, dafsGetRootHandles=dafsGetRootHandles, autosupportSent=autosupportSent, viaConnected=viaConnected, tv3pMkdirs=tv3pMkdirs, tv3WriteStats=tv3WriteStats, ncIcapIsLicensed=ncIcapIsLicensed, nfs=nfs, v3cRenames=v3cRenames, volFSID=volFSID, qtreeStyle=qtreeStyle, miscHighTapeWriteBytes=miscHighTapeWriteBytes, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, rcUdpDelayHits=rcUdpDelayHits, cpuIdleTimePerCent=cpuIdleTimePerCent, tv3Percent=tv3Percent, portSwitchIndex=portSwitchIndex, v3cpCommits=v3cpCommits, tv2ccRoots=tv2ccRoots, ifHighInUnknownProtos=ifHighInUnknownProtos, raidVPlex=raidVPlex, chassisCPUFanOk=chassisCPUFanOk, smbRenamePct=smbRenamePct, ndmpBackupActive=ndmpBackupActive, tv3ccFsinfos=tv3ccFsinfos, obsSmbClosePrintFiles=obsSmbClosePrintFiles, dafsSessionNumCredentials=dafsSessionNumCredentials, obsSmbOpens=obsSmbOpens, lunMapLUNIndex=lunMapLUNIndex, raidVTotalBlocks=raidVTotalBlocks, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, ncHttpRespTimePerByte=ncHttpRespTimePerByte, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, svLastTransTimeSeconds=svLastTransTimeSeconds, fsMaxUsedReservedPerCent=fsMaxUsedReservedPerCent, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, v3ccLookups=v3ccLookups, psetMemberEntry=psetMemberEntry, cpFromCpDeferredOps=cpFromCpDeferredOps, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, cifsIsEnabled=cifsIsEnabled, trpcNullRecvs=trpcNullRecvs, enclDisksPresent=enclDisksPresent, snapmirrorLastTransType=snapmirrorLastTransType, pclRpcBadCalls=pclRpcBadCalls, plexFailed=plexFailed, v3cAccesss=v3cAccesss, cifsServ=cifsServ, raidVVol=raidVVol, v3pMkdirs=v3pMkdirs, eccSummary=eccSummary, v2cWrcaches=v2cWrcaches, tv2cpCreates=tv2cpCreates, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, v3pCommits=v3pCommits, dhmNoticeDegradedIO=dhmNoticeDegradedIO, ncOptions=ncOptions, v3cRemoves=v3cRemoves, ncFtpServConns=ncFtpServConns, vscanVirusDetectedError=vscanVirusDetectedError, volumeDegradedDirty=volumeDegradedDirty, tv2ccWrcaches=tv2ccWrcaches, vfIpSpace=vfIpSpace, volumeOffline=volumeOffline, cfPartnerStatus=cfPartnerStatus, slQSource=slQSource, vfProEntry=vfProEntry, smbTrans2FindFirst2s=smbTrans2FindFirst2s, ncStreamingOndemandBytesFromServers=ncStreamingOndemandBytesFromServers, lunMapEntry=lunMapEntry, v2ccNulls=v2ccNulls, viaErrConnLost=viaErrConnLost, fcpIsLicensed=fcpIsLicensed, raidVTable=raidVTable, cifsNOpenFiles=cifsNOpenFiles, fcpLowOps=fcpLowOps, blocks=blocks, tv3cReaddirPluss=tv3cReaddirPluss, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, ncHttpBytesToServers=ncHttpBytesToServers, pclNfsV2Statfss=pclNfsV2Statfss, outOfDateDiskPool=outOfDateDiskPool, ncFtpBytesFromServers=ncFtpBytesFromServers, ncHttpReqRate=ncHttpReqRate, v2ccReadlinks=v2ccReadlinks, lunSnapStatus=lunSnapStatus, tv2Read4KCalls=tv2Read4KCalls, slVName=slVName, volumeRepaired=volumeRepaired, dfMaxFilesUsed=dfMaxFilesUsed, pclNfsV3WritePerCent=pclNfsV3WritePerCent, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, volCloneOf=volCloneOf, switchDomain=switchDomain, netapp=netapp, tv3ccReadlinks=tv3ccReadlinks, diskAddingSpareCount=diskAddingSpareCount, tv3cpWrites=tv3cpWrites, dafsNicState=dafsNicState, vfEntry=vfEntry, v2cWrites=v2cWrites, netappFiler=netappFiler, viaErrorThreshold=viaErrorThreshold, cifsNOplockAckWaits=cifsNOplockAckWaits, v2Write16KCalls=v2Write16KCalls, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, snapmirrorTotalFailures=snapmirrorTotalFailures, shelfFault=shelfFault, initiatorGroupOS=initiatorGroupOS, vfStoragePaths=vfStoragePaths, volumeOfflineTooBig=volumeOfflineTooBig, cifsNShares=cifsNShares, qrVKBytesThreshold=qrVKBytesThreshold, initiatorGroupMemberEntry=initiatorGroupMemberEntry, dafsPendingRequests=dafsPendingRequests, netifEntry=netifEntry, v2pReaddirs=v2pReaddirs, ncDnsOptions=ncDnsOptions, svLastTransType=svLastTransType, ifLowOutErrors=ifLowOutErrors, psetMemberTable=psetMemberTable, chassisPowerSupplyOk=chassisPowerSupplyOk, spareDiskFirmwareRevision=spareDiskFirmwareRevision, v2ccReaddirs=v2ccReaddirs, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, dafsBcRecalls=dafsBcRecalls, slVMonth=slVMonth, raidPSectorSize=raidPSectorSize, pclNfsV3Write512Calls=pclNfsV3Write512Calls, qtreeName=qtreeName, svLag=svLag, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, tv3cNulls=tv3cNulls, spareDiskSerialNumber=spareDiskSerialNumber, v2Read512Calls=v2Read512Calls, replyCache=replyCache, slQQtreeName=slQQtreeName, slQSnapshotTime=slQSnapshotTime, nfsCalls=nfsCalls, ndmp=ndmp, v2cReaddirs=v2cReaddirs, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, ncNntpBytesToServers=ncNntpBytesToServers, obsSmbWriteRawPct=obsSmbWriteRawPct, globalStatusNonCritical=globalStatusNonCritical, pclNfsV2RootPerCent=pclNfsV2RootPerCent, pclNfsV2WritePerCent=pclNfsV2WritePerCent, v3ccRenames=v3ccRenames, v2pMkdirs=v2pMkdirs, initiatorGroupMemberIndex=initiatorGroupMemberIndex, v3cNulls=v3cNulls, qtreeVolume=qtreeVolume, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent, tv3pReads=tv3pReads, dafsLinks=dafsLinks, ncHttpBytesFromClients=ncHttpBytesFromClients, dfMountedOn=dfMountedOn, switchStatusMessage=switchStatusMessage, otherDiskNumber=otherDiskNumber, qrId=qrId, viaName=viaName, svDst=svDst, smbCheckDirPct=smbCheckDirPct, ncStreamingRtspWMBytesFromClients=ncStreamingRtspWMBytesFromClients, ncNntpBWSavings=ncNntpBWSavings, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, nfsV3=nfsV3, v3cpReaddirPluss=v3cpReaddirPluss, cifsIsWinsEnabled=cifsIsWinsEnabled, viaConnectTimeOut=viaConnectTimeOut, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, slQVolume=slQVolume, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, tv3Read32KCalls=tv3Read32KCalls, dafsSessionEntry=dafsSessionEntry, tv3Read16KCalls=tv3Read16KCalls, qrV2LowKBytesLimit=qrV2LowKBytesLimit, ifLowOutNUcastPkts=ifLowOutNUcastPkts, v2Write64KCalls=v2Write64KCalls, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", filesysMaxfilesUsed=filesysMaxfilesUsed, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, v3cMknods=v3cMknods, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, raidVDiskSerialNumber=raidVDiskSerialNumber, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, dfEntry=dfEntry, appAlert=appAlert, dmpTime=dmpTime, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, v3pReaddirs=v3pReaddirs, dafsReaddirInlines=dafsReaddirInlines, svSchedType=svSchedType, rcInProgressHits=rcInProgressHits, pclNfsV2Nulls=pclNfsV2Nulls, tv3pFsinfos=tv3pFsinfos, ncRM=ncRM, cpFromFlushOps=cpFromFlushOps, netapp1=netapp1, nfsV2=nfsV2, dafsClientAuths=dafsClientAuths, smbFindClose2Pct=smbFindClose2Pct, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, otherDiskModel=otherDiskModel, cifsSymlinksEnabled=cifsSymlinksEnabled, svTotalRestartSuccesses=svTotalRestartSuccesses, dafsServerEnabled=dafsServerEnabled, cfCannotTakeoverCause=cfCannotTakeoverCause, ncStreamingAccelIndex=ncStreamingAccelIndex, totNfs=totNfs, writeVerificationFailed=writeVerificationFailed, v2cpSetattrs=v2cpSetattrs, lunSizeHigh=lunSizeHigh, vscanConnection=vscanConnection, v3ccLinks=v3ccLinks, ncHttpAccelTable=ncHttpAccelTable, ifHighInNUcastPkts=ifHighInNUcastPkts, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, switchSymbolicName=switchSymbolicName, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, plexIndex=plexIndex, amEntry=amEntry, powerSupplyRepaired=powerSupplyRepaired, dafsSessionTable=dafsSessionTable, dafsIsLicensed=dafsIsLicensed, cifsWinsServers=cifsWinsServers, dafsReadInlines=dafsReadInlines, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, v2Read8KCalls=v2Read8KCalls, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, v2cpNulls=v2cpNulls, volNumber=volNumber, v2ccWrites=v2ccWrites, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, powerSupplyFailed=powerSupplyFailed, productFirmwareVersion=productFirmwareVersion, ncHttpsProxyOptions=ncHttpsProxyOptions, tv3ccAccesss=tv3ccAccesss, enclosure=enclosure, tv2Write64KCalls=tv2Write64KCalls, globalStatusCritical=globalStatusCritical, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, tv2ccCreates=tv2ccCreates, rcUdpMisses=rcUdpMisses, dmpStFailures=dmpStFailures, ncStats=ncStats, pclNfsV2NullPerCent=pclNfsV2NullPerCent, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, pclNfsV3Mknods=pclNfsV3Mknods, ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, obsSmbReadPct=obsSmbReadPct, enclNumber=enclNumber, miscGlobalStatus=miscGlobalStatus, lunHighOtherOps=lunHighOtherOps, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, initiator=initiator, autosupportSendError=autosupportSendError, v2ccLookups=v2ccLookups, iscsiLowWriteBytes=iscsiLowWriteBytes, miscLowNfsOps=miscLowNfsOps, rpcUdpServXDRCalls=rpcUdpServXDRCalls, cifsOpLkL2ToNones=cifsOpLkL2ToNones, svThrottleValue=svThrottleValue, enclEntry=enclEntry, v3cFsinfos=v3cFsinfos, qrV2Index=qrV2Index, rcpTcpServXDRCalls=rcpTcpServXDRCalls, dafsNicIndex=dafsNicIndex, volOptions=volOptions, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, tv3cRenames=tv3cRenames, pclNfsV3Setattrs=pclNfsV3Setattrs, v2pStatfss=v2pStatfss, amMonitorString=amMonitorString, dfMaxFilesPossible=dfMaxFilesPossible, dafsNicDirectOutBytes=dafsNicDirectOutBytes, tv2Read128KCalls=tv2Read128KCalls, v3cRmdirs=v3cRmdirs, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, dafsCalls=dafsCalls, dmpFailures=dmpFailures, enclFansPresent=enclFansPresent, smbGetPrintQueues=smbGetPrintQueues, slDay=slDay, smbTreeDisconnects=smbTreeDisconnects, obsSmbWritePrintFiles=obsSmbWritePrintFiles, dafsSetattrInlines=dafsSetattrInlines, v3cpAccesss=v3cpAccesss, otherDiskScsiId=otherDiskScsiId, v2cpSymlinks=v2cpSymlinks, volumeOnline=volumeOnline, tv2cWrcaches=tv2cWrcaches, pclNumber=pclNumber, miscHighCifsOps=miscHighCifsOps, dafsCacheHints=dafsCacheHints, smbSessionSetupAndXs=smbSessionSetupAndXs, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, ncNntpServConns=ncNntpServConns, obsSmbCreateNews=obsSmbCreateNews, lunLowReadBytes=lunLowReadBytes, tv2ccLookups=tv2ccLookups, smbSeekPct=smbSeekPct, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, ncFtpActiveServConns=ncFtpActiveServConns, dafsConnectBinds=dafsConnectBinds, outOfDateDiskRPM=outOfDateDiskRPM, pclNfsV2Wrcaches=pclNfsV2Wrcaches, ftpd=ftpd, v3cpMknods=v3cpMknods, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, smbCloses=smbCloses, ncStreamingOptions=ncStreamingOptions, fcpHighReadBytes=fcpHighReadBytes, vfIpAddresses=vfIpAddresses, ncGrmServerIsEnabled=ncGrmServerIsEnabled, qtreeOplock=qtreeOplock, ifHighOutNUcastPkts=ifHighOutNUcastPkts, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, raidPGroupNumber=raidPGroupNumber, vfName=vfName, v3ccReaddirPluss=v3ccReaddirPluss, vfProStatus=vfProStatus, tv2cpRmdirs=tv2cpRmdirs, svState=svState, dafsDefaultGid=dafsDefaultGid, netappDataFabricManager=netappDataFabricManager, nfsCacheBytesFromClients=nfsCacheBytesFromClients, otherDiskIndex=otherDiskIndex, tv3pWrites=tv3pWrites, pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, raidPUsedBlocks=raidPUsedBlocks, dafsNicTable=dafsNicTable, raidCompletionPerCent=raidCompletionPerCent, nfsCacheHitRequests=nfsCacheHitRequests, v3pLinks=v3pLinks, tv3cpFsstats=tv3cpFsstats, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, tv2Read512Calls=tv2Read512Calls, tv3ccCommits=tv3ccCommits, trcUdpMisses=trcUdpMisses, cfPartnerName=cfPartnerName, amNumber=amNumber, raidVPlexGroup=raidVPlexGroup, qrV2PathName=qrV2PathName, volType=volType, tv2ccRmdirs=tv2ccRmdirs, v2ccMkdirs=v2ccMkdirs, dafsDefaultUid=dafsDefaultUid, upsLinePowerOff=upsLinePowerOff, obsSmbCreates=obsSmbCreates, ncHttpTotalRequests=ncHttpTotalRequests, diskSummary=diskSummary, qrVId=qrVId, filesysMaxfilesPossible=filesysMaxfilesPossible, cfState=cfState, ncFtpBWSavings=ncFtpBWSavings, netifNumber=netifNumber, pclNfsV2Readdirs=pclNfsV2Readdirs, netappClusteredFiler=netappClusteredFiler, pclNfsV2Links=pclNfsV2Links, viaCurrError=viaCurrError, v3pRmdirs=v3pRmdirs, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, vifAllLinksFailed=vifAllLinksFailed, pclNfsV3Links=pclNfsV3Links, vifPrimaryLinkFailed=vifPrimaryLinkFailed, viaNicAttributes=viaNicAttributes, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, cf=cf, v3cReaddirs=v3cReaddirs, appWarning=appWarning, slVMinutes=slVMinutes, ncHttpMissRequests=ncHttpMissRequests, pclNfsV3Reads=pclNfsV3Reads, v2cpRenames=v2cpRenames, nfsPerClient=nfsPerClient, vfiler=vfiler, ncFtpTotalRequests=ncFtpTotalRequests, ncStreamingActiveServConns=ncStreamingActiveServConns, tv3ccCreates=tv3ccCreates, vfProIndex=vfProIndex, tv2ccSetattrs=tv2ccSetattrs, dafsNicInBytes=dafsNicInBytes, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, nfsCacheHighHitRequests=nfsCacheHighHitRequests, outOfDateDiskType=outOfDateDiskType, cpFromCpOps=cpFromCpOps, slVVolumeName=slVVolumeName, fcpLowWriteBytes=fcpLowWriteBytes, pclNfsV3Accesss=pclNfsV3Accesss, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, v2ccReads=v2ccReads, v3cpMkdirs=v3cpMkdirs, dfMaxFilesAvail=dfMaxFilesAvail, tv3cpSymlinks=tv3cpSymlinks, ncFtpMissRequests=ncFtpMissRequests, ncBytesFromServers=ncBytesFromServers, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed, viaConnState=viaConnState, ncLocalConfigChanged=ncLocalConfigChanged, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, ncStreamingQuickTimeBytesFromServers=ncStreamingQuickTimeBytesFromServers, spareSecondaryDiskName=spareSecondaryDiskName, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, qrVFileLimitSoft=qrVFileLimitSoft, tv3cpCommits=tv3cpCommits, tv3cpMkdirs=tv3cpMkdirs, tv2cRemoves=tv2cRemoves, slVVolume=slVVolume, obsSmbSearchPct=obsSmbSearchPct, vfProName=vfProName, dafsBatchSubmits=dafsBatchSubmits, netappNetCache=netappNetCache, tv3cLookups=tv3cLookups, tv3cMknods=tv3cMknods, dafsGetattrInlines=dafsGetattrInlines, tv2Write1KCalls=tv2Write1KCalls, sparePool=sparePool, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, raidPSecondaryDiskPort=raidPSecondaryDiskPort, v3cpLookups=v3cpLookups, dafsNulls=dafsNulls, raidPVol=raidPVol, snapmirrorSrc=snapmirrorSrc, v2Read2KCalls=v2Read2KCalls, svHostTotalFailures=svHostTotalFailures, pclNfsV3Removes=pclNfsV3Removes, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", chassisFanOk=chassisFanOk, dafsNicDevice=dafsNicDevice, viaOutMsgs=viaOutMsgs, v2cpRoots=v2cpRoots, tv3cpGetattrs=tv3cpGetattrs, initiatorListMemberEntry=initiatorListMemberEntry, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, ncNtlm=ncNtlm, trcMisses=trcMisses, smbCreateTemporaryPct=smbCreateTemporaryPct, obsSmbLockByteRangePct=obsSmbLockByteRangePct, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, productGuiUrl=productGuiUrl, v2Write1KCalls=v2Write1KCalls, tv3ccWrites=tv3ccWrites, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, chassisPowerSupplyFailed=chassisPowerSupplyFailed, cifsReads=cifsReads, dafsHurryUps=dafsHurryUps, spareTotalBlocks=spareTotalBlocks, svHostTotalDeferments=svHostTotalDeferments, ncLocalConfigVersion=ncLocalConfigVersion, dafsReadlinkInlines=dafsReadlinkInlines, dafsBcBatchCompletions=dafsBcBatchCompletions, svIndex=svIndex, tv3cpRmdirs=tv3cpRmdirs, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, switchHighPacketsRejected=switchHighPacketsRejected, chassisFanDegraded=chassisFanDegraded, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, v3pCreates=v3pCreates, portTable=portTable, pclNfsV2Writes=pclNfsV2Writes, ftpdOn=ftpdOn, viaCurrConnected=viaCurrConnected, snapvaultHostTable=snapvaultHostTable, rcpTcpNullRecvs=rcpTcpNullRecvs, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds, ndmpRestoreFailureReason=ndmpRestoreFailureReason, trpcCalls=trpcCalls, iscsiLowReadBytes=iscsiLowReadBytes, smbCopies=smbCopies, viaNicIndex=viaNicIndex, tv2ccSymlinks=tv2ccSymlinks, amStatus=amStatus, dmpTable=dmpTable, pclNfsV3Renames=pclNfsV3Renames, viaConnectRequest=viaConnectRequest, slQSnapshotName=slQSnapshotName, otherDiskStatus=otherDiskStatus, cpTotalOps=cpTotalOps, lunMapTable=lunMapTable, ncHttpOptions=ncHttpOptions, v2cpRemoves=v2cpRemoves, ncStreamingCliConns=ncStreamingCliConns, ndmpRestoreFailures=ndmpRestoreFailures, tv3ccMkdirs=tv3ccMkdirs, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, qrV2SoftFileLimit=qrV2SoftFileLimit, v3cMkdirs=v3cMkdirs, qrV2Entry=qrV2Entry, ifLowOutOctets=ifLowOutOctets, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, trpcBadLens=trpcBadLens, tv2Percent=tv2Percent, trcTcpInProgressHits=trcTcpInProgressHits, qrV2HighKBytesLimit=qrV2HighKBytesLimit, raidPTotalBlocks=raidPTotalBlocks, connectedInitiatorIsid=connectedInitiatorIsid, otherDiskType=otherDiskType, raidVGroup=raidVGroup, snapvaultSchedTable=snapvaultSchedTable, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, ncStreamingServConns=ncStreamingServConns, tv2cpMkdirs=tv2cpMkdirs, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, obsSmbReads=obsSmbReads, viaInRDMAWriteBytes=viaInRDMAWriteBytes, cpuIdleTime=cpuIdleTime, qrVTree=qrVTree, raidPTotalMb=raidPTotalMb, lunStatsResetTime=lunStatsResetTime, obsSmbCreateNewPct=obsSmbCreateNewPct, viaMaxRegisterBytes=viaMaxRegisterBytes, tv2cRenames=tv2cRenames, pclNfsV3Getattrs=pclNfsV3Getattrs, cifsObsReqs=cifsObsReqs, nfscache=nfscache, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, lunSerialNumber=lunSerialNumber, ncGrmOptions=ncGrmOptions, svPrimaryIsLicensed=svPrimaryIsLicensed, cifsIsLoginEnabled=cifsIsLoginEnabled, raidVBay=raidVBay, raidPScsiAdapter=raidPScsiAdapter, pclRpcBadLens=pclRpcBadLens, v2cpLinks=v2cpLinks, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, tv2ccReadlinks=tv2ccReadlinks, tv3Read64KCalls=tv3Read64KCalls, dafsNicNumRequestDemons=dafsNicNumRequestDemons, ncStreamingAccelEntry=ncStreamingAccelEntry, lunComment=lunComment, tv2cpLinks=tv2cpLinks, enclTempSensorsMaximum=enclTempSensorsMaximum, fcpLowReadBytes=fcpLowReadBytes, v2Read32KCalls=v2Read32KCalls, cifsHostName=cifsHostName, dafsReadDirects=dafsReadDirects, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, v3ccFsinfos=v3ccFsinfos, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, tv3cpAccesss=tv3cpAccesss, cifsPDCUpcalls=cifsPDCUpcalls, dafsDiscardResponses=dafsDiscardResponses, ncDnsIsEnabled=ncDnsIsEnabled, appEmergency=appEmergency, rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, otherDiskDiskId=otherDiskDiskId, volOwningHost=volOwningHost, obsSmbWriteAndCloses=obsSmbWriteAndCloses, ncDnsIresReverseLookups=ncDnsIresReverseLookups, tv3ccMknods=tv3ccMknods, vfSpName=vfSpName, cifsConnectedUsers=cifsConnectedUsers, smbLogoffAndXs=smbLogoffAndXs, plexName=plexName, v2CachedPerCent=v2CachedPerCent, v3ccSetattrs=v3ccSetattrs, qrVPathName=qrVPathName, obsSmbCreateDirs=obsSmbCreateDirs, enclFansFailed=enclFansFailed, alfFileNearlyFull=alfFileNearlyFull, lunLowReadOps=lunLowReadOps, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, v3pAccesss=v3pAccesss, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, spareDiskModel=spareDiskModel, cfSettings=cfSettings, viaMaxVI=viaMaxVI, v3cLookups=v3cLookups, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, fcpTargetStatus=fcpTargetStatus, slVIndex=slVIndex, aggrType=aggrType, viaErrRecvQEmpty=viaErrRecvQEmpty, dafsLookUpps=dafsLookUpps, globalStatusNonRecoverable=globalStatusNonRecoverable, tv3Read4KCalls=tv3Read4KCalls, ncStreamingRealBWSavings=ncStreamingRealBWSavings, dafsOpenDowngrades=dafsOpenDowngrades, tnfsV3=tnfsV3, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, smbNTCreateAndXs=smbNTCreateAndXs, ifLowOutUcastPkts=ifLowOutUcastPkts, smbEchos=smbEchos, smbDeletes=smbDeletes, chassisPowerDegraded=chassisPowerDegraded, productId=productId, v3Read4KCalls=v3Read4KCalls, v3pRenames=v3pRenames, otherDiskDiskPort=otherDiskDiskPort, v2ccStatfss=v2ccStatfss, ndmpTapeActive=ndmpTapeActive, v3pFsstats=v3pFsstats, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, svLastTransMBs=svLastTransMBs, volState=volState, amPort=amPort, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, dafsMaxResponseSize=dafsMaxResponseSize, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, raidVUsedBlocks=raidVUsedBlocks, spareDiskVendor=spareDiskVendor, initiatorGroupTable=initiatorGroupTable, lunHighWriteBytes=lunHighWriteBytes, lunHighReadOps=lunHighReadOps, psetEntry=psetEntry, v3ccAccesss=v3ccAccesss, rstFailures=rstFailures, takeoverMode=takeoverMode, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, cifsMultipleVCs=cifsMultipleVCs, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, viaProviderVersion=viaProviderVersion, qrType=qrType, slTable=slTable, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, dafsCreates=dafsCreates, dafsNicOutBytes=dafsNicOutBytes, v2WriteStats=v2WriteStats, cifsMisc=cifsMisc, obsSmbOpenAndXPct=obsSmbOpenAndXPct, cifsQueuedWriteRaws=cifsQueuedWriteRaws, viaConnRemotePortNumber=viaConnRemotePortNumber, v2pCreates=v2pCreates, dmpStPath=dmpStPath, dafsWriteInlines=dafsWriteInlines, svHostTotalSuccesses=svHostTotalSuccesses, rpcBadCalls=rpcBadCalls, viaMaxPTags=viaMaxPTags, v2cRoots=v2cRoots, warningTrap=warningTrap, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, lunMapInitiatorGroupName=lunMapInitiatorGroupName, raidVSectorSize=raidVSectorSize, v3Write64KCalls=v3Write64KCalls, enclContactState=enclContactState, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, raidPUsedMb=raidPUsedMb, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, v3Read2KCalls=v3Read2KCalls, snapmirrorLastTransMBs=snapmirrorLastTransMBs, raidPDiskId=raidPDiskId, fcpTargetTopology=fcpTargetTopology, netappProducts=netappProducts, tv3Read8KCalls=tv3Read8KCalls, cifsInfo=cifsInfo, otherDiskSectorSize=otherDiskSectorSize, totDafs=totDafs, initiatorGroupEntry=initiatorGroupEntry, v2ccRoots=v2ccRoots, amIndex=amIndex, tv3ccSymlinks=tv3ccSymlinks, enclProductLogicalID=enclProductLogicalID, psetTable=psetTable, smbDeletePct=smbDeletePct, spareTotalMb=spareTotalMb, ncHttpCliConns=ncHttpCliConns, spareScsiId=spareScsiId, slVDay=slVDay, slVEntry=slVEntry, qrFilesUsed=qrFilesUsed, ncDnsCacheMisses=ncDnsCacheMisses, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, dafsOpenattrs=dafsOpenattrs, dfInodesFree=dfInodesFree, ncNntpIsEnabled=ncNntpIsEnabled, ncNntpTotalRequests=ncNntpTotalRequests, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, pclNfsV3Fsstats=pclNfsV3Fsstats, tnfsServBadCalls=tnfsServBadCalls, fcpHighWriteBytes=fcpHighWriteBytes, lunIndex=lunIndex, tv2Write16KCalls=tv2Write16KCalls, obsSmbReadRawPct=obsSmbReadRawPct, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, tv2Read16KCalls=tv2Read16KCalls, v2ccWrcaches=v2ccWrcaches, cifsOplocksEnabled=cifsOplocksEnabled, fabricIndex=fabricIndex)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, v3ccReadlinks=v3ccReadlinks, ncStreamingOndemandBytesToClients=ncStreamingOndemandBytesToClients, qrVSid=qrVSid, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, fsOverallStatus=fsOverallStatus, spareDiskName=spareDiskName, ncHttpAccelEntry=ncHttpAccelEntry, vfilerIsLicensed=vfilerIsLicensed, raidIndex=raidIndex, svTotalSuccesses=svTotalSuccesses, pclNfsV3Symlinks=pclNfsV3Symlinks, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, ncHttpServConns=ncHttpServConns, tv2ccStatfss=tv2ccStatfss, dafsCommits=dafsCommits, v3pNulls=v3pNulls, tv3cLinks=tv3cLinks, obsSmbLockByteRanges=obsSmbLockByteRanges, spareDiskId=spareDiskId, v3ccMknods=v3ccMknods, rcMisses=rcMisses, accelmonitor=accelmonitor, amMonitor=amMonitor, netcache=netcache, dafsVerifys=dafsVerifys, rstAttempts=rstAttempts, miscHighDiskWriteBytes=miscHighDiskWriteBytes, v2ccSymlinks=v2ccSymlinks, cpFromLowWaterOps=cpFromLowWaterOps, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct, outOfDateDiskShelf=outOfDateDiskShelf, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, pclNfsV2Creates=pclNfsV2Creates, pclNfsV2Write512Calls=pclNfsV2Write512Calls, v2cGetattrs=v2cGetattrs, qvStateTable=qvStateTable, cp=cp, raidPDiskRPM=raidPDiskRPM, svSystemActiveDstNumber=svSystemActiveDstNumber, qrV2Id=qrV2Id, tv2WriteStats=tv2WriteStats, obsSmbCreatePct=obsSmbCreatePct, v3pRemoves=v3pRemoves, volumeInconsistentUmount=volumeInconsistentUmount, snapmirrorSyncFailed=snapmirrorSyncFailed, qrKBytesLimit=qrKBytesLimit, v2pReads=v2pReads, snapmirrorBackupNumber=snapmirrorBackupNumber, fanWarning=fanWarning, ncAuth=ncAuth, vfSpIndex=vfSpIndex, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, raidVDiskPort=raidVDiskPort, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, qrV2FilesUsed=qrV2FilesUsed, obsSmbSetInfoPct=obsSmbSetInfoPct, cpuSwitchInvocations=cpuSwitchInvocations, viaConnVINumber=viaConnVINumber, tv3pRmdirs=tv3pRmdirs, tv2pRmdirs=tv2pRmdirs, spareScsiAdapter=spareScsiAdapter, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, obsSmbQueryInfo2s=obsSmbQueryInfo2s, otherDiskBay=otherDiskBay, viaConnRcvdMessages=viaConnRcvdMessages, tv3pCreates=tv3pCreates, pclNfsV2Read512Calls=pclNfsV2Read512Calls, ncNntpRespTimePerByte=ncNntpRespTimePerByte, tv2Write4KCalls=tv2Write4KCalls, raidVSecondaryDiskName=raidVSecondaryDiskName, lunLowErrors=lunLowErrors, raidPShelf=raidPShelf, plexVolName=plexVolName, fabricEntry=fabricEntry, productVendor=productVendor, viaCurrRegisterRegions=viaCurrRegisterRegions, tv3Write512Calls=tv3Write512Calls, tv2Read8KCalls=tv2Read8KCalls, tv2ccGetattrs=tv2ccGetattrs, raidVDiskId=raidVDiskId, smbEchoPct=smbEchoPct, tv2cpRemoves=tv2cpRemoves, vfSpEntry=vfSpEntry, qrVKBytesLimitSoft=qrVKBytesLimitSoft, ncHttpBWSavings=ncHttpBWSavings, cifsNTrees=cifsNTrees, raidVIndex=raidVIndex, vscanConfigurationChange=vscanConfigurationChange, snapmirrorConnName=snapmirrorConnName, smbMovePct=smbMovePct, autosupportSuccessfulSends=autosupportSuccessfulSends, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, tv3ccLookups=tv3ccLookups, dafsAppendInlines=dafsAppendInlines, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, dfLowTotalKBytes=dfLowTotalKBytes, quotaExceeded=quotaExceeded, snapmirrorConnSrc2=snapmirrorConnSrc2, viaNicAddress=viaNicAddress, ifHighInDiscards=ifHighInDiscards, diskReconstructingParityCount=diskReconstructingParityCount, raidPDiskVendor=raidPDiskVendor, dfInodesUsed=dfInodesUsed, v2Write512Calls=v2Write512Calls, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, tv3Read2KCalls=tv3Read2KCalls, dfMirrorStatus=dfMirrorStatus, cifsStatus=cifsStatus, tv2Write128KCalls=tv2Write128KCalls, scsitgtThrottleNotice=scsitgtThrottleNotice, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, tv3Write8KCalls=tv3Write8KCalls, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, dmpStartTime=dmpStartTime, cpuOk=cpuOk, v2Percent=v2Percent, aggrUUID=aggrUUID, viaInBytes=viaInBytes, dafsWriteDirects=dafsWriteDirects, ncHttpActiveCliConns=ncHttpActiveCliConns, tv2pLookups=tv2pLookups, dafsReaddirDirects=dafsReaddirDirects, tv3cWrites=tv3cWrites, raidPDiskModel=raidPDiskModel, snapmirrorScheduleDesc=snapmirrorScheduleDesc, ncNntpCacheableRequests=ncNntpCacheableRequests, qvStateVolume=qvStateVolume, tv3cpReaddirPluss=tv3cpReaddirPluss, volumeNearlyFull=volumeNearlyFull, v3ccGetattrs=v3ccGetattrs, appError=appError, pclNfsV2Removes=pclNfsV2Removes, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, dafsDirectOutBytes=dafsDirectOutBytes, tv2Write8KCalls=tv2Write8KCalls, tv2cpReadlinks=tv2cpReadlinks, appNotice=appNotice, waflDirFull=waflDirFull, snapmirrorConnType=snapmirrorConnType, misc=misc, obsSmbSetInfo2s=obsSmbSetInfo2s, dafsExportEnabled=dafsExportEnabled, v2cpCreates=v2cpCreates, dfFileSys=dfFileSys, dfNumber=dfNumber, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, ftpdCurrentConns=ftpdCurrentConns, smbTrans2SetFileInfos=smbTrans2SetFileInfos, nfsCacheBytesToClients=nfsCacheBytesToClients, v2cRenames=v2cRenames, dfLowUsedKBytes=dfLowUsedKBytes, cifsNOpenDirs=cifsNOpenDirs, qtreeEntry=qtreeEntry, slQIndex=slQIndex, switchHighPacketsProcessed=switchHighPacketsProcessed, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, svSecondaryIsLicensed=svSecondaryIsLicensed, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, smbSessionSetupAndXPct=smbSessionSetupAndXPct, ncFtpBytesFromClients=ncFtpBytesFromClients, tv2pCreates=tv2pCreates, ncHttpBytesToClients=ncHttpBytesToClients, v2Calls=v2Calls, cifsTotalOps=cifsTotalOps, miscHighHttpOps=miscHighHttpOps, v2Write4KCalls=v2Write4KCalls, initiatorGroupUsePartner=initiatorGroupUsePartner, dafsReadlinkDirects=dafsReadlinkDirects, miscLowHttpOps=miscLowHttpOps, chassisCPUFanStopped=chassisCPUFanStopped, dmpLevel=dmpLevel, smbRenames=smbRenames, qrVFileLimit=qrVFileLimit, snapmirrorStatus=snapmirrorStatus, pclNfsV3Creates=pclNfsV3Creates, snapmirrorSyncToAsync=snapmirrorSyncToAsync, snapvaultStatusTable=snapvaultStatusTable, dafsNverifys=dafsNverifys, tv3pReaddirPluss=tv3pReaddirPluss, pclNfsV2Roots=pclNfsV2Roots, svOn=svOn, dafsSessionNumRequests=dafsSessionNumRequests, v2ccCreates=v2ccCreates, v3cLinks=v3cLinks, lunMapLUNName=lunMapLUNName, miscNetRcvdKB=miscNetRcvdKB, v3pPathconfs=v3pPathconfs, v3cpWrites=v3cpWrites, dafsNicDirectInBytes=dafsNicDirectInBytes, cifsMaxConnections=cifsMaxConnections, vfIndex=vfIndex, ncStreamingActiveCliConns=ncStreamingActiveCliConns, obsSmbSearchs=obsSmbSearchs, qvStateStat=qvStateStat, obsSmbWritePct=obsSmbWritePct, cifsWrites=cifsWrites, switchIndex=switchIndex, pclNfsCalls=pclNfsCalls, miscHighDiskReadBytes=miscHighDiskReadBytes, ncVersion=ncVersion, tv3cReads=tv3cReads, plexEntry=plexEntry, svTotalFailures=svTotalFailures, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, netappSupportConsole=netappSupportConsole, viaConnEntry=viaConnEntry, rmcCardMissingCables=rmcCardMissingCables, smbNTCancelOthers=smbNTCancelOthers, dafsAnonymousAuthentication=dafsAnonymousAuthentication, initiatorName=initiatorName, cifsMaxShares=cifsMaxShares, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, ncGrmServerIsLicensed=ncGrmServerIsLicensed, obsSmbWriteMPXs=obsSmbWriteMPXs, dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, pclNfsV3Pathconfs=pclNfsV3Pathconfs, dafsExportRwMode=dafsExportRwMode, viaConnLocalNetAddress=viaConnLocalNetAddress, v2pSymlinks=v2pSymlinks, tv2cpReaddirs=tv2cpReaddirs, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, viaCurrRegisterBytes=viaCurrRegisterBytes, dmpNumFiles=dmpNumFiles, ncIcapIsEnabled=ncIcapIsEnabled, pclNfsV2Lookups=pclNfsV2Lookups, v2cpStatfss=v2cpStatfss, outOfDateDiskBay=outOfDateDiskBay, tv2cpNulls=tv2cpNulls, enclElectronicsMaximum=enclElectronicsMaximum, viaOutBytes=viaOutBytes, dfTable=dfTable, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, autosupportStatus=autosupportStatus, tv2cLinks=tv2cLinks, tv3ccGetattrs=tv3ccGetattrs, portFabricIndex=portFabricIndex, nfsCacheRpcRecords=nfsCacheRpcRecords, quotaInitPercent=quotaInitPercent, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, diskActiveCount=diskActiveCount, tv3cAccesss=tv3cAccesss, dafsExportPath=dafsExportPath, cifsTotalCalls=cifsTotalCalls, tv2cGetattrs=tv2cGetattrs, raidScsiAdapter=raidScsiAdapter, volumeRemoteOk=volumeRemoteOk, raidVDiskModel=raidVDiskModel, qrV2LowKBytesUsed=qrV2LowKBytesUsed, fcpTargetNN=fcpTargetNN, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", tv3pReaddirs=tv3pReaddirs, v3cpGetattrs=v3cpGetattrs, dmpIndex=dmpIndex, smbLogoffAndXPct=smbLogoffAndXPct, ndmpBackupSuccesses=ndmpBackupSuccesses, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, tv2ccLinks=tv2ccLinks, dafsSessionMaxRequests=dafsSessionMaxRequests, pclNfsV3Writes=pclNfsV3Writes, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, viaConnLocalDescriminator=viaConnLocalDescriminator, ncStreamingTotalRequests=ncStreamingTotalRequests, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, rcTcpMisses=rcTcpMisses, tv3cpRenames=tv3cpRenames, obsSmbOpenPct=obsSmbOpenPct, tv3Read128KCalls=tv3Read128KCalls, productApiUrl=productApiUrl, rpcUdpNullRecvs=rpcUdpNullRecvs, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, tv3pNulls=tv3pNulls, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, v3Percent=v3Percent, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, tv3ccReaddirPluss=tv3ccReaddirPluss, tv3Write32KCalls=tv3Write32KCalls, product=product, nfsServBadCalls=nfsServBadCalls, v2pLinks=v2pLinks, snapvaultSchedEntry=snapvaultSchedEntry, ncFtpBytesToServers=ncFtpBytesToServers, rcTcpInProgressHits=rcTcpInProgressHits, smbOpenPrintFiles=smbOpenPrintFiles, tv3Write128KCalls=tv3Write128KCalls, spareSecondaryDiskPort=spareSecondaryDiskPort, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, cifsTimeToShutdown=cifsTimeToShutdown, ncStreaming=ncStreaming, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, v2pReadlinks=v2pReadlinks, snapmirrorOn=snapmirrorOn, raidPSecondaryDiskName=raidPSecondaryDiskName, ncNntpBytesFromClients=ncNntpBytesFromClients, tv3Write16KCalls=tv3Write16KCalls, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, qrV2Sid=qrV2Sid, switchFabricIndex=switchFabricIndex, productCPUArch=productCPUArch, switchTable=switchTable, fcpTargetStandby=fcpTargetStandby, otherDiskEntry=otherDiskEntry, miscLowDiskReadBytes=miscLowDiskReadBytes, cpuContextSwitches=cpuContextSwitches, tv3Read1KCalls=tv3Read1KCalls, dafsAccesses=dafsAccesses, qrPathName=qrPathName, v2ccSetattrs=v2ccSetattrs, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, tv2cCreates=tv2cCreates, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, network=network, pclNfsV2Reads=pclNfsV2Reads, otherDiskShelf=otherDiskShelf, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, chassisPowerSuppliesOk=chassisPowerSuppliesOk, raidPPlex=raidPPlex, volumeStateChanged=volumeStateChanged, qrIndex=qrIndex, v2ccRenames=v2ccRenames, cifsSecurityModel=cifsSecurityModel, smbMoves=smbMoves, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, iscsiHighReadBytes=iscsiHighReadBytes, raidPEntry=raidPEntry, vfProTable=vfProTable, v2cMkdirs=v2cMkdirs, qrV2Type=qrV2Type, v3cPathconfs=v3cPathconfs, ndmpRestoreSuccesses=ndmpRestoreSuccesses, ncStreamingQuickTimeBytesToServers=ncStreamingQuickTimeBytesToServers, autosupport=autosupport, dfLowAvailKBytes=dfLowAvailKBytes, lastsuccess=lastsuccess, raidTotalMb=raidTotalMb, miscHighNetRcvdBytes=miscHighNetRcvdBytes, otherDiskPool=otherDiskPool, dafsRenames=dafsRenames, viaNicEntry=viaNicEntry, outOfDateDiskTable=outOfDateDiskTable, smbOpenPrintFilePct=smbOpenPrintFilePct, vfFilers=vfFilers, lunMapped=lunMapped, nfsCacheLowMissRequests=nfsCacheLowMissRequests, dafsNicName=dafsNicName, vfIpTable=vfIpTable, initiatorListMemberEntryIndex=initiatorListMemberEntryIndex, dfStatus=dfStatus, tv3cpReaddirs=tv3cpReaddirs, chassisFanStopped=chassisFanStopped, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, v2cSymlinks=v2cSymlinks, ncFtpObjHitrate=ncFtpObjHitrate, tv2pWrcaches=tv2pWrcaches, v2Write2KCalls=v2Write2KCalls, tv3CachedCalls=tv3CachedCalls, rpcNullRecvs=rpcNullRecvs, productVersion=productVersion, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, criticalTrap=criticalTrap, svSchedStatus=svSchedStatus, raidVPlexName=raidVPlexName, cpFromTimerOps=cpFromTimerOps, v3Read64KCalls=v3Read64KCalls, amTable=amTable, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, viaNativeMTU=viaNativeMTU, diskReconstructingCount=diskReconstructingCount, enclProductSerialNo=enclProductSerialNo, v3ccFsstats=v3ccFsstats, tv2Read64KCalls=tv2Read64KCalls, ncDnsCacheHits=ncDnsCacheHits, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, cifsOpens=cifsOpens, outOfDateDiskVendor=outOfDateDiskVendor, tv3ccPathconfs=tv3ccPathconfs, snapmirrorTotalDeferments=snapmirrorTotalDeferments, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, targetAdapterName=targetAdapterName, clusterNodeFailed=clusterNodeFailed, v3cWrites=v3cWrites, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, obsSmbProcessExitPct=obsSmbProcessExitPct, svSystemActiveSrcNumber=svSystemActiveSrcNumber, otherDiskVendor=otherDiskVendor, pclNfsV2Symlinks=pclNfsV2Symlinks, v2ccRmdirs=v2ccRmdirs, raidPDiskType=raidPDiskType, rcUdpInProgressHits=rcUdpInProgressHits, dafsNicListenAddr=dafsNicListenAddr, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, spareTable=spareTable, cifsAlignedSmallRels=cifsAlignedSmallRels, v3cpReaddirs=v3cpReaddirs, viaDisconnect=viaDisconnect, v3pMknods=v3pMknods, volStatus=volStatus, otherDiskDiskName=otherDiskDiskName, cifsSuspectOps=cifsSuspectOps, smbTrans2FindNext2s=smbTrans2FindNext2s, v3ccCreates=v3ccCreates, aggrIndex=aggrIndex, cifsIsLicensed=cifsIsLicensed, trcNonIdemDoneHits=trcNonIdemDoneHits, fabricStatus=fabricStatus, v2pSetattrs=v2pSetattrs, slQQtreeContent=slQQtreeContent, trpcServ=trpcServ, tv3ccSetattrs=tv3ccSetattrs, connectedInitiatorPortName=connectedInitiatorPortName, v2cpMkdirs=v2cpMkdirs, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, tv2cpLookups=tv2cpLookups, smbLockingAndXPct=smbLockingAndXPct, plexPercentResyncing=plexPercentResyncing, dafsNicEntry=dafsNicEntry, v2cpReaddirs=v2cpReaddirs, grmMonitorString=grmMonitorString, tv2cReaddirs=tv2cReaddirs, cifsDomainName=cifsDomainName, ncStreamingHitRequests=ncStreamingHitRequests, qrV2IdType=qrV2IdType, dafsExportAccessList=dafsExportAccessList, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, raidPPlexNumber=raidPPlexNumber, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, vfIpEntry=vfIpEntry, viaNodeSystemName=viaNodeSystemName, slVHour=slVHour, ncHttpObjHitrate=ncHttpObjHitrate, svSchedSnapshot=svSchedSnapshot, smbNTCancelPct=smbNTCancelPct, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, cifsGetAttrs=cifsGetAttrs, qrVType=qrVType, v2ccGetattrs=v2ccGetattrs, qtreeStatus=qtreeStatus, ifHighInErrors=ifHighInErrors, qrVKBytesLimit=qrVKBytesLimit, restore=restore, ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, v2cpReadlinks=v2cpReadlinks, pclNfsV3Commits=pclNfsV3Commits, raidScsiId=raidScsiId, snapvaultStatusEntry=snapvaultStatusEntry, qtreeId=qtreeId, snapmirrorThrottleValue=snapmirrorThrottleValue, v2Write32KCalls=v2Write32KCalls, portName=portName, svSchedVolume=svSchedVolume, trcTcpMisses=trcTcpMisses, tv2Read2KCalls=tv2Read2KCalls, obsSmbCreateDirPct=obsSmbCreateDirPct, qrV2QuotaUnlimited=qrV2QuotaUnlimited, volumeRemoteUnreachable=volumeRemoteUnreachable, ncIsEnabled=ncIsEnabled, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, tv3cpLinks=tv3cpLinks, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, svHostName=svHostName, fcpTargetTableEntry=fcpTargetTableEntry, enclTable=enclTable, takeoverinfo=takeoverinfo, cifsMaxFiles=cifsMaxFiles, v3cpPathconfs=v3cpPathconfs, nfsCacheStats=nfsCacheStats, dfHighTotalKBytes=dfHighTotalKBytes, ifLowInUnknownProtos=ifLowInUnknownProtos, ncCmsOptions=ncCmsOptions, tv3pReadlinks=tv3pReadlinks, cpuCount=cpuCount, outOfDateDiskScsiId=outOfDateDiskScsiId, dfHighUsedKBytes=dfHighUsedKBytes, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, viaErrors=viaErrors, vfFiIndex=vfFiIndex, enclFansMaximum=enclFansMaximum, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, svSrcSnapshotTime=svSrcSnapshotTime, dfKBytesUsed=dfKBytesUsed, qrVKBytesUsed=qrVKBytesUsed, notificationTrap=notificationTrap, tv2cpWrites=tv2cpWrites, cifsWaitLocks=cifsWaitLocks, snapmirrorStatusTable=snapmirrorStatusTable, ncTotalBWSavings=ncTotalBWSavings, nvramBatteryLow=nvramBatteryLow, obsSmbOpenAndXs=obsSmbOpenAndXs, ncStreamingRtspWMBytesFromServers=ncStreamingRtspWMBytesFromServers, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, raidVGroupNumber=raidVGroupNumber, miscHighNfsOps=miscHighNfsOps, psetIndex=psetIndex, tv3cMkdirs=tv3cMkdirs, qrV2FileLimit=qrV2FileLimit, switchLowPacketsProcessed=switchLowPacketsProcessed, cpFromSyncOps=cpFromSyncOps, rpcUdpCalls=rpcUdpCalls, fanRepaired=fanRepaired, ncGrmAgentOptions=ncGrmAgentOptions, chassisTemperatureShutdown=chassisTemperatureShutdown)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", dmpStatus=dmpStatus, upsShuttingDown=upsShuttingDown, pset=pset, ifLowInOctets=ifLowInOctets, enclElectronicsPresent=enclElectronicsPresent, volumeRemoteRestored=volumeRemoteRestored, lunShareStatus=lunShareStatus, ifLowInErrors=ifLowInErrors, tv2pWrites=tv2pWrites, maxDirSizeWarning=maxDirSizeWarning, dafsDelegPurges=dafsDelegPurges, v2cRmdirs=v2cRmdirs, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, v3pReadlinks=v3pReadlinks, raidPCompletionPerCent=raidPCompletionPerCent, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, cifsOthers=cifsOthers, filesys=filesys, softQuotaNormal=softQuotaNormal, ndmpSessionOpened=ndmpSessionOpened, smbFlushPct=smbFlushPct, tv3cRemoves=tv3cRemoves, slQSourceTime=slQSourceTime, slQTable=slQTable, v3ccWrites=v3ccWrites, ncStreamingAccelTable=ncStreamingAccelTable, snapmirrorIsLicensed=snapmirrorIsLicensed, outOfDateDiskEntry=outOfDateDiskEntry, nfsCacheOptions=nfsCacheOptions, v3Read512Calls=v3Read512Calls, qrTable=qrTable, snapmirrorReadBytes=snapmirrorReadBytes, grmmonitor=grmmonitor, tv2pRemoves=tv2pRemoves, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, v3cpFsinfos=v3cpFsinfos, spareDiskRPM=spareDiskRPM, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, snapmirrorStatusEntry=snapmirrorStatusEntry, tv3cPathconfs=tv3cPathconfs, miscLowDiskWriteBytes=miscLowDiskWriteBytes, enclNumberDiskBays=enclNumberDiskBays, ifHighOutErrors=ifHighOutErrors, psetMemberNameIndex=psetMemberNameIndex, miscGlobalStatusMessage=miscGlobalStatusMessage, v3cpSetattrs=v3cpSetattrs, appInfo=appInfo, fcpTargetTable=fcpTargetTable, tv2Read1KCalls=tv2Read1KCalls, ncNntpObjHitrate=ncNntpObjHitrate, v2CachedCalls=v2CachedCalls, tv3pRenames=tv3pRenames, tv3Write2KCalls=tv3Write2KCalls, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, fabricTable=fabricTable, snapmirrorLag=snapmirrorLag, raidVSecondaryDiskPort=raidVSecondaryDiskPort, viaConnSentMessages=viaConnSentMessages, plexStatus=plexStatus, obsSmbWriteRaws=obsSmbWriteRaws, snapmirrorDst=snapmirrorDst, pclNfsV3Readdirs=pclNfsV3Readdirs, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, cifsCopyToAligns=cifsCopyToAligns, fsStatus=fsStatus, otherDiskTotalMb=otherDiskTotalMb, tv2pLinks=tv2pLinks, dafsReleaseCreds=dafsReleaseCreds, dafsGetFsattrs=dafsGetFsattrs, emergencyTrap=emergencyTrap, dafsOpens=dafsOpens, lunLowWriteBytes=lunLowWriteBytes, v2cpReads=v2cpReads, qtreeTable=qtreeTable, v3CachedCalls=v3CachedCalls, svHostType=svHostType, otherDiskScsiAdapter=otherDiskScsiAdapter, cifsDCName=cifsDCName, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, tv3ccReads=tv3ccReads, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, v2ccRemoves=v2ccRemoves, rmcCardNeedsReplacement=rmcCardNeedsReplacement, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, raidPPlexName=raidPPlexName, smbNTCancels=smbNTCancels, portNumber=portNumber, dafsInBytes=dafsInBytes, trcUdpInProgressHits=trcUdpInProgressHits, ncHttpHitRequests=ncHttpHitRequests, tv2Calls=tv2Calls, tv2Write32KCalls=tv2Write32KCalls, obsSmbWriteMPXPct=obsSmbWriteMPXPct, cpu=cpu, smbNegProts=smbNegProts, ncHttpActiveServConns=ncHttpActiveServConns, v3pFsinfos=v3pFsinfos, v2cCreates=v2cCreates, dafsRegisterCreds=dafsRegisterCreds, svStatus=svStatus, v2pGetattrs=v2pGetattrs, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, tv3cpSetattrs=tv3cpSetattrs, cifsPercent=cifsPercent, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, raidPBay=raidPBay, aggrOwningHost=aggrOwningHost, cifsNSessions=cifsNSessions, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, cifsAltNames=cifsAltNames, obsSmbQueryInfoPct=obsSmbQueryInfoPct, smbNTTransactCreates=smbNTTransactCreates, snapmirrorConnTable=snapmirrorConnTable, nfsOptions=nfsOptions, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, viaCurrConnectWaitPending=viaCurrConnectWaitPending, viaNodeConnection=viaNodeConnection, smbTrans2CreateDirPct=smbTrans2CreateDirPct, ncNntp=ncNntp, slVNumber=slVNumber, takeoverStatus=takeoverStatus, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, spareIndex=spareIndex, otherDiskFirmwareRevision=otherDiskFirmwareRevision, miscCacheAge=miscCacheAge, v2Read1KCalls=v2Read1KCalls, v2cReadlinks=v2cReadlinks, shelfRepaired=shelfRepaired, tv3cReadlinks=tv3cReadlinks, dafsExportTable=dafsExportTable, miscLowNetRcvdBytes=miscLowNetRcvdBytes, smbReadAndXs=smbReadAndXs, v3cReadlinks=v3cReadlinks, tv3pFsstats=tv3pFsstats, tv3ccNulls=tv3ccNulls, tv3cFsinfos=tv3cFsinfos, tv2cWrites=tv2cWrites, pclNfsV2Rmdirs=pclNfsV2Rmdirs, dafsSessionClientVerifier=dafsSessionClientVerifier, diskFailedShutdown=diskFailedShutdown, tv2cSymlinks=tv2cSymlinks, slHour=slHour, miscLowNetSentBytes=miscLowNetSentBytes, fabricInstances=fabricInstances, raidVDiskVendor=raidVDiskVendor, pclRpcServXDRCalls=pclRpcServXDRCalls, smbSeeks=smbSeeks, ncHttpsAccelTable=ncHttpsAccelTable, initiatorGroupType=initiatorGroupType, dmpActives=dmpActives, vscanDisConnection=vscanDisConnection, v2pRoots=v2pRoots, qvStateName=qvStateName, smbClosePct=smbClosePct, vfFpIndex=vfFpIndex, miscLowTapeReadBytes=miscLowTapeReadBytes, ncBytesFromClients=ncBytesFromClients, dafsLockus=dafsLockus, cifsClearTextPasswd=cifsClearTextPasswd, dafsSessionMaxCredentials=dafsSessionMaxCredentials, dafsExportName=dafsExportName, netifIndex=netifIndex, raidVShelf=raidVShelf, nfsCacheEjectRequests=nfsCacheEjectRequests, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, qtreeVolumeName=qtreeVolumeName, dmpDuration=dmpDuration, ncIcapv1IsEnabled=ncIcapv1IsEnabled, ncHttpAvgRespTime=ncHttpAvgRespTime, viaConnectWait=viaConnectWait, v2cReads=v2cReads, miscCorrectedMachineChecks=miscCorrectedMachineChecks, ncStreamingAccelHits=ncStreamingAccelHits, initiatorGroupIndex=initiatorGroupIndex, viaErrPostDesc=viaErrPostDesc, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, v3cpSymlinks=v3cpSymlinks, nfsServ=nfsServ, aggrName=aggrName, cpuTooBusy=cpuTooBusy, dmpAttempts=dmpAttempts, ftpdError=ftpdError, volEntry=volEntry, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, tv2cRmdirs=tv2cRmdirs, ncRMMemFree=ncRMMemFree, v2cNulls=v2cNulls, lunHighOps=lunHighOps, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, v3cpReads=v3cpReads, ndmpBackupFailures=ndmpBackupFailures, ncAdminPort=ncAdminPort, tv3cpReads=tv3cpReads, tv2cpWrcaches=tv2cpWrcaches, snapmirrorIndex=snapmirrorIndex, snapmirrorBackupAborts=snapmirrorBackupAborts, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, viaInMsgs=viaInMsgs, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, cpFromSnapshotOps=cpFromSnapshotOps, viaInRdma=viaInRdma, outOfDateDiskCount=outOfDateDiskCount, v2Read128KCalls=v2Read128KCalls, cpFromLowVbufOps=cpFromLowVbufOps, snapmirrorSchedule=snapmirrorSchedule, nfsCacheBytesToServers=nfsCacheBytesToServers, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, v3Write8KCalls=v3Write8KCalls, ifHighInOctets=ifHighInOctets, ncStreamingQuickTimeBytesToClients=ncStreamingQuickTimeBytesToClients, rstSuccesses=rstSuccesses, qrKBytesUsed=qrKBytesUsed, viaMaxRegisterRegions=viaMaxRegisterRegions, v2cLinks=v2cLinks, obsSmbReadMPXPct=obsSmbReadMPXPct, ncHttpsAccelIndex=ncHttpsAccelIndex, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, trcTcpDelayHits=trcTcpDelayHits, tv3cFsstats=tv3cFsstats, dafsCheckResponses=dafsCheckResponses, ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, tv3CachedPerCent=tv3CachedPerCent, nvram=nvram, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, enclChannelShelfAddr=enclChannelShelfAddr, ncNntpBytesFromServers=ncNntpBytesFromServers, fabricStatusMessage=fabricStatusMessage, smbLockingAndXs=smbLockingAndXs, smbWriteAndXs=smbWriteAndXs, sysStat=sysStat, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, aggrState=aggrState, viaCreated=viaCreated, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, enclIndex=enclIndex, productTrapData=productTrapData, v3Write4KCalls=v3Write4KCalls, cpuBusyTimePerCent=cpuBusyTimePerCent, ncStreamingBWSavings=ncStreamingBWSavings, viaErrRdmarProt=viaErrRdmarProt, v3cpReadlinks=v3cpReadlinks, enclPowerSuppliesFailed=enclPowerSuppliesFailed, dafsUseChecksums=dafsUseChecksums, tv3cpNulls=tv3cpNulls, cifsAlignedLarges=cifsAlignedLarges, dafsExportEntry=dafsExportEntry, userDefined=userDefined, informationalTrap=informationalTrap, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, v2cLookups=v2cLookups, v3cReaddirPluss=v3cReaddirPluss, v3Write32KCalls=v3Write32KCalls)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", vfIpAddr=vfIpAddr, ncNntpIsLicensed=ncNntpIsLicensed, cifsSMBDisconnects=cifsSMBDisconnects, v3cpCreates=v3cpCreates, ndmpBackupFailureReason=ndmpBackupFailureReason, lunOnline=lunOnline, cpFromLogFullOps=cpFromLogFullOps, alertTrap=alertTrap, outOfDateDiskTotalMb=outOfDateDiskTotalMb, tv3cReaddirs=tv3cReaddirs, dafsSessionId=dafsSessionId, tv2cLookups=tv2cLookups, tv3cGetattrs=tv3cGetattrs, overTempShutdown=overTempShutdown, eccMasked=eccMasked, enclProductID=enclProductID, trpcServXDRCalls=trpcServXDRCalls, rcpTcpCalls=rcpTcpCalls, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, maxDirSizeAlert=maxDirSizeAlert, qrVFilesUsed=qrVFilesUsed, smbFlushes=smbFlushes, plexOffline=plexOffline, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, outOfDateDiskIndex=outOfDateDiskIndex, cifsDupDisconnects=cifsDupDisconnects, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, raidUsedMb=raidUsedMb, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, rcpTcpBadLens=rcpTcpBadLens, tv2cpSymlinks=tv2cpSymlinks, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, cifsDomainJoined=cifsDomainJoined, v3Write16KCalls=v3Write16KCalls, v3ccNulls=v3ccNulls, clusterNodeTakenOver=clusterNodeTakenOver, tv2pRoots=tv2pRoots, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, dafsSessionEndian=dafsSessionEndian, raidVStatus=raidVStatus, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, v2pRenames=v2pRenames, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, productModel=productModel, fabric=fabric, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, tv2ccRenames=tv2ccRenames, overTempRepaired=overTempRepaired, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, cifsNbtWaits=cifsNbtWaits, vfState=vfState, dfKBytesTotal=dfKBytesTotal, ncDnsIresIsEnabled=ncDnsIresIsEnabled, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, slEntry=slEntry, diskTotalCount=diskTotalCount, qrV2Tree=qrV2Tree, tv3ccReaddirs=tv3ccReaddirs, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, enclElectronicsSerialNos=enclElectronicsSerialNos, ftpdMaxConnNotice=ftpdMaxConnNotice, tv2ccMkdirs=tv2ccMkdirs, ifHighOutDiscards=ifHighOutDiscards, viaConnRemoteNetAddress=viaConnRemoteNetAddress, qrVTable=qrVTable, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, tv2pRenames=tv2pRenames, fanFailureShutdown=fanFailureShutdown, vfUuid=vfUuid, nfsCacheIsEnabled=nfsCacheIsEnabled, powerSupplyWarning=powerSupplyWarning, raidUsedBlocks=raidUsedBlocks, upsBatteryCritical=upsBatteryCritical, qvStateEntry=qvStateEntry, raidVCompletionPerCent=raidVCompletionPerCent, qrV2Table=qrV2Table, dmpSuccesses=dmpSuccesses, slQEntry=slQEntry, raidEntry=raidEntry, otherDiskRPM=otherDiskRPM, smbNTCancelOtherPct=smbNTCancelOtherPct, tv2Write512Calls=tv2Write512Calls, v3ccReads=v3ccReads, volUUID=volUUID, tv2pMkdirs=tv2pMkdirs, ncFtp=ncFtp, lunLowWriteOps=lunLowWriteOps, netifDescr=netifDescr, dafsMaxIdleSeconds=dafsMaxIdleSeconds, qrVVolume=qrVVolume, snapmirrorConnDst1=snapmirrorConnDst1, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages, raidDiskName=raidDiskName, cifsObsPercent=cifsObsPercent, svTotalDeferments=svTotalDeferments, obsSmbLockAndReads=obsSmbLockAndReads, envFailedFanMessage=envFailedFanMessage, ncFtpActiveCliConns=ncFtpActiveCliConns, psetName=psetName, tv2pSymlinks=tv2pSymlinks, snapmirrorConnDst2=snapmirrorConnDst2, smbReadAndXPct=smbReadAndXPct, lunQtreeName=lunQtreeName, qrEntry=qrEntry, tv3Calls=tv3Calls, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, obsSmbReadMPXs=obsSmbReadMPXs, v3ccRemoves=v3ccRemoves, svHostIndex=svHostIndex, qrVIndex=qrVIndex, tv2CachedCalls=tv2CachedCalls, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, outOfDateDiskDiskPort=outOfDateDiskDiskPort, switchStatus=switchStatus, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, cifsLocks=cifsLocks, dfKBytesAvail=dfKBytesAvail, ncFtpHitRequests=ncFtpHitRequests, fanFailed=fanFailed, smbCopyPct=smbCopyPct, cifsOps=cifsOps, obsSmbQueryInfos=obsSmbQueryInfos, v3cpRemoves=v3cpRemoves, rpcBadLens=rpcBadLens, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, cifsWGName=cifsWGName, viaErrCompProt=viaErrCompProt, dmpStSuccesses=dmpStSuccesses, viaConnTable=viaConnTable, raidVDiskName=raidVDiskName, v2pWrcaches=v2pWrcaches, raidPDiskPort=raidPDiskPort, v2cpRmdirs=v2cpRmdirs, vfIpIndex=vfIpIndex, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, vfAllowedProtocols=vfAllowedProtocols, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, dafsSetattrDirects=dafsSetattrDirects, tv3cpFsinfos=tv3cpFsinfos, initiatorGroupMemberTable=initiatorGroupMemberTable, ncHttpBytesFromServers=ncHttpBytesFromServers, aggrOptions=aggrOptions, chassisPowerOk=chassisPowerOk, qtreeIndex=qtreeIndex, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, tv3cpMknods=tv3cpMknods, ncStreamingOndemandBytesFromClients=ncStreamingOndemandBytesFromClients, viaHardwareVersion=viaHardwareVersion, lunHighWriteOps=lunHighWriteOps, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, viaMaxTransferSize=viaMaxTransferSize, ifLowOutDiscards=ifLowOutDiscards, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct, ncHttpIsEnabled=ncHttpIsEnabled, chassisFanWarning=chassisFanWarning, dafsBcGetattrs=dafsBcGetattrs, tv2cNulls=tv2cNulls, v2cpWrcaches=v2cpWrcaches, spareShelf=spareShelf, dafsClientConnectAuths=dafsClientConnectAuths, smbCreateTemporaries=smbCreateTemporaries, cifsStats=cifsStats, v3pSymlinks=v3pSymlinks, outOfDateDiskDiskName=outOfDateDiskDiskName, tv2cRoots=tv2cRoots, nvramBatteryStatus=nvramBatteryStatus, cifsOptions=cifsOptions, ncNtlmPossibleProblem=ncNtlmPossibleProblem, v3ccSymlinks=v3ccSymlinks, fabricName=fabricName, ncNntpOptions=ncNntpOptions, fcpTargetSpeed=fcpTargetSpeed, trcUdpDelayHits=trcUdpDelayHits, envFailedPowerSupplyCount=envFailedPowerSupplyCount, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, trcInProgressHits=trcInProgressHits, viaMaxCQ=viaMaxCQ, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo, raidPDiskName=raidPDiskName, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, raidPStatus=raidPStatus, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, diskSpareCount=diskSpareCount, raidVNumber=raidVNumber, ifLowInNUcastPkts=ifLowInNUcastPkts, v2pNulls=v2pNulls, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, outOfDateDiskDiskId=outOfDateDiskDiskId, lunHighErrors=lunHighErrors, productPartnerSerialNum=productPartnerSerialNum, rstActives=rstActives, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, v2Write128KCalls=v2Write128KCalls, dfType=dfType, cifsNeedPW=cifsNeedPW, ncHttp=ncHttp, enclProductRevision=enclProductRevision, envOverTemperature=envOverTemperature, spareNumber=spareNumber, v2cpWrites=v2cpWrites, lunEntry=lunEntry, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, psetType=psetType, nfsCacheIsLicensed=nfsCacheIsLicensed, miscHighTapeReadBytes=miscHighTapeReadBytes, v2cRemoves=v2cRemoves, tv2cpStatfss=tv2cpStatfss, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, v2Write8KCalls=v2Write8KCalls, lunHighReadBytes=lunHighReadBytes, fcpTargetPN=fcpTargetPN, pclEntry=pclEntry, v3pSetattrs=v3pSetattrs, spareSectorSize=spareSectorSize, fcpTargetTableIndex=fcpTargetTableIndex, raidStatus=raidStatus, cifsAlignedSmalls=cifsAlignedSmalls, dafsSetFencingLists=dafsSetFencingLists, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, diskFailedMessage=diskFailedMessage, globalStatusOk=globalStatusOk, lunSizeLow=lunSizeLow, alfFilewrap=alfFilewrap, diskRepaired=diskRepaired, domainControllerDisconnect=domainControllerDisconnect, dafsServerAuths=dafsServerAuths, ifLowInDiscards=ifLowInDiscards, upsLinePowerRetored=upsLinePowerRetored, snapmirrorArguments=snapmirrorArguments, cifsMbufWaits=cifsMbufWaits, v3pReads=v3pReads, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, pclNfsV3Read512Calls=pclNfsV3Read512Calls, rpcUdpBadLens=rpcUdpBadLens, spareDiskType=spareDiskType, v3cpFsstats=v3cpFsstats, enclElectronicsFailed=enclElectronicsFailed, ncStreamingObjHitrate=ncStreamingObjHitrate, backup=backup, dfIndex=dfIndex, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, cifs=cifs, dfPlexCount=dfPlexCount, raidPDiskPool=raidPDiskPool, dfPerCentInodeCapacity=dfPerCentInodeCapacity, dafsMaxRequestsServer=dafsMaxRequestsServer)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", tv2cpReads=tv2cpReads, smbCheckDirs=smbCheckDirs, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, svSchedIndex=svSchedIndex, treplyCache=treplyCache, cifsReqs=cifsReqs, aggrEntry=aggrEntry, powerSupplyFailureShutdown=powerSupplyFailureShutdown, raidVScsiAdapter=raidVScsiAdapter, smbNTCancelCNPct=smbNTCancelCNPct, qrV2Volume=qrV2Volume, tv3cCreates=tv3cCreates, tv2pSetattrs=tv2pSetattrs, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, ncFtpRespTimePerByte=ncFtpRespTimePerByte, cpFromLowDatavecsOps=cpFromLowDatavecsOps, volumeFull=volumeFull, miscNfsOps=miscNfsOps, lastdump=lastdump, tnfsrwStats=tnfsrwStats, cifsPreserveCase=cifsPreserveCase, snapmirrorWrittenBytes=snapmirrorWrittenBytes, ncCmsIsEnabled=ncCmsIsEnabled, ftpdMaxConns=ftpdMaxConns, pclNfsV3Rmdirs=pclNfsV3Rmdirs, v2cpGetattrs=v2cpGetattrs, v3ReadStats=v3ReadStats, vfDisallowedProtocols=vfDisallowedProtocols, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, snapshot=snapshot, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, ncDnsRequestsReceived=ncDnsRequestsReceived, slVType=slVType, trcDelayHits=trcDelayHits, v2cpLookups=v2cpLookups, psetMemberIndex=psetMemberIndex, smbDeleteDirs=smbDeleteDirs, obsSmbWrites=obsSmbWrites, curDafs=curDafs, viaConnLocalPortNumber=viaConnLocalPortNumber, chassisCPUFanSlow=chassisCPUFanSlow, switchName=switchName, ncDnsIresForwardLookups=ncDnsIresForwardLookups, volumeRestrictedRootConflict=volumeRestrictedRootConflict, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, v3ccPathconfs=v3ccPathconfs, ncDnsIres=ncDnsIres, dafsRemoves=dafsRemoves, smbTreeConnectAndXPct=smbTreeConnectAndXPct, ifLowInUcastPkts=ifLowInUcastPkts, tv2pNulls=tv2pNulls, dafsLocks=dafsLocks, ndmpOn=ndmpOn, otherDiskTable=otherDiskTable, snapmirrorConnEntry=snapmirrorConnEntry, v3cReads=v3cReads, tv2cpSetattrs=tv2cpSetattrs, tv3ccRenames=tv3ccRenames, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, ncNntpActiveServConns=ncNntpActiveServConns, dafsCurrentRequests=dafsCurrentRequests, tv2cpGetattrs=tv2cpGetattrs, otherDiskTotalBlocks=otherDiskTotalBlocks, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, ncCdOptions=ncCdOptions, cifsDirOps=cifsDirOps, smbTrans2SetPathInfos=smbTrans2SetPathInfos, ndmpRestoreActive=ndmpRestoreActive, ncNntpCliConns=ncNntpCliConns, nfsCacheLowHitRequests=nfsCacheLowHitRequests, connectedInitiatorNodeName=connectedInitiatorNodeName, viaConnectionListenPort=viaConnectionListenPort, v3CachedPerCent=v3CachedPerCent, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, v3Write1KCalls=v3Write1KCalls, alfFileSaved=alfFileSaved, v3ccReaddirs=v3ccReaddirs, tv3ReadStats=tv3ReadStats, softQuotaExceeded=softQuotaExceeded, rpcUdpBadCalls=rpcUdpBadCalls, pclNfsServBadCalls=pclNfsServBadCalls, raidPIndex=raidPIndex, volClone=volClone, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, v3cpRmdirs=v3cpRmdirs, switchLowPacketsRejected=switchLowPacketsRejected, vscanServerUpgrade=vscanServerUpgrade, tv3Write4KCalls=tv3Write4KCalls, outOfDateDiskModel=outOfDateDiskModel, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, smbTrans2CreateDirs=smbTrans2CreateDirs, raidVTotalMb=raidVTotalMb, tv3pSymlinks=tv3pSymlinks, dafsMaxRequestSize=dafsMaxRequestSize, obsSmbTreeConnects=obsSmbTreeConnects, slVTable=slVTable, viaThreadSafe=viaThreadSafe, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, dafsClientConnects=dafsClientConnects, ncNntpBytesToClients=ncNntpBytesToClients, vfStopped=vfStopped, portType=portType, smbCreateAndXPct=smbCreateAndXPct, dafsExportIndex=dafsExportIndex, iscsiLowOps=iscsiLowOps, v3ccRmdirs=v3ccRmdirs, fabricOwner=fabricOwner, nfsCacheTotalRequests=nfsCacheTotalRequests, autosupportStatusMessage=autosupportStatusMessage, cifsNOplockBreakWaits=cifsNOplockBreakWaits, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, viaErrRdmawProt=viaErrRdmawProt, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, cifsCancelLocks=cifsCancelLocks, raid=raid, tv3pSetattrs=tv3pSetattrs, ifHighInUcastPkts=ifHighInUcastPkts, v3ccCommits=v3ccCommits, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, fcpTarget=fcpTarget, dafsNicNumRqstDemons=dafsNicNumRqstDemons, tv3cSymlinks=tv3cSymlinks, nfsCacheBytesFromServers=nfsCacheBytesFromServers, storage=storage, productSerialNum=productSerialNum, raidVEntry=raidVEntry, ncHttpsAccelEntry=ncHttpsAccelEntry, lunLowOtherOps=lunLowOtherOps, ifHighOutUcastPkts=ifHighOutUcastPkts, enclPowerSuppliesPresent=enclPowerSuppliesPresent, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, cpuBusyTime=cpuBusyTime, lunLowOps=lunLowOps, pclRpcNullRecvs=pclRpcNullRecvs, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, diskVerifyingParityCount=diskVerifyingParityCount, obsSmbReadRaws=obsSmbReadRaws, pclNfsV2Mkdirs=pclNfsV2Mkdirs, tv3Read512Calls=tv3Read512Calls, dbgTrap=dbgTrap, dhmNoticePFAEvent=dhmNoticePFAEvent, vfSpTable=vfSpTable, cifsOpLkBatchToNones=cifsOpLkBatchToNones, dafsFetchResponses=dafsFetchResponses, clusterNodeRepaired=clusterNodeRepaired, pclRpcCalls=pclRpcCalls, spareEntry=spareEntry, v3cFsstats=v3cFsstats, raidTotalBlocks=raidTotalBlocks, v2pLookups=v2pLookups, tv2cStatfss=tv2cStatfss, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, pclPerCent=pclPerCent, otherDiskSerialNumber=otherDiskSerialNumber, svTotalTransTimeSeconds=svTotalTransTimeSeconds, v2pWrites=v2pWrites, volAggrName=volAggrName, aggrNumber=aggrNumber, ncDnsIresIsInitialised=ncDnsIresIsInitialised, v2pRmdirs=v2pRmdirs, v2Read16KCalls=v2Read16KCalls, upsBatteryWarning=upsBatteryWarning, v3cCommits=v3cCommits, cfPartnerSysid=cfPartnerSysid, tv2pReadlinks=tv2pReadlinks, tv3cSetattrs=tv3cSetattrs, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, dmpDataAmount=dmpDataAmount, switchType=switchType, iscsiHighOps=iscsiHighOps, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, smbNTCancelCNs=smbNTCancelCNs, lunCount=lunCount, v3cCreates=v3cCreates, raidDiskId=raidDiskId, svTotalTransMBs=svTotalTransMBs, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, slMonth=slMonth, appTrap=appTrap, tv2ccRemoves=tv2ccRemoves, diskScrubbingCount=diskScrubbingCount, pclNfsV3Readlinks=pclNfsV3Readlinks, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, lunTable=lunTable, tv2Read32KCalls=tv2Read32KCalls, ncNntpActiveCliConns=ncNntpActiveCliConns, snapmirrorConnSrc1=snapmirrorConnSrc1, viaCurrVI=viaCurrVI, snapmirrorConnIndex=snapmirrorConnIndex, ftpdTotalConns=ftpdTotalConns, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, dmpStAttempts=dmpStAttempts, fcpCfMode=fcpCfMode, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, tv2pReaddirs=tv2pReaddirs, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, iscsiHighWriteBytes=iscsiHighWriteBytes, tv2ccReaddirs=tv2ccReaddirs, nfsCacheVerifyRequests=nfsCacheVerifyRequests, cpuUpTime=cpuUpTime, pclNfsV3Nulls=pclNfsV3Nulls, tv3ccRmdirs=tv3ccRmdirs, nfsCacheHighMissRequests=nfsCacheHighMissRequests, volTable=volTable, tv3cpReadlinks=tv3cpReadlinks, appCritical=appCritical, snapvault=snapvault, tv3cpCreates=tv3cpCreates, cpuTotalDomainSwitches=cpuTotalDomainSwitches, v3Read128KCalls=v3Read128KCalls, viaInRDMAReadBytes=viaInRDMAReadBytes, v3cSymlinks=v3cSymlinks, tv3ccRemoves=tv3ccRemoves, raidVPlexNumber=raidVPlexNumber, v3cpLinks=v3cpLinks, tv3cCommits=tv3cCommits, iscsiIsLicensed=iscsiIsLicensed, raidPScsiId=raidPScsiId, ifHighOutOctets=ifHighOutOctets, v3cGetattrs=v3cGetattrs, enclProductVendor=enclProductVendor, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, tv3pAccesss=tv3pAccesss, diskPrefailedCount=diskPrefailedCount, viaTotalError=viaTotalError, rpcCalls=rpcCalls, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, pclNfsV3Fsinfos=pclNfsV3Fsinfos, tv3pMknods=tv3pMknods, cpuInterrupts=cpuInterrupts, cpTime=cpTime, tv2cReadlinks=tv2cReadlinks, tnfsCalls=tnfsCalls, amAddress=amAddress, chassisTemperatureOk=chassisTemperatureOk, slQQtree=slQQtree, aggrFlexvollist=aggrFlexvollist, dafsOutBytes=dafsOutBytes, tv3cpLookups=tv3cpLookups, netifTable=netifTable, raidVDiskPool=raidVDiskPool, autosupportFailedSends=autosupportFailedSends, tv3pLinks=tv3pLinks, nfsIsLicensed=nfsIsLicensed, raidPDiskSerialNumber=raidPDiskSerialNumber, smbFindClose2s=smbFindClose2s, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, v2ReadStats=v2ReadStats, tv3ccLinks=tv3ccLinks)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", raidVScsiId=raidVScsiId, tv2cMkdirs=tv2cMkdirs, chassisTemperatureWarning=chassisTemperatureWarning, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, pclNfsV2Readlinks=pclNfsV2Readlinks, tv2cpRenames=tv2cpRenames, v3pGetattrs=v3pGetattrs, tv2pStatfss=tv2pStatfss, nvramBatteryDischarged=nvramBatteryDischarged, dafsAppendDirects=dafsAppendDirects, pclNfsV3NullPerCent=pclNfsV3NullPerCent, cifsSharingErrorRetries=cifsSharingErrorRetries, cifsMaxACLs=cifsMaxACLs, smbNTTransactIoctls=smbNTTransactIoctls, tv3pLookups=tv3pLookups, outOfDateDiskSectorSize=outOfDateDiskSectorSize, tv2cSetattrs=tv2cSetattrs, v3Read8KCalls=v3Read8KCalls, raidVDiskType=raidVDiskType, obsSmbSetInfos=obsSmbSetInfos, ncStreamingOndemandBytesToServers=ncStreamingOndemandBytesToServers, v3Write128KCalls=v3Write128KCalls, cifsBadCalls=cifsBadCalls, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, rpcServ=rpcServ, qrFileLimit=qrFileLimit, ncObjectsStored=ncObjectsStored, plexTable=plexTable, rcDelayHits=rcDelayHits, cpuNonCPInterrupts=cpuNonCPInterrupts, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, vfTable=vfTable, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, smbNegProtPct=smbNegProtPct, v2ccLinks=v2ccLinks, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, ncGrmServerOptions=ncGrmServerOptions, obsSmbProcessExits=obsSmbProcessExits, enclTempSensorsPresent=enclTempSensorsPresent, trpcBadCalls=trpcBadCalls, switchEntry=switchEntry, nfsCacheMissRequests=nfsCacheMissRequests, switchLinkSpeed=switchLinkSpeed, viaMaxCQEntries=viaMaxCQEntries, chassisFanRemoved=chassisFanRemoved, ncIcapOptions=ncIcapOptions, ncRMMem=ncRMMem, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, dump=dump, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, raidPNumber=raidPNumber, obsSmbLockAndReadPct=obsSmbLockAndReadPct, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, dafs=dafs, enclProductModel=enclProductModel, lun=lun, tv3pRemoves=tv3pRemoves, aggrStatus=aggrStatus, chassisPowerSupplyOff=chassisPowerSupplyOff, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, slMinutes=slMinutes, pclNfsV3Mkdirs=pclNfsV3Mkdirs, v3WriteStats=v3WriteStats, volIndex=volIndex, ncHttpAccelHits=ncHttpAccelHits, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent, tv3pGetattrs=tv3pGetattrs, dafsSecinfos=dafsSecinfos, tv3pPathconfs=tv3pPathconfs, obsSmbTrans2Open2s=obsSmbTrans2Open2s, v3ccMkdirs=v3ccMkdirs, snapmirrorSyncOk=snapmirrorSyncOk, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, volumeRestricted=volumeRestricted, filesysMaxfilesAvail=filesysMaxfilesAvail, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, dafsCloses=dafsCloses, aggrFSID=aggrFSID, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, dafsLockts=dafsLockts, errorTrap=errorTrap, lunSpaceReserved=lunSpaceReserved, grmMonitor=grmMonitor, viaNicTable=viaNicTable, tnfsServ=tnfsServ, tv3cpRemoves=tv3cpRemoves, dafsDelegReturns=dafsDelegReturns, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, fsStatusMessage=fsStatusMessage, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, cfInterconnectStatus=cfInterconnectStatus, svSchedSchedule=svSchedSchedule, spareDiskPort=spareDiskPort, ncCdIsEnabled=ncCdIsEnabled, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex, netInterfaces=netInterfaces, tv2ccNulls=tv2ccNulls, tv3Write64KCalls=tv3Write64KCalls, ncFtpBytesToClients=ncFtpBytesToClients, v3cpRenames=v3cpRenames, snapmirror=snapmirror, dafsGetFencingLists=dafsGetFencingLists, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, dafsSessionUseChecksums=dafsSessionUseChecksums, slIndex=slIndex, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, tv2pReads=tv2pReads, tv2ccWrites=tv2ccWrites, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, raidVDiskRPM=raidVDiskRPM, initiatorListTable=initiatorListTable, dafsGetattrDirects=dafsGetattrDirects, chassisTemperatureUnknown=chassisTemperatureUnknown, ncHttpAccelIndex=ncHttpAccelIndex, lunName=lunName, dafsMaxRequests=dafsMaxRequests, nfsrwStats=nfsrwStats, miscLowCifsOps=miscLowCifsOps, fcpTargetName=fcpTargetName, ncDns=ncDns, v3pWrites=v3pWrites, raidPTable=raidPTable, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, raidPDiskNumber=raidPDiskNumber, cifsCwaWaits=cifsCwaWaits, qrVIdType=qrVIdType, rpcServXDRCalls=rpcServXDRCalls, raidVDiskNumber=raidVDiskNumber, viaOutRDMAReadBytes=viaOutRDMAReadBytes, v3Read1KCalls=v3Read1KCalls, ncFtpCliConns=ncFtpCliConns, tv3ccFsstats=tv3ccFsstats, tv2cpRoots=tv2cpRoots, smbDeleteDirPct=smbDeleteDirPct, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, pclNfsV2Getattrs=pclNfsV2Getattrs, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, tv2CachedPerCent=tv2CachedPerCent, ncNntpProxyRequests=ncNntpProxyRequests, ncStreamingMissRequests=ncStreamingMissRequests, volName=volName, portIndex=portIndex, rcNonIdemDoneHits=rcNonIdemDoneHits, tv3cRmdirs=tv3cRmdirs, quotaNormal=quotaNormal, fcpTargetType=fcpTargetType, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, cifsNBTDisconnects=cifsNBTDisconnects, portState=portState, dafsOptions=dafsOptions, ncInfo=ncInfo, pclTable=pclTable, dafsLookUps=dafsLookUps, ncIsLicensed=ncIsLicensed, diskFailedCount=diskFailedCount, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, fcpHighOps=fcpHighOps, spareStatus=spareStatus, cifsAlignedLargeRels=cifsAlignedLargeRels, takeoverAddrs=takeoverAddrs, initiatorGroupName=initiatorGroupName, qvStateInitPercent=qvStateInitPercent, ncHttpTotalRespTime=ncHttpTotalRespTime, viaCurrConnectPending=viaCurrConnectPending, cpuCPInterruptPercent=cpuCPInterruptPercent, svSrc=svSrc, portEntry=portEntry, qrV2HighKBytesUsed=qrV2HighKBytesUsed, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, tv3cpPathconfs=tv3cpPathconfs, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, viaOutRdma=viaOutRdma, tv2ReadStats=tv2ReadStats, v3pReaddirPluss=v3pReaddirPluss, v3cpNulls=v3cpNulls, quotaState=quotaState, dafsSessionIndex=dafsSessionIndex, raidTable=raidTable, slQVolumeName=slQVolumeName, v2Read64KCalls=v2Read64KCalls, v2cStatfss=v2cStatfss, miscNetSentKB=miscNetSentKB, rcTcpDelayHits=rcTcpDelayHits, viaConnRemoteDescriminator=viaConnRemoteDescriminator, rcpTcpBadCalls=rcpTcpBadCalls, cpFromHighWaterOps=cpFromHighWaterOps, ncBytesToServers=ncBytesToServers, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, pclIpAddr=pclIpAddr, smbTreeConnectAndXs=smbTreeConnectAndXs, ncStreamingQuickTimeBytesFromClients=ncStreamingQuickTimeBytesFromClients, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, ncBytesToClients=ncBytesToClients, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, v3pLookups=v3pLookups, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, curNfs=curNfs, autosupportConfigurationError=autosupportConfigurationError, qrVEntry=qrVEntry, dafsSessionClientIdString=dafsSessionClientIdString, pclNfsV2Setattrs=pclNfsV2Setattrs, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, cifsMaxTrees=cifsMaxTrees, quota=quota, envFailedFanCount=envFailedFanCount, dfHighAvailKBytes=dfHighAvailKBytes)
