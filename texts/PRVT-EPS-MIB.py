#
# PySNMP MIB module PRVT-EPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-EPS-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 16:54:27 2021
# On host fv-az42-142 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, iso, TimeTicks, Gauge32, Counter32, ObjectIdentity, Bits, Unsigned32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "iso", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "Bits", "Unsigned32", "Counter64", "NotificationType")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
prvtEpsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 132))
prvtEpsMIB.setRevisions(('2010-11-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtEpsMIB.setRevisionsDescriptions(('Initial',))
if mibBuilder.loadTexts: prvtEpsMIB.setLastUpdated('201011110000Z')
if mibBuilder.loadTexts: prvtEpsMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtEpsMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtEpsMIB.setDescription('Private MIB supporting Linear Ethernet Protection Switching (ITU-T G.8031)')
class PrvtEpsProtectionStateType(TextualConvention, Integer32):
    description = 'Possible protection states for an end device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 4, 5, 6, 7, 9, 11, 13, 14, 15))
    namedValues = NamedValues(("none", -1), ("noRequest", 0), ("doNotRevert", 1), ("reverseRequest", 2), ("exercise", 4), ("waitToRestore", 5), ("clear", 6), ("manualSwitch", 7), ("signalDegrade", 9), ("signalFail", 11), ("forcedSwitch", 13), ("signalFailForProtection", 14), ("lockoutOfProtection", 15))

class PrvtEpsActionType(TextualConvention, Integer32):
    description = "Used to perform an action.\n         Setting to 'performAction' will cause the action to be performed.\n         Setting to 'idle' (or any other value except 'performAction') has\n         no effect (no action is performed).\n         Reads will always return 'idle'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("idle", 1), ("performAction", 2))

prvtEpsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0))
prvtEpsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1))
prvtEpsService = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1))
prvtEpsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1), )
if mibBuilder.loadTexts: prvtEpsServiceTable.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceTable.setDescription('This table contains Ethernet Protection Switching services information.')
prvtEpsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceEntry.setDescription('Ethernet Protection Switching information about a specific service.')
prvtEpsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)))
if mibBuilder.loadTexts: prvtEpsSvcId.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSvcId.setDescription('The service ID.')
prvtEpsServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRowStatus.setDescription('The status of the row.\n         The writable columns in a row can not be changed if the row\n         is active. All columns must have a valid value before a row\n         can be activated.')
prvtEpsServiceCfmMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceCfmMdLevel.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceCfmMdLevel.setDescription('Value of the CFM MD level where the protected domain is situated.')
prvtEpsServicePrimaryLocalCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServicePrimaryLocalCfmMep.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServicePrimaryLocalCfmMep.setDescription('Primary local CFM MEP Id.')
prvtEpsServicePrimaryRemoteCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServicePrimaryRemoteCfmMep.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServicePrimaryRemoteCfmMep.setDescription('Primary remote CFM MEP Id.')
prvtEpsServiceSecondaryLocalCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceSecondaryLocalCfmMep.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceSecondaryLocalCfmMep.setDescription('Backup local CFM MEP Id.')
prvtEpsServiceSecondaryRemoteCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceSecondaryRemoteCfmMep.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceSecondaryRemoteCfmMep.setDescription('Backup remote CFM MEP Id.')
prvtEpsServiceSignalDegradeCfmTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceSignalDegradeCfmTestId.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceSignalDegradeCfmTestId.setDescription('The ID of the test used for monitoring (either CFM or SAA test).\n         The value 0 indicates no test.')
prvtEpsServiceRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceRevertive.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRevertive.setDescription('Protection type (revertive or non-revertive).')
prvtEpsServiceHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceHoldOffTimer.setReference('G.8031 clause 11.12')
if mibBuilder.loadTexts: prvtEpsServiceHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceHoldOffTimer.setDescription('Value of the Hold Off timer in milliseconds.\n         Valid values are in increments of 100ms.')
prvtEpsServiceWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 12), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceWaitToRestoreTimer.setReference('G.8031 clause 11.13')
if mibBuilder.loadTexts: prvtEpsServiceWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceWaitToRestoreTimer.setDescription('Value of the Wait To Restore timer in seconds (0 to disable it).')
prvtEpsServiceAdminFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceAdminFreeze.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceAdminFreeze.setDescription('Used to freeze the state of the protection service.')
prvtEpsServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceAdminStatus.setDescription('Administrative status of the protection service.')
prvtEpsServiceActivePath = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("working", 0), ("protection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceActivePath.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceActivePath.setDescription('Protected service active path.')
prvtEpsServiceDefectsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("fullyIncompatibleProvisioning", 0), ("protectionSwitchingIncomplete", 1), ("protectionConfigurationMismatch", 2), ("epsConfigurationMismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceDefectsPresent.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceDefectsPresent.setDescription("Defects registered by the APS protocol could be either none or a composition of bits 0-3:\n         \n         fullyIncompatibleProvisioning(0)   - occurs upon reception of three APS frames with the\n         incompatible 'B' bit value within the 22.5 second period;\n         \n         protectionSwitchingIncomplete(1)   - occurs if the transmitted 'Requested Signal' and the\n         received 'Bridged Signal' do not match for a period of 50ms or longer;\n         \n         protectionConfigurationMismatch(2) - working/protection configuration mismatch, occurs at\n         the reception of three APS frames from the working transport entity within the 22.5 second period;\n         \n         epsConfigurationMismatch(3)        - provisioning mismatch - for example, the local device is\n         set to revertive mode and the remote device is set to non-revertive mode.")
prvtEpsServiceLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 19), PrvtEpsProtectionStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceLocalState.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLocalState.setDescription('Protection state of the local side.')
prvtEpsServiceOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceOperationalStatus.setDescription('Identifies whether this service is ready for running.\n         The operational status can be up(true) or down(false).\n         When creating the service the operational\n         status will be down. Receiving CCMs from both transport\n         entities and establishment of APS on the protection transport\n         entity will bring the operational status to up.')
prvtEpsServiceLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("switchoverAlarm", 1), ("lostCommunication", 2), ("restoredCommunication", 3), ("signalFailDetected", 4), ("signalDegradeDetected", 5), ("protctSignalFailDetected", 6), ("signalFailRecovery", 7), ("signalDegradeRecovery", 8), ("protctSignalFailRecovery", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceLastEvent.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLastEvent.setDescription('The most recent event about which the application has sent a notification.')
prvtEpsServicePrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("psFailed", 0), ("psOk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServicePrimaryStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServicePrimaryStatus.setDescription('Primary path state.')
prvtEpsServiceSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("psFailed", 0), ("psOk", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceSecondaryStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceSecondaryStatus.setDescription('Secondary path state.')
prvtEpsServiceRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 24), PrvtEpsProtectionStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceRemoteState.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRemoteState.setDescription('Protection state of the remote side.')
prvtEpsServiceRemoteApsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceRemoteApsChannel.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRemoteApsChannel.setDescription('Active APS communication reported by the remote.')
prvtEpsServiceRemoteProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pt1Plus1", 0), ("pt1To1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceRemoteProtection.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRemoteProtection.setDescription('Type of protection (1+1 or 1:1) reported by the remote device.')
prvtEpsServiceRemoteDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dtUnidirectional", 0), ("dtBidirectional", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceRemoteDirection.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRemoteDirection.setDescription('Type of protection (unidirectional or bidirectional) reported by the remote.')
prvtEpsServiceRemoteRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceRemoteRevertive.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceRemoteRevertive.setDescription('Protection type (revertive or non-revertive) reported by the remote.')
prvtEpsServiceLocalApsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceLocalApsChannel.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLocalApsChannel.setDescription('Active APS communication reported by the remote.')
prvtEpsServiceLocalProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pt1Plus1", 0), ("pt1To1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceLocalProtection.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLocalProtection.setDescription('Type of protection (1+1 or 1:1) reported by the remote device.')
prvtEpsServiceLocalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dtUnidirectional", 0), ("dtBidirectional", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceLocalDirection.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLocalDirection.setDescription('Type of protection (unidirectional or bidirectional) reported by the remote.')
prvtEpsServiceClear = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 32), PrvtEpsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceClear.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceClear.setDescription('Sends the Clear command to this EPS service.')
prvtEpsServiceManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 33), PrvtEpsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceManualSwitch.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceManualSwitch.setDescription('Sends the Manual Switch command to this EPS service.')
prvtEpsServiceForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 34), PrvtEpsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceForcedSwitch.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceForcedSwitch.setDescription('Sends the Forced Switch command to this EPS service.')
prvtEpsServiceLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 35), PrvtEpsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEpsServiceLockout.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceLockout.setDescription('Sends the LockOut command to this EPS service.')
prvtEpsServiceProtectionCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 1, 1, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEpsServiceProtectionCounter.setStatus('current')
if mibBuilder.loadTexts: prvtEpsServiceProtectionCounter.setDescription('Counts how many times the service has gone to Protection.')
prvtEpsDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 1)).setObjects(("PRVT-EPS-MIB", "prvtEpsServiceOperationalStatus"), ("PRVT-EPS-MIB", "prvtEpsServiceDefectsPresent"))
if mibBuilder.loadTexts: prvtEpsDefectAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtEpsDefectAlarm.setDescription('1. EPS service is either operational or not operational;\n         2. Failure of protocol defects.')
prvtEpsSwitchoverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 2)).setObjects(("PRVT-EPS-MIB", "prvtEpsServiceActivePath"))
if mibBuilder.loadTexts: prvtEpsSwitchoverAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSwitchoverAlarm.setDescription('The alarm is issued if the active link is changed,\n         pointing to the path where the switchover occured.')
prvtEpsLostCommunication = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 3)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsLostCommunication.setStatus('current')
if mibBuilder.loadTexts: prvtEpsLostCommunication.setDescription('The alarm is issued in case of non reception of APS frames\n         in three consecutive intervals each representing 5 seconds.')
prvtEpsRestoredCommunication = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 4)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsRestoredCommunication.setStatus('current')
if mibBuilder.loadTexts: prvtEpsRestoredCommunication.setDescription('APS frames are received normally after APS communication failure.')
prvtEpsSignalFailDetected = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 5)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsSignalFailDetected.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSignalFailDetected.setDescription('The alarm is issued in case of CCMs are not received\n         and (3.5 * CCMtime(CCMinterval)) has expired.')
prvtEpsSignalDegradeDetected = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 6)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsSignalDegradeDetected.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSignalDegradeDetected.setDescription('The alarm is issued in case of monitored error threshold is crossed:\n         1W Jitter error,\n         2W Jitter error,\n         Latency error,\n         Frame loss error.')
prvtEpsProtctSignalFailDetected = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 7)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsProtctSignalFailDetected.setStatus('current')
if mibBuilder.loadTexts: prvtEpsProtctSignalFailDetected.setDescription('The alarm is issued in case of CCMs are not received on the protected link\n         and (3.5 * CCMtime(CCMinterval)) has expired or the protected link is down.')
prvtEpsSignalFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 8)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsSignalFailRecovery.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSignalFailRecovery.setDescription('The alarm is issued in case of CCMs start to be received\n         correctly again after a prvtEpsSignalFailDetected alarm occured\n         and (3.5 * CCMtime(CCMinterval)) timer no longer expires or the link is up .')
prvtEpsSignalDegradeRecovery = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 9)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsSignalDegradeRecovery.setStatus('current')
if mibBuilder.loadTexts: prvtEpsSignalDegradeRecovery.setDescription('The alarm is issued in case of monitored error threshold is crossed bellow limis:\n         1W Jitter error,\n         2W Jitter error,\n         Latency error,\n         Frame loss error.')
prvtEpsProtctSignalFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 132, 0, 10)).setObjects(("PRVT-EPS-MIB", "prvtEpsSvcId"))
if mibBuilder.loadTexts: prvtEpsProtctSignalFailRecovery.setStatus('current')
if mibBuilder.loadTexts: prvtEpsProtctSignalFailRecovery.setDescription('The alarm is issued in case of CCMs start to be received correctly again\n         on the protected link after a prvtEpsProtctSignalFailDetected alarm occured\n         and (3.5 * CCMtime(CCMinterval)) timer no longer expires or the link is up .')
mibBuilder.exportSymbols("PRVT-EPS-MIB", prvtEpsServiceSignalDegradeCfmTestId=prvtEpsServiceSignalDegradeCfmTestId, PYSNMP_MODULE_ID=prvtEpsMIB, prvtEpsServiceClear=prvtEpsServiceClear, prvtEpsLostCommunication=prvtEpsLostCommunication, prvtEpsServiceAdminStatus=prvtEpsServiceAdminStatus, prvtEpsServiceRowStatus=prvtEpsServiceRowStatus, prvtEpsServicePrimaryRemoteCfmMep=prvtEpsServicePrimaryRemoteCfmMep, prvtEpsMIBNotifications=prvtEpsMIBNotifications, prvtEpsServiceHoldOffTimer=prvtEpsServiceHoldOffTimer, prvtEpsServiceRemoteProtection=prvtEpsServiceRemoteProtection, prvtEpsDefectAlarm=prvtEpsDefectAlarm, prvtEpsServiceLockout=prvtEpsServiceLockout, prvtEpsSignalFailDetected=prvtEpsSignalFailDetected, PrvtEpsProtectionStateType=PrvtEpsProtectionStateType, prvtEpsServiceRemoteRevertive=prvtEpsServiceRemoteRevertive, prvtEpsMIBObjects=prvtEpsMIBObjects, prvtEpsServiceEntry=prvtEpsServiceEntry, prvtEpsServiceOperationalStatus=prvtEpsServiceOperationalStatus, prvtEpsProtctSignalFailDetected=prvtEpsProtctSignalFailDetected, prvtEpsService=prvtEpsService, prvtEpsServiceLocalProtection=prvtEpsServiceLocalProtection, prvtEpsServiceDefectsPresent=prvtEpsServiceDefectsPresent, prvtEpsServiceCfmMdLevel=prvtEpsServiceCfmMdLevel, prvtEpsServiceSecondaryStatus=prvtEpsServiceSecondaryStatus, prvtEpsServicePrimaryStatus=prvtEpsServicePrimaryStatus, prvtEpsServiceProtectionCounter=prvtEpsServiceProtectionCounter, prvtEpsSignalDegradeRecovery=prvtEpsSignalDegradeRecovery, prvtEpsProtctSignalFailRecovery=prvtEpsProtctSignalFailRecovery, prvtEpsServiceLastEvent=prvtEpsServiceLastEvent, prvtEpsServiceForcedSwitch=prvtEpsServiceForcedSwitch, prvtEpsServiceAdminFreeze=prvtEpsServiceAdminFreeze, prvtEpsServiceSecondaryLocalCfmMep=prvtEpsServiceSecondaryLocalCfmMep, prvtEpsServiceTable=prvtEpsServiceTable, prvtEpsServiceManualSwitch=prvtEpsServiceManualSwitch, prvtEpsServiceActivePath=prvtEpsServiceActivePath, prvtEpsServicePrimaryLocalCfmMep=prvtEpsServicePrimaryLocalCfmMep, prvtEpsSignalDegradeDetected=prvtEpsSignalDegradeDetected, prvtEpsRestoredCommunication=prvtEpsRestoredCommunication, prvtEpsSvcId=prvtEpsSvcId, prvtEpsServiceRevertive=prvtEpsServiceRevertive, prvtEpsSignalFailRecovery=prvtEpsSignalFailRecovery, prvtEpsServiceLocalApsChannel=prvtEpsServiceLocalApsChannel, prvtEpsServiceRemoteDirection=prvtEpsServiceRemoteDirection, prvtEpsSwitchoverAlarm=prvtEpsSwitchoverAlarm, prvtEpsServiceLocalDirection=prvtEpsServiceLocalDirection, prvtEpsServiceRemoteState=prvtEpsServiceRemoteState, prvtEpsServiceRemoteApsChannel=prvtEpsServiceRemoteApsChannel, prvtEpsServiceSecondaryRemoteCfmMep=prvtEpsServiceSecondaryRemoteCfmMep, prvtEpsServiceWaitToRestoreTimer=prvtEpsServiceWaitToRestoreTimer, prvtEpsMIB=prvtEpsMIB, PrvtEpsActionType=PrvtEpsActionType, prvtEpsServiceLocalState=prvtEpsServiceLocalState)
