#
# PySNMP MIB module ALCATEL-IND1-VIRTUALROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-VIRTUALROUTER-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:20:35 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Vrf, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Vrf")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Gauge32, Counter32, TimeTicks, Unsigned32, Counter64, iso, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter32", "TimeTicks", "Unsigned32", "Counter64", "iso", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1VirtualRouterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1))
alcatelIND1VirtualRouterMIB.setRevisions(('2008-03-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VirtualRouterMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1VirtualRouterMIB.setLastUpdated('201308230000Z')
if mibBuilder.loadTexts: alcatelIND1VirtualRouterMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VirtualRouterMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VirtualRouterMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for\n             the configuration of Virtual Router instances.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2006 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1VirtualRouterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1))
alaVirtualRouterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1))
alaVirtualRouterNameTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaVirtualRouterNameTable.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterNameTable.setDescription('Table containing Virtual Router Name to Virtual Router Index bindings.\n         There is always an entry for the default Virtual Router which has the\n         name default')
alaVirtualRouterNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterName"))
if mibBuilder.loadTexts: alaVirtualRouterNameEntry.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterNameEntry.setDescription('Each entry binds a Virtual Router Name to a Virtual Router index.')
alaVirtualRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: alaVirtualRouterName.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterName.setDescription('The name of a Virtual Router.')
alaVirtualRouterNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterNameIndex.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterNameIndex.setDescription('The index associated with the Virtual Router name.')
alaVirtualRouterNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVirtualRouterNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterNameRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaVirtualRouterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVirtualRouterProfile.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfile.setDescription('The profile name of the VRF. Profiles place constraints on what the\n         VRF can contain.')
alaVirtualRouterMaxRouteMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxRouteMaps.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxRouteMaps.setDescription('The maximum number of route-maps allowed in this VRF.')
alaVirtualRouterMaxSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxSequences.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxSequences.setDescription('The maximum number of route-map sequences allowed in this VRF.')
alaVirtualRouterMaxTlvs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxTlvs.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxTlvs.setDescription('The maximum number of route-map TLV blocks allowed in this VRF.')
alaVirtualRouterMaxAccessLists = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxAccessLists.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxAccessLists.setDescription('The maximum number of access-lists allowed in this VRF.')
alaVirtualRouterMaxAddressBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxAddressBlocks.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxAddressBlocks.setDescription('The maximum number of access-list address blocks allowed in this VRF.')
alaVirtualRouterMaxMatchInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVirtualRouterMaxMatchInterfaces.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterMaxMatchInterfaces.setDescription('The maximum number of route-map match interfaces allowed in this VRF.')
alaVirtualRouterNoAutoLoadVrrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVirtualRouterNoAutoLoadVrrp.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterNoAutoLoadVrrp.setDescription('If true, do not automatically load VRRP in max profile VRF.')
alaVrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaVrConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigTable.setDescription('Table containing Virtual Router protocol configuration.')
alaVrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigIndex"))
if mibBuilder.loadTexts: alaVrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigEntry.setDescription('Each entry exists for each VRF in the alaVrtualRouterNameTable.\n         The entry represents the status of routing protocols on a VRF instance.')
alaVrConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaVrConfigIndex.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigIndex.setDescription('The index associated with the Virtual Router name.')
alaVrConfigRipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigRipStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigRipStatus.setDescription('Controls the load status of RIP on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigOspfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigOspfStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigOspfStatus.setDescription('Controls the load status of OSPF on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigIsisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigIsisStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigIsisStatus.setDescription('Controls the load status of ISIS on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigBgpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigBgpStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigBgpStatus.setDescription('Controls the load status of BGP on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigPimStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigPimStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigPimStatus.setDescription('Controls the load status of PIM on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigDvmrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigDvmrpStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigDvmrpStatus.setDescription('Controls the load status of DVMRP on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigRipngStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigRipngStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigRipngStatus.setDescription('Controls the load status of Ripng on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigOspf3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigOspf3Status.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigOspf3Status.setDescription('Controls the load status of OSPFv3 on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigMplsLdpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrConfigMplsLdpStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigMplsLdpStatus.setDescription('Controls the load status of MPLS LDP on this router.\n                 Loaded(1) is the only valid Set value.')
alaVrConfigVrrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("notloaded", 2), ("loading", 3))).clone('notloaded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrConfigVrrpStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrConfigVrrpStatus.setDescription('Controls the load status of VRRP on this router.\n                 Loaded(1) is the only valid Set value.')
alaVirtualRouterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaVirtualRouterProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileTable.setDescription('Table contains capabilities of a VRF profile.')
alaVirtualRouterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileName"))
if mibBuilder.loadTexts: alaVirtualRouterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileEntry.setDescription('Each entry defines a VRF profile.')
alaVirtualRouterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: alaVirtualRouterProfileName.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileName.setDescription('The name of the profile.')
alaVirtualRouterProfileMaxRouteMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxRouteMaps.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxRouteMaps.setDescription('The maximum number of route-maps supported in this VRF profile.')
alaVirtualRouterProfileMaxSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxSequences.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxSequences.setDescription('The maximum number of route-map sequences supported in this VRF\n         profile.')
alaVirtualRouterProfileMaxTlvs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxTlvs.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxTlvs.setDescription('The maximum number of route-map TLVs supported in this VRF profile.\n         TLVs are used to store match and set clauses.')
alaVirtualRouterProfileMaxAccessLists = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxAccessLists.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxAccessLists.setDescription('The maximum number of route-map access-lists supported in this\n         VRF profile. Access-lists contain IPv4 or IPv6 addresses.')
alaVirtualRouterProfileMaxAddressBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxAddressBlocks.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxAddressBlocks.setDescription('The maximum number of route-map address blocks supported in this\n         VRF profile. Address blocks are used to hold the access-lists\n         routes.')
alaVirtualRouterProfileMaxMatchInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxMatchInterfaces.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterProfileMaxMatchInterfaces.setDescription('The maximum number of route-map interfaces that can be configured\n         match clauses supported in this VRF profile.')
alcatelIND1VirtualRouterMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 2))
alcatelIND1VirtualRouterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 2, 1))
alcatelIND1VirtualRouterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 2, 2))
alaVirtualRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVirtualRouterCompliance = alaVirtualRouterCompliance.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterCompliance.setDescription('The compliance statement for routers running Route Maps\n            and implementing the ALCATEL-IND1-VIRTUALROUTER MIB.')
alaVirtualRouterConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 15, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterNameIndex"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterNameRowStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfile"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxRouteMaps"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxSequences"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxTlvs"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxAccessLists"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxAddressBlocks"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterMaxMatchInterfaces"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterNoAutoLoadVrrp"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigRipStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigOspfStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigIsisStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigBgpStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigPimStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigDvmrpStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigRipngStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigOspf3Status"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigMplsLdpStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVrConfigVrrpStatus"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxRouteMaps"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxSequences"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxTlvs"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxAccessLists"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxAddressBlocks"), ("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterProfileMaxMatchInterfaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVirtualRouterConfigMIBGroup = alaVirtualRouterConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaVirtualRouterConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of the Virtual Router Module.')
mibBuilder.exportSymbols("ALCATEL-IND1-VIRTUALROUTER-MIB", alaVirtualRouterProfileMaxAccessLists=alaVirtualRouterProfileMaxAccessLists, alaVrConfigPimStatus=alaVrConfigPimStatus, alaVirtualRouterNoAutoLoadVrrp=alaVirtualRouterNoAutoLoadVrrp, alaVirtualRouterConfig=alaVirtualRouterConfig, alaVrConfigIsisStatus=alaVrConfigIsisStatus, alaVirtualRouterProfileMaxMatchInterfaces=alaVirtualRouterProfileMaxMatchInterfaces, alaVirtualRouterProfileEntry=alaVirtualRouterProfileEntry, alaVirtualRouterProfile=alaVirtualRouterProfile, alcatelIND1VirtualRouterMIBConformance=alcatelIND1VirtualRouterMIBConformance, alaVrConfigTable=alaVrConfigTable, alaVirtualRouterMaxMatchInterfaces=alaVirtualRouterMaxMatchInterfaces, alaVrConfigRipngStatus=alaVrConfigRipngStatus, alaVirtualRouterProfileMaxAddressBlocks=alaVirtualRouterProfileMaxAddressBlocks, alaVirtualRouterProfileMaxTlvs=alaVirtualRouterProfileMaxTlvs, alaVirtualRouterMaxSequences=alaVirtualRouterMaxSequences, alaVrConfigBgpStatus=alaVrConfigBgpStatus, alcatelIND1VirtualRouterMIBObjects=alcatelIND1VirtualRouterMIBObjects, alaVrConfigIndex=alaVrConfigIndex, alaVirtualRouterMaxAddressBlocks=alaVirtualRouterMaxAddressBlocks, alaVirtualRouterMaxAccessLists=alaVirtualRouterMaxAccessLists, alaVrConfigRipStatus=alaVrConfigRipStatus, alaVirtualRouterNameIndex=alaVirtualRouterNameIndex, alaVirtualRouterNameEntry=alaVirtualRouterNameEntry, alaVirtualRouterName=alaVirtualRouterName, alaVrConfigMplsLdpStatus=alaVrConfigMplsLdpStatus, alaVirtualRouterProfileName=alaVirtualRouterProfileName, alcatelIND1VirtualRouterMIBCompliances=alcatelIND1VirtualRouterMIBCompliances, PYSNMP_MODULE_ID=alcatelIND1VirtualRouterMIB, alaVirtualRouterProfileTable=alaVirtualRouterProfileTable, alaVirtualRouterCompliance=alaVirtualRouterCompliance, alaVrConfigVrrpStatus=alaVrConfigVrrpStatus, alaVirtualRouterNameTable=alaVirtualRouterNameTable, alaVirtualRouterMaxRouteMaps=alaVirtualRouterMaxRouteMaps, alaVirtualRouterNameRowStatus=alaVirtualRouterNameRowStatus, alaVrConfigOspfStatus=alaVrConfigOspfStatus, alcatelIND1VirtualRouterMIBGroups=alcatelIND1VirtualRouterMIBGroups, alcatelIND1VirtualRouterMIB=alcatelIND1VirtualRouterMIB, alaVrConfigEntry=alaVrConfigEntry, alaVirtualRouterProfileMaxSequences=alaVirtualRouterProfileMaxSequences, alaVirtualRouterMaxTlvs=alaVirtualRouterMaxTlvs, alaVrConfigDvmrpStatus=alaVrConfigDvmrpStatus, alaVirtualRouterConfigMIBGroup=alaVirtualRouterConfigMIBGroup, alaVrConfigOspf3Status=alaVrConfigOspf3Status, alaVirtualRouterProfileMaxRouteMaps=alaVirtualRouterProfileMaxRouteMaps)
