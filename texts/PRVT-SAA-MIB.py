#
# PySNMP MIB module PRVT-SAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SAA-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:09:16 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, TimeTicks, Unsigned32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Gauge32, ObjectIdentity, MibIdentifier, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Unsigned32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32", "ModuleIdentity", "NotificationType")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
prvtSaaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 130))
prvtSaaMib.setRevisions(('2015-03-25 00:00', '2014-05-16 00:00', '2011-10-20 00:00', '2011-02-07 00:00', '2010-09-29 00:00', '2010-09-27 00:00', '2010-09-13 00:00', '2010-08-24 00:00', '2010-05-05 00:00', '2010-03-26 00:00', '2010-03-18 00:00', '2010-03-12 00:00', '2010-01-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSaaMib.setRevisionsDescriptions(('Add CountAllPriorities leaf to SAA Throughput tests.', 'Add twamp tests.', 'Add ethertype leaf to SAA Throughput tests.', 'Add delays to SAA Throughput tests.', 'Add name leaf to profile table.', 'Add measurement units for prvtSaaY1731TestResultCompletionTime, fix range for prvtSaaY1731PmTestEncapValue.', 'Add decription for percentile values for jitter and delay in case of outside 1-100 range.', 'Fix prvtSaaY1731PmTestMonitorInterval range and default value.', 'Add prvtSaaY1731LoopbackTestTable.', 'Add prvtSaaY1731PmTestProfile description if retued value is 0.', 'Add detailed description and measurement units on some test result leafs.', 'Clarify description on several leafs.', 'Initial version.',))
if mibBuilder.loadTexts: prvtSaaMib.setLastUpdated('201503250000Z')
if mibBuilder.loadTexts: prvtSaaMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSaaMib.setContactInfo('BATM/Telco Systems Support team\nEmail: \nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSaaMib.setDescription('This MIB provides the extended capability of controlling and \nprovisioning various OAM tests and SAA monitoring.\nIt adds extra functionality for DISMAN-PING-MIB')
prvtSaaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0))
prvtSaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1))
prvtSaaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2))
prvtSaaTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1))
prvtSaaTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2))
prvtSaaProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3))
prvtSaaY1731PmTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1), )
if mibBuilder.loadTexts: prvtSaaY1731PmTestTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestTable.setDescription('This table holds the configuration for a SAA Y1731 test')
prvtSaaY1731PmTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestName"))
if mibBuilder.loadTexts: prvtSaaY1731PmTestEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestEntry.setDescription('NONE')
prvtSaaY1731PmTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaY1731PmTestOwner.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestOwner.setDescription('This string is used to describe the owner of the\n       Y1731 Pm SAA test.')
prvtSaaY1731PmTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaY1731PmTestName.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestName.setDescription('This string is used to describe the test name for the\n       Y1731 Pm SAA test. It is also used as a test identifier.')
prvtSaaY1731PmTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameloss", 1), ("framedelayAndDelayvariation", 2), ("framelossAndFramedelayAndDelayvariation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestType.setDescription('SAA Y1731 Pm test type.')
prvtSaaY1731PmTestExecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRunning", 1), ("running", 2))).clone('notRunning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731PmTestExecStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestExecStatus.setDescription('SAA Y1731 Pm test execution status.')
prvtSaaY1731PmTestEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("service", 2), ("vlan", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapType.setDescription('SAA Y1731 Pm test encapsulation type.\n\tIt can be either test over VLAN or test over Service.\n\tThe value 1 is the default value representing that neither\n\ttype is set.')
prvtSaaY1731PmTestEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapValue.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestEncapValue.setDescription('The value of the defined SAA Y1731 Pm test encapsulation.\n\tIt should be either the Vlan ID or the Service ID, depending \n\ton the type set in prvtSaaY1731PmTestEncapType.')
prvtSaaY1731PmTestUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestUserPort.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestUserPort.setDescription('For SAA Y1731 Pm test, this leaf is used only in case the encapsulation \n\tis VLAN type and it determines the port on which the user is connected.')
prvtSaaY1731PmTestUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestUplinkPort.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestUplinkPort.setDescription('For SAA Y1731 Pm test, this leaf is used only in case the encapsulation \n\tis VLAN type and it determines the port that the SAA test devices are \n\tconnected through.')
prvtSaaY1731PmTestTargetMac = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTargetMac.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestTargetMac.setDescription('The target MAC address for the SAA Y1731 test.')
prvtSaaY1731PmTestCfmDomainLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCfmDomainLevel.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestCfmDomainLevel.setDescription('CFM Domain level on which the test will be run.')
prvtSaaY1731PmTestRemoteCfmMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestRemoteCfmMep.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestRemoteCfmMep.setDescription('The remote MEP associated with target MAC.')
prvtSaaY1731PmTestProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestProfile.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestProfile.setDescription('The profile ID associated to the SAA Y1731 Pm test.\n\t A value of 0 depicts no set profile.')
prvtSaaY1731PmTestHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestHistoryDepth.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestHistoryDepth.setDescription('Probe history count.')
prvtSaaY1731PmTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestPeriod.setDescription('The period the SAA Y1731 Pm test will run, in milliseconds.')
prvtSaaY1731PmTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestTimeout.setDescription('The timeout period for a test packet.')
prvtSaaY1731PmTestMonitorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestMonitorInterval.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestMonitorInterval.setDescription('Monitoring interval is relevant only for continous Y1731 test.\n        It is measured in minutes.')
prvtSaaY1731PmTestFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestFrequency.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestFrequency.setDescription('The time between two consecutive intervals.\n\tA value of 1 defines a delay of a second between the end of the first \n\tand the begining of the next interval.')
prvtSaaY1731PmTestClocksInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestClocksInSync.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestClocksInSync.setDescription('This variable tells if the clocks of the test are syncronized.')
prvtSaaY1731PmTestDelayMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("average", 1), ("percentile", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayMethod.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayMethod.setDescription('Defines the method of calculating delay on a Y1731 test.')
prvtSaaY1731PmTestDelayPvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayPvalue.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestDelayPvalue.setDescription('Percent used to calculate delay in p-percentile method. \n\t Reported delay is the percent-th member in the array with sorted delays. \n         Relevant only for p-percentile method.\n         Value in range of 1-100 is for percentile delay method of calculation.\n         Value 101 describes that average delay method of calculation is used.\n         Only values inside the 1..100 range can be set to this parameter.')
prvtSaaY1731PmTestJitterMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("peakToPeak", 1), ("variance", 2), ("percentile", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterMethod.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterMethod.setDescription('Defines the method of calculating jitter on a Y1731 test.')
prvtSaaY1731PmTestJitterPvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterPvalue.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestJitterPvalue.setDescription('Percent used to calculate jitter in p-percentile method. \n\t Reported jitter is the percent-th member in the array with sorted jitters. \n         Relevant only for p-percentile method.\n         Value in range of 1..100 is for percentile jitter method of calculation.\n         Value 101 describes that peakToPeak jitter method of calculation is used.\n         Value 102 describes that variance jitter method of calculation is used.\n         Only values inside the 1..100 range can be set to this parameter.')
prvtSaaY1731PmTestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestPriority.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestPriority.setDescription('Defines the priority of the packets sent by the SAA Y1731 Pm test\n\t(priority to count user traffic).')
prvtSaaY1731PmTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaY1731PmTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestRowStatus.setDescription('The status of the row.\n\t The writable columns in a row can not be changed if the row\n\t is active. Certain columns must have a valid value before a row\n\t can be activated.')
prvtSaaY1731PmTestCCMAPSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCCMAPSCount.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestCCMAPSCount.setDescription('Determines whether to include proactive OAM frames for ETH-CC and ETH-APS in loss measurement counters or not.')
prvtSaaY1731PmTestLossMeasurementType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lmm", 0), ("slm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestLossMeasurementType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestLossMeasurementType.setDescription('If set to 1 Synthetic Loss Measurement will be used for frame-loss calculations.If set 0 user packets will be used for frame-loss calculations')
prvtSaaY1731PmTestSLMTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestSLMTransmit.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestSLMTransmit.setDescription('If set true the device is capable of sending SLM packets and frame-loss calculations. This must be used only when loss measurement type is SLM')
prvtSaaY1731PmTestTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestTestId.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestTestId.setDescription('Specify the unique test id used in Y1731 SLM. 0 means not set.It is mandatory for the Y1731 SLM test')
prvtSaaY1731PmTestDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDropEligible.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestDropEligible.setDescription('Drop Eligible flag for S-VLAN used for the Y1731 SLM  test.')
prvtSaaY1731PmTestDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1518)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestDataSize.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestDataSize.setDescription('Packet sizes for Y1731 SLM test')
prvtSaaY1731PmTestCountAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731PmTestCountAllPriorities.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731PmTestCountAllPriorities.setDescription('Measure for all priorities.')
prvtSaaRFC2544ThroughputTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2), )
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTable.setDescription('This table holds the configuration for a SAA RFC2544 test')
prvtSaaRFC2544ThroughputTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestName"))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEntry.setDescription('NONE')
prvtSaaRFC2544ThroughputTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestOwner.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestOwner.setDescription('This string is used to describe the owner of the\n       RFC2544 SAA test.')
prvtSaaRFC2544ThroughputTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestName.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestName.setDescription('This string is used to describe the test name for the\n       RFC2544 SAA test. It is also used as a test identifier.')
prvtSaaRFC2544ThroughputTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unidirectionalTestHead", 1), ("bidirectionalTestHead", 2), ("testTail", 3), ("testLoopback", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestType.setDescription('SAA RFC2544 Throughput test type')
prvtSaaRFC2544ThroughputTestExecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRunning", 1), ("running", 2))).clone('notRunning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestExecStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestExecStatus.setDescription('SAA RFC2544 Throughput test execution status.')
prvtSaaRFC2544ThroughputTestSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mac", 1), ("mep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSourceType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSourceType.setDescription('SAA RFC2544 Throughput test source type.')
prvtSaaRFC2544ThroughputTestSource = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSource.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSource.setDescription('String that holds either the MAC or the MEP ID.\n\t MAC should be in the format AA:BB:CC:DD:EE:FF\n\t MEP shold be in the format DOMAIN:MA:MEP that represent \n\t the values corresponding to dot1agCfmMdIndex, \n\t dot1agCfmMaIndex and dot1agCfmMepIdentifier from \n\t IEEE8021-CFM-MIB.\n\t e.g.:\n\t\tMAC:   00:A0:12:5C:12:C0\n\t\tMEP:   1:1:2')
prvtSaaRFC2544ThroughputTestTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mac", 1), ("mep", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTargetType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTargetType.setDescription('SAA RFC2544 Throughput test target type.')
prvtSaaRFC2544ThroughputTestTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTarget.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTarget.setDescription('String that holds either the MAC or the MEP ID.\n\t MAC should be in the format AA:BB:CC:DD:EE:FF\n\t MEP shold be in the format DOMAIN:MA:MEP that represent \n\t the values corresponding to dot1agCfmMdIndex, \n\t dot1agCfmMaIndex and dot1agCfmMepIdentifier from \n\t IEEE8021-CFM-MIB.\n\t e.g.:\n\t\tMAC:   00:A0:12:5C:12:C0\n\t\tMEP:   1:1:2')
prvtSaaRFC2544ThroughputTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestTimeout.setDescription('SAA RFC2544 Throughput test timeout, in 0.1 of a second increments')
prvtSaaRFC2544ThroughputTestCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCIR.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCIR.setDescription('SAA RFC2544 Throughput Committed Information Rate (CIR) value.')
prvtSaaRFC2544ThroughputTestCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCBS.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCBS.setDescription('SAA RFC2544 Throughput Committed Burst Size (CBS) value.')
prvtSaaRFC2544ThroughputTestBurstPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestBurstPercentage.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestBurstPercentage.setDescription('Part of CIR to use for bursts(CBS).')
prvtSaaRFC2544ThroughputTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestDuration.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestDuration.setDescription('The SAA RFC2544 Throughput test duration, in seconds.')
prvtSaaRFC2544ThroughputTestMaxFrameloss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestMaxFrameloss.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestMaxFrameloss.setDescription('The maximum frameloss to declare a successful \n\tSAA RFC2544 Throughput test in 0.001 of a percent.')
prvtSaaRFC2544ThroughputTestCVLAN0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0.setDescription('C-VLAN ID for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestCVLAN0Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0Priority.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0Priority.setDescription('VPT for C-VLAN0 for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestCVLAN0DropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0DropEligible.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestCVLAN0DropEligible.setDescription('Drop Eligible flag for C-VLAN0 for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLAN.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLAN.setDescription('S-VLAN ID for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestSVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANPriority.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANPriority.setDescription('VPT for S-VLAN0 for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestSVLANDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANDropEligible.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestSVLANDropEligible.setDescription('Drop Eligible flag for S-VLAN0 for the SAA RFC2544 Throughput test.')
prvtSaaRFC2544ThroughputTestPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPDUSize.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPDUSize.setDescription('Bitmask with predefined packet sizes for SAA RFC2544 Throughput test:\n\t   64,128,256,512,1024,1280,1518,1530,2000,9000 (LSB set=64...10th bit set =9000)')
prvtSaaRFC2544ThroughputTestACKTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestACKTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestACKTimeout.setDescription('Defines the timeout for a SAA RFC2544 Throughput test tail to send an ACK MCC.')
prvtSaaRFC2544ThroughputTestLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macSwap", 1), ("oam", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestLoopbackType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestLoopbackType.setDescription('SAA RFC2544 Throughput test loopback type.')
prvtSaaRFC2544ThroughputTestPaternType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("null", 1), ("nullCRC", 2), ("prbs", 3), ("prbsCRC", 4), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPaternType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestPaternType.setDescription('SAA RFC2544 Throughput test patern type.\n\t Options for it are none, null, null-crc, prbs, prbs-crc.')
prvtSaaRFC2544ThroughputTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestRowStatus.setDescription('The status of the row entry.\n\t The writable columns in a row can not be changed if the row\n\t is active. Certain columns must have a valid value before a row\n\t can be activated.')
prvtSaaRFC2544ThroughputTestEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 2, 1, 26), OctetString().clone(hexValue="8902")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEthertype.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ThroughputTestEthertype.setDescription('SAA RFC2544 Throughput test Ethertype.')
prvtSaaY1731LoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3), )
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestTable.setDescription('This table holds the configuration for a SAA Y1731 Loopback test.\n\t\tIt describes the FPGA configuration.')
prvtSaaY1731LoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestEncapType"), (0, "PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestEncapValue"))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEntry.setDescription('NONE')
prvtSaaY1731LoopbackTestEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("service", 1), ("vlan", 2))))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapType.setDescription('SAA Y1731 Loopback test encapsulation type.\n\tIt can be either test over VLAN or test over Service.\n\tThe value 1 is the default value representing that neither\n\ttype is set.')
prvtSaaY1731LoopbackTestEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapValue.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestEncapValue.setDescription('The value of the defined SAA Y1731 Lopback test encapsulation.\n\tIt should be either the Vlan ID or the Service ID, depending \n\ton the type set in prvtSaaY1731LoopbackTestEncapType.')
prvtSaaY1731LoopbackTestUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUserPort.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUserPort.setDescription('For SAA Y1731 Loopback test, this leaf is used only in case the encapsulation \n\tis VLAN type and it determines the port on which the user is connected.')
prvtSaaY1731LoopbackTestUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUplinkPort.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestUplinkPort.setDescription('For SAA Y1731 Loopback test, this leaf is used only in case the encapsulation \n\tis VLAN type and it determines the port that the SAA test devices are \n\tconnected through.')
prvtSaaY1731LoopbackTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("frameloss", 2), ("delayvariation", 3), ("framelossAndDelayvariation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestType.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestType.setDescription('SAA Y1731 Loopback test type. Specifies the test being perfoer')
prvtSaaY1731LoopbackTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestRowStatus.setDescription('The status of the row entry.\n\t The writable columns in a row can not be changed if the row\n\t is active. Certain columns must have a valid value before a row\n\t can be activated.')
prvtSaaY1731LoopbackTestCCMAPSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCCMAPSCount.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCCMAPSCount.setDescription('Determines whether to include proactive OAM frames for ETH-CC and ETH-APS in loss measurement counters or not.')
prvtSaaY1731LoopbackTestCountAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCountAllPriorities.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestCountAllPriorities.setDescription('Determines whether to count all packets ignoring the priority.')
prvtSaaY1731TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSaaY1731TestResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultTable.setDescription('This table contains SAA results for Y1731 tests.')
prvtSaaY1731TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaY1731PmTestName"), (0, "PRVT-SAA-MIB", "prvtSaaY1731TestResultIndex"))
if mibBuilder.loadTexts: prvtSaaY1731TestResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultEntry.setDescription('NONE')
prvtSaaY1731TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtSaaY1731TestResultIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultIndex.setDescription('SAA Y1731 test results table index')
prvtSaaY1731TestResultDelayNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayNE.setDescription('Near end delay result in 0.01 of a microsecond')
prvtSaaY1731TestResultDelayFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultDelayFE.setDescription('Far end delay result in 0.01 of a microsecond')
prvtSaaY1731TestResultJitterNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterNE.setDescription('Near end jitter result in 0.01 of a microsecond')
prvtSaaY1731TestResultJitterFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultJitterFE.setDescription('Far end jitter result in 0.01 of a microsecond')
prvtSaaY1731TestResultFrameLossNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossNE.setDescription('Near end frame-loss result in 0.0000001 of a percent')
prvtSaaY1731TestResultFrameLossFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFrameLossFE.setDescription('Far end frame-loss result in 0.0000001 of a percent')
prvtSaaY1731TestResultFramesSentNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentNE.setDescription('Near end sent frames')
prvtSaaY1731TestResultFramesSentFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesSentFE.setDescription('Far end sent frames')
prvtSaaY1731TestResultFramesRcvdNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdNE.setDescription('Near end received frames')
prvtSaaY1731TestResultFramesRcvdFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultFramesRcvdFE.setDescription('Far end received frames')
prvtSaaY1731TestResultPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultPacketsSent.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultPacketsSent.setDescription('The test packets sent between devices')
prvtSaaY1731TestResultNoTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoTimeouts.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoTimeouts.setDescription('Number of timeouts for the SAA Y1731 Pm test')
prvtSaaY1731TestResultNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoErrors.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultNoErrors.setDescription('Number of errors for the SAA Y1731 Pm test')
prvtSaaY1731TestResultCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaY1731TestResultCompletionTime.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultCompletionTime.setDescription('Completion time in seconds for the SAA Y1731 PM test.')
prvtSaaRFC2544TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultTable.setDescription('This table contains SAA results for RFC2544 tests.')
prvtSaaRFC2544TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestOwner"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestName"), (0, "PRVT-SAA-MIB", "prvtSaaRFC2544TestResultIndex"))
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultEntry.setDescription('NONE')
prvtSaaRFC2544TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultIndex.setDescription('SAA RFC2544 Throughput test results table index.\n\tIndex will take values 1 to 9, each value representing a frame size\n\tfrom this list: 64,128,256,512,1024,1280,1518,2000,9000.\n\tThe leaf prvtSaaRFC2544TestResultFrameSize will present this value\n\tin a more user-friendly way.')
prvtSaaRFC2544TestResultFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameSize.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameSize.setDescription('Frame size of the SAA RFC2544 test.\n\tPossible values are: 64,128,256,512,1024,1280,1518,2000,9000')
prvtSaaRFC2544TestResultFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameLoss.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultFrameLoss.setDescription('Frame loss of the SAA RFC2544 test measured in 0.001 of a percent')
prvtSaaRFC2544TestResultThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultThroughput.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultThroughput.setDescription('Throughput of the SAA RFC2544 test measured in Kbps')
prvtSaaRFC2544TestResultNetThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultNetThroughput.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultNetThroughput.setDescription('The actual throughput of the SAA RFC2544 test \n\tcontaining only user data. It is measured in Kbps.')
prvtSaaRFC2544TestResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("ready", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultStatus.setDescription('Status of the SAA RFC2544 test')
prvtSaaRFC2544TestResultDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMinimum.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMinimum.setDescription('Minimum delay for SAA RFC2544 test measured in 1/100th of a microsecond.')
prvtSaaRFC2544TestResultDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayAverage.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayAverage.setDescription('Average delay for SAA RFC2544 test measured in 1/100th of a microsecond.')
prvtSaaRFC2544TestResultDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultDelayMaximum.setDescription('Maximum delay for SAA RFC2544 test measured in 1/100th of a microsecond.')
prvtSaaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1), )
if mibBuilder.loadTexts: prvtSaaProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileTable.setDescription('Table contains SAA thresholds.')
prvtSaaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtSaaProfileIndex"))
if mibBuilder.loadTexts: prvtSaaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileEntry.setDescription('NONE')
prvtSaaProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: prvtSaaProfileIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileIndex.setDescription('SAA profile table index.')
prvtSaaProfileDelayNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileDelayNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileDelayNE.setDescription('Near end delay in microseconds')
prvtSaaProfileDelayFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileDelayFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileDelayFE.setDescription('Far end delay in microseconds')
prvtSaaProfileJitterNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileJitterNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileJitterNE.setDescription('Near end jitter in microseconds')
prvtSaaProfileJitterFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000000)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileJitterFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileJitterFE.setDescription('Far end jitter in microseconds')
prvtSaaProfileFrameLossNE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileFrameLossNE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileFrameLossNE.setDescription('Near end frame-loss measured in 0.001 of percent')
prvtSaaProfileFrameLossFE = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSaaProfileFrameLossFE.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileFrameLossFE.setDescription('Far end frame-loss measured in 0.001 of percent')
prvtSaaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileRowStatus.setDescription('Creation/delete/edit of the SAA profile. ')
prvtSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSaaProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfileName.setDescription('Name assigned to the SAA profile.')
prvtSaaRFC2544ProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeFailed.setDescription('This trap should be sent whenever a SAA probe\n\t\ton a specific test fails.')
prvtSaaRFC2544ProbeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 2)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeSuccess.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544ProbeSuccess.setDescription('This trap should be sent whenever a SAA probe\n\t\ton a specific test finishes with success.')
prvtSaaRFC2544TestFinished = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 3)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestExecStatus"))
if mibBuilder.loadTexts: prvtSaaRFC2544TestFinished.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestFinished.setDescription('This trap should be sent whenever a SAA RFC2544 test is finished')
prvtSaaY1731DelayNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 4)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayNE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayNE"))
if mibBuilder.loadTexts: prvtSaaY1731DelayNEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731DelayNEThreshold.setDescription('This trap should be sent whenever the near end delay\n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaY1731DelayFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 5)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayFE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayFE"))
if mibBuilder.loadTexts: prvtSaaY1731DelayFEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731DelayFEThreshold.setDescription('This trap should be sent whenever the far end delay\n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaY1731JitterNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 6)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterNE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterNE"))
if mibBuilder.loadTexts: prvtSaaY1731JitterNEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731JitterNEThreshold.setDescription('This trap should be sent whenever the near end jitter \n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaY1731JitterFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 7)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterFE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterFE"))
if mibBuilder.loadTexts: prvtSaaY1731JitterFEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731JitterFEThreshold.setDescription('This trap should be sent whenever the far end jitter\n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaY1731FrLossNEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 8)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossNE"))
if mibBuilder.loadTexts: prvtSaaY1731FrLossNEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731FrLossNEThreshold.setDescription('This trap should be sent whenever the near end frameloss\n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaY1731FrLossFEThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 0, 9)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossFE"))
if mibBuilder.loadTexts: prvtSaaY1731FrLossFEThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731FrLossFEThreshold.setDescription('This trap should be sent whenever the far end frameloss\n\t\ton a SAA Y1731 test will surpass one of the 2 defined \n\t\tthresholds.')
prvtSaaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 1))
prvtSaaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2))
prvtSaaY1731TestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731PmTestType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestExecStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestEncapType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestEncapValue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestUserPort"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestUplinkPort"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTargetMac"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCfmDomainLevel"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestRemoteCfmMep"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestProfile"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestHistoryDepth"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestPeriod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTimeout"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestMonitorInterval"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestFrequency"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestClocksInSync"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDelayMethod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDelayPvalue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestJitterMethod"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestJitterPvalue"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestPriority"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCCMAPSCount"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestLossMeasurementType"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestSLMTransmit"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestTestId"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDropEligible"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestDataSize"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731PmTestCountAllPriorities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731TestGroup = prvtSaaY1731TestGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestGroup.setDescription('Objects for the SAA Y1731 test group.')
prvtSaaRFC2544TestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 2)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestExecStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSourceType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSource"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTargetType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTarget"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestTimeout"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCIR"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCBS"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestBurstPercentage"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestDuration"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestMaxFrameloss"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0Priority"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestCVLAN0DropEligible"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLAN"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLANPriority"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestSVLANDropEligible"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestPDUSize"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestACKTimeout"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestLoopbackType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestPaternType"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ThroughputTestEthertype"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaRFC2544TestGroup = prvtSaaRFC2544TestGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestGroup.setDescription('Objects for the SAA RFC2544 test group.')
prvtSaaY1731TestResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 3)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultDelayFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultJitterFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesSentNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesSentFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesRcvdNE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultFramesRcvdFE"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultPacketsSent"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultNoTimeouts"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultNoErrors"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultCompletionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731TestResultsGroup = prvtSaaY1731TestResultsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731TestResultsGroup.setDescription('Objects for the SAA Y1731 test results group.')
prvtSaaRFC2544TestResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 4)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultFrameSize"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultFrameLoss"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultThroughput"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultNetThroughput"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultStatus"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayMinimum"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayAverage"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultDelayMaximum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaRFC2544TestResultsGroup = prvtSaaRFC2544TestResultsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaRFC2544TestResultsGroup.setDescription('Objects for the SAA RFC2544 test results group.')
prvtSaaProfilesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 5)).setObjects(("PRVT-SAA-MIB", "prvtSaaProfileDelayNE"), ("PRVT-SAA-MIB", "prvtSaaProfileDelayFE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterNE"), ("PRVT-SAA-MIB", "prvtSaaProfileJitterFE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossNE"), ("PRVT-SAA-MIB", "prvtSaaProfileFrameLossFE"), ("PRVT-SAA-MIB", "prvtSaaProfileRowStatus"), ("PRVT-SAA-MIB", "prvtSaaProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaProfilesGroup = prvtSaaProfilesGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaProfilesGroup.setDescription('Objects for the SAA profiles group.')
prvtSaaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 6)).setObjects(("PRVT-SAA-MIB", "prvtSaaRFC2544ProbeFailed"), ("PRVT-SAA-MIB", "prvtSaaRFC2544ProbeSuccess"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestFinished"), ("PRVT-SAA-MIB", "prvtSaaY1731DelayNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731DelayFEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731JitterNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731JitterFEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731FrLossNEThreshold"), ("PRVT-SAA-MIB", "prvtSaaY1731FrLossFEThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaNotificationsGroup = prvtSaaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaNotificationsGroup.setDescription('Objects for the Notifications group.')
prvtSaaY1731LoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 2, 7)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestUserPort"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestUplinkPort"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestType"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestCCMAPSCount"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestRowStatus"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestCountAllPriorities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaY1731LoopbackTestGroup = prvtSaaY1731LoopbackTestGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSaaY1731LoopbackTestGroup.setDescription('Objects for the SAA Y1731 Loopback test group.')
prvtSaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 2, 1, 1)).setObjects(("PRVT-SAA-MIB", "prvtSaaY1731TestGroup"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestGroup"), ("PRVT-SAA-MIB", "prvtSaaY1731TestResultsGroup"), ("PRVT-SAA-MIB", "prvtSaaRFC2544TestResultsGroup"), ("PRVT-SAA-MIB", "prvtSaaProfilesGroup"), ("PRVT-SAA-MIB", "prvtSaaNotificationsGroup"), ("PRVT-SAA-MIB", "prvtSaaY1731LoopbackTestGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSaaCompliance = prvtSaaCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtSaaCompliance.setDescription('The compliance statement for support of the SAA MIB module.')
prvtTwampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4))
prvtTwampTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1))
prvtTwampServer = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2))
prvtTwampTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3))
class PrvtTwampTestNameType(TextualConvention, OctetString):
    description = 'TWAMP test name type (1..32 characters).'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtTwampDecimalPercent(TextualConvention, OctetString):
    description = 'A percentage value in decimal format.'
    status = 'current'
    displayHint = '3d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

prvtTwampTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1), )
if mibBuilder.loadTexts: prvtTwampTestTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestTable.setDescription('Table contains TWAMP tests.')
prvtTwampTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampTestName"))
if mibBuilder.loadTexts: prvtTwampTestEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestEntry.setDescription('Entry in prvtTwampTestTable')
prvtTwampTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 1), PrvtTwampTestNameType())
if mibBuilder.loadTexts: prvtTwampTestName.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestName.setDescription('TWAMP test name.')
prvtTwampTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setDescription('Create/delete entry in prvtTwampTestTable.')
prvtTwampTestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestServer.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestServer.setDescription('TWAMP test server ip-address.')
prvtTwampTestSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setDescription('The number of parallel test sessions.')
prvtTwampTestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestPackets.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPackets.setDescription('The number of packets in parallel sessions.')
prvtTwampTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestTimeout.setDescription('The timout interval of test packets (in milliseconds).')
prvtTwampTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestDelay.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestDelay.setDescription('The delay interval between test packets (in milliseconds)')
prvtTwampTestExecuteNow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setDescription("When this object is set to '1', command\nself-test execute-now.  When this object is set to '2' \nthe self-test is stopped. Setting the variable to '0'\nresults in an 'inconsistentValue' error.\nSetting it to any other value has no effect.\n\nWhen this object is read, the value '0' is returned.")
prvtTwampClientTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6), )
if mibBuilder.loadTexts: prvtTwampClientTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientTable.setDescription('Table contains the allowed clients for the TWAMP server.')
prvtTwampClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampClientIp"))
if mibBuilder.loadTexts: prvtTwampClientEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientEntry.setDescription('Entry in twampClientTable.')
prvtTwampClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtTwampClientIp.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientIp.setDescription('The ip-address of the client.')
prvtTwampClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setDescription('create/delete entry in prvtTwampClientTable')
prvtTwampServerInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setDescription('The server innactivity timeout interval of the TWAMP server (in seconds).')
prvtTwampServerSessionInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setDescription('The session innactivity timeout interval of the TWAMP server (in seconds).')
prvtTwampServerMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setDescription('The maximum number of controll sessions supported by the TWAMP server.')
prvtTwampServerMaxParallelSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setDescription('The maximum number of parallel test sessions for each client supperted by the TWAMP server.')
prvtTwampServerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 5), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerShutdown.setDescription('The administrative state of the TWAMP server.')
prvtTwampServerControlSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setDescription('The number of current control sessions established on the TWAMP server.')
prvtTwampServerTestSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setDescription('The number of current test sessions established on the TWAMP server.')
prvtTwampTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1), )
if mibBuilder.loadTexts: prvtTwampTestResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultTable.setDescription('Table contains statistics of the executed TWAMP tests.')
prvtTwampTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1), ).setIndexNames((0, "PRVT-SAA-MIB", "prvtTwampTestId"))
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setDescription('Entry in twampTestResultTable')
prvtTwampTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestId.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestId.setDescription('The internal ID of the TWAMP test instance.')
prvtTwampTestResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 2), PrvtTwampTestNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestResultName.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultName.setDescription('TWAMP test name.')
prvtTwampTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestStartTime.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestStartTime.setDescription('The start time of the TWAMP test instance.')
prvtTwampTestServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setDescription('The server ip-address of the TWAMP test instance.')
prvtTwampTestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestSessions.setDescription('The number of parallel test sessions of the TWAMP test instance.')
prvtTwampTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 1), ("running", 2), ("stopped", 3), ("finished", 4))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestState.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestState.setDescription('The status of the executed TWAMP test instance.')
prvtTwampTestRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestRtt.setDescription('The average round-trip time of the TWAMP test sample.')
prvtTwampTestMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setDescription('The minimum round-trip time of the TWAMP test sample.')
prvtTwampTestMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setDescription('The maximum round-trip time of the TWAMP test sample.')
prvtTwampTestPcktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setDescription('The number of test packets sent for the TWAMP test instance.')
prvtTwampTestPcktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setDescription('The number of lost test packets.')
prvtTwampTestPcktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setDescription('The number of dropped test packets.')
prvtTwampTestVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariation.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariation.setDescription('The maximum module variation of the TWAMP test sample')
prvtTwampTestVariationLow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 14), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setDescription('The percent of singletons whose variation is less than 10% of the negated maximum module variation of the sample.')
prvtTwampTestVariationMiddle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 15), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setDescription('The percent of singletons whose variation by module is less than 10% of the maximum module variation of the sample.')
prvtTwampTestVariationHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 130, 1, 4, 3, 1, 1, 16), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setDescription('The percent of singletons whose variation is greater than 10% of the maximum module variation of the sample.')
mibBuilder.exportSymbols("PRVT-SAA-MIB", prvtTwampTestStartTime=prvtTwampTestStartTime, prvtSaaY1731PmTestClocksInSync=prvtSaaY1731PmTestClocksInSync, prvtSaaY1731PmTestType=prvtSaaY1731PmTestType, prvtTwampTestTable=prvtTwampTestTable, prvtSaaRFC2544ThroughputTestACKTimeout=prvtSaaRFC2544ThroughputTestACKTimeout, prvtSaaY1731PmTestJitterMethod=prvtSaaY1731PmTestJitterMethod, prvtSaaRFC2544TestFinished=prvtSaaRFC2544TestFinished, prvtSaaY1731PmTestEncapType=prvtSaaY1731PmTestEncapType, prvtSaaRFC2544ThroughputTestTable=prvtSaaRFC2544ThroughputTestTable, prvtSaaRFC2544TestResultFrameSize=prvtSaaRFC2544TestResultFrameSize, prvtSaaY1731PmTestTestId=prvtSaaY1731PmTestTestId, prvtSaaY1731PmTestTable=prvtSaaY1731PmTestTable, prvtSaaY1731DelayNEThreshold=prvtSaaY1731DelayNEThreshold, prvtTwampTestState=prvtTwampTestState, prvtSaaY1731TestResultDelayNE=prvtSaaY1731TestResultDelayNE, prvtTwampTestId=prvtTwampTestId, prvtTwampTestSessionsCount=prvtTwampTestSessionsCount, prvtSaaRFC2544TestGroup=prvtSaaRFC2544TestGroup, prvtSaaCompliance=prvtSaaCompliance, prvtSaaRFC2544TestResultIndex=prvtSaaRFC2544TestResultIndex, prvtSaaY1731PmTestDelayPvalue=prvtSaaY1731PmTestDelayPvalue, prvtSaaY1731LoopbackTestCountAllPriorities=prvtSaaY1731LoopbackTestCountAllPriorities, prvtSaaY1731LoopbackTestEntry=prvtSaaY1731LoopbackTestEntry, prvtSaaY1731TestResultJitterNE=prvtSaaY1731TestResultJitterNE, prvtSaaRFC2544ThroughputTestCVLAN0=prvtSaaRFC2544ThroughputTestCVLAN0, prvtSaaRFC2544TestResultDelayAverage=prvtSaaRFC2544TestResultDelayAverage, prvtSaaY1731LoopbackTestType=prvtSaaY1731LoopbackTestType, prvtSaaY1731TestResultPacketsSent=prvtSaaY1731TestResultPacketsSent, prvtTwampTestMinRtt=prvtTwampTestMinRtt, prvtSaaProfileEntry=prvtSaaProfileEntry, prvtSaaY1731TestResultFrameLossNE=prvtSaaY1731TestResultFrameLossNE, prvtSaaY1731LoopbackTestCCMAPSCount=prvtSaaY1731LoopbackTestCCMAPSCount, prvtSaaProfileName=prvtSaaProfileName, prvtSaaY1731TestResultsGroup=prvtSaaY1731TestResultsGroup, prvtSaaY1731TestResultTable=prvtSaaY1731TestResultTable, prvtSaaY1731LoopbackTestRowStatus=prvtSaaY1731LoopbackTestRowStatus, prvtSaaY1731PmTestEntry=prvtSaaY1731PmTestEntry, prvtTwampTestTimeout=prvtTwampTestTimeout, prvtTwampTestSessions=prvtTwampTestSessions, prvtSaaRFC2544TestResultDelayMinimum=prvtSaaRFC2544TestResultDelayMinimum, prvtSaaY1731FrLossFEThreshold=prvtSaaY1731FrLossFEThreshold, prvtSaaConformance=prvtSaaConformance, prvtSaaY1731PmTestTargetMac=prvtSaaY1731PmTestTargetMac, prvtSaaRFC2544ThroughputTestType=prvtSaaRFC2544ThroughputTestType, prvtSaaProfileTable=prvtSaaProfileTable, prvtSaaRFC2544ThroughputTestOwner=prvtSaaRFC2544ThroughputTestOwner, prvtSaaY1731LoopbackTestGroup=prvtSaaY1731LoopbackTestGroup, prvtSaaY1731PmTestPriority=prvtSaaY1731PmTestPriority, prvtSaaRFC2544ThroughputTestCVLAN0DropEligible=prvtSaaRFC2544ThroughputTestCVLAN0DropEligible, prvtTwampTestPcktSent=prvtTwampTestPcktSent, prvtSaaRFC2544ThroughputTestEntry=prvtSaaRFC2544ThroughputTestEntry, prvtSaaY1731TestResultNoTimeouts=prvtSaaY1731TestResultNoTimeouts, prvtSaaY1731PmTestFrequency=prvtSaaY1731PmTestFrequency, prvtSaaY1731PmTestCountAllPriorities=prvtSaaY1731PmTestCountAllPriorities, prvtTwampTestPackets=prvtTwampTestPackets, prvtTwampClientEntry=prvtTwampClientEntry, prvtTwampClientRowStatus=prvtTwampClientRowStatus, prvtTwampTestResultName=prvtTwampTestResultName, prvtTwampTestVariationHigh=prvtTwampTestVariationHigh, prvtTwampObjects=prvtTwampObjects, prvtTwampTestResult=prvtTwampTestResult, prvtSaaRFC2544ProbeSuccess=prvtSaaRFC2544ProbeSuccess, prvtSaaY1731PmTestRowStatus=prvtSaaY1731PmTestRowStatus, prvtSaaY1731PmTestRemoteCfmMep=prvtSaaY1731PmTestRemoteCfmMep, prvtSaaProfileFrameLossNE=prvtSaaProfileFrameLossNE, prvtTwampServerSessionInnactivity=prvtTwampServerSessionInnactivity, prvtTwampServerMaxParallelSessions=prvtTwampServerMaxParallelSessions, prvtSaaY1731LoopbackTestEncapValue=prvtSaaY1731LoopbackTestEncapValue, prvtSaaRFC2544ThroughputTestTimeout=prvtSaaRFC2544ThroughputTestTimeout, prvtSaaRFC2544TestResultDelayMaximum=prvtSaaRFC2544TestResultDelayMaximum, prvtSaaCompliances=prvtSaaCompliances, prvtSaaY1731PmTestProfile=prvtSaaY1731PmTestProfile, prvtSaaRFC2544ThroughputTestCBS=prvtSaaRFC2544ThroughputTestCBS, prvtSaaRFC2544TestResultNetThroughput=prvtSaaRFC2544TestResultNetThroughput, prvtSaaMib=prvtSaaMib, prvtTwampTestPcktLost=prvtTwampTestPcktLost, prvtSaaRFC2544TestResultThroughput=prvtSaaRFC2544TestResultThroughput, prvtTwampServerControlSessions=prvtTwampServerControlSessions, prvtSaaY1731PmTestExecStatus=prvtSaaY1731PmTestExecStatus, prvtSaaY1731PmTestSLMTransmit=prvtSaaY1731PmTestSLMTransmit, prvtSaaY1731PmTestPeriod=prvtSaaY1731PmTestPeriod, prvtSaaRFC2544ThroughputTestDuration=prvtSaaRFC2544ThroughputTestDuration, prvtSaaY1731TestResultFramesSentFE=prvtSaaY1731TestResultFramesSentFE, prvtSaaNotificationsGroup=prvtSaaNotificationsGroup, prvtSaaRFC2544ThroughputTestSVLANPriority=prvtSaaRFC2544ThroughputTestSVLANPriority, prvtTwampTestVariationMiddle=prvtTwampTestVariationMiddle, prvtSaaY1731FrLossNEThreshold=prvtSaaY1731FrLossNEThreshold, prvtTwampServerMaxSessions=prvtTwampServerMaxSessions, prvtTwampTestResultTable=prvtTwampTestResultTable, prvtSaaY1731TestResultIndex=prvtSaaY1731TestResultIndex, prvtTwampTestPcktDrop=prvtTwampTestPcktDrop, prvtSaaRFC2544ThroughputTestLoopbackType=prvtSaaRFC2544ThroughputTestLoopbackType, prvtSaaY1731LoopbackTestEncapType=prvtSaaY1731LoopbackTestEncapType, prvtTwampTestRtt=prvtTwampTestRtt, prvtSaaY1731TestResultCompletionTime=prvtSaaY1731TestResultCompletionTime, prvtSaaRFC2544ThroughputTestExecStatus=prvtSaaRFC2544ThroughputTestExecStatus, prvtSaaY1731LoopbackTestUserPort=prvtSaaY1731LoopbackTestUserPort, prvtSaaY1731PmTestDelayMethod=prvtSaaY1731PmTestDelayMethod, prvtSaaRFC2544TestResultStatus=prvtSaaRFC2544TestResultStatus, prvtSaaProfileIndex=prvtSaaProfileIndex, prvtSaaProfilesGroup=prvtSaaProfilesGroup, prvtTwampServer=prvtTwampServer, prvtSaaY1731TestResultDelayFE=prvtSaaY1731TestResultDelayFE, prvtSaaY1731PmTestCfmDomainLevel=prvtSaaY1731PmTestCfmDomainLevel, prvtSaaRFC2544TestResultFrameLoss=prvtSaaRFC2544TestResultFrameLoss, prvtSaaY1731PmTestDataSize=prvtSaaY1731PmTestDataSize, prvtTwampTestServerAddress=prvtTwampTestServerAddress, prvtSaaRFC2544ThroughputTestTarget=prvtSaaRFC2544ThroughputTestTarget, prvtTwampTestVariation=prvtTwampTestVariation, prvtSaaRFC2544ThroughputTestPDUSize=prvtSaaRFC2544ThroughputTestPDUSize, prvtSaaRFC2544ThroughputTestSVLANDropEligible=prvtSaaRFC2544ThroughputTestSVLANDropEligible, PrvtTwampTestNameType=PrvtTwampTestNameType, prvtSaaRFC2544TestResultsGroup=prvtSaaRFC2544TestResultsGroup, prvtSaaProfileJitterNE=prvtSaaProfileJitterNE, prvtSaaRFC2544ThroughputTestSVLAN=prvtSaaRFC2544ThroughputTestSVLAN, prvtSaaProfiles=prvtSaaProfiles, prvtSaaY1731TestResultNoErrors=prvtSaaY1731TestResultNoErrors, prvtSaaRFC2544ThroughputTestRowStatus=prvtSaaRFC2544ThroughputTestRowStatus, prvtSaaY1731PmTestHistoryDepth=prvtSaaY1731PmTestHistoryDepth, prvtSaaNotifications=prvtSaaNotifications, prvtSaaRFC2544ThroughputTestCIR=prvtSaaRFC2544ThroughputTestCIR, prvtSaaProfileFrameLossFE=prvtSaaProfileFrameLossFE, prvtSaaProfileRowStatus=prvtSaaProfileRowStatus, prvtTwampTestServer=prvtTwampTestServer, prvtSaaY1731PmTestDropEligible=prvtSaaY1731PmTestDropEligible, prvtSaaY1731PmTestEncapValue=prvtSaaY1731PmTestEncapValue, prvtTwampTestResultEntry=prvtTwampTestResultEntry, prvtSaaRFC2544ThroughputTestBurstPercentage=prvtSaaRFC2544ThroughputTestBurstPercentage, prvtSaaRFC2544ThroughputTestMaxFrameloss=prvtSaaRFC2544ThroughputTestMaxFrameloss, prvtSaaRFC2544ThroughputTestSourceType=prvtSaaRFC2544ThroughputTestSourceType, prvtTwampTestExecuteNow=prvtTwampTestExecuteNow, prvtSaaY1731PmTestTimeout=prvtSaaY1731PmTestTimeout, prvtSaaY1731PmTestName=prvtSaaY1731PmTestName, prvtSaaProfileDelayNE=prvtSaaProfileDelayNE, prvtSaaTest=prvtSaaTest, prvtSaaY1731LoopbackTestUplinkPort=prvtSaaY1731LoopbackTestUplinkPort, prvtSaaY1731TestGroup=prvtSaaY1731TestGroup, prvtSaaRFC2544ProbeFailed=prvtSaaRFC2544ProbeFailed, prvtSaaY1731JitterFEThreshold=prvtSaaY1731JitterFEThreshold, prvtSaaY1731TestResultFramesSentNE=prvtSaaY1731TestResultFramesSentNE, prvtSaaTestResult=prvtSaaTestResult, prvtSaaRFC2544ThroughputTestPaternType=prvtSaaRFC2544ThroughputTestPaternType, prvtSaaY1731JitterNEThreshold=prvtSaaY1731JitterNEThreshold, prvtTwampClientTable=prvtTwampClientTable, prvtSaaRFC2544TestResultTable=prvtSaaRFC2544TestResultTable, prvtTwampTestName=prvtTwampTestName, prvtSaaY1731PmTestCCMAPSCount=prvtSaaY1731PmTestCCMAPSCount, prvtTwampTestMaxRtt=prvtTwampTestMaxRtt, PYSNMP_MODULE_ID=prvtSaaMib, prvtSaaY1731PmTestLossMeasurementType=prvtSaaY1731PmTestLossMeasurementType, prvtSaaProfileDelayFE=prvtSaaProfileDelayFE, prvtSaaObjects=prvtSaaObjects, prvtTwampTest=prvtTwampTest, prvtTwampServerShutdown=prvtTwampServerShutdown, prvtSaaGroups=prvtSaaGroups, prvtSaaRFC2544ThroughputTestCVLAN0Priority=prvtSaaRFC2544ThroughputTestCVLAN0Priority, prvtSaaRFC2544ThroughputTestEthertype=prvtSaaRFC2544ThroughputTestEthertype, PrvtTwampDecimalPercent=PrvtTwampDecimalPercent, prvtSaaRFC2544ThroughputTestTargetType=prvtSaaRFC2544ThroughputTestTargetType, prvtSaaRFC2544TestResultEntry=prvtSaaRFC2544TestResultEntry, prvtSaaY1731TestResultFramesRcvdNE=prvtSaaY1731TestResultFramesRcvdNE, prvtSaaY1731TestResultFrameLossFE=prvtSaaY1731TestResultFrameLossFE, prvtTwampServerInnactivity=prvtTwampServerInnactivity, prvtSaaY1731PmTestUserPort=prvtSaaY1731PmTestUserPort, prvtSaaY1731PmTestOwner=prvtSaaY1731PmTestOwner, prvtTwampTestEntry=prvtTwampTestEntry, prvtTwampTestRowStatus=prvtTwampTestRowStatus, prvtTwampTestVariationLow=prvtTwampTestVariationLow, prvtSaaProfileJitterFE=prvtSaaProfileJitterFE, prvtSaaY1731DelayFEThreshold=prvtSaaY1731DelayFEThreshold, prvtTwampClientIp=prvtTwampClientIp, prvtSaaY1731LoopbackTestTable=prvtSaaY1731LoopbackTestTable, prvtTwampTestDelay=prvtTwampTestDelay, prvtSaaY1731TestResultFramesRcvdFE=prvtSaaY1731TestResultFramesRcvdFE, prvtSaaY1731TestResultJitterFE=prvtSaaY1731TestResultJitterFE, prvtSaaRFC2544ThroughputTestName=prvtSaaRFC2544ThroughputTestName, prvtSaaY1731PmTestMonitorInterval=prvtSaaY1731PmTestMonitorInterval, prvtSaaY1731PmTestJitterPvalue=prvtSaaY1731PmTestJitterPvalue, prvtTwampServerTestSessions=prvtTwampServerTestSessions, prvtSaaY1731TestResultEntry=prvtSaaY1731TestResultEntry, prvtSaaY1731PmTestUplinkPort=prvtSaaY1731PmTestUplinkPort, prvtSaaRFC2544ThroughputTestSource=prvtSaaRFC2544ThroughputTestSource)
