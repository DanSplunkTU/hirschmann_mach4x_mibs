#
# PySNMP MIB module GBOND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/GBOND-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:05:07 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
HCPerfCurrentCount, HCPerfIntervalThreshold, HCPerfIntervalCount, HCPerfTotalCount, HCPerfValidIntervals, HCPerfInvalidIntervals, HCPerfTimeElapsed = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfCurrentCount", "HCPerfIntervalThreshold", "HCPerfIntervalCount", "HCPerfTotalCount", "HCPerfValidIntervals", "HCPerfInvalidIntervals", "HCPerfTimeElapsed")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Unsigned32, NotificationType, Counter64, Integer32, TimeTicks, ModuleIdentity, IpAddress, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, mib_2, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "NotificationType", "Counter64", "Integer32", "TimeTicks", "ModuleIdentity", "IpAddress", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "mib-2", "Counter32")
PhysAddress, DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
gBondMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 211))
gBondMIB.setRevisions(('2012-03-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gBondMIB.setRevisionsDescriptions(('Initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: gBondMIB.setLastUpdated('201203120000Z')
if mibBuilder.loadTexts: gBondMIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: gBondMIB.setContactInfo('WG charter:\n        http://www.ietf.org/html.charters/adslmib-charter.html\n\n      Mailing Lists:\n        General Discussion: adslmib@ietf.org\n        To Subscribe: adslmib-request@ietf.org\n        In Body: subscribe your_email_address\n\n       Chair: Menachem Dodge\n      Postal: ECI Telecom, Ltd.\n              30 Hasivim St.,\n              Petach-Tikva 4951169\n              Israel\n       Phone: +972-3-926-8421\n       EMail: menachem.dodge@ecitele.com\n\n      Editor: Edward Beili\n      Postal: Actelis Networks, Inc.\n              25 Bazel St., P.O.B. 10173\n              Petach-Tikva 49103\n              Israel\n       Phone: +972-3-924-3491\n       EMail: edward.beili@actelis.com\n\n      Editor: Moti Morgenstern\n      Postal: ECI Telecom\n              30 Hasivim St.\n              Petach-Tikva 4951169\n              Israel\n\n       Phone: +972-3-926-6258\n       EMail: moti.morgenstern@ecitele.com')
if mibBuilder.loadTexts: gBondMIB.setDescription("The objects in this MIB module are used to manage the\n      multi-pair bonded xDSL Interfaces, defined in ITU-T\n      recommendations G.998.1, G.998.2 and G.998.3.\n\n      This MIB module MUST be used in conjunction with a bonding\n      scheme specific MIB module, that is, G9981-MIB, G9982-MIB or\n      G9983-MIB.\n\n      The following references are used throughout this MIB module:\n\n      [G.998.1] refers to:\n        ITU-T Recommendation G.998.1: 'ATM-based multi-pair bonding',\n        January 2005.\n\n      [G.998.2] refers to:\n        ITU-T Recommendation G.998.2: 'Ethernet-based multi-pair\n        bonding', January 2005.\n\n      [G.998.3] refers to:\n        ITU-T Recommendation G.998.3: 'Multi-pair bonding using\n        time-division inverse multiplexing', January 2005.\n\n      [TR-159] refers to:\n        Broadband Forum Technical Report: 'Management Framework for\n        xDSL Bonding', December 2008.\n\n      Naming Conventions:\n        BCE   - Bonding Channel Entity\n        BTU   - Bonding Transmission Unit\n        BTU-C - Bonding Transmission Unit, CO side\n        BTU-R - Bonding Transmission Unit, Remote Terminal (CPE) side\n        CO    - Central Office\n        CPE   - Customer Premises Equipment\n        GBS   - Generic Bonding Sublayer\n        PM    - Performance Monitoring\n        SNR   - Signal to Noise Ratio\n        TCA   - Threshold Crossing Alert\n\n      Copyright (C) The IETF Trust (2012).\n      This version of this MIB module is part of RFC XXXX;\n      see the RFC itself for full legal notices.")
gBondObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1))
gBondConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2))
gBondPort = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1))
gBondBce = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 2))
class GBondSchemeList(TextualConvention, Bits):
    description = 'This textual convention defines a bitmap of possible ITU-T\n       G.998 (G.Bond) bonding schemes. Currently there are 3 bonding\n       schemes defined: G.998.1, G.998.2 and G.998.3, identified by\n       bit values g9981(1), g9982(2) and g9983(3), respectively.\n       An additional value of none(0), can be returned as a result\n       of GET operation, when an value of the object cannot be\n       determined (for example a peer GBS cannot be reached), the port\n       does not support any kind of bonding or when a single-BCE\n       G.998.2 GBS supports bonding (frame fragmentation/reassembly)\n       bypass.'
    status = 'current'
    namedValues = NamedValues(("none", 0), ("g9981", 1), ("g9982", 2), ("g9983", 3))

class GBondScheme(TextualConvention, Integer32):
    description = 'This textual convention defines ITU-T G.998 bonding scheme\n       values. Possible values are:\n         none(0)    - no bonding (e.g. on single-BCE G.998.2 GBS) or\n                      unknown\n         g9981(1)   - G.998.1 (G.Bond/ATM)\n         g9982(2)   - G.998.2 (G.Bond/Ethernet)\n         g9983(3)   - G.998.3 (G.Bond/TDIM).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("g9981", 1), ("g9982", 2), ("g9983", 3))

class GBondPm1DayIntervalThreshold(TextualConvention, Unsigned32):
    description = 'This textual convention defines a range of values that may be\n       set in a fault threshold alarm control for a 1-day performance\n       monitoring interval.\n       As the number of seconds in a 1-day interval numbers at most\n       86400, objects of this type may have a range of 0...86400,\n       where the value of 0 disables the alarm.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 86400)

gBondPortNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1, 0))
gBondLowUpRateCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 1)).setObjects(("GBOND-MIB", "gBondPortStatUpDataRate"), ("GBOND-MIB", "gBondPortConfThreshLowUpRate"))
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setDescription("This notification indicates that the G.Bond port' upstream\n       data rate has reached/dropped below or exceeded the low\n       upstream rate threshold, specified by\n       gBondPortConfThreshLowUpRate.\n\n       This notification MAY be sent for the -O subtype ports\n       while the port is up, on the crossing event in both\n       directions: from normal (rate is above the threshold) to low\n       (rate equals the threshold or below it) and from low to\n       normal. This notification is not applicable to the -R\n       subtypes.\n\n       It is RECOMMENDED that a small debouncing period of 2.5 sec,\n       between the detection of the condition and notification,\n       is implemented to prevent simultaneous LinkUp/LinkDown and\n       gBondLowUpRateCrossing notifications to be sent.\n\n       The adaptive nature of the G.Bond technology allows the port\n       to adapt itself to the changes in the copper environment,\n       e.g., an impulse noise, alien crosstalk, or a\n       micro-interruption may temporarily drop one or more BCEs in\n       the aggregation group, causing a rate degradation of the\n       aggregated G.Bond link. The dropped BCEs would then try to\n       re-initialize, possibly at a lower rate than before, adjusting\n       the rate to provide required target SNR margin.\n\n       Generation of this notification is controlled by the\n       gBondPortConfLowRateCrossingEnable object.\n\n       This object maps to the TR-159 notification\n       nGroupLowUpRateCrossing.")
if mibBuilder.loadTexts: gBondLowUpRateCrossing.setReference('[TR-159] 5.5.1.24')
gBondLowDnRateCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 2)).setObjects(("GBOND-MIB", "gBondPortStatDnDataRate"), ("GBOND-MIB", "gBondPortConfThreshLowDnRate"))
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setDescription("This notification indicates that the G.Bond port' downstream\n       data rate has reached/dropped below or exceeded the low\n       downstream rate threshold, specified by\n       gBondPortConfThreshLowDnRate.\n\n       This notification MAY be sent for the -O subtype ports\n       while the port is up, on the crossing event in both\n       directions: from normal (rate is above the threshold) to low\n       (rate equals the threshold or below it) and from low to\n       normal. This notification is not applicable to the -R\n       subtypes.\n\n       It is RECOMMENDED that a small debouncing period of 2.5 sec,\n       between the detection of the condition and notification,\n       is implemented to prevent simultaneous LinkUp/LinkDown and\n       gBondLowDnRateCrossing notifications to be sent.\n\n       The adaptive nature of the G.Bond technology allows the port\n       to adapt itself to the changes in the copper environment,\n       e.g., an impulse noise, alien crosstalk, or a\n       micro-interruption may temporarily drop one or more BCEs in\n       the aggregation group, causing a rate degradation of the\n       aggregated G.Bond link. The dropped BCEs would then try to\n       re-initialize, possibly at a lower rate than before,\n       adjusting the rate to provide required target SNR margin.\n\n       Generation of this notification is controlled by the\n       gBondPortConfLowRateCrossingEnable object.\n\n       This object maps to the TR-159 notification\n       nGroupLowDownRateCrossing.")
if mibBuilder.loadTexts: gBondLowDnRateCrossing.setReference('[TR-159] 5.5.1.25')
gBondPmTca15MinESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 3)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinES"))
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setDescription('This notification indicates that the Errored Seconds threshold,\n       specified by gBondPortPmTcaProfileThresh15MinES, has been\n       reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh15MinES objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca15MinES.')
if mibBuilder.loadTexts: gBondPmTca15MinESCrossing.setReference('[TR-159] 5.5.1.42')
gBondPmTca15MinSESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 4)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinSES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinSES"))
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setDescription('This notification indicates that the Severely Errored Seconds\n       threshold, specified by gBondPortPmTcaProfileThresh15MinSES,\n       has been reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh15MinSES objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca15MinSES.')
if mibBuilder.loadTexts: gBondPmTca15MinSESCrossing.setReference('[TR-159] 5.5.1.43')
gBondPmTca15MinUASCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 5)).setObjects(("GBOND-MIB", "gBondPortPmCur15MinUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinUAS"))
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setDescription('This notification indicates that the Unavailable Seconds\n       threshold, specified by gBondPortPmTcaProfileThresh15MinES,\n       has been reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh15MinUAS objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca15MinUAS.')
if mibBuilder.loadTexts: gBondPmTca15MinUASCrossing.setReference('[TR-159] 5.5.1.44')
gBondPmTca1DayESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 6)).setObjects(("GBOND-MIB", "gBondPortPmCur1DayES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayES"))
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setDescription('This notification indicates that the Errored Seconds threshold,\n       specified by gBondPortPmTcaProfileThresh1DayES, has been\n       reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh1DayES objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca1DayES.')
if mibBuilder.loadTexts: gBondPmTca1DayESCrossing.setReference('[TR-159] 5.5.1.54')
gBondPmTca1DaySESCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 7)).setObjects(("GBOND-MIB", "gBondPortPmCur1DaySES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DaySES"))
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setDescription('This notification indicates that the Severely Errored Seconds\n       threshold, specified by gBondPortPmTcaProfileThresh1DaySES,\n       has been reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh1DaySES objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca1DaySES.')
if mibBuilder.loadTexts: gBondPmTca1DaySESCrossing.setReference('[TR-159] 5.5.1.55')
gBondPmTca1DayUASCrossing = NotificationType((1, 3, 6, 1, 2, 1, 211, 1, 1, 0, 8)).setObjects(("GBOND-MIB", "gBondPortPmCur1DayUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayUAS"))
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setStatus('current')
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setDescription('This notification indicates that the Unavailable Seconds\n       threshold, specified by gBondPortPmTcaProfileThresh1DayUAS,\n       has been reached or exceeded for the GPS port.\n\n       Generation of this notification is controlled by\n       gBondPortConfPmTcaEnable and\n       gBondPortPmTcaProfileThresh1DayUAS objects.\n\n       This object maps to the TR-159 notification\n       nGroupPerfTca1DayUAS.')
if mibBuilder.loadTexts: gBondPmTca1DayUASCrossing.setReference('[TR-159] 5.5.1.56')
gBondPortConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 1), )
if mibBuilder.loadTexts: gBondPortConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTable.setDescription('Table for configuration of G.Bond GBS ports. Entries in this\n       table MUST be maintained in a persistent manner')
gBondPortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfEntry.setDescription('An entry in the G.Bond Port Configuration table.\n       Each entry represents a G.Bond port indexed by the ifIndex.\n       Note that a G.Bond GBS port runs on top of a single\n       or multiple BCE port(s), which are also indexed by ifIndex.')
gBondPortConfAdminScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 1), GBondScheme()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setReference('[TR-159] 5.5.1.6; IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfAdminScheme.setDescription("A desired bonding scheme for a G.Bond GBS port.\n       The following values instruct the port to use corresponding\n       bonding scheme if supported:\n         none(0)       - instructs the port not to use bonding\n                         (only on single-BCE G.998.2 GBS)\n         g9981(1)      - instructs the port to use G.998.1 bonding\n         g9982(2)      - instructs the port to use G.998.2 bonding\n         g9983(3)      - instructs the port to use G.998.3 bonding\n\n       Changing of gBondPortConfAdminScheme MUST be performed when the\n       link is administratively 'down', as indicated by the\n       ifAdminStatus object in IF-MIB.\n       Attempts to change this object MUST be rejected (in case of SNMP\n       with the error inconsistentValue), if the link is Up or\n       Initializing. Attempts to change this object to an unsupported\n       bonding scheme (see gBondPortCapSchemesSupported) SHALL be\n       rejected (in case of SNMP with the error wrongValue).\n       Setting this object to the value of 'none' must be rejected for\n       GBS ports with multiple BCEs (with the error inconsistentValue).\n\n       This object maps to the TR-159 attribute aGroupAdminBondScheme.")
gBondPortConfPeerAdminScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 2), GBondScheme()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setReference('[TR-159] 5.5.1.7; IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPeerAdminScheme.setDescription("A desired bonding scheme for a peer (link partner) G.Bond\n       port (GBS).\n       The following values instruct the peer port to use\n       corresponding bonding scheme if supported:\n         none(0)       - instructs the port not to use bonding\n                         (only on single-BCE G.998.2 GBS)\n         g9981(1)      - instructs the port to use G.998.1 bonding\n         g9982(2)      - instructs the port to use G.998.2 bonding\n         g9983(3)      - instructs the port to use G.998.3 bonding\n\n       Changing of this object MUST be performed when the link is\n       administratively 'down', as indicated by the ifAdminStatus\n       object in IF-MIB.\n       Attempts to change this object MUST be rejected (in case of SNMP\n       with the error inconsistentValue), if the link is Up or\n       Initializing. Attempts to change this object to an unsupported\n       bonding scheme (see gBondPortCapPeerSchemesSupported) SHALL be\n       rejected (in case of SNMP with the error wrongValue).\n\n       This object maps to the TR-159 attribute\n       aGroupPeerAdminBondScheme.")
gBondPortConfDiscoveryCode = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setReference('[TR-159] 5.5.1.20; [802.3] 61.2.2.8.3, 61.2.2.8.4,\n       45.2.6.6.1, 45.2.6.8, 61A.2; IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfDiscoveryCode.setDescription("A Discovery Code of the G.Bond port (GBS).\n       A unique 6 octet long code used by the Discovery function.\n       This object MUST be instantiated for the -O subtype GBS before\n       writing operations on the gBondBceConfRemoteDiscoveryCode\n       (Set_if_Clear and Clear_if_Same) are performed by BCEs\n       associated with the GBS.\n       The initial value of this object for -R subtype ports after\n       reset is all zeroes. For -R subtype ports, the value of this\n       object cannot be changed directly. This value may be changed\n       as a result of writing operation on the\n       gBondBceConfRemoteDiscoveryCode object of remote BCE of -O\n       subtype, connected to one of the local BCEs associated with\n       the GBS.\n\n       Discovery MUST be performed when the link is administratively\n       'down', as indicated by the ifAdminStatus object in IF-MIB.\n       Attempts to change this object MUST be rejected (in case of\n       SNMP with the error inconsistentValue), if the link is Up or\n       Initializing.\n\n       This object maps to the TR-159 attribute\n       aGroupDiscoveryCode.")
gBondPortConfTargetUpDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setReference('[TR-159] 5.5.1.17; IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTargetUpDataRate.setDescription("A desired G.Bond port Data Rate in the upstream direction,\n       in Kbps, to be achieved during initialization, under\n       restrictions placed upon the member BCEs by their respective\n       configuration settings.\n       This object represents a sum of individual BCE upstream data\n       rates, modified to compensate for fragmentation and\n       encapsulation overhead (e.g., for an Ethernet service, the\n       target data rate of 10Mbps SHALL allow lossless transmission\n       of full-duplex 10Mbps Ethernet frame stream with minimal\n       inter-frame gap).\n       Note that the target upstream data rate may not be achieved\n       during initialization (e.g., due to unavailability of required\n       BCEs) or the initial bandwidth could deteriorate, so that the\n       actual upstream data rate (gBondPortStatUpDataRate) could be less\n       than gBondPortConfTargetUpDataRate.\n\n       The value is limited above by 10 Gbps, to accommodate very\n       high speed bonded xDSL interfaces (e.g. 32 x 100Mbps).\n\n       The value between 1 and 10000000 indicates that the total\n       upstream data rate of the G.Bond port after initialization\n       SHALL be equal to the target data rate or less, if the target\n       upstream data rate cannot be achieved under the restrictions\n       configured for BCEs. In case the copper environment allows to\n       achieve higher upstream data rate than that specified by this\n       object, the excess capability SHALL be either converted to\n       additional SNR margin or reclaimed by minimizing transmit\n       power.\n\n       The value of 0 means that the target data rate is not\n       fixed and SHALL be set to the maximum attainable rate during\n       initialization (Best Effort), under specified spectral\n       restrictions and with desired SNR Margin per BCE.\n\n       This object is read-write for the -O subtype G.Bond ports.\n       It is irrelevant for the -R subtypes - attempts to read or\n       change this object for such ports MUST be rejected (in case of\n       SNMP with the error inconsistentValue).\n\n       Changing of the Target Upstream Data Rate MUST be performed\n       when the link is administratively 'down', as indicated by the\n       ifAdminStatus object in IF-MIB.\n       Attempts to change this object MUST be rejected (in case of SNMP\n       with the error inconsistentValue), if the link is Up or\n       Initializing.\n\n       This object maps to the TR-159 attribute aGroupTargetUpRate.")
gBondPortConfTargetDnDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000000), ))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setReference('[TR-159] 5.5.1.18; IF-MIB, ifAdminStatus')
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfTargetDnDataRate.setDescription("A desired G.Bond port Data Rate in the downstream direction,\n       in Kbps, to be achieved during initialization, under\n       restrictions placed upon the member BCEs by their respective\n       configuration settings.\n       This object represents a sum of individual BCE downstream data\n       rates, modified to compensate for fragmentation and\n       encapsulation overhead (e.g., for an Ethernet service, the\n       target data rate of 10Mbps SHALL allow lossless transmission\n       of full-duplex 10Mbps Ethernet frame stream with minimal\n       inter-frame gap).\n       Note that the target downstream data rate may not be achieved\n       during initialization (e.g., due to unavailability of required\n       BCEs) or the initial bandwidth could deteriorate, so that the\n       actual downstream data rate (gBondPortStatDnDataRate) could be\n       less than gBondPortConfTargetDnDataRate.\n\n       The value is limited above by 10 Gbps, to accommodate very\n       high speed bonded xDSL interfaces (e.g. 32 x 100Mbps).\n\n       The value between 1 and 10000000 indicates that the total\n       downstream data rate of the G.Bond port after initialization\n       SHALL be equal to the target data rate or less, if the target\n       downstream data rate cannot be achieved under the restrictions\n       configured for BCEs. In case the copper environment allows to\n       achieve higher downstream data rate than that specified by\n       this object, the excess capability SHALL be either converted\n       to additional SNR margin or reclaimed by minimizing transmit\n       power.\n\n       The value of 0 means that the target data rate is not\n       fixed and SHALL be set to the maximum attainable rate during\n       initialization (Best Effort), under specified spectral\n       restrictions and with desired SNR Margin per BCE.\n\n       This object is read-write for the -O subtype G.Bond ports.\n       It is irrelevant for the -R subtypes - attempts to read or\n       change this object for such ports MUST be rejected (in case of\n       SNMP with the error inconsistentValue).\n\n       Changing of the Target Downstream Data Rate MUST be performed\n       when the link is administratively 'down', as indicated by the\n       ifAdminStatus object in IF-MIB.\n       Attempts to change this object MUST be rejected (in case of SNMP\n       with the error inconsistentValue), if the link is Up or\n       Initializing.\n\n       This object maps to the TR-159 attribute aGroupTargetDownRate.")
gBondPortConfThreshLowUpRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setReference('[TR-159] 5.5.1.21')
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfThreshLowUpRate.setDescription('This object configures the G.Bond port low upstream rate\n       crossing alarm threshold. When the current value of\n       gBondPortStatUpDataRate for this port reaches/drops below or\n       exceeds this threshold, a gBondLowUpRateCrossing notification\n       MAY be generated if enabled by\n       gBondPortConfLowRateCrossingEnable.\n\n       This object is read-write for the -O subtype G.Bond ports.\n       It is irrelevant for the -R subtypes - attempts to read or\n       change this object for such ports MUST be rejected (in case of\n       SNMP with the error inconsistentValue).\n\n       This object maps to the TR-159 attribute\n       aGroupthreshLowUpRate.')
gBondPortConfThreshLowDnRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setReference('[TR-159] 5.5.1.22')
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfThreshLowDnRate.setDescription('This object configures the G.Bond port low downstream rate\n       crossing alarm threshold. When the current value of\n       gBondPortStatDnDataRate for this port reaches/drops below or\n       exceeds this threshold, a gBondLowDnRateCrossing notification\n       MAY be generated if enabled by\n       gBondPortConfLowRateCrossingEnable.\n\n       This object is read-write for the -O subtype G.Bond ports.\n       It is irrelevant for the -R subtypes - attempts to read or\n       change this object for such ports MUST be rejected (in case of\n       SNMP with the error inconsistentValue).\n\n       This object maps to the TR-159 attribute\n       aGroupThreshDownUpRate.')
gBondPortConfLowRateCrossingEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setReference('[TR-159] 5.5.1.23')
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfLowRateCrossingEnable.setDescription('Indicates whether gBondLowUpRateCrossing and\n       gBondLowDnRateCrossing notifications should be generated\n       for this interface.\n\n       Value of true(1) indicates that the notifications are enabled.\n       Value of false(2) indicates that the notifications are\n       disabled.\n\n       This object is read-write for the -O subtype G.Bond ports.\n       It is irrelevant for the -R subtypes - attempts to read or\n       change this object for such ports MUST be rejected (in case of\n       SNMP with the error inconsistentValue).\n\n       This object maps to the TR-159 attribute\n       aGroupLowRateCrossingEnable.')
gBondPortConfPmTcaConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPmTcaConfProfile.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPmTcaConfProfile.setDescription('The value of this object is the index of the row in the GBS\n       port Alarm Configuration Profile Table for Performance Monitoring\n       Threshold Crossing Alerts - gBondPortAlarmConfProfileTable,\n       which applies to this GBS port.')
gBondPortConfPmTcaEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setReference('[TR-159] 5.5.1.38')
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setStatus('current')
if mibBuilder.loadTexts: gBondPortConfPmTcaEnable.setDescription('Indicates whether gBondPerfTca*Crossing set of notifications\n       should be generated for this interface.\n\n       Value of true(1) indicates that the notifications are enabled.\n       Value of false(2) indicates that the notifications are disabled.\n\n       This object maps to the TR-159 attribute aGroupPerfTcaEnable.')
gBondPortCapTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 2), )
if mibBuilder.loadTexts: gBondPortCapTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapTable.setDescription('Table for capabilities of G.Bond Ports. Entries in this table\n       MUST be maintained in a persistent manner')
gBondPortCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapEntry.setDescription('An entry in the G.Bond Port Capability table.\n       Each entry represents a G.Bond port indexed by the ifIndex.\n       Note that a G.Bond GBS port runs on top of a single\n       or multiple BCE port(s), which are also indexed by ifIndex.')
gBondPortCapSchemesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 1), GBondSchemeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setReference('[TR-159] 5.5.1.2')
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapSchemesSupported.setDescription('Bonding Capability of the G.Bond port (GBS). This is a\n       read-only bitmap of the possible bonding schemes supported by\n       the GBS. The various bit-positions are:\n         none(0)       - GBS is capable of bonding bypass on a\n                         single-BCE (G.998.2 only)\n         g9981(1)      - GBS is capable of G.998.1 bonding\n         g9982(2)      - GBS is capable of G.998.2 bonding\n         g9983(3)      - GBS is capable of G.998.3 bonding\n\n       Note that for ports supporting multiple bonding schemes the\n       actual administrative scheme is set via gBondPortConfAdminScheme\n       object. The current operating bonding scheme is reflected in\n       the gBondPortStatOperScheme.\n\n       This object maps to the TR-159 attribute\n       aGroupBondSchemesSupported.')
gBondPortCapPeerSchemesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 2), GBondSchemeList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setReference('[TR-159] 5.5.1.3')
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapPeerSchemesSupported.setDescription('Bonding Capability of the peer G.Bond port (GBS). This is a\n       read-only bitmap of the possible bonding schemes supported by\n       the link partner GBS. The various bit-positions are:\n         none(0)       - peer GBS does not support bonding or\n                         the peer unit could not be reached or\n                         peer GBS is capable of bonding bypass on a\n                         single-BCE (G.998.2 only)\n         g9981(1)      - peer GBS is capable of G.998.1 bonding\n         g9982(2)      - peer GBS is capable of G.998.2 bonding\n         g9983(3)      - peer GBS is capable of G.998.3 bonding\n\n       Note that for ports supporting multiple bonding schemes the\n       actual administrative scheme is set via\n       gBondPortConfPeerAdminScheme object. The current operating\n       bonding scheme is reflected in the gBondPortStatPeerOperScheme.\n\n       This object maps to the TR-159 attribute\n       aGroupBondPeerSchemesSupported.')
gBondPortCapCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapCapacity.setReference('[TR-159] 5.5.1.12')
if mibBuilder.loadTexts: gBondPortCapCapacity.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapCapacity.setDescription('Number of BCEs that can be aggregated by the local GBS.\n       The number of BCEs currently assigned to a particular G.Bond\n       port (gBondPortStatNumBCEs) is never greater than\n       gBondPortCapCapacity.\n\n       This object maps to the TR-159 attribute aGroupCapacity.')
gBondPortCapPeerCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setReference('[TR-159] 5.5.1.13')
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setStatus('current')
if mibBuilder.loadTexts: gBondPortCapPeerCapacity.setDescription('Number of BCEs that can be aggregated by the peer GBS port.\n       Value of 0 is returned when peer Bonding Capacity is unknown\n       (peer cannot be reached).\n\n       This object maps to the TR-159 attribute aGroupPeerCapacity.')
gBondPortStatTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 3), )
if mibBuilder.loadTexts: gBondPortStatTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatTable.setDescription('This table provides overall status information of G.Bond\n       ports, complementing the generic status information from the\n       ifTable of IF-MIB. Additional status information about\n       connected BCEs is available from the relevant line MIBs\n\n       This table contains live data from the equipment. As such,\n       it is NOT persistent.')
gBondPortStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatEntry.setDescription('An entry in the G.Bond Port Status table.\n       Each entry represents a G.Bond port indexed by the ifIndex.\n       Note that a G.Bond GBS port runs on top of a single\n       or multiple BCE port(s), which are also indexed by ifIndex.')
gBondPortStatOperScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 1), GBondScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatOperScheme.setReference('[TR-159] 5.5.1.4')
if mibBuilder.loadTexts: gBondPortStatOperScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatOperScheme.setDescription('Current operating bonding scheme of a G.Bond port.\n       The possible values are:\n         none(0)       - bonding bypass on a single-BCE (G.998.2 only)\n         g9981(1)      - G.998.1 bonding\n         g9982(2)      - G.998.2 bonding\n         g9983(3)      - G.998.3 bonding\n\n       This object maps to the TR-159 attribute\n       aGroupOperBondScheme.')
gBondPortStatPeerOperScheme = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 2), GBondScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setReference('[TR-159] 5.5.1.5')
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatPeerOperScheme.setDescription('Current operating bonding scheme of a G.Bond port link partner.\n       The possible values are:\n         unknown(0)    - peer cannot be reached due to the link state or\n                         bonding bypass on a single-BCE (G.998.2 only)\n         g9981(1)      - G.998.1 bonding\n         g9982(2)      - G.998.2 bonding\n         g9983(3)      - G.998.3 bonding\n\n       This object maps to the TR-159 attribute\n       aGroupPeerOperBondScheme.')
gBondPortStatUpDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 3), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setReference('[TR-159] 5.5.1.15')
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatUpDataRate.setDescription('A current G.Bond port operational Data Rate in the upstream\n       direction, in bps.\n       This object represents an estimation of the sum of individual\n       BCE upstream data rates, modified to compensate for\n       fragmentation and encapsulation overhead (e.g., for an\n       Ethernet service, the target data rate of 10Mbps SHALL allow\n       lossless transmission of full-duplex 10Mbps Ethernet frame\n       stream with minimal inter-frame gap).\n\n       Note that for symmetrical interfaces gBondPortStatUpDataRate ==\n       gBondPortStatDnDataRate == ifSpeed.\n\n       This object maps to the TR-159 attribute aGroupUpRate.')
gBondPortStatDnDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 4), Gauge32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setReference('[TR-159] 5.5.1.16')
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatDnDataRate.setDescription('A current G.Bond port operational Data Rate in the downstream\n       direction, in bps.\n       This object represents an estimation of the sum of individual\n       BCE downstream data rates, modified to compensate for\n       fragmentation and encapsulation overhead (e.g., for an\n       Ethernet service, the target data rate of 10Mbps SHALL allow\n       lossless transmission of full-duplex 10Mbps Ethernet frame\n       stream with minimal inter-frame gap).\n\n       Note that for symmetrical interfaces gBondPortStatUpDataRate ==\n       gBondPortStatDnDataRate == ifSpeed.\n\n       This object maps to the TR-159 attribute aGroupDownRate.')
gBondPortStatFltStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 5), Bits().clone(namedValues=NamedValues(("noPeer", 0), ("peerPowerLoss", 1), ("peerBondSchemeMismatch", 2), ("bceSubTypeMismatch", 3), ("lowRate", 4), ("init", 5), ("ready", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatFltStatus.setReference('[TR-159] 5.5.1.9; IF-MIB, ifOperStatus')
if mibBuilder.loadTexts: gBondPortStatFltStatus.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatFltStatus.setDescription("G.Bond (GBS) port Fault Status. This is a bitmap of possible\n       conditions. The various bit positions are:\n         noPeer              - peer GBS cannot be reached (e.g.,\n                               no BCEs attached, all BCEs are Down\n                               etc.).\n         peerPowerLoss       - peer GBS has indicated impending unit\n                               failure due to loss of local power\n                               ('Dying Gasp').\n         peerBondSchemeMismatch - operating bonding scheme of a peer\n                               GBS is different from the local one.\n         bceSubTypeMismatch  - local BCEs in the aggregation group\n                               are not of the same sub-type, e.g.,\n                               some BCEs in the local device are -O\n                               while others are -R subtype.\n         lowRate             - gBondUpRate/gBondDnRate of the port\n                               has reached or dropped below\n                               gBondPortConfThreshLowUpRate/\n                               gBondPortConfThreshLowDnRate.\n         init                - The link is Initializing, as a result of\n                               ifAdminStatus being set to 'up' for a\n                               particular BCE or a GBS to which the BCE\n                               is connected.\n         ready               - at least one BCE in the aggregation\n                               group is detecting handshake tones.\n\n       This object is intended to supplement ifOperStatus object\n       in IF-MIB.\n\n       This object maps to the TR-159 attribute aGroupStatus.")
gBondPortStatSide = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("subscriber", 1), ("office", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatSide.setReference('[TR-159] 5.5.1.11')
if mibBuilder.loadTexts: gBondPortStatSide.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatSide.setDescription("G.Bond port mode of operation (subtype).\n       The value of 'subscriber' indicates the port is designated as\n       '-R' subtype (all BCEs assigned to this port are of subtype\n       '-R').\n       The value of the 'office' indicates that the port is\n       designated as '-O' subtype (all BCEs assigned to this port are\n       of subtype '-O').\n       The value of 'unknown' indicates that the port has no assigned\n       BCEs yet or that the assigned BCEs are not of the same side\n       (subTypeBCEMismatch).\n\n       This object maps to the TR-159 attribute aGroupEnd.")
gBondPortStatNumBCEs = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setReference('[TR-159] 5.5.1.14')
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setStatus('current')
if mibBuilder.loadTexts: gBondPortStatNumBCEs.setDescription('Number of BCEs that is currently aggregated by the local GBS\n       (assigned to the G.Bond port using ifStackTable).\n       This number is never greater than gBondPortCapCapacity.\n\n       This object SHALL be automatically incremented or decremented\n       when a BCE is added or deleted to/from the G.Bond port using\n       ifStackTable.\n\n       This object maps to the TR-159 attribute aGroupNumChannels')
gBondPortPM = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 1, 1, 4))
gBondPortPmCurTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1), )
if mibBuilder.loadTexts: gBondPortPmCurTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurTable.setDescription('This table contains current Performance Monitoring (PM)\n       information for a GBS port. This table contains live data from\n       the equipment and as such is NOT persistent.')
gBondPortPmCurEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondPortPmCurEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurEntry.setDescription('An entry in the G.Bond Port PM table.\n       Each entry represents a G.Bond port indexed by the ifIndex.\n       Note that a G.Bond GBS port runs on top of a single\n       or multiple BCE port(s), which are also indexed by ifIndex.')
gBondPortPmCurES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 1), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurES.setReference('[TR-159] 5.5.1.29')
if mibBuilder.loadTexts: gBondPortPmCurES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurES.setDescription('A count of Errored Seconds (ES) on the GBS since the BTU was\n       last restarted.\n\n       An Errored Second for a G.998.x interface is defined as a count\n       of 1-second intervals during which one or more GBS errors are\n       declared. The errors are specific for each bonding scheme, e.g.\n         - lost cells for the ATM bonding;\n         - lost or discarded (due to an error or a buffer overflow)\n           fragments for the Ethernet bonding;\n         - CRC4, CRC6 or CRC8 errors for the TDIM bonding\n       This object is inhibited during Unavailable Seconds (UAS).\n\n       This object maps to the TR-159 attribute aGroupPerfES.')
gBondPortPmCurSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 2), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurSES.setReference('[TR-159] 5.5.1.30')
if mibBuilder.loadTexts: gBondPortPmCurSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurSES.setDescription('A count of Severely Errored Seconds (SES) on the GBS since the\n       BTU was last restarted.\n\n       A Severely Errored Second for a G.998.x interface is defined as\n       a count of 1-second intervals during which GBS errors cause at\n       least 1% traffic loss of the nominal bonded link rate or at\n       least 12ms for the TDM traffic. The exact definition is specific\n       for each bonding scheme, e.g.\n         - 234 lost cells for the ATM bonding with 10Mbps nominal link\n           rate\n         - 60 lost/discarded fragments for the Ethernet bonding with\n           10Mbps nominal link rate and fixed 192 Byte-long fragment\n           size.\n         - 6 or more CRC4, one or more CRC6 or one or more CRC8 errors\n           for the TDM bonding\n       This object is inhibited during Unavailable Seconds (UAS).\n\n       This object maps to the TR-159 attribute aGroupPerfSES.')
gBondPortPmCurUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 3), HCPerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCurUAS.setReference('[TR-159] 5.5.1.31')
if mibBuilder.loadTexts: gBondPortPmCurUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCurUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS since the BTU\n       was last restarted.\n\n       An Unavailable Second for a G.998.x interface is defined as a\n       count of 1-second intervals during which the bonded link is\n       unavailable. The G.998.x link becomes unavailable at the onset\n       of 10 contiguous SESs. The 10 SESs are included in the\n       unavailable time. Once unavailable, the G.998.x line becomes\n       available at the onset of 10 contiguous seconds with no SESs.\n       The 10 seconds with no SESs are excluded from unavailable time.\n\n       This object maps to the TR-159 attribute aGroupPerfUAS.')
gBondPortPmCur15MinValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 4), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setReference('[TR-159] 5.5.1.32')
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinValidIntervals.setDescription('A number of 15-minute intervals for which data was collected.\n       The value of this object will be 96 or the maximum number of\n       15-minute history intervals collected by the implementation\n       unless the measurement was (re-)started recently, in which case\n       the value will be the number of complete 15 minutes intervals\n       for which there are at least some data.\n       In certain cases it is possible that some intervals are\n       unavailable. In this case, this object reports the maximum\n       interval number for which data is available.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinValidIntervals.')
gBondPortPmCur15MinInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 5), HCPerfInvalidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setReference('[TR-159] 5.5.1.33')
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinInvalidIntervals.setDescription('A number of 15-minute intervals for which data was not always\n       available. The value will typically be zero except in cases\n       where the data for some intervals are not available.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinInvalidIntervals.')
gBondPortPmCur15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 6), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setReference('[TR-159] 5.5.1.34')
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinTimeElapsed.setDescription('A count of seconds that have elapsed since the beginning of the\n       current 15-minute performance interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfCurr15MinTimeElapsed.')
gBondPortPmCur15MinES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 7), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setReference('[TR-159] 5.5.1.35')
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinES.setDescription('A count of Errored Seconds (ES) on the GBS in the current\n       15-minute performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr15MinES.')
gBondPortPmCur15MinSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 8), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setReference('[TR-159] 5.5.1.36')
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinSES.setDescription('A count of Severely Errored Seconds (ES) on the GBS in the\n       current 15-minute performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr15MinSES.')
gBondPortPmCur15MinUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 9), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setReference('[TR-159] 5.5.1.37')
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur15MinUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current\n       15-minute performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr15MinUAS.')
gBondPortPmCur1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setReference('[TR-159] 5.5.1.45')
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayValidIntervals.setDescription('A number of 1-day intervals for which data was collected.\n       The value of this object will be 7 or the maximum number of\n       1-day history intervals collected by the implementation unless\n       the measurement was (re-)started recently, in which case the\n       value will be the number of complete 1-day intervals for which\n       there are at least some data.\n       In certain cases it is possible that some intervals are\n       unavailable. In this case, this object reports the maximum\n       interval number for which data is available.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayValidIntervals.')
gBondPortPmCur1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setReference('[TR-159] 5.5.1.46')
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayInvalidIntervals.setDescription('A number of 1-day intervals for which data was not always\n       available. The value will typically be zero except in cases\n       where the data for some intervals are not available.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayInvalidIntervals.')
gBondPortPmCur1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 12), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setReference('[TR-159] 5.5.1.47')
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayTimeElapsed.setDescription('A count of seconds that have elapsed since the beginning of\n       the current 1-day performance interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfCurr1DayTimeElapsed.')
gBondPortPmCur1DayES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 13), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setReference('[TR-159] 5.5.1.48')
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayES.setDescription('A count of Errored Seconds (ES) on the GBS in the current 1-day\n       performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr1DayES.')
gBondPortPmCur1DaySES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 14), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setReference('[TR-159] 5.5.1.49')
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DaySES.setDescription('A count of Severely Errored Seconds (ES) on the GBS in the\n       current 1-day performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr1DaySES.')
gBondPortPmCur1DayUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 1, 1, 15), HCPerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setReference('[TR-159] 5.5.1.50')
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmCur1DayUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current\n       1-day performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr1DayUAS.')
gBondPortPm15MinTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2), )
if mibBuilder.loadTexts: gBondPortPm15MinTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinTable.setDescription('This table contains historical 15-minute buckets of Performance\n       Monitoring information for a GBS port (a row for each 15-minute\n       interval, up to 96 intervals).\n       Entries in this table MUST be maintained in a persistent manner.')
gBondPortPm15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "GBOND-MIB", "gBondPortPm15MinIntervalIndex"))
if mibBuilder.loadTexts: gBondPortPm15MinEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinEntry.setDescription('An entry in the G.Bond Port historical 15-minute PM table.\n       Each entry represents performance monitoring data for a GBS port,\n       indexed by ifIndex, collected during a particular 15-minute\n       interval, indexed by gBondPortPm15MinIntervalIndex.')
gBondPortPm15MinIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setReference('[TR-159] 5.5.1.57')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalIndex.setDescription('Performance Data Interval number. 1 is the most recent previous\n       interval; interval 96 is 24 hours ago.\n       Intervals 2..96 are OPTIONAL.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinIntervalNumber.')
gBondPortPm15MinIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalMoniTime.setDescription('A count of seconds over which the performance data was actually\n       monitored. This value will be the same as the interval duration\n       (900 seconds), except in a situation where performance data\n       could not be collected for any reason.')
gBondPortPm15MinIntervalES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setReference('[TR-159] 5.5.1.59')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalES.setDescription('A count of Errored Seconds (ES) on the GBS in the 15-minute\n       performance history interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinIntervalES.')
gBondPortPm15MinIntervalSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setReference('[TR-159] 5.5.1.60')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalSES.setDescription('A count of Severely Errored Seconds (ES) on the GBS in the\n       15-minute performance history interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinIntervalSES.')
gBondPortPm15MinIntervalUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setReference('[TR-159] 5.5.1.61')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current\n       15-minute performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr15MinUAS.')
gBondPortPm15MinIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setReference('[TR-159] 5.5.1.58')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm15MinIntervalValid.setDescription('A read-only object indicating whether or not this history\n       bucket contains valid data. Valid bucket is reported as true(1)\n       and invalid bucket as false(2).\n       If this history bucket is invalid the BTU-C MUST NOT produce\n       notifications based upon the value of the counters in this\n       bucket.\n       Note that an implementation may decide not to store invalid\n       history buckets in its data base. In such case this object is\n       not required as only valid history buckets are available while\n       invalid history buckets are simply not in the data base.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf15MinIntervalValid.')
gBondPortPm1DayTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3), )
if mibBuilder.loadTexts: gBondPortPm1DayTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayTable.setDescription('This table contains historical 1-day buckets of Performance\n       Monitoring information for a GBS port (a row for each 1-day\n       interval, up to 7 intervals).\n       Entries in this table MUST be maintained in a persistent manner.')
gBondPortPm1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "GBOND-MIB", "gBondPortPm1DayIntervalIndex"))
if mibBuilder.loadTexts: gBondPortPm1DayEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayEntry.setDescription('An entry in the G.Bond Port historical 1-day PM table.\n       Each entry represents performance monitoring data for a GBS port,\n       indexed by ifIndex, collected during a particular 1-day\n       interval, indexed by gBondPortPm1DayIntervalIndex.')
gBondPortPm1DayIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setReference('[TR-159] 5.5.1.62')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalIndex.setDescription('Performance Data Interval number. 1 is the most recent previous\n       interval; interval 7 is 7 days ago.\n       Intervals 2..7 are OPTIONAL.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayIntervalNumber.')
gBondPortPm1DayIntervalMoniTime = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setReference('[TR-159] 5.5.1.64')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalMoniTime.setDescription('A count of seconds over which the performance data was actually\n       monitored. This value will be the same as the interval duration\n       (86400 seconds), except in a situation where performance data\n       could not be collected for any reason.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayIntervalMoniSecs.')
gBondPortPm1DayIntervalES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setReference('[TR-159] 5.5.1.65')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalES.setDescription('A count of Errored Seconds (ES) on the GBS in the 1-day\n       performance history interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayIntervalES.')
gBondPortPm1DayIntervalSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setReference('[TR-159] 5.5.1.66')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalSES.setDescription('A count of Severely Errored Seconds (ES) on the GBS in the\n       1-day performance history interval.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayIntervalSES.')
gBondPortPm1DayIntervalUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setReference('[TR-159] 5.5.1.67')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalUAS.setDescription('A count of Unavailable Seconds (UAS) on the GBS in the current\n       1-day performance interval.\n\n       This object maps to the TR-159 attribute aGroupPerfCurr1DayUAS.')
gBondPortPm1DayIntervalValid = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setReference('[TR-159] 5.5.1.63')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setStatus('current')
if mibBuilder.loadTexts: gBondPortPm1DayIntervalValid.setDescription('A read-only object indicating whether or not this history\n       bucket contains valid data. Valid bucket is reported as true(1)\n       and invalid bucket as false(2).\n       If this history bucket is invalid the BTU-C MUST NOT produce\n       notifications based upon the value of the counters in this\n       bucket.\n       Note that an implementation may decide not to store invalid\n       history buckets in its data base. In such case this object is\n       not required as only valid history buckets are available while\n       invalid history buckets are simply not in the data base.\n\n       This object maps to the TR-159 attribute\n       aGroupPerf1DayIntervalValid.')
gBondPortPmTcaProfileTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4), )
if mibBuilder.loadTexts: gBondPortPmTcaProfileTable.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileTable.setDescription('This table supports definitions of Performance Monitoring (PM)\n       Threshold Crossing Alerts (TCA) configuration profiles for GBS\n       ports.\n       Entries in this table MUST be maintained in a persistent manner.')
gBondPortPmTcaProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1), ).setIndexNames((0, "GBOND-MIB", "gBondPortPmTcaProfileName"))
if mibBuilder.loadTexts: gBondPortPmTcaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileEntry.setDescription("An entry in the GBS PM TCA Configuration table.\n        Each entry corresponds to a single TCA configuration profile.\n        Each profile contains a set of parameters for setting alarm\n        thresholds for various performance attributes monitored at GBS\n        ports.  Profiles may be created/deleted using the row\n        creation/deletion mechanism via\n        gBondPortPmTcaProfileRowStatus. If an active entry is\n        referenced via gBondPortConfPmTcaConfProfile, the entry MUST\n        remain active until all references are removed.\n        A default profile with an index of 'DEFVAL', will always exist\n        and its parameters will be set to vendor specific values,\n        unless otherwise specified in this document.")
gBondPortPmTcaProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: gBondPortPmTcaProfileName.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileName.setDescription('This object is a unique index (name) associated with this\n       GBS PM TCA profile.')
gBondPortPmTcaProfileThresh15MinES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 2), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setReference('[TR-159] 5.5.1.39')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinES.setDescription('A desired threshold for the number of Errored Seconds (ES)\n       within any given 15-minute performance data collection interval.\n       If the number of ESs in a particular 15-minute collection\n       interval reaches or exceeds this value, a\n       gBondPmTca15MinESCrossing notification MAY be generated if\n       enabled by gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca15MinESCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold15MinES.')
gBondPortPmTcaProfileThresh15MinSES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 3), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setReference('[TR-159] 5.5.1.40')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinSES.setDescription('A desired threshold for the number of Severely Errored Seconds\n       (SES) within any given 15-minute performance data collection\n       interval.\n       If the number of SESs in a particular 15-minute collection\n       interval reaches or exceeds this value, a\n       gBondPmTca15MinSESCrossing notification MAY be generated if\n       enabled by gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca15MinSESCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold15MinSES.')
gBondPortPmTcaProfileThresh15MinUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 4), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setReference('[TR-159] 5.5.1.41')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh15MinUAS.setDescription('A desired threshold for the number of Unavailable Seconds (UAS)\n       within any given 15-minute performance data collection interval.\n       If the number of UASs in a particular 15-minute collection\n       interval reaches or exceeds this value, a\n       gBondPmTca15MinUASCrossing notification MAY be generated if\n       enabled by gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca15MinUASCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold15MinUAS.')
gBondPortPmTcaProfileThresh1DayES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 5), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setReference('[TR-159] 5.5.1.51')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayES.setDescription('A desired threshold for the number of Errored Seconds (ES)\n       within any given 1-day performance data collection interval.\n       If the number of ESs in a particular 1-day collection interval\n       reaches or exceeds this value, a gBondPmTca1DayESCrossing\n       notification MAY be generated if enabled by\n       gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca1DayESCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold1DayES.')
gBondPortPmTcaProfileThresh1DaySES = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 6), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setReference('[TR-159] 5.5.1.52')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DaySES.setDescription('A desired threshold for the number of Severely Errored Seconds\n       (SES) within any given 1-day performance data collection\n       interval.\n       If the number of SESs in a particular 1-day collection interval\n       reaches or exceeds this value, a gBondPmTca1DaySESCrossing\n       notification MAY be generated if enabled by\n       gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca1DaySESCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold1DaySES.')
gBondPortPmTcaProfileThresh1DayUAS = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 7), GBondPm1DayIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setReference('[TR-159] 5.5.1.53')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileThresh1DayUAS.setDescription('A desired threshold for the number of Unavailable Seconds (UAS)\n       within any given 1-day performance data collection interval.\n       If the number of UASs in a particular 1-day collection interval\n       reaches or exceeds this value, a gBondPmTca1DayUASCrossing\n       notification MAY be generated if enabled by\n       gBondPortConfPmTcaEnable.\n       At most one notification can be sent per interval.\n       Setting this attribute to zero (default) effectively disables\n       gBondPmTca1DayUASCrossing notification.\n\n       This object maps to the TR-159 attribute\n       aGroupPerfThreshold1DayUAS.')
gBondPortPmTcaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 1, 4, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gBondPortPmTcaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: gBondPortPmTcaProfileRowStatus.setDescription("This object controls the creation, modification, or deletion\n        of the associated entry in the gBondPortPmTcaProfileTable\n        per the semantics of RowStatus.\n\n        If an 'active' entry is referenced via\n        gBondPortConfPmTcaConfProfile instance(s), the entry MUST\n        remain 'active'.\n\n        An 'active' entry SHALL NOT be modified. In order to modify an\n        existing entry, it MUST be taken out of service (by setting\n        this object to 'notInService'), modified, and set 'active'\n        again.")
gBondBceConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 1, 2, 1), )
if mibBuilder.loadTexts: gBondBceConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfTable.setDescription('Table for Configuration of G.Bond common aspects for the\n       Bonding Channel Entity (BCE) ports (modems/channels).\n\n       Entries in this table MUST be maintained in a persistent\n       manner.')
gBondBceConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondBceConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfEntry.setDescription('An entry in the G.Bond BCE Configuration table.\n       Each entry represents common aspects of a G.Bond BCE port\n       indexed by the ifIndex. Note that a G.Bond BCE port can be\n       stacked below a single GBS port, also indexed by ifIndex,\n       possibly together with other BCE ports if GAF is enabled.')
gBondBceConfRemoteDiscoveryCode = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 1, 2, 1, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setReference('[TR-159] 5.5.6.7')
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setStatus('current')
if mibBuilder.loadTexts: gBondBceConfRemoteDiscoveryCode.setDescription('A Remote Discovery Code of the BCE port at CO.\n       A 6 octet long Discovery Code of the peer GBS connected via\n       the BCE.\n       Reading this object results in a Discovery Get operation.\n       Setting this object to all zeroes results in a Discovery\n       Clear_if_Same operation (the value of gBondPortConfDiscoveryCode\n       at the peer GBS SHALL be the same as gBondPortConfDiscoveryCode\n       of the local GBS associated with the BCE for the operation to\n       succeed).\n       Writing a non-zero value to this object results in a\n       Discovery Set_if_Clear operation.\n       A zero-length octet string SHALL be returned on an attempt to\n       read this object when GAF aggregation is not enabled.\n\n       This object is irrelevant in BCE-R port subtypes (CPE side):\n       in this case a zero length octet string SHALL be returned on\n       an attempt to read this object, an attempt to change this object\n       MUST be rejected (in case of SNMP with the error\n       inconsistentValue).\n\n       Discovery MUST be performed when the link is Down.\n       Attempts to change this object MUST be rejected (in case of\n       SNMP with the error inconsistentValue), If the link is Up or\n       Initializing.\n\n       This object maps to the TR-159 attribute\n       aLineRemoteDiscoveryCode.')
gBondGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 1))
gBondCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 2))
gBondBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 1)).setObjects(("GBOND-MIB", "gBondPortStatOperScheme"), ("GBOND-MIB", "gBondPortStatUpDataRate"), ("GBOND-MIB", "gBondPortStatDnDataRate"), ("GBOND-MIB", "gBondPortConfTargetUpDataRate"), ("GBOND-MIB", "gBondPortConfTargetDnDataRate"), ("GBOND-MIB", "gBondPortCapSchemesSupported"), ("GBOND-MIB", "gBondPortCapCapacity"), ("GBOND-MIB", "gBondPortStatNumBCEs"), ("GBOND-MIB", "gBondPortStatSide"), ("GBOND-MIB", "gBondPortStatFltStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondBasicGroup = gBondBasicGroup.setStatus('current')
if mibBuilder.loadTexts: gBondBasicGroup.setDescription('A collection of objects representing management information\n       common to all types of G.Bond ports.')
gBondDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 2)).setObjects(("GBOND-MIB", "gBondPortStatPeerOperScheme"), ("GBOND-MIB", "gBondPortCapPeerSchemesSupported"), ("GBOND-MIB", "gBondPortCapPeerCapacity"), ("GBOND-MIB", "gBondPortConfDiscoveryCode"), ("GBOND-MIB", "gBondBceConfRemoteDiscoveryCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondDiscoveryGroup = gBondDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: gBondDiscoveryGroup.setDescription('A collection of objects supporting OPTIONAL G.Bond discovery\n       in G.Bond ports.')
gBondMultiSchemeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 3)).setObjects(("GBOND-MIB", "gBondPortConfAdminScheme"), ("GBOND-MIB", "gBondPortConfPeerAdminScheme"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondMultiSchemeGroup = gBondMultiSchemeGroup.setStatus('current')
if mibBuilder.loadTexts: gBondMultiSchemeGroup.setDescription('A collection of objects providing OPTIONAL management\n       information for G.Bond ports supporting multiple bonding\n       schemes.')
gBondTcaConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 4)).setObjects(("GBOND-MIB", "gBondPortConfThreshLowUpRate"), ("GBOND-MIB", "gBondPortConfThreshLowDnRate"), ("GBOND-MIB", "gBondPortConfLowRateCrossingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondTcaConfGroup = gBondTcaConfGroup.setStatus('current')
if mibBuilder.loadTexts: gBondTcaConfGroup.setDescription('A collection of objects required for configuration of alarm\n       thresholds and notifications in G.Bond ports.')
gBondTcaNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 5)).setObjects(("GBOND-MIB", "gBondLowUpRateCrossing"), ("GBOND-MIB", "gBondLowDnRateCrossing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondTcaNotificationGroup = gBondTcaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: gBondTcaNotificationGroup.setDescription('This group supports notifications of significant conditions\n       (non-PM threshold crossing alerts) associated with G.Bond ports.')
gBondPmCurGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 6)).setObjects(("GBOND-MIB", "gBondPortPmCurES"), ("GBOND-MIB", "gBondPortPmCurSES"), ("GBOND-MIB", "gBondPortPmCurUAS"), ("GBOND-MIB", "gBondPortPmCur15MinValidIntervals"), ("GBOND-MIB", "gBondPortPmCur15MinInvalidIntervals"), ("GBOND-MIB", "gBondPortPmCur15MinTimeElapsed"), ("GBOND-MIB", "gBondPortPmCur15MinES"), ("GBOND-MIB", "gBondPortPmCur15MinSES"), ("GBOND-MIB", "gBondPortPmCur15MinUAS"), ("GBOND-MIB", "gBondPortPmCur1DayValidIntervals"), ("GBOND-MIB", "gBondPortPmCur1DayInvalidIntervals"), ("GBOND-MIB", "gBondPortPmCur1DayTimeElapsed"), ("GBOND-MIB", "gBondPortPmCur1DayES"), ("GBOND-MIB", "gBondPortPmCur1DaySES"), ("GBOND-MIB", "gBondPortPmCur1DayUAS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmCurGroup = gBondPmCurGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmCurGroup.setDescription('A collection of objects supporting OPTIONAL current Performance\n       Monitoring information for G.Bond ports.')
gBondPm15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 7)).setObjects(("GBOND-MIB", "gBondPortPm15MinIntervalMoniTime"), ("GBOND-MIB", "gBondPortPm15MinIntervalES"), ("GBOND-MIB", "gBondPortPm15MinIntervalSES"), ("GBOND-MIB", "gBondPortPm15MinIntervalUAS"), ("GBOND-MIB", "gBondPortPm15MinIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPm15MinGroup = gBondPm15MinGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPm15MinGroup.setDescription('A collection of objects supporting OPTIONAL historical\n       Performance Monitoring information for G.Bond ports, during\n       previous 15-minute intervals .')
gBondPm1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 8)).setObjects(("GBOND-MIB", "gBondPortPm1DayIntervalMoniTime"), ("GBOND-MIB", "gBondPortPm1DayIntervalES"), ("GBOND-MIB", "gBondPortPm1DayIntervalSES"), ("GBOND-MIB", "gBondPortPm1DayIntervalUAS"), ("GBOND-MIB", "gBondPortPm1DayIntervalValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPm1DayGroup = gBondPm1DayGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPm1DayGroup.setDescription('A collection of objects supporting OPTIONAL historical\n       Performance Monitoring information for G.Bond ports, during\n       previous 1-day intervals .')
gBondPmTcaConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 9)).setObjects(("GBOND-MIB", "gBondPortConfPmTcaConfProfile"), ("GBOND-MIB", "gBondPortConfPmTcaEnable"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinSES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh15MinUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DaySES"), ("GBOND-MIB", "gBondPortPmTcaProfileThresh1DayUAS"), ("GBOND-MIB", "gBondPortPmTcaProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmTcaConfGroup = gBondPmTcaConfGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmTcaConfGroup.setDescription('A collection of objects required for configuration of\n       Performance Monitoring Threshold Crossing Alert notifications\n       in G.Bond ports.')
gBondPmTcaNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 211, 2, 1, 10)).setObjects(("GBOND-MIB", "gBondPmTca15MinESCrossing"), ("GBOND-MIB", "gBondPmTca15MinSESCrossing"), ("GBOND-MIB", "gBondPmTca15MinUASCrossing"), ("GBOND-MIB", "gBondPmTca1DayESCrossing"), ("GBOND-MIB", "gBondPmTca1DaySESCrossing"), ("GBOND-MIB", "gBondPmTca1DayUASCrossing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondPmTcaNotificationGroup = gBondPmTcaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: gBondPmTcaNotificationGroup.setDescription('This group supports notifications of performance monitoring\n       thresholds crossing alerts associated with G.Bond ports.')
gBondCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 211, 2, 2, 1)).setObjects(("GBOND-MIB", "gBondBasicGroup"), ("GBOND-MIB", "gBondTcaConfGroup"), ("GBOND-MIB", "gBondTcaNotificationGroup"), ("GBOND-MIB", "gBondDiscoveryGroup"), ("GBOND-MIB", "gBondMultiSchemeGroup"), ("GBOND-MIB", "gBondPmCurGroup"), ("GBOND-MIB", "gBondPm15MinGroup"), ("GBOND-MIB", "gBondPm1DayGroup"), ("GBOND-MIB", "gBondPmTcaConfGroup"), ("GBOND-MIB", "gBondPmTcaNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondCompliance = gBondCompliance.setStatus('current')
if mibBuilder.loadTexts: gBondCompliance.setDescription('The compliance statement for G.Bond interfaces.\n       Compliance with the following external compliance statements\n       is REQUIRED:\n\n       MIB Module             Compliance Statement\n       ----------             --------------------\n       IF-MIB                 ifCompliance3\n\n       Compliance with the following external compliance statements\n       is OPTIONAL for implementations supporting bonding with\n       flexible cross-connect between the GBS and BCE ports:\n\n       MIB Module             Compliance Statement\n       ----------             --------------------\n       IF-INVERTED-STACK-MIB  ifInvCompliance\n       IF-CAP-STACK-MIB       ifCapStackCompliance')
mibBuilder.exportSymbols("GBOND-MIB", gBondPortPm1DayTable=gBondPortPm1DayTable, gBondDiscoveryGroup=gBondDiscoveryGroup, gBondPmTca15MinUASCrossing=gBondPmTca15MinUASCrossing, gBondPmTca15MinSESCrossing=gBondPmTca15MinSESCrossing, gBondPortPmTcaProfileThresh15MinSES=gBondPortPmTcaProfileThresh15MinSES, gBondPortPmTcaProfileThresh1DayUAS=gBondPortPmTcaProfileThresh1DayUAS, gBondPortPM=gBondPortPM, gBondPortStatEntry=gBondPortStatEntry, gBondPortPm1DayIntervalValid=gBondPortPm1DayIntervalValid, gBondPortPmCurEntry=gBondPortPmCurEntry, gBondPortPmCur15MinSES=gBondPortPmCur15MinSES, gBondPmTca1DaySESCrossing=gBondPmTca1DaySESCrossing, gBondPortPmTcaProfileThresh1DaySES=gBondPortPmTcaProfileThresh1DaySES, gBondPortConfTargetUpDataRate=gBondPortConfTargetUpDataRate, gBondConformance=gBondConformance, gBondPortPm1DayIntervalUAS=gBondPortPm1DayIntervalUAS, gBondPortCapCapacity=gBondPortCapCapacity, gBondPortStatTable=gBondPortStatTable, gBondPortPm15MinIntervalValid=gBondPortPm15MinIntervalValid, GBondSchemeList=GBondSchemeList, gBondPortPmTcaProfileName=gBondPortPmTcaProfileName, gBondPortStatUpDataRate=gBondPortStatUpDataRate, gBondPmTcaNotificationGroup=gBondPmTcaNotificationGroup, gBondPortPmTcaProfileRowStatus=gBondPortPmTcaProfileRowStatus, gBondPortCapPeerCapacity=gBondPortCapPeerCapacity, gBondPortPmTcaProfileTable=gBondPortPmTcaProfileTable, gBondPortPmCur15MinValidIntervals=gBondPortPmCur15MinValidIntervals, gBondPortStatOperScheme=gBondPortStatOperScheme, gBondPortPm15MinIntervalUAS=gBondPortPm15MinIntervalUAS, gBondPortStatNumBCEs=gBondPortStatNumBCEs, gBondBceConfRemoteDiscoveryCode=gBondBceConfRemoteDiscoveryCode, gBondPortPm1DayIntervalMoniTime=gBondPortPm1DayIntervalMoniTime, gBondPortPmCur1DayTimeElapsed=gBondPortPmCur1DayTimeElapsed, gBondPortPmCurTable=gBondPortPmCurTable, gBondPortPm15MinIntervalIndex=gBondPortPm15MinIntervalIndex, gBondPm1DayGroup=gBondPm1DayGroup, PYSNMP_MODULE_ID=gBondMIB, gBondPort=gBondPort, gBondPortPmCur1DayUAS=gBondPortPmCur1DayUAS, gBondMultiSchemeGroup=gBondMultiSchemeGroup, gBondPortConfEntry=gBondPortConfEntry, gBondPortPmCur15MinUAS=gBondPortPmCur15MinUAS, gBondPortNotifications=gBondPortNotifications, gBondPortPmCurUAS=gBondPortPmCurUAS, gBondPmTca1DayESCrossing=gBondPmTca1DayESCrossing, gBondTcaNotificationGroup=gBondTcaNotificationGroup, gBondBasicGroup=gBondBasicGroup, GBondPm1DayIntervalThreshold=GBondPm1DayIntervalThreshold, gBondPortConfPeerAdminScheme=gBondPortConfPeerAdminScheme, gBondPortPmCurES=gBondPortPmCurES, gBondPortConfAdminScheme=gBondPortConfAdminScheme, gBondBceConfTable=gBondBceConfTable, gBondPortPmCur1DayInvalidIntervals=gBondPortPmCur1DayInvalidIntervals, gBondBce=gBondBce, gBondPortPm15MinTable=gBondPortPm15MinTable, gBondPortPmCur1DaySES=gBondPortPmCur1DaySES, gBondObjects=gBondObjects, gBondPortStatDnDataRate=gBondPortStatDnDataRate, gBondPmCurGroup=gBondPmCurGroup, gBondPortCapEntry=gBondPortCapEntry, gBondPortPm15MinEntry=gBondPortPm15MinEntry, gBondPortStatFltStatus=gBondPortStatFltStatus, gBondTcaConfGroup=gBondTcaConfGroup, gBondPortPmCur1DayES=gBondPortPmCur1DayES, gBondPortCapPeerSchemesSupported=gBondPortCapPeerSchemesSupported, gBondPortPm1DayEntry=gBondPortPm1DayEntry, gBondPortPm1DayIntervalES=gBondPortPm1DayIntervalES, gBondGroups=gBondGroups, gBondPortPmCur1DayValidIntervals=gBondPortPmCur1DayValidIntervals, gBondPortCapTable=gBondPortCapTable, gBondPortCapSchemesSupported=gBondPortCapSchemesSupported, gBondPm15MinGroup=gBondPm15MinGroup, gBondPortConfDiscoveryCode=gBondPortConfDiscoveryCode, gBondPortPmCur15MinTimeElapsed=gBondPortPmCur15MinTimeElapsed, gBondMIB=gBondMIB, gBondLowDnRateCrossing=gBondLowDnRateCrossing, gBondPortConfLowRateCrossingEnable=gBondPortConfLowRateCrossingEnable, gBondPortPmTcaProfileThresh15MinUAS=gBondPortPmTcaProfileThresh15MinUAS, gBondPortConfPmTcaEnable=gBondPortConfPmTcaEnable, gBondPortPmTcaProfileThresh15MinES=gBondPortPmTcaProfileThresh15MinES, gBondPortPmCur15MinES=gBondPortPmCur15MinES, gBondPortStatPeerOperScheme=gBondPortStatPeerOperScheme, gBondPmTca1DayUASCrossing=gBondPmTca1DayUASCrossing, gBondBceConfEntry=gBondBceConfEntry, gBondCompliance=gBondCompliance, gBondPortConfThreshLowDnRate=gBondPortConfThreshLowDnRate, gBondPortConfTargetDnDataRate=gBondPortConfTargetDnDataRate, gBondPortConfTable=gBondPortConfTable, gBondPortPmTcaProfileEntry=gBondPortPmTcaProfileEntry, gBondPortPm15MinIntervalSES=gBondPortPm15MinIntervalSES, gBondPortPm1DayIntervalSES=gBondPortPm1DayIntervalSES, gBondPortPmCurSES=gBondPortPmCurSES, gBondPortPmTcaProfileThresh1DayES=gBondPortPmTcaProfileThresh1DayES, gBondCompliances=gBondCompliances, gBondPortConfThreshLowUpRate=gBondPortConfThreshLowUpRate, gBondPortPmCur15MinInvalidIntervals=gBondPortPmCur15MinInvalidIntervals, gBondPortPm15MinIntervalMoniTime=gBondPortPm15MinIntervalMoniTime, gBondPortPm15MinIntervalES=gBondPortPm15MinIntervalES, gBondPmTcaConfGroup=gBondPmTcaConfGroup, gBondPmTca15MinESCrossing=gBondPmTca15MinESCrossing, GBondScheme=GBondScheme, gBondPortConfPmTcaConfProfile=gBondPortConfPmTcaConfProfile, gBondPortPm1DayIntervalIndex=gBondPortPm1DayIntervalIndex, gBondPortStatSide=gBondPortStatSide, gBondLowUpRateCrossing=gBondLowUpRateCrossing)
