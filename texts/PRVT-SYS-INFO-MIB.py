#
# PySNMP MIB module PRVT-SYS-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SYS-INFO-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 14:34:15 2021
# On host fv-az39-900 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ipSwitch, prvt_products = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch", "prvt-products")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Bits, Gauge32, iso, TimeTicks, IpAddress, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Bits", "Gauge32", "iso", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
prvtSysInfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 111, 2))
prvtSysInfMib.setRevisions(('2008-01-01 00:00', '2005-10-05 00:00', '2005-02-16 00:00', '2003-12-09 00:00', '2003-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSysInfMib.setRevisionsDescriptions(('Removed redefined OIDs in private vendor extension definitions.', 'Added new value task-pend(5) for taskStatus.', 'Fixed spelling errors and changed the contact info.', 'Add new notification taskSuspended.', 'Initial version.',))
if mibBuilder.loadTexts: prvtSysInfMib.setLastUpdated('200801010000Z')
if mibBuilder.loadTexts: prvtSysInfMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSysInfMib.setContactInfo('BATM/Telco Systems Support team\n\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSysInfMib.setDescription('Information for system resources')
software = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111))
prvtSysInfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 0))
prvtSysInfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1))
prvtSysInfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2))
sysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1))
sysTask = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2))
numBytesFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesFree.setStatus('current')
if mibBuilder.loadTexts: numBytesFree.setDescription(' The number of bytes free in the system memory ')
numBlocksFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksFree.setStatus('current')
if mibBuilder.loadTexts: numBlocksFree.setDescription(' The number of blocks free in the system memory ')
avgBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeFree.setStatus('current')
if mibBuilder.loadTexts: avgBlockSizeFree.setDescription(' The average block size that is free in the system memory ')
maxBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockSizeFree.setStatus('current')
if mibBuilder.loadTexts: maxBlockSizeFree.setDescription(' The largest block size that is free in the memory ')
numBytesAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesAlloc.setStatus('current')
if mibBuilder.loadTexts: numBytesAlloc.setDescription(' The number of bytes of system memory that have been allocated by\n                  tasks and system services ')
numBlocksAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksAlloc.setStatus('current')
if mibBuilder.loadTexts: numBlocksAlloc.setDescription(' The number of blocks of system memory that have been allocated in\n                  the system ')
avgBlockSizeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeAlloc.setStatus('current')
if mibBuilder.loadTexts: avgBlockSizeAlloc.setDescription(' The average memory block size that has been allocated in the\n                system ')
taskTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1), )
if mibBuilder.loadTexts: taskTable.setStatus('current')
if mibBuilder.loadTexts: taskTable.setDescription('Represents the OS task table. Each entry in this table\n                 represents a task')
taskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SYS-INFO-MIB", "taskId"))
if mibBuilder.loadTexts: taskEntry.setStatus('current')
if mibBuilder.loadTexts: taskEntry.setDescription(' Each entry contains information with regards to a task in the\n                system ')
taskId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskId.setStatus('current')
if mibBuilder.loadTexts: taskId.setDescription(' This is the task ID assigned by OS to a task in the\n                  system.')
taskName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskName.setStatus('current')
if mibBuilder.loadTexts: taskName.setDescription(' This is the name of the task.')
taskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskPriority.setStatus('current')
if mibBuilder.loadTexts: taskPriority.setDescription('The priority of the task.  This value can be\n                 in the range from 0, the highest priority,\n                 to 255, the lowest priority.')
taskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("task-ready", 1), ("task-suspended", 2), ("task-delay", 3), ("task-deleted", 4), ("task-pend", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStatus.setStatus('current')
if mibBuilder.loadTexts: taskStatus.setDescription('This field specifies the current task status.')
taskOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("task-supervisor-mode", 0), ("task-unbreakable", 1), ("task-dealloc-stack", 2), ("task-fp-task", 3), ("task-stdio", 4), ("task-reserved-1", 5), ("task-reserved-2", 6), ("task-private-env", 7), ("task-no-stack-fill", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskOptions.setStatus('current')
if mibBuilder.loadTexts: taskOptions.setDescription('The option is toggled based on the current setting.')
taskMain = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskMain.setStatus('current')
if mibBuilder.loadTexts: taskMain.setDescription('This is the name of the entry function for the task.')
taskStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPtr.setStatus('current')
if mibBuilder.loadTexts: taskStackPtr.setDescription('This is the saved stack pointer for the task.')
taskStackBase = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackBase.setStatus('current')
if mibBuilder.loadTexts: taskStackBase.setDescription('This is the address of the bottom of the stack for the task.')
taskStackPos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPos.setStatus('current')
if mibBuilder.loadTexts: taskStackPos.setDescription('This is the effective top of the stack in the current task state.')
taskStackEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackEnd.setStatus('current')
if mibBuilder.loadTexts: taskStackEnd.setDescription('This is the address of the top of the stack for the task.')
taskStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSize.setStatus('current')
if mibBuilder.loadTexts: taskStackSize.setDescription('This is the actual size of the stack in bytes.')
taskStackSizeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSizeUsage.setStatus('current')
if mibBuilder.loadTexts: taskStackSizeUsage.setDescription('The number of bytes currently in use by the task from the stack.')
taskStackMaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackMaxUsed.setStatus('current')
if mibBuilder.loadTexts: taskStackMaxUsed.setDescription('This is the maximum number of bytes that have been used by the task \n                from the stack.')
taskStackFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackFree.setStatus('current')
if mibBuilder.loadTexts: taskStackFree.setDescription('This is the number of bytes that are free currently in the task stack.')
taskErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskErrorStatus.setStatus('current')
if mibBuilder.loadTexts: taskErrorStatus.setDescription('This is the most recent error status for this task.')
taskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 0, 1)).setObjects(("PRVT-SYS-INFO-MIB", "taskName"), ("PRVT-SYS-INFO-MIB", "taskId"))
if mibBuilder.loadTexts: taskSuspended.setStatus('current')
if mibBuilder.loadTexts: taskSuspended.setDescription('The taskSuspended notification indicates that the sending\n\t\t\t agent senses that a task has been suspended.')
sysInfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2, 2))
sysInfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 111, 2, 2, 2, 3)).setObjects(("PRVT-SYS-INFO-MIB", "taskSuspended"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysInfNotificationGroup = sysInfNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: sysInfNotificationGroup.setDescription('Private system info Notification Group')
mibBuilder.exportSymbols("PRVT-SYS-INFO-MIB", software=software, taskPriority=taskPriority, PYSNMP_MODULE_ID=prvtSysInfMib, taskName=taskName, taskStatus=taskStatus, taskId=taskId, taskEntry=taskEntry, taskOptions=taskOptions, sysMemory=sysMemory, taskTable=taskTable, taskSuspended=taskSuspended, maxBlockSizeFree=maxBlockSizeFree, prvtSysInfNotifications=prvtSysInfNotifications, prvtSysInfMib=prvtSysInfMib, numBytesFree=numBytesFree, taskStackMaxUsed=taskStackMaxUsed, taskStackPtr=taskStackPtr, avgBlockSizeFree=avgBlockSizeFree, taskStackEnd=taskStackEnd, sysTask=sysTask, taskStackBase=taskStackBase, taskStackPos=taskStackPos, numBlocksAlloc=numBlocksAlloc, sysInfNotificationGroup=sysInfNotificationGroup, avgBlockSizeAlloc=avgBlockSizeAlloc, taskErrorStatus=taskErrorStatus, prvtSysInfObjects=prvtSysInfObjects, sysInfMIBGroups=sysInfMIBGroups, prvtSysInfConformance=prvtSysInfConformance, taskStackSizeUsage=taskStackSizeUsage, numBytesAlloc=numBytesAlloc, numBlocksFree=numBlocksFree, taskStackFree=taskStackFree, taskMain=taskMain, taskStackSize=taskStackSize)
