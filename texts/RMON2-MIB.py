#
# PySNMP MIB module RMON2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RMON2-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:15:23 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
filter, hosts, statistics, channelEntry, filterEntry, history, historyControlEntry, hostControlEntry, matrixControlEntry, etherStatsEntry, OwnerString, matrix = mibBuilder.importSymbols("RMON-MIB", "filter", "hosts", "statistics", "channelEntry", "filterEntry", "history", "historyControlEntry", "hostControlEntry", "matrixControlEntry", "etherStatsEntry", "OwnerString", "matrix")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, Counter64, TimeTicks, ObjectIdentity, MibIdentifier, iso, Integer32, ModuleIdentity, NotificationType, Unsigned32, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Counter64", "TimeTicks", "ObjectIdentity", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "NotificationType", "Unsigned32", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2")
DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
ringStationControlEntry, tokenRingMLStatsEntry, tokenRing, sourceRoutingStatsEntry, tokenRingPStatsEntry = mibBuilder.importSymbols("TOKEN-RING-RMON-MIB", "ringStationControlEntry", "tokenRingMLStatsEntry", "tokenRing", "sourceRoutingStatsEntry", "tokenRingPStatsEntry")
rmon = ModuleIdentity((1, 3, 6, 1, 2, 1, 16))
rmon.setRevisions(('2006-05-02 00:00', '2002-07-08 00:00', '1996-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rmon.setRevisionsDescriptions(("This version updates the proposed-standard version of the\n        RMON2 MIB (published as RFC 2021) by adding 2 new\n        enumerations to the nlMatrixTopNControlRateBase object and\n        4 new enumerations to the alMatrixTopNControlRateBase object.\n        These new enumerations support the creation of high-capacity\n        topN reports in the High Capacity RMON MIB [RFC3273].\n\n        Additionally, the following objects have been deprecated, as\n        they have not had enough independent implementations to\n        demonstrate interoperability to meet the requirements of a\n        Draft Standard:\n\n        probeDownloadFile\n        probeDownloadTFTPServer\n        probeDownloadAction\n        probeDownloadStatus\n\n\n\n        serialMode\n        serialProtocol\n        serialTimeout\n        serialModemInitString\n        serialModemHangUpString\n        serialModemConnectResp\n        serialModemNoConnectResp\n        serialDialoutTimeout\n        serialStatus\n        serialConnectDestIpAddress\n        serialConnectType\n        serialConnectDialString\n        serialConnectSwitchConnectSeq\n        serialConnectSwitchDisconnectSeq\n        serialConnectSwitchResetSeq\n        serialConnectOwner\n        serialConnectStatus\n        netConfigIPAddress\n        netConfigSubnetMask\n        netConfigStatus\n        netDefaultGateway\n        tokenRingMLStats2DroppedFrames\n        tokenRingMLStats2CreateTime\n        tokenRingPStats2DroppedFrames\n        tokenRingPStats2CreateTime\n        ringStationControl2DroppedFrames\n        ringStationControl2CreateTime\n        sourceRoutingStats2DroppedFrames\n        sourceRoutingStats2CreateTime\n        trapDestIndex\n        trapDestCommunity\n        trapDestProtocol\n        trapDestAddress\n        trapDestOwner\n        trapDestStatus\n\n        In addition, two corrections were made.  The LastCreateTime\n        Textual Convention had been defined with a base type of\n        another textual convention, which isn't allowed in SMIv2.  The\n        definition has been modified to use TimeTicks as the base\n        type.\n\n        Further, the SerialConfigEntry SEQUENCE definition included\n        sub-typing information that is not allowed in SMIv2.  This\n        information has been deleted.  Ranges were added to a number of\n        objects and textual-conventions to constrain their maximum\n        (and sometimes minimum) sizes.  The addition of these ranges\n        documents existing practice for these objects.  These objects\n\n\n\n        are:\n            ControlString\n            protocolDirID\n            protocolDirParameters\n            addressMapNetworkAddress\n            nlHostAddress\n            nlMatrixSDSourceAddress\n            nlMatrixSDDestAddress\n            nlMatrixDSSourceAddress\n            nlMatrixDSDestAddress\n            nlMatrixTopNSourceAddress\n            nlMatrixTopNDestAddress\n            alHostEntry\n            alMatrixSDEntry\n            alMatrixDSEntry\n            alMatrixTopNSourceAddress\n            alMatrixTopNDestAddress\n\n        Finally, the TimeFilter TC has been updated to encourage agent\n        implementations that allow a MIB walk to behave well even when\n        performed by an application that is not aware of the special\n        TimeFilter semantics.", 'Added new enumerations to support the High-Capacity RMON\n        MIB as defined in RFC 3273.  Also fixed some typos and\n        added clarifications.', 'Original version.  Published as RFC 2021.',))
if mibBuilder.loadTexts: rmon.setLastUpdated('200605020000Z')
if mibBuilder.loadTexts: rmon.setOrganization('IETF RMON MIB Working Group')
if mibBuilder.loadTexts: rmon.setContactInfo('Author:\n                     Steve Waldbusser\n             Phone:  +1-650-948-6500\n             Fax :   +1-650-745-0671\n             Email:  waldbusser@nextbeacon.com\n\n         Working Group Chair:\n                     Andy Bierman\n             E-mail: ietf@andybierman.com\n\n         Working Group Mailing List: <rmonmib@ietf.org>\n         To subscribe send email to: <rmonmib-request@ietf.org>    ')
if mibBuilder.loadTexts: rmon.setDescription('The MIB module for managing remote monitoring\n         device implementations.  This MIB module\n         extends the architecture introduced in the original\n         RMON MIB as specified in RFC 2819.\n\n         Copyright (C) The Internet Society (2006).  This version of\n         this MIB module is part of RFC 4502;  see the RFC itself for\n         full legal notices.')
protocolDir = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 11))
protocolDist = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 12))
addressMap = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 13))
nlHost = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 14))
nlMatrix = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 15))
alHost = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 16))
alMatrix = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 17))
usrHistory = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 18))
probeConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 19))
rmonConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20))
class ZeroBasedCounter32(TextualConvention, Gauge32):
    description = 'This TC describes an object that counts events with the\n        following semantics: objects of this type will be set to\n        zero(0) on creation and will thereafter count appropriate\n        events, wrapping back to zero(0) when the value 2^32 is\n        reached.\n\n        Provided that an application discovers the new object within\n        the minimum time to wrap, it can use the initial value as a\n        delta since it last polled the table of which this object is\n        part.  It is important for a management station to be aware of\n        this minimum time and the actual time between polls, and to\n        discard data if the actual time is too long or there is no\n        defined minimum time.\n\n        Typically, this TC is used in tables where the INDEX space is\n        constantly changing and/or the TimeFilter mechanism is in use.'
    status = 'current'

class LastCreateTime(TextualConvention, TimeTicks):
    description = 'This TC describes an object that stores the value of the\n        sysUpTime object at the last time its entry was created.\n\n        This can be used for polling applications to determine that an\n        entry has been deleted and re-created between polls, causing\n        an otherwise undetectable discontinuity in the data.\n\n        If sysUpTime is reset to zero as a result of a re-\n        initialization of the network management (sub)system, then\n        the values of all LastCreateTime objects are also reset.\n        However, after approximately 497 days without a re-\n        initialization, the sysUpTime object will reach 2^^32-1 and\n        then increment to zero; in this case, existing values\n        of TimeStamp objects do not change.  This can lead to\n        ambiguities in the value of TimeStamp objects.'
    status = 'current'

class TimeFilter(TextualConvention, TimeTicks):
    description = "To be used for the index to a table.  Allows an application\n      to download only those rows changed since a particular time.\n\n\n\n      Note that this is not a history mechanism.  Only current values\n      of underlying objects are returned; saved instance values\n      associated with particular values of sysUpTime are not.\n\n      An entry is considered changed if the value of any object in the\n      entry changes, if the row is created, or if any object in the\n      entry is created or deleted.  Note that deleted entries cannot\n      be detected or downloaded.\n\n      A time-filtered conceptual table is created by inserting a\n      single object of SYNTAX TimeFilter as the first INDEX component\n      in a copy of an existing basic conceptual table (i.e., any\n      SEQUENCE without a TimeFilter INDEX component).  Thus, for\n      each conceptual entry 'I' in the basic table, there exists N\n      conceptual entries in the time-filtered version, indexed N.I,\n      where 'N' is equal to the value of sysUpTime.\n\n      When an application retrieves conceptual instances from a\n      time-filtered table, and an INDEX value is provided for the\n      TimeFilter INDEX component 'N', the agent will only consider\n      returning basic conceptual entries (e.g., 'fooColumn.N.I') if\n      any column within the basic conceptual entry has changed since\n      sysUpTime 'N'.  If not, the basic conceptual entry will\n      be ignored for the particular retrieval operation.\n\n      When sysUpTime is equal to zero, this table shall be empty.\n\n      One conceptual entry exists for each past value of sysUpTime,\n      except that the whole table is purged should sysUpTime wrap.\n\n      As an entry in a time-filtered table is updated (i.e., one of\n      the columns in the basic conceptual table is changed), new\n      conceptual entries are also created in the time-filtered version\n      (which still shares the now updated object values with all other\n      instances).  The number of unique time-filtered instances that\n      are created is determined by the value of sysUpTime at which the\n      basic entry was last updated.  One unique instance will exist\n      for each value of sysUpTime at the last update time for the row.\n      However, a new TimeFilter index instance is created for each new\n      sysUpTime value.  The TimeFilter index values not associated\n      with entry updates are called duplicate time-filtered instances.\n\n      After some deployment experience, it has been determined that\n      a time-filtered table is more efficient if the agent\n      stops a MIB walk operation by skipping over rows with a\n      TimeFilter index value higher than the value in the received\n      GetNext/GetBulk request.  That is, instead of incrementing a\n      TimeFilter index value, the agent will continue to the next\n\n\n\n      object or table.  As a consequence, GetNext or GetBulk\n      operations will provide only one pass through a time-filtered\n      table.\n\n      It is suggested that an agent implement a time-filtered table\n      in this manner to improve performance and avoid a MIB walk\n      getting stuck in time-filtered tables.  It is, however, still\n      acceptable for an agent to implement a time-filtered table in\n      the traditional manner (i.e., every conceptual time-filtered\n      instance is returned in GetNext and GetBulk PDU responses), and\n      management applications must be able to deal with such\n      traditional implementations.\n\n      See the appendix for further discussion of this textual\n      convention.\n\n      The following example is provided to demonstrate TimeFilter\n      behavior:\n\n      Consider the following basic conceptual table, basicFooTable.\n      (Note that the basic version of a time-filtered table may not\n      actually be defined.)\n\n          basicFooTable:\n\n          basicFooTable ...\n          INDEX { fooIndex }\n\n          BasicFooEntry {\n             fooIndex     Integer32,\n             fooCounts    Counter32\n          }\n\n      For this example, the basicFooTable contains two static\n      conceptual entries (fooIndex equals '1' and '2'), created at\n      time zero.  It also contains one dynamic conceptual entry\n      (fooIndex equals '3'), which is created at time '3' and deleted\n      at time '7'.\n\n      The time-filtered version of the basicFooTable could be defined\n      as follows:\n\n          FooTable:\n\n          fooTable ...\n          INDEX { fooTimeMark, fooIndex }\n\n          FooEntry {\n\n\n\n             fooTimeMark  TimeFilter,\n             fooIndex     Integer32,\n             fooCounts    Counter32\n          }\n\n\n      Note that entries exist in the time-filtered conceptual table\n      only if they actually exist in the underlying (basic) table.\n\n      For this example, the fooTable will have three underlying\n      basic entries (fooIndex == 1, 2, and 3), with the following\n      activity (for sysUpTime equal 0 to 9):\n\n         - fooEntry.N.1 is created at time '0' and most recently\n           updated at time '6' to the value '5'.\n         - fooEntry.N.2 is created at time '0' and most recently\n           updated at time '8' to the value '9'.\n         - fooEntry.N.3 is created at time '3', updated at time '5'\n           to the value '17', and deleted at time '7'.\n\n     The following tables show the values that would be returned for\n     MIB walk operations with various TimeFilter values, done at\n     different times.  An application issues a retrieval request at\n     time 'T', with a TimeFilter value, 'N' (typically set to a lower\n     value, such as the value of sysUpTime at the last polling cycle).\n\n     The following values would be returned in a MIB walk of\n     fooCounts.N if T equals '0' and N equals '0':\n\n           fooCounts.N.I    Value\n           ==========================\n           fooCounts.0.1    0\n           fooCounts.0.2    0\n\n       Note that nothing is returned for fooCounts.0.3, since that\n       entry does not exist at sysUpTime equals '0'.\n\n     The following values would be returned in a full (traditional) MIB\n     walk of fooCounts.N if T equals '3' and N equals '0':\n\n           fooCounts.N.I    Value\n           =======================\n           fooCounts.0.1    0\n           fooCounts.0.2    0\n           fooCounts.0.3    0\n           fooCounts.1.3    0\n           fooCounts.2.3    0\n           fooCounts.3.3    0\n\n\n\n       Note that there are no instances for T equals 1 or 2 for the\n       first two values of N, as these entries did not change\n       since they were created at time '0'.\n\n       Note that the current value for 'fooCounts.N.3' is returned\n       here, even for values of N less than '3' (when the entry was\n       created).  The agent only considers the current existence of an\n       entry in the TimeFilter algorithm, not the time when the entry\n       was created.\n\n       Note that the instances 'fooCounts.0.3', 'fooCounts.1.3',\n       and 'fooCounts.2.3' are duplicates and can be suppressed by the\n       agent in a MIB walk.\n\n     The following values would be returned in a full (traditional)\n     MIB walk of fooCounts.N if T equals '6' and N equals '3':\n\n           fooCounts.N.I    Value\n           =======================\n           fooCounts.3.1    5\n           fooCounts.3.3    17\n           fooCounts.4.1    5\n           fooCounts.4.3    17\n           fooCounts.5.1    5\n           fooCounts.5.3    17\n           fooCounts.6.1    5\n\n        Note that no instances for entry 'fooCounts.N.2' are returned,\n        since it has not changed since time '3'.\n\n        Note that all instances except 'fooCounts.5.3' and\n        'fooCounts.6.1' are duplicates and can be suppressed by the\n        agent in a MIB walk.\n\n     The following values would be returned in a full (traditional)\n     MIB walk of fooCounts.N if T equals '9' and N equals '6':\n\n           fooCounts.N.I    Value\n           =======================\n           fooCounts.6.1    5\n           fooCounts.6.2    9\n           fooCounts.7.2    9\n           fooCounts.8.2    9\n\n        Note that no instances for entry 'fooCounts.N.3' are returned,\n        since it was deleted at time '7'.\n\n        Note that instances 'fooCounts.6.2' and 'fooCounts.7.2'\n\n\n\n        are duplicates and can be suppressed by the agent in a MIB\n        walk."
    status = 'current'

class DataSource(TextualConvention, ObjectIdentifier):
    description = 'Identifies the source of the data that the associated\n        function is configured to analyze.  This source can be any\n        interface on this device.\n\n        In order to identify a particular interface, this\n        object shall identify the instance of the ifIndex\n        object, defined in [RFC2863], for the desired interface.\n\n        For example, if an entry were to receive data from\n        interface #1, this object would be set to ifIndex.1.'
    status = 'current'

protocolDirLastChange = MibScalar((1, 3, 6, 1, 2, 1, 16, 11, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDirLastChange.setStatus('current')
if mibBuilder.loadTexts: protocolDirLastChange.setDescription('The value of sysUpTime at the time the protocol directory\n        was last modified, either through insertions or deletions,\n        or through modifications of the\n        protocolDirAddressMapConfig, protocolDirHostConfig, or\n        protocolDirMatrixConfig.')
protocolDirTable = MibTable((1, 3, 6, 1, 2, 1, 16, 11, 2), )
if mibBuilder.loadTexts: protocolDirTable.setStatus('current')
if mibBuilder.loadTexts: protocolDirTable.setDescription("This table lists the protocols that this agent has the\n        capability to decode and count.  There is one entry in this\n        table for each such protocol.  These protocols represent\n        different network-layer, transport-layer, and higher-layer\n\n\n\n        protocols.  The agent should boot up with this table\n        preconfigured with those protocols that it knows about and\n        wishes to monitor.  Implementations are strongly encouraged to\n        support protocols higher than the network layer (at least for\n        the protocol distribution group), even for implementations\n        that don't support the application-layer groups.")
protocolDirEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 11, 2, 1), ).setIndexNames((0, "RMON2-MIB", "protocolDirID"), (0, "RMON2-MIB", "protocolDirParameters"))
if mibBuilder.loadTexts: protocolDirEntry.setStatus('current')
if mibBuilder.loadTexts: protocolDirEntry.setDescription('A conceptual row in the protocolDirTable.\n\n         An example of the indexing of this entry is\n         protocolDirLocalIndex.8.0.0.0.1.0.0.8.0.2.0.0, which is the\n         encoding of a length of 8, followed by 8 subids encoding the\n         protocolDirID of 1.2048, followed by a length of 2 and the\n         2 subids encoding zero-valued parameters.\n\n         Note that some combinations of index values may result in an\n         index that exceeds 128 sub-identifiers in length, which exceeds\n         the maximum for the SNMP protocol.  Implementations should take\n         care to avoid such combinations.')
protocolDirID = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 128)))
if mibBuilder.loadTexts: protocolDirID.setStatus('current')
if mibBuilder.loadTexts: protocolDirID.setDescription("A unique identifier for a particular protocol.  Standard\n        identifiers will be defined in such a manner that they\n\n\n\n        can often be used as specifications for new protocols - i.e.,\n        a tree-structured assignment mechanism that matches the\n        protocol encapsulation 'tree' and that has algorithmic\n        assignment mechanisms for certain subtrees.  See RFC 2074 for\n        more details.\n\n        Despite the algorithmic mechanism, the probe will only place\n        entries in here for those protocols it chooses to collect.  In\n        other words, it need not populate this table with all\n        possible ethernet protocol types, nor need it create them on\n        the fly when it sees them.  Whether it does these\n        things is a matter of product definition (cost/benefit,\n        usability) and is up to the designer of the product.\n\n        If an entry is written to this table with a protocolDirID that\n        the agent doesn't understand, either directly or\n        algorithmically, the SET request will be rejected with an\n        inconsistentName or badValue (for SNMPv1) error.")
protocolDirParameters = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: protocolDirParameters.setStatus('current')
if mibBuilder.loadTexts: protocolDirParameters.setDescription('A set of parameters for the associated protocolDirID.\n        See the associated RMON2 Protocol Identifiers document\n        for a description of the possible parameters.  There\n        will be one octet in this string for each sub-identifier in\n        the protocolDirID, and the parameters will appear here in the\n        same order as the associated sub-identifiers appear in the\n        protocolDirID.\n\n        Every node in the protocolDirID tree has a different, optional\n        set of parameters defined (that is, the definition of\n        parameters for a node is optional).  The proper parameter\n        value for each node is included in this string.  Note that the\n        inclusion of a parameter value in this string for each node is\n        not optional.  What is optional is that a node may have no\n        parameters defined, in which case the parameter field for that\n        node will be zero.')
protocolDirLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDirLocalIndex.setStatus('current')
if mibBuilder.loadTexts: protocolDirLocalIndex.setDescription("The locally arbitrary but unique identifier associated\n        with this protocolDir entry.\n\n        The value for each supported protocol must remain constant at\n        least from one re-initialization of the entity's network\n        management system to the next re-initialization, except that\n        if a protocol is deleted and re-created, it must be re-created\n        with a new value that has not been used since the last\n        re-initialization.\n\n        The specific value is meaningful only within a given SNMP\n        entity.  A protocolDirLocalIndex must not be re-used until the\n        next agent restart in the event that the protocol directory\n        entry is deleted.")
protocolDirDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirDescr.setStatus('current')
if mibBuilder.loadTexts: protocolDirDescr.setDescription('A textual description of the protocol encapsulation.\n        A probe may choose to describe only a subset of the\n        entire encapsulation (e.g., only the highest layer).\n\n        This object is intended for human consumption only.\n\n        This object may not be modified if the associated\n        protocolDirStatus object is equal to active(1).')
protocolDirType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 5), Bits().clone(namedValues=NamedValues(("extensible", 0), ("addressRecognitionCapable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDirType.setStatus('current')
if mibBuilder.loadTexts: protocolDirType.setDescription("This object describes 2 attributes of this protocol\n         directory entry.\n\n         The presence or absence of the 'extensible' bit describes\n         whether this protocol directory entry can be extended\n         by the user by creating protocol directory entries that are\n         children of this protocol.\n\n         An example of an entry that will often allow extensibility is\n\n\n\n         'ip.udp'.  The probe may automatically populate some children\n         of this node, such as 'ip.udp.snmp' and 'ip.udp.dns'.\n         A probe administrator or user may also populate additional\n         children via remote SNMP requests that create entries in this\n         table.  When a child node is added for a protocol for which the\n         probe has no built-in support extending a parent node (for\n         which the probe does have built-in support),\n         that child node is not extendable.  This is termed 'limited\n         extensibility'.\n\n         When a child node is added through this extensibility\n         mechanism, the values of protocolDirLocalIndex and\n         protocolDirType shall be assigned by the agent.\n\n         The other objects in the entry will be assigned by the\n         manager who is creating the new entry.\n\n         This object also describes whether this agent can\n         recognize addresses for this protocol, should it be a\n         network-level protocol.  That is, while a probe may be able\n         to recognize packets of a particular network-layer protocol\n         and count them, it takes additional logic to be able to\n         recognize the addresses in this protocol and to populate\n         network-layer or application-layer tables with the addresses\n         in this protocol.  If this bit is set, the agent will\n         recognize network-layer addresses for this protocol and\n         populate the network- and application-layer host and matrix\n         tables with these protocols.\n\n         Note that when an entry is created, the agent will supply\n         values for the bits that match the capabilities of the agent\n         with respect to this protocol.  Note that since row creations\n         usually exercise the limited extensibility feature, these\n         bits will usually be set to zero.")
protocolDirAddressMapConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedOff", 2), ("supportedOn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirAddressMapConfig.setStatus('current')
if mibBuilder.loadTexts: protocolDirAddressMapConfig.setDescription("This object describes and configures the probe's support for\n        address mapping for this protocol.  When the probe creates\n        entries in this table for all protocols that it understands,\n\n\n\n        it will set the entry to notSupported(1) if it doesn't have\n        the capability to perform address mapping for the protocol or\n        if this protocol is not a network-layer protocol.  When\n        an entry is created in this table by a management operation as\n        part of the limited extensibility feature, the probe must set\n        this value to notSupported(1), because limited extensibility\n        of the protocolDirTable does not extend to interpreting\n        addresses of the extended protocols.\n\n        If the value of this object is notSupported(1), the probe\n        will not perform address mapping for this protocol and\n        shall not allow this object to be changed to any other value.\n        If the value of this object is supportedOn(3), the probe\n        supports address mapping for this protocol and is configured\n        to perform address mapping for this protocol for all\n        addressMappingControlEntries and all interfaces.\n        If the value of this object is supportedOff(2), the probe\n        supports address mapping for this protocol but is configured\n        to not perform address mapping for this protocol for any\n        addressMappingControlEntries and all interfaces.\n        Whenever this value changes from supportedOn(3) to\n        supportedOff(2), the probe shall delete all related entries in\n        the addressMappingTable.")
protocolDirHostConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedOff", 2), ("supportedOn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirHostConfig.setStatus('current')
if mibBuilder.loadTexts: protocolDirHostConfig.setDescription("This object describes and configures the probe's support for\n        the network-layer and application-layer host tables for this\n        protocol.  When the probe creates entries in this table for\n        all protocols that it understands, it will set the entry to\n        notSupported(1) if it doesn't have the capability to track the\n        nlHostTable for this protocol or if the alHostTable is\n        implemented but doesn't have the capability to track this\n        protocol.  Note that if the alHostTable is implemented, the\n        probe may only support a protocol if it is supported in both\n        the nlHostTable and the alHostTable.\n\n        If the associated protocolDirType object has the\n        addressRecognitionCapable bit set, then this is a network-\n        layer protocol for which the probe recognizes addresses, and\n\n\n\n        thus the probe will populate the nlHostTable and alHostTable\n        with addresses it discovers for this protocol.\n\n        If the value of this object is notSupported(1), the probe\n        will not track the nlHostTable or alHostTable for this\n        protocol and shall not allow this object to be changed to any\n        other value.  If the value of this object is supportedOn(3),\n        the probe supports tracking of the nlHostTable and alHostTable\n        for this protocol and is configured to track both tables\n        for this protocol for all control entries and all interfaces.\n        If the value of this object is supportedOff(2), the probe\n        supports tracking of the nlHostTable and alHostTable for this\n        protocol but is configured to not track these tables\n        for any control entries or interfaces.\n        Whenever this value changes from supportedOn(3) to\n        supportedOff(2), the probe shall delete all related entries in\n        the nlHostTable and alHostTable.\n\n        Note that since each alHostEntry references 2 protocol\n        directory entries, one for the network address and one for the\n        type of the highest protocol recognized, an entry will\n        only be created in that table if this value is supportedOn(3)\n        for both protocols.")
protocolDirMatrixConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("supportedOff", 2), ("supportedOn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirMatrixConfig.setStatus('current')
if mibBuilder.loadTexts: protocolDirMatrixConfig.setDescription("This object describes and configures the probe's support for\n        the network-layer and application-layer matrix tables for this\n        protocol.  When the probe creates entries in this table for\n        all protocols that it understands, it will set the entry to\n        notSupported(1) if it doesn't have the capability to track the\n        nlMatrixTables for this protocol or if the alMatrixTables are\n        implemented but don't have the capability to track this\n        protocol.  Note that if the alMatrix tables are implemented,\n        the probe may only support a protocol if it is supported in\n        both of the nlMatrixTables and both of the\n        alMatrixTables.\n\n        If the associated protocolDirType object has the\n        addressRecognitionCapable bit set, then this is a network-\n\n\n\n        layer protocol for which the probe recognizes addresses, and\n        thus the probe will populate both of the nlMatrixTables and\n        both of the alMatrixTables with addresses it discovers for\n        this protocol.\n\n        If the value of this object is notSupported(1), the probe\n        will not track either of the nlMatrixTables or the\n        alMatrixTables for this protocol and shall not allow this\n        object to be changed to any other value.  If the value of this\n        object is supportedOn(3), the probe supports tracking of both\n        of the nlMatrixTables and (if implemented) both of the\n        alMatrixTables for this protocol and is configured to track\n        these tables for this protocol for all control entries and all\n        interfaces.  If the value of this object is supportedOff(2),\n        the probe supports tracking of both of the nlMatrixTables and\n        (if implemented) both of the alMatrixTables for this protocol\n        but is configured to not track these tables for this\n        protocol for any control entries or interfaces.\n        Whenever this value changes from supportedOn(3) to\n        supportedOff(2), the probe shall delete all related entries in\n        the nlMatrixTables and the alMatrixTables.\n\n        Note that since each alMatrixEntry references 2 protocol\n        directory entries, one for the network address and one for the\n        type of the highest protocol recognized, an entry will\n        only be created in that table if this value is supportedOn(3)\n        for both protocols.")
protocolDirOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirOwner.setStatus('current')
if mibBuilder.loadTexts: protocolDirOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
protocolDirStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 11, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDirStatus.setStatus('current')
if mibBuilder.loadTexts: protocolDirStatus.setDescription('The status of this protocol directory entry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n\n\n\n        If this object is not equal to active(1), all associated\n        entries in the nlHostTable, nlMatrixSDTable, nlMatrixDSTable,\n        alHostTable, alMatrixSDTable, and alMatrixDSTable shall be\n        deleted.')
protocolDistControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 12, 1), )
if mibBuilder.loadTexts: protocolDistControlTable.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlTable.setDescription('Controls the setup of protocol type distribution statistics\n        tables.\n\n        Implementations are encouraged to add an entry per monitored\n        interface upon initialization so that a default collection\n        of protocol statistics is available.\n\n        Rationale:\n        This table controls collection of very basic statistics\n        for any or all of the protocols detected on a given interface.\n        An NMS can use this table to quickly determine bandwidth\n        allocation utilized by different protocols.\n\n        A media-specific statistics collection could also\n        be configured (e.g., etherStats, trPStats) to easily obtain\n        total frame, octet, and droppedEvents for the same\n        interface.')
protocolDistControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 12, 1, 1), ).setIndexNames((0, "RMON2-MIB", "protocolDistControlIndex"))
if mibBuilder.loadTexts: protocolDistControlEntry.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlEntry.setDescription('A conceptual row in the protocolDistControlTable.\n\n         An example of the indexing of this entry is\n         protocolDistControlDroppedFrames.7')
protocolDistControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: protocolDistControlIndex.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlIndex.setDescription('A unique index for this protocolDistControlEntry.')
protocolDistControlDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 2), DataSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDistControlDataSource.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlDataSource.setDescription('The source of data for the this protocol distribution.\n\n        The statistics in this group reflect all packets\n        on the local network segment attached to the\n        identified interface.\n\n        This object may not be modified if the associated\n        protocolDistControlStatus object is equal to active(1).')
protocolDistControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the probe\n        is out of some resources and decides to shed load from this\n        collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
protocolDistControlCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 4), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlCreateTime.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
protocolDistControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDistControlOwner.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
protocolDistControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolDistControlStatus.setStatus('current')
if mibBuilder.loadTexts: protocolDistControlStatus.setDescription('The status of this row.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all associated\n        entries in the protocolDistStatsTable shall be deleted.')
protocolDistStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 12, 2), )
if mibBuilder.loadTexts: protocolDistStatsTable.setStatus('current')
if mibBuilder.loadTexts: protocolDistStatsTable.setDescription('An entry is made in this table for every protocol in the\n        protocolDirTable that has been seen in at least one packet.\n        Counters are updated in this table for every protocol type\n        that is encountered when parsing a packet, but no counters are\n\n\n\n        updated for packets with MAC-layer errors.\n\n        Note that if a protocolDirEntry is deleted, all associated\n        entries in this table are removed.')
protocolDistStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 12, 2, 1), ).setIndexNames((0, "RMON2-MIB", "protocolDistControlIndex"), (0, "RMON2-MIB", "protocolDirLocalIndex"))
if mibBuilder.loadTexts: protocolDistStatsEntry.setStatus('current')
if mibBuilder.loadTexts: protocolDistStatsEntry.setDescription('A conceptual row in the protocolDistStatsTable.\n\n        The index is composed of the protocolDistControlIndex of the\n        associated protocolDistControlEntry, followed by the\n        protocolDirLocalIndex of the associated protocol that this\n        entry represents.  In other words, the index identifies the\n        protocol distribution an entry is a part of and the\n        particular protocol that it represents.\n\n        An example of the indexing of this entry is\n        protocolDistStatsPkts.1.18')
protocolDistStatsPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 2, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistStatsPkts.setStatus('current')
if mibBuilder.loadTexts: protocolDistStatsPkts.setDescription('The number of packets of this protocol type received\n        without errors.  Note that this is the number of\n        link-layer packets, so if a single network-layer packet\n        is fragmented into several link-layer frames, this counter\n        is incremented several times.')
protocolDistStatsOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 12, 2, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistStatsOctets.setStatus('current')
if mibBuilder.loadTexts: protocolDistStatsOctets.setDescription("The number of octets in packets of this protocol type\n\n\n\n        received since it was added to the protocolDistStatsTable\n        (excluding framing bits, but including FCS octets), except for\n        those octets in packets that contained errors.\n\n        Note that this doesn't count just those octets in the\n        particular protocol frames but includes the entire packet\n        that contained the protocol.")
addressMapInserts = MibScalar((1, 3, 6, 1, 2, 1, 16, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressMapInserts.setStatus('current')
if mibBuilder.loadTexts: addressMapInserts.setDescription('The number of times an address mapping entry has been\n        inserted into the addressMapTable.  If an entry is inserted,\n        then deleted, and then inserted, this counter will be\n        incremented by 2.\n\n        Note that the table size can be determined by subtracting\n        addressMapDeletes from addressMapInserts.')
addressMapDeletes = MibScalar((1, 3, 6, 1, 2, 1, 16, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressMapDeletes.setStatus('current')
if mibBuilder.loadTexts: addressMapDeletes.setDescription('The number of times an address mapping entry has been\n        deleted from the addressMapTable (for any reason).  If\n        an entry is deleted, then inserted, and then deleted, this\n        counter will be incremented by 2.\n\n        Note that the table size can be determined by subtracting\n        addressMapDeletes from addressMapInserts.')
addressMapMaxDesiredEntries = MibScalar((1, 3, 6, 1, 2, 1, 16, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addressMapMaxDesiredEntries.setStatus('current')
if mibBuilder.loadTexts: addressMapMaxDesiredEntries.setDescription('The maximum number of entries that are desired in the\n        addressMapTable.  The probe will not create more than\n        this number of entries in the table but may choose to create\n        fewer entries in this table for any reason, including the lack\n        of resources.\n\n        If this object is set to a value less than the current number\n        of entries, enough entries are chosen in an\n        implementation-dependent manner and deleted so that the number\n        of entries in the table equals the value of this object.\n\n        If this value is set to -1, the probe may create any number\n        of entries in this table.\n\n        This object may be used to control how resources are allocated\n        on the probe for the various RMON functions.')
addressMapControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 13, 4), )
if mibBuilder.loadTexts: addressMapControlTable.setStatus('current')
if mibBuilder.loadTexts: addressMapControlTable.setDescription('A table to control the collection of mappings from network\n         layer address to physical address to interface.\n\n        Note that this is not like the typical RMON\n        controlTable and dataTable in which each entry creates\n        its own data table.  Each entry in this table enables the\n        discovery of addresses on a new interface and the placement\n        of address mappings into the central addressMapTable.\n\n        Implementations are encouraged to add an entry per monitored\n        interface upon initialization so that a default collection\n        of address mappings is available.')
addressMapControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 13, 4, 1), ).setIndexNames((0, "RMON2-MIB", "addressMapControlIndex"))
if mibBuilder.loadTexts: addressMapControlEntry.setStatus('current')
if mibBuilder.loadTexts: addressMapControlEntry.setDescription('A conceptual row in the addressMapControlTable.\n\n        An example of the indexing of this entry is\n        addressMapControlDroppedFrames.1')
addressMapControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: addressMapControlIndex.setStatus('current')
if mibBuilder.loadTexts: addressMapControlIndex.setDescription('A unique index for this entry in the addressMapControlTable.')
addressMapControlDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 4, 1, 2), DataSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addressMapControlDataSource.setStatus('current')
if mibBuilder.loadTexts: addressMapControlDataSource.setDescription('The source of data for this addressMapControlEntry.')
addressMapControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressMapControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: addressMapControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the probe\n        is out of some resources and decides to shed load from this\n        collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
addressMapControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 4, 1, 4), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addressMapControlOwner.setStatus('current')
if mibBuilder.loadTexts: addressMapControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
addressMapControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addressMapControlStatus.setStatus('current')
if mibBuilder.loadTexts: addressMapControlStatus.setDescription('The status of this addressMap control entry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all associated\n        entries in the addressMapTable shall be deleted.')
addressMapTable = MibTable((1, 3, 6, 1, 2, 1, 16, 13, 5), )
if mibBuilder.loadTexts: addressMapTable.setStatus('current')
if mibBuilder.loadTexts: addressMapTable.setDescription('A table of mappings from network layer address to physical\n        address to interface.\n\n        The probe will add entries to this table based on the source\n        MAC and network addresses seen in packets without MAC-level\n        errors.  The probe will populate this table for all protocols\n        in the protocol directory table whose value of\n        protocolDirAddressMapConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirAddressMapConfig value of supportedOff(2).')
addressMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 13, 5, 1), ).setIndexNames((0, "RMON2-MIB", "addressMapTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "addressMapNetworkAddress"), (0, "RMON2-MIB", "addressMapSource"))
if mibBuilder.loadTexts: addressMapEntry.setStatus('current')
if mibBuilder.loadTexts: addressMapEntry.setDescription('A conceptual row in the addressMapTable.\n\n        The protocolDirLocalIndex in the index identifies the network\n        layer protocol of the addressMapNetworkAddress.\n\n\n\n\n        An example of the indexing of this entry is\n        addressMapSource.783495.18.4.128.2.6.6.11.1.3.6.1.2.1.2.2.1.1.1.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
addressMapTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 5, 1, 1), TimeFilter())
if mibBuilder.loadTexts: addressMapTimeMark.setStatus('current')
if mibBuilder.loadTexts: addressMapTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
addressMapNetworkAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: addressMapNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: addressMapNetworkAddress.setDescription('The network address for this relation.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the protocolDirLocalIndex component of the\n        index.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of ip, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
addressMapSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 5, 1, 3), ObjectIdentifier())
if mibBuilder.loadTexts: addressMapSource.setStatus('current')
if mibBuilder.loadTexts: addressMapSource.setDescription('The interface or port on which the associated network\n         address was most recently seen.\n\n        If this address mapping was discovered on an interface, this\n        object shall identify the instance of the ifIndex\n        object, defined in [RFC2863], for the desired interface.\n        For example, if an entry were to receive data from\n        interface #1, this object would be set to ifIndex.1.\n\n        If this address mapping was discovered on a port, this\n        object shall identify the instance of the rptrGroupPortIndex\n        object, defined in [RFC2108], for the desired port.\n        For example, if an entry were to receive data from\n        group #1, port #1, this object would be set to\n        rptrGroupPortIndex.1.1.\n\n        Note that while the dataSource associated with this entry\n        may only point to index objects, this object may at times\n        point to repeater port objects.  This situation occurs when\n        the dataSource points to an interface that is a locally\n        attached repeater and the agent has additional information\n        about the source port of traffic seen on that repeater.')
addressMapPhysicalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressMapPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: addressMapPhysicalAddress.setDescription('The last source physical address on which the associated\n        network address was seen.  If the protocol of the associated\n        network address was encapsulated inside of a network-level or\n        higher protocol, this will be the address of the next-lower\n        protocol with the addressRecognitionCapable bit enabled and\n        will be formatted as specified for that protocol.')
addressMapLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 13, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressMapLastChange.setStatus('current')
if mibBuilder.loadTexts: addressMapLastChange.setDescription('The value of sysUpTime at the time this entry was last\n        created or the values of the physical address changed.\n\n\n\n\n        This can be used to help detect duplicate address problems, in\n        which case this object will be updated frequently.')
hlHostControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 14, 1), )
if mibBuilder.loadTexts: hlHostControlTable.setStatus('current')
if mibBuilder.loadTexts: hlHostControlTable.setDescription('A list of higher-layer (i.e., non-MAC) host table control\n        entries.\n\n        These entries will enable the collection of the network- and\n        application-level host tables indexed by network addresses.\n        Both the network- and application-level host tables are\n        controlled by this table so that they will both be created\n        and deleted at the same time, further increasing the ease with\n        which they can be implemented as a single datastore.  (Note that\n        if an implementation stores application-layer host records in\n        memory, it can derive network-layer host records from them.)\n\n        Entries in the nlHostTable will be created on behalf of each\n        entry in this table.  Additionally, if this probe implements\n        the alHostTable, entries in the alHostTable will be created on\n        behalf of each entry in this table.\n\n        Implementations are encouraged to add an entry per monitored\n        interface upon initialization so that a default collection\n        of host statistics is available.')
hlHostControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 14, 1, 1), ).setIndexNames((0, "RMON2-MIB", "hlHostControlIndex"))
if mibBuilder.loadTexts: hlHostControlEntry.setStatus('current')
if mibBuilder.loadTexts: hlHostControlEntry.setDescription('A conceptual row in the hlHostControlTable.\n\n        An example of the indexing of this entry is\n\n\n\n        hlHostControlNlDroppedFrames.1')
hlHostControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hlHostControlIndex.setStatus('current')
if mibBuilder.loadTexts: hlHostControlIndex.setDescription('An index that uniquely identifies an entry in the\n        hlHostControlTable.  Each such entry defines\n        a function that discovers hosts on a particular\n        interface and places statistics about them in the\n        nlHostTable, and optionally in the alHostTable, on\n        behalf of this hlHostControlEntry.')
hlHostControlDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 2), DataSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlHostControlDataSource.setStatus('current')
if mibBuilder.loadTexts: hlHostControlDataSource.setDescription('The source of data for the associated host tables.\n\n        The statistics in this group reflect all packets\n        on the local network segment attached to the\n        identified interface.\n\n        This object may not be modified if the associated\n        hlHostControlStatus object is equal to active(1).')
hlHostControlNlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlNlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hlHostControlNlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for the associated\n        nlHost entries for whatever reason.  Most often, this event\n        occurs when the probe is out of some resources and decides to\n        shed load from this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that if the nlHostTable is inactive because no protocols\n        are enabled in the protocol directory, this value should be 0.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hlHostControlNlInserts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlNlInserts.setStatus('current')
if mibBuilder.loadTexts: hlHostControlNlInserts.setDescription('The number of times an nlHost entry has been\n        inserted into the nlHost table.  If an entry is inserted, then\n        deleted, and then inserted, this counter will be incremented\n        by 2.\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlHostControlNlDeletes from hlHostControlNlInserts.')
hlHostControlNlDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlNlDeletes.setStatus('current')
if mibBuilder.loadTexts: hlHostControlNlDeletes.setDescription('The number of times an nlHost entry has been\n\n\n\n        deleted from the nlHost table (for any reason).  If an entry\n        is deleted, then inserted, and then deleted, this counter will\n        be incremented by 2.\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlHostControlNlDeletes from hlHostControlNlInserts.')
hlHostControlNlMaxDesiredEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlHostControlNlMaxDesiredEntries.setStatus('current')
if mibBuilder.loadTexts: hlHostControlNlMaxDesiredEntries.setDescription("The maximum number of entries that are desired in the\n        nlHostTable on behalf of this control entry.  The probe will\n        not create more than this number of associated entries in the\n        table but may choose to create fewer entries in this table\n        for any reason, including the lack of resources.\n\n        If this object is set to a value less than the current number\n        of entries, enough entries are chosen in an\n        implementation-dependent manner and deleted so that the number\n        of entries in the table equals the value of this object.\n\n        If this value is set to -1, the probe may create any number\n        of entries in this table.  If the associated\n        hlHostControlStatus object is equal to 'active', this\n        object may not be modified.\n\n        This object may be used to control how resources are allocated\n        on the probe for the various RMON functions.")
hlHostControlAlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlAlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hlHostControlAlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for the associated\n\n\n\n        alHost entries for whatever reason.  Most often, this event\n        occurs when the probe is out of some resources and decides to\n        shed load from this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that if the alHostTable is not implemented or is inactive\n        because no protocols are enabled in the protocol directory,\n        this value should be 0.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hlHostControlAlInserts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlAlInserts.setStatus('current')
if mibBuilder.loadTexts: hlHostControlAlInserts.setDescription('The number of times an alHost entry has been\n        inserted into the alHost table.  If an entry is inserted, then\n        deleted, and then inserted, this counter will be incremented\n        by 2.\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlHostControlAlDeletes from hlHostControlAlInserts.')
hlHostControlAlDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlHostControlAlDeletes.setStatus('current')
if mibBuilder.loadTexts: hlHostControlAlDeletes.setDescription('The number of times an alHost entry has been\n        deleted from the alHost table (for any reason).  If an entry\n        is deleted, then inserted, and then deleted, this counter will\n        be incremented by 2.\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n\n\n\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlHostControlAlDeletes from hlHostControlAlInserts.')
hlHostControlAlMaxDesiredEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlHostControlAlMaxDesiredEntries.setStatus('current')
if mibBuilder.loadTexts: hlHostControlAlMaxDesiredEntries.setDescription("The maximum number of entries that are desired in the alHost\n        table on behalf of this control entry.  The probe will not\n        create more than this number of associated entries in the\n        table but may choose to create fewer entries in this table\n        for any reason, including the lack of resources.\n\n        If this object is set to a value less than the current number\n        of entries, enough entries are chosen in an\n        implementation-dependent manner and deleted so that the number\n        of entries in the table equals the value of this object.\n\n        If this value is set to -1, the probe may create any number\n        of entries in this table.  If the associated\n        hlHostControlStatus object is equal to 'active', this\n        object may not be modified.\n\n        This object may be used to control how resources are allocated\n        on the probe for the various RMON functions.")
hlHostControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 11), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlHostControlOwner.setStatus('current')
if mibBuilder.loadTexts: hlHostControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
hlHostControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlHostControlStatus.setStatus('current')
if mibBuilder.loadTexts: hlHostControlStatus.setDescription('The status of this hlHostControlEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all associated\n        entries in the nlHostTable and alHostTable shall be deleted.')
nlHostTable = MibTable((1, 3, 6, 1, 2, 1, 16, 14, 2), )
if mibBuilder.loadTexts: nlHostTable.setStatus('current')
if mibBuilder.loadTexts: nlHostTable.setDescription('A collection of statistics for a particular network layer\n        address that has been discovered on an interface of this\n        device.\n\n        The probe will populate this table for all network layer\n        protocols in the protocol directory table whose value of\n        protocolDirHostConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirHostConfig value of supportedOff(2).\n\n        The probe will add to this table all addresses seen\n        as the source or destination address in all packets with no\n        MAC errors, and will increment octet and packet counts in the\n        table for all packets with no MAC errors.')
nlHostEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 14, 2, 1), ).setIndexNames((0, "RMON2-MIB", "hlHostControlIndex"), (0, "RMON2-MIB", "nlHostTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlHostAddress"))
if mibBuilder.loadTexts: nlHostEntry.setStatus('current')
if mibBuilder.loadTexts: nlHostEntry.setDescription('A conceptual row in the nlHostTable.\n\n        The hlHostControlIndex value in the index identifies the\n        hlHostControlEntry on whose behalf this entry was created.\n        The protocolDirLocalIndex value in the index identifies the\n        network layer protocol of the nlHostAddress.\n\n        An example of the indexing of this entry is\n        nlHostOutPkts.1.783495.18.4.128.2.6.6.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n\n\n\n        care to avoid such combinations.')
nlHostTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: nlHostTimeMark.setStatus('current')
if mibBuilder.loadTexts: nlHostTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
nlHostAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: nlHostAddress.setStatus('current')
if mibBuilder.loadTexts: nlHostAddress.setDescription('The network address for this nlHostEntry.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the protocolDirLocalIndex component of the index.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlHostInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostInPkts.setStatus('current')
if mibBuilder.loadTexts: nlHostInPkts.setDescription('The number of packets without errors transmitted to\n\n\n\n        this address since it was added to the nlHostTable.  Note that\n        this is the number of link-layer packets, so if a single\n        network-layer packet is fragmented into several link-layer\n        frames, this counter is incremented several times.')
nlHostOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostOutPkts.setStatus('current')
if mibBuilder.loadTexts: nlHostOutPkts.setDescription('The number of packets without errors transmitted by\n        this address since it was added to the nlHostTable.  Note that\n        this is the number of link-layer packets, so if a single\n        network-layer packet is fragmented into several link-layer\n        frames, this counter is incremented several times.')
nlHostInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostInOctets.setStatus('current')
if mibBuilder.loadTexts: nlHostInOctets.setDescription("The number of octets transmitted to this address\n        since it was added to the nlHostTable (excluding\n        framing bits, but including FCS octets), excluding\n        octets in packets that contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
nlHostOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostOutOctets.setStatus('current')
if mibBuilder.loadTexts: nlHostOutOctets.setDescription("The number of octets transmitted by this address\n        since it was added to the nlHostTable (excluding\n        framing bits, but including FCS octets), excluding\n        octets in packets that contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
nlHostOutMacNonUnicastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostOutMacNonUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: nlHostOutMacNonUnicastPkts.setDescription('The number of packets without errors transmitted by this\n        address that were directed to any MAC broadcast addresses\n        or to any MAC multicast addresses since this host was\n        added to the nlHostTable.  Note that this is the number of\n        link-layer packets, so if a single network-layer packet is\n        fragmented into several link-layer frames, this counter is\n        incremented several times.')
nlHostCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 14, 2, 1, 8), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlHostCreateTime.setStatus('current')
if mibBuilder.loadTexts: nlHostCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
hlMatrixControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 15, 1), )
if mibBuilder.loadTexts: hlMatrixControlTable.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlTable.setDescription('A list of higher-layer (i.e., non-MAC) matrix control entries.\n\n        These entries will enable the collection of the network- and\n        application-level matrix tables containing conversation\n        statistics indexed by pairs of network addresses.\n        Both the network- and application-level matrix tables are\n        controlled by this table so that they will both be created\n        and deleted at the same time, further increasing the ease with\n        which they can be implemented as a single datastore.  (Note that\n        if an implementation stores application-layer matrix records\n\n\n\n        in memory, it can derive network-layer matrix records from\n        them.)\n\n        Entries in the nlMatrixSDTable and nlMatrixDSTable will be\n        created on behalf of each entry in this table.  Additionally,\n        if this probe implements the alMatrix tables, entries in the\n        alMatrix tables will be created on behalf of each entry in\n        this table.')
hlMatrixControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 15, 1, 1), ).setIndexNames((0, "RMON2-MIB", "hlMatrixControlIndex"))
if mibBuilder.loadTexts: hlMatrixControlEntry.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlEntry.setDescription('A conceptual row in the hlMatrixControlTable.\n\n        An example of indexing of this entry is\n        hlMatrixControlNlDroppedFrames.1')
hlMatrixControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hlMatrixControlIndex.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlIndex.setDescription('An index that uniquely identifies an entry in the\n        hlMatrixControlTable.  Each such entry defines\n        a function that discovers conversations on a particular\n        interface and places statistics about them in the\n        nlMatrixSDTable and the nlMatrixDSTable, and optionally the\n        alMatrixSDTable and alMatrixDSTable, on behalf of this\n\n\n\n        hlMatrixControlEntry.')
hlMatrixControlDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 2), DataSource()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlMatrixControlDataSource.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlDataSource.setDescription('The source of the data for the associated matrix tables.\n\n        The statistics in this group reflect all packets\n        on the local network segment attached to the\n        identified interface.\n\n        This object may not be modified if the associated\n        hlMatrixControlStatus object is equal to active(1).')
hlMatrixControlNlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlNlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlNlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the probe\n        is out of some resources and decides to shed load from this\n        collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that if the nlMatrixTables are inactive because no\n        protocols are enabled in the protocol directory, this value\n        should be 0.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hlMatrixControlNlInserts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlNlInserts.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlNlInserts.setDescription('The number of times an nlMatrix entry has been\n        inserted into the nlMatrix tables.  If an entry is inserted,\n\n\n\n        then deleted, and then inserted, this counter will be\n        incremented by 2.  The addition of a conversation into both\n        the nlMatrixSDTable and nlMatrixDSTable shall be counted as\n        two insertions (even though every addition into one table must\n        be accompanied by an insertion into the other).\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the sum of then nlMatrixSDTable and nlMatrixDSTable\n        sizes can be determined by subtracting\n        hlMatrixControlNlDeletes from hlMatrixControlNlInserts.')
hlMatrixControlNlDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlNlDeletes.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlNlDeletes.setDescription('The number of times an nlMatrix entry has been\n        deleted from the nlMatrix tables (for any reason).  If an\n        entry is deleted, then inserted, and then deleted, this\n        counter will be incremented by 2.  The deletion of a\n        conversation from both the nlMatrixSDTable and nlMatrixDSTable\n        shall be counted as two deletions (even though every deletion\n        from one table must be accompanied by a deletion from the\n        other).\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlMatrixControlNlDeletes from hlMatrixControlNlInserts.')
hlMatrixControlNlMaxDesiredEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlMatrixControlNlMaxDesiredEntries.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlNlMaxDesiredEntries.setDescription("The maximum number of entries that are desired in the\n        nlMatrix tables on behalf of this control entry.  The probe\n        will not create more than this number of associated entries in\n        the table but may choose to create fewer entries in this\n        table for any reason, including the lack of resources.\n\n        If this object is set to a value less than the current number\n        of entries, enough entries are chosen in an\n        implementation-dependent manner and deleted so that the number\n        of entries in the table equals the value of this object.\n\n        If this value is set to -1, the probe may create any number\n        of entries in this table.  If the associated\n        hlMatrixControlStatus object is equal to 'active', this\n        object may not be modified.\n\n        This object may be used to control how resources are allocated\n        on the probe for the various RMON functions.")
hlMatrixControlAlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlAlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlAlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the probe\n        is out of some resources and decides to shed load from this\n        collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that if the alMatrixTables are not implemented or are\n        inactive because no protocols are enabled in the protocol\n        directory, this value should be 0.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hlMatrixControlAlInserts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlAlInserts.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlAlInserts.setDescription('The number of times an alMatrix entry has been\n        inserted into the alMatrix tables.  If an entry is inserted,\n        then deleted, and then inserted, this counter will be\n        incremented by 2.  The addition of a conversation into both\n        the alMatrixSDTable and alMatrixDSTable shall be counted as\n        two insertions (even though every addition into one table must\n        be accompanied by an insertion into the other).\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlMatrixControlAlDeletes from hlMatrixControlAlInserts.')
hlMatrixControlAlDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlMatrixControlAlDeletes.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlAlDeletes.setDescription('The number of times an alMatrix entry has been\n        deleted from the alMatrix tables.  If an entry is deleted,\n        then inserted, and then deleted, this counter will be\n        incremented by 2.  The deletion of a conversation from both\n        the alMatrixSDTable and alMatrixDSTable shall be counted as\n        two deletions (even though every deletion from one table must\n        be accompanied by a deletion from the other).\n\n        To allow for efficient implementation strategies, agents may\n        delay updating this object for short periods of time.  For\n        example, an implementation strategy may allow internal\n        data structures to differ from those visible via SNMP for\n        short periods of time.  This counter may reflect the internal\n        data structures for those short periods of time.\n\n        Note that the table size can be determined by subtracting\n        hlMatrixControlAlDeletes from hlMatrixControlAlInserts.')
hlMatrixControlAlMaxDesiredEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlMatrixControlAlMaxDesiredEntries.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlAlMaxDesiredEntries.setDescription("The maximum number of entries that are desired in the\n        alMatrix tables on behalf of this control entry.  The probe\n        will not create more than this number of associated entries in\n        the table but may choose to create fewer entries in this\n        table for any reason, including the lack of resources.\n\n        If this object is set to a value less than the current number\n        of entries, enough entries are chosen in an\n        implementation-dependent manner and deleted so that the number\n        of entries in the table equals the value of this object.\n\n        If this value is set to -1, the probe may create any number\n        of entries in this table.  If the associated\n        hlMatrixControlStatus object is equal to 'active', this\n        object may not be modified.\n\n        This object may be used to control how resources are allocated\n        on the probe for the various RMON functions.")
hlMatrixControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 11), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlMatrixControlOwner.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
hlMatrixControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hlMatrixControlStatus.setStatus('current')
if mibBuilder.loadTexts: hlMatrixControlStatus.setDescription('The status of this hlMatrixControlEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all\n        associated entries in the nlMatrixSDTable,\n        nlMatrixDSTable, alMatrixSDTable, and alMatrixDSTable\n        shall be deleted by the agent.')
nlMatrixSDTable = MibTable((1, 3, 6, 1, 2, 1, 16, 15, 2), )
if mibBuilder.loadTexts: nlMatrixSDTable.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDTable.setDescription('A list of traffic matrix entries that collect statistics for\n        conversations between two network-level addresses.  This table\n        is indexed first by the source address and then by the\n        destination address to make it convenient to collect all\n        conversations from a particular address.\n\n        The probe will populate this table for all network layer\n        protocols in the protocol directory table whose value of\n        protocolDirMatrixConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirMatrixConfig value of supportedOff(2).\n\n        The probe will add to this table all pairs of addresses\n        seen in all packets with no MAC errors and will increment\n        octet and packet counts in the table for all packets with no\n        MAC errors.\n\n        Further, this table will only contain entries that have a\n        corresponding entry in the nlMatrixDSTable with the same\n        source address and destination address.')
nlMatrixSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 15, 2, 1), ).setIndexNames((0, "RMON2-MIB", "hlMatrixControlIndex"), (0, "RMON2-MIB", "nlMatrixSDTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlMatrixSDSourceAddress"), (0, "RMON2-MIB", "nlMatrixSDDestAddress"))
if mibBuilder.loadTexts: nlMatrixSDEntry.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDEntry.setDescription('A conceptual row in the nlMatrixSDTable.\n\n        The hlMatrixControlIndex value in the index identifies the\n        hlMatrixControlEntry on whose behalf this entry was created.\n        The protocolDirLocalIndex value in the index identifies the\n        network-layer protocol of the nlMatrixSDSourceAddress and\n        nlMatrixSDDestAddress.\n\n        An example of the indexing of this table is\n        nlMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
nlMatrixSDTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: nlMatrixSDTimeMark.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
nlMatrixSDSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: nlMatrixSDSourceAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDSourceAddress.setDescription('The network source address for this nlMatrixSDEntry.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the protocolDirLocalIndex component of the index.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixSDDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: nlMatrixSDDestAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDDestAddress.setDescription('The network destination address for this\n        nlMatrixSDEntry.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the protocolDirLocalIndex component of the index.\n\n        For example, if the protocolDirLocalIndex indicates an\n\n\n\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixSDPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixSDPkts.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDPkts.setDescription('The number of packets without errors transmitted from the\n        source address to the destination address since this entry was\n        added to the nlMatrixSDTable.  Note that this is the number of\n        link-layer packets, so if a single network-layer packet is\n        fragmented into several link-layer frames, this counter is\n        incremented several times.')
nlMatrixSDOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixSDOctets.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDOctets.setDescription("The number of octets transmitted from the source address to\n        the destination address since this entry was added to the\n        nlMatrixSDTable (excluding framing bits, but\n        including FCS octets), excluding octets in packets that\n        contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
nlMatrixSDCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 2, 1, 6), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixSDCreateTime.setStatus('current')
if mibBuilder.loadTexts: nlMatrixSDCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
nlMatrixDSTable = MibTable((1, 3, 6, 1, 2, 1, 16, 15, 3), )
if mibBuilder.loadTexts: nlMatrixDSTable.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSTable.setDescription('A list of traffic matrix entries that collect statistics for\n        conversations between two network-level addresses.  This table\n        is indexed first by the destination address and then by the\n        source address to make it convenient to collect all\n        conversations to a particular address.\n\n        The probe will populate this table for all network layer\n        protocols in the protocol directory table whose value of\n        protocolDirMatrixConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirMatrixConfig value of supportedOff(2).\n\n        The probe will add to this table all pairs of addresses\n        seen in all packets with no MAC errors and will increment\n        octet and packet counts in the table for all packets with no\n        MAC errors.\n\n        Further, this table will only contain entries that have a\n        corresponding entry in the nlMatrixSDTable with the same\n        source address and destination address.')
nlMatrixDSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 15, 3, 1), ).setIndexNames((0, "RMON2-MIB", "hlMatrixControlIndex"), (0, "RMON2-MIB", "nlMatrixDSTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlMatrixDSDestAddress"), (0, "RMON2-MIB", "nlMatrixDSSourceAddress"))
if mibBuilder.loadTexts: nlMatrixDSEntry.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSEntry.setDescription('A conceptual row in the nlMatrixDSTable.\n\n        The hlMatrixControlIndex value in the index identifies the\n        hlMatrixControlEntry on whose behalf this entry was created.\n        The protocolDirLocalIndex value in the index identifies the\n        network-layer protocol of the nlMatrixDSSourceAddress and\n        nlMatrixDSDestAddress.\n\n        An example of the indexing of this table is\n        nlMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
nlMatrixDSTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 1), TimeFilter())
if mibBuilder.loadTexts: nlMatrixDSTimeMark.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
nlMatrixDSSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: nlMatrixDSSourceAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSSourceAddress.setDescription('The network source address for this nlMatrixDSEntry.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the protocolDirLocalIndex component of the index.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixDSDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: nlMatrixDSDestAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSDestAddress.setDescription('The network destination address for this\n        nlMatrixDSEntry.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n\n\n\n        by the protocolDirLocalIndex component of the index.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixDSPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixDSPkts.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSPkts.setDescription('The number of packets without errors transmitted from the\n        source address to the destination address since this entry was\n        added to the nlMatrixDSTable.  Note that this is the number of\n        link-layer packets, so if a single network-layer packet is\n        fragmented into several link-layer frames, this counter is\n        incremented several times.')
nlMatrixDSOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixDSOctets.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSOctets.setDescription("The number of octets transmitted from the source address\n        to the destination address since this entry was added to the\n        nlMatrixDSTable (excluding framing bits, but\n        including FCS octets), excluding octets in packets that\n        contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
nlMatrixDSCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 3, 1, 6), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixDSCreateTime.setStatus('current')
if mibBuilder.loadTexts: nlMatrixDSCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
nlMatrixTopNControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 15, 4), )
if mibBuilder.loadTexts: nlMatrixTopNControlTable.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlTable.setDescription('A set of parameters that control the creation of a\n        report of the top N matrix entries according to\n        a selected metric.')
nlMatrixTopNControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 15, 4, 1), ).setIndexNames((0, "RMON2-MIB", "nlMatrixTopNControlIndex"))
if mibBuilder.loadTexts: nlMatrixTopNControlEntry.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlEntry.setDescription('A conceptual row in the nlMatrixTopNControlTable.\n\n        An example of the indexing of this table is\n        nlMatrixTopNControlDuration.3')
nlMatrixTopNControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nlMatrixTopNControlIndex.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlIndex.setDescription('An index that uniquely identifies an entry\n        in the nlMatrixTopNControlTable.  Each such\n        entry defines one topN report prepared for\n        one interface.')
nlMatrixTopNControlMatrixIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlMatrixIndex.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlMatrixIndex.setDescription('The nlMatrix[SD/DS] table for which a topN report will be\n        prepared on behalf of this entry.  The nlMatrix[SD/DS] table\n        is identified by the value of the hlMatrixControlIndex\n        for that table - that value is used here to identify the\n        particular table.\n\n        This object may not be modified if the associated\n        nlMatrixTopNControlStatus object is equal to active(1).')
nlMatrixTopNControlRateBase = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nlMatrixTopNPkts", 1), ("nlMatrixTopNOctets", 2), ("nlMatrixTopNHighCapacityPkts", 3), ("nlMatrixTopNHighCapacityOctets", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlRateBase.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlRateBase.setDescription('The variable for each nlMatrix[SD/DS] entry that the\n        nlMatrixTopNEntries are sorted by, as well as a control\n        for the table that the results will be reported in.\n\n        This object may not be modified if the associated\n        nlMatrixTopNControlStatus object is equal to active(1).\n\n        If this value is less than or equal to 2, when the report\n        is prepared, entries are created in the nlMatrixTopNTable\n        associated with this object.\n        If this value is greater than or equal to 3, when the report\n        is prepared, entries are created in the\n        nlMatrixTopNHighCapacityTable associated with this object.')
nlMatrixTopNControlTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlTimeRemaining.setDescription('The number of seconds left in the report currently\n        being collected.  When this object is modified by\n        the management station, a new collection is started,\n        possibly aborting a currently running report.  The\n        new value is used as the requested duration of this\n\n\n\n        report and is immediately loaded into the associated\n        nlMatrixTopNControlDuration object.\n\n        When the report finishes, the probe will automatically\n        start another collection with the same initial value\n        of nlMatrixTopNControlTimeRemaining.  Thus, the management\n        station may simply read the resulting reports repeatedly,\n        checking the startTime and duration each time to ensure that a\n        report was not missed or that the report parameters were not\n        changed.\n\n        While the value of this object is non-zero, it decrements\n        by one per second until it reaches zero.  At the time\n        that this object decrements to zero, the report is made\n        accessible in the nlMatrixTopNTable, overwriting any report\n        that may be there.\n\n        When this object is modified by the management station, any\n        associated entries in the nlMatrixTopNTable shall be deleted.\n\n        (Note that this is a different algorithm than the one used\n        in the hostTopNTable).')
nlMatrixTopNControlGeneratedReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNControlGeneratedReports.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlGeneratedReports.setDescription('The number of reports that have been generated by this entry.')
nlMatrixTopNControlDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNControlDuration.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlDuration.setDescription('The number of seconds that this report has collected\n        during the last sampling interval.\n\n        When the associated nlMatrixTopNControlTimeRemaining object is\n        set, this object shall be set by the probe to the\n        same value and shall not be modified until the next\n        time the nlMatrixTopNControlTimeRemaining is set.\n\n        This value shall be zero if no reports have been\n        requested for this nlMatrixTopNControlEntry.')
nlMatrixTopNControlRequestedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlRequestedSize.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlRequestedSize.setDescription('The maximum number of matrix entries requested for this report.\n\n        When this object is created or modified, the probe\n        should set nlMatrixTopNControlGrantedSize as closely to this\n        object as possible for the particular probe\n        implementation and available resources.')
nlMatrixTopNControlGrantedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNControlGrantedSize.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlGrantedSize.setDescription('The maximum number of matrix entries in this report.\n\n        When the associated nlMatrixTopNControlRequestedSize object is\n        created or modified, the probe should set this\n        object as closely to the requested value as\n        possible for the particular implementation and\n        available resources.  The probe must not lower this\n        value except as a side-effect of a set to the associated\n        nlMatrixTopNControlRequestedSize object.\n\n        If the value of nlMatrixTopNControlRateBase is equal to\n        nlMatrixTopNPkts, when the next topN report is generated,\n        matrix entries with the highest value of nlMatrixTopNPktRate\n        shall be placed in this table in decreasing order of this rate\n        until there is no more room or until there are no more\n        matrix entries.\n\n        If the value of nlMatrixTopNControlRateBase is equal to\n        nlMatrixTopNOctets, when the next topN report is generated,\n        matrix entries with the highest value of nlMatrixTopNOctetRate\n        shall be placed in this table in decreasing order of this rate\n        until there is no more room or until there are no more\n        matrix entries.\n\n        It is an implementation-specific matter how entries with the\n        same value of nlMatrixTopNPktRate or nlMatrixTopNOctetRate are\n        sorted.  It is also an implementation-specific matter as to\n\n\n\n        whether zero-valued entries are available.')
nlMatrixTopNControlStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNControlStartTime.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlStartTime.setDescription('The value of sysUpTime when this topN report was\n        last started.  In other words, this is the time that\n        the associated nlMatrixTopNControlTimeRemaining object was\n        modified to start the requested report or the time\n        the report was last automatically (re)started.\n\n        This object may be used by the management station to\n        determine whether a report was missed.')
nlMatrixTopNControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 10), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlOwner.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
nlMatrixTopNControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nlMatrixTopNControlStatus.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNControlStatus.setDescription('The status of this nlMatrixTopNControlEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all\n        associated entries in the nlMatrixTopNTable shall be deleted\n        by the agent.')
nlMatrixTopNTable = MibTable((1, 3, 6, 1, 2, 1, 16, 15, 5), )
if mibBuilder.loadTexts: nlMatrixTopNTable.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNTable.setDescription('A set of statistics for those network-layer matrix entries\n\n\n\n        that have counted the highest number of octets or packets.')
nlMatrixTopNEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 15, 5, 1), ).setIndexNames((0, "RMON2-MIB", "nlMatrixTopNControlIndex"), (0, "RMON2-MIB", "nlMatrixTopNIndex"))
if mibBuilder.loadTexts: nlMatrixTopNEntry.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNEntry.setDescription('A conceptual row in the nlMatrixTopNTable.\n\n        The nlMatrixTopNControlIndex value in the index identifies the\n        nlMatrixTopNControlEntry on whose behalf this entry was\n        created.\n\n        An example of the indexing of this table is\n        nlMatrixTopNPktRate.3.10')
nlMatrixTopNIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nlMatrixTopNIndex.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNIndex.setDescription('An index that uniquely identifies an entry in\n        the nlMatrixTopNTable among those in the same report.\n        This index is between 1 and N, where N is the\n        number of entries in this report.\n\n        If the value of nlMatrixTopNControlRateBase is equal to\n        nlMatrixTopNPkts, increasing values of nlMatrixTopNIndex shall\n        be assigned to entries with decreasing values of\n        nlMatrixTopNPktRate until index N is assigned or there are no\n        more nlMatrixTopNEntries.\n\n        If the value of nlMatrixTopNControlRateBase is equal to\n        nlMatrixTopNOctets, increasing values of nlMatrixTopNIndex\n\n\n\n        shall be assigned to entries with decreasing values of\n        nlMatrixTopNOctetRate until index N is assigned or there are\n        no more nlMatrixTopNEntries.')
nlMatrixTopNProtocolDirLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNProtocolDirLocalIndex.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNProtocolDirLocalIndex.setDescription("The protocolDirLocalIndex of the network-layer protocol of\n        this entry's network address.")
nlMatrixTopNSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNSourceAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNSourceAddress.setDescription('The network-layer address of the source host in this\n        conversation.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the associated nlMatrixTopNProtocolDirLocalIndex.\n\n        For example, if the protocolDirLocalIndex indicates an\n        encapsulation of IP, this object is encoded as a length\n        octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixTopNDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNDestAddress.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNDestAddress.setDescription('The network-layer address of the destination host in this\n        conversation.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the associated nlMatrixTopNProtocolDirLocalIndex.\n\n        For example, if the nlMatrixTopNProtocolDirLocalIndex\n        indicates an encapsulation of IP, this object is encoded as a\n        length octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
nlMatrixTopNPktRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNPktRate.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNPktRate.setDescription('The number of packets seen from the source host\n        to the destination host during this sampling interval, counted\n        using the rules for counting the nlMatrixSDPkts object.\n        If the value of nlMatrixTopNControlRateBase is\n        nlMatrixTopNPkts, this variable will be used to sort this\n        report.')
nlMatrixTopNReversePktRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNReversePktRate.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNReversePktRate.setDescription('The number of packets seen from the destination host to the\n        source host during this sampling interval, counted\n        using the rules for counting the nlMatrixSDPkts object.  (Note\n        that the corresponding nlMatrixSDPkts object selected is the\n        one whose source address is equal to nlMatrixTopNDestAddress\n        and whose destination address is equal to\n        nlMatrixTopNSourceAddress.)\n\n        Note that if the value of nlMatrixTopNControlRateBase is equal\n        to nlMatrixTopNPkts, the sort of topN entries is based\n        entirely on nlMatrixTopNPktRate, and not on the value of this\n        object.')
nlMatrixTopNOctetRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNOctetRate.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNOctetRate.setDescription('The number of octets seen from the source host\n        to the destination host during this sampling interval, counted\n        using the rules for counting the nlMatrixSDOctets object.  If\n        the value of nlMatrixTopNControlRateBase is\n        nlMatrixTopNOctets, this variable will be used to sort this\n        report.')
nlMatrixTopNReverseOctetRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 15, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlMatrixTopNReverseOctetRate.setStatus('current')
if mibBuilder.loadTexts: nlMatrixTopNReverseOctetRate.setDescription('The number of octets seen from the destination host to the\n        source host during this sampling interval, counted\n        using the rules for counting the nlMatrixDSOctets object.  (Note\n        that the corresponding nlMatrixSDOctets object selected is the\n        one whose source address is equal to nlMatrixTopNDestAddress\n        and whose destination address is equal to\n        nlMatrixTopNSourceAddress.)\n\n        Note that if the value of nlMatrixTopNControlRateBase is equal\n        to nlMatrixTopNOctets, the sort of topN entries is based\n        entirely on nlMatrixTopNOctetRate, and not on the value of\n        this object.')
alHostTable = MibTable((1, 3, 6, 1, 2, 1, 16, 16, 1), )
if mibBuilder.loadTexts: alHostTable.setStatus('current')
if mibBuilder.loadTexts: alHostTable.setDescription('A collection of statistics for a particular protocol from a\n        particular network address that has been discovered on an\n        interface of this device.\n\n        The probe will populate this table for all protocols in the\n        protocol directory table whose value of\n        protocolDirHostConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirHostConfig value of supportedOff(2).\n\n\n\n        The probe will add to this table all addresses\n        seen as the source or destination address in all packets with\n        no MAC errors and will increment octet and packet counts in\n        the table for all packets with no MAC errors.  Further,\n        entries will only be added to this table if their address\n        exists in the nlHostTable and will be deleted from this table\n        if their address is deleted from the nlHostTable.')
alHostEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 16, 1, 1), ).setIndexNames((0, "RMON2-MIB", "hlHostControlIndex"), (0, "RMON2-MIB", "alHostTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlHostAddress"), (0, "RMON2-MIB", "protocolDirLocalIndex"))
if mibBuilder.loadTexts: alHostEntry.setStatus('current')
if mibBuilder.loadTexts: alHostEntry.setDescription('A conceptual row in the alHostTable.\n\n        The hlHostControlIndex value in the index identifies the\n        hlHostControlEntry on whose behalf this entry was created.\n        The first protocolDirLocalIndex value in the index identifies\n        the network-layer protocol of the address.\n        The nlHostAddress value in the index identifies the network-\n        layer address of this entry.\n        The second protocolDirLocalIndex value in the index identifies\n        the protocol that is counted by this entry.\n\n        An example of the indexing in this entry is\n        alHostOutPkts.1.783495.18.4.128.2.6.6.34.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
alHostTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: alHostTimeMark.setStatus('current')
if mibBuilder.loadTexts: alHostTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
alHostInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHostInPkts.setStatus('current')
if mibBuilder.loadTexts: alHostInPkts.setDescription('The number of packets of this protocol type without errors\n        transmitted to this address since it was added to the\n        alHostTable.  Note that this is the number of link-layer\n        packets, so if a single network-layer packet is fragmented\n        into several link-layer frames, this counter is incremented\n        several times.')
alHostOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHostOutPkts.setStatus('current')
if mibBuilder.loadTexts: alHostOutPkts.setDescription('The number of packets of this protocol type without errors\n        transmitted by this address since it was added to the\n        alHostTable.  Note that this is the number of link-layer\n        packets, so if a single network-layer packet is fragmented\n        into several link-layer frames, this counter is incremented\n        several times.')
alHostInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHostInOctets.setStatus('current')
if mibBuilder.loadTexts: alHostInOctets.setDescription("The number of octets transmitted to this address\n        of this protocol type since it was added to the\n        alHostTable (excluding framing bits, but including\n        FCS octets), excluding octets in packets that\n        contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
alHostOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHostOutOctets.setStatus('current')
if mibBuilder.loadTexts: alHostOutOctets.setDescription("The number of octets transmitted by this address\n        of this protocol type since it was added to the\n        alHostTable (excluding framing bits, but including\n        FCS octets), excluding octets in packets that\n        contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
alHostCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 16, 1, 1, 6), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHostCreateTime.setStatus('current')
if mibBuilder.loadTexts: alHostCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
alMatrixSDTable = MibTable((1, 3, 6, 1, 2, 1, 16, 17, 1), )
if mibBuilder.loadTexts: alMatrixSDTable.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDTable.setDescription('A list of application traffic matrix entries that collect\n        statistics for conversations of a particular protocol between\n        two network-level addresses.  This table is indexed first by\n        the source address and then by the destination address to make\n        it convenient to collect all statistics from a particular\n        address.\n\n        The probe will populate this table for all protocols in the\n        protocol directory table whose value of\n\n\n\n        protocolDirMatrixConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirMatrixConfig value of supportedOff(2).\n\n        The probe will add to this table all pairs of addresses for\n        all protocols seen in all packets with no MAC errors and will\n        increment octet and packet counts in the table for all packets\n        with no MAC errors.  Further, entries will only be added to\n        this table if their address pair exists in the nlMatrixSDTable\n        and will be deleted from this table if the address pair is\n        deleted from the nlMatrixSDTable.')
alMatrixSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 17, 1, 1), ).setIndexNames((0, "RMON2-MIB", "hlMatrixControlIndex"), (0, "RMON2-MIB", "alMatrixSDTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlMatrixSDSourceAddress"), (0, "RMON2-MIB", "nlMatrixSDDestAddress"), (0, "RMON2-MIB", "protocolDirLocalIndex"))
if mibBuilder.loadTexts: alMatrixSDEntry.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDEntry.setDescription('A conceptual row in the alMatrixSDTable.\n\n        The hlMatrixControlIndex value in the index identifies the\n        hlMatrixControlEntry on whose behalf this entry was created.\n        The first protocolDirLocalIndex value in the index identifies\n        the network-layer protocol of the nlMatrixSDSourceAddress and\n        nlMatrixSDDestAddress.\n        The nlMatrixSDSourceAddress value in the index identifies the\n        network-layer address of the source host in this conversation.\n        The nlMatrixSDDestAddress value in the index identifies the\n        network-layer address of the destination host in this\n        conversation.\n        The second protocolDirLocalIndex value in the index identifies\n        the protocol that is counted by this entry.\n\n        An example of the indexing of this entry is\n        alMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7.34.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
alMatrixSDTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: alMatrixSDTimeMark.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
alMatrixSDPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 1, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixSDPkts.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDPkts.setDescription('The number of packets of this protocol type without errors\n        transmitted from the source address to the destination address\n        since this entry was added to the alMatrixSDTable.  Note that\n        this is the number of link-layer packets, so if a single\n        network-layer packet is fragmented into several link-layer\n        frames, this counter is incremented several times.')
alMatrixSDOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 1, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixSDOctets.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDOctets.setDescription("The number of octets in packets of this protocol type\n        transmitted from the source address to the destination address\n        since this entry was added to the alMatrixSDTable (excluding\n        framing bits, but including FCS octets), excluding octets\n        in packets that contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
alMatrixSDCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 1, 1, 4), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixSDCreateTime.setStatus('current')
if mibBuilder.loadTexts: alMatrixSDCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
alMatrixDSTable = MibTable((1, 3, 6, 1, 2, 1, 16, 17, 2), )
if mibBuilder.loadTexts: alMatrixDSTable.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSTable.setDescription('A list of application traffic matrix entries that collect\n        statistics for conversations of a particular protocol between\n        two network-level addresses.  This table is indexed first by\n        the destination address and then by the source address to make\n        it convenient to collect all statistics to a particular\n        address.\n\n        The probe will populate this table for all protocols in the\n        protocol directory table whose value of\n        protocolDirMatrixConfig is equal to supportedOn(3), and\n        will delete any entries whose protocolDirEntry is deleted or\n        has a protocolDirMatrixConfig value of supportedOff(2).\n\n        The probe will add to this table all pairs of addresses for\n        all protocols seen in all packets with no MAC errors and will\n        increment octet and packet counts in the table for all packets\n        with no MAC errors.  Further, entries will only be added to\n        this table if their address pair exists in the nlMatrixDSTable\n        and will be deleted from this table if the address pair is\n        deleted from the nlMatrixDSTable.')
alMatrixDSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 17, 2, 1), ).setIndexNames((0, "RMON2-MIB", "hlMatrixControlIndex"), (0, "RMON2-MIB", "alMatrixDSTimeMark"), (0, "RMON2-MIB", "protocolDirLocalIndex"), (0, "RMON2-MIB", "nlMatrixDSDestAddress"), (0, "RMON2-MIB", "nlMatrixDSSourceAddress"), (0, "RMON2-MIB", "protocolDirLocalIndex"))
if mibBuilder.loadTexts: alMatrixDSEntry.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSEntry.setDescription('A conceptual row in the alMatrixDSTable.\n\n        The hlMatrixControlIndex value in the index identifies the\n        hlMatrixControlEntry on whose behalf this entry was created.\n        The first protocolDirLocalIndex value in the index identifies\n        the network-layer protocol of the alMatrixDSSourceAddress and\n        alMatrixDSDestAddress.\n        The nlMatrixDSDestAddress value in the index identifies the\n        network-layer address of the destination host in this\n\n\n\n        conversation.\n        The nlMatrixDSSourceAddress value in the index identifies the\n        network-layer address of the source host in this conversation.\n        The second protocolDirLocalIndex value in the index identifies\n        the protocol that is counted by this entry.\n\n        An example of the indexing of this entry is\n        alMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6.34.\n\n        Note that some combinations of index values may result in an\n        index that exceeds 128 sub-identifiers in length, which exceeds\n        the maximum for the SNMP protocol.  Implementations should take\n        care to avoid such combinations.')
alMatrixDSTimeMark = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: alMatrixDSTimeMark.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSTimeMark.setDescription('A TimeFilter for this entry.  See the TimeFilter textual\n        convention to see how this works.')
alMatrixDSPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 2, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixDSPkts.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSPkts.setDescription('The number of packets of this protocol type without errors\n        transmitted from the source address to the destination address\n        since this entry was added to the alMatrixDSTable.  Note that\n        this is the number of link-layer packets, so if a single\n        network-layer packet is fragmented into several link-layer\n        frames, this counter is incremented several times.')
alMatrixDSOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 2, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixDSOctets.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSOctets.setDescription("The number of octets in packets of this protocol type\n        transmitted from the source address to the destination address\n        since this entry was added to the alMatrixDSTable (excluding\n        framing bits, but including FCS octets), excluding octets\n        in packets that contained errors.\n\n        Note that this doesn't count just those octets in the particular\n        protocol frames but includes the entire packet that contained\n        the protocol.")
alMatrixDSCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 2, 1, 4), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixDSCreateTime.setStatus('current')
if mibBuilder.loadTexts: alMatrixDSCreateTime.setDescription('The value of sysUpTime when this entry was last activated.\n        This can be used by the management station to ensure that the\n        entry has not been deleted and recreated between polls.')
alMatrixTopNControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 17, 3), )
if mibBuilder.loadTexts: alMatrixTopNControlTable.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlTable.setDescription('A set of parameters that control the creation of a\n        report of the top N matrix entries according to\n        a selected metric.')
alMatrixTopNControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 17, 3, 1), ).setIndexNames((0, "RMON2-MIB", "alMatrixTopNControlIndex"))
if mibBuilder.loadTexts: alMatrixTopNControlEntry.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlEntry.setDescription('A conceptual row in the alMatrixTopNControlTable.\n\n        An example of the indexing of this table is\n        alMatrixTopNControlDuration.3')
alMatrixTopNControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alMatrixTopNControlIndex.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlIndex.setDescription('An index that uniquely identifies an entry\n        in the alMatrixTopNControlTable.  Each such\n        entry defines one topN report prepared for\n        one interface.')
alMatrixTopNControlMatrixIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlMatrixIndex.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlMatrixIndex.setDescription('The alMatrix[SD/DS] table for which a topN report will be\n        prepared on behalf of this entry.  The alMatrix[SD/DS] table\n        is identified by the value of the hlMatrixControlIndex\n        for that table - that value is used here to identify the\n        particular table.\n\n        This object may not be modified if the associated\n        alMatrixTopNControlStatus object is equal to active(1).')
alMatrixTopNControlRateBase = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("alMatrixTopNTerminalsPkts", 1), ("alMatrixTopNTerminalsOctets", 2), ("alMatrixTopNAllPkts", 3), ("alMatrixTopNAllOctets", 4), ("alMatrixTopNTerminalsHighCapacityPkts", 5), ("alMatrixTopNTerminalsHighCapacityOctets", 6), ("alMatrixTopNAllHighCapacityPkts", 7), ("alMatrixTopNAllHighCapacityOctets", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlRateBase.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlRateBase.setDescription('This object controls which alMatrix[SD/DS] entry that the\n        alMatrixTopNEntries are sorted by, which view of the matrix\n        table that will be used, as well as which table the results\n        will be reported in.\n\n        The values alMatrixTopNTerminalsPkts,\n        alMatrixTopNTerminalsOctets,\n        alMatrixTopNTerminalsHighCapacityPkts, and\n        alMatrixTopNTerminalsHighCapacityOctets cause collection\n        only from protocols that have no child protocols that are\n        counted.  The values alMatrixTopNAllPkts,\n        alMatrixTopNAllOctets, alMatrixTopNAllHighCapacityPkts, and\n        alMatrixTopNAllHighCapacityOctets cause collection from all\n        alMatrix entries.\n\n        This object may not be modified if the associated\n        alMatrixTopNControlStatus object is equal to active(1).')
alMatrixTopNControlTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlTimeRemaining.setDescription('The number of seconds left in the report currently\n        being collected.  When this object is modified by\n        the management station, a new collection is started,\n        possibly aborting a currently running report.  The\n        new value is used as the requested duration of this\n        report and is immediately loaded into the associated\n        alMatrixTopNControlDuration object.\n\n        When the report finishes, the probe will automatically\n        start another collection with the same initial value\n        of alMatrixTopNControlTimeRemaining.  Thus, the management\n        station may simply read the resulting reports repeatedly,\n        checking the startTime and duration each time to ensure that a\n        report was not missed or that the report parameters were not\n        changed.\n\n        While the value of this object is non-zero, it decrements\n        by one per second until it reaches zero.  At the time\n\n\n\n        that this object decrements to zero, the report is made\n        accessible in the alMatrixTopNTable, overwriting any report\n        that may be there.\n\n        When this object is modified by the management station, any\n        associated entries in the alMatrixTopNTable shall be deleted.\n\n        (Note that this is a different algorithm than the one used\n        in the hostTopNTable).')
alMatrixTopNControlGeneratedReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNControlGeneratedReports.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlGeneratedReports.setDescription('The number of reports that have been generated by this entry.')
alMatrixTopNControlDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNControlDuration.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlDuration.setDescription('The number of seconds that this report has collected\n        during the last sampling interval.\n\n        When the associated alMatrixTopNControlTimeRemaining object\n        is set, this object shall be set by the probe to the\n        same value and shall not be modified until the next\n        time the alMatrixTopNControlTimeRemaining is set.\n\n        This value shall be zero if no reports have been\n        requested for this alMatrixTopNControlEntry.')
alMatrixTopNControlRequestedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlRequestedSize.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlRequestedSize.setDescription('The maximum number of matrix entries requested for this report.\n\n        When this object is created or modified, the probe\n        should set alMatrixTopNControlGrantedSize as closely to this\n        object as possible for the particular probe\n        implementation and available resources.')
alMatrixTopNControlGrantedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNControlGrantedSize.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlGrantedSize.setDescription('The maximum number of matrix entries in this report.\n\n        When the associated alMatrixTopNControlRequestedSize object\n        is created or modified, the probe should set this\n        object as closely to the requested value as\n        possible for the particular implementation and\n        available resources. The probe must not lower this\n        value except as a side-effect of a set to the associated\n        alMatrixTopNControlRequestedSize object.\n\n        If the value of alMatrixTopNControlRateBase is equal to\n        alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, when the\n        next topN report is generated, matrix entries with the highest\n        value of alMatrixTopNPktRate shall be placed in this table in\n        decreasing order of this rate until there is no more room or\n        until there are no more matrix entries.\n\n        If the value of alMatrixTopNControlRateBase is equal to\n        alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, when the\n        next topN report is generated, matrix entries with the highest\n        value of alMatrixTopNOctetRate shall be placed in this table\n        in decreasing order of this rate until there is no more room\n        or until there are no more matrix entries.\n\n        It is an implementation-specific matter how entries with the\n        same value of alMatrixTopNPktRate or alMatrixTopNOctetRate are\n        sorted.  It is also an implementation-specific matter as to\n        whether zero-valued entries are available.')
alMatrixTopNControlStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNControlStartTime.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlStartTime.setDescription('The value of sysUpTime when this topN report was\n        last started.  In other words, this is the time that\n        the associated alMatrixTopNControlTimeRemaining object\n        was modified to start the requested report or the time\n        the report was last automatically (re)started.\n\n\n\n        This object may be used by the management station to\n        determine whether a report was missed.')
alMatrixTopNControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 10), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlOwner.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
alMatrixTopNControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alMatrixTopNControlStatus.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNControlStatus.setDescription('The status of this alMatrixTopNControlEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all\n        associated entries in the alMatrixTopNTable shall be\n        deleted by the agent.')
alMatrixTopNTable = MibTable((1, 3, 6, 1, 2, 1, 16, 17, 4), )
if mibBuilder.loadTexts: alMatrixTopNTable.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNTable.setDescription('A set of statistics for those application-layer matrix\n        entries that have counted the highest number of octets or\n        packets.')
alMatrixTopNEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 17, 4, 1), ).setIndexNames((0, "RMON2-MIB", "alMatrixTopNControlIndex"), (0, "RMON2-MIB", "alMatrixTopNIndex"))
if mibBuilder.loadTexts: alMatrixTopNEntry.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNEntry.setDescription('A conceptual row in the alMatrixTopNTable.\n\n        The alMatrixTopNControlIndex value in the index identifies\n        the alMatrixTopNControlEntry on whose behalf this entry was\n        created.\n\n\n\n        An example of the indexing of this table is\n        alMatrixTopNPktRate.3.10')
alMatrixTopNIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alMatrixTopNIndex.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNIndex.setDescription('An index that uniquely identifies an entry in\n        the alMatrixTopNTable among those in the same report.\n\n        This index is between 1 and N, where N is the\n        number of entries in this report.\n\n        If the value of alMatrixTopNControlRateBase is equal to\n        alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, increasing\n        values of alMatrixTopNIndex shall be assigned to entries with\n        decreasing values of alMatrixTopNPktRate until index N is\n        assigned or there are no more alMatrixTopNEntries.\n\n        If the value of alMatrixTopNControlRateBase is equal to\n        alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets,\n        increasing values of alMatrixTopNIndex shall be assigned to\n        entries with decreasing values of alMatrixTopNOctetRate until\n        index N is assigned or there are no more alMatrixTopNEntries.')
alMatrixTopNProtocolDirLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNProtocolDirLocalIndex.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNProtocolDirLocalIndex.setDescription("The protocolDirLocalIndex of the network-layer protocol of\n        this entry's network address.")
alMatrixTopNSourceAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNSourceAddress.setDescription('The network-layer address of the source host in this\n        conversation.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the associated alMatrixTopNProtocolDirLocalIndex.\n\n        For example, if the alMatrixTopNProtocolDirLocalIndex\n        indicates an encapsulation of IP, this object is encoded as a\n        length octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
alMatrixTopNDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNDestAddress.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNDestAddress.setDescription('The network-layer address of the destination host in this\n        conversation.\n\n        This is represented as an octet string with\n        specific semantics and length as identified\n        by the associated alMatrixTopNProtocolDirLocalIndex.\n\n        For example, if the alMatrixTopNProtocolDirLocalIndex\n        indicates an encapsulation of IP, this object is encoded as a\n        length octet of 4, followed by the 4 octets of the IP address,\n        in network byte order.')
alMatrixTopNAppProtocolDirLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNAppProtocolDirLocalIndex.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNAppProtocolDirLocalIndex.setDescription('The type of the protocol counted by this matrix entry.')
alMatrixTopNPktRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNPktRate.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNPktRate.setDescription('The number of packets seen of this protocol from the source\n        host to the destination host during this sampling interval,\n        counted using the rules for counting the alMatrixSDPkts\n        object.\n\n        If the value of alMatrixTopNControlRateBase is\n        alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, this\n        variable will be used to sort this report.')
alMatrixTopNReversePktRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNReversePktRate.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNReversePktRate.setDescription('The number of packets seen of this protocol from the\n        destination host to the source host during this sampling\n        interval, counted using the rules for counting the\n        alMatrixDSPkts object.  (Note that the corresponding\n        alMatrixSDPkts object selected is the one whose source address\n        is equal to alMatrixTopNDestAddress and whose destination\n        address is equal to alMatrixTopNSourceAddress.)\n\n        Note that if the value of alMatrixTopNControlRateBase is equal\n        to alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, the sort\n        of topN entries is based entirely on alMatrixTopNPktRate, and\n        not on the value of this object.')
alMatrixTopNOctetRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNOctetRate.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNOctetRate.setDescription('The number of octets seen of this protocol from the source\n        host to the destination host during this sampling interval,\n        counted using the rules for counting the alMatrixSDOctets\n        object.\n\n        If the value of alMatrixTopNControlRateBase is\n        alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, this\n        variable will be used to sort this report.')
alMatrixTopNReverseOctetRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 17, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMatrixTopNReverseOctetRate.setStatus('current')
if mibBuilder.loadTexts: alMatrixTopNReverseOctetRate.setDescription('The number of octets seen of this protocol from the\n        destination host to the source host during this sampling\n        interval, counted using the rules for counting the\n        alMatrixDSOctets object.  (Note that the corresponding\n        alMatrixSDOctets object selected is the one whose source\n        address is equal to alMatrixTopNDestAddress and whose\n        destination address is equal to alMatrixTopNSourceAddress.)\n\n        Note that if the value of alMatrixTopNControlRateBase is equal\n        to alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, the\n        sort of topN entries is based entirely on\n        alMatrixTopNOctetRate, and not on the value of this object.')
usrHistoryControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 18, 1), )
if mibBuilder.loadTexts: usrHistoryControlTable.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlTable.setDescription('A list of data-collection configuration entries.')
usrHistoryControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 18, 1, 1), ).setIndexNames((0, "RMON2-MIB", "usrHistoryControlIndex"))
if mibBuilder.loadTexts: usrHistoryControlEntry.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlEntry.setDescription('A list of parameters that set up a group of user-defined\n        MIB objects to be sampled periodically (called a\n        bucket-group).\n\n        For example, an instance of usrHistoryControlInterval\n        might be named usrHistoryControlInterval.1')
usrHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: usrHistoryControlIndex.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the\n        usrHistoryControlTable.  Each such entry defines a\n        set of samples at a particular interval for a specified\n        set of MIB instances available from the managed system.')
usrHistoryControlObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryControlObjects.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlObjects.setDescription('The number of MIB objects to be collected\n        in the portion of usrHistoryTable associated with this\n        usrHistoryControlEntry.\n\n        This object may not be modified if the associated instance\n        of usrHistoryControlStatus is equal to active(1).')
usrHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryControlBucketsRequested.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals\n        over which data is to be saved in the part of the\n        usrHistoryTable associated with this usrHistoryControlEntry.\n\n        When this object is created or modified, the probe\n        should set usrHistoryControlBucketsGranted as closely to\n        this object as possible for the particular probe\n        implementation and available resources.')
usrHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrHistoryControlBucketsGranted.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals\n        over which data shall be saved in the part of\n        the usrHistoryTable associated with this\n        usrHistoryControlEntry.\n\n        When the associated usrHistoryControlBucketsRequested\n        object is created or modified, the probe should set\n        this object as closely to the requested value as\n        possible for the particular probe implementation and\n        available resources.  The probe must not lower this\n        value except as a result of a modification to the associated\n        usrHistoryControlBucketsRequested object.\n\n        The associated usrHistoryControlBucketsRequested object\n        should be set before or at the same time as this object\n        to allow the probe to accurately estimate the resources\n        required for this usrHistoryControlEntry.\n\n        There will be times when the actual number of buckets\n        associated with this entry is less than the value of\n        this object.  In this case, at the end of each sampling\n        interval, a new bucket will be added to the usrHistoryTable.\n\n        When the number of buckets reaches the value of this object\n        and a new bucket is to be added to the usrHistoryTable,\n        the oldest bucket associated with this usrHistoryControlEntry\n        shall be deleted by the agent so that the new bucket can be\n        added.\n\n        When the value of this object changes to a value less than\n        the current value, entries are deleted from the\n        usrHistoryTable associated with this usrHistoryControlEntry.\n        Enough of the oldest of these entries shall be deleted by the\n        agent so that their number remains less than or equal to the\n        new value of this object.\n\n        When the value of this object changes to a value greater\n        than the current value, the number of associated usrHistory\n        entries may be allowed to grow.')
usrHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryControlInterval.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlInterval.setDescription('The interval in seconds over which the data is\n        sampled for each bucket in the part of the usrHistory\n        table associated with this usrHistoryControlEntry.\n\n        Because the counters in a bucket may overflow at their\n        maximum value with no indication, a prudent manager will\n        take into account the possibility of overflow in any of\n        the associated counters.  It is important to consider the\n        minimum time in which any counter could overflow on a\n        particular media type and to set the usrHistoryControlInterval\n        object to a value less than this interval.\n\n        This object may not be modified if the associated\n        usrHistoryControlStatus object is equal to active(1).')
usrHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 6), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryControlOwner.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
usrHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryControlStatus.setStatus('current')
if mibBuilder.loadTexts: usrHistoryControlStatus.setDescription('The status of this variable history control entry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.\n\n        If this object is not equal to active(1), all associated\n        entries in the usrHistoryTable shall be deleted.')
usrHistoryObjectTable = MibTable((1, 3, 6, 1, 2, 1, 16, 18, 2), )
if mibBuilder.loadTexts: usrHistoryObjectTable.setStatus('current')
if mibBuilder.loadTexts: usrHistoryObjectTable.setDescription('A list of data-collection configuration entries.')
usrHistoryObjectEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 18, 2, 1), ).setIndexNames((0, "RMON2-MIB", "usrHistoryControlIndex"), (0, "RMON2-MIB", "usrHistoryObjectIndex"))
if mibBuilder.loadTexts: usrHistoryObjectEntry.setStatus('current')
if mibBuilder.loadTexts: usrHistoryObjectEntry.setDescription('A list of MIB instances to be sampled periodically.\n\n        Entries in this table are created when an associated\n        usrHistoryControlObjects object is created.\n\n        The usrHistoryControlIndex value in the index is\n        that of the associated usrHistoryControlEntry.\n\n        For example, an instance of usrHistoryObjectVariable might be\n        usrHistoryObjectVariable.1.3')
usrHistoryObjectIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: usrHistoryObjectIndex.setStatus('current')
if mibBuilder.loadTexts: usrHistoryObjectIndex.setDescription('An index used to uniquely identify an entry in the\n        usrHistoryObject table.  Each such entry defines a\n        MIB instance to be collected periodically.')
usrHistoryObjectVariable = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryObjectVariable.setStatus('current')
if mibBuilder.loadTexts: usrHistoryObjectVariable.setDescription('The object identifier of the particular variable to be\n\n\n\n        sampled.\n\n        Only variables that resolve to an ASN.1 primitive type of\n        Integer32 (Integer32, Counter, Gauge, or TimeTicks) may be\n        sampled.\n\n        Because SNMP access control is articulated entirely in terms\n        of the contents of MIB views, no access control mechanism\n        exists that can restrict the value of this object to identify\n        only those objects that exist in a particular MIB view.\n        Because there is thus no acceptable means of restricting the\n        read access that could be obtained through the user history\n        mechanism, the probe must only grant write access to this\n        object in those views that have read access to all objects on\n        the probe.  See USM [RFC3414] and VACM [RFC3415] for more\n        information.\n\n        During a set operation, if the supplied variable name is not\n        available in the selected MIB view, a badValue error must be\n        returned.\n\n        This object may not be modified if the associated\n        usrHistoryControlStatus object is equal to active(1).')
usrHistoryObjectSampleType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usrHistoryObjectSampleType.setStatus('current')
if mibBuilder.loadTexts: usrHistoryObjectSampleType.setDescription('The method of sampling the selected variable for storage in\n        the usrHistoryTable.\n\n        If the value of this object is absoluteValue(1), the value of\n        the selected variable will be copied directly into the history\n        bucket.\n\n        If the value of this object is deltaValue(2), the value of the\n        selected variable at the last sample will be subtracted from\n        the current value, and the difference will be stored in the\n        history bucket.  If the associated usrHistoryObjectVariable\n        instance could not be obtained at the previous sample\n        interval, then a delta sample is not possible, and the value\n        of the associated usrHistoryValStatus object for this interval\n        will be valueNotAvailable(1).\n\n\n\n        This object may not be modified if the associated\n        usrHistoryControlStatus object is equal to active(1).')
usrHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 16, 18, 3), )
if mibBuilder.loadTexts: usrHistoryTable.setStatus('current')
if mibBuilder.loadTexts: usrHistoryTable.setDescription('A list of user-defined history entries.')
usrHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 18, 3, 1), ).setIndexNames((0, "RMON2-MIB", "usrHistoryControlIndex"), (0, "RMON2-MIB", "usrHistorySampleIndex"), (0, "RMON2-MIB", "usrHistoryObjectIndex"))
if mibBuilder.loadTexts: usrHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: usrHistoryEntry.setDescription('A historical sample of user-defined variables.  This sample\n        is associated with the usrHistoryControlEntry that set up the\n        parameters for a regular collection of these samples.\n\n        The usrHistoryControlIndex value in the index identifies the\n        usrHistoryControlEntry on whose behalf this entry was created.\n        The usrHistoryObjectIndex value in the index identifies the\n        usrHistoryObjectEntry on whose behalf this entry was created.\n\n        For example, an instance of usrHistoryAbsValue, which represents\n        the 14th sample of a variable collected as specified by\n        usrHistoryControlEntry.1 and usrHistoryObjectEntry.1.5,\n        would be named usrHistoryAbsValue.1.14.5')
usrHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: usrHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: usrHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this\n        entry represents among all samples associated with the same\n        usrHistoryControlEntry.  This index starts at 1 and increases\n        by one as each new sample is taken.')
usrHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrHistoryIntervalStart.setStatus('current')
if mibBuilder.loadTexts: usrHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over\n        which this sample was measured.  If the probe keeps track of\n        the time of day, it should start the first sample of the\n        history at a time such that when the next hour of the day\n        begins, a sample is started at that instant.\n\n        Note that following this rule may require that the probe delay\n        collecting the first sample of the history, as each sample\n        must be of the same interval.  Also note that the sample that\n        is currently being collected is not accessible in this table\n        until the end of its interval.')
usrHistoryIntervalEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrHistoryIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: usrHistoryIntervalEnd.setDescription('The value of sysUpTime at the end of the interval over which\n        this sample was measured.')
usrHistoryAbsValue = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrHistoryAbsValue.setStatus('current')
if mibBuilder.loadTexts: usrHistoryAbsValue.setDescription("The absolute value (i.e., unsigned value) of the\n        user-specified statistic during the last sampling period.  The\n        value during the current sampling period is not made available\n        until the period is completed.\n\n        To obtain the true value for this sampling interval, the\n        associated instance of usrHistoryValStatus must be checked,\n        and usrHistoryAbsValue adjusted as necessary.\n\n\n\n\n        If the MIB instance could not be accessed during the sampling\n        interval, then this object will have a value of zero, and the\n        associated instance of usrHistoryValStatus will be set to\n        'valueNotAvailable(1)'.\n\n        The access control check prescribed in the definition of\n        usrHistoryObjectVariable SHOULD be checked for each sampling\n        interval.  If this check determines that access should not be\n        allowed, then this object will have a value of zero, and the\n        associated instance of usrHistoryValStatus will be set to\n        'valueNotAvailable(1)'.")
usrHistoryValStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valueNotAvailable", 1), ("valuePositive", 2), ("valueNegative", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrHistoryValStatus.setStatus('current')
if mibBuilder.loadTexts: usrHistoryValStatus.setDescription("This object indicates the validity and sign of the data in\n        the associated instance of usrHistoryAbsValue.\n\n        If the MIB instance could not be accessed during the sampling\n        interval, then 'valueNotAvailable(1)' will be returned.\n\n        If the sample is valid and the actual value of the sample is\n        greater than or equal to zero, then 'valuePositive(2)' is\n        returned.\n\n        If the sample is valid and the actual value of the sample is\n        less than zero, 'valueNegative(3)' will be returned.  The\n        associated instance of usrHistoryAbsValue should be multiplied\n        by -1 to obtain the true sample value.")
class ControlString(TextualConvention, OctetString):
    description = "This data type is used to communicate with a modem or a\n\n\n\n        serial data switch.  A ControlString contains embedded\n        commands to control how the device will interact with the\n        remote device through the serial interface.  Commands are\n        represented as two-character sequences beginning with\n        the '^' character.\n\n        The following commands are recognized by the device (note\n        that command characters are case sensitive):\n\n           ^s  Send string that follows, which is terminated by the\n               next command or the end of string.\n           ^c  Delay for the number of seconds that follows.  Toss\n               out any data received rather than store it in a\n               buffer for parsing.\n           ^t  Set timeout to the value represented by the decimal\n               digits that follow.  The default timeout is 20\n               seconds.  Note that this timeout may be overridden\n               by a smaller serialTimeout configured for the\n               associated serial interface (see serialConfigTable).\n           ^w  Wait for the reply string that follows, which is\n               terminated by the next command or the end of string.\n               Partial and case-insensitive matching is applied, i.e.,\n               if the reply string (any case combination) is found\n               anywhere in the received string, then the a match is\n               found.  If the current timeout elapses without a match,\n               then the remaining control string is ignored.\n           ^!  The ^ character.\n           ^d  Delay the number of seconds specified by the decimal\n               digits that follow.\n           ^b  Send break for the number of milliseconds specified by\n               the decimal digits that follow.  If no digits follow,\n               break will be enforced for 250 milliseconds by default.\n\n        The following ASCII control characters may be inserted into\n        the '^s' send string or the '^w' reply string:\n\n           ^@    0x00\n           ^A    0x01\n            ..\n           ^M    0x0D\n            ..\n           ^Z    0x1A\n           ^[    0x1B\n           ^    0x1C\n           ^]    0x1D\n           ^^    0x1E\n           ^_    0x1F\n\n\n\n\n        Binary data may also be inserted into the data stream.  The\n        control sequence for each byte of binary data is ^0x##, where\n        ## is the hexadecimal representation of the data byte.  Two\n        ASCII characters (0-9, a-f, A-F) must follow the '^0x'\n        control prefix.  For example, '^0x0D^0x0A' is interpreted as a\n        carriage return followed by a line feed."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

probeCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 1), Bits().clone(namedValues=NamedValues(("etherStats", 0), ("historyControl", 1), ("etherHistory", 2), ("alarm", 3), ("hosts", 4), ("hostTopN", 5), ("matrix", 6), ("filter", 7), ("capture", 8), ("event", 9), ("tokenRingMLStats", 10), ("tokenRingPStats", 11), ("tokenRingMLHistory", 12), ("tokenRingPHistory", 13), ("ringStation", 14), ("ringStationOrder", 15), ("ringStationConfig", 16), ("sourceRouting", 17), ("protocolDirectory", 18), ("protocolDistribution", 19), ("addressMapping", 20), ("nlHost", 21), ("nlMatrix", 22), ("alHost", 23), ("alMatrix", 24), ("usrHistory", 25), ("probeConfig", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeCapabilities.setStatus('current')
if mibBuilder.loadTexts: probeCapabilities.setDescription('An indication of the RMON MIB groups supported\n        on at least one interface by this probe.')
probeSoftwareRev = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeSoftwareRev.setStatus('current')
if mibBuilder.loadTexts: probeSoftwareRev.setDescription('The software revision of this device.  This string will have\n        a zero length if the revision is unknown.')
probeHardwareRev = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeHardwareRev.setStatus('current')
if mibBuilder.loadTexts: probeHardwareRev.setDescription('The hardware revision of this device.  This string will have\n        a zero length if the revision is unknown.')
probeDateTime = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeDateTime.setStatus('current')
if mibBuilder.loadTexts: probeDateTime.setDescription("Probe's current date and time.\n\n         field  octets  contents                  range\n         -----  ------  --------                  -----\n           1      1-2   year                      0..65536\n           2       3    month                     1..12\n           3       4    day                       1..31\n           4       5    hour                      0..23\n           5       6    minutes                   0..59\n           6       7    seconds                   0..60\n                         (use 60 for leap-second)\n           7       8    deci-seconds              0..9\n           8       9    direction from UTC        '+' / '-'\n           9      10    hours from UTC            0..11\n          10      11    minutes from UTC          0..59\n\n         For example, Tuesday May 26, 1992 at 1:30:15 PM\n         EDT would be displayed as:\n\n                     1992-5-26,13:30:15.0,-4:0\n\n         Note that if only local time is known, then\n         time zone information (fields 8-10) is not\n         present, and that if no time information is known, the\n         null string is returned.")
probeResetControl = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeResetControl.setStatus('current')
if mibBuilder.loadTexts: probeResetControl.setDescription('Setting this object to warmBoot(2) causes the device to\n        restart the application software with current configuration\n        parameters saved in non-volatile memory.  Setting this\n        object to coldBoot(3) causes the device to reinitialize\n        configuration parameters in non-volatile memory to default\n        values and to restart the application software.  When the device\n        is running normally, this variable has a value of\n        running(1).')
probeDownloadFile = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeDownloadFile.setStatus('deprecated')
if mibBuilder.loadTexts: probeDownloadFile.setDescription('The file name to be downloaded from the TFTP server when a\n        download is next requested via this MIB.  This value is set to\n        the zero-length string when no file name has been specified.\n\n        This object has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.')
probeDownloadTFTPServer = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeDownloadTFTPServer.setStatus('deprecated')
if mibBuilder.loadTexts: probeDownloadTFTPServer.setDescription("The IP address of the TFTP server that contains the boot\n        image to load when a download is next requested via this MIB.\n        This value is set to '0.0.0.0' when no IP address has been\n\n\n\n        specified.\n\n        This object has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.")
probeDownloadAction = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDownloading", 1), ("downloadToPROM", 2), ("downloadToRAM", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeDownloadAction.setStatus('deprecated')
if mibBuilder.loadTexts: probeDownloadAction.setDescription('When this object is set to downloadToRAM(3) or\n        downloadToPROM(2), the device will discontinue its\n        normal operation and begin download of the image specified\n        by probeDownloadFile from the server specified by\n        probeDownloadTFTPServer using the TFTP protocol.  If\n        downloadToRAM(3) is specified, the new image is copied\n        to RAM only (the old image remains unaltered in the flash\n        EPROM).  If downloadToPROM(2) is specified,\n        the new image is written to the flash EPROM\n        memory after its checksum has been verified to be correct.\n        When the download process is completed, the device will\n        warm boot to restart the newly loaded application.\n        When the device is not downloading, this object will have\n        a value of notDownloading(1).\n\n        This object has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.')
probeDownloadStatus = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("downloadSuccess", 1), ("downloadStatusUnknown", 2), ("downloadGeneralError", 3), ("downloadNoResponseFromServer", 4), ("downloadChecksumError", 5), ("downloadIncompatibleImage", 6), ("downloadTftpFileNotFound", 7), ("downloadTftpAccessViolation", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeDownloadStatus.setStatus('deprecated')
if mibBuilder.loadTexts: probeDownloadStatus.setDescription('The status of the last download procedure, if any.  This\n        object will have a value of downloadStatusUnknown(2) if no\n        download process has been performed.\n\n        This object has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.')
serialConfigTable = MibTable((1, 3, 6, 1, 2, 1, 16, 19, 10), )
if mibBuilder.loadTexts: serialConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: serialConfigTable.setDescription('A table of serial interface configuration entries.  This data\n        will be stored in non-volatile memory and preserved across\n        probe resets or power loss.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.')
serialConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 19, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: serialConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: serialConfigEntry.setDescription('A set of configuration parameters for a particular\n        serial interface on this device.  If the device has no serial\n        interfaces, this table is empty.\n\n        The index is composed of the ifIndex assigned to this serial\n        line interface.')
serialMode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("modem", 2))).clone('direct')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialMode.setStatus('deprecated')
if mibBuilder.loadTexts: serialMode.setDescription('The type of incoming connection to be expected on this\n         serial interface.')
serialProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("slip", 2), ("ppp", 3))).clone('slip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: serialProtocol.setDescription('The type of data link encapsulation to be used on this\n        serial interface.')
serialTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: serialTimeout.setDescription('This timeout value is used when the Management Station has\n        initiated the conversation over the serial link.  This variable\n        represents the number of seconds of inactivity allowed before\n        terminating the connection on this serial interface.  Use the\n        serialDialoutTimeout in the case where the probe has initiated\n        the connection for the purpose of sending a trap.')
serialModemInitString = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 4), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialModemInitString.setStatus('deprecated')
if mibBuilder.loadTexts: serialModemInitString.setDescription("A control string that controls how a modem attached to this\n        serial interface should be initialized.  The initialization\n        is performed once during startup and again after each\n        connection is terminated if the associated serialMode has the\n        value of modem(2).\n\n        A control string that is appropriate for a wide variety of\n        modems is: '^s^MATE0Q0V1X4 S0=1 S2=43^M'.")
serialModemHangUpString = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 5), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialModemHangUpString.setStatus('deprecated')
if mibBuilder.loadTexts: serialModemHangUpString.setDescription("A control string that specifies how to disconnect a modem\n         connection on this serial interface.  This object is only\n         meaningful if the associated serialMode has the value\n         of modem(2).\n\n         A control string that is appropriate for a wide variety of\n         modems is: '^d2^s+++^d2^sATH0^M^d2'.")
serialModemConnectResp = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialModemConnectResp.setStatus('deprecated')
if mibBuilder.loadTexts: serialModemConnectResp.setDescription("An ASCII string containing substrings that describe the\n        expected modem connection response code and associated bps\n        rate.  The substrings are delimited by the first character\n        in the string, for example:\n           /CONNECT/300/CONNECT 1200/1200/CONNECT 2400/2400/\n           CONNECT 4800/4800/CONNECT 9600/9600\n        will be interpreted as:\n            response code    bps rate\n            CONNECT            300\n            CONNECT 1200      1200\n            CONNECT 2400      2400\n            CONNECT 4800      4800\n            CONNECT 9600      9600\n        The agent will use the information in this string to adjust\n        the bps rate of this serial interface once a modem connection\n        is established.\n\n        A value that is appropriate for a wide variety of modems is:\n\n\n\n        '/CONNECT/300/CONNECT 1200/1200/CONNECT 2400/2400/\n         CONNECT 4800/4800/CONNECT 9600/9600/CONNECT 14400/14400/\n        CONNECT 19200/19200/CONNECT 38400/38400/'.")
serialModemNoConnectResp = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialModemNoConnectResp.setStatus('deprecated')
if mibBuilder.loadTexts: serialModemNoConnectResp.setDescription("An ASCII string containing response codes that may be\n        generated by a modem to report the reason why a connection\n        attempt has failed.  The response codes are delimited by\n        the first character in the string, for example:\n           /NO CARRIER/BUSY/NO DIALTONE/NO ANSWER/ERROR/\n\n        If one of these response codes is received via this serial\n        interface while attempting to make a modem connection,\n        the agent will issue the hang up command as specified by\n        serialModemHangUpString.\n\n        A value that is appropriate for a wide variety of modems is:\n        '/NO CARRIER/BUSY/NO DIALTONE/NO ANSWER/ERROR/'.")
serialDialoutTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialDialoutTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: serialDialoutTimeout.setDescription('This timeout value is used when the probe initiates the\n        serial connection with the intention of contacting a\n        management station.  This variable represents the number\n        of seconds of inactivity allowed before terminating the\n        connection on this serial interface.')
serialStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialStatus.setStatus('deprecated')
if mibBuilder.loadTexts: serialStatus.setDescription('The status of this serialConfigEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.')
netConfigTable = MibTable((1, 3, 6, 1, 2, 1, 16, 19, 11), )
if mibBuilder.loadTexts: netConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: netConfigTable.setDescription('A table of netConfigEntries.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability to\n        meet the requirements of a Draft Standard.')
netConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 19, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: netConfigEntry.setDescription('A set of configuration parameters for a particular\n        network interface on this device.  If the device has no network\n        interface, this table is empty.\n\n        The index is composed of the ifIndex assigned to the\n        corresponding interface.')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 11, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface.  The default value\n        for this object is 0.0.0.0.  If either the netConfigIPAddress\n        or netConfigSubnetMask is 0.0.0.0, then when the device\n        boots, it may use BOOTP to try to figure out what these\n        values should be.  If BOOTP fails before the device\n        can talk on the network, this value must be configured\n        (e.g., through a terminal attached to the device).  If BOOTP is\n        used, care should be taken to not send BOOTP broadcasts too\n        frequently and to eventually send them very infrequently if no\n        replies are received.')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('deprecated')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface.  The default value\n        for this object is 0.0.0.0.  If either the netConfigIPAddress\n        or netConfigSubnetMask is 0.0.0.0, then when the device\n        boots, it may use BOOTP to try to figure out what these\n        values should be.  If BOOTP fails before the device\n        can talk on the network, this value must be configured\n        (e.g., through a terminal attached to the device).  If BOOTP is\n        used, care should be taken to not send BOOTP broadcasts too\n        frequently and to eventually send them very infrequently if no\n        replies are received.')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: netConfigStatus.setDescription('The status of this netConfigEntry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.')
netDefaultGateway = MibScalar((1, 3, 6, 1, 2, 1, 16, 19, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('deprecated')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway.  If this value is\n        undefined or unknown, it shall have the value 0.0.0.0.')
trapDestTable = MibTable((1, 3, 6, 1, 2, 1, 16, 19, 13), )
if mibBuilder.loadTexts: trapDestTable.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of trap destination entries.')
trapDestEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 19, 13, 1), ).setIndexNames((0, "RMON2-MIB", "trapDestIndex"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestEntry.setDescription('This entry includes a destination IP address to which\n        traps are sent for this community.')
trapDestIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: trapDestIndex.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestIndex.setDescription('A value that uniquely identifies this trapDestEntry.')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestCommunity.setDescription('A community to which this destination address belongs.\n        This entry is associated with any eventEntries in the RMON\n        MIB whose value of eventCommunity is equal to the value of\n        this object.  Every time an associated event entry sends a\n        trap due to an event, that trap will be sent to each\n\n\n\n        address in the trapDestTable with a trapDestCommunity equal\n        to eventCommunity, as long as no access control mechanism\n        precludes it (e.g., VACM).\n\n        This object may not be modified if the associated\n        trapDestStatus object is equal to active(1).')
trapDestProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestProtocol.setDescription('The protocol with which this trap is to be sent.')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestAddress.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestAddress.setDescription("The destination address for traps on behalf of this entry.\n\n        If the associated trapDestProtocol object is equal to ip(1),\n        the encoding of this object is the same as the snmpUDPAddress\n        textual convention in RFC 3417, 'Transport Mappings for the\n         Simple Network Management Protocol (SNMP)' [RFC3417]:\n          -- for a SnmpUDPAddress of length 6:\n          --\n          -- octets   contents        encoding\n          --  1-4     IP-address      network-byte order\n          --  5-6     UDP-port        network-byte order\n\n        If the associated trapDestProtocol object is equal to ipx(2),\n        the encoding of this object is the same as the snmpIPXAddress\n        textual convention in RFC 3417, 'Transport Mappings for the\n         Simple Network Management Protocol (SNMP)' [RFC3417]:\n          -- for a SnmpIPXAddress of length 12:\n          --\n          -- octets   contents            encoding\n          --  1-4     network-number      network-byte order\n          --  5-10    physical-address    network-byte order\n          -- 11-12    socket-number       network-byte order\n\n        This object may not be modified if the associated\n\n\n\n        trapDestStatus object is equal to active(1).")
trapDestOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestOwner.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('deprecated')
if mibBuilder.loadTexts: trapDestStatus.setDescription('The status of this trap destination entry.\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.')
serialConnectionTable = MibTable((1, 3, 6, 1, 2, 1, 16, 19, 14), )
if mibBuilder.loadTexts: serialConnectionTable.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectionTable.setDescription('A list of serialConnectionEntries.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability\n        to meet the requirements of a Draft Standard.')
serialConnectionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 19, 14, 1), ).setIndexNames((0, "RMON2-MIB", "serialConnectIndex"))
if mibBuilder.loadTexts: serialConnectionEntry.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectionEntry.setDescription('Configuration for a SLIP link over a serial line.')
serialConnectIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: serialConnectIndex.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectIndex.setDescription('A value that uniquely identifies this serialConnection\n        entry.')
serialConnectDestIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectDestIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectDestIpAddress.setDescription('The IP Address that can be reached at the other end of this\n        serial connection.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).')
serialConnectType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("direct", 1), ("modem", 2), ("switch", 3), ("modemSwitch", 4))).clone('direct')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectType.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectType.setDescription('The type of outgoing connection to be made.  If this object\n        has the value direct(1), then a direct serial connection\n        is assumed.  If this object has the value modem(2),\n        then serialConnectDialString will be used to make a modem\n        connection.  If this object has the value switch(3),\n        then serialConnectSwitchConnectSeq will be used to establish\n        the connection over a serial data switch, and\n        serialConnectSwitchDisconnectSeq will be used to terminate\n        the connection.  If this object has the value\n        modem-switch(4), then a modem connection will be made first,\n        followed by the switch connection.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).')
serialConnectDialString = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 4), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectDialString.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectDialString.setDescription("A control string that specifies how to dial the phone\n        number in order to establish a modem connection.  The\n        string should include the dialing prefix and suffix.  For\n        example: '^s^MATD9,888-1234^M' will instruct the Probe\n        to send a carriage return, followed by the dialing prefix\n        'ATD', the phone number '9,888-1234', and a carriage\n        return as the dialing suffix.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).")
serialConnectSwitchConnectSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 5), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectSwitchConnectSeq.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectSwitchConnectSeq.setDescription('A control string that specifies how to establish a\n        data switch connection.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).')
serialConnectSwitchDisconnectSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 6), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectSwitchDisconnectSeq.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectSwitchDisconnectSeq.setDescription('A control string that specifies how to terminate a\n        data switch connection.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).')
serialConnectSwitchResetSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 7), ControlString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectSwitchResetSeq.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectSwitchResetSeq.setDescription('A control string that specifies how to reset a data\n        switch in the event of a timeout.\n\n        This object may not be modified if the associated\n        serialConnectStatus object is equal to active(1).')
serialConnectOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 8), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectOwner.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
serialConnectStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 19, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serialConnectStatus.setStatus('deprecated')
if mibBuilder.loadTexts: serialConnectStatus.setDescription('The status of this serialConnectionEntry.\n\n        If the manager attempts to set this object to active(1) when\n        the serialConnectType is set to modem(2) or modem-switch(4)\n        and the serialConnectDialString is a zero-length string or\n        cannot be correctly parsed as a ConnectString, the set\n        request will be rejected with badValue(3).\n\n        If the manager attempts to set this object to active(1) when\n        the serialConnectType is set to switch(3) or modem-switch(4)\n        and the serialConnectSwitchConnectSeq,\n        the serialConnectSwitchDisconnectSeq, or\n\n\n\n        the serialConnectSwitchResetSeq is a zero-length string\n        or cannot be correctly parsed as a ConnectString, the set\n        request will be rejected with badValue(3).\n\n        An entry may not exist in the active state unless all\n        objects in the entry have an appropriate value.')
etherStats2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 4), )
if mibBuilder.loadTexts: etherStats2Table.setStatus('current')
if mibBuilder.loadTexts: etherStats2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.')
etherStats2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 4, 1), )
etherStatsEntry.registerAugmentions(("RMON2-MIB", "etherStats2Entry"))
etherStats2Entry.setIndexNames(*etherStatsEntry.getIndexNames())
if mibBuilder.loadTexts: etherStats2Entry.setStatus('current')
if mibBuilder.loadTexts: etherStats2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
etherStatsDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: etherStatsDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
etherStatsCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 4, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsCreateTime.setStatus('current')
if mibBuilder.loadTexts: etherStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
historyControl2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 5), )
if mibBuilder.loadTexts: historyControl2Table.setStatus('current')
if mibBuilder.loadTexts: historyControl2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.')
historyControl2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 5, 1), )
historyControlEntry.registerAugmentions(("RMON2-MIB", "historyControl2Entry"))
historyControl2Entry.setIndexNames(*historyControlEntry.getIndexNames())
if mibBuilder.loadTexts: historyControl2Entry.setStatus('current')
if mibBuilder.loadTexts: historyControl2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
historyControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: historyControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hostControl2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 4, 4), )
if mibBuilder.loadTexts: hostControl2Table.setStatus('current')
if mibBuilder.loadTexts: hostControl2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.')
hostControl2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 4, 4, 1), )
hostControlEntry.registerAugmentions(("RMON2-MIB", "hostControl2Entry"))
hostControl2Entry.setIndexNames(*hostControlEntry.getIndexNames())
if mibBuilder.loadTexts: hostControl2Entry.setStatus('current')
if mibBuilder.loadTexts: hostControl2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
hostControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hostControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n\n\n\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
hostControlCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 4, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostControlCreateTime.setStatus('current')
if mibBuilder.loadTexts: hostControlCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
matrixControl2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 6, 4), )
if mibBuilder.loadTexts: matrixControl2Table.setStatus('current')
if mibBuilder.loadTexts: matrixControl2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.')
matrixControl2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 6, 4, 1), )
matrixControlEntry.registerAugmentions(("RMON2-MIB", "matrixControl2Entry"))
matrixControl2Entry.setIndexNames(*matrixControlEntry.getIndexNames())
if mibBuilder.loadTexts: matrixControl2Entry.setStatus('current')
if mibBuilder.loadTexts: matrixControl2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
matrixControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixControlDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: matrixControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
matrixControlCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 4, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixControlCreateTime.setStatus('current')
if mibBuilder.loadTexts: matrixControlCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
channel2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 7, 3), )
if mibBuilder.loadTexts: channel2Table.setStatus('current')
if mibBuilder.loadTexts: channel2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.')
channel2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 7, 3, 1), )
channelEntry.registerAugmentions(("RMON2-MIB", "channel2Entry"))
channel2Entry.setIndexNames(*channelEntry.getIndexNames())
if mibBuilder.loadTexts: channel2Entry.setStatus('current')
if mibBuilder.loadTexts: channel2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
channelDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 7, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: channelDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
channelCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 7, 3, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCreateTime.setStatus('current')
if mibBuilder.loadTexts: channelCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
tokenRingMLStats2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 5), )
if mibBuilder.loadTexts: tokenRingMLStats2Table.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingMLStats2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability\n        to meet the requirements of a Draft Standard.')
tokenRingMLStats2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 5, 1), )
tokenRingMLStatsEntry.registerAugmentions(("RMON2-MIB", "tokenRingMLStats2Entry"))
tokenRingMLStats2Entry.setIndexNames(*tokenRingMLStatsEntry.getIndexNames())
if mibBuilder.loadTexts: tokenRingMLStats2Entry.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingMLStats2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
tokenRingMLStatsDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsDroppedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingMLStatsDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
tokenRingMLStatsCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 5, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsCreateTime.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingMLStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
tokenRingPStats2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 6), )
if mibBuilder.loadTexts: tokenRingPStats2Table.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingPStats2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability\n        to meet the requirements of a Draft Standard.')
tokenRingPStats2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 6, 1), )
tokenRingPStatsEntry.registerAugmentions(("RMON2-MIB", "tokenRingPStats2Entry"))
tokenRingPStats2Entry.setIndexNames(*tokenRingPStatsEntry.getIndexNames())
if mibBuilder.loadTexts: tokenRingPStats2Entry.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingPStats2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
tokenRingPStatsDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDroppedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingPStatsDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
tokenRingPStatsCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 6, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsCreateTime.setStatus('deprecated')
if mibBuilder.loadTexts: tokenRingPStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
ringStationControl2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 7), )
if mibBuilder.loadTexts: ringStationControl2Table.setStatus('deprecated')
if mibBuilder.loadTexts: ringStationControl2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability\n        to meet the requirements of a Draft Standard.')
ringStationControl2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 7, 1), )
ringStationControlEntry.registerAugmentions(("RMON2-MIB", "ringStationControl2Entry"))
ringStationControl2Entry.setIndexNames(*ringStationControlEntry.getIndexNames())
if mibBuilder.loadTexts: ringStationControl2Entry.setStatus('deprecated')
if mibBuilder.loadTexts: ringStationControl2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
ringStationControlDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlDroppedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: ringStationControlDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
ringStationControlCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 7, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlCreateTime.setStatus('deprecated')
if mibBuilder.loadTexts: ringStationControlCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n\n\n\n        ensure that the table has not been deleted and recreated\n        between polls.')
sourceRoutingStats2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 8), )
if mibBuilder.loadTexts: sourceRoutingStats2Table.setStatus('deprecated')
if mibBuilder.loadTexts: sourceRoutingStats2Table.setDescription('Contains the RMON-2 augmentations to RMON-1.\n\n        This table has been deprecated, as it has not had enough\n        independent implementations to demonstrate interoperability\n        to meet the requirements of a Draft Standard.')
sourceRoutingStats2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 8, 1), )
sourceRoutingStatsEntry.registerAugmentions(("RMON2-MIB", "sourceRoutingStats2Entry"))
sourceRoutingStats2Entry.setIndexNames(*sourceRoutingStatsEntry.getIndexNames())
if mibBuilder.loadTexts: sourceRoutingStats2Entry.setStatus('deprecated')
if mibBuilder.loadTexts: sourceRoutingStats2Entry.setDescription('Contains the RMON-2 augmentations to RMON-1.')
sourceRoutingStatsDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsDroppedFrames.setStatus('deprecated')
if mibBuilder.loadTexts: sourceRoutingStatsDroppedFrames.setDescription('The total number of frames that were received by the probe\n        and therefore not accounted for in the *StatsDropEvents, but\n        that the probe chose not to count for this entry for\n        whatever reason.  Most often, this event occurs when the\n        probe is out of some resources and decides to shed load from\n        this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
sourceRoutingStatsCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 8, 1, 2), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsCreateTime.setStatus('deprecated')
if mibBuilder.loadTexts: sourceRoutingStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last\n        activated.  This can be used by the management station to\n        ensure that the table has not been deleted and recreated\n        between polls.')
filter2Table = MibTable((1, 3, 6, 1, 2, 1, 16, 7, 4), )
if mibBuilder.loadTexts: filter2Table.setStatus('current')
if mibBuilder.loadTexts: filter2Table.setDescription('Provides a variable-length packet filter feature to the\n        RMON-1 filter table.')
filter2Entry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 7, 4, 1), )
filterEntry.registerAugmentions(("RMON2-MIB", "filter2Entry"))
filter2Entry.setIndexNames(*filterEntry.getIndexNames())
if mibBuilder.loadTexts: filter2Entry.setStatus('current')
if mibBuilder.loadTexts: filter2Entry.setDescription('Provides a variable-length packet filter feature to the\n        RMON-1 filter table.')
filterProtocolDirDataLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterProtocolDirDataLocalIndex.setStatus('current')
if mibBuilder.loadTexts: filterProtocolDirDataLocalIndex.setDescription("When this object is set to a non-zero value, the filter that\n        it is associated with performs the following operations on\n        every packet:\n\n        1) If the packet doesn't match the protocol directory entry\n           identified by this object, discard the packet and exit\n           (i.e., discard the packet if it is not of the identified\n           protocol).\n\n\n\n        2) If the associated filterProtocolDirLocalIndex is non-zero\n           and the packet doesn't match the protocol directory\n           entry identified by that object, discard the packet and\n           exit.\n        3) If the packet matches, perform the regular filter\n           algorithm as if the beginning of this named protocol is\n           the beginning of the packet, potentially applying the\n           filterOffset value to move further into the packet.")
filterProtocolDirLocalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterProtocolDirLocalIndex.setStatus('current')
if mibBuilder.loadTexts: filterProtocolDirLocalIndex.setDescription("When this object is set to a non-zero value, the filter that\n        it is associated with will discard the packet if the packet\n        doesn't match this protocol directory entry.")
rmon2MIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 1))
rmon2MIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 2))
rmon2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 1, 1)).setObjects(("RMON2-MIB", "protocolDirectoryGroup"), ("RMON2-MIB", "protocolDistributionGroup"), ("RMON2-MIB", "addressMapGroup"), ("RMON2-MIB", "nlHostGroup"), ("RMON2-MIB", "nlMatrixGroup"), ("RMON2-MIB", "usrHistoryGroup"), ("RMON2-MIB", "probeInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rmon2MIBCompliance = rmon2MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rmon2MIBCompliance.setDescription('Describes the requirements for conformance to\n        the RMON2 MIB')
rmon2MIBApplicationLayerCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 1, 2)).setObjects(("RMON2-MIB", "protocolDirectoryGroup"), ("RMON2-MIB", "protocolDistributionGroup"), ("RMON2-MIB", "addressMapGroup"), ("RMON2-MIB", "nlHostGroup"), ("RMON2-MIB", "nlMatrixGroup"), ("RMON2-MIB", "alHostGroup"), ("RMON2-MIB", "alMatrixGroup"), ("RMON2-MIB", "usrHistoryGroup"), ("RMON2-MIB", "probeInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rmon2MIBApplicationLayerCompliance = rmon2MIBApplicationLayerCompliance.setStatus('current')
if mibBuilder.loadTexts: rmon2MIBApplicationLayerCompliance.setDescription('Describes the requirements for conformance to\n        the RMON2 MIB with Application-Layer Enhancements.')
protocolDirectoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 1)).setObjects(("RMON2-MIB", "protocolDirLastChange"), ("RMON2-MIB", "protocolDirLocalIndex"), ("RMON2-MIB", "protocolDirDescr"), ("RMON2-MIB", "protocolDirType"), ("RMON2-MIB", "protocolDirAddressMapConfig"), ("RMON2-MIB", "protocolDirHostConfig"), ("RMON2-MIB", "protocolDirMatrixConfig"), ("RMON2-MIB", "protocolDirOwner"), ("RMON2-MIB", "protocolDirStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protocolDirectoryGroup = protocolDirectoryGroup.setStatus('current')
if mibBuilder.loadTexts: protocolDirectoryGroup.setDescription('Lists the inventory of protocols the probe has the\n        capability of monitoring and allows the addition, deletion,\n        and configuration of entries in this list.')
protocolDistributionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 2)).setObjects(("RMON2-MIB", "protocolDistControlDataSource"), ("RMON2-MIB", "protocolDistControlDroppedFrames"), ("RMON2-MIB", "protocolDistControlCreateTime"), ("RMON2-MIB", "protocolDistControlOwner"), ("RMON2-MIB", "protocolDistControlStatus"), ("RMON2-MIB", "protocolDistStatsPkts"), ("RMON2-MIB", "protocolDistStatsOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protocolDistributionGroup = protocolDistributionGroup.setStatus('current')
if mibBuilder.loadTexts: protocolDistributionGroup.setDescription('Collects the relative amounts of octets and packets for the\n        different protocols detected on a network segment.')
addressMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 3)).setObjects(("RMON2-MIB", "addressMapInserts"), ("RMON2-MIB", "addressMapDeletes"), ("RMON2-MIB", "addressMapMaxDesiredEntries"), ("RMON2-MIB", "addressMapControlDataSource"), ("RMON2-MIB", "addressMapControlDroppedFrames"), ("RMON2-MIB", "addressMapControlOwner"), ("RMON2-MIB", "addressMapControlStatus"), ("RMON2-MIB", "addressMapPhysicalAddress"), ("RMON2-MIB", "addressMapLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    addressMapGroup = addressMapGroup.setStatus('current')
if mibBuilder.loadTexts: addressMapGroup.setDescription('Lists MAC address to network address bindings discovered by\n        the probe and what interface they were last seen on.')
nlHostGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 4)).setObjects(("RMON2-MIB", "hlHostControlDataSource"), ("RMON2-MIB", "hlHostControlNlDroppedFrames"), ("RMON2-MIB", "hlHostControlNlInserts"), ("RMON2-MIB", "hlHostControlNlDeletes"), ("RMON2-MIB", "hlHostControlNlMaxDesiredEntries"), ("RMON2-MIB", "hlHostControlAlDroppedFrames"), ("RMON2-MIB", "hlHostControlAlInserts"), ("RMON2-MIB", "hlHostControlAlDeletes"), ("RMON2-MIB", "hlHostControlAlMaxDesiredEntries"), ("RMON2-MIB", "hlHostControlOwner"), ("RMON2-MIB", "hlHostControlStatus"), ("RMON2-MIB", "nlHostInPkts"), ("RMON2-MIB", "nlHostOutPkts"), ("RMON2-MIB", "nlHostInOctets"), ("RMON2-MIB", "nlHostOutOctets"), ("RMON2-MIB", "nlHostOutMacNonUnicastPkts"), ("RMON2-MIB", "nlHostCreateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nlHostGroup = nlHostGroup.setStatus('current')
if mibBuilder.loadTexts: nlHostGroup.setDescription('Counts the amount of traffic sent from and to each network\n        address discovered by the probe.  Note that while the\n        hlHostControlTable also has objects that control an optional\n        alHostTable, implementation of the alHostTable is not\n        required to fully implement this group.')
nlMatrixGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 5)).setObjects(("RMON2-MIB", "hlMatrixControlDataSource"), ("RMON2-MIB", "hlMatrixControlNlDroppedFrames"), ("RMON2-MIB", "hlMatrixControlNlInserts"), ("RMON2-MIB", "hlMatrixControlNlDeletes"), ("RMON2-MIB", "hlMatrixControlNlMaxDesiredEntries"), ("RMON2-MIB", "hlMatrixControlAlDroppedFrames"), ("RMON2-MIB", "hlMatrixControlAlInserts"), ("RMON2-MIB", "hlMatrixControlAlDeletes"), ("RMON2-MIB", "hlMatrixControlAlMaxDesiredEntries"), ("RMON2-MIB", "hlMatrixControlOwner"), ("RMON2-MIB", "hlMatrixControlStatus"), ("RMON2-MIB", "nlMatrixSDPkts"), ("RMON2-MIB", "nlMatrixSDOctets"), ("RMON2-MIB", "nlMatrixSDCreateTime"), ("RMON2-MIB", "nlMatrixDSPkts"), ("RMON2-MIB", "nlMatrixDSOctets"), ("RMON2-MIB", "nlMatrixDSCreateTime"), ("RMON2-MIB", "nlMatrixTopNControlMatrixIndex"), ("RMON2-MIB", "nlMatrixTopNControlRateBase"), ("RMON2-MIB", "nlMatrixTopNControlTimeRemaining"), ("RMON2-MIB", "nlMatrixTopNControlGeneratedReports"), ("RMON2-MIB", "nlMatrixTopNControlDuration"), ("RMON2-MIB", "nlMatrixTopNControlRequestedSize"), ("RMON2-MIB", "nlMatrixTopNControlGrantedSize"), ("RMON2-MIB", "nlMatrixTopNControlStartTime"), ("RMON2-MIB", "nlMatrixTopNControlOwner"), ("RMON2-MIB", "nlMatrixTopNControlStatus"), ("RMON2-MIB", "nlMatrixTopNProtocolDirLocalIndex"), ("RMON2-MIB", "nlMatrixTopNSourceAddress"), ("RMON2-MIB", "nlMatrixTopNDestAddress"), ("RMON2-MIB", "nlMatrixTopNPktRate"), ("RMON2-MIB", "nlMatrixTopNReversePktRate"), ("RMON2-MIB", "nlMatrixTopNOctetRate"), ("RMON2-MIB", "nlMatrixTopNReverseOctetRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nlMatrixGroup = nlMatrixGroup.setStatus('current')
if mibBuilder.loadTexts: nlMatrixGroup.setDescription('Counts the amount of traffic sent between each pair of\n        network addresses discovered by the probe.  Note that while\n        the hlMatrixControlTable also has objects that control\n        optional alMatrixTables, implementation of the\n        alMatrixTables is not required to fully implement this\n        group.')
alHostGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 6)).setObjects(("RMON2-MIB", "alHostInPkts"), ("RMON2-MIB", "alHostOutPkts"), ("RMON2-MIB", "alHostInOctets"), ("RMON2-MIB", "alHostOutOctets"), ("RMON2-MIB", "alHostCreateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alHostGroup = alHostGroup.setStatus('current')
if mibBuilder.loadTexts: alHostGroup.setDescription('Counts the amount of traffic, by protocol, sent from and to\n        each network address discovered by the probe.  Implementation\n        of this group requires implementation of the Network-Layer\n        Host Group.')
alMatrixGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 7)).setObjects(("RMON2-MIB", "alMatrixSDPkts"), ("RMON2-MIB", "alMatrixSDOctets"), ("RMON2-MIB", "alMatrixSDCreateTime"), ("RMON2-MIB", "alMatrixDSPkts"), ("RMON2-MIB", "alMatrixDSOctets"), ("RMON2-MIB", "alMatrixDSCreateTime"), ("RMON2-MIB", "alMatrixTopNControlMatrixIndex"), ("RMON2-MIB", "alMatrixTopNControlRateBase"), ("RMON2-MIB", "alMatrixTopNControlTimeRemaining"), ("RMON2-MIB", "alMatrixTopNControlGeneratedReports"), ("RMON2-MIB", "alMatrixTopNControlDuration"), ("RMON2-MIB", "alMatrixTopNControlRequestedSize"), ("RMON2-MIB", "alMatrixTopNControlGrantedSize"), ("RMON2-MIB", "alMatrixTopNControlStartTime"), ("RMON2-MIB", "alMatrixTopNControlOwner"), ("RMON2-MIB", "alMatrixTopNControlStatus"), ("RMON2-MIB", "alMatrixTopNProtocolDirLocalIndex"), ("RMON2-MIB", "alMatrixTopNSourceAddress"), ("RMON2-MIB", "alMatrixTopNDestAddress"), ("RMON2-MIB", "alMatrixTopNAppProtocolDirLocalIndex"), ("RMON2-MIB", "alMatrixTopNPktRate"), ("RMON2-MIB", "alMatrixTopNReversePktRate"), ("RMON2-MIB", "alMatrixTopNOctetRate"), ("RMON2-MIB", "alMatrixTopNReverseOctetRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alMatrixGroup = alMatrixGroup.setStatus('current')
if mibBuilder.loadTexts: alMatrixGroup.setDescription('Counts the amount of traffic, by protocol, sent between each\n        pair of network addresses discovered by the\n        probe.  Implementation of this group requires implementation\n        of the Network-Layer Matrix Group.')
usrHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 8)).setObjects(("RMON2-MIB", "usrHistoryControlObjects"), ("RMON2-MIB", "usrHistoryControlBucketsRequested"), ("RMON2-MIB", "usrHistoryControlBucketsGranted"), ("RMON2-MIB", "usrHistoryControlInterval"), ("RMON2-MIB", "usrHistoryControlOwner"), ("RMON2-MIB", "usrHistoryControlStatus"), ("RMON2-MIB", "usrHistoryObjectVariable"), ("RMON2-MIB", "usrHistoryObjectSampleType"), ("RMON2-MIB", "usrHistoryIntervalStart"), ("RMON2-MIB", "usrHistoryIntervalEnd"), ("RMON2-MIB", "usrHistoryAbsValue"), ("RMON2-MIB", "usrHistoryValStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usrHistoryGroup = usrHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: usrHistoryGroup.setDescription('The usrHistoryGroup provides user-defined collection of\n        historical information from MIB objects on the probe.')
probeInformationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 9)).setObjects(("RMON2-MIB", "probeCapabilities"), ("RMON2-MIB", "probeSoftwareRev"), ("RMON2-MIB", "probeHardwareRev"), ("RMON2-MIB", "probeDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    probeInformationGroup = probeInformationGroup.setStatus('current')
if mibBuilder.loadTexts: probeInformationGroup.setDescription('This group describes various operating parameters of the\n        probe and controls the local time of the probe.')
probeConfigurationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 10)).setObjects(("RMON2-MIB", "probeResetControl"), ("RMON2-MIB", "probeDownloadFile"), ("RMON2-MIB", "probeDownloadTFTPServer"), ("RMON2-MIB", "probeDownloadAction"), ("RMON2-MIB", "probeDownloadStatus"), ("RMON2-MIB", "serialMode"), ("RMON2-MIB", "serialProtocol"), ("RMON2-MIB", "serialTimeout"), ("RMON2-MIB", "serialModemInitString"), ("RMON2-MIB", "serialModemHangUpString"), ("RMON2-MIB", "serialModemConnectResp"), ("RMON2-MIB", "serialModemNoConnectResp"), ("RMON2-MIB", "serialDialoutTimeout"), ("RMON2-MIB", "serialStatus"), ("RMON2-MIB", "netConfigIPAddress"), ("RMON2-MIB", "netConfigSubnetMask"), ("RMON2-MIB", "netConfigStatus"), ("RMON2-MIB", "netDefaultGateway"), ("RMON2-MIB", "trapDestCommunity"), ("RMON2-MIB", "trapDestProtocol"), ("RMON2-MIB", "trapDestAddress"), ("RMON2-MIB", "trapDestOwner"), ("RMON2-MIB", "trapDestStatus"), ("RMON2-MIB", "serialConnectDestIpAddress"), ("RMON2-MIB", "serialConnectType"), ("RMON2-MIB", "serialConnectDialString"), ("RMON2-MIB", "serialConnectSwitchConnectSeq"), ("RMON2-MIB", "serialConnectSwitchDisconnectSeq"), ("RMON2-MIB", "serialConnectSwitchResetSeq"), ("RMON2-MIB", "serialConnectOwner"), ("RMON2-MIB", "serialConnectStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    probeConfigurationGroup = probeConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: probeConfigurationGroup.setDescription("This group controls the configuration of various operating\n        parameters of the probe.  This group is not referenced by any\n        MODULE-COMPLIANCE macro because it is 'grandfathered' from\n        more recent MIB review rules that would require it.")
rmon1EnhancementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 11)).setObjects(("RMON2-MIB", "historyControlDroppedFrames"), ("RMON2-MIB", "hostControlDroppedFrames"), ("RMON2-MIB", "hostControlCreateTime"), ("RMON2-MIB", "matrixControlDroppedFrames"), ("RMON2-MIB", "matrixControlCreateTime"), ("RMON2-MIB", "channelDroppedFrames"), ("RMON2-MIB", "channelCreateTime"), ("RMON2-MIB", "filterProtocolDirDataLocalIndex"), ("RMON2-MIB", "filterProtocolDirLocalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rmon1EnhancementGroup = rmon1EnhancementGroup.setStatus('current')
if mibBuilder.loadTexts: rmon1EnhancementGroup.setDescription('This group adds some enhancements to RMON-1 that help\n        management stations.')
rmon1EthernetEnhancementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 12)).setObjects(("RMON2-MIB", "etherStatsDroppedFrames"), ("RMON2-MIB", "etherStatsCreateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rmon1EthernetEnhancementGroup = rmon1EthernetEnhancementGroup.setStatus('current')
if mibBuilder.loadTexts: rmon1EthernetEnhancementGroup.setDescription('This group adds some enhancements to RMON-1 that help\n        management stations.')
rmon1TokenRingEnhancementGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 2, 13)).setObjects(("RMON2-MIB", "tokenRingMLStatsDroppedFrames"), ("RMON2-MIB", "tokenRingMLStatsCreateTime"), ("RMON2-MIB", "tokenRingPStatsDroppedFrames"), ("RMON2-MIB", "tokenRingPStatsCreateTime"), ("RMON2-MIB", "ringStationControlDroppedFrames"), ("RMON2-MIB", "ringStationControlCreateTime"), ("RMON2-MIB", "sourceRoutingStatsDroppedFrames"), ("RMON2-MIB", "sourceRoutingStatsCreateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rmon1TokenRingEnhancementGroup = rmon1TokenRingEnhancementGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rmon1TokenRingEnhancementGroup.setDescription("This group adds some enhancements to RMON-1 that help\n        management stations.  This group is not referenced by any\n        MODULE-COMPLIANCE macro because it is 'grandfathered' from\n        more recent MIB review rules that would require it.")
mibBuilder.exportSymbols("RMON2-MIB", protocolDir=protocolDir, LastCreateTime=LastCreateTime, protocolDistControlStatus=protocolDistControlStatus, nlMatrixDSOctets=nlMatrixDSOctets, protocolDirLocalIndex=protocolDirLocalIndex, etherStatsCreateTime=etherStatsCreateTime, alMatrixSDTimeMark=alMatrixSDTimeMark, sourceRoutingStats2Table=sourceRoutingStats2Table, addressMapGroup=addressMapGroup, nlHostInPkts=nlHostInPkts, historyControl2Entry=historyControl2Entry, nlMatrixTopNControlTimeRemaining=nlMatrixTopNControlTimeRemaining, usrHistoryAbsValue=usrHistoryAbsValue, nlMatrixTopNControlEntry=nlMatrixTopNControlEntry, probeInformationGroup=probeInformationGroup, rmon1EthernetEnhancementGroup=rmon1EthernetEnhancementGroup, protocolDistStatsEntry=protocolDistStatsEntry, protocolDistStatsOctets=protocolDistStatsOctets, usrHistoryControlObjects=usrHistoryControlObjects, nlMatrixSDSourceAddress=nlMatrixSDSourceAddress, alMatrixTopNControlStatus=alMatrixTopNControlStatus, ringStationControl2Table=ringStationControl2Table, tokenRingMLStatsDroppedFrames=tokenRingMLStatsDroppedFrames, nlHostTimeMark=nlHostTimeMark, rmonConformance=rmonConformance, addressMapControlDataSource=addressMapControlDataSource, alMatrixTopNControlGeneratedReports=alMatrixTopNControlGeneratedReports, serialModemNoConnectResp=serialModemNoConnectResp, nlMatrix=nlMatrix, alHostTable=alHostTable, addressMapControlDroppedFrames=addressMapControlDroppedFrames, alMatrixDSOctets=alMatrixDSOctets, alMatrixTopNControlTable=alMatrixTopNControlTable, DataSource=DataSource, addressMapControlIndex=addressMapControlIndex, nlMatrixDSDestAddress=nlMatrixDSDestAddress, alMatrixTopNControlMatrixIndex=alMatrixTopNControlMatrixIndex, hlHostControlDataSource=hlHostControlDataSource, rmon=rmon, hostControlDroppedFrames=hostControlDroppedFrames, hlMatrixControlDataSource=hlMatrixControlDataSource, addressMapControlOwner=addressMapControlOwner, hlHostControlAlDeletes=hlHostControlAlDeletes, hlMatrixControlStatus=hlMatrixControlStatus, nlMatrixTopNControlMatrixIndex=nlMatrixTopNControlMatrixIndex, probeDateTime=probeDateTime, hlHostControlEntry=hlHostControlEntry, probeConfigurationGroup=probeConfigurationGroup, protocolDistControlDataSource=protocolDistControlDataSource, channelDroppedFrames=channelDroppedFrames, alMatrixTopNOctetRate=alMatrixTopNOctetRate, trapDestStatus=trapDestStatus, historyControl2Table=historyControl2Table, historyControlDroppedFrames=historyControlDroppedFrames, alHostInOctets=alHostInOctets, serialConnectSwitchResetSeq=serialConnectSwitchResetSeq, trapDestIndex=trapDestIndex, usrHistoryIntervalStart=usrHistoryIntervalStart, protocolDirParameters=protocolDirParameters, hlMatrixControlEntry=hlMatrixControlEntry, alHostInPkts=alHostInPkts, hlHostControlNlDroppedFrames=hlHostControlNlDroppedFrames, alMatrixDSPkts=alMatrixDSPkts, sourceRoutingStats2Entry=sourceRoutingStats2Entry, nlMatrixTopNProtocolDirLocalIndex=nlMatrixTopNProtocolDirLocalIndex, matrixControlCreateTime=matrixControlCreateTime, serialConnectionEntry=serialConnectionEntry, nlHostInOctets=nlHostInOctets, nlHostOutPkts=nlHostOutPkts, alMatrixSDEntry=alMatrixSDEntry, addressMapTable=addressMapTable, usrHistoryTable=usrHistoryTable, hlHostControlAlDroppedFrames=hlHostControlAlDroppedFrames, alHostTimeMark=alHostTimeMark, usrHistoryControlStatus=usrHistoryControlStatus, nlMatrixDSSourceAddress=nlMatrixDSSourceAddress, ZeroBasedCounter32=ZeroBasedCounter32, alMatrixTopNControlDuration=alMatrixTopNControlDuration, hlHostControlNlDeletes=hlHostControlNlDeletes, hlHostControlIndex=hlHostControlIndex, nlHostTable=nlHostTable, protocolDirAddressMapConfig=protocolDirAddressMapConfig, alMatrixDSTable=alMatrixDSTable, matrixControlDroppedFrames=matrixControlDroppedFrames, channel2Entry=channel2Entry, tokenRingPStats2Table=tokenRingPStats2Table, protocolDistStatsPkts=protocolDistStatsPkts, nlMatrixTopNSourceAddress=nlMatrixTopNSourceAddress, hostControl2Table=hostControl2Table, hlMatrixControlAlMaxDesiredEntries=hlMatrixControlAlMaxDesiredEntries, ringStationControlCreateTime=ringStationControlCreateTime, alMatrixSDPkts=alMatrixSDPkts, alMatrixDSCreateTime=alMatrixDSCreateTime, nlMatrixSDOctets=nlMatrixSDOctets, trapDestAddress=trapDestAddress, addressMapNetworkAddress=addressMapNetworkAddress, serialModemConnectResp=serialModemConnectResp, addressMapInserts=addressMapInserts, alMatrixTopNPktRate=alMatrixTopNPktRate, nlMatrixDSCreateTime=nlMatrixDSCreateTime, alMatrixTopNTable=alMatrixTopNTable, alMatrixTopNControlGrantedSize=alMatrixTopNControlGrantedSize, tokenRingPStats2Entry=tokenRingPStats2Entry, usrHistoryControlBucketsRequested=usrHistoryControlBucketsRequested, hlMatrixControlIndex=hlMatrixControlIndex, nlMatrixTopNDestAddress=nlMatrixTopNDestAddress, usrHistoryIntervalEnd=usrHistoryIntervalEnd, addressMapSource=addressMapSource, addressMapDeletes=addressMapDeletes, hlMatrixControlNlDroppedFrames=hlMatrixControlNlDroppedFrames, nlHost=nlHost, nlMatrixTopNControlGeneratedReports=nlMatrixTopNControlGeneratedReports, hlMatrixControlNlInserts=hlMatrixControlNlInserts, tokenRingMLStats2Entry=tokenRingMLStats2Entry, protocolDirHostConfig=protocolDirHostConfig, nlMatrixTopNControlStatus=nlMatrixTopNControlStatus, sourceRoutingStatsDroppedFrames=sourceRoutingStatsDroppedFrames, nlMatrixTopNPktRate=nlMatrixTopNPktRate, usrHistoryControlEntry=usrHistoryControlEntry, trapDestCommunity=trapDestCommunity, serialConnectDialString=serialConnectDialString, rmon1TokenRingEnhancementGroup=rmon1TokenRingEnhancementGroup, nlHostOutOctets=nlHostOutOctets, sourceRoutingStatsCreateTime=sourceRoutingStatsCreateTime, addressMapControlStatus=addressMapControlStatus, nlMatrixDSTable=nlMatrixDSTable, nlHostGroup=nlHostGroup, alMatrixDSTimeMark=alMatrixDSTimeMark, protocolDirOwner=protocolDirOwner, alMatrixTopNControlEntry=alMatrixTopNControlEntry, nlMatrixDSTimeMark=nlMatrixDSTimeMark, matrixControl2Entry=matrixControl2Entry, usrHistoryObjectIndex=usrHistoryObjectIndex, probeDownloadStatus=probeDownloadStatus, nlMatrixSDTable=nlMatrixSDTable, protocolDistributionGroup=protocolDistributionGroup, serialModemHangUpString=serialModemHangUpString, protocolDistStatsTable=protocolDistStatsTable, serialConnectStatus=serialConnectStatus, hostControl2Entry=hostControl2Entry, addressMap=addressMap, matrixControl2Table=matrixControl2Table, protocolDirType=protocolDirType, nlMatrixTopNControlIndex=nlMatrixTopNControlIndex, etherStats2Table=etherStats2Table, serialConnectType=serialConnectType, netDefaultGateway=netDefaultGateway, serialConfigTable=serialConfigTable, serialConnectSwitchConnectSeq=serialConnectSwitchConnectSeq, addressMapMaxDesiredEntries=addressMapMaxDesiredEntries, PYSNMP_MODULE_ID=rmon, nlMatrixTopNTable=nlMatrixTopNTable, usrHistoryValStatus=usrHistoryValStatus, addressMapEntry=addressMapEntry, alHost=alHost, nlMatrixSDDestAddress=nlMatrixSDDestAddress, filter2Table=filter2Table, hlMatrixControlTable=hlMatrixControlTable, alMatrixTopNEntry=alMatrixTopNEntry, nlMatrixTopNOctetRate=nlMatrixTopNOctetRate, ringStationControlDroppedFrames=ringStationControlDroppedFrames, hlHostControlTable=hlHostControlTable, protocolDirectoryGroup=protocolDirectoryGroup, channelCreateTime=channelCreateTime, alMatrixSDOctets=alMatrixSDOctets, usrHistoryEntry=usrHistoryEntry, nlMatrixTopNControlDuration=nlMatrixTopNControlDuration, usrHistoryControlTable=usrHistoryControlTable, etherStatsDroppedFrames=etherStatsDroppedFrames, addressMapControlEntry=addressMapControlEntry, usrHistoryControlBucketsGranted=usrHistoryControlBucketsGranted, probeDownloadTFTPServer=probeDownloadTFTPServer, protocolDirLastChange=protocolDirLastChange, netConfigEntry=netConfigEntry, trapDestProtocol=trapDestProtocol, serialDialoutTimeout=serialDialoutTimeout, usrHistoryObjectVariable=usrHistoryObjectVariable, usrHistoryObjectTable=usrHistoryObjectTable, serialConnectionTable=serialConnectionTable, nlMatrixTopNControlGrantedSize=nlMatrixTopNControlGrantedSize, alHostCreateTime=alHostCreateTime, netConfigStatus=netConfigStatus, trapDestTable=trapDestTable, filterProtocolDirDataLocalIndex=filterProtocolDirDataLocalIndex, addressMapPhysicalAddress=addressMapPhysicalAddress, tokenRingPStatsDroppedFrames=tokenRingPStatsDroppedFrames, channel2Table=channel2Table, protocolDirStatus=protocolDirStatus, alMatrixTopNIndex=alMatrixTopNIndex, usrHistoryControlIndex=usrHistoryControlIndex, serialConnectDestIpAddress=serialConnectDestIpAddress, hostControlCreateTime=hostControlCreateTime, tokenRingMLStats2Table=tokenRingMLStats2Table, probeConfig=probeConfig, usrHistorySampleIndex=usrHistorySampleIndex, rmon2MIBCompliance=rmon2MIBCompliance, usrHistoryControlOwner=usrHistoryControlOwner, nlMatrixTopNIndex=nlMatrixTopNIndex, serialConnectIndex=serialConnectIndex, nlMatrixTopNReversePktRate=nlMatrixTopNReversePktRate, alMatrixTopNAppProtocolDirLocalIndex=alMatrixTopNAppProtocolDirLocalIndex, nlHostCreateTime=nlHostCreateTime, protocolDistControlIndex=protocolDistControlIndex, hlMatrixControlAlDeletes=hlMatrixControlAlDeletes, serialStatus=serialStatus, nlMatrixSDEntry=nlMatrixSDEntry, nlMatrixSDCreateTime=nlMatrixSDCreateTime, alHostOutPkts=alHostOutPkts, TimeFilter=TimeFilter, protocolDistControlOwner=protocolDistControlOwner, alHostOutOctets=alHostOutOctets, protocolDirID=protocolDirID, alMatrixTopNReverseOctetRate=alMatrixTopNReverseOctetRate, nlMatrixSDPkts=nlMatrixSDPkts, hlHostControlNlMaxDesiredEntries=hlHostControlNlMaxDesiredEntries, nlMatrixTopNControlOwner=nlMatrixTopNControlOwner, probeDownloadAction=probeDownloadAction, nlMatrixGroup=nlMatrixGroup, hlHostControlOwner=hlHostControlOwner, filter2Entry=filter2Entry, nlMatrixTopNEntry=nlMatrixTopNEntry, protocolDirDescr=protocolDirDescr, hlMatrixControlNlDeletes=hlMatrixControlNlDeletes, probeSoftwareRev=probeSoftwareRev, alMatrixTopNControlStartTime=alMatrixTopNControlStartTime, protocolDistControlTable=protocolDistControlTable, protocolDist=protocolDist, nlHostEntry=nlHostEntry, filterProtocolDirLocalIndex=filterProtocolDirLocalIndex, protocolDistControlEntry=protocolDistControlEntry, usrHistoryGroup=usrHistoryGroup, nlMatrixTopNControlStartTime=nlMatrixTopNControlStartTime, hlHostControlStatus=hlHostControlStatus, hlMatrixControlNlMaxDesiredEntries=hlMatrixControlNlMaxDesiredEntries, hlHostControlAlMaxDesiredEntries=hlHostControlAlMaxDesiredEntries, serialMode=serialMode, addressMapTimeMark=addressMapTimeMark, serialModemInitString=serialModemInitString, serialProtocol=serialProtocol, usrHistoryControlInterval=usrHistoryControlInterval, netConfigIPAddress=netConfigIPAddress, alMatrixDSEntry=alMatrixDSEntry, hlHostControlNlInserts=hlHostControlNlInserts, ControlString=ControlString, usrHistory=usrHistory, alMatrixTopNControlOwner=alMatrixTopNControlOwner, protocolDirTable=protocolDirTable, alMatrixTopNControlIndex=alMatrixTopNControlIndex, nlMatrixTopNControlRateBase=nlMatrixTopNControlRateBase, probeDownloadFile=probeDownloadFile, nlMatrixDSPkts=nlMatrixDSPkts, serialConfigEntry=serialConfigEntry, protocolDirMatrixConfig=protocolDirMatrixConfig, nlMatrixSDTimeMark=nlMatrixSDTimeMark)
mibBuilder.exportSymbols("RMON2-MIB", etherStats2Entry=etherStats2Entry, tokenRingPStatsCreateTime=tokenRingPStatsCreateTime, alMatrixSDTable=alMatrixSDTable, alMatrixTopNControlTimeRemaining=alMatrixTopNControlTimeRemaining, nlMatrixTopNControlTable=nlMatrixTopNControlTable, serialTimeout=serialTimeout, nlMatrixTopNReverseOctetRate=nlMatrixTopNReverseOctetRate, trapDestOwner=trapDestOwner, rmon1EnhancementGroup=rmon1EnhancementGroup, protocolDirEntry=protocolDirEntry, ringStationControl2Entry=ringStationControl2Entry, trapDestEntry=trapDestEntry, tokenRingMLStatsCreateTime=tokenRingMLStatsCreateTime, nlMatrixDSEntry=nlMatrixDSEntry, alMatrixTopNControlRequestedSize=alMatrixTopNControlRequestedSize, hlMatrixControlAlInserts=hlMatrixControlAlInserts, addressMapControlTable=addressMapControlTable, alMatrixTopNDestAddress=alMatrixTopNDestAddress, probeHardwareRev=probeHardwareRev, serialConnectSwitchDisconnectSeq=serialConnectSwitchDisconnectSeq, netConfigSubnetMask=netConfigSubnetMask, serialConnectOwner=serialConnectOwner, nlMatrixTopNControlRequestedSize=nlMatrixTopNControlRequestedSize, alMatrixTopNSourceAddress=alMatrixTopNSourceAddress, alMatrixGroup=alMatrixGroup, alMatrix=alMatrix, hlHostControlAlInserts=hlHostControlAlInserts, probeResetControl=probeResetControl, netConfigTable=netConfigTable, hlMatrixControlAlDroppedFrames=hlMatrixControlAlDroppedFrames, alMatrixSDCreateTime=alMatrixSDCreateTime, alMatrixTopNReversePktRate=alMatrixTopNReversePktRate, alHostEntry=alHostEntry, usrHistoryObjectEntry=usrHistoryObjectEntry, usrHistoryObjectSampleType=usrHistoryObjectSampleType, rmon2MIBCompliances=rmon2MIBCompliances, rmon2MIBApplicationLayerCompliance=rmon2MIBApplicationLayerCompliance, addressMapLastChange=addressMapLastChange, nlHostOutMacNonUnicastPkts=nlHostOutMacNonUnicastPkts, rmon2MIBGroups=rmon2MIBGroups, probeCapabilities=probeCapabilities, protocolDistControlDroppedFrames=protocolDistControlDroppedFrames, alMatrixTopNControlRateBase=alMatrixTopNControlRateBase, alMatrixTopNProtocolDirLocalIndex=alMatrixTopNProtocolDirLocalIndex, alHostGroup=alHostGroup, hlMatrixControlOwner=hlMatrixControlOwner, protocolDistControlCreateTime=protocolDistControlCreateTime, nlHostAddress=nlHostAddress)
