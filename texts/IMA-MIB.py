#
# PySNMP MIB module IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/IMA-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 19:25:46 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, MibIdentifier, Counter32, TimeTicks, IpAddress, ObjectIdentity, enterprises, iso, ModuleIdentity, Unsigned32, Bits, NotificationType, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Counter32", "TimeTicks", "IpAddress", "ObjectIdentity", "enterprises", "iso", "ModuleIdentity", "Unsigned32", "Bits", "NotificationType", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention")
atmfImaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 7, 1))
atmfImaMib.setRevisions(('1999-02-11 18:30', '1997-01-09 22:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: atmfImaMib.setRevisionsDescriptions(('Updated and repaired version of the IMA-MIB released with the\n        IMA v1.1 specification (af-phy-0086.001).', 'Initial incomplete version of the IMA-MIB as published in the\n        IMA v1.0 specification (af-phy-0086.000).',))
if mibBuilder.loadTexts: atmfImaMib.setLastUpdated('9902111830Z')
if mibBuilder.loadTexts: atmfImaMib.setOrganization('The ATM Forum')
if mibBuilder.loadTexts: atmfImaMib.setContactInfo('ATM Forum\n        World Headquarters\n        2570 West El Camino Real\n        Suite 304\n        Mountain View, CA 94040-1313\n        USA\n        Phone: +1 415 949 6700\n        Fax: +1 415 949 6705\n        email: info@atmforum.com')
if mibBuilder.loadTexts: atmfImaMib.setDescription('The MIB module for managing ATM Forum Inverse Multiplexing\n        for ATM (IMA) interfaces.')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfIma = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7))
atmfImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1))
atmfImaMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2))
atmfImaMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2, 0))
atmfImaMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3))
class MilliSeconds(TextualConvention, Integer32):
    description = 'Time in milliseconds'
    status = 'current'

class ImaGroupState(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.2.1 on page 55'
    description = 'State of the IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class ImaGroupFailureStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.2.1, page 55'
    description = 'Failure reason of an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class ImaAlarmStatus(TextualConvention, Integer32):
    description = 'A qualification of the IMA trap which indicates if the\n        condition causing the trap has been detected (declared)\n        or is no longer present (cleared).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("declared", 2))

class ImaAlarmType(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 12.2.3 on page 79'
    description = 'An identification of the event that caused the generation\n        of the IMA trap.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("imaAlarmLinkLif", 1), ("imaAlarmLinkLods", 2), ("imaAlarmLinkRfi", 3), ("imaAlarmLinkTxMisConnect", 4), ("imaAlarmLinkRxMisConnect", 5), ("imaAlarmLinkTxFault", 6), ("imaAlarmLinkRxFault", 7), ("imaAlarmLinkTxUnusableFe", 8), ("imaAlarmLinkRxUnusableFe", 9), ("imaAlarmGroupStartupFe", 10), ("imaAlarmGroupCfgAbort", 11), ("imaAlarmGroupCfgAbortFe", 12), ("imaAlarmGroupInsuffLinks", 13), ("imaAlarmGroupInsuffLinksFe", 14), ("imaAlarmGroupBlockedFe", 15), ("imaAlarmGroupTimingSynch", 16))

class ImaGroupTxClkMode(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 7 on page 38'
    description = 'Indicate the transmit clock mode of the IMA group.\n        There are two possible modes: the Common Transmit\n        Clock (CTC) and the Independent Transmit Clock (ITC).\n        The CTC mode corresponds to the case when the transmit clock\n        of all IMA links are derived from the same source.  The ITC\n        configuration corresponds to the case where there is at least\n        one IMA link whose transmit clock is derived from a source\n        different than at least another link transmit clock.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class ImaGroupSymmetry(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 5.2.2.7 on page 35'
    description = 'The group symmetry mode adjusted during the group start-up.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))

class ImaFrameLength(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 5.2.2.4.2 on page 34'
    description = 'Length of the IMA frames.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))
    namedValues = NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))

class ImaLinkState(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.1.2 on page 48'
    description = 'State of a link belonging to an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class ImaLinkFailureStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 10.1.2 on page 48'
    description = 'Local failure status of a link belonging to an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class ImaTestProcStatus(TextualConvention, Integer32):
    reference = 'ATM Forum IMA v1.1, Section 13 on page 81'
    description = 'States of the Test Pattern Procedure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))

imaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumber.setStatus('current')
if mibBuilder.loadTexts: imaGroupNumber.setDescription('The number of IMA groups configured on this system.')
imaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2), )
if mibBuilder.loadTexts: imaGroupTable.setStatus('current')
if mibBuilder.loadTexts: imaGroupTable.setDescription('The IMA Group Configuration table.')
imaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupEntry.setStatus('current')
if mibBuilder.loadTexts: imaGroupEntry.setDescription('An entry in the IMA Group table.')
imaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: imaGroupIndex.setStatus('current')
if mibBuilder.loadTexts: imaGroupIndex.setDescription('A unique value for the IMA Group.')
imaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: imaGroupRowStatus.setDescription("The imaGroupRowStatus object allows create, change, and delete\n        operations on imaGroupTable entries.\n\n        To create a new conceptual row (or instance) of the imaGroupTable,\n        imaGroupRowStatus must be set to 'createAndWait' or 'createAndGo'.\n        If settable, a successful set of the following objects must be\n        performed before the imaGroupRowStatus of a new conceptual row can\n        be set to 'active':\n\n          imaGroupMinNumTxLinks\n          imaGroupMinNumRxLinks\n          imaGroupTxImaId\n\n        Some objects in the imaGroupTable control settings which can only\n        be established or changed at group start-up time.  These objects\n        include:\n\n          imaGroupTxImaId\n          imaGroupSymmetry\n          imaGroupTxFrameLength\n\n        To change (modify) the imaGroupTxImaId object, the manager must\n        first set imaGroupRowStatus to 'notInService'.  However, changes\n        to the following two objects can be optionally allowed while the\n        imaGroupRowStatus is 'active':\n\n          imaGroupSymmetry\n          imaGroupTxFrameLength\n\n        These two objects can be changed when the imaGroupRowStatus is\n        'active' in order to allow the far-end to recover from its\n        Config-Aborted state without having to force the near-end Group\n        State machine to go to the 'Not Configured' state.  Changing\n        these object values after group start-up has completed causes a\n        restart of the IMA group.\n\n        Alternatively, as noted above, the agent implementation may\n        simply require the imaGroupRowStatus object to first be set to\n        'notInService' before allowing changes to either of these two\n        objects.\n\n        To remove (delete) an imaGroupTable entry from this table, set\n        imaGroupRowStatus to 'destroy'.\n\n        Setting the imaGroupRowStatus to 'active' has the effect of\n        activating the Group Startup Procedure.  The Group Startup\n        Procedure uses provisioned links that have imaLinkRowStatus set\n        to 'active' and imaLinkGroupIndex set to the imaGroupIndex in\n        this conceptual row.\n\n        When the imaGroupRowStatus is not in 'active' state, the Group\n        State machine is in its 'Not Configured' state.")
imaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: imaGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex')\n        assigned to this IMA group, and is used to identify corresponding\n        rows in the Interfaces MIB.\n\n        Note that re-initialization of the management agent may cause\n        a client's 'imaGroupIfIndex' to change.")
imaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 4), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeState.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55')
if mibBuilder.loadTexts: imaGroupNeState.setStatus('current')
if mibBuilder.loadTexts: imaGroupNeState.setDescription('The current operational state of the near-end IMA Group State\n        Machine.')
imaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 5), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeState.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55')
if mibBuilder.loadTexts: imaGroupFeState.setStatus('current')
if mibBuilder.loadTexts: imaGroupFeState.setDescription('The current operational state of the far-end IMA Group State\n        Machine.')
imaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 6), ImaGroupFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFailureStatus.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55')
if mibBuilder.loadTexts: imaGroupFailureStatus.setStatus('current')
if mibBuilder.loadTexts: imaGroupFailureStatus.setDescription('The current failure status of the IMA group (the reason why\n        the GTSM is in the down state).')
imaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 7), ImaGroupSymmetry().clone('symmetricOperation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupSymmetry.setReference('ATM Forum IMA v1.1, Section 5.2.2.7 on page 35')
if mibBuilder.loadTexts: imaGroupSymmetry.setStatus('current')
if mibBuilder.loadTexts: imaGroupSymmetry.setDescription('Symmetry of the IMA group.')
imaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setReference('ATM Forum IMA v1.1, Section 10.2.1.1 on page 55')
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setDescription('Minimum number of transmit links required to be Active for\n        the IMA group to be in the Operational state.')
imaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setReference('ATM Forum IMA v1.1, Section 10.2.1.1 on page 55')
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setDescription('Minimum number of receive links required to be Active for\n        the IMA group to be in the Operational state.')
imaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 10), ImaGroupTxClkMode().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setReference('ATM Forum IMA v1.1, Section 7 on page 38')
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setStatus('current')
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setDescription('Transmit clocking mode used by the near-end IMA group.')
imaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 11), ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setReference('ATM Forum IMA v1.1, Section 7 on page 38')
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setStatus('current')
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setDescription('Transmit clocking mode used by the far-end IMA group.')
imaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setReference('ATM Forum IMA v1.1, Section 8.1.1 on page 41')
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setStatus('current')
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setDescription('The ifIndex of the transmit timing reference link to be\n        used by the near-end for IMA data cell clock recovery from\n        the ATM layer.  The distinguished value of zero may be used\n        if no link has been configured in the IMA group, or if the\n        transmit timing reference link has not yet been selected.')
imaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setReference('ATM Forum IMA v1.1, Section 8.1.1 on page 41')
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setStatus('current')
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setDescription('The ifIndex of the receive timing reference link to be\n        used by near-end for IMA data cell clock recovery toward\n        the ATM layer.  The distinguished value of zero may be used\n        if no link has been configured in the IMA group, or if the\n        receive timing reference link has not yet been detected.')
imaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLastChange.setStatus('current')
if mibBuilder.loadTexts: imaGroupLastChange.setDescription('The time-of-day the IMA group last changed operational\n        state (i.e., value of imaGroupNeState changed).')
imaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTxImaId.setReference('ATM Forum IMA v1.1, Section 5.2.2.6 on page 35')
if mibBuilder.loadTexts: imaGroupTxImaId.setStatus('current')
if mibBuilder.loadTexts: imaGroupTxImaId.setDescription('The IMA ID currently in use by the near-end IMA function.')
imaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxImaId.setReference('ATM Forum IMA v1.1, Section 5.2.2.6 on page 35')
if mibBuilder.loadTexts: imaGroupRxImaId.setStatus('current')
if mibBuilder.loadTexts: imaGroupRxImaId.setDescription('The IMA ID currently in use by the far-end IMA function.')
imaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 17), ImaFrameLength().clone('m128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTxFrameLength.setReference('ATM Forum IMA v1.1, Section 5.2.2.4.2 on page 34')
if mibBuilder.loadTexts: imaGroupTxFrameLength.setStatus('current')
if mibBuilder.loadTexts: imaGroupTxFrameLength.setDescription('The frame length to be used by the IMA group in the transmit\n        direction.  Can only be set when the IMA group is startup.')
imaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 18), ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxFrameLength.setReference('ATM Forum IMA v1.1, Section 5.2.2.4.2 on page 34')
if mibBuilder.loadTexts: imaGroupRxFrameLength.setStatus('current')
if mibBuilder.loadTexts: imaGroupRxFrameLength.setDescription('Value of IMA frame length as received from remote IMA function.')
imaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 19), MilliSeconds().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setReference('ATM Forum IMA v1.1, Section 9.2 on page 45')
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setStatus('current')
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setDescription('The maximum number of milliseconds of differential delay among\n        the links that will be tolerated on this interface.')
imaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setReference('ATM Forum IMA v1.1, Section 9.2 on page 45')
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setStatus('current')
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setDescription('The ifIndex of the link configured in the IMA group which has\n        the smallest link propagation delay.  The distinguished value of\n        zero may be used if no link has been configured in the IMA group,\n        or if the link with the smallest link propagation delay has not\n        yet been determined.')
imaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 21), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setReference('ATM Forum IMA v1.1, Section 9.2 on page 45')
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setStatus('current')
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setDescription('The latest maximum differential delay observed (in milliseconds)\n        between the links having the least and most link propagation delay,\n        among the receive links that are currently configured in the IMA\n        group.')
imaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupAlphaValue.setReference('ATM Forum IMA v1.1, Section 11 on page 68')
if mibBuilder.loadTexts: imaGroupAlphaValue.setStatus('current')
if mibBuilder.loadTexts: imaGroupAlphaValue.setDescription("This indicates the 'alpha' value used to specify the number\n        of consecutive invalid ICP cells to be detected before moving\n        to the IMA Hunt state from the IMA Sync state.")
imaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupBetaValue.setReference('ATM Forum IMA v1.1, Section 11 on page 68')
if mibBuilder.loadTexts: imaGroupBetaValue.setStatus('current')
if mibBuilder.loadTexts: imaGroupBetaValue.setDescription("This indicates the 'beta' value used to specify the number\n        of consecutive errored ICP cells to be detected before moving\n        to the IMA Hunt state from the IMA Sync state.")
imaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupGammaValue.setReference('ATM Forum IMA v1.1, Section 11 on page 68')
if mibBuilder.loadTexts: imaGroupGammaValue.setStatus('current')
if mibBuilder.loadTexts: imaGroupGammaValue.setDescription("This indicates the 'gamma' value used to specify the number\n        of consecutive valid ICP cells to be detected before moving\n        to the IMA Sync state from the IMA PreSync state.")
imaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRunningSecs.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55')
if mibBuilder.loadTexts: imaGroupRunningSecs.setStatus('current')
if mibBuilder.loadTexts: imaGroupRunningSecs.setDescription('The amount of time (in seconds) since this IMA group has\n        been in the Operational state.')
imaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupUnavailSecs.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55 and (R-136) in Section\n        12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaGroupUnavailSecs.setDescription('Count of one second intervals where the IMA Group Traffic\n        State Machine is Down.')
imaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeNumFailures.setReference('ATM Forum IMA v1.1, (R-137) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupNeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupNeNumFailures.setDescription('The number of times a near-end group failure (Config-Aborted,\n        Insufficient-Links) has been reported since power-up or reboot.')
imaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeNumFailures.setReference('ATM Forum IMA v1.1, (O-25) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupFeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupFeNumFailures.setDescription('The number of times a far-end group failure (Config-Aborted-FE,\n        Insufficient-Links-FE, Blocked-FE) has been reported since\n        power-up or reboot.  This is an optional attribute.')
imaGroupTxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setStatus('current')
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setDescription('The current cell rate (truncated value in cells per second)\n        provided by this IMA group in the transmit direction,\n        considering all the transmit links in the Active state.')
imaGroupRxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setStatus('current')
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setDescription('The current cell rate (truncated value in cells per second)\n        provided by this IMA group in the receive direction,\n        considering all the receive links in the Active state.')
imaGroupNumTxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxCfgLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupNumTxCfgLinks.setDescription('The number of links that are configured to transmit in this IMA\n        group. This attribute overwrites the value of the\n        imaGroupNumRxActLinks attribute when the IMA group is configured\n        in the Symmetrical Configuration group symmetry mode.')
imaGroupNumRxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxCfgLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupNumRxCfgLinks.setDescription('The number of links that are configured to receive in this IMA\n        group. This attribute is overwritten by the value of the\n        imaGroupNumTxActLinks attribute when the IMA group is configured\n        in the Symmetrical Configuration group symmetry mode.')
imaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxActLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupNumTxActLinks.setDescription('The number of links which are configured to transmit and are\n        currently Active in this IMA group.')
imaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxActLinks.setStatus('current')
if mibBuilder.loadTexts: imaGroupNumRxActLinks.setDescription('The number of links which are configured to receive and are\n        currently Active in this IMA group.')
imaGroupTestLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setReference('ATM Forum IMA v1.1, Section 13 on page 81')
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setDescription("This object is used to designate an interface as the test link\n        for use in the Test Pattern Procedure.  The distinguished value of\n        zero specifies that the implementation may choose the Test Link,\n        in which case, the implementation may also choose the value of\n        'imaGroupTestPattern'.  The value zero may also be used if no link\n        has yet been added to the group.\n\n        Note that this value is NOT the same as the Tx LID value, but\n        instead either identifies the ifIndex value of the test link to be\n        used by the Test Pattern Procedure (i.e., the link whose LID value\n        is inserted in the Tx LID field of the transmitted ICP cells),\n        or identifies that the implementation may choose the test link (if\n        the value is zero).")
imaGroupTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestPattern.setReference('ATM Forum IMA v1.1, Section 13 on page 81')
if mibBuilder.loadTexts: imaGroupTestPattern.setStatus('current')
if mibBuilder.loadTexts: imaGroupTestPattern.setDescription("The value of this object is used to specify the Tx Test Pattern\n        in an IMA group loopback operation.  A value in the range 0 to\n        255 designates a specific pattern.  The distinguished value of\n        -1 specifies that the implementation may choose the value.  In\n        this case, the implementation may also choose the value of\n        'imaGroupTestLinkIfIndex'.\n\n        It is recommended that the specific value 255 not be used for\n        testing, since by (R-137) the IMA interface is required to\n        transmit 0xFF (i.e., 255) when the incoming test command is\n        inactive or the test link is not detected, and thus it cannot\n        be established for certain whether 255 was received due to an\n        actual loopback operation or due to the normal operation of an\n        IMA that is not performing (or else cannot perform) the test\n        pattern procedure.")
imaGroupTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 37), ImaTestProcStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaGroupTestProcStatus.setReference('ATM Forum IMA v1.1, Section 13 on page 81')
if mibBuilder.loadTexts: imaGroupTestProcStatus.setStatus('current')
if mibBuilder.loadTexts: imaGroupTestProcStatus.setDescription('This object is used to enable or disable the\n        Test Pattern Procedure, and to note whether at least one\n        link failed the test.\n\n        The test is started by setting operating(2) status.  If any\n        link should fail the test, the IMA will set the status to\n        linkFail(3).  The linkFail(3) state will persist until\n        either the disabled(1) state is set or until no instance\n        of imaLinkTestProcStatus has the value linkFail(3).\n\n        Only the values disabled(1) and operating(2) may be written.\n        Writing the operating(2) value will not cause clearing of\n        the linkFail(3) state.')
imaGroupValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupValidIntervals.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupValidIntervals.setStatus('current')
if mibBuilder.loadTexts: imaGroupValidIntervals.setDescription('The number of previous 15 minute intervals for which valid data\n        was collected.  The value will be 96 unless the IMA group table\n        entry was created within the last 24 hours, in which case the value\n        will be the number of complete 15 minute intervals since the IMA\n        group table entry was created.  In the case where the agent is a\n        proxy, it is possible that some intervals are unavailable.  In this\n        case, this value is the maximum interval number for which valid\n        data is available.  This attribute is only mandatory when the IMA\n        Group Interval Statistics and/or IMA Group Total Statistics objects\n        are implemented.')
imaGroupInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupInvalidIntervals.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: imaGroupInvalidIntervals.setDescription('The number of intervals for which no valid data is available.\n        This attribute is only mandatory when the IMA Group Interval\n        Statistics and/or IMA Group Total Statistics objects are\n        implemented.')
imaGroupTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTimeElapsed.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: imaGroupTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of\n        the current measurement period.  This attribute is only mandatory\n        when the IMA Group Current Statistics are implemented.')
imaGroupTxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxOamLabelValue.setReference('ATM Forum IMA v1.1, Section 5.2.2.3 on page 32')
if mibBuilder.loadTexts: imaGroupTxOamLabelValue.setStatus('current')
if mibBuilder.loadTexts: imaGroupTxOamLabelValue.setDescription('IMA OAM Label value transmitted by the NE IMA unit.')
imaGroupRxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxOamLabelValue.setReference('ATM Forum IMA v1.1, Section 5.2.2.3 on page 32')
if mibBuilder.loadTexts: imaGroupRxOamLabelValue.setStatus('current')
if mibBuilder.loadTexts: imaGroupRxOamLabelValue.setDescription('IMA OAM Label value transmitted by the FE IMA unit.  The value 0\n        likely means that the IMA unit has not received an OAM Label \n        from the FE IMA unit at this time.')
imaGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3), )
if mibBuilder.loadTexts: imaGroupMappingTable.setStatus('current')
if mibBuilder.loadTexts: imaGroupMappingTable.setDescription("A table mapping the 'ifIndex' values of 'imaGroupIfIndex'\n        to the 'imaGroupIndex' values of the corresponding IMA group.")
imaGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaGroupMappingEntry.setStatus('current')
if mibBuilder.loadTexts: imaGroupMappingEntry.setDescription('Each row describes one ifIndex to imaGroupIndex mapping.')
imaGroupMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupMappingIndex.setStatus('current')
if mibBuilder.loadTexts: imaGroupMappingIndex.setDescription('The imaGroupIndex of the IMA Group which implements the\n        specified interface.')
imaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4), )
if mibBuilder.loadTexts: imaLinkTable.setStatus('current')
if mibBuilder.loadTexts: imaLinkTable.setDescription('The IMA group Link Status and Configuration table.')
imaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1), ).setIndexNames((0, "IMA-MIB", "imaLinkIfIndex"))
if mibBuilder.loadTexts: imaLinkEntry.setStatus('current')
if mibBuilder.loadTexts: imaLinkEntry.setDescription('An entry in the IMA Group Link table.')
imaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: imaLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: imaLinkIfIndex.setDescription("This corresponds to the 'ifIndex' of the MIB-II interface\n        on which this link is established.  This object also\n        corresponds to the logical number ('ifIndex') assigned to\n        this IMA link.")
imaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: imaLinkRowStatus.setDescription("The imaLinkRowStatus object allows create, change, and delete\n        operations on imaLinkTable entries.\n\n        To create a new conceptual row (or instance) of the imaLinkTable,\n        imaLinkRowStatus must be set to 'createAndWait' or 'createAndGo'.\n        A successful set of the imaLinkGroupIndex object must be performed\n        before the imaLinkRowStatus of a new conceptual row can be set to\n        'active'.\n\n        To change (modify) the imaLinkGroupIndex in an imaLinkTable entry,\n        the imaLinkRowStatus object must first be set to 'notInService'.\n        Only then can this object in the conceptual row be modified.\n        This is due to the fact that the imaLinkGroupIndex object provides\n        the association between a physical IMA link and the IMA group to\n        which it belongs, and setting the imaLinkGroupIndex object to a\n        different value has the effect of changing the association between\n        a physical IMA link and an IMA group.  To place the link 'in group',\n        the imaLinkRowStatus object is set to 'active'.  While the row is\n        not in 'active' state, both the Transmit and Receive IMA link state\n        machines are in the 'Not In Group' state.\n\n        To remove (delete) an imaLinkTable entry from this table, set\n        this object to 'destroy'.")
imaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: imaLinkGroupIndex.setStatus('current')
if mibBuilder.loadTexts: imaLinkGroupIndex.setDescription('The value which identifies the IMA group (imaGroupIndex)\n        of which this link is a member.')
imaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 4), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxState.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkNeTxState.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeTxState.setDescription('The current state of the near-end transmit link.')
imaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 5), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxState.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkNeRxState.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeRxState.setDescription('The current state of the near-end receive link.')
imaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 6), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxState.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkFeTxState.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeTxState.setDescription('The current state of the far-end transmit link as reported\n        via ICP cells.')
imaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 7), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxState.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkFeRxState.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeRxState.setDescription('The current state of the far-end receive link as reported\n        via ICP cells.')
imaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 8), ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setDescription('The current link failure status of the near-end receive link.')
imaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 9), ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setReference('ATM Forum IMA v1.1, Section 10.1.2 on page 48')
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setDescription('The current link failure status of the far-end receive link\n        as reported via ICP cells.')
imaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxLid.setReference('ATM Forum IMA v1.1, Section 5.2.2.1 on page 26')
if mibBuilder.loadTexts: imaLinkTxLid.setStatus('current')
if mibBuilder.loadTexts: imaLinkTxLid.setDescription('The outgoing LID used currently on the link by the local end.\n        This value has meaning only if the link belongs to an IMA group.')
imaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxLid.setReference('ATM Forum IMA v1.1, Section 5.2.2.1 on page 26')
if mibBuilder.loadTexts: imaLinkRxLid.setStatus('current')
if mibBuilder.loadTexts: imaLinkRxLid.setDescription('The incoming LID used currently on the link by the remote\n        end as reported via ICP cells.  This value has meaning only\n        if the link belongs to an IMA group.')
imaLinkRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 12), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRelDelay.setReference('ATM Forum IMA v1.1, Section 9.2 on page 45')
if mibBuilder.loadTexts: imaLinkRelDelay.setStatus('current')
if mibBuilder.loadTexts: imaLinkRelDelay.setDescription('The latest measured delay on this link relative to the link, in\n        the same IMA group, with the least delay.')
imaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkImaViolations.setReference('ATM Forum IMA v1.1, (R-125) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkImaViolations.setStatus('current')
if mibBuilder.loadTexts: imaLinkImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells,\n        except during SES-IMA or UAS-IMA conditions.')
imaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkOifAnomalies.setReference('ATM Forum IMA v1.1, (O-20) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkOifAnomalies.setStatus('current')
if mibBuilder.loadTexts: imaLinkOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA\n        conditions, at the near-end.  This is an optional attribute.')
imaLinkNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-126) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells\n        counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF,\n        AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA\n        condition.')
imaLinkFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-127) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeSevErroredSecs.setDescription('Count of one second intervals containing one or more RDI-IMA\n        defects, except during UAS-IMA-FE condition.')
imaLinkNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-128) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeUnavailSecs.setDescription('Count of unavailable seconds at near-end: unavailability begins\n        at the onset of 10 contiguous SES-IMA and ends at the onset\n        of 10 contiguous seconds with no SES-IMA.')
imaLinkFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-129) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeUnavailSecs.setDescription('Count of unavailable seconds at far-end: unavailability begins\n        at the onset of 10 contiguous SES-IMA-FE and ends at the onset of\n        10 contiguous seconds with no SES-IMA-FE.')
imaLinkNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-130) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Tx Unusable seconds at the near-end\n        Tx LSM.')
imaLinkNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-131) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Rx Unusable seconds at the near-end\n        Rx LSM.')
imaLinkFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-132) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeTxUnusableSecs.setDescription('Tx Unusable seconds at far-end: count of seconds with Tx Unusable\n        indications from the far-end Tx LSM.')
imaLinkFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-133) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeRxUnusableSecs.setDescription('Rx Unusable seconds at far-end: count of seconds with Rx Unusable\n        indications from the far-end Rx LSM.')
imaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setReference('ATM Forum IMA v1.1, (R-134) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition\n        has been entered on this link (i.e., some form of implementation\n        specific transmit fault).')
imaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setReference('ATM Forum IMA v1.1, (R-135) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition\n        has been entered on this link (i.e., LIF, LODS, \n        RFI-IMA, Mis-Connected or some form of implementation specific receive\n        fault).')
imaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setReference('ATM Forum IMA v1.1, (O-21) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setDescription('The number of times a far-end transmit failure alarm condition\n        has been entered on this link (i.e., Tx-Unusable-FE).  This is an\n        optional attribute.')
imaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setReference('ATM Forum IMA v1.1, (O-22) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setDescription('The number of times a far-end receive failure alarm condition\n        has been entered on this link (i.e., Rx-Unusable-FE).  This is an\n        optional attribute.')
imaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxStuffs.setReference('ATM Forum IMA v1.1, (O-23) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkTxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTxStuffs.setDescription('Count of stuff events inserted in the transmit direction.\n        This is an optional attribute.')
imaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxStuffs.setReference('ATM Forum IMA v1.1, (O-24) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkRxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkRxStuffs.setDescription('Count of stuff events detected in the receive direction.\n        This is an optional attribute.')
imaLinkRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxTestPattern.setStatus('current')
if mibBuilder.loadTexts: imaLinkRxTestPattern.setDescription('This object identifies the test pattern received in the\n        ICP Cell (octet 17) on the link during the IMA Test Pattern\n        Procedure.  This value may then be compared to the transmitted\n        test pattern.')
imaLinkTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 30), ImaTestProcStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTestProcStatus.setStatus('current')
if mibBuilder.loadTexts: imaLinkTestProcStatus.setDescription('This value indicates the current state of the Test Pattern\n        Procedure.  If the value is disabled(1), the test is not\n        running.  A value of operating(2) means the test is running\n        and no error has been found on this interface.  A value of\n        linkFail(3) means an error has been detected on this link\n        during the test.\n\n        Once an error is detected, the linkFail(3) value is latched until\n        either this object is read or until the imaGroupTestProcStatus\n        is moved to disabled(1).  Once read, if the error no longer\n        persists, a subsequent read will report the value operating(2).')
imaLinkValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkValidIntervals.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaLinkValidIntervals.setStatus('current')
if mibBuilder.loadTexts: imaLinkValidIntervals.setDescription('The number of previous 15 minute intervals for which valid data\n        was collected.  The value will be 96 unless the IMA group table\n        entry was created within the last 24 hours, in which case the value\n        will be the number of complete 15 minute intervals since the IMA\n        group table entry was created.  In the case where the agent is a\n        proxy, it is possible that some intervals are unavailable.  In this\n        case, this value is the maximum interval number for which valid\n        data is available.  This attribute is only mandatory when the IMA\n        Link Interval Statistics and/or IMA Link Total Statistics objects\n        are implemented.')
imaLinkInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkInvalidIntervals.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 \n         on page 77')
if mibBuilder.loadTexts: imaLinkInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: imaLinkInvalidIntervals.setDescription('The number of intervals for which no valid data is available.\n        This attribute is only mandatory when the IMA Link Interval\n        Statistics and/or IMA Link Total Statistics objects are\n        implemented.')
imaLinkTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTimeElapsed.setReference('ATM Forum IMA v1.1, (O-26) in Section 12.2.2.2 \n         on page 77')
if mibBuilder.loadTexts: imaLinkTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: imaLinkTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of\n        the current measurement period.  This attribute is only mandatory\n        when the IMA Link Current Statistics are implemented.')
imaAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 5), ImaAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: imaAlarmStatus.setDescription('Status of the IMA alarm.')
imaAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 6), ImaAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaAlarmType.setReference('ATM Forum IMA v1.1, Section 12.2.3 on page 79')
if mibBuilder.loadTexts: imaAlarmType.setStatus('current')
if mibBuilder.loadTexts: imaAlarmType.setDescription('The Type of IMA alarm declared or cleared.  The value of\n        ImaAlarmType identifies the type of alarm according to the\n        definitions in the IMA specification.')
imaFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IMA-MIB", "imaAlarmStatus"), ("IMA-MIB", "imaAlarmType"))
if mibBuilder.loadTexts: imaFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: imaFailureAlarm.setDescription('The imaFailureAlarm provides a method for an agent implementing IMA\n        to notify an NMS of an alarm condition.')
if mibBuilder.loadTexts: imaFailureAlarm.setReference('ATM Forum IMA v1.1, Section 12.2.3 on page 79')
imaGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7), )
if mibBuilder.loadTexts: imaGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: imaGroupCurrentTable.setDescription('The IMA Group Current table.')
imaGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: imaGroupCurrentEntry.setDescription('An entry in the IMA Group Current table.')
imaGroupCurrentUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentUnavailSecs.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55, (R-136) and\n        (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupCurrentUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaGroupCurrentUnavailSecs.setDescription('Count of one second intervals where the IMA Group Traffic\n        State Machine is Down in the current 15 minutes interval.')
imaGroupCurrentNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentNeNumFailures.setReference('ATM Forum IMA v1.1, (R-137) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaGroupCurrentNeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupCurrentNeNumFailures.setDescription('The number of times a near-end group failure (Config-Aborted,\n        Insufficient-Links) has been reported in the current 15\n        minutes interval.')
imaGroupCurrentFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupCurrentFeNumFailures.setReference('ATM Forum IMA v1.1, (O-25) and (O-26) in Section 12.2.2.2\n        on page 77')
if mibBuilder.loadTexts: imaGroupCurrentFeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupCurrentFeNumFailures.setDescription('The number of times a far-end group failure (Config-Aborted-FE,\n        Insufficient-Links-FE, Blocked-FE) has been reported in the\n        current 15 minutes interval.  This is an optional attribute.')
imaGroupIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8), )
if mibBuilder.loadTexts: imaGroupIntervalTable.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalTable.setDescription('The IMA Group Interval table.')
imaGroupIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"), (0, "IMA-MIB", "imaGroupIntervalNumber"))
if mibBuilder.loadTexts: imaGroupIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalEntry.setDescription('An entry in the IMA Group Interval table.')
imaGroupIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: imaGroupIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most\n         recently completed 15 minute interval and 96 is the least\n         recently completed 15 minutes interval (assuming that all\n         96 intervals are valid).')
imaGroupIntervalUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalUnavailSecs.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55, (R-136) and \n        (O-26) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupIntervalUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalUnavailSecs.setDescription('Count of one second intervals where the IMA Group Traffic\n        State Machine is Down in one of the previous 96, individual 15\n        minute, intervals.')
imaGroupIntervalNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalNeNumFailures.setReference('ATM Forum IMA v1.1, (R-137) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaGroupIntervalNeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalNeNumFailures.setDescription('The number of times a near-end group failure (Config-Aborted,\n        Insufficient-Links) has been reported in one of the previous\n        96, individual 15 minute, intervals.')
imaGroupIntervalFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIntervalFeNumFailures.setReference('ATM Forum IMA v1.1, (O-25) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaGroupIntervalFeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalFeNumFailures.setDescription('The number of times a far-end group failure (Config-Aborted-FE,\n        Insufficient-Links-FE, Blocked-FE) has been reported in one of\n        the previous 96, individual 15 minute, intervals.  This is an\n        optional attribute.')
imaGroupTotalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9), )
if mibBuilder.loadTexts: imaGroupTotalTable.setStatus('current')
if mibBuilder.loadTexts: imaGroupTotalTable.setDescription('The IMA Group Total table.')
imaGroupTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1), ).setIndexNames((0, "IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupTotalEntry.setStatus('current')
if mibBuilder.loadTexts: imaGroupTotalEntry.setDescription('An entry in the IMA Group Total table.')
imaGroupTotalUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalUnavailSecs.setReference('ATM Forum IMA v1.1, Section 10.2.1 on page 55, (R-136) and \n        (O-27) in Section 12.2.2.2 on page 77')
if mibBuilder.loadTexts: imaGroupTotalUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaGroupTotalUnavailSecs.setDescription('Count of one second intervals where the IMA Group Traffic\n        State Machine is Down in the previous 24 hour interval.\n        Invalid 15 minute intervals count as 0.')
imaGroupTotalNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalNeNumFailures.setReference('ATM Forum IMA v1.1, (R-137) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaGroupTotalNeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupTotalNeNumFailures.setDescription('The number of times a near-end group failure (Config-Aborted,\n        Insufficient-Links) has been reported in the previous 24 hour\n        interval.  Invalid 15 minute intervals count as 0.')
imaGroupTotalFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTotalFeNumFailures.setReference('ATM Forum IMA v1.1, (O-25) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaGroupTotalFeNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaGroupTotalFeNumFailures.setDescription('The number of times a far-end group failure (Config-Aborted-FE,\n        Insufficient-Links-FE, Blocked-FE) has been reported in the\n        previous 24 hour interval.  Invalid 15 minute intervals count\n        as 0.  This is an optional attribute.')
imaLinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10), )
if mibBuilder.loadTexts: imaLinkCurrentTable.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentTable.setDescription('The IMA Link Current table.')
imaLinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaLinkCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentEntry.setDescription('An entry in the IMA Link Current table.')
imaLinkCurrentImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentImaViolations.setReference('ATM Forum IMA v1.1, (R-125) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentImaViolations.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells,\n        except during SES-IMA or UAS-IMA conditions, in the current\n        15 minute interval.')
imaLinkCurrentOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentOifAnomalies.setReference('ATM Forum IMA v1.1, (O-20) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentOifAnomalies.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA\n        conditions, at the near-end in the current 15 minute interval.\n        This is an optional attribute.')
imaLinkCurrentNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-126) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells\n        counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF,\n        AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA\n        condition, in the current 15 minute interval.')
imaLinkCurrentFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-127) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeSevErroredSecs.setDescription('Count of one second intervals containing one or more RDI-IMA\n        defects, except during UAS-IMA-FE condition, in the current 15\n        minute interval.')
imaLinkCurrentNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-128) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeUnavailSecs.setDescription('Count of unavailable seconds at near-end in the current 15 minute\n        interval: unavailability begins at the onset of 10 contiguous\n        SES-IMA and ends at the onset of 10 contiguous seconds with no\n        SES-IMA.')
imaLinkCurrentFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-129) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeUnavailSecs.setDescription('Count of unavailable seconds at far-end in the current 15 minute\n        interval: unavailability begins at the onset of 10 contiguous\n        SES-IMA-FE and ends at the onset of 10 contiguous seconds with no\n        SES-IMA-FE.')
imaLinkCurrentNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-130) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the near-end\n        Tx LSM in the current 15 minute interval.')
imaLinkCurrentNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-131) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the near-end\n        Rx LSM in the current 15 minute interval.')
imaLinkCurrentFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-132) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeTxUnusableSecs.setDescription('Tx Unusable seconds at far-end: count of seconds with Tx Unusable\n        indications from the far-end Tx LSM in the current 15 minute\n        interval.')
imaLinkCurrentFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-133) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeRxUnusableSecs.setDescription('Rx Unusable seconds at far-end: count of seconds with Rx Unusable\n        indications from the far-end Rx LSM in the current 15 minute\n        interval.')
imaLinkCurrentNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeTxNumFailures.setReference('ATM Forum IMA v1.1, (R-134) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition\n        has been entered on this link (i.e., some form of implementation\n        specific transmit fault) in the current 15 minute interval.')
imaLinkCurrentNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentNeRxNumFailures.setReference('ATM Forum IMA v1.1, (R-135) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentNeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition\n        has been entered on this link (i.e., LIF, LODS, RFI-IMA, Mis-Connected,\n        or some form of implementation specific receive fault)\n        in the current 15 minute interval.')
imaLinkCurrentFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeTxNumFailures.setReference('ATM Forum IMA v1.1, (O-21) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeTxNumFailures.setDescription('The number of times a far-end transmit failure alarm condition\n        has been entered on this link (i.e., Tx-Unusable-FE) in the\n        current 15 minute interval.  This is an optional attribute.')
imaLinkCurrentFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentFeRxNumFailures.setReference('ATM Forum IMA v1.1, (O-22) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentFeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentFeRxNumFailures.setDescription('The number of times a far-end receive failure alarm condition\n        has been entered on this link (i.e., Rx-Unusable-FE) in the\n        current 15 minute interval.  This is an optional attribute.')
imaLinkCurrentTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentTxStuffs.setReference('ATM Forum IMA v1.1, (O-23) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentTxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentTxStuffs.setDescription('Count of stuff events inserted in the transmit direction in\n        the current 15 minute interval.  This is an optional attribute.')
imaLinkCurrentRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 10, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkCurrentRxStuffs.setReference('ATM Forum IMA v1.1, (O-24) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkCurrentRxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkCurrentRxStuffs.setDescription('Count of stuff events detected in the receive direction in\n        the current 15 minute interval.  This is an optional attribute.')
imaLinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11), )
if mibBuilder.loadTexts: imaLinkIntervalTable.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalTable.setDescription('The IMA Link Interval table.')
imaLinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IMA-MIB", "imaLinkIntervalNumber"))
if mibBuilder.loadTexts: imaLinkIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalEntry.setDescription('An entry in the IMA Link Interval table.')
imaLinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: imaLinkIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most\n         recently completed 15 minute interval and 96 is the least\n         recently completed 15 minutes interval (assuming that all\n         96 intervals are valid).')
imaLinkIntervalImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalImaViolations.setReference('ATM Forum IMA v1.1, (R-125) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalImaViolations.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells,\n        except during SES-IMA or UAS-IMA conditions, in one of the\n        previous 96, individual 15 minute, intervals.')
imaLinkIntervalOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalOifAnomalies.setReference('ATM Forum IMA v1.1, (O-20) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalOifAnomalies.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA\n        conditions, at the near-end in one of the previous 96, individual\n        15 minute, intervals.  This is an optional attribute.')
imaLinkIntervalNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-126) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells\n        counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF,\n        AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA\n        condition, in one of the previous 96, individual 15 minute,\n        intervals.')
imaLinkIntervalFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-127) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeSevErroredSecs.setDescription('Count of one second intervals containing one or more RDI-IMA\n        defects, except during UAS-IMA-FE condition, in one of the previous\n        96, individual 15 minute, intervals.')
imaLinkIntervalNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-128) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeUnavailSecs.setDescription('Count of unavailable seconds at near-end in one of the previous\n        96, individual 15 minute, intervals: unavailability begins at the\n        onset of 10 contiguous SES-IMA and ends at the onset of 10\n        contiguous seconds with no SES-IMA.')
imaLinkIntervalFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-129) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeUnavailSecs.setDescription('Count of unavailable seconds at far-end in one of the previous\n        96, individual 15 minute, intervals: unavailability begins at the\n        onset of 10 contiguous SES-IMA-FE and ends at the onset of 10\n        contiguous seconds with no SES-IMA-FE.')
imaLinkIntervalNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-130) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the near-end\n        Tx LSM in one of the previous 96, individual 15 minute, intervals.')
imaLinkIntervalNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-131) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the near-end\n        Rx LSM in one of the previous 96, individual 15 minute, intervals.')
imaLinkIntervalFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-132) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeTxUnusableSecs.setDescription('Tx Unusable seconds at far-end: count of seconds with Tx Unusable\n        indications from the far-end Tx LSM in one of the previous 96,\n        individual 15 minute, intervals.')
imaLinkIntervalFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-133) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeRxUnusableSecs.setDescription('Rx Unusable seconds at far-end: count of seconds with Rx Unusable\n        indications from the far-end Rx LSM in one of the previous 96,\n        individual 15 minute, intervals.')
imaLinkIntervalNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeTxNumFailures.setReference('ATM Forum IMA v1.1, (R-134) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition\n        has been entered on this link (i.e., some form of implementation\n        specific transmit fault) in one of the previous 96, individual\n        15 minute, intervals.')
imaLinkIntervalNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalNeRxNumFailures.setReference('ATM Forum IMA v1.1, (R-135) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalNeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition\n        has been entered on this link (i.e., LIF, LODS, RFI-IMA, \n        Mis-Connected, or some form of implementation specific \n        receive fault) in one of the previous 96, individual 15 minute,\n        intervals.')
imaLinkIntervalFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeTxNumFailures.setReference('ATM Forum IMA v1.1, (O-21) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeTxNumFailures.setDescription('The number of times a far-end transmit failure alarm condition\n        has been entered on this link (i.e., Tx-Unusable-FE) in one of the\n        previous 96, individual 15 minute, intervals.  This is an optional\n        attribute.')
imaLinkIntervalFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalFeRxNumFailures.setReference('ATM Forum IMA v1.1, (O-22) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalFeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalFeRxNumFailures.setDescription('The number of times a far-end receive failure alarm condition\n        has been entered on this link (i.e., Rx-Unusable-FE) in one of\n        the previous 96, individual 15 minute, intervals.  This is an\n        optional attribute.')
imaLinkIntervalTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalTxStuffs.setReference('ATM Forum IMA v1.1, (O-23) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalTxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalTxStuffs.setDescription('Count of stuff events inserted in the transmit direction in\n        one of the previous 96, individual 15 minute, intervals.  This\n        is an optional attribute.')
imaLinkIntervalRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 11, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIntervalRxStuffs.setReference('ATM Forum IMA v1.1, (O-24) and (O-26) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkIntervalRxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalRxStuffs.setDescription('Count of stuff events detected in the receive direction in\n        one of the previous 96, individual 15 minute, intervals.  This\n        is an optional attribute.')
imaLinkTotalTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12), )
if mibBuilder.loadTexts: imaLinkTotalTable.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalTable.setDescription('The IMA Link Total table.')
imaLinkTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: imaLinkTotalEntry.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalEntry.setDescription('An entry in the IMA Link Total table.')
imaLinkTotalImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalImaViolations.setReference('ATM Forum IMA v1.1, (R-125) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalImaViolations.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells,\n        except during SES-IMA or UAS-IMA conditions, in the previous 24\n        hour interval.  Invalid 15 minute intervals count as 0.')
imaLinkTotalOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalOifAnomalies.setReference('ATM Forum IMA v1.1, (O-20) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalOifAnomalies.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA\n        conditions, at the near-end in the previous 24 hour interval.\n        Invalid 15 minute intervals count as 0.  This is an optional\n        attribute.')
imaLinkTotalNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-126) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells\n        counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF,\n        AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA\n        condition, in the previous 24 hour interval.  Invalid 15 minute\n        intervals count as 0.')
imaLinkTotalFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeSevErroredSecs.setReference('ATM Forum IMA v1.1, (R-127) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeSevErroredSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeSevErroredSecs.setDescription('Count of one second intervals containing one or more RDI-IMA\n        defects, except during UAS-IMA-FE condition, in the previous 24\n        hour interval.  Invalid 15 minute intervals count as 0.')
imaLinkTotalNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-128) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeUnavailSecs.setDescription('Count of unavailable seconds at near-end in the previous 24 hour\n        interval: unavailability begins at the onset of 10 contiguous\n        SES-IMA and ends at the onset of 10 contiguous seconds with no\n        SES-IMA.  Invalid 15 minute intervals count as 0.')
imaLinkTotalFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeUnavailSecs.setReference('ATM Forum IMA v1.1, (R-129) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeUnavailSecs.setDescription('Count of unavailable seconds at far-end in the previous 24 hour\n        interval: unavailability begins at the onset of 10 contiguous\n        SES-IMA-FE and ends at the onset of 10 contiguous seconds with no\n        SES-IMA-FE.  Invalid 15 minute intervals count as 0.')
imaLinkTotalNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-130) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the near-end\n        Tx LSM in the previous 24 hour interval.  Invalid 15 minute\n        intervals count as 0.')
imaLinkTotalNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-131) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the near-end\n        Rx LSM in the previous 24 hour interval.  Invalid 15 minute\n        intervals count as 0.')
imaLinkTotalFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeTxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-132) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeTxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeTxUnusableSecs.setDescription('Tx Unusable seconds at far-end: count of seconds with Tx Unusable\n        indications from the far-end Tx LSM in the previous 24 hour\n        interval.  Invalid 15 minute intervals count as 0.')
imaLinkTotalFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeRxUnusableSecs.setReference('ATM Forum IMA v1.1, (R-133) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeRxUnusableSecs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeRxUnusableSecs.setDescription('Rx Unusable seconds at far-end: count of seconds with Rx Unusable\n        indications from the far-end Rx LSM in the previous 24 hour\n        interval.  Invalid 15 minute intervals count as 0.')
imaLinkTotalNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeTxNumFailures.setReference('ATM Forum IMA v1.1, (R-134) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition\n        has been entered on this link (i.e., some form of implementation\n        specific transmit fault) in the previous 24 hour interval.\n        Invalid 15 minute intervals count as 0.')
imaLinkTotalNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalNeRxNumFailures.setReference('ATM Forum IMA v1.1, (R-135) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalNeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition\n        has been entered on this link (i.e., LIF, LODS, RFI-IMA, \n        Mis-Connected, or some form of implementation specific receive fault)\n        in the previous 24 hour interval. Invalid 15 minute intervals\n        count as 0.')
imaLinkTotalFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeTxNumFailures.setReference('ATM Forum IMA v1.1, (O-21) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeTxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeTxNumFailures.setDescription('The number of times a far-end transmit failure alarm condition\n        has been entered on this link (i.e., Tx-Unusable-FE) in the\n        previous 24 hour interval.  Invalid 15 minute intervals count\n        as 0.  This is an optional attribute.')
imaLinkTotalFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalFeRxNumFailures.setReference('ATM Forum IMA v1.1, (O-22) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalFeRxNumFailures.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalFeRxNumFailures.setDescription('The number of times a far-end receive failure alarm condition\n        has been entered on this link (i.e., Rx-Unusable-FE) in the\n        previous 24 hour interval.  Invalid 15 minute intervals count\n        as 0.  This is an optional attribute.')
imaLinkTotalTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalTxStuffs.setReference('ATM Forum IMA v1.1, (O-23) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalTxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalTxStuffs.setDescription('Count of stuff events inserted in the transmit direction in\n        the previous 24 hour interval.  Invalid 15 minute intervals\n        count as 0.  This is an optional attribute.')
imaLinkTotalRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 1, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTotalRxStuffs.setReference('ATM Forum IMA v1.1, (O-24) and (O-27) in Section 12.2.2.2 \n        on page 77')
if mibBuilder.loadTexts: imaLinkTotalRxStuffs.setStatus('current')
if mibBuilder.loadTexts: imaLinkTotalRxStuffs.setDescription('Count of stuff events detected in the receive direction in\n        the previous 24 hour interval.  Invalid 15 minute intervals\n        count as 0.  This is an optional attribute.')
atmfImaMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1))
atmfImaMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 2))
atmfImaMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 2, 1)).setObjects(("IMA-MIB", "imaGroupGroup"), ("IMA-MIB", "imaLinkGroup"), ("IMA-MIB", "imaGroupMappingTableGroup"), ("IMA-MIB", "imaAlarmGroup"), ("IMA-MIB", "imaTestPatternGroup"), ("IMA-MIB", "imaGroupIntervalGroup"), ("IMA-MIB", "imaLinkIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfImaMibCompliance = atmfImaMibCompliance.setStatus('current')
if mibBuilder.loadTexts: atmfImaMibCompliance.setDescription('The compliance statement for network elements implementing\n        ATM Forum Inverse Multiplexing for ATM (IMA) interfaces.')
imaGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 1)).setObjects(("IMA-MIB", "imaGroupNumber"), ("IMA-MIB", "imaGroupRowStatus"), ("IMA-MIB", "imaGroupIfIndex"), ("IMA-MIB", "imaGroupNeState"), ("IMA-MIB", "imaGroupFeState"), ("IMA-MIB", "imaGroupFailureStatus"), ("IMA-MIB", "imaGroupSymmetry"), ("IMA-MIB", "imaGroupMinNumTxLinks"), ("IMA-MIB", "imaGroupMinNumRxLinks"), ("IMA-MIB", "imaGroupNeTxClkMode"), ("IMA-MIB", "imaGroupFeTxClkMode"), ("IMA-MIB", "imaGroupTxTimingRefLink"), ("IMA-MIB", "imaGroupRxTimingRefLink"), ("IMA-MIB", "imaGroupLastChange"), ("IMA-MIB", "imaGroupTxImaId"), ("IMA-MIB", "imaGroupRxImaId"), ("IMA-MIB", "imaGroupTxFrameLength"), ("IMA-MIB", "imaGroupRxFrameLength"), ("IMA-MIB", "imaGroupDiffDelayMax"), ("IMA-MIB", "imaGroupLeastDelayLink"), ("IMA-MIB", "imaGroupDiffDelayMaxObs"), ("IMA-MIB", "imaGroupAlphaValue"), ("IMA-MIB", "imaGroupBetaValue"), ("IMA-MIB", "imaGroupGammaValue"), ("IMA-MIB", "imaGroupRunningSecs"), ("IMA-MIB", "imaGroupUnavailSecs"), ("IMA-MIB", "imaGroupNeNumFailures"), ("IMA-MIB", "imaGroupFeNumFailures"), ("IMA-MIB", "imaGroupTxAvailCellRate"), ("IMA-MIB", "imaGroupRxAvailCellRate"), ("IMA-MIB", "imaGroupNumTxCfgLinks"), ("IMA-MIB", "imaGroupNumRxCfgLinks"), ("IMA-MIB", "imaGroupNumTxActLinks"), ("IMA-MIB", "imaGroupNumRxActLinks"), ("IMA-MIB", "imaGroupTxOamLabelValue"), ("IMA-MIB", "imaGroupRxOamLabelValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupGroup = imaGroupGroup.setStatus('current')
if mibBuilder.loadTexts: imaGroupGroup.setDescription('A set of objects providing configuration and status information for\n        an IMA group definition.')
imaLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 2)).setObjects(("IMA-MIB", "imaLinkRowStatus"), ("IMA-MIB", "imaLinkGroupIndex"), ("IMA-MIB", "imaLinkNeTxState"), ("IMA-MIB", "imaLinkNeRxState"), ("IMA-MIB", "imaLinkFeTxState"), ("IMA-MIB", "imaLinkFeRxState"), ("IMA-MIB", "imaLinkNeRxFailureStatus"), ("IMA-MIB", "imaLinkFeRxFailureStatus"), ("IMA-MIB", "imaLinkTxLid"), ("IMA-MIB", "imaLinkRxLid"), ("IMA-MIB", "imaLinkRelDelay"), ("IMA-MIB", "imaLinkImaViolations"), ("IMA-MIB", "imaLinkOifAnomalies"), ("IMA-MIB", "imaLinkNeSevErroredSecs"), ("IMA-MIB", "imaLinkFeSevErroredSecs"), ("IMA-MIB", "imaLinkNeUnavailSecs"), ("IMA-MIB", "imaLinkFeUnavailSecs"), ("IMA-MIB", "imaLinkNeTxUnusableSecs"), ("IMA-MIB", "imaLinkNeRxUnusableSecs"), ("IMA-MIB", "imaLinkFeTxUnusableSecs"), ("IMA-MIB", "imaLinkFeRxUnusableSecs"), ("IMA-MIB", "imaLinkNeTxNumFailures"), ("IMA-MIB", "imaLinkNeRxNumFailures"), ("IMA-MIB", "imaLinkFeTxNumFailures"), ("IMA-MIB", "imaLinkFeRxNumFailures"), ("IMA-MIB", "imaLinkTxStuffs"), ("IMA-MIB", "imaLinkRxStuffs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaLinkGroup = imaLinkGroup.setStatus('current')
if mibBuilder.loadTexts: imaLinkGroup.setDescription('A set of objects providing status information for an IMA link.')
imaGroupMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 3)).setObjects(("IMA-MIB", "imaGroupMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupMappingTableGroup = imaGroupMappingTableGroup.setStatus('current')
if mibBuilder.loadTexts: imaGroupMappingTableGroup.setDescription("A table mapping the 'ifIndex' values of 'imaGroupIfIndex'\n        to the 'imaGroupIndex' values of the corresponding\n        IMA group.")
imaTestPatternGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 4)).setObjects(("IMA-MIB", "imaGroupTestLinkIfIndex"), ("IMA-MIB", "imaGroupTestPattern"), ("IMA-MIB", "imaGroupTestProcStatus"), ("IMA-MIB", "imaLinkRxTestPattern"), ("IMA-MIB", "imaLinkTestProcStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaTestPatternGroup = imaTestPatternGroup.setStatus('current')
if mibBuilder.loadTexts: imaTestPatternGroup.setDescription('Objects in the imaGroupTable and imaLinkTable which control and\n        report on the Test Pattern Procedure.  These objects must be\n        implemented if the IMA Test Pattern Procedure is supported.')
imaAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 5)).setObjects(("IMA-MIB", "imaAlarmStatus"), ("IMA-MIB", "imaAlarmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaAlarmGroup = imaAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: imaAlarmGroup.setDescription('Objects used in the imaFailureAlarm notification.')
imaGroupIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 6)).setObjects(("IMA-MIB", "imaGroupValidIntervals"), ("IMA-MIB", "imaGroupInvalidIntervals"), ("IMA-MIB", "imaGroupTimeElapsed"), ("IMA-MIB", "imaGroupCurrentUnavailSecs"), ("IMA-MIB", "imaGroupCurrentNeNumFailures"), ("IMA-MIB", "imaGroupCurrentFeNumFailures"), ("IMA-MIB", "imaGroupIntervalUnavailSecs"), ("IMA-MIB", "imaGroupIntervalNeNumFailures"), ("IMA-MIB", "imaGroupIntervalFeNumFailures"), ("IMA-MIB", "imaGroupTotalUnavailSecs"), ("IMA-MIB", "imaGroupTotalNeNumFailures"), ("IMA-MIB", "imaGroupTotalFeNumFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaGroupIntervalGroup = imaGroupIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: imaGroupIntervalGroup.setDescription('Objects containing interval statistics for an IMA group.')
imaLinkIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 7)).setObjects(("IMA-MIB", "imaLinkValidIntervals"), ("IMA-MIB", "imaLinkInvalidIntervals"), ("IMA-MIB", "imaLinkTimeElapsed"), ("IMA-MIB", "imaLinkCurrentImaViolations"), ("IMA-MIB", "imaLinkCurrentOifAnomalies"), ("IMA-MIB", "imaLinkCurrentNeSevErroredSecs"), ("IMA-MIB", "imaLinkCurrentFeSevErroredSecs"), ("IMA-MIB", "imaLinkCurrentNeUnavailSecs"), ("IMA-MIB", "imaLinkCurrentFeUnavailSecs"), ("IMA-MIB", "imaLinkCurrentNeTxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentNeRxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentFeTxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentFeRxUnusableSecs"), ("IMA-MIB", "imaLinkCurrentNeTxNumFailures"), ("IMA-MIB", "imaLinkCurrentNeRxNumFailures"), ("IMA-MIB", "imaLinkCurrentFeTxNumFailures"), ("IMA-MIB", "imaLinkCurrentFeRxNumFailures"), ("IMA-MIB", "imaLinkCurrentTxStuffs"), ("IMA-MIB", "imaLinkCurrentRxStuffs"), ("IMA-MIB", "imaLinkIntervalImaViolations"), ("IMA-MIB", "imaLinkIntervalOifAnomalies"), ("IMA-MIB", "imaLinkIntervalNeSevErroredSecs"), ("IMA-MIB", "imaLinkIntervalFeSevErroredSecs"), ("IMA-MIB", "imaLinkIntervalNeUnavailSecs"), ("IMA-MIB", "imaLinkIntervalFeUnavailSecs"), ("IMA-MIB", "imaLinkIntervalNeTxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalNeRxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalFeTxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalFeRxUnusableSecs"), ("IMA-MIB", "imaLinkIntervalNeTxNumFailures"), ("IMA-MIB", "imaLinkIntervalNeRxNumFailures"), ("IMA-MIB", "imaLinkIntervalFeTxNumFailures"), ("IMA-MIB", "imaLinkIntervalFeRxNumFailures"), ("IMA-MIB", "imaLinkIntervalTxStuffs"), ("IMA-MIB", "imaLinkIntervalRxStuffs"), ("IMA-MIB", "imaLinkTotalImaViolations"), ("IMA-MIB", "imaLinkTotalOifAnomalies"), ("IMA-MIB", "imaLinkTotalNeSevErroredSecs"), ("IMA-MIB", "imaLinkTotalFeSevErroredSecs"), ("IMA-MIB", "imaLinkTotalNeUnavailSecs"), ("IMA-MIB", "imaLinkTotalFeUnavailSecs"), ("IMA-MIB", "imaLinkTotalNeTxUnusableSecs"), ("IMA-MIB", "imaLinkTotalNeRxUnusableSecs"), ("IMA-MIB", "imaLinkTotalFeTxUnusableSecs"), ("IMA-MIB", "imaLinkTotalFeRxUnusableSecs"), ("IMA-MIB", "imaLinkTotalNeTxNumFailures"), ("IMA-MIB", "imaLinkTotalNeRxNumFailures"), ("IMA-MIB", "imaLinkTotalFeTxNumFailures"), ("IMA-MIB", "imaLinkTotalFeRxNumFailures"), ("IMA-MIB", "imaLinkTotalTxStuffs"), ("IMA-MIB", "imaLinkTotalRxStuffs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaLinkIntervalGroup = imaLinkIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: imaLinkIntervalGroup.setDescription('Objects containing interval statistics for an IMA link.')
imaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 7, 1, 3, 1, 8)).setObjects(("IMA-MIB", "imaFailureAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    imaNotificationsGroup = imaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: imaNotificationsGroup.setDescription('Notifications that must be implemented for IMA groups and links.')
mibBuilder.exportSymbols("IMA-MIB", imaLinkIntervalNeRxNumFailures=imaLinkIntervalNeRxNumFailures, imaGroupRxImaId=imaGroupRxImaId, ImaGroupSymmetry=ImaGroupSymmetry, atmfImaMibCompliance=atmfImaMibCompliance, imaLinkIntervalFeRxNumFailures=imaLinkIntervalFeRxNumFailures, ImaLinkFailureStatus=ImaLinkFailureStatus, imaGroupIntervalEntry=imaGroupIntervalEntry, imaLinkRxLid=imaLinkRxLid, imaFailureAlarm=imaFailureAlarm, imaGroupUnavailSecs=imaGroupUnavailSecs, imaGroupIfIndex=imaGroupIfIndex, imaLinkIntervalNeSevErroredSecs=imaLinkIntervalNeSevErroredSecs, imaLinkIntervalNeRxUnusableSecs=imaLinkIntervalNeRxUnusableSecs, imaNotificationsGroup=imaNotificationsGroup, imaLinkCurrentImaViolations=imaLinkCurrentImaViolations, imaGroupInvalidIntervals=imaGroupInvalidIntervals, ImaGroupFailureStatus=ImaGroupFailureStatus, imaGroupMinNumRxLinks=imaGroupMinNumRxLinks, imaGroupNeTxClkMode=imaGroupNeTxClkMode, imaLinkGroupIndex=imaLinkGroupIndex, imaLinkNeRxNumFailures=imaLinkNeRxNumFailures, imaLinkFeTxNumFailures=imaLinkFeTxNumFailures, atmfImaMibTrapPrefix=atmfImaMibTrapPrefix, imaLinkCurrentFeUnavailSecs=imaLinkCurrentFeUnavailSecs, imaLinkCurrentFeRxNumFailures=imaLinkCurrentFeRxNumFailures, imaGroupTotalEntry=imaGroupTotalEntry, imaLinkNeRxFailureStatus=imaLinkNeRxFailureStatus, imaLinkFeRxFailureStatus=imaLinkFeRxFailureStatus, atmfImaMibTraps=atmfImaMibTraps, imaLinkIntervalFeTxNumFailures=imaLinkIntervalFeTxNumFailures, imaGroupIndex=imaGroupIndex, imaLinkTotalOifAnomalies=imaLinkTotalOifAnomalies, imaGroupMappingTable=imaGroupMappingTable, imaGroupAlphaValue=imaGroupAlphaValue, imaLinkCurrentEntry=imaLinkCurrentEntry, imaLinkCurrentNeUnavailSecs=imaLinkCurrentNeUnavailSecs, imaAlarmStatus=imaAlarmStatus, imaLinkTotalNeSevErroredSecs=imaLinkTotalNeSevErroredSecs, imaLinkTotalEntry=imaLinkTotalEntry, imaLinkTestProcStatus=imaLinkTestProcStatus, imaLinkIntervalNeTxNumFailures=imaLinkIntervalNeTxNumFailures, imaLinkIfIndex=imaLinkIfIndex, imaLinkFeRxUnusableSecs=imaLinkFeRxUnusableSecs, imaLinkIntervalEntry=imaLinkIntervalEntry, imaGroupCurrentEntry=imaGroupCurrentEntry, imaGroupNeNumFailures=imaGroupNeNumFailures, imaAlarmGroup=imaAlarmGroup, imaGroupFeState=imaGroupFeState, imaGroupFeTxClkMode=imaGroupFeTxClkMode, imaGroupTxImaId=imaGroupTxImaId, imaGroupBetaValue=imaGroupBetaValue, imaGroupIntervalNeNumFailures=imaGroupIntervalNeNumFailures, imaLinkRxTestPattern=imaLinkRxTestPattern, imaLinkTotalFeUnavailSecs=imaLinkTotalFeUnavailSecs, PYSNMP_MODULE_ID=atmfImaMib, atmForumNetworkManagement=atmForumNetworkManagement, imaLinkCurrentNeSevErroredSecs=imaLinkCurrentNeSevErroredSecs, MilliSeconds=MilliSeconds, imaGroupNumTxCfgLinks=imaGroupNumTxCfgLinks, imaLinkEntry=imaLinkEntry, imaLinkNeSevErroredSecs=imaLinkNeSevErroredSecs, imaGroupNumber=imaGroupNumber, imaLinkFeSevErroredSecs=imaLinkFeSevErroredSecs, imaLinkInvalidIntervals=imaLinkInvalidIntervals, imaGroupTotalNeNumFailures=imaGroupTotalNeNumFailures, imaLinkIntervalTable=imaLinkIntervalTable, imaLinkTotalNeTxNumFailures=imaLinkTotalNeTxNumFailures, imaLinkFeTxState=imaLinkFeTxState, atmfImaMibGroups=atmfImaMibGroups, imaLinkIntervalFeRxUnusableSecs=imaLinkIntervalFeRxUnusableSecs, imaLinkTotalFeSevErroredSecs=imaLinkTotalFeSevErroredSecs, imaGroupTable=imaGroupTable, imaLinkIntervalImaViolations=imaLinkIntervalImaViolations, imaLinkIntervalNumber=imaLinkIntervalNumber, imaGroupFailureStatus=imaGroupFailureStatus, imaGroupValidIntervals=imaGroupValidIntervals, imaLinkIntervalGroup=imaLinkIntervalGroup, imaGroupNumRxActLinks=imaGroupNumRxActLinks, imaLinkCurrentFeTxNumFailures=imaLinkCurrentFeTxNumFailures, ImaGroupState=ImaGroupState, imaGroupNumRxCfgLinks=imaGroupNumRxCfgLinks, imaLinkNeTxState=imaLinkNeTxState, imaGroupIntervalNumber=imaGroupIntervalNumber, imaLinkTotalNeRxUnusableSecs=imaLinkTotalNeRxUnusableSecs, imaGroupFeNumFailures=imaGroupFeNumFailures, imaLinkTotalRxStuffs=imaLinkTotalRxStuffs, imaTestPatternGroup=imaTestPatternGroup, imaLinkTable=imaLinkTable, imaGroupRxTimingRefLink=imaGroupRxTimingRefLink, atmfImaMibObjects=atmfImaMibObjects, imaGroupCurrentFeNumFailures=imaGroupCurrentFeNumFailures, imaLinkNeRxState=imaLinkNeRxState, ImaTestProcStatus=ImaTestProcStatus, imaLinkCurrentFeRxUnusableSecs=imaLinkCurrentFeRxUnusableSecs, imaGroupCurrentNeNumFailures=imaGroupCurrentNeNumFailures, imaLinkRowStatus=imaLinkRowStatus, imaGroupIntervalGroup=imaGroupIntervalGroup, ImaFrameLength=ImaFrameLength, imaGroupCurrentUnavailSecs=imaGroupCurrentUnavailSecs, imaGroupMappingTableGroup=imaGroupMappingTableGroup, imaGroupRxFrameLength=imaGroupRxFrameLength, imaLinkCurrentNeRxUnusableSecs=imaLinkCurrentNeRxUnusableSecs, imaLinkNeUnavailSecs=imaLinkNeUnavailSecs, imaGroupTotalTable=imaGroupTotalTable, imaLinkIntervalRxStuffs=imaLinkIntervalRxStuffs, imaLinkTxLid=imaLinkTxLid, atmForum=atmForum, imaGroupNeState=imaGroupNeState, imaGroupMinNumTxLinks=imaGroupMinNumTxLinks, imaLinkRxStuffs=imaLinkRxStuffs, imaLinkCurrentFeSevErroredSecs=imaLinkCurrentFeSevErroredSecs, imaGroupMappingIndex=imaGroupMappingIndex, imaLinkNeTxUnusableSecs=imaLinkNeTxUnusableSecs, imaLinkFeRxState=imaLinkFeRxState, imaLinkIntervalNeTxUnusableSecs=imaLinkIntervalNeTxUnusableSecs, imaLinkIntervalFeUnavailSecs=imaLinkIntervalFeUnavailSecs, imaGroupRowStatus=imaGroupRowStatus, ImaLinkState=ImaLinkState, imaLinkTotalFeTxUnusableSecs=imaLinkTotalFeTxUnusableSecs, imaAlarmType=imaAlarmType, imaGroupNumTxActLinks=imaGroupNumTxActLinks, imaLinkCurrentTxStuffs=imaLinkCurrentTxStuffs, imaLinkTimeElapsed=imaLinkTimeElapsed, imaLinkCurrentOifAnomalies=imaLinkCurrentOifAnomalies, imaGroupDiffDelayMax=imaGroupDiffDelayMax, imaGroupGroup=imaGroupGroup, imaGroupTotalFeNumFailures=imaGroupTotalFeNumFailures, imaGroupIntervalFeNumFailures=imaGroupIntervalFeNumFailures, imaLinkTotalTable=imaLinkTotalTable, imaLinkGroup=imaLinkGroup, imaGroupIntervalUnavailSecs=imaGroupIntervalUnavailSecs, imaLinkTotalTxStuffs=imaLinkTotalTxStuffs, imaLinkIntervalOifAnomalies=imaLinkIntervalOifAnomalies, imaLinkIntervalFeSevErroredSecs=imaLinkIntervalFeSevErroredSecs, imaLinkCurrentFeTxUnusableSecs=imaLinkCurrentFeTxUnusableSecs, imaLinkIntervalTxStuffs=imaLinkIntervalTxStuffs, imaLinkTotalFeRxNumFailures=imaLinkTotalFeRxNumFailures, imaLinkIntervalFeTxUnusableSecs=imaLinkIntervalFeTxUnusableSecs, imaGroupTestProcStatus=imaGroupTestProcStatus, ImaAlarmType=ImaAlarmType, imaGroupLeastDelayLink=imaGroupLeastDelayLink, imaLinkValidIntervals=imaLinkValidIntervals, imaLinkCurrentNeTxNumFailures=imaLinkCurrentNeTxNumFailures, imaLinkCurrentRxStuffs=imaLinkCurrentRxStuffs, imaGroupTxAvailCellRate=imaGroupTxAvailCellRate, imaLinkRelDelay=imaLinkRelDelay, imaLinkTotalNeRxNumFailures=imaLinkTotalNeRxNumFailures, imaLinkTotalFeRxUnusableSecs=imaLinkTotalFeRxUnusableSecs, imaGroupLastChange=imaGroupLastChange, imaLinkFeUnavailSecs=imaLinkFeUnavailSecs, ImaAlarmStatus=ImaAlarmStatus, imaGroupTxFrameLength=imaGroupTxFrameLength, imaGroupTxTimingRefLink=imaGroupTxTimingRefLink, imaGroupTestLinkIfIndex=imaGroupTestLinkIfIndex, imaLinkNeTxNumFailures=imaLinkNeTxNumFailures, imaLinkTotalNeUnavailSecs=imaLinkTotalNeUnavailSecs, atmfImaMibCompliances=atmfImaMibCompliances, imaGroupTxOamLabelValue=imaGroupTxOamLabelValue, imaGroupRxAvailCellRate=imaGroupRxAvailCellRate, imaLinkIntervalNeUnavailSecs=imaLinkIntervalNeUnavailSecs, imaLinkTxStuffs=imaLinkTxStuffs, atmfIma=atmfIma, imaGroupTimeElapsed=imaGroupTimeElapsed, imaGroupGammaValue=imaGroupGammaValue, imaLinkTotalNeTxUnusableSecs=imaLinkTotalNeTxUnusableSecs, imaGroupRxOamLabelValue=imaGroupRxOamLabelValue, imaLinkImaViolations=imaLinkImaViolations, imaGroupTestPattern=imaGroupTestPattern, imaLinkFeTxUnusableSecs=imaLinkFeTxUnusableSecs, imaLinkNeRxUnusableSecs=imaLinkNeRxUnusableSecs, imaGroupMappingEntry=imaGroupMappingEntry, imaGroupIntervalTable=imaGroupIntervalTable, imaLinkCurrentNeRxNumFailures=imaLinkCurrentNeRxNumFailures, ImaGroupTxClkMode=ImaGroupTxClkMode, imaLinkCurrentTable=imaLinkCurrentTable, imaGroupDiffDelayMaxObs=imaGroupDiffDelayMaxObs, imaLinkCurrentNeTxUnusableSecs=imaLinkCurrentNeTxUnusableSecs, imaGroupCurrentTable=imaGroupCurrentTable, imaGroupTotalUnavailSecs=imaGroupTotalUnavailSecs, atmfImaMib=atmfImaMib, imaGroupEntry=imaGroupEntry, imaLinkOifAnomalies=imaLinkOifAnomalies, imaLinkTotalImaViolations=imaLinkTotalImaViolations, imaLinkFeRxNumFailures=imaLinkFeRxNumFailures, atmfImaMibConformance=atmfImaMibConformance, imaGroupRunningSecs=imaGroupRunningSecs, imaLinkTotalFeTxNumFailures=imaLinkTotalFeTxNumFailures, imaGroupSymmetry=imaGroupSymmetry)
