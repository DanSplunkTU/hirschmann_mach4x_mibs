#
# PySNMP MIB module PRVT-SUPER-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SUPER-VLAN-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 16:54:27 2021
# On host fv-az42-142 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, iso, TimeTicks, Gauge32, Counter32, ObjectIdentity, Bits, Unsigned32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "iso", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "Bits", "Unsigned32", "Counter64", "NotificationType")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
prvtSuperVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 136))
prvtSuperVlanMIB.setRevisions(('2010-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSuperVlanMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtSuperVlanMIB.setLastUpdated('201008040000Z')
if mibBuilder.loadTexts: prvtSuperVlanMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSuperVlanMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSuperVlanMIB.setDescription('Private MIB supporting Super VLANs')
prvtSuperVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1))
prvtSuperVlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 1), )
if mibBuilder.loadTexts: prvtSuperVlanIfTable.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfTable.setDescription('A list of Super-VLAN source ports.\n         A source port must always be associated with either a single target port\n         (specified by a non-zero value for prvtSuperVlanIfTargetPort) or must be\n         associated with a pair of ring ports (specified by creating an entry in\n         prvtSuperVlanIfRingPortTable).\n         Thus when creating a new entry in prvtSuperVlanIfTable, either the object\n         prvtSuperVlanIfTargetPort must be simultaneously set to a valid non-zero\n         ifIndex value or an entry in prvtSuperVlanIfRingPortTable must be\n         simultaneously created to specify the associated ring ports.')
prvtSuperVlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 1, 1), ).setIndexNames((0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfIndex"))
if mibBuilder.loadTexts: prvtSuperVlanIfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfEntry.setDescription('An entry in prvtSuperVlanIfTable.')
prvtSuperVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSuperVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfIndex.setDescription('The ifIndex of a Super-VLAN source port.')
prvtSuperVlanIfTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfTargetPort.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfTargetPort.setDescription('The IfIndex of a target port associated with this Super-VLAN source port.\n         A value of zero indicates that the source port is not associated with a\n         single target port but is associated with a pair of ring ports specified\n         in prvtSuperVlanIfRingPortTable.\n         Changing this object from a zero value to a non-zero value that is a valid\n         ifIndex (i.e. changing from a ring-port to a single target port), will\n         result in the associated entry in prvtSuperVlanIfRingPortTable being\n         automatically deleted.')
prvtSuperVlanIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRowStatus.setDescription('The RowStatus for prvtSuperVlanIfTable.')
prvtSuperVlanIfCVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 2), )
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanTable.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanTable.setDescription('A list of customer VLANs belonging to a Super-VLAN source port.')
prvtSuperVlanIfCVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 2, 1), ).setIndexNames((0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfIndex"), (0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfCVlanId"))
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanEntry.setDescription('An entry in prvtSuperVlanIfCVlanTable.')
prvtSuperVlanIfCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092)))
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanId.setDescription('The VLAN identifier of a customer VLAN belonging to a Super-VLAN source port.')
prvtSuperVlanIfCVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanMask.setDescription('The mask to apply to the VLAN identifier (prvtSuperVlanIfCVlanId).\n         A value of all zeros represents that no mask is applied ')
prvtSuperVlanIfCVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfCVlanRowStatus.setDescription('The RowStatus for prvtSuperVlanIfCVlanTable.')
prvtSuperVlanIfRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3), )
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortTable.setDescription("This table specifies a pair of ring ports to associate with a Super-VLAN\n         source port.\n         Only a single pair of ring ports may be associated per source port.\n         \n         A source port must always be associated with either a single target port\n         (specified by a non-zero value for prvtSuperVlanIfTargetPort) or must be\n         associated with a pair of ring ports (specified by creating an entry in\n         prvtSuperVlanIfRingPortTable).\n         When an entry is successfully created in prvtSuperVlanIfRingPortTable for\n         a particular source port, that source port's prvtSuperVlanIfTargetPort\n         object is automatically set to a zero value indicating that the source\n         port is associated with a pair of ring ports instead of a single target\n         port (i.e. when creating an entry in prvtSuperVlanIfRingPortTable, it is\n         not neccessary to also clear prvtSuperVlanIfTargetPort).")
prvtSuperVlanIfRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1), ).setIndexNames((0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfIndex"), (0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfRingPort1"), (0, "PRVT-SUPER-VLAN-MIB", "prvtSuperVlanIfRingPort2"))
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortEntry.setDescription('An entry in prvtSuperVlanIfRingPortTable.')
prvtSuperVlanIfRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSuperVlanIfRingPort1.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPort1.setDescription('The ifIndex of the first ring port target associated with this Super-VLAN source port.')
prvtSuperVlanIfRingPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: prvtSuperVlanIfRingPort2.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPort2.setDescription('The ifIndex of the second ring port target associated with this Super-VLAN source port.')
prvtSuperVlanIfRingPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortVlanId.setDescription("The VLAN to use in Spanning Tree decisions to determine the active Super-VLAN port.\n         The value '0' indicates no VLAN has been selected.")
prvtSuperVlanIfRingPortPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortPreferred.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortPreferred.setDescription('The ifIndex of the preferred ring port to use for this ring.')
prvtSuperVlanIfRingPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortActive.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortActive.setDescription('The ifIndex of the currently active ring port for this ring.')
prvtSuperVlanIfRingPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 136, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSuperVlanIfRingPortRowStatus.setDescription('The RowStatus for prvtSuperVlanIfRingPortTable.')
mibBuilder.exportSymbols("PRVT-SUPER-VLAN-MIB", prvtSuperVlanIfCVlanEntry=prvtSuperVlanIfCVlanEntry, prvtSuperVlanIfRingPortActive=prvtSuperVlanIfRingPortActive, prvtSuperVlanIfRingPort2=prvtSuperVlanIfRingPort2, PYSNMP_MODULE_ID=prvtSuperVlanMIB, prvtSuperVlanIfCVlanMask=prvtSuperVlanIfCVlanMask, prvtSuperVlanIfEntry=prvtSuperVlanIfEntry, prvtSuperVlanIfRingPortRowStatus=prvtSuperVlanIfRingPortRowStatus, prvtSuperVlanIfRingPort1=prvtSuperVlanIfRingPort1, prvtSuperVlanIfCVlanTable=prvtSuperVlanIfCVlanTable, prvtSuperVlanIfRingPortEntry=prvtSuperVlanIfRingPortEntry, prvtSuperVlanMIBObjects=prvtSuperVlanMIBObjects, prvtSuperVlanIfIndex=prvtSuperVlanIfIndex, prvtSuperVlanIfCVlanRowStatus=prvtSuperVlanIfCVlanRowStatus, prvtSuperVlanIfCVlanId=prvtSuperVlanIfCVlanId, prvtSuperVlanIfTargetPort=prvtSuperVlanIfTargetPort, prvtSuperVlanMIB=prvtSuperVlanMIB, prvtSuperVlanIfRingPortPreferred=prvtSuperVlanIfRingPortPreferred, prvtSuperVlanIfRingPortTable=prvtSuperVlanIfRingPortTable, prvtSuperVlanIfRowStatus=prvtSuperVlanIfRowStatus, prvtSuperVlanIfRingPortVlanId=prvtSuperVlanIfRingPortVlanId, prvtSuperVlanIfTable=prvtSuperVlanIfTable)
