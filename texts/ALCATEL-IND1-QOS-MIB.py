#
# PySNMP MIB module ALCATEL-IND1-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-QOS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:32:36 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1QoS, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1QoS")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6IfIndexOrZero, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6IfIndexOrZero", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, Bits, TimeTicks, Gauge32, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "Bits", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "NotificationType")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
alaQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1))
alaQoSMIB.setRevisions(('2014-07-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alaQoSMIB.setRevisionsDescriptions(('Added alaQoSV6NetworkGroupTable and alaQoSAppliedV6NetworkGroupTable',))
if mibBuilder.loadTexts: alaQoSMIB.setLastUpdated('201408210000Z')
if mibBuilder.loadTexts: alaQoSMIB.setOrganization('Alcatel IND')
if mibBuilder.loadTexts: alaQoSMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road \n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alaQoSMIB.setDescription('QoS and Filtering MIB')
alaQoSMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1))
if mibBuilder.loadTexts: alaQoSMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBObjects.setDescription('Branch for QoS Managed Objects.')
alaQoSRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1), )
if mibBuilder.loadTexts: alaQoSRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleTable.setDescription('Table of QoS Rule definitions')
alaQoSRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleName"))
if mibBuilder.loadTexts: alaQoSRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEntry.setDescription('Definition of QoS Rule')
alaQoSRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleName.setDescription('Name of rule')
alaQoSRuleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEnabled.setDescription('Is this rule enabled or not')
alaQoSRuleSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleSource.setDescription('What entity created the rule.')
alaQoSRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSRulePrecedence.setDescription('Precedence value for rule.\n               Rules are evaluated from higher precedence to lower.\n               If rules have equal precedence, they are evaluated in\n               the order they are received.')
alaQoSRuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleCondition.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleCondition.setDescription('Name of the condition to use')
alaQoSRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleAction.setDescription('Name of the action to use')
alaQoSRuleReflexive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleReflexive.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleReflexive.setDescription('Indicator to tell if the rule is reflexive.  Reflexive rules\n               allow specific return connections that would normally be denied.')
alaQoSRuleSave = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleSave.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleSave.setDescription('Indicator to tell whether to write out the rule during\n               snapshot commands.')
alaQoSRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleLog.setDescription('Indicator to tell whether to log matches to this rule\n               in the QoS log.')
alaQoSRuleEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleEnforced.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleEnforced.setDescription('Is this rule currenly being enforced on the switch.')
alaQoSRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleActive.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleActive.setDescription('Is this rule enforcable by the switch.')
alaQoSRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleRowStatus.setDescription('Used to create/delete rules according to the\n               RowStatus convention')
alaQoSRuleValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleValidityPeriod.setDescription('Name of the validity period to use')
alaQoSRuleValidityPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleValidityPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleValidityPeriodStatus.setDescription('Status field indicating whether there is a validity period\n               associated with this rule')
alaQoSRuleLogInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleLogInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleLogInterval.setDescription('How often to look for packets matching this rule when logging.\n               When 0 log as many as possible.')
alaQoSRuleCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSRulePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRulePacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRulePacketCount.setDescription('Counter for packets patching this rule')
alaQoSRuleByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleByteCount.setDescription('Counter for bytes matching this rule')
alaQoSRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleType.setDescription('The type of rule this is. Each bit represents the following:\n               0x1 = bridged\n               0x2 = routed\n               0x4 = multicast')
alaQoSRuleTrapEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleTrapEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleTrapEvents.setDescription("Send SNMP trap when 'qos user-port shutdown' param or\n                rule having action=port-disable is matched/invoked?")
alaQoSRuleDefaultList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleDefaultList.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleDefaultList.setDescription('This rule belongs to the default policy list. ')
alaQoSRuleGreenPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGreenPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGreenPacketCount.setDescription('Counter for the number of  packets being green compliant.')
alaQoSRuleYellowPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleYellowPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleYellowPacketCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSRuleRedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleRedPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleRedPacketCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSRuleGreenByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGreenByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGreenByteCount.setDescription('Counter for the number of  packets being green compliant.')
alaQoSRuleYellowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleYellowByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleYellowByteCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSRuleRedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleRedByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleRedByteCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSAppliedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2), )
if mibBuilder.loadTexts: alaQoSAppliedRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleTable.setDescription('Table of QoS AppliedRule definitions')
alaQoSAppliedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEntry.setDescription('Definition of QoS AppliedRule')
alaQoSAppliedRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleName.setDescription('Name of rule')
alaQoSAppliedRuleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEnabled.setDescription('Is this rule enabled or not')
alaQoSAppliedRuleSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleSource.setDescription('What entity created the rule.')
alaQoSAppliedRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRulePrecedence.setDescription('Precedence value for rule.\n               Rules are evaluated from higher precedence to lower.\n               If rules have equal precedence, they are evaluated in\n               the order they are received.')
alaQoSAppliedRuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleCondition.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleCondition.setDescription('Name of the condition to use')
alaQoSAppliedRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleAction.setDescription('Name of the action to use')
alaQoSAppliedRuleReflexive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleReflexive.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleReflexive.setDescription('Indicator to tell if the rule is reflexive.  Reflexive rules\n               allow specific return connections that would normally be denied.')
alaQoSAppliedRuleSave = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleSave.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleSave.setDescription('Indicator to tell whether to write out the rule during\n               snapshot commands.')
alaQoSAppliedRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleLog.setDescription('Indicator to tell whether to log matches to this rule\n               in the QoS log.')
alaQoSAppliedRuleEnforced = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleEnforced.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleEnforced.setDescription('Is this rule currenly being enforced on the switch.')
alaQoSAppliedRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleActive.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleActive.setDescription('Is this rule enforcable by the switch.')
alaQoSAppliedRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 12), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleRowStatus.setDescription('Used to create/delete rules according to the\n               RowStatus convention')
alaQoSAppliedRuleValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriod.setDescription('Name of the validity period to use')
alaQoSAppliedRuleValidityPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriodStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleValidityPeriodStatus.setDescription('Status field indicating whether there is a validity period\n               associated with this rule')
alaQoSAppliedRuleLogInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleLogInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleLogInterval.setDescription('How often to look for packets matching this rule when logging.\n               When 0 log as many as possible.')
alaQoSAppliedRuleCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSAppliedRulePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRulePacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRulePacketCount.setDescription('Counter for packets patching this rule')
alaQoSAppliedRuleByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleByteCount.setDescription('Counter for bytes matching this rule')
alaQoSAppliedRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleType.setDescription('The type of rule this is. Each bit represents the following:\n               0x1 = bridged\n               0x2 = routed\n               0x4 = multicast')
alaQoSAppliedRuleTrapEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleTrapEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleTrapEvents.setDescription("Send SNMP trap when 'qos user-port shutdown' param or\n                rule having action=port-disable is matched/invoked?")
alaQoSAppliedRuleDefaultList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleDefaultList.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleDefaultList.setDescription('This rule belongs to the default policy list. ')
alaQoSAppliedRuleGreenPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenPacketCount.setDescription('Counter for the number of  packets being green compliant.')
alaQoSAppliedRuleYellowPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowPacketCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSAppliedRuleRedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleRedPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleRedPacketCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSAppliedRuleGreenByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGreenByteCount.setDescription('Counter for the number of  packets being green compliant.')
alaQoSAppliedRuleYellowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleYellowByteCount.setDescription('Counter for the number of packets being yellow compliant.')
alaQoSAppliedRuleRedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleRedByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleRedByteCount.setDescription('Counter for the number of packets being red compliant.')
alaQoSConditionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3), )
if mibBuilder.loadTexts: alaQoSConditionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTable.setDescription('Table of QoS Condition definitions')
alaQoSConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSConditionName"))
if mibBuilder.loadTexts: alaQoSConditionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEntry.setDescription('Definition of QoS Condition')
alaQoSConditionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSConditionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionName.setDescription('Name of condition')
alaQoSConditionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSource.setDescription('What entity created the condition.')
alaQoSConditionSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceSlot.setDescription('Source physical slot used for traffic classification\n               When 0, the port identifies an aggregate')
alaQoSConditionSourceSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceSlotStatus.setDescription('Status field indicating whether the source physical slot and\n               port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePort.setDescription('Source physical port range start to use for\n               traffic classification')
alaQoSConditionSourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroup.setDescription('Source physical port group to use for traffic classification')
alaQoSConditionSourcePortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortGroupStatus.setDescription('Status field indicating whether the source physical port group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationSlot.setDescription('Destination physical slot used for traffic classification\n               When 0, the port identifies an aggregate')
alaQoSConditionDestinationSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationSlotStatus.setDescription('Status field indicating whether the destination physical slot\n               and port range needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPort.setDescription('Destination physical port range start to use for traffic\n               classification')
alaQoSConditionDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroup.setDescription('Destination physical port group to use for traffic\n               classification')
alaQoSConditionDestinationPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortGroupStatus.setDescription('Status field indicating whether the destination physical port\n               group needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSConditionSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 15), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacMask.setDescription('Source MAC mask to use for traffic classification')
alaQoSConditionSourceMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroup.setDescription('Source MAC group to use for traffic classification')
alaQoSConditionSourceMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceMacGroupStatus.setDescription('Status field indicating whether the source MAC group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 18), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddr.setDescription('Destination MAC address to use for traffic classification')
alaQoSConditionDestinationMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacAddrStatus.setDescription('Status field indicating whether the destination MAC address\n               & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 20), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacMask.setDescription('Destination MAC mask to use for traffic classification')
alaQoSConditionDestinationMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroup.setDescription('Destination MAC group to use for traffic classification')
alaQoSConditionDestinationMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationMacGroupStatus.setDescription('Status field indicating whether the destination MAC group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlan.setDescription('Source VLAN to use for traffic classification')
alaQoSConditionSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceVlanStatus.setDescription('Status field indicating whether the source VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationVlan.setDescription('Destination VLAN to use for traffic classification')
alaQoSConditionDestinationVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationVlanStatus.setDescription('Status field indicating whether the destination VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSCondition8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSCondition8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSCondition8021p.setDescription('802.1p value to use for traffic classification')
alaQoSCondition8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSCondition8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSCondition8021pStatus.setDescription('Status field indicating whether the 802.1p value\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 29), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSConditionSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 31), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSConditionSourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroup.setDescription('Source network group to use for traffic classification')
alaQoSConditionSourceNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceNetworkGroupStatus.setDescription('Status field indicating whether the source network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 34), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddr.setDescription('Destination IP address to use for traffic classification')
alaQoSConditionDestinationIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpAddrStatus.setDescription('Status field indicating whether the destination IP address\n               & mask needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 36), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpMask.setDescription('Destination IP mask to use for traffic classification')
alaQoSConditionDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroup.setDescription('Destination network group to use for traffic classification')
alaQoSConditionDestinationNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationNetworkGroupStatus.setDescription('Status field indicating whether the destination network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionMulticastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 39), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddr.setDescription('Multicast IP address to use for traffic classification')
alaQoSConditionMulticastIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpAddrStatus.setDescription('Status field indicating whether the multicast IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionMulticastIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 41), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastIpMask.setDescription('Multicast IP mask to use for traffic classification')
alaQoSConditionMulticastNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 42), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroup.setDescription('Multicast network group to use for traffic classification')
alaQoSConditionMulticastNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMulticastNetworkGroupStatus.setDescription('Status field indicating whether the multicast network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTos.setDescription('TOS value to use for traffic classification')
alaQoSConditionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTosStatus.setDescription('Status field indicating whether the TOS value & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTosMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTosMask.setDescription('TOS mask to use for traffic classification')
alaQoSConditionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscp.setDescription('DSCP value to use for traffic classification')
alaQoSConditionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpStatus.setDescription('Status field indicating whether the DSCP value & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(63)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpMask.setDescription('DSCP mask to use for traffic classification')
alaQoSConditionIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSConditionIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpProtocolStatus.setDescription('Status field indicating whether the IP protocol\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSConditionSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPort.setDescription('Destination IP port range start to use for traffic\n               classification.')
alaQoSConditionDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 56), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionService.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionService.setDescription('Name of service to use for traffic classification')
alaQoSConditionServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceStatus.setDescription('Status field indicating whether the service\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 58), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceGroup.setDescription('Name of service group to use for traffic classification')
alaQoSConditionServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionServiceGroupStatus.setDescription('Status field indicating whether the service group\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpType.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpType.setDescription('ICMP type to use for traffic classification')
alaQoSConditionIcmpTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpTypeStatus.setDescription('Status field indicating whether the ICMP type\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpCode.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpCode.setDescription('ICMP code to use for traffic classification')
alaQoSConditionIcmpCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIcmpCodeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIcmpCodeStatus.setDescription('Status field indicating whether the ICMP code\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionRowStatus.setDescription('Used to create/delete conditions according to the\n               RowStatus convention')
alaQoSConditionSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortEnd.setDescription("Source physical port range end to use for traffic\n               classification.  Must be greater than port range start to\n               indicate a range.  When '1', use source port as a single port.")
alaQoSConditionDestinationPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationPortEnd.setDescription("Destination physical port range end to use for traffic\n               classification.  Must be greater than port range start to\n               indicate a range.  When '1', use destination port as a single\n               port.")
alaQoSConditionSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification.\n               Must be greater than source IP port range start to indicate a\n               range.  When '0', use source IP port as a single IP port.")
alaQoSConditionDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification.\n               Must be greater than destination IP port range start to indicate\n               a range.  When '0', use destination IP port as a single IP port.")
alaQoSConditionSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSConditionSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification.\n               Must be greater than source TCP port range start to indicate a\n               range.  When '0', use source TCP port as a single TCP port.")
alaQoSConditionDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic\n               classification.')
alaQoSConditionDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic\n               classification.  Must be greater than destination TCP port range\n               start to indicate a range.  When '0', use destination TCP port\n               as a single TCP port.")
alaQoSConditionSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSConditionSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification.\n               Must be greater than source UDP port range start to indicate\n               a range.  When '0', use source UDP port as a single UDP port.")
alaQoSConditionDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic\n               classification.')
alaQoSConditionDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic\n               classification.  Must be greater than destination UDP port range\n               start to indicate a range.  When '0', use destination UDP port\n               as a single TCP port.")
alaQoSConditionEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEthertype.setDescription('Ethertype value to use for traffic classification')
alaQoSConditionEthertypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionEthertypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionEthertypeStatus.setDescription('Status field indicating whether the ethertype value\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("any", 2))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlags.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlags.setDescription('Use any/all specifieid TCP flags for traffic classification')
alaQoSConditionTcpFlagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsStatus.setDescription('Status field indicating whether the TCP flag bits\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionTcpFlagsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 85), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsVal.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsVal.setDescription('TCP flags values used for traffic classification')
alaQoSConditionTcpFlagsValStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsValStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsValStatus.setDescription('Not used')
alaQoSConditionTcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 87), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMask.setDescription('Mask of TCP flags bits used for traffic classification')
alaQoSConditionTcpFlagsMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMaskStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpFlagsMaskStatus.setDescription('Not used')
alaQoSConditionTcpEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionTcpEstablished.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionTcpEstablished.setDescription('Look for established TCP sessions in classification')
alaQoSConditionSourceIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 90), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Addr.setDescription('Source IPv6 address to use for traffic classification')
alaQoSConditionSourceIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6AddrStatus.setDescription('Status field indicating whether the source IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionSourceIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 92), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceIpv6Mask.setDescription('Source IPv6 mask to use for traffic classification')
alaQoSConditionDestinationIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 93), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Addr.setDescription('Destination IPv6 address to use for traffic classification')
alaQoSConditionDestinationIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6AddrStatus.setDescription('Status field indicating whether the destination IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionDestinationIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 95), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationIpv6Mask.setDescription('Destination IPv6 mask to use for traffic classification')
alaQoSConditionIpv6Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6Traffic.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6Traffic.setDescription('classify IPV6 traffic ')
alaQoSConditionIpv6NH = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6NH.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6NH.setDescription('NH value to use for traffic classification')
alaQoSConditionIpv6NHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6NHStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6NHStatus.setDescription('Status field indicating whether the NH value\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionIpv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabel.setDescription('FL value to use for traffic classification')
alaQoSConditionIpv6FlowLabelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabelStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionIpv6FlowLabelStatus.setDescription('Status field indicating whether the flow label value\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionMcastIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 101), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Addr.setDescription('Multicast IPv6 address to use for traffic classification')
alaQoSConditionMcastIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6AddrStatus.setDescription('Status field indicating whether the multicast IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionMcastIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 103), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionMcastIpv6Mask.setDescription('Multicast IPv6 mask to use for traffic classification')
alaQoSConditionDscpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDscpEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDscpEnd.setDescription('DSCP value to use for traffic classification')
alaQoSConditionInnerSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlan.setDescription('Customer VLAN to use for traffic classification')
alaQoSConditionInnerSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInnerSourceVlanStatus.setDescription('Status field indicating whether the inner VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionInner8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInner8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInner8021p.setDescription('Customer 802.1p to use for traffic classification')
alaQoSConditionInner8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionInner8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionInner8021pStatus.setDescription('Status field indicating whether the inner 802.1p\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 109), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVrfName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVrfName.setDescription('Name of Vrf to match traffic in')
alaQoSConditionVrfNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVrfNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVrfNameStatus.setDescription('Status field indicating whether the traffic from a specific vrf needs to be matched(enabled) or not(disabled).')
alaQoSConditionFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionFragments.setDescription('TCP packet fragments')
alaQoSConditionSourceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourceChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourceChassis.setDescription('Source physical chassis used for traffic classification.')
alaQoSConditionDestinationChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDestinationChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDestinationChassis.setDescription('Destination physical chassis used for traffic classification.')
alaQoSConditionAppFpGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 114), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionAppFpGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionAppFpGroup.setDescription('Application Fingerprinting group.')
alaQoSConditionAppFpGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionAppFpGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionAppFpGroupStatus.setDescription('Status field indicating whether the traffic from a specific Application Fingerprinting Group  needs to be matched(enabled) or not(disabled).')
alaQoSConditionSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audio", 1), ("video", 2), ("other", 3))).clone('audio')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSIP.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSIP.setDescription('SIP type to use for traffic classification')
alaQoSConditionSIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSIPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSIPStatus.setDescription('SIP Status field indicates whether SIP is enabled or disabled\n                 for traffic classification')
alaQoSConditionDPIAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 118), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDPIAppName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDPIAppName.setDescription('DPI Application Name associated with a policy condition.')
alaQoSConditionDPIGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 119), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDPIGrpName.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDPIGrpName.setDescription('DPI Group Name associated with a policy condition.')
alaQoSConditionDPIAppNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDPIAppNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDPIAppNameStatus.setDescription('DPI Status field indicates whether DPI Application Name is enabled or disabled\n                 for traffic classification')
alaQoSConditionDPIAppGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionDPIAppGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionDPIAppGroupStatus.setDescription('DPI Status field indicates whether DPI Application Group is enabled or disabled\n                 for traffic classification')
alaQoSConditionVxlanVni = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVxlanVni.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVxlanVni.setDescription('')
alaQoSConditionVxlanVniStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVxlanVniStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVxlanVniStatus.setDescription('Status field indicating whether the VNI needs\n  to be matched(enabled) or not(disabled).')
alaQoSConditionVxlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 124), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVxlanPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVxlanPort.setDescription('')
alaQoSConditionVxlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVxlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVxlanPortStatus.setDescription('Status field indicating whether the VXLAN Port needs\n  to be matched(enabled) or not(disabled).')
alaQoSConditionVmSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 126), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSConditionVmSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionVmSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 128), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceMacMask.setDescription('Source MAC mask to use for traffic classification')
alaQoSConditionVmSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 129), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSConditionVmSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionVmSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 131), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSConditionVmSourceIpv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 132), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpAddr.setDescription('Destination IP address to use for traffic classification')
alaQoSConditionVmSourceIpv6IpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSConditionVmSourceIpv6IpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 134), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmSourceIpv6IpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSConditionVmIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 135), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSConditionVmIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionVmIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionVmIpProtocolStatus.setDescription('Status field indicating whether the IP protocol\n               needs to be matched(enabled) or not(disabled).')
alaQosConditionVmL4SourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 137), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosConditionVmL4SourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQosConditionVmL4SourcePort.setDescription('Source IP port to use for traffic classification.')
alaQosConditionVmL4SourcePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosConditionVmL4SourcePortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosConditionVmL4SourcePortStatus.setDescription('Status field indicating whether the source IP port \n               needs to be matched(enabled) or not(disabled).')
alaQosConditionVmL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 139), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosConditionVmL4DestPort.setStatus('current')
if mibBuilder.loadTexts: alaQosConditionVmL4DestPort.setDescription('Destination IP port to use for traffic\n               classification.')
alaQosConditionVmL4DestPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosConditionVmL4DestPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosConditionVmL4DestPortStatus.setDescription('Status field indicating whether the destination port range\n               needs to be matched(enabled) or not(disabled).')
alaQosConditionVxlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosConditionVxlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosConditionVxlanStatus.setDescription('Status field indicating vxlan configuration.')
alaQoSConditionSourcePortSplitGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 142), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortSplitGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortSplitGroup.setDescription('Source physical port split-group to be used for traffic classification. Meter action should be applied on per-port basis.')
alaQoSConditionSourcePortSplitGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 3, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConditionSourcePortSplitGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSConditionSourcePortSplitGroupStatus.setDescription('Status field indicating whether the source physical port splitGroup\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4), )
if mibBuilder.loadTexts: alaQoSAppliedConditionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTable.setDescription('Table of QoS AppliedCondition definitions')
alaQoSAppliedConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionName"))
if mibBuilder.loadTexts: alaQoSAppliedConditionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEntry.setDescription('Definition of QoS AppliedCondition')
alaQoSAppliedConditionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedConditionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionName.setDescription('Name of condition')
alaQoSAppliedConditionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSource.setDescription('What entity created the condition.')
alaQoSAppliedConditionSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlot.setDescription('Source physical slot used for traffic classification\n               When 0, the port identifies an aggregate')
alaQoSAppliedConditionSourceSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceSlotStatus.setDescription('Status field indicating whether the source physical slot and\n               port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePort.setDescription('Source physical port range start to use for\n               traffic classification')
alaQoSAppliedConditionSourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroup.setDescription('Source physical port group to use for traffic classification')
alaQoSAppliedConditionSourcePortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortGroupStatus.setDescription('Status field indicating whether the source physical port group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlot.setDescription('Destination physical slot used for traffic classification\n               When 0, the port identifies an aggregate')
alaQoSAppliedConditionDestinationSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationSlotStatus.setDescription('Status field indicating whether the destination physical slot\n               and port range needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPort.setDescription('Destination physical port range start to use for traffic\n               classification')
alaQoSAppliedConditionDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroup.setDescription('Destination physical port group to use for traffic\n               classification')
alaQoSAppliedConditionDestinationPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortGroupStatus.setDescription('Status field indicating whether the destination physical port\n               group needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSAppliedConditionSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacMask.setDescription('Source MAC mask to use for traffic classification')
alaQoSAppliedConditionSourceMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroup.setDescription('Source MAC group to use for traffic classification')
alaQoSAppliedConditionSourceMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceMacGroupStatus.setDescription('Status field indicating whether the source MAC group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddr.setDescription('Destination MAC address to use for traffic classification')
alaQoSAppliedConditionDestinationMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacAddrStatus.setDescription('Status field indicating whether the destination MAC address\n               & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacMask.setDescription('Destination MAC mask to use for traffic classification')
alaQoSAppliedConditionDestinationMacGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroup.setDescription('Destination MAC group to use for traffic classification')
alaQoSAppliedConditionDestinationMacGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationMacGroupStatus.setDescription('Status field indicating whether the destination MAC group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlan.setDescription('Source VLAN to use for traffic classification')
alaQoSAppliedConditionSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceVlanStatus.setDescription('Status field indicating whether the source VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlan.setDescription('Destination VLAN to use for traffic classification')
alaQoSAppliedConditionDestinationVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationVlanStatus.setDescription('Status field indicating whether the destination VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedCondition8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedCondition8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedCondition8021p.setDescription('802.1p value to use for traffic classification')
alaQoSAppliedCondition8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedCondition8021pStatus.setDescription('Status field indicating whether the 802.1p value\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSAppliedConditionSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSAppliedConditionSourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroup.setDescription('Source network group to use for traffic classification')
alaQoSAppliedConditionSourceNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceNetworkGroupStatus.setDescription('Status field indicating whether the source network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddr.setDescription('Destination IP address to use for traffic classification')
alaQoSAppliedConditionDestinationIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpAddrStatus.setDescription('Status field indicating whether the destination IP address\n               & mask needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpMask.setDescription('Destination IP mask to use for traffic classification')
alaQoSAppliedConditionDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroup.setDescription('Destination network group to use for traffic classification')
alaQoSAppliedConditionDestinationNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationNetworkGroupStatus.setDescription('Status field indicating whether the destination network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMulticastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddr.setDescription('Multicast IP address to use for traffic classification')
alaQoSAppliedConditionMulticastIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpAddrStatus.setDescription('Status field indicating whether the multicast IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMulticastIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 41), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastIpMask.setDescription('Multicast IP mask to use for traffic classification')
alaQoSAppliedConditionMulticastNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 42), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroup.setDescription('Multicast network group to use for traffic classification')
alaQoSAppliedConditionMulticastNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMulticastNetworkGroupStatus.setDescription('Status field indicating whether the multicast network group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTos.setDescription('TOS value to use for traffic classification')
alaQoSAppliedConditionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTosStatus.setDescription('Status field indicating whether the TOS value & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTosMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTosMask.setDescription('TOS mask to use for traffic classification')
alaQoSAppliedConditionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscp.setDescription('DSCP value to use for traffic classification')
alaQoSAppliedConditionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpStatus.setDescription('Status field indicating whether the DSCP value & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpMask.setDescription('DSCP mask to use for traffic classification')
alaQoSAppliedConditionIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSAppliedConditionIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpProtocolStatus.setDescription('Status field indicating whether the IP protocol\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPort.setDescription('Destination IP port range start to use for traffic\n               classification.')
alaQoSAppliedConditionDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 56), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionService.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionService.setDescription('Name of service to use for traffic classification')
alaQoSAppliedConditionServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceStatus.setDescription('Status field indicating whether the service\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 58), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroup.setDescription('Name of service group to use for traffic classification')
alaQoSAppliedConditionServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionServiceGroupStatus.setDescription('Status field indicating whether the service group\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpType.setDescription('ICMP type to use for traffic classification')
alaQoSAppliedConditionIcmpTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpTypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpTypeStatus.setDescription('Status field indicating whether the ICMP type\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCode.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCode.setDescription('ICMP code to use for traffic classification')
alaQoSAppliedConditionIcmpCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCodeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIcmpCodeStatus.setDescription('Status field indicating whether the ICMP code\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 64), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionRowStatus.setDescription('Used to create/delete conditions according to the\n               RowStatus convention')
alaQoSAppliedConditionSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortEnd.setDescription("Source physical port range end to use for traffic\n               classification.  Must be greater than port range start to\n               indicate a range.  When '1', use source port as a single port.")
alaQoSAppliedConditionDestinationPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationPortEnd.setDescription("Destination physical port range end to use for traffic\n               classification.  Must be greater than port range start to\n               indicate a range.  When '1', use destination port as a single\n               port.")
alaQoSAppliedConditionSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification.\n               Must be greater than source IP port range start to indicate a\n               range.  When '0', use source IP port as a single IP port.")
alaQoSAppliedConditionDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification.\n               Must be greater than destination IP port range start to indicate\n               a range.  When '0', use destination IP port as a single IP port.")
alaQoSAppliedConditionSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification.\n               Must be greater than source TCP port range start to indicate a\n               range.  When '0', use source TCP port as a single TCP port.")
alaQoSAppliedConditionDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic\n               classification.')
alaQoSAppliedConditionDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic\n               classification.  Must be greater than destination TCP port range\n               start to indicate a range.  When '0', use destination TCP port\n               as a single TCP port.")
alaQoSAppliedConditionSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSAppliedConditionSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification.\n               Must be greater than source UDP port range start to indicate\n               a range.  When '0', use source UDP port as a single UDP port.")
alaQoSAppliedConditionDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic\n               classification.')
alaQoSAppliedConditionDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic\n               classification.  Must be greater than destination UDP port range\n               start to indicate a range.  When '0', use destination UDP port\n               as a single TCP port.")
alaQoSAppliedConditionEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertype.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertype.setDescription('Ethertype value to use for traffic classification')
alaQoSAppliedConditionEthertypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertypeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionEthertypeStatus.setDescription('Status field indicating whether the ethertype value\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("any", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlags.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlags.setDescription('Use any/all specifieid TCP flags for traffic classification')
alaQoSAppliedConditionTcpFlagsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsStatus.setDescription('Status field indicating whether the TCP flag bits\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionTcpFlagsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsVal.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsVal.setDescription('TCP flags values used for traffic classification')
alaQoSAppliedConditionTcpFlagsValStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsValStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsValStatus.setDescription('Not used')
alaQoSAppliedConditionTcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMask.setDescription('Mask of TCP flags bits used for traffic classification')
alaQoSAppliedConditionTcpFlagsMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMaskStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpFlagsMaskStatus.setDescription('Not used')
alaQoSAppliedConditionTcpEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpEstablished.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionTcpEstablished.setDescription('Look for established TCP sessions in classification')
alaQoSAppliedConditionSourceIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 90), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Addr.setDescription('Source IPv6 address to use for traffic classification')
alaQoSAppliedConditionSourceIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6AddrStatus.setDescription('Status field indicating whether the source IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSourceIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 92), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceIpv6Mask.setDescription('Source IPv6 mask to use for traffic classification')
alaQoSAppliedConditionDestinationIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 93), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Addr.setDescription('Destination IPv6 address to use for traffic classification')
alaQoSAppliedConditionDestinationIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6AddrStatus.setDescription('Status field indicating whether the destination IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionDestinationIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 95), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationIpv6Mask.setDescription('Destination IPv6 mask to use for traffic classification')
alaQoSAppliedConditionIpv6Traffic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6Traffic.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6Traffic.setDescription('classify IPV6 traffic ')
alaQoSAppliedConditionIpv6NH = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NH.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NH.setDescription('NH value to use for traffic classification')
alaQoSAppliedConditionIpv6NHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NHStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6NHStatus.setDescription('Status field indicating whether the NH value\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionIpv6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabel.setDescription('FL value to use for traffic classification')
alaQoSAppliedConditionIpv6FlowLabelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabelStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionIpv6FlowLabelStatus.setDescription('Status field indicating whether the flow label value\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMcastIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 101), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Addr.setDescription('Multicast IPv6 address to use for traffic classification')
alaQoSAppliedConditionMcastIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6AddrStatus.setDescription('Status field indicating whether the multicast IPv6 address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionMcastIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 103), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionMcastIpv6Mask.setDescription('Multicast IPv6 mask to use for traffic classification')
alaQoSAppliedConditionDscpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDscpEnd.setDescription('DSCP value to use for traffic classification')
alaQoSAppliedConditionInnerSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlan.setDescription('Customer VLAN to use for traffic classification')
alaQoSAppliedConditionInnerSourceVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInnerSourceVlanStatus.setDescription('Status field indicating whether the inner VLAN\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionInner8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021p.setDescription('Customer 802.1p to use for traffic classification')
alaQoSAppliedConditionInner8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionInner8021pStatus.setDescription('Status field indicating whether the inner 802.1p\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 109), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfName.setDescription('Name of Vrf to match traffic in')
alaQoSAppliedConditionVrfNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVrfNameStatus.setDescription('Status field indicating whether the traffic from a specific vrf               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionFragments.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionFragments.setDescription('TCP packet fragments')
alaQoSAppliedConditionSourceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourceChassis.setDescription('Source physical chassis used for traffic classification.')
alaQoSAppliedConditionDestinationChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDestinationChassis.setDescription('Destination physical chassis used for traffic classification.')
alaQoSAppliedConditionAppFpGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 114), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionAppFpGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionAppFpGroup.setDescription('Application Fingerprinting group.')
alaQoSAppliedConditionAppFpGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionAppFpGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionAppFpGroupStatus.setDescription('Status field indicating whether the traffic from a specific Application Fingerprinting Group  needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audio", 1), ("video", 2), ("other", 3))).clone('audio')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionSIP.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSIP.setDescription('SIP type to use for traffic classification')
alaQoSAppliedConditionSIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionSIPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSIPStatus.setDescription('SIP Status field indicates whether SIP is enabled or disabled\n                 for traffic classification')
alaQoSAppliedConditionDPIAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 118), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppName.setDescription('DPI Application Member.')
alaQoSAppliedConditionDPIAppGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 119), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppGrp.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppGrp.setDescription('DPI Application Member Type.')
alaQoSAppliedConditionDPIAppNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppNameStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppNameStatus.setDescription('DPI Status field indicates whether DPI Application name is enabled or disabled\n                 for traffic classification')
alaQoSAppliedConditionDPIAppGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionDPIAppGroupStatus.setDescription('DPI Status field indicates whether DPI Application group is enabled or disabled\n                 for traffic classification')
alaQoSAppliedConditionVxlanVni = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 122), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanVni.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanVni.setDescription('Vni value associated with this vxlan')
alaQoSAppliedConditionVxlanVniStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanVniStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanVniStatus.setDescription('Status field indicating whether the VNI needs\n  to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVxlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 124), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanPort.setDescription('')
alaQoSAppliedConditionVxlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVxlanPortStatus.setDescription('Status field indicating whether the VNI needs\n  to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVmSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 126), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacAddr.setDescription('Source MAC address to use for traffic classification')
alaQoSAppliedConditionVmSourceMacAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacAddrStatus.setDescription('Status field indicating whether the source MAC address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVmSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 128), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceMacMask.setDescription('Source MAC address to use for traffic classification')
alaQoSAppliedConditionVmSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 129), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpAddr.setDescription('Source IP address to use for traffic classification')
alaQoSAppliedConditionVmSourceIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVmSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 131), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpMask.setDescription('Source IP mask to use for traffic classification')
alaQoSAppliedConditionVmSourceIpv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 132), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpAddr.setDescription('Source IPV6 address to use for traffic classification')
alaQoSAppliedConditionVmSourceIpv6IpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpAddrStatus.setDescription('Status field indicating whether the source IP address & mask\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedConditionVmSourceIpv6IpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 134), Ipv6Address().clone(hexValue="ffffffffffffffffffffffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmSourceIpv6IpMask.setDescription('Source IPV6 mask to use for traffic classification')
alaQoSAppliedConditionVmIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 135), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmIpProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmIpProtocol.setDescription('IP protocol to use for traffic classification.')
alaQoSAppliedConditionVmIpProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedConditionVmIpProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionVmIpProtocolStatus.setDescription('Status field indicating whether the IP protocol\n               needs to be matched(enabled) or not(disabled).')
alaQosAppliedConditionVmL4SourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 137), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4SourcePort.setStatus('current')
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4SourcePort.setDescription('Source IP port to use for traffic classification.')
alaQosAppliedConditionVmL4SourcePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4SourcePortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4SourcePortStatus.setDescription('Status field indicating whether the source port \n               needs to be matched(enabled) or not(disabled).')
alaQosAppliedConditionVmL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 139), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4DestPort.setStatus('current')
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4DestPort.setDescription('Destination port to use for traffic\n               classification.')
alaQosAppliedConditionVmL4DestPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4DestPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosAppliedConditionVmL4DestPortStatus.setDescription('Status field indicating whether the destination port\n               needs to be matched(enabled) or not(disabled).')
alaQosAppliedConditionVxlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQosAppliedConditionVxlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaQosAppliedConditionVxlanStatus.setDescription('Status field indicating vxlan configuration.')
alaQoSAppliedConditionSourcePortSplitGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 142), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortSplitGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortSplitGroup.setDescription('Source physical port split-group to be used for traffic classification. Meter action should be applied on per-port basis.')
alaQoSAppliedConditionSourcePortSplitGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 4, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortSplitGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedConditionSourcePortSplitGroupStatus.setDescription('Status field indicating whether the source physical port splitGroup\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5), )
if mibBuilder.loadTexts: alaQoSServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceTable.setDescription('Table of QoS Service definitions')
alaQoSServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceName"))
if mibBuilder.loadTexts: alaQoSServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceEntry.setDescription('Definition of QoS Service')
alaQoSServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceName.setDescription('Name of the service')
alaQoSServiceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSource.setDescription('What entity created the service.')
alaQoSServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceProtocol.setDescription('protocol field for Service')
alaQoSServiceSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSServiceSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPort.setDescription('Destination IP port range start to use for traffic\n               classification.')
alaQoSServiceDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceRowStatus.setDescription('Used to create/delete services according to the\n               RowStatus convention')
alaQoSServiceSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification.\n               Must be greater than source IP port range start to indicate\n               a range.  When '0', use source IP port as a single IP port.")
alaQoSServiceDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification.\n               Must be greater than destination IP port range start to indicate\n               a range.  When '0', use destination IP port as a single IP port.")
alaQoSServiceSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSServiceSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification.\n               Must be greater than source TCP port range start to indicate a\n               range.  When '0', use source TCP port as a single TCP port.")
alaQoSServiceDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic\n               classification.')
alaQoSServiceDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic\n               classification.  Must be greater than destination TCP port range\n               start to indicate a range.  When '0', use destination TCP port as\n               a single TCP port.")
alaQoSServiceSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSServiceSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification.\n               Must be greater than source UDP port range start to indicate a\n               range.  When '0', use source UDP port as a single UDP port.")
alaQoSServiceDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic\n               classification.')
alaQoSServiceDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSServiceDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic\n               classification.  Must be greater than destination UDP port range\n               start to indicate a range.  When '0', use destination UDP port as\n               a single UDP port.")
alaQoSAppliedServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6), )
if mibBuilder.loadTexts: alaQoSAppliedServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceTable.setDescription('Table of QoS AppliedService definitions')
alaQoSAppliedServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceEntry.setDescription('Definition of QoS AppliedService')
alaQoSAppliedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceName.setDescription('Name of the service')
alaQoSAppliedServiceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSource.setDescription('What entity created the service.')
alaQoSAppliedServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceProtocol.setDescription('protocol field for AppliedService')
alaQoSAppliedServiceSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPort.setDescription('Source IP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortStatus.setDescription('Status field indicating whether the source IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPort.setDescription('Destination IP port range start to use for traffic\n               classification.')
alaQoSAppliedServiceDestinationIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortStatus.setDescription('Status field indicating whether the destination IP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceRowStatus.setDescription('Used to create/delete services according to the\n               RowStatus convention')
alaQoSAppliedServiceSourceIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceIpPortEnd.setDescription("Source IP port range end to use for traffic classification.\n               Must be greater than source IP port range start to indicate\n               a range.  When '0', use source IP port as a single IP port.")
alaQoSAppliedServiceDestinationIpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationIpPortEnd.setDescription("Destination IP port range end to use for traffic classification.\n               Must be greater than destination IP port range start to indicate\n               a range.  When '0', use destination IP port as a single IP port.")
alaQoSAppliedServiceSourceTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPort.setDescription('Source TCP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortStatus.setDescription('Status field indicating whether the source TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceSourceTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceTcpPortEnd.setDescription("Source TCP port range end to use for traffic classification.\n               Must be greater than source TCP port range start to indicate a\n               range.  When '0', use source TCP port as a single TCP port.")
alaQoSAppliedServiceDestinationTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPort.setDescription('Destination TCP port range start to use for traffic\n               classification.')
alaQoSAppliedServiceDestinationTcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortStatus.setDescription('Status field indicating whether the destination TCP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationTcpPortEnd.setDescription("Destination TCP port range end to use for traffic\n               classification.  Must be greater than destination TCP port range\n               start to indicate a range.  When '0', use destination TCP port as\n               a single TCP port.")
alaQoSAppliedServiceSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPort.setDescription('Source UDP port range start to use for traffic classification.')
alaQoSAppliedServiceSourceUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortStatus.setDescription('Status field indicating whether the source UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceSourceUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceSourceUdpPortEnd.setDescription("Source UDP port range end to use for traffic classification.\n               Must be greater than source UDP port range start to indicate a\n               range.  When '0', use source UDP port as a single UDP port.")
alaQoSAppliedServiceDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPort.setDescription('Destination UDP port range start to use for traffic\n               classification.')
alaQoSAppliedServiceDestinationUdpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortStatus.setDescription('Status field indicating whether the destination UDP port range\n               needs to be matched(enabled) or not(disabled).')
alaQoSAppliedServiceDestinationUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceDestinationUdpPortEnd.setDescription("Destination UDP port range end to use for traffic\n               classification.  Must be greater than destination UDP port range\n               start to indicate a range.  When '0', use destination UDP port as\n               a single UDP port.")
alaQoSServiceGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7), )
if mibBuilder.loadTexts: alaQoSServiceGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsTable.setDescription('Table of QoS ServiceGroups definitions')
alaQoSServiceGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsName"))
if mibBuilder.loadTexts: alaQoSServiceGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsEntry.setDescription('Definition of QoS ServiceGroups')
alaQoSServiceGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsName.setDescription('Name of service group')
alaQoSServiceGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsSource.setDescription('What entity created the service group.')
alaQoSServiceGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupsStatus.setDescription('Used to create/delete service groups according to the\n               RowStatus convention')
alaQoSAppliedServiceGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8), )
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsTable.setDescription('Table of QoS AppliedServiceGroups definitions')
alaQoSAppliedServiceGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsEntry.setDescription('Definition of QoS AppliedServiceGroups')
alaQoSAppliedServiceGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsName.setDescription('Name of service group')
alaQoSAppliedServiceGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsSource.setDescription('What entity created the service group.')
alaQoSAppliedServiceGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupsStatus.setDescription('Used to create/delete service groups according to the\n               RowStatus convention')
alaQoSServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9), )
if mibBuilder.loadTexts: alaQoSServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupTable.setDescription('Table of QoS ServiceGroup definitions')
alaQoSServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupServiceName"))
if mibBuilder.loadTexts: alaQoSServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupEntry.setDescription('Definition of QoS ServiceGroup')
alaQoSServiceGroupServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSServiceGroupServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupServiceName.setDescription('Name of service in service group entry')
alaQoSServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSServiceGroupStatus.setDescription('Used to create/delete service group entries according to the\n               RowStatus convention')
alaQoSAppliedServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10), )
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupTable.setDescription('Table of QoS AppliedServiceGroup definitions')
alaQoSAppliedServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupServiceName"))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupEntry.setDescription('Definition of QoS AppliedServiceGroup')
alaQoSAppliedServiceGroupServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupServiceName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupServiceName.setDescription('Name of service in service group entry')
alaQoSAppliedServiceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedServiceGroupStatus.setDescription('Used to create/delete service group entries according to the\n               RowStatus convention')
alaQoSNetworkGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11), )
if mibBuilder.loadTexts: alaQoSNetworkGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsTable.setDescription('Table of QoS NetworkGroups definitions')
alaQoSNetworkGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsName"))
if mibBuilder.loadTexts: alaQoSNetworkGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsEntry.setDescription('Definition of QoS NetworkGroups')
alaQoSNetworkGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSNetworkGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsName.setDescription('Name of network group')
alaQoSNetworkGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsSource.setDescription('What entity created the network group.')
alaQoSNetworkGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupsStatus.setDescription('Used to create/delete network groups according to the\n               RowStatus convention')
alaQoSAppliedNetworkGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12), )
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsTable.setDescription('Table of QoS AppliedNetworkGroups definitions')
alaQoSAppliedNetworkGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsEntry.setDescription('Definition of QoS AppliedNetworkGroups')
alaQoSAppliedNetworkGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsName.setDescription('Name of network group')
alaQoSAppliedNetworkGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsSource.setDescription('What entity created the network group.')
alaQoSAppliedNetworkGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 12, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupsStatus.setDescription('Used to create/delete network groups according to the\n               RowStatus convention')
alaQoSNetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13), )
if mibBuilder.loadTexts: alaQoSNetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupTable.setDescription('Table of QoS NetworkGroup definitions')
alaQoSNetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSNetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupEntry.setDescription('Definition of QoS NetworkGroup')
alaQoSNetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaQoSNetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSNetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaQoSNetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSNetworkGroupStatus.setDescription('Used to create/delete network group entries according to the\n               RowStatus convention')
alaQoSAppliedNetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14), )
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupTable.setDescription('Table of QoS AppliedNetworkGroup definitions')
alaQoSAppliedNetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupEntry.setDescription('Definition of QoS AppliedNetworkGroup')
alaQoSAppliedNetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSAppliedNetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSAppliedNetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 14, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedNetworkGroupStatus.setDescription('Used to create/delete network group entries according to the\n               RowStatus convention')
alaQoSMACGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15), )
if mibBuilder.loadTexts: alaQoSMACGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsTable.setDescription('Table of QoS MACGroups definitions')
alaQoSMACGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsName"))
if mibBuilder.loadTexts: alaQoSMACGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsEntry.setDescription('Definition of QoS MACGroups')
alaQoSMACGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSMACGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsName.setDescription('Name of MAC group')
alaQoSMACGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsSource.setDescription('What entity created the MAC group.')
alaQoSMACGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupsStatus.setDescription('Used to create/delete MAC groups according to the\n               RowStatus convention')
alaQoSAppliedMACGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16), )
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsTable.setDescription('Table of QoS AppliedMACGroups definitions')
alaQoSAppliedMACGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsEntry.setDescription('Definition of QoS AppliedMACGroups')
alaQoSAppliedMACGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsName.setDescription('Name of MAC group')
alaQoSAppliedMACGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsSource.setDescription('What entity created the MAC group.')
alaQoSAppliedMACGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 16, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupsStatus.setDescription('Used to create/delete MAC groups according to the\n               RowStatus convention')
alaQoSMACGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17), )
if mibBuilder.loadTexts: alaQoSMACGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupTable.setDescription('Table of QoS MACGroup definitions')
alaQoSMACGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupMacAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupMacMask"))
if mibBuilder.loadTexts: alaQoSMACGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupEntry.setDescription('Definition of QoS MACGroup')
alaQoSMACGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaQoSMACGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupMacAddr.setDescription('MAC address for MAC group entry')
alaQoSMACGroupMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaQoSMACGroupMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupMacMask.setDescription('MAC mask for MAC group entry')
alaQoSMACGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMACGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMACGroupStatus.setDescription('Used to create/delete MAC group entries according to the\n               RowStatus convention')
alaQoSAppliedMACGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18), )
if mibBuilder.loadTexts: alaQoSAppliedMACGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupTable.setDescription('Table of QoS AppliedMACGroup definitions')
alaQoSAppliedMACGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupMacAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupMacMask"))
if mibBuilder.loadTexts: alaQoSAppliedMACGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupEntry.setDescription('Definition of QoS AppliedMACGroup')
alaQoSAppliedMACGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacAddr.setDescription('MAC address for MAC group entry')
alaQoSAppliedMACGroupMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupMacMask.setDescription('MAC mask for MAC group entry')
alaQoSAppliedMACGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 18, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMACGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMACGroupStatus.setDescription('Used to create/delete MAC group entries according to the\n               RowStatus convention')
alaQoSPortGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19), )
if mibBuilder.loadTexts: alaQoSPortGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsTable.setDescription('Table of QoS PortGroups definitions')
alaQoSPortGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsName"))
if mibBuilder.loadTexts: alaQoSPortGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsEntry.setDescription('Definition of QoS PortGroups')
alaQoSPortGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSPortGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsName.setDescription('Name of port group')
alaQoSPortGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsSource.setDescription('What entity created the port group.')
alaQoSPortGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupsStatus.setDescription('Used to create/delete port groups according to the\n               RowStatus convention')
alaQoSAppliedPortGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20), )
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsTable.setDescription('Table of QoS AppliedPortGroups definitions')
alaQoSAppliedPortGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsEntry.setDescription('Definition of QoS AppliedPortGroups')
alaQoSAppliedPortGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsName.setDescription('Name of port group')
alaQoSAppliedPortGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsSource.setDescription('What entity created the port group.')
alaQoSAppliedPortGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 20, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupsStatus.setDescription('Used to create/delete port groups according to the\n               RowStatus convention')
alaQoSPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21), )
if mibBuilder.loadTexts: alaQoSPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupTable.setDescription('Table of QoS PortGroup definitions')
alaQoSPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupPortEnd"))
if mibBuilder.loadTexts: alaQoSPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupEntry.setDescription('Definition of QoS PortGroup')
alaQoSPortGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6016)))
if mibBuilder.loadTexts: alaQoSPortGroupSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupSlot.setDescription('Physical slot for port group entry.\n               If this is a virtual chassis environemnt,\n               This will contain the ChassisId*1000 + slotNum.')
alaQoSPortGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaQoSPortGroupPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupPort.setDescription('Physical port range start for port group entry')
alaQoSPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupStatus.setDescription('Used to create/delete port group entries according to the\n               RowStatus convention')
alaQoSPortGroupPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaQoSPortGroupPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortGroupPortEnd.setDescription("Physical port range end for port group entry\n               Must be greater than port range start to indicate a range.\n               When '1', use port as a single port.")
alaQoSAppliedPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22), )
if mibBuilder.loadTexts: alaQoSAppliedPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupTable.setDescription('Table of QoS AppliedPortGroup definitions')
alaQoSAppliedPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupPort"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupPortEnd"))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupEntry.setDescription('Definition of QoS AppliedPortGroup')
alaQoSAppliedPortGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6016)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupSlot.setDescription('Physical slot for port group entry\n               If this is a virtual chassis environemnt,\n               This will contain the ChassisId*1000 + slotNum.')
alaQoSAppliedPortGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPort.setDescription('Physical port range start for port group entry')
alaQoSAppliedPortGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedPortGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupStatus.setDescription('Used to create/delete port group entries according to the\n               RowStatus convention')
alaQoSAppliedPortGroupPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedPortGroupPortEnd.setDescription("Physical port range end for port group entry\n               Must be greater than port range start to indicate a range.\n               When '1', use port as a single port.")
alaQoSMapGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23), )
if mibBuilder.loadTexts: alaQoSMapGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsTable.setDescription('Table of QoS MapGroups definitions')
alaQoSMapGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsName"))
if mibBuilder.loadTexts: alaQoSMapGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsEntry.setDescription('Definition of QoS MapGroups')
alaQoSMapGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSMapGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsName.setDescription('Name of map group')
alaQoSMapGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsSource.setDescription('What entity created the map group.')
alaQoSMapGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupsStatus.setDescription('Used to create/delete map groups according to the\n               RowStatus convention')
alaQoSAppliedMapGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24), )
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsTable.setDescription('Table of QoS AppliedMapGroups definitions')
alaQoSAppliedMapGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsEntry.setDescription('Definition of QoS AppliedMapGroups')
alaQoSAppliedMapGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsName.setDescription('Name of map group')
alaQoSAppliedMapGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsSource.setDescription('What entity created the map group.')
alaQoSAppliedMapGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 24, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupsStatus.setDescription('Used to create/delete map groups according to the\n               RowStatus convention')
alaQoSMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25), )
if mibBuilder.loadTexts: alaQoSMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupTable.setDescription('Table of QoS MapGroup definitions')
alaQoSMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupKey"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupKeyEnd"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupValue"))
if mibBuilder.loadTexts: alaQoSMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupEntry.setDescription('Definition of QoS MapGroup')
alaQoSMapGroupKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupKey.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupKey.setDescription('Key range start of map group entry.')
alaQoSMapGroupKeyEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupKeyEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupKeyEnd.setDescription("Key range end for map group entries.  Key range end\n               must be greater than key range start to indicate a range.\n               When '0', use key range start as a single key.")
alaQoSMapGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSMapGroupValue.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupValue.setDescription('Value for map group entries.  Value to stamp on traffic when\n               keys in the proper range are seen.')
alaQoSMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 25, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSMapGroupStatus.setDescription('Used to create/delete map group entries according to the\n               RowStatus convention')
alaQoSAppliedMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26), )
if mibBuilder.loadTexts: alaQoSAppliedMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupTable.setDescription('Table of QoS AppliedMapGroup definitions')
alaQoSAppliedMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupKey"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupKeyEnd"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupValue"))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupEntry.setDescription('Definition of QoS AppliedMapGroup')
alaQoSAppliedMapGroupKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKey.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKey.setDescription('Key range start of map group entry.')
alaQoSAppliedMapGroupKeyEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKeyEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupKeyEnd.setDescription("Key range end for map group entries.  Key range end\n               must be greater than key range start to indicate a range.\n               When '0', use key range start as a single key.")
alaQoSAppliedMapGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: alaQoSAppliedMapGroupValue.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupValue.setDescription('Value for map group entries.  Value to stamp on traffic when\n               keys in the proper range are seen.')
alaQoSAppliedMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 26, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedMapGroupStatus.setDescription('Used to create/delete map group entries according to the\n               RowStatus convention')
alaQoSActionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27), )
if mibBuilder.loadTexts: alaQoSActionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTable.setDescription('Table of QoS Action definitions')
alaQoSActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSActionName"))
if mibBuilder.loadTexts: alaQoSActionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionEntry.setDescription('Definition of QoS Action')
alaQoSActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSActionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionName.setDescription('Name of action')
alaQoSActionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionSource.setDescription('What entity created the action.')
alaQoSActionDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3))).clone('accept')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDisposition.setDescription('Disposition of traffic using the action.\n               Use to filter out unwanted traffic.')
alaQoSActionMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidth.setDescription('Maximum bandwidth (Kbits/sec) allowed for traffic')
alaQoSActionMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumBandwidthStatus.setDescription('Status field indicating whether maximum bandwidth\n               is specified(enabled) or not(disabled).')
alaQoSActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPriority.setDescription('Internal and queueing priority to use for traffic.')
alaQoSActionPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPriorityStatus.setDescription('Status field indicating whether priority\n               is specified(enabled) or not(disabled).')
alaQoSActionShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionShared.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionShared.setDescription('When enabled, try and share any resources\n               (queues/limiters/descriptors) when more than one policy uses\n               the same action.')
alaQoSActionMaximumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumDepth.setDescription('Maximum depth (Kbytes) of queues for traffic.\n               Used for EBS in tri-color marker applications.')
alaQoSActionMaximumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMaximumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMaximumDepthStatus.setDescription('Status field indicating whether maximum depth\n               is specified(enabled) or not(disabled).')
alaQoSAction8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAction8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAction8021p.setDescription('802.1p value to stamp on traffic.')
alaQoSAction8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAction8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAction8021pStatus.setDescription('Status field indicating whether 802.1p\n               is specified(enabled) or not(disabled).')
alaQoSActionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTos.setDescription('TOS value to stamp on traffic. (High 3 bits of TOS byte)')
alaQoSActionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTosStatus.setDescription('Status field indicating whether TOS\n               is specified(enabled) or not(disabled).')
alaQoSActionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDscp.setDescription('TOS value to stamp on traffic. (High 6 bits of TOS byte)')
alaQoSActionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionDscpStatus.setDescription('Status field indicating whether DSCP\n               is specified(enabled) or not(disabled).')
alaQoSActionMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('b8021p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapFrom.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapFrom.setDescription('What field to use as key for mapping 802.1p/TOS/DSCP priorities')
alaQoSActionMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('b8021p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapTo.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapTo.setDescription('What field to rewrite due to remapping 802.1p/TOS/DSCP\n               priorities')
alaQoSActionMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapGroup.setDescription('Name of the map group to use when remapping 802.1p/TOS/DSCP\n               priorities.')
alaQoSActionMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMapGroupStatus.setDescription('Status field indicating whether a map group\n               is specified(enabled) or not(disabled).')
alaQoSActionLoadBalanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroup.setDescription('Name of load balance group to use for traffic')
alaQoSActionLoadBalanceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionLoadBalanceGroupStatus.setDescription('Status field indicating whether load balanace group\n               is specified(enabled) or not(disabled).')
alaQoSActionPermanentGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 23), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddr.setDescription('Next hop gateway to use for traffic')
alaQoSActionPermanentGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpAddrStatus.setDescription('Status field indicating whether permanent gateway IP address\n               is specified(enabled) or not(disabled).')
alaQoSActionAlternateGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 25), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddr.setDescription("Next hop gateway to use for traffic that doesn't have an\n               explicit route.  Use this gateway instead of default routes.")
alaQoSActionAlternateGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionAlternateGatewayIpAddrStatus.setDescription('Status field indicating whether alternate gateway IP address\n               is specified(enabled) or not(disabled).')
alaQoSActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRowStatus.setDescription('Used to create/delete actions according to the\n               RowStatus convention')
alaQoSActionNocache = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionNocache.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionNocache.setDescription("When enabled, don't make hardware entries for matching flows.")
alaQoSActionPortdisable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPortdisable.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPortdisable.setDescription('When enabled, disable the physical source port of the traffic.')
alaQoSActionRedirectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectSlot.setDescription('Destination physical slot for redirected traffic')
alaQoSActionRedirectSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectSlotStatus.setDescription('Status for alaQoSActionRedirectSlotStatus field')
alaQoSActionRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectPort.setDescription('Destination physical port for redirected traffic')
alaQoSActionRedirectAgg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectAgg.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectAgg.setDescription('Destination linkagg for redirected traffic')
alaQoSActionRedirectAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectAggStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectAggStatus.setDescription('Status for alaQoSActionRedirectAggStatus field')
alaQoSActionMirrorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorSlot.setDescription('Destination physical slot for mirrored traffic')
alaQoSActionMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorPort.setDescription('Destination physical port for mirrored traffic')
alaQoSActionMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))).clone('ingress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorMode.setDescription('Mirroring mode')
alaQoSActionMirrorModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorModeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorModeStatus.setDescription('Status for alaQoSActionMirrorMode field')
alaQoSActionCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 39), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCIR.setDescription('Committed Information Rate - bandwidth values in kilobits per second.')
alaQoSActionCIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCIRStatus.setDescription('Status field indicating whether CIR value is specified(enabled)\n                          or not(disabled).')
alaQoSActionCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCBS.setDescription('Committed Burst Size - bucket size in byte.')
alaQoSActionCBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCBSStatus.setDescription('Status field indicating whether CBS value is specified(enabled)\n              or not(disabled).')
alaQoSActionPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 43), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPIR.setDescription('Peak Information Rate - bandwidth values in kilobits per second.')
alaQoSActionPIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPIRStatus.setDescription('Status field indicating whether PIR value is specified(enabled)\n                          or not(disabled).')
alaQoSActionPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPBS.setDescription('Peak Burst Size - bucket size in byte.')
alaQoSActionPBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPBSStatus.setDescription('Status field indicating whether PBS value is specified(enabled)\n              or not(disabled).')
alaQoSActionCPUPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCPUPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCPUPriority.setDescription('Priority for CPU messages.')
alaQoSActionCPUPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionCPUPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionCPUPriorityStatus.setDescription('Status field indicating whether CPU Priority value is specified(enabled)\n              or not(disabled).')
alaQoSActionColorOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionColorOnly.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionColorOnly.setDescription('only color red traffic ')
alaQoSActionRedirectChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectChassis.setDescription('Destination physical chassis for redirected traffic')
alaQoSActionMirrorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionMirrorChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionMirrorChassis.setDescription('Destination physical chassis for mirrored traffic')
alaQoSActionPermanentGatewayIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 52), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6Addr.setDescription('Next hop gateway to use for IPv6 traffic')
alaQoSActionPermanentGatewayIpV6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6AddrStatus.setDescription('Status field indicating whether permanent gateway IPv6 address\n               is specified(enabled) or not(disabled).')
alaQoSActionPermanentGatewayIpV6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 54), Ipv6IfIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6IfIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionPermanentGatewayIpV6IfIndex.setDescription('Ipv6IfIndex for link-local address, else 0.')
alaQoSActionRTCPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRTCPMonitor.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRTCPMonitor.setDescription('RTCP Monitor status for the traffic.')
alaQoSActionRTCPMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRTCPMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRTCPMonitorStatus.setDescription('Status of the RTCP Monitor field for the traffic.')
alaQoSActionRTCPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 57), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRTCPDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRTCPDSCP.setDescription('RTCP DSCP number for the traffic.')
alaQoSActionRTCPDSCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRTCPDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRTCPDSCPStatus.setDescription('Status of the RTCP DSCP field for the traffic.')
alaQoSActionTrustDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTrustDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTrustDSCP.setDescription('Trust DSCP status for the traffic.')
alaQoSActionTrustDSCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionTrustDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionTrustDSCPStatus.setDescription('Status of the Trust DSCP field for the traffic.')
alaQoSActionRedirectModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 27, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("qmr", 1), ("captivePortal", 2), ("unauthorized", 3), ("byod", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSActionRedirectModule.setStatus('current')
if mibBuilder.loadTexts: alaQoSActionRedirectModule.setDescription('Object to configure action on HTTP port for Access-Guardian\n               Restricted Role configuration.')
alaQoSAppliedActionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28), )
if mibBuilder.loadTexts: alaQoSAppliedActionTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTable.setDescription('Table of QoS AppliedAction definitions')
alaQoSAppliedActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionName"))
if mibBuilder.loadTexts: alaQoSAppliedActionEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionEntry.setDescription('Definition of QoS AppliedAction')
alaQoSAppliedActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedActionName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionName.setDescription('Name of action')
alaQoSAppliedActionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionSource.setDescription('What entity created the action.')
alaQoSAppliedActionDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("drop", 2), ("deny", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDisposition.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDisposition.setDescription('Disposition of traffic using the action.\n               Use to filter out unwanted traffic.')
alaQoSAppliedActionMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidth.setDescription('Maximum bandwidth (Kbits/sec) allowed for traffic')
alaQoSAppliedActionMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumBandwidthStatus.setDescription('Status field indicating whether maximum bandwidth\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPriority.setDescription('Internal and queueing priority to use for traffic.')
alaQoSAppliedActionPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPriorityStatus.setDescription('Status field indicating whether priority\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionShared.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionShared.setDescription('When enabled, try and share any resources\n               (queues/limiters/descriptors) when more than one policy uses\n               the same action.')
alaQoSAppliedActionMaximumDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepth.setDescription('Maximum depth (Kbytes) of queues for traffic.\n               Used for EBS in tri-color marker applications.')
alaQoSAppliedActionMaximumDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMaximumDepthStatus.setDescription('Status field indicating whether maximum depth\n               is specified(enabled) or not(disabled).')
alaQoSAppliedAction8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedAction8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedAction8021p.setDescription('802.1p value to stamp on traffic.')
alaQoSAppliedAction8021pStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedAction8021pStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedAction8021pStatus.setDescription('Status field indicating whether 802.1p\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionTos.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTos.setDescription('TOS value to stamp on traffic. (High 3 bits of TOS byte)')
alaQoSAppliedActionTosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionTosStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTosStatus.setDescription('Status field indicating whether TOS\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDscp.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDscp.setDescription('TOS value to stamp on traffic. (High 6 bits of TOS byte)')
alaQoSAppliedActionDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionDscpStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionDscpStatus.setDescription('Status field indicating whether DSCP\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapFrom.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapFrom.setDescription('What field to use as key for mapping 802.1p/TOS/DSCP priorities')
alaQoSAppliedActionMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapTo.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapTo.setDescription('What field to rewrite due to remapping 802.1p/TOS/DSCP\n               priorities')
alaQoSAppliedActionMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroup.setDescription('Name of the map group to use when remapping 802.1p/TOS/DSCP\n               priorities.')
alaQoSAppliedActionMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMapGroupStatus.setDescription('Status field indicating whether a map group\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionLoadBalanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroup.setDescription('Name of load balance group to use for traffic')
alaQoSAppliedActionLoadBalanceGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionLoadBalanceGroupStatus.setDescription('Status field indicating whether load balanace group\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionPermanentGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddr.setDescription('Next hop gateway to use for traffic')
alaQoSAppliedActionPermanentGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpAddrStatus.setDescription('Status field indicating whether permanent gateway IP address\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionAlternateGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddr.setDescription("Next hop gateway to use for traffic that doesn't have an\n               explicit route.  Use this gateway instead of default routes.")
alaQoSAppliedActionAlternateGatewayIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionAlternateGatewayIpAddrStatus.setDescription('Status field indicating whether alternate gateway IP address\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 27), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRowStatus.setDescription('Used to create/delete actions according to the\n               RowStatus convention')
alaQoSAppliedActionNocache = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionNocache.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionNocache.setDescription("When enabled, don't make hardware entries for matching flows.")
alaQoSAppliedActionPortdisable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionPortdisable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPortdisable.setDescription('When enabled, disable the physical source port of the traffic.')
alaQoSAppliedActionRedirectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlot.setDescription('Destination physical slot for redirected traffic')
alaQoSAppliedActionRedirectSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlotStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectSlotStatus.setDescription('Status for alaQoSAppliedActionRedirectSlotStatus field')
alaQoSAppliedActionRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectPort.setDescription('Destination physical port for redirected traffic')
alaQoSAppliedActionRedirectAgg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAgg.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAgg.setDescription('Destination linkagg for redirected traffic')
alaQoSAppliedActionRedirectAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAggStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectAggStatus.setDescription('Status for alaQoSAppliedActionRedirectAggStatus field')
alaQoSAppliedActionMirrorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorSlot.setDescription('Destination physical slot for mirrored traffic')
alaQoSAppliedActionMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorPort.setDescription('Destination physical port for mirrored traffic')
alaQoSAppliedActionMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))).clone('ingress')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorMode.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorMode.setDescription('Mirroring mode')
alaQoSAppliedActionMirrorModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorModeStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorModeStatus.setDescription('Status for alaQoSAppliedActionMirrorMode field')
alaQoSAppliedActionCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 39), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCIR.setDescription('Committed Information Rate - bandwidth values in kilobits per second.')
alaQoSAppliedActionCIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCIRStatus.setDescription('Status field indicating whether CIR value is specified(enabled)\n                          or not(disabled).')
alaQoSAppliedActionCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCBS.setDescription('Committed Burst Size - bucket size in byte.')
alaQoSAppliedActionCBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCBSStatus.setDescription('Status field indicating whether CBS value is specified(enabled)\n              or not(disabled).')
alaQoSAppliedActionPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 43), Integer32()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPIR.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPIR.setDescription('Peak Information Rate - bandwidth values in kilobits per second.')
alaQoSAppliedActionPIRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPIRStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPIRStatus.setDescription('Status field indicating whether PIR value is specified(enabled)\n                          or not(disabled).')
alaQoSAppliedActionPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147450880))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPBS.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPBS.setDescription('Peak Burst Size - bucket size in byte.')
alaQoSAppliedActionPBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPBSStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPBSStatus.setDescription('Status field indicating whether PBS value is specified(enabled)\n              or not(disabled).')
alaQoSAppliedActionCPUPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCPUPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCPUPriority.setDescription('Priority for CPU messages.')
alaQoSAppliedActionCPUPriorityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionCPUPriorityStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionCPUPriorityStatus.setDescription('Status field indicating whether CPU Priority value is specified(enabled)\n              or not(disabled).')
alaQoSAppliedActionColorOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionColorOnly.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionColorOnly.setDescription('only color red traffic ')
alaQoSAppliedActionRedirectChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRedirectChassis.setDescription('Destination physical chassis for redirected traffic')
alaQoSAppliedActionMirrorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionMirrorChassis.setDescription('Destination physical chassis for mirrored traffic')
alaQoSAppliedActionPermanentGatewayIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 52), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6Addr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6Addr.setDescription('Next hop gateway to use for IPv6 traffic')
alaQoSAppliedActionPermanentGatewayIpV6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6AddrStatus.setDescription('Status field indicating whether permanent gateway IPv6 address\n               is specified(enabled) or not(disabled).')
alaQoSAppliedActionPermanentGatewayIpV6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 54), Ipv6IfIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6IfIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionPermanentGatewayIpV6IfIndex.setDescription('Ipv6IfIndex for link-local address, else 0.')
alaQoSAppliedActionRTCPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPMonitor.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPMonitor.setDescription('RTCP Monitor status for the traffic.')
alaQoSAppliedActionRTCPMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPMonitorStatus.setDescription('Status of the RTCP Monitor field for the traffic.')
alaQoSAppliedActionRTCPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 57), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPDSCP.setDescription('RTCP DSCP number for the traffic.')
alaQoSAppliedActionRTCPDSCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionRTCPDSCPStatus.setDescription('Status of the RTCP DSCP field for the traffic.')
alaQoSAppliedActionTrustDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionTrustDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTrustDSCP.setDescription('Trust DSCP status for the traffic.')
alaQoSAppliedActionTrustDSCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 28, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedActionTrustDSCPStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedActionTrustDSCPStatus.setDescription('Status of the Trust DSCP field for the traffic.')
alaQoSPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29), )
if mibBuilder.loadTexts: alaQoSPortTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortTable.setDescription('Table of QoS Port definitions')
alaQoSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortSlot"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSPortPort"))
if mibBuilder.loadTexts: alaQoSPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortEntry.setDescription('Definition of QoS Port')
alaQoSPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6016)))
if mibBuilder.loadTexts: alaQoSPortSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortSlot.setDescription('Physical slot port resides on\n               If this is a virtual chassis environemnt,\n               This will contain the ChassisId*1000 + slotNum.')
alaQoSPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52)))
if mibBuilder.loadTexts: alaQoSPortPort.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPort.setDescription('Physical port number')
alaQoSPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("ethernet10", 3), ("ethernet100", 4), ("ethernet1G", 5), ("ethernet10G", 6), ("aggregate", 7), ("ethernet40G", 8), ("ethernet100G", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortInterfaceType.setDescription('The type of interface QoS matches for this physical port')
alaQoSPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortTrusted.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortTrusted.setDescription('Status of trusting 802.1p/TOS/DSCP values.\n               When trusted, 802.1p/DSCP values in the packet are passed\n               through the switch.  When untrusted, 802.1p/DSCP values are set\n               to the port defaults.')
alaQoSPortDefault8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefault8021p.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefault8021p.setDescription('802.1p priority value to use for untagged frames arriving on\n               the port and tagged frames when the port is untrusted.')
alaQoSPortDefaultDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefaultDSCP.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultDSCP.setDescription('DSCP value to stamp in frames arriving on the port when the port\n               is untrusted')
alaQoSPortMaximumDefaultDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepth.setDescription('Maximum depth of egress queues (Kbytes).\n               Maximum depth of queues on this port')
alaQoSPortMaximumDefaultDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumDefaultDepthStatus.setDescription('Status field indicating whether to enforce\n               maximum depth on this port')
alaQoSPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortReset.setDescription('Reset all QoS parameters to default values')
alaQoSPortPhysicalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSPortPhysicalBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortPhysicalBandwidth.setDescription('Physical bandwidth of port (Kbit/sec)')
alaQoSPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortRowStatus.setDescription('Used to create/delete ports according to the\n               RowStatus convention')
alaQoSPortDefaultClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8021p", 1), ("tos", 2), ("dscp", 3))).clone('tos')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDefaultClassification.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDefaultClassification.setDescription('Ingress traffic classification parameter for Firenze port\n               What field to interpret as priority for WRED')
alaQoSPortMaximumBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidth.setDescription('Maximum egress bandwidth (Kbits/sec).\n               Maximum rate to send traffic out this port')
alaQoSPortMaximumBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumBandwidthStatus.setDescription('Status field indicating whether to enforce\n               maximum bandwidth on port.')
alaQoSPortMaximumIngBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidth.setDescription('Maximum igress bandwidth (Kbits/sec).\n               Maximum rate to recieve traffic in on this port')
alaQoSPortMaximumIngBandwidthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngBandwidthStatus.setDescription('Status field indicating whether to enforce\n               maximum bandwidth on port.')
alaQoSPortMaximumIngressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngressDepth.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngressDepth.setDescription('Maximum depth of ingress queues (Kbytes).\n        Maximum depth of queues on this port')
alaQoSPortMaximumIngressDepthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortMaximumIngressDepthStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortMaximumIngressDepthStatus.setDescription('Status field indicating whether to enforce\n        maximum depth on  this port')
alaQoSPortDEIMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDEIMarking.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDEIMarking.setDescription('This object specifies if, in egress traffic, the DEI/CFI bit\n               will be set or not for the traffic which is not conformant to\n               SLA (Yellow color packets).\n\n          enabled(1)  -- the DEI/CFI bit will be set in egress traffic.\n          disabled(2) -- the DEI/CFI bit will not be set in egress traffic.')
alaQoSPortDEIMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSPortDEIMapping.setStatus('current')
if mibBuilder.loadTexts: alaQoSPortDEIMapping.setDescription('This object specifies if, in ingress traffic, the DEI/CFI bit\n              will be set or not for the traffic which is not conformant to\n              SLA (Yellow color packets).\n\n              enabled(1)  -- the DEI/CFI bit will be set in ingress  traffic.\n              disabled(2) -- the DEI/CFI bit will not be set in ingress traffic.')
alaQoSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30))
alaQoSConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigEnabled.setDescription('Is QoS enabled on the switch')
alaQoSConfigTrustPorts = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigTrustPorts.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigTrustPorts.setDescription('Flag to indicate whether to trust the 802.1p/TOS values on\n               incoming traffic by default.  Can be overridden on a port by\n               port basis.')
alaQoSConfigStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigStatsInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigStatsInterval.setDescription('Interval in seconds for how often statistics are updated')
alaQoSConfigLogLines = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogLines.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogLines.setDescription('Number of log lines to maintain in the QoS log')
alaQoSConfigLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogLevel.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogLevel.setDescription('The level of logging desired.  The higher the level, the more\n               verbose the logging')
alaQoSConfigLogConsole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigLogConsole.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigLogConsole.setDescription('Whether QoS log events are logged to the console')
alaQoSConfigForwardLog = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigForwardLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigForwardLog.setDescription('Whether QoS forwards logging events to PolicyManager')
alaQoSConfigClearLog = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigClearLog.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigClearLog.setDescription('Clear the QoS log')
alaQoSConfigApply = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigApply.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigApply.setDescription('Set to apply all pending QoS configuration/policy changes')
alaQoSConfigRevert = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigRevert.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigRevert.setDescription('Set to revert all pending QoS configuration/policy changes')
alaQoSConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigReset.setDescription('Set to reset global QoS configuration parameters to their\n               default values')
alaQoSConfigStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigStatsReset.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigStatsReset.setDescription('Set to reset global QoS statistics counters')
alaQoSConfigFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigFlush.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigFlush.setDescription('Flush all pending policy objects')
alaQoSConfigDebug = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigDebug.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDebug.setDescription('Possible debug flags for QoS')
alaQoSConfigUserportFilter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigUserportFilter.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigUserportFilter.setDescription('Events/protocols to filter on a Userport.  Event bits values are:\n                  spoof = 1\n                  bpdu = 2\n                  bgp = 4\n                  ospf = 8\n                  rip = 16\n                  vrrp = 32\n                  dhcp-server = 64\n                  pim = 128\n                  dvmrp = 256\n                  is-is = 512\n                  dnsreply = 1024')
alaQoSConfigAppliedUserportFilter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportFilter.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportFilter.setDescription('Events/protocols to filter on a Userport.  Event bits values are:\n                  spoof = 1\n                  bpdu = 2\n                  bgp = 4\n                  ospf = 8\n                  rip = 16\n                  vrrp = 32\n                  dhcp-server = 64\n                  pim = 128\n                  dvmrp = 256\n                  is-is = 512\n                  dnsreply = 1024')
alaQoSConfigUserportShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigUserportShutdown.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigUserportShutdown.setDescription('Events/protocols that trigger admin down of a Userport.\n               Event bits values are:\n                  spoof = 1\n                  bpdu = 2\n                  bgp = 4\n                  ospf = 8\n                  rip = 16\n                  vrrp = 32\n                  dhcp-server = 64\n                  pim = 128\n                  dvmrp = 256\n                  is-is = 512\n                  dnsreply = 1024')
alaQoSConfigAppliedUserportShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportShutdown.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAppliedUserportShutdown.setDescription('Events/protocols that trigger admin down of a Userport.\n               Event bits values are:\n                  spoof = 1\n                  bpdu = 2\n                  bgp = 4\n                  ospf = 8\n                  rip = 16\n                  vrrp = 32\n                  dhcp-server = 64\n                  pim = 128\n                  dvmrp = 256\n                  is-is = 512\n                  dnsreply = 1024')
alaQoSConfigAutoPhones = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pri0", 0), ("pri1", 1), ("pri2", 2), ("pri3", 3), ("pri4", 4), ("pri5", 5), ("pri6", 6), ("pri7", 7), ("trusted", 8), ("disable", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigAutoPhones.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigAutoPhones.setDescription('Auto configure CSBU Phones\n              pri0-7 - will replace the priority.\n              trusted - will allow priority from the orginator to be used.\n              disable - will unconfigure to feature.')
alaQoSConfigQMPage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMPage.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMPage.setDescription('Flag to indicate whether to send back a quarantined page when a client is quarantined but a remediation URL is not specified.')
alaQoSConfigQMMACGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMMACGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMMACGroup.setDescription('Group name for quarantine manager quarantined MACs.')
alaQoSConfigQMPath = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigQMPath.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigQMPath.setDescription('Default path for remediation server redirect.')
alaQoSConfigDEIMapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigDEIMapping.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDEIMapping.setDescription('This object specifies, in ingress traffic, the DEI/CFI bit is mapped\n              or not to internal drop precedence or yellow color.\n\n              enabled(1)  -- the DEI/CFI bit is mapped to internal drop precedence or yellow\n                             color if that bit is set.\n              disabled(2) -- the DEI/CFI bit is not mapped to drop precedence or yellow\n                             color.')
alaQoSConfigDEIMarking = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSConfigDEIMarking.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigDEIMarking.setDescription('This object specifies, in egress traffic, the DEI/CFI bit is mapped\n              or not to internal drop precedence or yellow color.\n\n          enabled(1) --  the DEI/CFI bit is mapped to internal drop precedence or yellow\n                         color if that bit is set.\n          disabled(2) -- the DEI/CFI bit is not mapped to drop precedence or yellow\n                         color.')
alaQoSConfigSwitchGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("expanded", 1), ("compact", 2))).clone('expanded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSConfigSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSConfigSwitchGroup.setDescription("How to match the network group `Switch'.\n      expanded -- Match each interface address as a unique identifier.\n      compact  -- Match Switch interfaces using an aggregated identifier.")
alaQoSVmSnooping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 30, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQoSVmSnooping.setStatus('current')
if mibBuilder.loadTexts: alaQoSVmSnooping.setDescription('Is VM Snooping enabled on the switch')
alaQoSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31))
alaQoSStatsSpoofedEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsSpoofedEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsSpoofedEvents.setDescription('Total Number of spoofed events')
alaQoSStatsNonSpoofedEvents = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 31, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSStatsNonSpoofedEvents.setStatus('current')
if mibBuilder.loadTexts: alaQoSStatsNonSpoofedEvents.setDescription('Total number of non-spoofed events')
alaQoSValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32), )
if mibBuilder.loadTexts: alaQoSValidityPeriodTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodTable.setDescription('Table of QoS ValidityPeriod definitions')
alaQoSValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodName"))
if mibBuilder.loadTexts: alaQoSValidityPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEntry.setDescription('Definition of QoS ValidityPeriod')
alaQoSValidityPeriodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSValidityPeriodName.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodName.setDescription('Name of validity period')
alaQoSValidityPeriodSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodSource.setDescription('What entity created the validity period.')
alaQoSValidityPeriodDays = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodDays.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodDays.setDescription('Bitfield for each day of the week this validity period\n               is active.  Monday is least significant, Sunday\n               is most significant.')
alaQoSValidityPeriodDaysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodDaysStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodDaysStatus.setDescription('Status field indicating whether the validity period\n               has specific active days of the month.')
alaQoSValidityPeriodMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodMonths.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodMonths.setDescription('Bitfield for each month this validity period\n               is active.  January is least significant. Decemeber\n               is most significant.')
alaQoSValidityPeriodMonthsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodMonthsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodMonthsStatus.setDescription('Status field indicating whether the validity period\n               has specific active days of the week.')
alaQoSValidityPeriodHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodHour.setDescription("Time of day this period becomes active.\n               Format is 'hh:mm'")
alaQoSValidityPeriodHourStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodHourStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodHourStatus.setDescription('Status field indicating whether the validity period\n               has specific active hours of the day.')
alaQoSValidityPeriodEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodEndHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEndHour.setDescription("Time of day this period becomes inactive.\n               Format is 'hh:mm'")
alaQoSValidityPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodInterval.setDescription("Date/time when the validity period begins.\n               Format is 'mm/dd/yyyy hh:mm'")
alaQoSValidityPeriodIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodIntervalStatus.setDescription('Status field indicating whether the validity period\n               has a specific active date-time interval.')
alaQoSValidityPeriodEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodEndInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodEndInterval.setDescription("Date/time when the validity period ends.\n               Format is 'mm/dd/yyyy hh:mm'")
alaQoSValidityPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 32, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSValidityPeriodRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSValidityPeriodRowStatus.setDescription('Used to create/delete validity periods according\n               to the RowStatus convention')
alaQoSAppliedValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33), )
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodTable.setDescription('Table of QoS AppliedValidityPeriod definitions')
alaQoSAppliedValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodName"))
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEntry.setDescription('Definition of QoS AppliedValidityPeriod')
alaQoSAppliedValidityPeriodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodName.setDescription('Name of validity period')
alaQoSAppliedValidityPeriodSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodSource.setDescription('What entity created the validity period.')
alaQoSAppliedValidityPeriodDays = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDays.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDays.setDescription('Bitfield for each day of the week this validity period\n               is active.  Monday is least significant, Sunday\n               is most significant.')
alaQoSAppliedValidityPeriodDaysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDaysStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodDaysStatus.setDescription('Status field indicating whether the validity period\n               has specific active days of the month.')
alaQoSAppliedValidityPeriodMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonths.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonths.setDescription('Bitfield for each month this validity period\n               is active.  January is least significant. Decemeber\n               is most significant.')
alaQoSAppliedValidityPeriodMonthsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonthsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodMonthsStatus.setDescription('Status field indicating whether the validity period\n               has specific active days of the week.')
alaQoSAppliedValidityPeriodHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHour.setDescription("Time of day this period becomes active.\n               Format is 'hh:mm'")
alaQoSAppliedValidityPeriodHourStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHourStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodHourStatus.setDescription('Status field indicating whether the validity period\n               has specific active hours of the day.')
alaQoSAppliedValidityPeriodEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndHour.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndHour.setDescription("Time of day this period becomes inactive.\n               Format is 'hh:mm'")
alaQoSAppliedValidityPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodInterval.setDescription("Date/time when the validity period begins.\n               Format is 'mm/dd/yyyy hh:mm'")
alaQoSAppliedValidityPeriodIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodIntervalStatus.setDescription('Status field indicating whether the validity period\n               has a specific active date-time interval.')
alaQoSAppliedValidityPeriodEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndInterval.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodEndInterval.setDescription("Date/time when the validity period ends.\n               Format is 'mm/dd/yyyy hh:mm'")
alaQoSAppliedValidityPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 33, 1, 13), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedValidityPeriodRowStatus.setDescription('Used to create/delete validity periods according\n               to the RowStatus convention')
alaQoSRuleGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34), )
if mibBuilder.loadTexts: alaQoSRuleGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsTable.setDescription('Table of QoS RuleGroups definitions')
alaQoSRuleGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsName"))
if mibBuilder.loadTexts: alaQoSRuleGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsEntry.setDescription('Definition of QoS RuleGroups')
alaQoSRuleGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsName.setDescription('Name of rule group')
alaQoSRuleGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsSource.setDescription('What entity created the rule group.')
alaQoSRuleGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("egress", 2), ("unp", 3), ("appfp", 4), ("empacl", 5))).clone('unp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsType.setDescription('Type of rule group.')
alaQoSRuleGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsEnabled.setDescription('Is this rule grop enabled or not')
alaQoSRuleGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 34, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupsStatus.setDescription('Used to create/delete rule groups according to the\n               RowStatus convention')
alaQoSAppliedRuleGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35), )
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsTable.setDescription('Table of QoS AppliedRuleGroups definitions')
alaQoSAppliedRuleGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEntry.setDescription('Definition of QoS AppliedRuleGroups')
alaQoSAppliedRuleGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsName.setDescription('Name of rule group')
alaQoSAppliedRuleGroupsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ldap", 1), ("cli", 2), ("blt", 3), ("api", 4), ("imp", 5))).clone('cli')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsSource.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsSource.setDescription('What entity created the service group.')
alaQoSAppliedRuleGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("egress", 2), ("unp", 3), ("appfp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsType.setDescription('What entity created the rule group.')
alaQoSAppliedRuleGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsEnabled.setDescription('Is this rule grop enabled or not')
alaQoSAppliedRuleGroupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 35, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupsStatus.setDescription('Used to create/delete rule groups according to the\n               RowStatus convention')
alaQoSRuleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36), )
if mibBuilder.loadTexts: alaQoSRuleGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupTable.setDescription('Table of QoS RuleGroup definitions')
alaQoSRuleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupRuleName"))
if mibBuilder.loadTexts: alaQoSRuleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupEntry.setDescription('Definition of QoS RuleGroup')
alaQoSRuleGroupRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSRuleGroupRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupRuleName.setDescription('Name of rule in rule group entry')
alaQoSRuleGroupMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupMatches.setDescription('Number of times this rule has been matched.')
alaQoSRuleGroupCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSRuleGroupPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupPacketCount.setDescription('Counter for packets patching this rule')
alaQoSRuleGroupByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSRuleGroupByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupByteCount.setDescription('Counter for bytes matching this rule')
alaQoSRuleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 36, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSRuleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleGroupStatus.setDescription('Used to create/delete rule group entries according to the\n               RowStatus convention')
alaQoSAppliedRuleGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37), )
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupTable.setDescription('Table of QoS AppliedRuleGroup definitions')
alaQoSAppliedRuleGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupRuleName"))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupEntry.setDescription('Definition of QoS AppliedRuleGroup')
alaQoSAppliedRuleGroupRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupRuleName.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupRuleName.setDescription('Name of rule in rule group entry')
alaQoSAppliedRuleGroupMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupMatches.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupMatches.setDescription('Number of times this rule has been matched.')
alaQoSAppliedRuleGroupCountType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packets", 1), ("bytes", 2))).clone('packets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupCountType.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupCountType.setDescription('Which rule statistics counters to update if not all are available')
alaQoSAppliedRuleGroupPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupPacketCount.setDescription('Counter for packets patching this rule')
alaQoSAppliedRuleGroupByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupByteCount.setDescription('Counter for bytes matching this rule')
alaQoSAppliedRuleGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 37, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedRuleGroupStatus.setDescription('Used to create/delete rule group entries according to the\n               RowStatus convention')
alaQoSDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55), )
if mibBuilder.loadTexts: alaQoSDSCPTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPTable.setDescription('Table of QoS Condition definitions')
alaQoSDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSDSCPEntryNumber"))
if mibBuilder.loadTexts: alaQoSDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPEntry.setDescription('Definition of QoS DSCP')
alaQoSDSCPEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)))
if mibBuilder.loadTexts: alaQoSDSCPEntryNumber.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPEntryNumber.setDescription('DSCP Entry number for the traffic.')
alaQoSDSCPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSDSCPPriority.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPPriority.setDescription('DSCP priority for the traffic.')
alaQoSDSCPDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSDSCPDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPDropPrecedence.setDescription('DSCP drop precedence for the traffic.')
alaQoSDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 55, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSDSCPRowStatus.setDescription('RowStatus entry for QoS DSCP.')
alaQoSAutoMacRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 56), )
if mibBuilder.loadTexts: alaQoSAutoMacRangeTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAutoMacRangeTable.setDescription('Table of QoS Auto Mac ranges')
alaQoSAutoMacRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 56, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAutoMacRangeIndex"))
if mibBuilder.loadTexts: alaQoSAutoMacRangeEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAutoMacRangeEntry.setDescription('Definition of QoS Auto Mac Range')
alaQoSAutoMacRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 56, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaQoSAutoMacRangeIndex.setStatus('current')
if mibBuilder.loadTexts: alaQoSAutoMacRangeIndex.setDescription('Index to the Mac range table.')
alaQoSAutoMacRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 56, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAutoMacRangeStart.setStatus('current')
if mibBuilder.loadTexts: alaQoSAutoMacRangeStart.setDescription('specifies the starting mac-address of the default mac-range\n               which is supported by qos auto phones.')
alaQoSAutoMacRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 56, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAutoMacRangeEnd.setStatus('current')
if mibBuilder.loadTexts: alaQoSAutoMacRangeEnd.setDescription('specifies the end mac-address of the default mac-range\n               which is supported by qos auto phones.')
alaQoSExtendedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57), )
if mibBuilder.loadTexts: alaQoSExtendedRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleTable.setDescription('Table of QoS Rule definitions for extending port group behavior on individual port basis or group basis')
alaQoSExtendedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleSplitRuleID"))
if mibBuilder.loadTexts: alaQoSExtendedRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleEntry.setDescription('Definition of QoS Rule')
alaQoSExtendedRuleSplitRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)))
if mibBuilder.loadTexts: alaQoSExtendedRuleSplitRuleID.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleSplitRuleID.setDescription('Split Rule ID defined from the number of members in the group.')
alaQoSExtendedRuleChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleChassis.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleChassis.setDescription('Chassis on which rate-limit is enabled.')
alaQoSExtendedRuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleSlot.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleSlot.setDescription('Slot on which rate-limit is enabled.')
alaQoSExtendedRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRulePort.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRulePort.setDescription('Port on which rate-limit is enabled.')
alaQoSExtendedRulePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRulePacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRulePacketCount.setDescription('Counter for packets matching this rule')
alaQoSExtendedRuleByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleByteCount.setDescription('Counter for bytes matching this rule')
alaQoSExtendedRuleGreenPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleGreenPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleGreenPacketCount.setDescription('Counter for the number of packets which are green compliant.')
alaQoSExtendedRuleYellowPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleYellowPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleYellowPacketCount.setDescription('Counter for the number of packets which are yellow compliant.')
alaQoSExtendedRuleRedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleRedPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleRedPacketCount.setDescription('Counter for the number of packets which are red compliant.')
alaQoSExtendedRuleGreenByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleGreenByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleGreenByteCount.setDescription('Counter for the number of Bytes which are green compliant.')
alaQoSExtendedRuleYellowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleYellowByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleYellowByteCount.setDescription('Counter for the number of Bytes which are yellow compliant.')
alaQoSExtendedRuleRedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 57, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSExtendedRuleRedByteCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSExtendedRuleRedByteCount.setDescription('Counter for the number of Bytes which are red compliant.')
alaQoSV6NetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40), )
if mibBuilder.loadTexts: alaQoSV6NetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSV6NetworkGroupTable.setDescription('Table of QoS V6NetworkGroup definitions')
alaQoSV6NetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSV6NetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSV6NetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSV6NetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSV6NetworkGroupEntry.setDescription('Definition of QoS NetworkGroup')
alaQoSV6NetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaQoSV6NetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSV6NetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSV6NetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaQoSV6NetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSV6NetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSV6NetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 40, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaQoSV6NetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSV6NetworkGroupStatus.setDescription('Used to create/delete network group entries according to the\n               RowStatus convention')
alaQoSAppliedV6NetworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41), )
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupTable.setDescription('Table of QoS AppliedNetworkGroup definitions')
alaQoSAppliedV6NetworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsName"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedV6NetworkGroupIpAddr"), (0, "ALCATEL-IND1-QOS-MIB", "alaQoSAppliedV6NetworkGroupIpMask"))
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupEntry.setDescription('Definition of QoS AppliedNetworkGroup')
alaQoSAppliedV6NetworkGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupIpAddr.setDescription('IP address for network group entry.')
alaQoSAppliedV6NetworkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupIpMask.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupIpMask.setDescription('IP mask for network group entry.')
alaQoSAppliedV6NetworkGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 41, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alaQoSAppliedV6NetworkGroupStatus.setDescription('Used to create/delete network group entries according to the\n               RowStatus convention')
alaQoSIpNetworkSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58), )
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryTable.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryTable.setDescription('Table of QoS IpNetworkSummary definitions.')
alaQoSIpNetworkSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1), ).setIndexNames((0, "ALCATEL-IND1-QOS-MIB", "alaQoSRuleName"))
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryEntry.setDescription('Definition of QoS IpNetworkSummary.')
alaQoSIpNetworkSummaryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryProtocol.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryProtocol.setDescription('Network Protocols as specified in condition classifier for given rule.')
alaQoSIpNetworkSummarySourceIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceIpAddressType.setDescription('Source Ip Address Type as specified in condition classifier for given rule.')
alaQoSIpNetworkSummarySourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceIpAddress.setDescription('Source  IP address as specified in condition classifier for given rule.')
alaQoSIpNetworkSummaryDestinationIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationIpAddressType.setDescription('Destination Ip Address Type as specified in condition classifier for given rule.')
alaQoSIpNetworkSummaryDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationIpAddress.setDescription('Destination Ip Address as specified in condition classifier for given rule.')
alaQoSIpNetworkSummarySourceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummarySourceGroup.setDescription('Source Group as specified in condition classifier for given rule.')
alaQoSIpNetworkSummaryDestinationGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationGroup.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryDestinationGroup.setDescription('Destination Group as specified in condition classifier for given rule.')
alaQoSIpNetworkSummaryVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryVrfName.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryVrfName.setDescription('VRF Name as specified in condition classifier for given rule.')
alaQoSIpNetworkSummaryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryAction.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryAction.setDescription('The action performed when the packet hit the rule.')
alaQoSIpNetworkSummaryHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 1, 58, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryHitCount.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryHitCount.setDescription('Number of packets hit the rule.')
alaQoSMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2))
if mibBuilder.loadTexts: alaQoSMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConformance.setDescription('Branch for QoS Managed Conformance Information.')
alaQoSMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1))
if mibBuilder.loadTexts: alaQoSMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBGroups.setDescription('Branch for QoS Units of Conformance.')
alaQoSMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 2))
if mibBuilder.loadTexts: alaQoSMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBCompliances.setDescription('Branch for QoS Compliance Statements.')
alaQoSMIBRuleObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRulePrecedence"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleCondition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleAction"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleReflexive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleSave"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleEnforced"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleActive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleValidityPeriod"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleValidityPeriodStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleLogInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRulePacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleTrapEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleDefaultList"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGreenPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleYellowPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleRedPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGreenByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleYellowByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleRedByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleObjects = alaQoSMIBRuleObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleObjects.setDescription('Collections of objects providing information for Rules')
alaQoSMIBAppliedRuleObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRulePrecedence"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleCondition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleAction"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleReflexive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleSave"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleEnforced"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleActive"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleValidityPeriod"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleValidityPeriodStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleLogInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRulePacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleTrapEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleDefaultList"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGreenPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleYellowPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleRedPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGreenByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleYellowByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleRedByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleObjects = alaQoSMIBAppliedRuleObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleObjects.setDescription('Collections of objects providing information\n               for applied Rules')
alaQoSMIBConditionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSCondition8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSCondition8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMulticastNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTosMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionService"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionServiceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpCode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIcmpCodeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionEthertype"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionEthertypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlags"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsVal"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsValStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpFlagsMaskStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionTcpEstablished"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6Traffic"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6NH"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6NHStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6FlowLabel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionIpv6FlowLabelStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionMcastIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDscpEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInnerSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInner8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionInner8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVrfName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVrfNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourceChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDestinationChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionAppFpGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionAppFpGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSIP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSIPStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDPIAppName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDPIGrpName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDPIAppNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionDPIAppGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVxlanVni"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVxlanVniStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVxlanPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVxlanPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpv6IpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpv6IpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmSourceIpv6IpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionVmIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosConditionVmL4SourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQosConditionVmL4SourcePortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosConditionVmL4DestPort"), ("ALCATEL-IND1-QOS-MIB", "alaQosConditionVmL4DestPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosConditionVxlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortSplitGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConditionSourcePortSplitGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBConditionObjects = alaQoSMIBConditionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConditionObjects.setDescription('Collections of objects providing information for Conditions')
alaQoSMIBAppliedConditionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationMacGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedCondition8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedCondition8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastNetworkGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMulticastNetworkGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTosMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionService"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionServiceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpTypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpCode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIcmpCodeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionEthertype"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionEthertypeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlags"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsVal"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsValStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpFlagsMaskStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionTcpEstablished"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6Traffic"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6NH"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6NHStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6FlowLabel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionIpv6FlowLabelStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionMcastIpv6Mask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDscpEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlan"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInnerSourceVlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInner8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionInner8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVrfName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVrfNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionFragments"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourceChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDestinationChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionAppFpGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionAppFpGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSIP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSIPStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDPIAppName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDPIAppGrp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDPIAppNameStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionDPIAppGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVxlanVni"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVxlanVniStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVxlanPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVxlanPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceMacAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceMacAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceMacMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpv6IpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpv6IpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmSourceIpv6IpMask"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmIpProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionVmIpProtocolStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosAppliedConditionVmL4SourcePort"), ("ALCATEL-IND1-QOS-MIB", "alaQosAppliedConditionVmL4SourcePortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosAppliedConditionVmL4DestPort"), ("ALCATEL-IND1-QOS-MIB", "alaQosAppliedConditionVmL4DestPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQosAppliedConditionVxlanStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortSplitGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedConditionSourcePortSplitGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedConditionObjects = alaQoSMIBAppliedConditionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedConditionObjects.setDescription('Collections of objects providing information\n               for applied Conditions')
alaQoSMIBServiceObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceDestinationUdpPortEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceObjects = alaQoSMIBServiceObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceObjects.setDescription('Collections of objects providing information for Services')
alaQoSMIBAppliedServiceObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationIpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationTcpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceSourceUdpPortEnd"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPortStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceDestinationUdpPortEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceObjects = alaQoSMIBAppliedServiceObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceObjects.setDescription('Collections of objects providing information\n               for applied Services')
alaQoSMIBServiceGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceGroupsObjects = alaQoSMIBServiceGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceGroupsObjects.setDescription('Collections of objects providing information for ServiceGroups')
alaQoSMIBAppliedServiceGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceGroupsObjects = alaQoSMIBAppliedServiceGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceGroupsObjects.setDescription('Collections of objects providing information\n               for applied ServiceGroups')
alaQoSMIBServiceGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSServiceGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBServiceGroupObjects = alaQoSMIBServiceGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBServiceGroupObjects.setDescription('Collections of objects providing information for ServiceGroups')
alaQoSMIBAppliedServiceGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedServiceGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedServiceGroupObjects = alaQoSMIBAppliedServiceGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedServiceGroupObjects.setDescription('Collections of objects providing information\n               for applied ServiceGroups')
alaQoSMIBNetworkGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBNetworkGroupsObjects = alaQoSMIBNetworkGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBNetworkGroupsObjects.setDescription('Collections of objects providing information for NetworkGroups')
alaQoSMIBAppliedNetworkGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedNetworkGroupsObjects = alaQoSMIBAppliedNetworkGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedNetworkGroupsObjects.setDescription('Collections of objects providing information\n               for applied NetworkGroups')
alaQoSMIBNetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSNetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBNetworkGroupObjects = alaQoSMIBNetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBNetworkGroupObjects.setDescription('Collections of objects providing information for NetworkGroups')
alaQoSMIBAppliedNetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedNetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedNetworkGroupObjects = alaQoSMIBAppliedNetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedNetworkGroupObjects.setDescription('Collections of objects providing information\n               for applied NetworkGroups')
alaQoSMIBMACGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMACGroupsObjects = alaQoSMIBMACGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMACGroupsObjects.setDescription('Collections of objects providing information for MACGroups')
alaQoSMIBAppliedMACGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMACGroupsObjects = alaQoSMIBAppliedMACGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMACGroupsObjects.setDescription('Collections of objects providing information\n               for applied MACGroups')
alaQoSMIBMACGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMACGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMACGroupObjects = alaQoSMIBMACGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMACGroupObjects.setDescription('Collections of objects providing information for MACGroups')
alaQoSMIBAppliedMACGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMACGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMACGroupObjects = alaQoSMIBAppliedMACGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMACGroupObjects.setDescription('Collections of objects providing information\n               for applied MACGroups')
alaQoSMIBPortGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortGroupsObjects = alaQoSMIBPortGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortGroupsObjects.setDescription('Collections of objects providing information for PortGroups')
alaQoSMIBAppliedPortGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedPortGroupsObjects = alaQoSMIBAppliedPortGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedPortGroupsObjects.setDescription('Collections of objects providing information\n               for applied PortGroups')
alaQoSMIBPortGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 21)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortGroupObjects = alaQoSMIBPortGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortGroupObjects.setDescription('Collections of objects providing information for PortGroups')
alaQoSMIBAppliedPortGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 22)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedPortGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedPortGroupObjects = alaQoSMIBAppliedPortGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedPortGroupObjects.setDescription('Collections of objects providing information\n               for applied PortGroups')
alaQoSMIBMapGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 23)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMapGroupsObjects = alaQoSMIBMapGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMapGroupsObjects.setDescription('Collections of objects providing information for MapGroups')
alaQoSMIBAppliedMapGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 24)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMapGroupsObjects = alaQoSMIBAppliedMapGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMapGroupsObjects.setDescription('Collections of objects providing information\n               for applied MapGroups')
alaQoSMIBMapGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 25)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMapGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBMapGroupObjects = alaQoSMIBMapGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBMapGroupObjects.setDescription('Collections of objects providing information for MapGroups')
alaQoSMIBAppliedMapGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 26)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedMapGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedMapGroupObjects = alaQoSMIBAppliedMapGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedMapGroupObjects.setDescription('Collections of objects providing information\n               for applied MapGroups')
alaQoSMIBActionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 27)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSActionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionShared"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMaximumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAction8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAction8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapFrom"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapTo"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMapGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLoadBalanceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionLoadBalanceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionAlternateGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionAlternateGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionNocache"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPortdisable"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectAgg"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectAggStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorModeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCPUPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionCPUPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionColorOnly"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionMirrorChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpV6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpV6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionPermanentGatewayIpV6IfIndex"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRTCPMonitor"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRTCPMonitorStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRTCPDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRTCPDSCPStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTrustDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionTrustDSCPStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSActionRedirectModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBActionObjects = alaQoSMIBActionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBActionObjects.setDescription('Collections of objects providing information for Actions')
alaQoSMIBAppliedActionObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 28)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDisposition"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionShared"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMaximumDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedAction8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedAction8021pStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTos"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTosStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDscp"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionDscpStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapFrom"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapTo"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMapGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLoadBalanceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionLoadBalanceGroupStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionAlternateGatewayIpAddr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionAlternateGatewayIpAddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionNocache"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPortdisable"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectSlotStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectAgg"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectAggStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorPort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorMode"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorModeStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPIR"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPIRStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPBS"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPBSStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCPUPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionCPUPriorityStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionColorOnly"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRedirectChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionMirrorChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpV6Addr"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpV6AddrStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionPermanentGatewayIpV6IfIndex"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRTCPMonitor"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRTCPMonitorStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRTCPDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionRTCPDSCPStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTrustDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedActionTrustDSCPStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedActionObjects = alaQoSMIBAppliedActionObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedActionObjects.setDescription('Collections of objects providing information\n               for applied Actions')
alaQoSMIBPortObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 29)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSPortInterfaceType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortTrusted"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefault8021p"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultDSCP"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumDefaultDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortPhysicalBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortRowStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDefaultClassification"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngBandwidth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngBandwidthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngressDepth"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortMaximumIngressDepthStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDEIMarking"), ("ALCATEL-IND1-QOS-MIB", "alaQoSPortDEIMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBPortObjects = alaQoSMIBPortObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBPortObjects.setDescription('Collections of objects providing information for Ports')
alaQoSMIBConfigObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 30)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSConfigEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigTrustPorts"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigStatsInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogLines"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogLevel"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigLogConsole"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigForwardLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigClearLog"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigApply"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigRevert"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigStatsReset"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigFlush"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDebug"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigUserportFilter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedUserportFilter"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigUserportShutdown"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAppliedUserportShutdown"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigAutoPhones"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMPage"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMMACGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigQMPath"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDEIMapping"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigDEIMarking"), ("ALCATEL-IND1-QOS-MIB", "alaQoSConfigSwitchGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSVmSnooping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBConfigObjects = alaQoSMIBConfigObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBConfigObjects.setDescription('Collections of objects providing information for Configs')
alaQoSMIBStatsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 31)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSStatsSpoofedEvents"), ("ALCATEL-IND1-QOS-MIB", "alaQoSStatsNonSpoofedEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBStatsObjects = alaQoSMIBStatsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBStatsObjects.setDescription('Collections of objects providing information for Statss')
alaQoSMIBRuleGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 32)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleGroupsObjects = alaQoSMIBRuleGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleGroupsObjects.setDescription('Collections of objects providing information for RuleGroups')
alaQoSMIBAppliedRuleGroupsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 33)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsEnabled"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleGroupsObjects = alaQoSMIBAppliedRuleGroupsObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleGroupsObjects.setDescription('Collections of objects providing information\n               for applied RuleGroups')
alaQoSMIBRuleGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 34)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBRuleGroupObjects = alaQoSMIBRuleGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBRuleGroupObjects.setDescription('Collections of objects providing information for RuleGroups')
alaQoSMIBAppliedRuleGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 35)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupMatches"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupCountType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedRuleGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedRuleGroupObjects = alaQoSMIBAppliedRuleGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedRuleGroupObjects.setDescription('Collections of objects providing information\n               for applied RuleGroups')
alaQoSMIBValidityPeriodObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 36)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodDays"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodDaysStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodMonths"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodMonthsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodHour"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodHourStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodEndHour"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodIntervalStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodEndInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSValidityPeriodRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBValidityPeriodObjects = alaQoSMIBValidityPeriodObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBValidityPeriodObjects.setDescription('Collections of objects providing information\n               for Validity Periods')
alaQoSMIBAppliedValidityPeriodObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 37)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodSource"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodDays"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodDaysStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodMonths"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodMonthsStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodHour"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodHourStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodEndHour"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodIntervalStatus"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodEndInterval"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedValidityPeriodRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedValidityPeriodObjects = alaQoSMIBAppliedValidityPeriodObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedValidityPeriodObjects.setDescription('Collections of objects providing information\n               for applied Validity Periods')
alaQoSMIBDSCPGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 38)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSDSCPPriority"), ("ALCATEL-IND1-QOS-MIB", "alaQoSDSCPDropPrecedence"), ("ALCATEL-IND1-QOS-MIB", "alaQoSDSCPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBDSCPGroupObjects = alaQoSMIBDSCPGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBDSCPGroupObjects.setDescription('Collections of objects providing information\n               for DSCP Table')
alaQoSMIBAutoMacRangeGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 39)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAutoMacRangeStart"), ("ALCATEL-IND1-QOS-MIB", "alaQoSAutoMacRangeEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAutoMacRangeGroupObjects = alaQoSMIBAutoMacRangeGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAutoMacRangeGroupObjects.setDescription('Collections of objects providing information\n               for Auto Qos Mac Range Table')
alaQoSMIBV6NetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 40)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSV6NetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBV6NetworkGroupObjects = alaQoSMIBV6NetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBV6NetworkGroupObjects.setDescription('Collections of objects providing information for V6NetworkGroups')
alaQoSMIBAppliedV6NetworkGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 41)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSAppliedV6NetworkGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBAppliedV6NetworkGroupObjects = alaQoSMIBAppliedV6NetworkGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBAppliedV6NetworkGroupObjects.setDescription('Collections of objects providing information\n               for applied V6NetworkGroups')
alaQoSRuleExtendedObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 42)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleChassis"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleSlot"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRulePort"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRulePacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleGreenPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleYellowPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleRedPacketCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleGreenByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleYellowByteCount"), ("ALCATEL-IND1-QOS-MIB", "alaQoSExtendedRuleRedByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSRuleExtendedObjects = alaQoSRuleExtendedObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSRuleExtendedObjects.setDescription('Collections of objects providing information\n               for rule extended')
alaQoSIpNetworkSummaryGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 1, 43)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryProtocol"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummarySourceIpAddressType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummarySourceIpAddress"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryDestinationIpAddressType"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryDestinationIpAddress"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummarySourceGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryDestinationGroup"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryVrfName"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryAction"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryHitCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSIpNetworkSummaryGroupObjects = alaQoSIpNetworkSummaryGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaQoSIpNetworkSummaryGroupObjects.setDescription('Collections of objects providing information for Ip Network Summary.')
alaQoSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 22, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBConditionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedConditionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBServiceGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedServiceGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBNetworkGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedNetworkGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBNetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedNetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMACGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMACGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMACGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMACGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedPortGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedPortGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMapGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMapGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBMapGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedMapGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBActionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedActionObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBPortObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBConfigObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBStatsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleGroupsObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBRuleGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedRuleGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBValidityPeriodObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedValidityPeriodObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBDSCPGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAutoMacRangeGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBV6NetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSMIBAppliedV6NetworkGroupObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSRuleExtendedObjects"), ("ALCATEL-IND1-QOS-MIB", "alaQoSIpNetworkSummaryGroupObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQoSMIBCompliance = alaQoSMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaQoSMIBCompliance.setDescription('Compliance statement for QoS.')
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSConditionEthertypeStatus=alaQoSConditionEthertypeStatus, alaQoSMACGroupsStatus=alaQoSMACGroupsStatus, alaQoSConditionDscpMask=alaQoSConditionDscpMask, alaQoSValidityPeriodInterval=alaQoSValidityPeriodInterval, alaQoSAppliedServiceDestinationTcpPortEnd=alaQoSAppliedServiceDestinationTcpPortEnd, alaQoSAppliedRuleName=alaQoSAppliedRuleName, alaQoSServiceGroupServiceName=alaQoSServiceGroupServiceName, alaQoSAppliedMapGroupsTable=alaQoSAppliedMapGroupsTable, alaQoSAppliedRuleGroupsTable=alaQoSAppliedRuleGroupsTable, alaQoSMIBAppliedServiceObjects=alaQoSMIBAppliedServiceObjects, alaQoSAppliedConditionVmSourceIpv6IpMask=alaQoSAppliedConditionVmSourceIpv6IpMask, alaQoSAutoMacRangeEnd=alaQoSAutoMacRangeEnd, alaQoSAppliedValidityPeriodMonthsStatus=alaQoSAppliedValidityPeriodMonthsStatus, alaQoSAppliedServiceTable=alaQoSAppliedServiceTable, alaQoSAppliedConditionDestinationVlan=alaQoSAppliedConditionDestinationVlan, alaQoSConditionSourceNetworkGroupStatus=alaQoSConditionSourceNetworkGroupStatus, alaQoSAppliedConditionSourceVlanStatus=alaQoSAppliedConditionSourceVlanStatus, alaQoSAppliedValidityPeriodDaysStatus=alaQoSAppliedValidityPeriodDaysStatus, alaQoSMIBPortObjects=alaQoSMIBPortObjects, alaQoSAppliedConditionIpv6Traffic=alaQoSAppliedConditionIpv6Traffic, alaQoSServiceGroupTable=alaQoSServiceGroupTable, alaQoSConditionTcpFlags=alaQoSConditionTcpFlags, alaQoSConditionIcmpTypeStatus=alaQoSConditionIcmpTypeStatus, alaQoSPortMaximumIngBandwidthStatus=alaQoSPortMaximumIngBandwidthStatus, alaQoSServiceSourceUdpPortEnd=alaQoSServiceSourceUdpPortEnd, alaQoSAppliedConditionDscpStatus=alaQoSAppliedConditionDscpStatus, alaQoSAppliedConditionVmIpProtocol=alaQoSAppliedConditionVmIpProtocol, alaQoSAppliedConditionSourcePortGroup=alaQoSAppliedConditionSourcePortGroup, alaQoSAppliedRuleGroupsSource=alaQoSAppliedRuleGroupsSource, alaQoSRuleCondition=alaQoSRuleCondition, alaQoSAppliedConditionSourcePortGroupStatus=alaQoSAppliedConditionSourcePortGroupStatus, alaQoSRuleGroupCountType=alaQoSRuleGroupCountType, alaQoSActionDscpStatus=alaQoSActionDscpStatus, alaQoSAppliedConditionDestinationChassis=alaQoSAppliedConditionDestinationChassis, alaQoSPortDEIMapping=alaQoSPortDEIMapping, alaQoSAppliedServiceProtocol=alaQoSAppliedServiceProtocol, alaQoSPortMaximumIngressDepthStatus=alaQoSPortMaximumIngressDepthStatus, alaQoSAppliedNetworkGroupsTable=alaQoSAppliedNetworkGroupsTable, alaQoSAppliedConditionSourceTcpPortStatus=alaQoSAppliedConditionSourceTcpPortStatus, alaQoSRuleGroupsEnabled=alaQoSRuleGroupsEnabled, alaQoSActionAlternateGatewayIpAddrStatus=alaQoSActionAlternateGatewayIpAddrStatus, alaQoSAppliedConditionVrfNameStatus=alaQoSAppliedConditionVrfNameStatus, alaQoSActionRTCPDSCP=alaQoSActionRTCPDSCP, alaQoSPortGroupEntry=alaQoSPortGroupEntry, alaQoSAppliedRuleGroupTable=alaQoSAppliedRuleGroupTable, alaQoSConditionSourceMacGroup=alaQoSConditionSourceMacGroup, alaQoSAppliedConditionDscpEnd=alaQoSAppliedConditionDscpEnd, alaQoSConditionSourcePortGroupStatus=alaQoSConditionSourcePortGroupStatus, alaQoSAppliedConditionSourcePort=alaQoSAppliedConditionSourcePort, alaQoSPortReset=alaQoSPortReset, alaQoSConditionSourceMacAddrStatus=alaQoSConditionSourceMacAddrStatus, alaQoSConditionVxlanVni=alaQoSConditionVxlanVni, alaQoSMIBValidityPeriodObjects=alaQoSMIBValidityPeriodObjects, alaQoSConfigTrustPorts=alaQoSConfigTrustPorts, alaQoSConditionDestinationIpPort=alaQoSConditionDestinationIpPort, alaQoSMIBConformance=alaQoSMIBConformance, alaQoSConditionVrfNameStatus=alaQoSConditionVrfNameStatus, alaQoSPortGroupStatus=alaQoSPortGroupStatus, alaQoSAppliedActionMapGroupStatus=alaQoSAppliedActionMapGroupStatus, alaQoSAppliedRuleValidityPeriod=alaQoSAppliedRuleValidityPeriod, alaQoSAppliedMACGroupStatus=alaQoSAppliedMACGroupStatus, alaQoSConditionSourceUdpPortEnd=alaQoSConditionSourceUdpPortEnd, alaQoSAppliedV6NetworkGroupIpMask=alaQoSAppliedV6NetworkGroupIpMask, alaQoSRuleSource=alaQoSRuleSource, alaQoSExtendedRuleByteCount=alaQoSExtendedRuleByteCount, alaQoSAppliedActionShared=alaQoSAppliedActionShared, alaQoSConditionInnerSourceVlanStatus=alaQoSConditionInnerSourceVlanStatus, alaQoSAppliedNetworkGroupsStatus=alaQoSAppliedNetworkGroupsStatus, alaQoSAppliedConditionMulticastIpAddr=alaQoSAppliedConditionMulticastIpAddr, alaQoSAppliedValidityPeriodEndHour=alaQoSAppliedValidityPeriodEndHour, alaQoSAppliedServiceDestinationIpPortEnd=alaQoSAppliedServiceDestinationIpPortEnd, alaQoSConditionDestinationPortGroupStatus=alaQoSConditionDestinationPortGroupStatus, alaQoSNetworkGroupsName=alaQoSNetworkGroupsName, alaQoSDSCPTable=alaQoSDSCPTable, alaQoSConditionTable=alaQoSConditionTable, alaQoSAppliedConditionRowStatus=alaQoSAppliedConditionRowStatus, alaQoSRuleGroupPacketCount=alaQoSRuleGroupPacketCount, alaQoSV6NetworkGroupTable=alaQoSV6NetworkGroupTable, alaQoSNetworkGroupIpAddr=alaQoSNetworkGroupIpAddr, alaQoSRuleCountType=alaQoSRuleCountType, alaQoSConditionService=alaQoSConditionService, alaQoSAppliedConditionMulticastNetworkGroup=alaQoSAppliedConditionMulticastNetworkGroup, alaQoSAppliedMACGroupTable=alaQoSAppliedMACGroupTable, alaQoSAppliedPortGroupTable=alaQoSAppliedPortGroupTable, alaQoSAppliedActionTosStatus=alaQoSAppliedActionTosStatus, alaQoSRuleGroupsName=alaQoSRuleGroupsName, alaQoSConditionVxlanPortStatus=alaQoSConditionVxlanPortStatus, alaQoSAppliedV6NetworkGroupIpAddr=alaQoSAppliedV6NetworkGroupIpAddr, alaQoSAppliedNetworkGroupStatus=alaQoSAppliedNetworkGroupStatus, alaQoSAppliedConditionServiceStatus=alaQoSAppliedConditionServiceStatus, alaQoSAppliedValidityPeriodRowStatus=alaQoSAppliedValidityPeriodRowStatus, alaQoSAppliedConditionVxlanVni=alaQoSAppliedConditionVxlanVni, alaQoSConfigDEIMapping=alaQoSConfigDEIMapping, alaQoSServiceDestinationUdpPort=alaQoSServiceDestinationUdpPort, alaQoSAutoMacRangeStart=alaQoSAutoMacRangeStart, alaQoSMACGroupsEntry=alaQoSMACGroupsEntry, alaQoSMIBDSCPGroupObjects=alaQoSMIBDSCPGroupObjects, alaQoSPortDefaultClassification=alaQoSPortDefaultClassification, alaQoSConditionIpv6FlowLabel=alaQoSConditionIpv6FlowLabel, alaQoSAppliedRuleTable=alaQoSAppliedRuleTable, alaQoSAppliedActionMirrorChassis=alaQoSAppliedActionMirrorChassis, alaQoSAppliedRuleCountType=alaQoSAppliedRuleCountType, alaQoSRuleRedByteCount=alaQoSRuleRedByteCount, alaQoSAppliedConditionName=alaQoSAppliedConditionName, alaQoSAppliedActionNocache=alaQoSAppliedActionNocache, alaQoSConditionSourceIpAddrStatus=alaQoSConditionSourceIpAddrStatus, alaQoSAppliedConditionIcmpCode=alaQoSAppliedConditionIcmpCode, alaQoSIpNetworkSummaryEntry=alaQoSIpNetworkSummaryEntry, alaQoSAppliedRuleRowStatus=alaQoSAppliedRuleRowStatus, alaQoSConditionIpv6NHStatus=alaQoSConditionIpv6NHStatus, alaQoSAppliedActionMaximumBandwidth=alaQoSAppliedActionMaximumBandwidth, alaQoSCondition8021p=alaQoSCondition8021p, alaQoSAppliedRuleRedPacketCount=alaQoSAppliedRuleRedPacketCount, alaQoSMapGroupKeyEnd=alaQoSMapGroupKeyEnd, alaQoSAppliedConditionEntry=alaQoSAppliedConditionEntry, alaQoSAppliedActionMirrorModeStatus=alaQoSAppliedActionMirrorModeStatus, alaQoSMIBMapGroupObjects=alaQoSMIBMapGroupObjects, alaQoSPortSlot=alaQoSPortSlot, alaQoSMIBCompliance=alaQoSMIBCompliance, alaQoSServiceSourceTcpPortEnd=alaQoSServiceSourceTcpPortEnd, alaQoSNetworkGroupEntry=alaQoSNetworkGroupEntry, alaQoSAppliedValidityPeriodIntervalStatus=alaQoSAppliedValidityPeriodIntervalStatus, alaQoSActionMapGroup=alaQoSActionMapGroup, alaQoSAppliedConditionTable=alaQoSAppliedConditionTable, alaQoSMIBV6NetworkGroupObjects=alaQoSMIBV6NetworkGroupObjects, alaQoSRuleGreenPacketCount=alaQoSRuleGreenPacketCount, alaQoSAppliedActionTrustDSCP=alaQoSAppliedActionTrustDSCP, alaQoSMIBConfigObjects=alaQoSMIBConfigObjects, alaQoSAppliedConditionSourceVlan=alaQoSAppliedConditionSourceVlan, alaQoSServiceSourceTcpPortStatus=alaQoSServiceSourceTcpPortStatus, alaQoSActionMirrorChassis=alaQoSActionMirrorChassis, alaQoSConditionMulticastIpMask=alaQoSConditionMulticastIpMask, alaQoSAppliedActionRedirectPort=alaQoSAppliedActionRedirectPort, alaQoSAppliedActionPBS=alaQoSAppliedActionPBS, alaQoSConditionDPIAppGroupStatus=alaQoSConditionDPIAppGroupStatus, alaQoSRuleGroupTable=alaQoSRuleGroupTable, alaQoSAppliedConditionFragments=alaQoSAppliedConditionFragments, alaQoSActionRedirectChassis=alaQoSActionRedirectChassis, alaQoSConfigAutoPhones=alaQoSConfigAutoPhones, alaQoSExtendedRuleRedByteCount=alaQoSExtendedRuleRedByteCount, alaQoSActionMapTo=alaQoSActionMapTo, alaQoSAppliedRulePrecedence=alaQoSAppliedRulePrecedence, alaQoSAppliedConditionTosStatus=alaQoSAppliedConditionTosStatus, alaQoSAppliedConditionTcpFlagsValStatus=alaQoSAppliedConditionTcpFlagsValStatus, alaQoSConditionSource=alaQoSConditionSource, alaQoSConditionDestinationNetworkGroup=alaQoSConditionDestinationNetworkGroup, alaQoSConfigLogLevel=alaQoSConfigLogLevel, alaQoSAppliedConditionDestinationVlanStatus=alaQoSAppliedConditionDestinationVlanStatus, alaQoSAppliedServiceSource=alaQoSAppliedServiceSource, alaQoSAppliedConditionSourceIpv6Addr=alaQoSAppliedConditionSourceIpv6Addr, alaQoSValidityPeriodIntervalStatus=alaQoSValidityPeriodIntervalStatus, alaQoSAppliedConditionVrfName=alaQoSAppliedConditionVrfName, alaQoSPortDefault8021p=alaQoSPortDefault8021p, alaQoSMIBServiceObjects=alaQoSMIBServiceObjects, alaQoSConditionServiceStatus=alaQoSConditionServiceStatus, alaQoSServiceDestinationUdpPortStatus=alaQoSServiceDestinationUdpPortStatus, alaQoSAppliedConditionAppFpGroup=alaQoSAppliedConditionAppFpGroup, alaQoSServiceGroupsSource=alaQoSServiceGroupsSource, alaQoSConditionDestinationPort=alaQoSConditionDestinationPort, alaQoSMapGroupsTable=alaQoSMapGroupsTable, alaQosConditionVmL4SourcePort=alaQosConditionVmL4SourcePort, alaQoSConfigUserportShutdown=alaQoSConfigUserportShutdown, alaQoSPortDefaultDSCP=alaQoSPortDefaultDSCP, alaQoSPortMaximumIngBandwidth=alaQoSPortMaximumIngBandwidth, alaQoSAppliedServiceDestinationIpPort=alaQoSAppliedServiceDestinationIpPort, alaQoSPortPort=alaQoSPortPort, alaQoSPortGroupsEntry=alaQoSPortGroupsEntry, alaQoSRuleTrapEvents=alaQoSRuleTrapEvents, alaQoSConditionSourceUdpPortStatus=alaQoSConditionSourceUdpPortStatus, alaQoSMapGroupValue=alaQoSMapGroupValue, alaQoSPortEntry=alaQoSPortEntry, alaQoSConditionDestinationMacMask=alaQoSConditionDestinationMacMask, alaQoSAppliedConditionSourceMacGroup=alaQoSAppliedConditionSourceMacGroup, alaQoSMIBAppliedConditionObjects=alaQoSMIBAppliedConditionObjects, alaQoSAppliedConditionSourceUdpPort=alaQoSAppliedConditionSourceUdpPort, alaQoSConditionDestinationTcpPortStatus=alaQoSConditionDestinationTcpPortStatus, alaQoSAppliedNetworkGroupsSource=alaQoSAppliedNetworkGroupsSource, alaQoSAppliedRuleAction=alaQoSAppliedRuleAction, alaQoSAppliedAction8021p=alaQoSAppliedAction8021p, alaQoSMACGroupEntry=alaQoSMACGroupEntry, alaQoSActionCPUPriorityStatus=alaQoSActionCPUPriorityStatus, alaQoSActionMapGroupStatus=alaQoSActionMapGroupStatus, alaQoSValidityPeriodHour=alaQoSValidityPeriodHour, alaQoSMapGroupsStatus=alaQoSMapGroupsStatus, alaQoSConditionEthertype=alaQoSConditionEthertype, alaQoSExtendedRulePort=alaQoSExtendedRulePort, alaQoSMIBMapGroupsObjects=alaQoSMIBMapGroupsObjects, alaQoSAppliedConditionDestinationIpMask=alaQoSAppliedConditionDestinationIpMask, alaQoSConditionVmSourceIpAddr=alaQoSConditionVmSourceIpAddr, alaQoSPortRowStatus=alaQoSPortRowStatus, alaQoSConditionVxlanPort=alaQoSConditionVxlanPort, alaQoSAppliedRuleDefaultList=alaQoSAppliedRuleDefaultList, alaQoSConditionVmSourceMacMask=alaQoSConditionVmSourceMacMask, alaQoSConditionDestinationNetworkGroupStatus=alaQoSConditionDestinationNetworkGroupStatus, alaQoSAppliedConditionDestinationUdpPortEnd=alaQoSAppliedConditionDestinationUdpPortEnd, alaQoSAppliedRuleGroupsEntry=alaQoSAppliedRuleGroupsEntry, alaQoSExtendedRuleChassis=alaQoSExtendedRuleChassis, alaQoSAppliedConditionVxlanVniStatus=alaQoSAppliedConditionVxlanVniStatus, alaQoSServiceSourceUdpPortStatus=alaQoSServiceSourceUdpPortStatus, alaQoSMapGroupStatus=alaQoSMapGroupStatus, alaQoSAppliedConditionService=alaQoSAppliedConditionService, alaQoSMACGroupsSource=alaQoSMACGroupsSource, alaQoSAppliedServiceDestinationUdpPortEnd=alaQoSAppliedServiceDestinationUdpPortEnd, alaQoSAppliedMACGroupEntry=alaQoSAppliedMACGroupEntry, alaQoSIpNetworkSummaryDestinationGroup=alaQoSIpNetworkSummaryDestinationGroup, alaQoSMIBMACGroupObjects=alaQoSMIBMACGroupObjects, alaQoSMIBObjects=alaQoSMIBObjects, alaQoSConditionTosStatus=alaQoSConditionTosStatus, alaQoSConditionDestinationIpPortStatus=alaQoSConditionDestinationIpPortStatus, alaQoSAppliedPortGroupSlot=alaQoSAppliedPortGroupSlot, alaQoSAppliedActionPIRStatus=alaQoSAppliedActionPIRStatus, alaQoSConfigQMPath=alaQoSConfigQMPath, alaQoSServiceSourceIpPort=alaQoSServiceSourceIpPort, alaQoSMIBRuleGroupObjects=alaQoSMIBRuleGroupObjects, alaQoSRuleEnforced=alaQoSRuleEnforced, alaQoSPortGroupsStatus=alaQoSPortGroupsStatus, alaQoSAction8021pStatus=alaQoSAction8021pStatus, alaQoSActionPortdisable=alaQoSActionPortdisable, alaQoSMACGroupMacMask=alaQoSMACGroupMacMask, alaQoSRulePrecedence=alaQoSRulePrecedence, alaQoSMapGroupEntry=alaQoSMapGroupEntry, alaQoSRuleRowStatus=alaQoSRuleRowStatus, alaQoSAppliedActionPIR=alaQoSAppliedActionPIR, alaQoSServiceDestinationTcpPortStatus=alaQoSServiceDestinationTcpPortStatus, alaQoSAppliedActionMapTo=alaQoSAppliedActionMapTo, alaQoSValidityPeriodRowStatus=alaQoSValidityPeriodRowStatus, alaQoSMIBAppliedRuleGroupObjects=alaQoSMIBAppliedRuleGroupObjects, alaQoSConditionDestinationTcpPortEnd=alaQoSConditionDestinationTcpPortEnd, alaQoSConditionName=alaQoSConditionName, alaQoSConditionDestinationVlanStatus=alaQoSConditionDestinationVlanStatus, alaQoSAppliedConditionTcpFlagsMask=alaQoSAppliedConditionTcpFlagsMask, alaQoSServiceGroupsStatus=alaQoSServiceGroupsStatus, alaQoSAppliedValidityPeriodSource=alaQoSAppliedValidityPeriodSource, alaQoSConditionIpv6FlowLabelStatus=alaQoSConditionIpv6FlowLabelStatus, alaQoSAppliedPortGroupsName=alaQoSAppliedPortGroupsName, alaQoSAppliedConditionInner8021pStatus=alaQoSAppliedConditionInner8021pStatus, alaQoSRuleEnabled=alaQoSRuleEnabled, alaQoSRuleGroupStatus=alaQoSRuleGroupStatus, alaQoSConfigStatsReset=alaQoSConfigStatsReset, alaQoSConditionDPIAppName=alaQoSConditionDPIAppName, alaQoSConditionSourcePort=alaQoSConditionSourcePort, alaQoSAppliedActionPermanentGatewayIpAddrStatus=alaQoSAppliedActionPermanentGatewayIpAddrStatus, alaQoSAppliedActionPriorityStatus=alaQoSAppliedActionPriorityStatus, alaQoSAppliedConditionDestinationNetworkGroupStatus=alaQoSAppliedConditionDestinationNetworkGroupStatus, alaQoSAppliedConditionDestinationUdpPortStatus=alaQoSAppliedConditionDestinationUdpPortStatus, alaQoSValidityPeriodSource=alaQoSValidityPeriodSource, alaQoSAppliedConditionVmSourceMacAddr=alaQoSAppliedConditionVmSourceMacAddr, alaQoSAppliedConditionDestinationMacAddrStatus=alaQoSAppliedConditionDestinationMacAddrStatus, alaQoSAppliedRuleGroupPacketCount=alaQoSAppliedRuleGroupPacketCount, alaQoSMIBGroups=alaQoSMIBGroups, alaQoSActionShared=alaQoSActionShared, alaQoSConditionSourceIpPort=alaQoSConditionSourceIpPort, alaQoSAppliedRulePacketCount=alaQoSAppliedRulePacketCount, alaQoSAppliedConditionSourceTcpPortEnd=alaQoSAppliedConditionSourceTcpPortEnd)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQosConditionVmL4DestPort=alaQosConditionVmL4DestPort, alaQoSActionNocache=alaQoSActionNocache, alaQoSAppliedRuleRedByteCount=alaQoSAppliedRuleRedByteCount, alaQoSDSCPDropPrecedence=alaQoSDSCPDropPrecedence, alaQoSRuleGroupRuleName=alaQoSRuleGroupRuleName, alaQoSAppliedConditionVmSourceIpMask=alaQoSAppliedConditionVmSourceIpMask, alaQoSNetworkGroupsEntry=alaQoSNetworkGroupsEntry, alaQoSConditionTcpFlagsMaskStatus=alaQoSConditionTcpFlagsMaskStatus, alaQoSMapGroupsSource=alaQoSMapGroupsSource, alaQoSActionLoadBalanceGroup=alaQoSActionLoadBalanceGroup, alaQoSAppliedConditionSourceIpv6AddrStatus=alaQoSAppliedConditionSourceIpv6AddrStatus, alaQoSActionPBSStatus=alaQoSActionPBSStatus, alaQoSIpNetworkSummaryProtocol=alaQoSIpNetworkSummaryProtocol, alaQoSAppliedConditionMulticastNetworkGroupStatus=alaQoSAppliedConditionMulticastNetworkGroupStatus, alaQoSConditionDestinationChassis=alaQoSConditionDestinationChassis, alaQoSAppliedConditionDestinationNetworkGroup=alaQoSAppliedConditionDestinationNetworkGroup, alaQoSAppliedConditionVxlanPort=alaQoSAppliedConditionVxlanPort, alaQosAppliedConditionVxlanStatus=alaQosAppliedConditionVxlanStatus, alaQoSAppliedNetworkGroupIpMask=alaQoSAppliedNetworkGroupIpMask, alaQoSAppliedConditionIcmpTypeStatus=alaQoSAppliedConditionIcmpTypeStatus, alaQoSAppliedConditionSourceTcpPort=alaQoSAppliedConditionSourceTcpPort, alaQoSAppliedConditionSourcePortSplitGroup=alaQoSAppliedConditionSourcePortSplitGroup, alaQoSServiceProtocol=alaQoSServiceProtocol, alaQoSAppliedActionPortdisable=alaQoSAppliedActionPortdisable, alaQoSActionTrustDSCPStatus=alaQoSActionTrustDSCPStatus, alaQoSRuleDefaultList=alaQoSRuleDefaultList, alaQoSAppliedConditionVxlanPortStatus=alaQoSAppliedConditionVxlanPortStatus, alaQoSActionRedirectAggStatus=alaQoSActionRedirectAggStatus, alaQoSAppliedActionRedirectAgg=alaQoSAppliedActionRedirectAgg, alaQoSActionPIR=alaQoSActionPIR, alaQoSAppliedActionRedirectSlot=alaQoSAppliedActionRedirectSlot, alaQoSMIBRuleObjects=alaQoSMIBRuleObjects, alaQoSConditionSourceSlotStatus=alaQoSConditionSourceSlotStatus, alaQoSAppliedPortGroupEntry=alaQoSAppliedPortGroupEntry, alaQoSMIBAppliedNetworkGroupObjects=alaQoSMIBAppliedNetworkGroupObjects, alaQoSAppliedActionDisposition=alaQoSAppliedActionDisposition, alaQoSAppliedConditionDestinationUdpPort=alaQoSAppliedConditionDestinationUdpPort, alaQoSPortInterfaceType=alaQoSPortInterfaceType, alaQoSConditionVxlanVniStatus=alaQoSConditionVxlanVniStatus, alaQoSPortMaximumIngressDepth=alaQoSPortMaximumIngressDepth, alaQoSIpNetworkSummaryDestinationIpAddressType=alaQoSIpNetworkSummaryDestinationIpAddressType, alaQoSAppliedMapGroupsSource=alaQoSAppliedMapGroupsSource, alaQoSConditionTosMask=alaQoSConditionTosMask, alaQoSConditionDestinationIpv6Addr=alaQoSConditionDestinationIpv6Addr, alaQoSAppliedRuleByteCount=alaQoSAppliedRuleByteCount, alaQoSAppliedConditionDestinationIpAddr=alaQoSAppliedConditionDestinationIpAddr, alaQoSConditionDestinationMacAddr=alaQoSConditionDestinationMacAddr, alaQoSAppliedMapGroupValue=alaQoSAppliedMapGroupValue, alaQoSConfigForwardLog=alaQoSConfigForwardLog, alaQoSRulePacketCount=alaQoSRulePacketCount, alaQoSV6NetworkGroupIpMask=alaQoSV6NetworkGroupIpMask, alaQoSAppliedValidityPeriodEndInterval=alaQoSAppliedValidityPeriodEndInterval, alaQoSConditionVmIpProtocolStatus=alaQoSConditionVmIpProtocolStatus, alaQoSConditionSourceChassis=alaQoSConditionSourceChassis, alaQoSAppliedConditionMcastIpv6AddrStatus=alaQoSAppliedConditionMcastIpv6AddrStatus, alaQoSPortMaximumDefaultDepth=alaQoSPortMaximumDefaultDepth, alaQoSRuleGroupsTable=alaQoSRuleGroupsTable, alaQoSAppliedRuleSave=alaQoSAppliedRuleSave, alaQoSAppliedActionPermanentGatewayIpV6Addr=alaQoSAppliedActionPermanentGatewayIpV6Addr, alaQoSServiceGroupsName=alaQoSServiceGroupsName, alaQoSNetworkGroupTable=alaQoSNetworkGroupTable, alaQoSActionRowStatus=alaQoSActionRowStatus, alaQoSConditionSourceSlot=alaQoSConditionSourceSlot, alaQoSConfigAppliedUserportFilter=alaQoSConfigAppliedUserportFilter, alaQoSAppliedActionRedirectAggStatus=alaQoSAppliedActionRedirectAggStatus, alaQoSValidityPeriodTable=alaQoSValidityPeriodTable, alaQoSPortGroupPort=alaQoSPortGroupPort, alaQoSAppliedServiceSourceUdpPort=alaQoSAppliedServiceSourceUdpPort, alaQoSAppliedActionCIRStatus=alaQoSAppliedActionCIRStatus, alaQoSConditionEntry=alaQoSConditionEntry, alaQoSAppliedConditionSourceIpAddr=alaQoSAppliedConditionSourceIpAddr, alaQoSIpNetworkSummarySourceIpAddressType=alaQoSIpNetworkSummarySourceIpAddressType, alaQoSMIBAppliedPortGroupObjects=alaQoSMIBAppliedPortGroupObjects, alaQoSAppliedConditionDPIAppGrp=alaQoSAppliedConditionDPIAppGrp, alaQoSAppliedServiceSourceIpPortStatus=alaQoSAppliedServiceSourceIpPortStatus, alaQoSActionRedirectModule=alaQoSActionRedirectModule, alaQoSAppliedMACGroupMacMask=alaQoSAppliedMACGroupMacMask, alaQoSNetworkGroupIpMask=alaQoSNetworkGroupIpMask, alaQoSRuleRedPacketCount=alaQoSRuleRedPacketCount, alaQoSConditionDestinationIpAddrStatus=alaQoSConditionDestinationIpAddrStatus, alaQoSAppliedServiceGroupsTable=alaQoSAppliedServiceGroupsTable, alaQoSValidityPeriodHourStatus=alaQoSValidityPeriodHourStatus, alaQoSAppliedConditionSourceIpPortEnd=alaQoSAppliedConditionSourceIpPortEnd, alaQoSMIBAppliedRuleGroupsObjects=alaQoSMIBAppliedRuleGroupsObjects, alaQoSAppliedActionLoadBalanceGroup=alaQoSAppliedActionLoadBalanceGroup, alaQoSConfigReset=alaQoSConfigReset, alaQoSAction8021p=alaQoSAction8021p, alaQoSConditionMulticastIpAddrStatus=alaQoSConditionMulticastIpAddrStatus, alaQoSAppliedConditionDestinationSlotStatus=alaQoSAppliedConditionDestinationSlotStatus, alaQoSMIB=alaQoSMIB, alaQoSRuleLogInterval=alaQoSRuleLogInterval, alaQoSAppliedActionTos=alaQoSAppliedActionTos, alaQoSAppliedConditionSourceMacGroupStatus=alaQoSAppliedConditionSourceMacGroupStatus, alaQoSExtendedRuleEntry=alaQoSExtendedRuleEntry, alaQoSActionTos=alaQoSActionTos, alaQoSAutoMacRangeIndex=alaQoSAutoMacRangeIndex, alaQoSIpNetworkSummaryGroupObjects=alaQoSIpNetworkSummaryGroupObjects, alaQoSActionPermanentGatewayIpV6IfIndex=alaQoSActionPermanentGatewayIpV6IfIndex, alaQoSAppliedActionMirrorMode=alaQoSAppliedActionMirrorMode, alaQoSPortGroupPortEnd=alaQoSPortGroupPortEnd, alaQoSActionPBS=alaQoSActionPBS, alaQoSAppliedConditionServiceGroupStatus=alaQoSAppliedConditionServiceGroupStatus, alaQoSConditionInner8021pStatus=alaQoSConditionInner8021pStatus, alaQoSConditionDestinationUdpPortEnd=alaQoSConditionDestinationUdpPortEnd, alaQoSConditionIpv6Traffic=alaQoSConditionIpv6Traffic, alaQoSConfigClearLog=alaQoSConfigClearLog, alaQoSConditionDscp=alaQoSConditionDscp, alaQoSServiceTable=alaQoSServiceTable, alaQoSV6NetworkGroupStatus=alaQoSV6NetworkGroupStatus, alaQoSIpNetworkSummarySourceIpAddress=alaQoSIpNetworkSummarySourceIpAddress, alaQoSConfigRevert=alaQoSConfigRevert, alaQoSConditionDestinationUdpPortStatus=alaQoSConditionDestinationUdpPortStatus, alaQoSActionRTCPDSCPStatus=alaQoSActionRTCPDSCPStatus, alaQoSMIBCompliances=alaQoSMIBCompliances, alaQoSAppliedActionSource=alaQoSAppliedActionSource, alaQosConditionVmL4DestPortStatus=alaQosConditionVmL4DestPortStatus, alaQoSActionCIRStatus=alaQoSActionCIRStatus, alaQoSConditionTcpFlagsMask=alaQoSConditionTcpFlagsMask, alaQoSMapGroupsName=alaQoSMapGroupsName, alaQoSAppliedMapGroupsName=alaQoSAppliedMapGroupsName, alaQoSServiceDestinationIpPortStatus=alaQoSServiceDestinationIpPortStatus, alaQoSAppliedServiceGroupsSource=alaQoSAppliedServiceGroupsSource, alaQoSAppliedNetworkGroupTable=alaQoSAppliedNetworkGroupTable, alaQoSServiceName=alaQoSServiceName, alaQoSPortGroupsTable=alaQoSPortGroupsTable, alaQoSDSCPPriority=alaQoSDSCPPriority, alaQoSAppliedConditionEthertypeStatus=alaQoSAppliedConditionEthertypeStatus, alaQoSAppliedNetworkGroupsName=alaQoSAppliedNetworkGroupsName, alaQoSAppliedRuleGroupEntry=alaQoSAppliedRuleGroupEntry, alaQoSConditionSourceIpPortStatus=alaQoSConditionSourceIpPortStatus, alaQoSAppliedConditionVmIpProtocolStatus=alaQoSAppliedConditionVmIpProtocolStatus, alaQoSConditionIcmpType=alaQoSConditionIcmpType, alaQoSAppliedConditionIpProtocolStatus=alaQoSAppliedConditionIpProtocolStatus, alaQoSAppliedConditionTcpEstablished=alaQoSAppliedConditionTcpEstablished, alaQoSAppliedActionRowStatus=alaQoSAppliedActionRowStatus, alaQoSAppliedConditionSourceIpAddrStatus=alaQoSAppliedConditionSourceIpAddrStatus, alaQoSConditionSourceUdpPort=alaQoSConditionSourceUdpPort, alaQoSConditionSourceIpv6Mask=alaQoSConditionSourceIpv6Mask, alaQoSAppliedConditionDestinationPortGroupStatus=alaQoSAppliedConditionDestinationPortGroupStatus, alaQoSAppliedMACGroupsTable=alaQoSAppliedMACGroupsTable, alaQoSAppliedConditionMulticastIpMask=alaQoSAppliedConditionMulticastIpMask, alaQoSAppliedRuleGroupsEnabled=alaQoSAppliedRuleGroupsEnabled, alaQoSIpNetworkSummaryHitCount=alaQoSIpNetworkSummaryHitCount, alaQoSAppliedPortGroupsStatus=alaQoSAppliedPortGroupsStatus, alaQoSConditionIpv6NH=alaQoSConditionIpv6NH, alaQoSAppliedRuleEnforced=alaQoSAppliedRuleEnforced, alaQoSServiceSource=alaQoSServiceSource, alaQoSRuleGroupsType=alaQoSRuleGroupsType, alaQoSValidityPeriodName=alaQoSValidityPeriodName, alaQoSAppliedConditionVmSourceIpAddr=alaQoSAppliedConditionVmSourceIpAddr, alaQoSAppliedConditionVmSourceIpv6IpAddr=alaQoSAppliedConditionVmSourceIpv6IpAddr, alaQoSAppliedServiceDestinationUdpPort=alaQoSAppliedServiceDestinationUdpPort, alaQoSAppliedActionEntry=alaQoSAppliedActionEntry, alaQoSPortMaximumDefaultDepthStatus=alaQoSPortMaximumDefaultDepthStatus, alaQoSPortMaximumBandwidthStatus=alaQoSPortMaximumBandwidthStatus, alaQoSAppliedRuleReflexive=alaQoSAppliedRuleReflexive, alaQoSConfigUserportFilter=alaQoSConfigUserportFilter, alaQoSExtendedRuleSlot=alaQoSExtendedRuleSlot, alaQoSAppliedConditionTcpFlagsStatus=alaQoSAppliedConditionTcpFlagsStatus, alaQoSAppliedConditionEthertype=alaQoSAppliedConditionEthertype, alaQoSValidityPeriodEndHour=alaQoSValidityPeriodEndHour, alaQoSAppliedServiceDestinationUdpPortStatus=alaQoSAppliedServiceDestinationUdpPortStatus, alaQoSAppliedConditionSourceIpPortStatus=alaQoSAppliedConditionSourceIpPortStatus, alaQoSAppliedRuleGroupStatus=alaQoSAppliedRuleGroupStatus, alaQoSAppliedConditionDestinationTcpPortStatus=alaQoSAppliedConditionDestinationTcpPortStatus, alaQoSAppliedServiceDestinationIpPortStatus=alaQoSAppliedServiceDestinationIpPortStatus, alaQoSAppliedConditionSourceIpPort=alaQoSAppliedConditionSourceIpPort, alaQoSRuleGroupsSource=alaQoSRuleGroupsSource, alaQoSRuleLog=alaQoSRuleLog, alaQoSAppliedConditionDestinationMacGroupStatus=alaQoSAppliedConditionDestinationMacGroupStatus, alaQoSConditionMulticastNetworkGroupStatus=alaQoSConditionMulticastNetworkGroupStatus, alaQoSConditionRowStatus=alaQoSConditionRowStatus, alaQoSMIBConditionObjects=alaQoSMIBConditionObjects, alaQoSPortPhysicalBandwidth=alaQoSPortPhysicalBandwidth, alaQoSMIBActionObjects=alaQoSMIBActionObjects, alaQosAppliedConditionVmL4SourcePort=alaQosAppliedConditionVmL4SourcePort, alaQoSIpNetworkSummaryDestinationIpAddress=alaQoSIpNetworkSummaryDestinationIpAddress, alaQoSConditionDestinationIpv6Mask=alaQoSConditionDestinationIpv6Mask, alaQoSAppliedConditionTos=alaQoSAppliedConditionTos, alaQoSAppliedMapGroupsStatus=alaQoSAppliedMapGroupsStatus, alaQoSMIBServiceGroupObjects=alaQoSMIBServiceGroupObjects, alaQoSAppliedActionPermanentGatewayIpV6IfIndex=alaQoSAppliedActionPermanentGatewayIpV6IfIndex, alaQoSMIBAppliedMACGroupObjects=alaQoSMIBAppliedMACGroupObjects, alaQoSStatsSpoofedEvents=alaQoSStatsSpoofedEvents, alaQoSActionCPUPriority=alaQoSActionCPUPriority, alaQoSConditionDestinationSlot=alaQoSConditionDestinationSlot, alaQoSAppliedServiceGroupsStatus=alaQoSAppliedServiceGroupsStatus, alaQoSServiceDestinationUdpPortEnd=alaQoSServiceDestinationUdpPortEnd, alaQoSServiceSourceTcpPort=alaQoSServiceSourceTcpPort, alaQoSAppliedActionCBSStatus=alaQoSAppliedActionCBSStatus, alaQoSPortTrusted=alaQoSPortTrusted, alaQoSConditionSIP=alaQoSConditionSIP, alaQoSAppliedConditionDestinationPort=alaQoSAppliedConditionDestinationPort, alaQoSAppliedActionTable=alaQoSAppliedActionTable, alaQoSAppliedNetworkGroupEntry=alaQoSAppliedNetworkGroupEntry, alaQoSAppliedRuleGroupsStatus=alaQoSAppliedRuleGroupsStatus, alaQoSConditionSourceNetworkGroup=alaQoSConditionSourceNetworkGroup, alaQoSAppliedPortGroupsSource=alaQoSAppliedPortGroupsSource, alaQoSAppliedRuleGroupsType=alaQoSAppliedRuleGroupsType, alaQoSConditionSourceIpPortEnd=alaQoSConditionSourceIpPortEnd, alaQoSActionColorOnly=alaQoSActionColorOnly, alaQoSAppliedRuleCondition=alaQoSAppliedRuleCondition, alaQoSConditionAppFpGroup=alaQoSConditionAppFpGroup, alaQoSMIBPortGroupObjects=alaQoSMIBPortGroupObjects, alaQoSConditionServiceGroupStatus=alaQoSConditionServiceGroupStatus, alaQoSConditionMcastIpv6AddrStatus=alaQoSConditionMcastIpv6AddrStatus, alaQoSActionRedirectPort=alaQoSActionRedirectPort, alaQoSAppliedValidityPeriodEntry=alaQoSAppliedValidityPeriodEntry, alaQoSNetworkGroupsSource=alaQoSNetworkGroupsSource, alaQoSValidityPeriodDays=alaQoSValidityPeriodDays, alaQoSAppliedServiceGroupTable=alaQoSAppliedServiceGroupTable, alaQoSConfigStatsInterval=alaQoSConfigStatsInterval, alaQoSConfigEnabled=alaQoSConfigEnabled, alaQoSAppliedConditionVmSourceMacAddrStatus=alaQoSAppliedConditionVmSourceMacAddrStatus, alaQoSV6NetworkGroupEntry=alaQoSV6NetworkGroupEntry, alaQoSConditionDPIGrpName=alaQoSConditionDPIGrpName, alaQosConditionVmL4SourcePortStatus=alaQosConditionVmL4SourcePortStatus, alaQoSAppliedConditionSourceSlotStatus=alaQoSAppliedConditionSourceSlotStatus, alaQoSAppliedActionCBS=alaQoSAppliedActionCBS, alaQoSRuleGroupsStatus=alaQoSRuleGroupsStatus, alaQoSRuleGroupEntry=alaQoSRuleGroupEntry, alaQoSRuleSave=alaQoSRuleSave, alaQoSConditionIpProtocolStatus=alaQoSConditionIpProtocolStatus, alaQoSConditionDestinationPortEnd=alaQoSConditionDestinationPortEnd, alaQoSValidityPeriodEntry=alaQoSValidityPeriodEntry, alaQoSConditionFragments=alaQoSConditionFragments, alaQoSServiceSourceIpPortEnd=alaQoSServiceSourceIpPortEnd, alaQoSAppliedActionAlternateGatewayIpAddrStatus=alaQoSAppliedActionAlternateGatewayIpAddrStatus, alaQoSNetworkGroupsTable=alaQoSNetworkGroupsTable, alaQoSAppliedRuleGroupRuleName=alaQoSAppliedRuleGroupRuleName, alaQoSRuleTable=alaQoSRuleTable, alaQoSActionRedirectSlotStatus=alaQoSActionRedirectSlotStatus, alaQoSRuleGroupsEntry=alaQoSRuleGroupsEntry, alaQoSAppliedValidityPeriodTable=alaQoSAppliedValidityPeriodTable, alaQoSConditionDPIAppNameStatus=alaQoSConditionDPIAppNameStatus, alaQoSAppliedConditionSourceChassis=alaQoSAppliedConditionSourceChassis, alaQoSRuleByteCount=alaQoSRuleByteCount, alaQoSConditionDestinationTcpPort=alaQoSConditionDestinationTcpPort, alaQoSConditionTos=alaQoSConditionTos, alaQoSAppliedNetworkGroupIpAddr=alaQoSAppliedNetworkGroupIpAddr, alaQoSActionTosStatus=alaQoSActionTosStatus, alaQoSRuleReflexive=alaQoSRuleReflexive, alaQoSAppliedActionMapGroup=alaQoSAppliedActionMapGroup, alaQoSMIBAppliedV6NetworkGroupObjects=alaQoSMIBAppliedV6NetworkGroupObjects, alaQoSRuleGroupMatches=alaQoSRuleGroupMatches, alaQoSAppliedConditionSourcePortEnd=alaQoSAppliedConditionSourcePortEnd, alaQoSAppliedServiceGroupsName=alaQoSAppliedServiceGroupsName, alaQoSAppliedConditionDestinationIpv6Addr=alaQoSAppliedConditionDestinationIpv6Addr, alaQoSAppliedConditionSourceUdpPortStatus=alaQoSAppliedConditionSourceUdpPortStatus, alaQoSConditionMulticastIpAddr=alaQoSConditionMulticastIpAddr, alaQoSAppliedRuleGroupsName=alaQoSAppliedRuleGroupsName, alaQoSConditionSourceTcpPort=alaQoSConditionSourceTcpPort, alaQoSAppliedServiceName=alaQoSAppliedServiceName, alaQoSActionRedirectSlot=alaQoSActionRedirectSlot)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSAppliedConditionDscpMask=alaQoSAppliedConditionDscpMask, alaQoSAppliedActionMaximumBandwidthStatus=alaQoSAppliedActionMaximumBandwidthStatus, alaQoSMACGroupStatus=alaQoSMACGroupStatus, alaQoSConditionTcpFlagsStatus=alaQoSConditionTcpFlagsStatus, alaQoSAppliedConditionSIPStatus=alaQoSAppliedConditionSIPStatus, alaQoSNetworkGroupsStatus=alaQoSNetworkGroupsStatus, alaQoSActionMaximumBandwidthStatus=alaQoSActionMaximumBandwidthStatus, alaQoSAppliedRuleGroupCountType=alaQoSAppliedRuleGroupCountType, alaQoSAppliedConditionIpv6NHStatus=alaQoSAppliedConditionIpv6NHStatus, alaQoSPortMaximumBandwidth=alaQoSPortMaximumBandwidth, alaQoSAppliedServiceGroupsEntry=alaQoSAppliedServiceGroupsEntry, alaQoSMIBNetworkGroupsObjects=alaQoSMIBNetworkGroupsObjects, alaQoSExtendedRuleSplitRuleID=alaQoSExtendedRuleSplitRuleID, alaQoSAppliedServiceSourceTcpPort=alaQoSAppliedServiceSourceTcpPort, alaQoSConditionIcmpCode=alaQoSConditionIcmpCode, alaQoSConditionSourceIpv6AddrStatus=alaQoSConditionSourceIpv6AddrStatus, alaQoSAppliedRuleGreenPacketCount=alaQoSAppliedRuleGreenPacketCount, alaQoSAppliedServiceSourceIpPort=alaQoSAppliedServiceSourceIpPort, alaQoSActionTable=alaQoSActionTable, alaQoSAppliedServiceDestinationTcpPort=alaQoSAppliedServiceDestinationTcpPort, alaQoSAppliedServiceSourceIpPortEnd=alaQoSAppliedServiceSourceIpPortEnd, alaQoSIpNetworkSummarySourceGroup=alaQoSIpNetworkSummarySourceGroup, alaQoSAppliedConditionSourceNetworkGroup=alaQoSAppliedConditionSourceNetworkGroup, alaQoSMapGroupTable=alaQoSMapGroupTable, alaQoSAppliedConditionDestinationMacAddr=alaQoSAppliedConditionDestinationMacAddr, alaQoSV6NetworkGroupIpAddr=alaQoSV6NetworkGroupIpAddr, alaQoSAppliedActionMapFrom=alaQoSAppliedActionMapFrom, alaQoSConfigFlush=alaQoSConfigFlush, alaQoSConditionTcpFlagsVal=alaQoSConditionTcpFlagsVal, alaQoSAppliedServiceDestinationTcpPortStatus=alaQoSAppliedServiceDestinationTcpPortStatus, alaQoSAppliedValidityPeriodName=alaQoSAppliedValidityPeriodName, alaQoSServiceGroupStatus=alaQoSServiceGroupStatus, alaQoSServiceGroupEntry=alaQoSServiceGroupEntry, alaQoSConditionDestinationIpMask=alaQoSConditionDestinationIpMask, alaQoSConditionVmSourceIpMask=alaQoSConditionVmSourceIpMask, alaQoSActionEntry=alaQoSActionEntry, alaQoSExtendedRuleRedPacketCount=alaQoSExtendedRuleRedPacketCount, alaQoSConditionSourceIpAddr=alaQoSConditionSourceIpAddr, alaQoSAppliedConditionDestinationIpPortEnd=alaQoSAppliedConditionDestinationIpPortEnd, alaQoSServiceDestinationTcpPortEnd=alaQoSServiceDestinationTcpPortEnd, alaQoSMIBAutoMacRangeGroupObjects=alaQoSMIBAutoMacRangeGroupObjects, alaQoSRuleExtendedObjects=alaQoSRuleExtendedObjects, alaQosAppliedConditionVmL4SourcePortStatus=alaQosAppliedConditionVmL4SourcePortStatus, alaQoSActionDscp=alaQoSActionDscp, alaQoSServiceGroupsEntry=alaQoSServiceGroupsEntry, alaQoSAppliedMACGroupMacAddr=alaQoSAppliedMACGroupMacAddr, alaQoSAppliedConditionDestinationIpv6AddrStatus=alaQoSAppliedConditionDestinationIpv6AddrStatus, alaQoSAppliedConditionIcmpType=alaQoSAppliedConditionIcmpType, alaQoSConditionDestinationPortGroup=alaQoSConditionDestinationPortGroup, alaQoSConditionSourceIpMask=alaQoSConditionSourceIpMask, alaQoSMACGroupTable=alaQoSMACGroupTable, alaQoSActionLoadBalanceGroupStatus=alaQoSActionLoadBalanceGroupStatus, alaQoSAppliedMapGroupStatus=alaQoSAppliedMapGroupStatus, alaQoSMIBAppliedRuleObjects=alaQoSMIBAppliedRuleObjects, alaQoSPortGroupsName=alaQoSPortGroupsName, alaQoSAppliedConditionDestinationTcpPortEnd=alaQoSAppliedConditionDestinationTcpPortEnd, alaQoSPortGroupSlot=alaQoSPortGroupSlot, alaQoSAppliedActionColorOnly=alaQoSAppliedActionColorOnly, alaQoSIpNetworkSummaryTable=alaQoSIpNetworkSummaryTable, alaQoSAppliedConditionSource=alaQoSAppliedConditionSource, alaQoSExtendedRuleYellowByteCount=alaQoSExtendedRuleYellowByteCount, alaQoSAppliedRuleTrapEvents=alaQoSAppliedRuleTrapEvents, alaQoSAppliedMACGroupsName=alaQoSAppliedMACGroupsName, alaQoSAppliedConditionInnerSourceVlan=alaQoSAppliedConditionInnerSourceVlan, alaQoSAppliedActionRedirectSlotStatus=alaQoSAppliedActionRedirectSlotStatus, alaQoSMIBAppliedMACGroupsObjects=alaQoSMIBAppliedMACGroupsObjects, alaQoSCondition8021pStatus=alaQoSCondition8021pStatus, alaQoSAppliedConditionTcpFlagsMaskStatus=alaQoSAppliedConditionTcpFlagsMaskStatus, alaQoSConditionInner8021p=alaQoSConditionInner8021p, alaQoSAppliedActionRTCPMonitorStatus=alaQoSAppliedActionRTCPMonitorStatus, alaQoSAppliedCondition8021p=alaQoSAppliedCondition8021p, alaQoSConditionVmIpProtocol=alaQoSConditionVmIpProtocol, alaQoSActionPIRStatus=alaQoSActionPIRStatus, alaQoSConfigLogConsole=alaQoSConfigLogConsole, alaQoSAppliedActionRTCPDSCPStatus=alaQoSAppliedActionRTCPDSCPStatus, alaQoSRuleName=alaQoSRuleName, alaQoSAppliedRuleYellowByteCount=alaQoSAppliedRuleYellowByteCount, alaQoSAppliedValidityPeriodMonths=alaQoSAppliedValidityPeriodMonths, alaQoSRuleType=alaQoSRuleType, alaQoSAppliedServiceSourceUdpPortEnd=alaQoSAppliedServiceSourceUdpPortEnd, alaQoSMIBServiceGroupsObjects=alaQoSMIBServiceGroupsObjects, alaQoSMIBAppliedServiceGroupsObjects=alaQoSMIBAppliedServiceGroupsObjects, alaQoSMIBStatsObjects=alaQoSMIBStatsObjects, alaQoSAppliedMapGroupsEntry=alaQoSAppliedMapGroupsEntry, alaQoSAppliedConditionDPIAppNameStatus=alaQoSAppliedConditionDPIAppNameStatus, alaQoSAppliedServiceSourceTcpPortEnd=alaQoSAppliedServiceSourceTcpPortEnd, alaQoSAppliedConditionDestinationIpPort=alaQoSAppliedConditionDestinationIpPort, alaQoSAppliedActionMaximumDepth=alaQoSAppliedActionMaximumDepth, alaQoSAppliedActionTrustDSCPStatus=alaQoSAppliedActionTrustDSCPStatus, alaQoSAppliedConditionAppFpGroupStatus=alaQoSAppliedConditionAppFpGroupStatus, alaQoSVmSnooping=alaQoSVmSnooping, alaQoSAppliedRuleEntry=alaQoSAppliedRuleEntry, alaQoSServiceEntry=alaQoSServiceEntry, alaQoSAppliedValidityPeriodHour=alaQoSAppliedValidityPeriodHour, alaQoSConditionDestinationMacGroupStatus=alaQoSConditionDestinationMacGroupStatus, alaQoSPortGroupTable=alaQoSPortGroupTable, alaQoSConditionMulticastNetworkGroup=alaQoSConditionMulticastNetworkGroup, alaQoSConditionVrfName=alaQoSConditionVrfName, alaQoSAppliedActionLoadBalanceGroupStatus=alaQoSAppliedActionLoadBalanceGroupStatus, alaQoSAppliedValidityPeriodHourStatus=alaQoSAppliedValidityPeriodHourStatus, alaQoSAppliedRuleGroupMatches=alaQoSAppliedRuleGroupMatches, alaQoSMIBPortGroupsObjects=alaQoSMIBPortGroupsObjects, alaQoSAppliedConditionIpProtocol=alaQoSAppliedConditionIpProtocol, alaQoSConditionVmSourceMacAddrStatus=alaQoSConditionVmSourceMacAddrStatus, alaQoSDSCPRowStatus=alaQoSDSCPRowStatus, alaQoSExtendedRuleTable=alaQoSExtendedRuleTable, alaQoSMACGroupsName=alaQoSMACGroupsName, alaQoSAppliedConditionDestinationIpPortStatus=alaQoSAppliedConditionDestinationIpPortStatus, alaQoSRuleYellowPacketCount=alaQoSRuleYellowPacketCount, alaQoSAppliedActionRTCPDSCP=alaQoSAppliedActionRTCPDSCP, alaQoSAppliedConditionSourceMacMask=alaQoSAppliedConditionSourceMacMask, alaQoSExtendedRuleGreenPacketCount=alaQoSExtendedRuleGreenPacketCount, alaQoSConfigLogLines=alaQoSConfigLogLines, alaQoSAppliedPortGroupPort=alaQoSAppliedPortGroupPort, alaQoSConditionDestinationMacGroup=alaQoSConditionDestinationMacGroup, alaQoSConfigDEIMarking=alaQoSConfigDEIMarking, alaQoSMIBRuleGroupsObjects=alaQoSMIBRuleGroupsObjects, alaQoSActionDisposition=alaQoSActionDisposition, alaQoSActionPermanentGatewayIpV6AddrStatus=alaQoSActionPermanentGatewayIpV6AddrStatus, alaQoSConfigQMPage=alaQoSConfigQMPage, alaQoSAppliedConditionIpv6FlowLabel=alaQoSAppliedConditionIpv6FlowLabel, alaQoSConfigApply=alaQoSConfigApply, alaQoSMACGroupsTable=alaQoSMACGroupsTable, alaQoSAppliedConditionDestinationPortEnd=alaQoSAppliedConditionDestinationPortEnd, alaQoSAppliedMapGroupTable=alaQoSAppliedMapGroupTable, alaQoSConditionDestinationMacAddrStatus=alaQoSConditionDestinationMacAddrStatus, alaQoSAppliedValidityPeriodDays=alaQoSAppliedValidityPeriodDays, alaQoSAppliedRuleValidityPeriodStatus=alaQoSAppliedRuleValidityPeriodStatus, alaQoSConditionIcmpCodeStatus=alaQoSConditionIcmpCodeStatus, alaQoSActionCIR=alaQoSActionCIR, alaQoSConditionSourcePortGroup=alaQoSConditionSourcePortGroup, alaQoSMIBAppliedMapGroupObjects=alaQoSMIBAppliedMapGroupObjects, alaQoSAppliedActionAlternateGatewayIpAddr=alaQoSAppliedActionAlternateGatewayIpAddr, alaQoSAppliedPortGroupsEntry=alaQoSAppliedPortGroupsEntry, alaQoSAppliedV6NetworkGroupStatus=alaQoSAppliedV6NetworkGroupStatus, alaQoSRuleActive=alaQoSRuleActive, alaQoSExtendedRuleGreenByteCount=alaQoSExtendedRuleGreenByteCount, alaQoSConditionVmSourceIpAddrStatus=alaQoSConditionVmSourceIpAddrStatus, alaQoSDSCPEntry=alaQoSDSCPEntry, alaQoSServiceSourceIpPortStatus=alaQoSServiceSourceIpPortStatus, alaQoSAppliedActionDscpStatus=alaQoSAppliedActionDscpStatus, alaQoSAppliedConditionInner8021p=alaQoSAppliedConditionInner8021p, alaQoSActionRTCPMonitor=alaQoSActionRTCPMonitor, alaQoSConditionSourceVlanStatus=alaQoSConditionSourceVlanStatus, alaQoSConditionDscpStatus=alaQoSConditionDscpStatus, alaQoSAppliedActionMirrorPort=alaQoSAppliedActionMirrorPort, alaQoSRuleValidityPeriod=alaQoSRuleValidityPeriod, alaQoSAppliedServiceGroupStatus=alaQoSAppliedServiceGroupStatus, alaQoSAppliedPortGroupsTable=alaQoSAppliedPortGroupsTable, alaQoSConditionSourceTcpPortStatus=alaQoSConditionSourceTcpPortStatus, alaQoSAppliedConditionMcastIpv6Addr=alaQoSAppliedConditionMcastIpv6Addr, alaQoSAppliedServiceRowStatus=alaQoSAppliedServiceRowStatus, alaQoSMapGroupsEntry=alaQoSMapGroupsEntry, alaQoSActionMapFrom=alaQoSActionMapFrom, alaQoSAppliedConditionDestinationMacMask=alaQoSAppliedConditionDestinationMacMask, alaQoSConditionSourceMacAddr=alaQoSConditionSourceMacAddr, alaQoSConfigQMMACGroup=alaQoSConfigQMMACGroup, alaQoSAppliedConditionIcmpCodeStatus=alaQoSAppliedConditionIcmpCodeStatus, alaQoSActionMirrorSlot=alaQoSActionMirrorSlot, alaQoSConditionTcpEstablished=alaQoSConditionTcpEstablished, alaQoSAppliedConditionDestinationPortGroup=alaQoSAppliedConditionDestinationPortGroup, alaQoSConfigAppliedUserportShutdown=alaQoSConfigAppliedUserportShutdown, alaQoSAppliedMapGroupEntry=alaQoSAppliedMapGroupEntry, alaQoSAppliedRuleYellowPacketCount=alaQoSAppliedRuleYellowPacketCount, alaQoSServiceDestinationIpPortEnd=alaQoSServiceDestinationIpPortEnd, alaQoSMIBAppliedValidityPeriodObjects=alaQoSMIBAppliedValidityPeriodObjects, alaQoSAppliedRuleActive=alaQoSAppliedRuleActive, alaQoSConditionSourceVlan=alaQoSConditionSourceVlan, alaQoSValidityPeriodDaysStatus=alaQoSValidityPeriodDaysStatus, alaQoSActionMirrorMode=alaQoSActionMirrorMode, alaQoSAppliedConditionDestinationTcpPort=alaQoSAppliedConditionDestinationTcpPort, alaQoSDSCPEntryNumber=alaQoSDSCPEntryNumber, alaQoSAppliedPortGroupStatus=alaQoSAppliedPortGroupStatus, alaQoSConditionTcpFlagsValStatus=alaQoSConditionTcpFlagsValStatus, alaQoSPortDEIMarking=alaQoSPortDEIMarking, alaQoSAppliedActionCPUPriorityStatus=alaQoSAppliedActionCPUPriorityStatus, alaQoSActionMaximumBandwidth=alaQoSActionMaximumBandwidth, alaQoSAppliedActionPBSStatus=alaQoSAppliedActionPBSStatus, alaQoSRuleGroupByteCount=alaQoSRuleGroupByteCount, alaQoSConditionAppFpGroupStatus=alaQoSConditionAppFpGroupStatus, alaQoSAppliedActionMirrorSlot=alaQoSAppliedActionMirrorSlot, alaQoSAppliedConditionIpv6FlowLabelStatus=alaQoSAppliedConditionIpv6FlowLabelStatus, alaQoSMIBAppliedNetworkGroupsObjects=alaQoSMIBAppliedNetworkGroupsObjects, alaQoSConditionVmSourceIpv6IpAddr=alaQoSConditionVmSourceIpv6IpAddr, alaQoSRuleAction=alaQoSRuleAction, alaQoSConditionVmSourceMacAddr=alaQoSConditionVmSourceMacAddr, alaQoSAppliedConditionInnerSourceVlanStatus=alaQoSAppliedConditionInnerSourceVlanStatus, alaQoSAppliedConditionDPIAppName=alaQoSAppliedConditionDPIAppName, alaQoSAppliedAction8021pStatus=alaQoSAppliedAction8021pStatus, alaQoSAutoMacRangeEntry=alaQoSAutoMacRangeEntry, alaQoSActionAlternateGatewayIpAddr=alaQoSActionAlternateGatewayIpAddr, alaQoSConditionServiceGroup=alaQoSConditionServiceGroup, alaQoSActionMaximumDepth=alaQoSActionMaximumDepth, alaQoSMACGroupMacAddr=alaQoSMACGroupMacAddr, alaQoSNetworkGroupStatus=alaQoSNetworkGroupStatus, alaQoSMapGroupKey=alaQoSMapGroupKey, alaQoSAppliedActionCIR=alaQoSAppliedActionCIR, alaQoSAppliedActionPermanentGatewayIpV6AddrStatus=alaQoSAppliedActionPermanentGatewayIpV6AddrStatus, alaQoSAppliedRuleType=alaQoSAppliedRuleType, alaQoSAppliedConditionSourceNetworkGroupStatus=alaQoSAppliedConditionSourceNetworkGroupStatus, alaQoSAppliedConditionDestinationIpv6Mask=alaQoSAppliedConditionDestinationIpv6Mask, alaQoSAppliedPortGroupPortEnd=alaQoSAppliedPortGroupPortEnd, alaQoSActionTrustDSCP=alaQoSActionTrustDSCP, alaQoSAppliedConditionSIP=alaQoSAppliedConditionSIP, alaQoSMIBAppliedMapGroupsObjects=alaQoSMIBAppliedMapGroupsObjects, alaQoSServiceRowStatus=alaQoSServiceRowStatus, alaQoSAppliedConditionDestinationSlot=alaQoSAppliedConditionDestinationSlot, alaQoSConditionSourcePortSplitGroupStatus=alaQoSConditionSourcePortSplitGroupStatus, alaQoSExtendedRuleYellowPacketCount=alaQoSExtendedRuleYellowPacketCount, alaQoSActionName=alaQoSActionName, alaQoSConditionDestinationIpAddr=alaQoSConditionDestinationIpAddr, alaQoSAppliedServiceGroupServiceName=alaQoSAppliedServiceGroupServiceName, alaQoSMIBAppliedServiceGroupObjects=alaQoSMIBAppliedServiceGroupObjects, alaQoSValidityPeriodMonthsStatus=alaQoSValidityPeriodMonthsStatus, alaQoSMIBAppliedActionObjects=alaQoSMIBAppliedActionObjects, alaQoSAppliedMACGroupsSource=alaQoSAppliedMACGroupsSource, alaQoSAppliedConditionVmSourceIpv6IpAddrStatus=alaQoSAppliedConditionVmSourceIpv6IpAddrStatus, alaQoSRuleYellowByteCount=alaQoSRuleYellowByteCount, alaQoSActionPermanentGatewayIpAddr=alaQoSActionPermanentGatewayIpAddr, alaQoSAppliedNetworkGroupsEntry=alaQoSAppliedNetworkGroupsEntry, alaQoSServiceSourceUdpPort=alaQoSServiceSourceUdpPort, alaQoSAppliedMACGroupsEntry=alaQoSAppliedMACGroupsEntry, alaQoSAppliedConditionSourcePortSplitGroupStatus=alaQoSAppliedConditionSourcePortSplitGroupStatus, alaQoSMIBAppliedPortGroupsObjects=alaQoSMIBAppliedPortGroupsObjects, alaQoSActionMaximumDepthStatus=alaQoSActionMaximumDepthStatus, alaQoSAppliedActionRedirectChassis=alaQoSAppliedActionRedirectChassis, alaQoSAppliedValidityPeriodInterval=alaQoSAppliedValidityPeriodInterval, alaQoSAppliedConditionVmSourceIpAddrStatus=alaQoSAppliedConditionVmSourceIpAddrStatus, alaQoSAppliedServiceGroupEntry=alaQoSAppliedServiceGroupEntry, alaQoSServiceDestinationTcpPort=alaQoSServiceDestinationTcpPort, alaQoSConditionSourceMacGroupStatus=alaQoSConditionSourceMacGroupStatus, alaQoSAppliedRuleSource=alaQoSAppliedRuleSource, alaQoSAppliedConditionDestinationIpAddrStatus=alaQoSAppliedConditionDestinationIpAddrStatus, alaQoSPortTable=alaQoSPortTable, alaQoSConfigDebug=alaQoSConfigDebug, alaQoSAppliedActionCPUPriority=alaQoSAppliedActionCPUPriority, alaQoSConditionMcastIpv6Addr=alaQoSConditionMcastIpv6Addr, alaQoSAppliedConditionSourceIpMask=alaQoSAppliedConditionSourceIpMask, alaQoSActionMirrorModeStatus=alaQoSActionMirrorModeStatus, alaQoSStats=alaQoSStats, alaQoSConditionSourcePortEnd=alaQoSConditionSourcePortEnd, alaQoSConditionDestinationIpv6AddrStatus=alaQoSConditionDestinationIpv6AddrStatus, alaQoSAppliedActionName=alaQoSAppliedActionName, alaQoSAppliedCondition8021pStatus=alaQoSAppliedCondition8021pStatus, alaQoSAppliedMACGroupsStatus=alaQoSAppliedMACGroupsStatus, alaQoSActionPermanentGatewayIpAddrStatus=alaQoSActionPermanentGatewayIpAddrStatus, alaQoSConditionDscpEnd=alaQoSConditionDscpEnd, alaQoSAppliedActionDscp=alaQoSAppliedActionDscp, alaQoSConditionIpProtocol=alaQoSConditionIpProtocol, alaQoSMIBMACGroupsObjects=alaQoSMIBMACGroupsObjects, alaQoSAppliedActionRTCPMonitor=alaQoSAppliedActionRTCPMonitor, alaQoSConditionSourceMacMask=alaQoSConditionSourceMacMask, alaQoSRuleEntry=alaQoSRuleEntry, alaQoSAppliedRuleEnabled=alaQoSAppliedRuleEnabled)
mibBuilder.exportSymbols("ALCATEL-IND1-QOS-MIB", alaQoSAppliedConditionMcastIpv6Mask=alaQoSAppliedConditionMcastIpv6Mask, alaQoSAppliedConditionSourceUdpPortEnd=alaQoSAppliedConditionSourceUdpPortEnd, alaQoSAppliedConditionTcpFlagsVal=alaQoSAppliedConditionTcpFlagsVal, alaQoSAppliedRuleGroupByteCount=alaQoSAppliedRuleGroupByteCount, alaQoSAppliedActionPriority=alaQoSAppliedActionPriority, alaQoSActionPriorityStatus=alaQoSActionPriorityStatus, alaQoSAppliedConditionMulticastIpAddrStatus=alaQoSAppliedConditionMulticastIpAddrStatus, alaQoSAppliedActionPermanentGatewayIpAddr=alaQoSAppliedActionPermanentGatewayIpAddr, alaQoSActionCBSStatus=alaQoSActionCBSStatus, alaQoSAppliedMapGroupKeyEnd=alaQoSAppliedMapGroupKeyEnd, alaQoSActionPermanentGatewayIpV6Addr=alaQoSActionPermanentGatewayIpV6Addr, alaQoSConditionDestinationSlotStatus=alaQoSConditionDestinationSlotStatus, alaQoSConditionDestinationUdpPort=alaQoSConditionDestinationUdpPort, alaQoSAppliedV6NetworkGroupTable=alaQoSAppliedV6NetworkGroupTable, alaQoSConditionInnerSourceVlan=alaQoSConditionInnerSourceVlan, alaQoSActionCBS=alaQoSActionCBS, alaQoSConditionSIPStatus=alaQoSConditionSIPStatus, alaQoSActionPriority=alaQoSActionPriority, alaQoSConditionSourceIpv6Addr=alaQoSConditionSourceIpv6Addr, alaQoSStatsNonSpoofedEvents=alaQoSStatsNonSpoofedEvents, alaQoSConfig=alaQoSConfig, PYSNMP_MODULE_ID=alaQoSMIB, alaQoSAppliedRuleLog=alaQoSAppliedRuleLog, alaQoSConditionVmSourceIpv6IpMask=alaQoSConditionVmSourceIpv6IpMask, alaQoSAppliedRuleLogInterval=alaQoSAppliedRuleLogInterval, alaQoSAppliedConditionDPIAppGroupStatus=alaQoSAppliedConditionDPIAppGroupStatus, alaQoSAppliedConditionDscp=alaQoSAppliedConditionDscp, alaQoSConditionSourcePortSplitGroup=alaQoSConditionSourcePortSplitGroup, alaQoSAppliedRuleGreenByteCount=alaQoSAppliedRuleGreenByteCount, alaQoSAppliedServiceSourceUdpPortStatus=alaQoSAppliedServiceSourceUdpPortStatus, alaQoSAppliedServiceSourceTcpPortStatus=alaQoSAppliedServiceSourceTcpPortStatus, alaQoSRuleValidityPeriodStatus=alaQoSRuleValidityPeriodStatus, alaQoSConditionMcastIpv6Mask=alaQoSConditionMcastIpv6Mask, alaQoSAppliedConditionTosMask=alaQoSAppliedConditionTosMask, alaQoSAppliedConditionIpv6NH=alaQoSAppliedConditionIpv6NH, alaQoSServiceGroupsTable=alaQoSServiceGroupsTable, alaQoSAppliedActionMaximumDepthStatus=alaQoSAppliedActionMaximumDepthStatus, alaQoSConfigSwitchGroup=alaQoSConfigSwitchGroup, alaQoSMIBNetworkGroupObjects=alaQoSMIBNetworkGroupObjects, alaQoSConditionDestinationVlan=alaQoSConditionDestinationVlan, alaQosAppliedConditionVmL4DestPort=alaQosAppliedConditionVmL4DestPort, alaQoSActionRTCPMonitorStatus=alaQoSActionRTCPMonitorStatus, alaQoSValidityPeriodEndInterval=alaQoSValidityPeriodEndInterval, alaQoSAppliedConditionServiceGroup=alaQoSAppliedConditionServiceGroup, alaQoSAppliedV6NetworkGroupEntry=alaQoSAppliedV6NetworkGroupEntry, alaQoSServiceDestinationIpPort=alaQoSServiceDestinationIpPort, alaQoSConditionDestinationIpPortEnd=alaQoSConditionDestinationIpPortEnd, alaQoSAppliedConditionDestinationMacGroup=alaQoSAppliedConditionDestinationMacGroup, alaQoSAppliedConditionSourceMacAddrStatus=alaQoSAppliedConditionSourceMacAddrStatus, alaQoSActionRedirectAgg=alaQoSActionRedirectAgg, alaQoSAppliedConditionTcpFlags=alaQoSAppliedConditionTcpFlags, alaQoSActionMirrorPort=alaQoSActionMirrorPort, alaQoSAppliedConditionSourceMacAddr=alaQoSAppliedConditionSourceMacAddr, alaQoSExtendedRulePacketCount=alaQoSExtendedRulePacketCount, alaQosConditionVxlanStatus=alaQosConditionVxlanStatus, alaQoSActionSource=alaQoSActionSource, alaQosAppliedConditionVmL4DestPortStatus=alaQosAppliedConditionVmL4DestPortStatus, alaQoSIpNetworkSummaryAction=alaQoSIpNetworkSummaryAction, alaQoSAppliedMapGroupKey=alaQoSAppliedMapGroupKey, alaQoSConditionSourceTcpPortEnd=alaQoSConditionSourceTcpPortEnd, alaQoSConditionVmSourceIpv6IpAddrStatus=alaQoSConditionVmSourceIpv6IpAddrStatus, alaQoSAppliedConditionSourceSlot=alaQoSAppliedConditionSourceSlot, alaQoSAppliedServiceEntry=alaQoSAppliedServiceEntry, alaQoSIpNetworkSummaryVrfName=alaQoSIpNetworkSummaryVrfName, alaQoSAutoMacRangeTable=alaQoSAutoMacRangeTable, alaQoSPortGroupsSource=alaQoSPortGroupsSource, alaQoSRuleGreenByteCount=alaQoSRuleGreenByteCount, alaQoSAppliedConditionSourceIpv6Mask=alaQoSAppliedConditionSourceIpv6Mask, alaQoSValidityPeriodMonths=alaQoSValidityPeriodMonths, alaQoSAppliedConditionVmSourceMacMask=alaQoSAppliedConditionVmSourceMacMask)
