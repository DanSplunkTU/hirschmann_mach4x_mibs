#
# PySNMP MIB module PRVT-SWITCH-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SWITCH-ACCESS-LIST-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:13:26 2021
# On host fv-az33-471 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
sapPortId, svcId, sdpId, sapEncapValue = mibBuilder.importSymbols("PRVT-SERV-MIB", "sapPortId", "svcId", "sdpId", "sapEncapValue")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
dot1qVlanIndex, dot1qVlanStatus = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qVlanStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Counter64, TimeTicks, Bits, ObjectIdentity, Gauge32, NotificationType, MibIdentifier, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "NotificationType", "MibIdentifier", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Integer32")
RowStatus, TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
prvtSwitchAccessListMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 1))
prvtSwitchAccessListMib.setRevisions(('2011-02-07 00:00', '2010-11-16 00:00', '2010-11-03 00:00', '2009-04-17 00:00', '2008-11-20 00:00', '2008-02-14 00:00', '2008-01-01 00:00', '2007-12-05 00:00', '2006-03-22 00:00', '2005-10-03 00:00', '2005-09-30 00:00', '2005-02-28 00:00', '2005-02-24 00:00', '2005-02-16 00:00', '2004-12-15 00:00', '2003-10-15 00:00', '2003-05-08 00:00', '2002-11-12 00:00', '2001-11-05 00:00', '2001-09-30 00:00', '2001-08-27 00:00', '2001-07-31 00:00', '2001-05-14 00:00', '2001-02-20 00:00', '2001-02-15 00:00', '2001-01-28 00:00', '2000-11-13 09:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSwitchAccessListMib.setRevisionsDescriptions(('Addeed accessListInterfaceRateStatistics object', 'Added accessListSapTable and accessListSapStatisticsTable', 'Added new OIDs standardAccessListDropLevel,  extendedAccessListDropLevel, macAccessListDropLevel,\n    \t standardAccessListDscp, extendedAccessListDscp', 'Created AccessListRemarkString TC.', 'Added objects for Egress Access Lists', 'Added Access List Interface Statistics', 'Removed redefined OIDs in private vendor extension definitions.', ' ', 'Added the tag filter object in the interface and VLAN access group tables and changed some\n\t\tdescription with TMetro specific information.', 'Switched the values of greater-than and less-than in PortDef textual convention.', 'Changed the Rate textual convention to include the value of 0 (zero).', 'Added the span track objects in the interface tables.', 'Added the source and destination range objects in the extended access list table.', 'Fixed spelling errors and changed the contact info.', '1. accessListControlTable is now indexed only by accessListControlListGroup and the row\n       status creates whole groups.\n       2. Added standardAccessListIndex and extendedAccessListIndex as indices of standardAccessListTable \n       and extendedAccessListTable to replace accessGroupControlListIndex.\n       3. Added standardAccessListRowStatus and extendedAccessListRowStatus to enable creation of rules.\n       Rules, however, cannot be deleted using these objects. \n       4. Added support for enabling the loggin of ACLs (standardAccessListLog, extendedAccessListLog).\n       5. Added support for redirection traffic to a vlan and ip next hop\n           (accessListInterfaceRedirectVlanID,accessListVLANRedirectVlanID,accessListInterfaceRedirectNexthop,accessListVLANRedirectNexthop).\n       6. Added objects for configuring the Peak rate and peak burst when dual rate limit is used.\n       (accessListInterfacePeakRate, accessListInterfacePeakBurst, accessListVLANPeakRate,accessListVLANPeakBurst) \n       7. Added objects for toggling the traffic metering color awareness and remarking policy. \n       (accessListInterfaceColorAware, accessListVlanColorAware,accessListInterfacePolicy, accessListVlanPolicy)\n        ', 'Global changes:\n        1. Added support for VLAN IP access-group.\n        2. Added support for redirecting traffic to an interface\n           (accessListInterfaceRedirectIfIndex,accessListVLANRedirectIfIndex).\n        3. Renamed accessListControlListGroupIndex to accessListInterfaceGroupIndex\n        4. Changes in AccessListAction, removed shaper.\n        5. Removed Burst TEXTUAL-CONVENTION.\n        \n        Changes for E-Series\n        1. Introduced changes in PortDef,ExceedAction,AccessListDiscard TEXTUAL-CONVENTION for E-Series.\n        2. The objects extendedAccessListIgmpType and accessListInterfaceShaper are\n           not supported for E-Series.\n        3. Added accessListInterfaceBurst,accessListVLANBurst for E-Series.\n        4. The range of accessListInterfaceDscp is now 0..63 for E-Series.', 'Moved to SMI-V2.\n        Removed extendedAccessListEstablished and\n        extendedAccessListMSS.', 'Changed mapping of AccessListAction enum.', 'Added shaper to access group.', 'Added ICMP type,ICMP code and IGMP to extended access list.', 'Added access group with rate limit.', 'Added routed ISP.', '1. Added remark, MSS and Established to access list.\n         2. Added Priority and Discard to access group.', 'Added the ability to modify TOS in extended access list.', 'Added shaper mode for access list action.', 'Added support for access group in ISP.', 'Initial version.',))
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setLastUpdated('201011160000Z')
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setContactInfo(' BATM/Telco Systems Support team\n\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSwitchAccessListMib.setDescription('The access-list MIB module that controls L3 switches access-list parameters')
class AccessListAction(TextualConvention, Integer32):
    description = 'The AccessListAction type represents action taken when this \n         access-list condition are asserted.\n         '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 100))
    namedValues = NamedValues(("permit", 0), ("deny", 1), ("shaper", 2), ("remark", 3), ("undefined", 100))

class IpProtocol(TextualConvention, Integer32):
    description = 'The IpProtocol type represents the protocol number in the IP datagram header'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PortDef(TextualConvention, Integer32):
    description = 'The PortDef type operates together with the port number filed inside\n         the access-list & control how the port number is being processed.\n         The values greater-than(3) and less-than(4) are supported only on\n         E-Series family boards'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))
    namedValues = NamedValues(("equal", 1), ("range", 2), ("greater-than", 3), ("less-than", 4), ("undefined", 0))

class Rate(TextualConvention, Integer32):
    description = 'The Rate type represents in Kbps the maximum rate limit for the flow'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(13, 1000000), )
class ExceedAction(TextualConvention, Integer32):
    description = 'the ExceedAction type represents the action that the switch should take\n         when one of the limits exceeded: drop -> drop the packets, markDiscardable\n         this packet is discardable if a conjection ocure\n         Only the E-Series family boards support the values green, yellow and red. Other\n         values are not supported by the E-Series'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("drop", 0), ("markDiscardable", 1), ("undefined", 2), ("green", 3), ("yellow", 4), ("red", 5))

class VlanTag(TextualConvention, Integer32):
    description = 'The VlanTag type represents if the VLAN is tagged or untagged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("untagged", 0), ("tagged", 1), ("undefined", 2))

class ISPType(TextualConvention, Integer32):
    description = 'The ISPType type represents the ISP type - either connective or normal.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("connectivity", 0), ("normal", 1), ("routed", 2))

class Shaper(TextualConvention, Integer32):
    description = 'The Shaper type represents the status of the shaper'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class ConformAction(TextualConvention, Integer32):
    description = 'The action to perform if the condition is matched.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("transmit", 0))

class AssigenValue(TextualConvention, Integer32):
    description = 'Enables/disables assignment of an ISP user to this interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class AccessListModifyTos(TextualConvention, Integer32):
    description = 'The AccessListModifyTos must be enabled if the user wants the ToS to be modified.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListEstablished(TextualConvention, Integer32):
    description = 'Match established connection (ACK or RST flages)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListDiscard(TextualConvention, Integer32):
    description = 'Mark discardable or normal for priority on access group\n         Only the E-Series family and the G-Series family boards support the values green, yellow and red. Other\n         values are not supported by the E-Series and G-series.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("normal", 0), ("discardable", 1), ("green", 2), ("yellow", 3), ("red", 4), ("undefined", 5))

class AccessListRemarkString(TextualConvention, OctetString):
    description = 'Access list entry comment string'
    status = 'current'
    displayHint = '40a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 40)

class TxqDropLevel(TextualConvention, Integer32):
    description = 'TXQ drop level values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("green", 1), ("yellow", 2))

class MatchTraffic(TextualConvention, Integer32):
    description = 'Match traffic values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("untagged", 1), ("unknown-unicast", 2), ("multicast", 3), ("broadcast", 4), ("known-unicast", 5))

class AccessListStatistics(TextualConvention, Integer32):
    description = 'Access list statistics values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class AccessListDirection(TextualConvention, Integer32):
    description = 'Access list applied direction values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ingress", 0), ("egress", 1))

prvtSwitchAccessListNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0))
accessLists = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1))
isp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2))
prvtSwitchAccessListConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3))
accessListTemplate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("vlan-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListTemplate.setStatus('current')
if mibBuilder.loadTexts: accessListTemplate.setDescription('The access-list template in use. For non E-series devices, the device must be restarted \n        for this setting to take effect.')
accessGroupsDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2))
accessListsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3))
accessListsVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4))
accessListsServices = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5))
accessListsInterfaceStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6))
accessListsServicesStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7))
accessListControlTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: accessListControlTable.setStatus('current')
if mibBuilder.loadTexts: accessListControlTable.setDescription('This table controls the creation or removal of a access-list\n         group from all access-list tables. The real programming of values is\n         done in the coresponding access-list table.')
accessListControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"))
if mibBuilder.loadTexts: accessListControlEntry.setStatus('current')
if mibBuilder.loadTexts: accessListControlEntry.setDescription('An entry in the accessListControlTable table.')
accessListControlListGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: accessListControlListGroup.setStatus('current')
if mibBuilder.loadTexts: accessListControlListGroup.setDescription('This object identifies the index of the group of access-list rules         \n        Each range of group indexes is related to a different access-list type\n         1..99    for standard access-list\n         100..199 for extended access-list.')
accessListControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: accessListControlRowStatus.setDescription('This indicates the row status & enables creation & deletion of lines in\n\t     this table. See SNMPv2-TC for more information.')
standardAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: standardAccessListTable.setStatus('current')
if mibBuilder.loadTexts: standardAccessListTable.setDescription('This table contains standard access-list parameters.')
standardAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListIndex"))
if mibBuilder.loadTexts: standardAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: standardAccessListEntry.setDescription('An entry in the standardAccessListTable table.')
standardAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: standardAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: standardAccessListIndex.setDescription('Index of the particular rule of the group.')
standardAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListAction.setStatus('current')
if mibBuilder.loadTexts: standardAccessListAction.setDescription('The action to preform if the condition of this access-list rule condition is true.')
standardAccessListIpSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListIpSrc.setStatus('current')
if mibBuilder.loadTexts: standardAccessListIpSrc.setDescription('The IP source address associated with this flow.')
standardAccessListIpMASKsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListIpMASKsrc.setStatus('current')
if mibBuilder.loadTexts: standardAccessListIpMASKsrc.setDescription('The IP mask that, together with standardAccessListIpSrc, defines the subnet.')
standardAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 5), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListRemark.setStatus('current')
if mibBuilder.loadTexts: standardAccessListRemark.setDescription('Access list entry comment')
standardAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListLog.setStatus('current')
if mibBuilder.loadTexts: standardAccessListLog.setDescription('Enable normal or extended logging of this access-list rule.')
standardAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVpt.setStatus('current')
if mibBuilder.loadTexts: standardAccessListVpt.setDescription('This object is meaningful :\n\t    1.when vlan-priority template is used and will reprezent vlan priority tag. \n\t    2.Forwarding class reprezented in the second part of enumeration: fc-##.\n\t    A value of 8 means that neither of above is defined.')
standardAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: standardAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: standardAccessListRowStatus.setDescription('This indicates the row status & enables creation of rows in\n\t     this table. In order to be consistent with ACL policy, this object \n\t     does not allow deletion of rules. The entire group must be deleted and all \n\t     rules removed at once.')
standardAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVlanId.setStatus('current')
if mibBuilder.loadTexts: standardAccessListVlanId.setDescription('This object shows the customer VLAN. The object is meaningful only \n\t\t if standardAccessListVlanMask is set.')
standardAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListVlanMask.setStatus('current')
if mibBuilder.loadTexts: standardAccessListVlanMask.setDescription('This object shows the customer VLAN mask. It is meaningful only \n\t\t if standardAccessListVlanId is set.\n\t\t The value is in hexadecimal type DisplayString (0xXXX).')
standardAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVlanId.setStatus('current')
if mibBuilder.loadTexts: standardAccessListProviderVlanId.setDescription('This object shows the provider VLAN. The object is meaningful only \n\t\t if standardAccessListProviderVlanMask is set.')
standardAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVlanMask.setStatus('current')
if mibBuilder.loadTexts: standardAccessListProviderVlanMask.setDescription('This object shows the provider VLAN mask. It is meaningful only\n\t\t if standardAccessListProviderVlanId is set.\n\t\t The value is in hexadecimal type DisplayString (0xXXX)')
standardAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListProviderVpt.setStatus('current')
if mibBuilder.loadTexts: standardAccessListProviderVpt.setDescription('This object shows the provider VLAN priority tag.\n\t\t A value of 8 means undefined.')
standardAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: standardAccessListUntaggedMode.setDescription('This object enables the untagged mode')
standardAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListDropLevel.setStatus('current')
if mibBuilder.loadTexts: standardAccessListDropLevel.setDescription('This object define drop-level.')
standardAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: standardAccessListDscp.setStatus('current')
if mibBuilder.loadTexts: standardAccessListDscp.setDescription('The object shows the DiffServ Point (DSCP) value from IP header.')
extendedAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: extendedAccessListTable.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListTable.setDescription('This table contains extended access-list parameters.')
extendedAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListIndex"))
if mibBuilder.loadTexts: extendedAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListEntry.setDescription('An entry in the extendedAccessListTable table.')
extendedAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extendedAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIndex.setDescription('Index of the particular rule of the group.')
extendedAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListAction.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListAction.setDescription('The action to preform if this access-list rule condition is true.')
extendedAccessListIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 3), IpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpProtocol.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIpProtocol.setDescription('The IP protocol number (see IpProtocol).')
extendedAccessListIpSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpSrc.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIpSrc.setDescription('The IP source address associated with this flow.')
extendedAccessListIpMASKsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpMASKsrc.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIpMASKsrc.setDescription('The IP mask, together with extendendAccessListIpSrc, defines the subnet.')
extendedAccessListPortDefSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 6), PortDef()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortDefSrc.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortDefSrc.setDescription('The extendedAccessListPortDefSrc object operates together with the port number filed inside \n\t    the access-list & controls how the port number is being processed.\n\t    The values less-than(3) and greater-than(4) are supported only on E-Series family boards.')
extendedAccessListPortNumSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortNumSrc.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortNumSrc.setDescription('UDP/TCP port number. A value of 0 represents undefined port number.')
extendedAccessListPortRangeSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortRangeSrc.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortRangeSrc.setDescription('UDP/TCP ned range port number. A value of 0 represents undefined port number. Valid\n\t    only with extendedAccessListPortDefSrc value of range(2).')
extendedAccessListIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpDest.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIpDest.setDescription('The IP destination address associated with this flow.')
extendedAccessListIpMASKdst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIpMASKdst.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIpMASKdst.setDescription('The IP mask, together with extendedAccessListIpMASKdst, defines the subnet.')
extendedAccessListPortDefDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 11), PortDef()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortDefDst.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortDefDst.setDescription('The extendedAccessListPortDefDst object operates together with the port number filed inside \n\t    the access-list & controls how the port number is being processed.\n\t    The values less-than(3) and greater-than(4) are supported only on E-Series family boards.')
extendedAccessListPortNumDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortNumDst.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortNumDst.setDescription('UDP/TCP port number. A value of 0 represents undefined port number.')
extendedAccessListPortRangeDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPortRangeDst.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPortRangeDst.setDescription('UDP/TCP ned range port number. A value of 0 represents undefined port number. Valid for\n\t    value range (2) of extendedAccessListPortDefDst.')
extendedAccessListTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListTos.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListTos.setDescription('This object shows the type of service value.')
extendedAccessListPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListPrec.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListPrec.setDescription('Precedence value.')
extendedAccessListModifyTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 16), AccessListModifyTos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListModifyTos.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListModifyTos.setDescription('extendedAccessListModifyTos must be enabled if the user wants the ToS to be modified.')
extendedAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 17), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListRemark.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListRemark.setDescription('Access list entry comment.')
extendedAccessListIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIcmpType.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIcmpType.setDescription('ICMP message type.')
extendedAccessListIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIcmpCode.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIcmpCode.setDescription('ICMP message code.')
extendedAccessListIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListIgmpType.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListIgmpType.setDescription('IGMP message type. This object is not supported in E-Series')
extendedAccessListEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 21), AccessListEstablished()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListEstablished.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListEstablished.setDescription('When TCP protocol type is chosen, setting this object indicates that established connections will be matched.')
extendedAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListLog.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListLog.setDescription('Enable normal or extended logging of this access-list rule.')
extendedAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVpt.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListVpt.setDescription('This object is meaningful :\n\t    1.when vlan-priority template is used and will reprezent vlan priority tag. \n\t    2.Forwarding class reprezented in the second part of enumeration: fc-##.\n\t    A value of 8 means that neither of above is defined.')
extendedAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendedAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListRowStatus.setDescription('This indicates the row status & enables creation of lines in\n\t     this table. In order to be consistent with ACL policy, this object \n\t     does not allow deletion of rules. The entire group must be deleted and all \n\t     rules removed at once.')
extendedAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVlanId.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListVlanId.setDescription('This object shows the customer VLAN. The object is meaningful\n\t\t only if extendedAccessListVlanMask is set.')
extendedAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListVlanMask.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListVlanMask.setDescription('This object shows the customer VLAN mask. It is meaningful only\n\t\t if extendedAccessListVlanId is set.\n\t\t The value is in hexadecimal type string(0x..).')
extendedAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVlanId.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListProviderVlanId.setDescription('This object shows the provider VLAN. The object is meaningful only\n\t\t if extendedAccessListProviderVlanMask is set.')
extendedAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 28), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVlanMask.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListProviderVlanMask.setDescription('This object shows the provider VLAN mask. It is meaningful only\n\t\t if extendedAccessListProviderVlanId is set.\n\t\t The value is in hexadecimal type string(0x..).')
extendedAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListProviderVpt.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListProviderVpt.setDescription('This object shows the provider VLAN priority tag. \n\t\t A value of 8 means undefined.\n\t\t This object is meaningful only if vlan-priority template is used.')
extendedAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListUntaggedMode.setDescription('This object enables the untagged mode.')
extendedAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListDropLevel.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListDropLevel.setDescription('This object define drop-level.')
extendedAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extendedAccessListDscp.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListDscp.setDescription('The object shows the DiffServ Point (DSCP) value from IP header.')
macAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: macAccessListTable.setStatus('current')
if mibBuilder.loadTexts: macAccessListTable.setDescription('This table contains MAC access-list parameters.')
macAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListIndex"))
if mibBuilder.loadTexts: macAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: macAccessListEntry.setDescription('An entry in the macAccessListTable table.')
macAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: macAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: macAccessListIndex.setDescription('Index of the particular rule of the group.')
macAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListAction.setStatus('current')
if mibBuilder.loadTexts: macAccessListAction.setDescription('The action to preform if this access-list rule condition is true.')
macAccessListMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacSrc.setStatus('current')
if mibBuilder.loadTexts: macAccessListMacSrc.setDescription("The object contains the MAC address of source.\n\t     If this object is not set, the result is 'any' source mac address.\n\t     If object macAccessListMacSrcMask is not set, this object means the host address.")
macAccessListMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: macAccessListMacSrcMask.setDescription('This object contains the mask for MAC source address.\n\t     The object affects macAccessListMacSrc, defines host or range.')
macAccessListMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacDst.setStatus('current')
if mibBuilder.loadTexts: macAccessListMacDst.setDescription("The object contains the MAC address of destination.\n\t     If this object is not set, the result is 'any' destination mac address.\n\t     If object macAccessListMacDstMask is not set, this object means the host address.")
macAccessListMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMacDstMask.setStatus('current')
if mibBuilder.loadTexts: macAccessListMacDstMask.setDescription('This object contains the mask for MAC destination address.\n\t     The object affects macAccessListMacDst, defines host or range.')
macAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 7), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListRemark.setStatus('current')
if mibBuilder.loadTexts: macAccessListRemark.setDescription('Access list entry comment')
macAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListLog.setStatus('current')
if mibBuilder.loadTexts: macAccessListLog.setDescription('Enable normal or extended logging of this access-list rule.')
macAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: macAccessListRowStatus.setDescription('This indicates the row status & enables creation of rows in\n\t     this table. In order to be consistent with ACL policy, this object \n\t     does not allow deletion of rules. The entire group must be deleted and all \n\t     rules removed at once.')
macAccessListTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListTos.setStatus('current')
if mibBuilder.loadTexts: macAccessListTos.setDescription('This object shows the type of service value.')
macAccessListPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListPrecedence.setStatus('current')
if mibBuilder.loadTexts: macAccessListPrecedence.setDescription('This object shows the precedence value.\n\t     The parameter is matched for IP traffic only.\n\t     The value is in the range between <0-8>.\n\t     When precendence is disable the object will take 8 value.')
macAccessListVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 241, 242, 243, 244, 245, 246, 247, 248))).clone(namedValues=NamedValues(("vpt-value0", 0), ("vpt-value1", 1), ("vpt-value2", 2), ("vpt-value3", 3), ("vpt-value4", 4), ("vpt-value5", 5), ("vpt-value6", 6), ("vpt-value7", 7), ("undefined", 8), ("fc-be", 241), ("fc-l2", 242), ("fc-af", 243), ("fc-l1", 244), ("fc-h2", 245), ("fc-ef", 246), ("fc-h1", 247), ("fc-nc", 248)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVpt.setStatus('current')
if mibBuilder.loadTexts: macAccessListVpt.setDescription('This object is meaningful :\n\t    1.when vlan-priority template is used and will reprezent vlan priority tag. \n\t    2.Forwarding class reprezented in the second part of enumeration: fc-##.\n\t    A value of 8 means that neither of above is defined.')
macAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVlanId.setStatus('current')
if mibBuilder.loadTexts: macAccessListVlanId.setDescription('This object shows the customer VLAN. The object is meaningful only\n\t     if macAccessListVlanMask is set.')
macAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListVlanMask.setStatus('current')
if mibBuilder.loadTexts: macAccessListVlanMask.setDescription('This object shows the customer VLAN mask. It is meaningful only \n\t     if macAccessListVlanId is set.\n\t     The value is in hexadecimal type string(0x..).')
macAccessListInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: macAccessListInnerVlanId.setDescription('This object shows the provider VLAN. The object is meaningful only\n\t     if macAccessListProviderVlanMask is set.')
macAccessListInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVlanMask.setStatus('current')
if mibBuilder.loadTexts: macAccessListInnerVlanMask.setDescription('This object shows the provider VLAN mask. It is meaningful only\n\t     if macAccessListProviderVlanId is set.\n\t     The value is in hexadecimal type string(0x..). ')
macAccessListInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListInnerVpt.setStatus('current')
if mibBuilder.loadTexts: macAccessListInnerVpt.setDescription('This object shows the provider VLAN priority tag.\n\t     A value of 8 means undefined')
macAccessListEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 18), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListEtherType.setStatus('current')
if mibBuilder.loadTexts: macAccessListEtherType.setDescription('The object shows the EtherType field in the Ethernet header.\n\t     The field is matched only for non-IP and non-ARP traffic only.')
macAccessListDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListDscp.setStatus('current')
if mibBuilder.loadTexts: macAccessListDscp.setDescription('The object shows the DiffServ Point (DSCP) value from IP header.')
macAccessListMatchTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 20), MatchTraffic()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMatchTraffic.setStatus('current')
if mibBuilder.loadTexts: macAccessListMatchTraffic.setDescription('This object shows the type of traffic to match.')
macAccessListMatchTrafficPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 21), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListMatchTrafficPort.setStatus('current')
if mibBuilder.loadTexts: macAccessListMatchTrafficPort.setDescription("This object is meaningful only if macAccessListMatchTraffic\n\t     is set to 'known-unicast' value - else returns error.\n\t\t The values are of types PORTLIST (for example 1/1/1-1/1/4,1/1/6)")
macAccessListUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: macAccessListUntaggedMode.setDescription('This object enables the untagged mode.')
macAccessListDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAccessListDropLevel.setStatus('current')
if mibBuilder.loadTexts: macAccessListDropLevel.setDescription('This object define drop-level.')
etherTypeAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5), )
if mibBuilder.loadTexts: etherTypeAccessListTable.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListTable.setDescription('This table contains extended MAC access-list parameters.')
etherTypeAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListControlListGroup"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListIndex"))
if mibBuilder.loadTexts: etherTypeAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListEntry.setDescription('An entry in the etherTypeAccessListTable table.')
etherTypeAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: etherTypeAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListIndex.setDescription('Index of the particular rule of the group.')
etherTypeAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 2), AccessListAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListAction.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListAction.setDescription('The action to preform if this access-list rule condition is true.')
etherTypeAccessListEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListEtherType.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListEtherType.setDescription('The IP protocol number (see IpProtocol).')
etherTypeAccessListEtherTypeCodeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListEtherTypeCodeMask.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListEtherTypeCodeMask.setDescription('The IP source address associated with this flow.')
etherTypeAccessListRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 5), AccessListRemarkString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListRemark.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListRemark.setDescription('Access list entry comment')
etherTypeAccessListLog = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("log", 1), ("log-input", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListLog.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListLog.setDescription('Enable normal or extended logging of this access-list rule.')
etherTypeAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherTypeAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListRowStatus.setDescription('This indicates the row status & enables creation of rows in\n\t     this table. In order to be consistent with ACL policy, this object \n\t     does not allow deletion of rules. The entire group must be deleted and all \n\t     rules removed at once.')
etherTypeAccessListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListVlanId.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListVlanId.setDescription('This object shows the customer VLAN.The object is meaningful only\n\t\t if etherTypeAccessListVlanMask is set.')
etherTypeAccessListVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListVlanMask.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListVlanMask.setDescription('This object shows the customer VLAN mask. It is meaningful only\n\t\t if etherTypeAccessListVlanId is set.')
etherTypeAccessListProviderVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanId.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanId.setDescription('This object shows the provider VLAN. The object is meaningful only\n\t\t if etherTypeAccessListProviderVlanMask is set.')
etherTypeAccessListProviderVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanMask.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListProviderVlanMask.setDescription('This object shows the provider VLAN mask. It is meaningful only \n\t\t if etherTypeAccessListProviderVlanId is set.\n\t\t The value is in hexadecimal type string (0x..). ')
etherTypeAccessListProviderVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etherTypeAccessListProviderVpt.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListProviderVpt.setDescription('The vlan priority tag. A value of 8 means undefined. This object is meaningful \n\t    only if vlan-priority template is used.')
accessListInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: accessListInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceTable.setDescription('This table controls the assigment of access groups to an interface.')
accessListInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceGroupIndex"))
if mibBuilder.loadTexts: accessListInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceEntry.setDescription('An entry in the AccessListInterfaceEntry table.')
accessListInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceTableIndex.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceTableIndex.setDescription('This object identifies the row number for this (ifIndex) interface.')
accessListInterfaceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceGroupIndex.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceGroupIndex.setDescription('This indicates the index of the access group for this interface. This value is\n         the same as the value of accessListControlListGroup for the assigned ACL.')
accessListInterfaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceDscp.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceDscp.setDescription('Enable Diffserv codepoint.')
accessListInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRowStatus.setDescription('This indicates the row status & enables creation & deletion of lines in\n\t     this (and related) tables. See SNMPv2-TC for more information.')
accessListInterfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePriority.setStatus('current')
if mibBuilder.loadTexts: accessListInterfacePriority.setDescription('Priority level value. Valid values are 0 to 7, 8 means undefined.')
accessListInterfaceDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 6), AccessListDiscard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceDiscard.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceDiscard.setDescription('Mark discardable or normal for priority on access group\n         Only the E-Series family and the G-Series family boards \n         support the values green, yellow and red. Other\n         values are not supported by the E-Series and G-series.')
accessListInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRateLimit.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRateLimit.setDescription('The maximum rate in kBps(kilobytes per second)')
accessListInterfaceExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 8), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceExceedAction.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceExceedAction.setDescription('The action to perform when the condition is true.')
accessListInterfaceShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 9), Shaper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceShaper.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceShaper.setDescription('Enable/disable shaper.\n         This object is supported only in B-series.')
accessListInterfaceBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 10), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceBurst.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceBurst.setDescription('The maximum Burst rate in kBps(kilobytes per second).\n\t    This object is supported only by E-Series and G-series.')
accessListInterfaceRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRedirectIfIndex.setDescription('This object controls redirection of traffic matching this ACG. If the\n             value is a valid ifIndex, the traffic will be redirected to it. If the value is 0 \n             redirection is disabled. Setting this object requires that accessListInterfaceRedirectVlanID is also set.')
accessListInterfaceRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectVlanID.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRedirectVlanID.setDescription('This object controls redirection of traffic matching this ACG. If the\n             value is a valid VLAN ID, the traffic will be redirected to it. If the value is 0 \n             redirection is disabled. If the device is TMetro, this object sets the tag substitution\n             policy for this access group')
accessListInterfaceRedirectNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceRedirectNexthop.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRedirectNexthop.setDescription('This object controls redirection of traffic matching this ACG. If the\n             value is a valid IP address then the traffic will be redirected to it. If the value is 0 \n             redirection is disabled.')
accessListInterfacePeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 14), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePeakRate.setStatus('current')
if mibBuilder.loadTexts: accessListInterfacePeakRate.setDescription('Peak Information Rate in kBps(kilobytes per second).')
accessListInterfacePeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 15), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePeakBurst.setStatus('current')
if mibBuilder.loadTexts: accessListInterfacePeakBurst.setDescription('Peak Burst Size in kBps(kilobytes per second).')
accessListInterfaceColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceColorAware.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceColorAware.setDescription('Toggle Color aware traffic metering. Disabled by default.')
accessListInterfacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dcsp", 1), ("priority", 2), ("priority-dp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfacePolicy.setStatus('current')
if mibBuilder.loadTexts: accessListInterfacePolicy.setDescription('Set remarking policy.')
accessListInterfaceTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListInterfaceTrafficClass.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceTrafficClass.setDescription('Diff Serv CP - Type of Service\n             In E-Series and G-series the range is 0..63. A value of 256 means Traffic Class is not set.')
accessListInterfaceSpanRootTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceSpanRootTrack.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceSpanRootTrack.setDescription('The span root track option for VLAN redirects.')
accessListInterfaceUntagFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceUntagFilter.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceUntagFilter.setDescription('The filter for tagged or untagged backets to be applied.')
accessListInterfaceTxq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceTxq.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceTxq.setDescription('This object performs QoS and remarking of traffic matching an ACG')
accessListInterfaceTxqDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 22), TxqDropLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceTxqDropLevel.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceTxqDropLevel.setDescription('This object shows the drop-level (green/yellow)\n\t\t and is related to accessListInterfaceTxq.')
accessListInterfaceApplyMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceApplyMirror.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceApplyMirror.setDescription('This object shows that the traffic on the interface will be mirrored')
accessListInterfaceStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 24), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceStatistics.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceStatistics.setDescription('This object enables statistics on the interface.')
accessListInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 25), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceDirection.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceDirection.setDescription('This object determines the ingress-egress type of applied ACL.')
accessListInterfaceRateStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 3, 1, 1, 26), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListInterfaceRateStatistics.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRateStatistics.setDescription('This object enables rate statistics on the interface.')
accessListVLANTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: accessListVLANTable.setStatus('current')
if mibBuilder.loadTexts: accessListVLANTable.setDescription('This table controls the assignment of access groups to a VLAN.')
accessListVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListVLANTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListVLANGroupIndex"))
if mibBuilder.loadTexts: accessListVLANEntry.setStatus('current')
if mibBuilder.loadTexts: accessListVLANEntry.setDescription('An entry in the AccessListVLANEntry table.')
accessListVLANTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListVLANTableIndex.setStatus('current')
if mibBuilder.loadTexts: accessListVLANTableIndex.setDescription('This object identifies the order in which the access group was applied on this VLAN.')
accessListVLANGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListVLANGroupIndex.setStatus('current')
if mibBuilder.loadTexts: accessListVLANGroupIndex.setDescription('This indicates the index of the access group for this VLAN. This value is \n         the same as the value of accessListControlListGroup for the assigned ACL.')
accessListVLANDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANDscp.setStatus('current')
if mibBuilder.loadTexts: accessListVLANDscp.setDescription('Enable Diffserv codepoint.')
accessListVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: accessListVLANRowStatus.setDescription('This indicates the row status & enables creation & delettion of rows in\n\t     this and related tables. See SNMPv2-TC for more information.')
accessListVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPriority.setStatus('current')
if mibBuilder.loadTexts: accessListVLANPriority.setDescription('Priority level value. Valid values are 0 to 7, 8 means undefined.')
accessListVLANDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 6), AccessListDiscard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANDiscard.setStatus('current')
if mibBuilder.loadTexts: accessListVLANDiscard.setDescription('Mark discardable or normal for priority on access group\n         Only the E-Series family and the G-Series family boards \n         support the values green, yellow and red. Other\n         values are not supported by the E-Series and G-series.')
accessListVLANRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRateLimit.setStatus('current')
if mibBuilder.loadTexts: accessListVLANRateLimit.setDescription('The maximum rate in kBps(kilobytes per second).')
accessListVLANExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 8), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANExceedAction.setStatus('current')
if mibBuilder.loadTexts: accessListVLANExceedAction.setDescription('The action to perform when the condition is true.')
accessListVLANBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 9), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANBurst.setStatus('current')
if mibBuilder.loadTexts: accessListVLANBurst.setDescription('The maximum Burst rate in kBps(kilobytes per second).\n\t    This object is supported only by E-Series and G-series.')
accessListVLANRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: accessListVLANRedirectIfIndex.setDescription('This object controls redirection of traffic matching this ACG. If the\n             value is a valid ifIndex, the traffic will be redirected to it. If the value is 0 \n             redirection is disabled. Setting this object requires that accessListInterfaceRedirectVlanID is also set.')
accessListVLANRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectVlanID.setStatus('current')
if mibBuilder.loadTexts: accessListVLANRedirectVlanID.setDescription('his object controls redirection of traffic matching this ACG. If the\n             value is a valid VLAN ID, the traffic will be redirected to it. If the value is 0 \n             redirection is disabled. If the device is TMetro, this object sets the tag substitution\n             policy for this access group')
accessListVLANRedirectNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANRedirectNexthop.setStatus('current')
if mibBuilder.loadTexts: accessListVLANRedirectNexthop.setDescription('This object controls redirection of traffic matching this ACG. If the\n             value is a valid IP address then the traffic will be redirected to it. If the value is 0 \n             redirection is disabled.')
accessListVLANPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 13), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPeakRate.setStatus('current')
if mibBuilder.loadTexts: accessListVLANPeakRate.setDescription('Peak Information Rate in kBps(kilobytes per second).')
accessListVLANPeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 14), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPeakBurst.setStatus('current')
if mibBuilder.loadTexts: accessListVLANPeakBurst.setDescription('Peak Burst Size in kBps(kilobytes per second).')
accessListVLANColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANColorAware.setStatus('current')
if mibBuilder.loadTexts: accessListVLANColorAware.setDescription('Toggle Color aware traffic metering.Disabled by default.')
accessListVLANPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dcsp", 1), ("priority", 2), ("priority-dp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANPolicy.setStatus('current')
if mibBuilder.loadTexts: accessListVLANPolicy.setDescription('Set remarking policy.')
accessListVLANTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListVLANTrafficClass.setStatus('current')
if mibBuilder.loadTexts: accessListVLANTrafficClass.setDescription('Diff Serv CP - Type of Service\n             In E-Series and G-series the range is 0..63. A value of 256 means that Traffic Class is not set.')
accessListVLANSpanRootTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANSpanRootTrack.setStatus('current')
if mibBuilder.loadTexts: accessListVLANSpanRootTrack.setDescription('The span root track option for VLAN redirects.')
accessListVLANUntagFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANUntagFilter.setStatus('current')
if mibBuilder.loadTexts: accessListVLANUntagFilter.setDescription('The filter for tagged or untagged backets to be applied')
accessListVLANApplyMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANApplyMirror.setStatus('current')
if mibBuilder.loadTexts: accessListVLANApplyMirror.setDescription('This object shows that the traffic on the interface will be mirrored.')
accessListVLANStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 21), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANStatistics.setStatus('current')
if mibBuilder.loadTexts: accessListVLANStatistics.setDescription('This object enables statistics on the interface.')
accessListVLANDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 4, 1, 1, 22), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListVLANDirection.setStatus('current')
if mibBuilder.loadTexts: accessListVLANDirection.setDescription('This object determines the ingress-egress type of applied ACL.')
accessListSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1), )
if mibBuilder.loadTexts: accessListSapTable.setStatus('current')
if mibBuilder.loadTexts: accessListSapTable.setDescription('This table controls the assigment of access groups to a SAP.')
accessListSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapTableIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapGroupIndex"))
if mibBuilder.loadTexts: accessListSapEntry.setStatus('current')
if mibBuilder.loadTexts: accessListSapEntry.setDescription('An entry in the AccessListSapEntry table.')
accessListSapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapTableIndex.setStatus('current')
if mibBuilder.loadTexts: accessListSapTableIndex.setDescription('This object identifies the row number for this (ifIndex) interface.')
accessListSapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapGroupIndex.setStatus('current')
if mibBuilder.loadTexts: accessListSapGroupIndex.setDescription('This indicates the index of the access group for this interface. This value is\n         the same as the value of accessListControlListGroup for the assigned ACL.')
accessListSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: accessListSapRowStatus.setDescription('This indicates the row status & enables creation & deletion of lines in\n\t     this (and related) tables. See SNMPv2-TC for more information.')
accessListSapRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 4), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapRateLimit.setStatus('current')
if mibBuilder.loadTexts: accessListSapRateLimit.setDescription('The maximum rate in kBps(kilobytes per second)')
accessListSapExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 5), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapExceedAction.setStatus('current')
if mibBuilder.loadTexts: accessListSapExceedAction.setDescription('The action to perform when the condition is true.')
accessListSapBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 6), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapBurst.setStatus('current')
if mibBuilder.loadTexts: accessListSapBurst.setDescription('The maximum Burst rate in kBps(kilobytes per second).\n\t    This object is supported only by E-Series and G-series.')
accessListSapPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 7), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapPeakRate.setStatus('current')
if mibBuilder.loadTexts: accessListSapPeakRate.setDescription('Peak Information Rate in kBps(kilobytes per second).')
accessListSapPeakBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 8), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapPeakBurst.setStatus('current')
if mibBuilder.loadTexts: accessListSapPeakBurst.setDescription('Peak Burst Size in kBps(kilobytes per second).')
accessListSapColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessListSapColorAware.setStatus('current')
if mibBuilder.loadTexts: accessListSapColorAware.setDescription('Toggle Color aware traffic metering. Disabled by default.')
accessListSapTxq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapTxq.setStatus('current')
if mibBuilder.loadTexts: accessListSapTxq.setDescription('This object performs QoS and remarking of traffic matching an ACG')
accessListSapTxqDropLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 11), TxqDropLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapTxqDropLevel.setStatus('current')
if mibBuilder.loadTexts: accessListSapTxqDropLevel.setDescription('This object shows the drop-level (green/yellow)\n\t and is related to accessListInterfaceTxq.')
accessListSapStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 12), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapStatistics.setStatus('current')
if mibBuilder.loadTexts: accessListSapStatistics.setDescription('This object enables statistics on the SAP.')
accessListSapRateStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 13), AccessListStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapRateStatistics.setStatus('current')
if mibBuilder.loadTexts: accessListSapRateStatistics.setDescription('This object enables rate statistics on the SAP.')
accessListSapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 5, 1, 1, 14), AccessListDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: accessListSapDirection.setStatus('current')
if mibBuilder.loadTexts: accessListSapDirection.setDescription('This object determines the ingress-egress type of applied ACL.')
accessListInterfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1), )
if mibBuilder.loadTexts: accessListInterfaceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceStatisticsTable.setDescription('This table serves the interface statistics.')
accessListInterfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListInterfaceStatisticsGroupIndex"))
if mibBuilder.loadTexts: accessListInterfaceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceStatisticsEntry.setDescription('An entry in the accessListInterfaceStatisticsTable table.')
accessListInterfaceStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListInterfaceStatisticsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceStatisticsGroupIndex.setDescription('This indicates the index of the access group for this interface. This value is\n \tthe same as the value of accessListControlListGroup for the assigned ACL.')
accessListInterfaceGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceGreenBytes.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceGreenBytes.setDescription('This object shows green traffic in bytes for access group with enabled rate-limit statistics.')
accessListInterfaceYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceYellowBytes.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceYellowBytes.setDescription('This object shows yellow traffic in bytes for access group with enabled rate-limit statistics.')
accessListInterfaceRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceRedBytes.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceRedBytes.setDescription('This object shows red traffic in bytes for access group with enabled rate-limit statistics.')
accessListInterfaceClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListInterfaceClassifiedPackets.setStatus('current')
if mibBuilder.loadTexts: accessListInterfaceClassifiedPackets.setDescription('This object shows match classified packets in bytes for access group with enabled statistics.')
accessListSapStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1), )
if mibBuilder.loadTexts: accessListSapStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: accessListSapStatisticsTable.setDescription('This table serves the Sap statistics.')
accessListSapStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "accessListSapStatisticsGroupIndex"))
if mibBuilder.loadTexts: accessListSapStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: accessListSapStatisticsEntry.setDescription('An entry in the accessListSapStatisticsTable table.')
accessListSapStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: accessListSapStatisticsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: accessListSapStatisticsGroupIndex.setDescription('This indicates the index of the access group for this Sap. This value is\n \tthe same as the value of accessListControlListGroup for the assigned ACL.')
accessListSapGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapGreenBytes.setStatus('current')
if mibBuilder.loadTexts: accessListSapGreenBytes.setDescription('This object shows green traffic in bytes for access group with enabled rate-limit statistics.')
accessListSapYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapYellowBytes.setStatus('current')
if mibBuilder.loadTexts: accessListSapYellowBytes.setDescription('This object shows yellow traffic in bytes for access group with enabled rate-limit statistics.')
accessListSapRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapRedBytes.setStatus('current')
if mibBuilder.loadTexts: accessListSapRedBytes.setDescription('This object shows red traffic in bytes for access group with enabled rate-limit statistics.')
accessListSapClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessListSapClassifiedPackets.setStatus('current')
if mibBuilder.loadTexts: accessListSapClassifiedPackets.setDescription('This object shows classified packets in bytes for access group with enabled match statistics.')
ispUpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: ispUpLinkTable.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkTable.setDescription('This table controls the ISP up-links. This table is supported only by B-Series.')
ispUpLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "ispUpLinkIndex"))
if mibBuilder.loadTexts: ispUpLinkEntry.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkEntry.setDescription('An entry in the ispUpLinkTable table.')
ispUpLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: ispUpLinkIndex.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkIndex.setDescription('The ISP index.')
ispUpLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkIfIndex.setDescription('The ifIndex (from RFC1213) that this ISP belongs to.')
ispUpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 3), ISPType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkType.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkType.setDescription('The ispUpLinkType object shows if the ISP is connective or normal.')
ispUpLinkAccessGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUpLinkAccessGroup.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkAccessGroup.setDescription('A valid index (accessListControlListGroup) from accessListControlTable.\n\t     For the ISP up-link the index groups are 100..199.')
ispUpLinkVLANid = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkVLANid.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkVLANid.setDescription('The VID for this link. 0 means no VID.')
ispUpLinkVLANtag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 6), VlanTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUpLinkVLANtag.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkVLANtag.setDescription('Type of the VLAN - tagged or untagged.')
ispUpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUpLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: ispUpLinkRowStatus.setDescription('This indicates the row status and enables creation & deletion of rows in\n\t     this and related tables. See SNMPv2-TC for more information.')
ispUserInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2), )
if mibBuilder.loadTexts: ispUserInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceTable.setDescription('This table controls the assignment of ISP users to an interface.\n        This table is supported only by B-Series.')
ispUserInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ispUserInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceEntry.setDescription('An entry in the ispUserInterfaceTable table.')
ispUserInterfaceAssigen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 1), AssigenValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceAssigen.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceAssigen.setDescription('Indicates if an ISP user is assigned to this interface.')
ispUserInterfaceIspUplinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ispUserInterfaceIspUplinkIndex.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceIspUplinkIndex.setDescription('A valid index from ispUpLinkTable.')
ispUserInterfaceRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 3), Rate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceRateLimit.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceRateLimit.setDescription('The maximum rate.')
ispUserInterfaceConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 4), ConformAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceConformAction.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceConformAction.setDescription('The action to perform when the condition is true.')
ispUserInterfaceExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 5), ExceedAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceExceedAction.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceExceedAction.setDescription('The action to perform when the condition is true.')
ispUserInterfaceShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 2, 2, 1, 6), Shaper()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispUserInterfaceShaper.setStatus('current')
if mibBuilder.loadTexts: ispUserInterfaceShaper.setDescription('This object controls the status of the shaper.')
standardAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListAction"))
if mibBuilder.loadTexts: standardAccessListRuleMatched.setStatus('current')
if mibBuilder.loadTexts: standardAccessListRuleMatched.setDescription('This trap indicates that a packet matching a standard ACL rule has been received.')
extendedAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListAction"))
if mibBuilder.loadTexts: extendedAccessListRuleMatched.setStatus('current')
if mibBuilder.loadTexts: extendedAccessListRuleMatched.setDescription('This trap indicates that a packet matching an extended ACL rule has been received.')
macAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListAction"))
if mibBuilder.loadTexts: macAccessListRuleMatched.setStatus('current')
if mibBuilder.loadTexts: macAccessListRuleMatched.setDescription('This trap indicates that a packet matching a mac ACL rule has been received.')
etherTypeAccessListRuleMatched = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("Q-BRIDGE-MIB", "dot1qVlanStatus"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListAction"))
if mibBuilder.loadTexts: etherTypeAccessListRuleMatched.setStatus('current')
if mibBuilder.loadTexts: etherTypeAccessListRuleMatched.setDescription('This trap indicates that a packet matching a ether-type ACL rule has been received.')
prvtSwitchAccessListMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3, 1))
prvtSwitchAccessListNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 6, 1, 3, 1, 1)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "standardAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "extendedAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "macAccessListRuleMatched"), ("PRVT-SWITCH-ACCESS-LIST-MIB", "etherTypeAccessListRuleMatched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtSwitchAccessListNotificationGroup = prvtSwitchAccessListNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: prvtSwitchAccessListNotificationGroup.setDescription('Private Notification Group.')
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", extendedAccessListTos=extendedAccessListTos, PYSNMP_MODULE_ID=prvtSwitchAccessListMib, macAccessListMacSrc=macAccessListMacSrc, accessListSapTable=accessListSapTable, accessListInterfacePriority=accessListInterfacePriority, accessListInterfacePolicy=accessListInterfacePolicy, extendedAccessListIcmpType=extendedAccessListIcmpType, accessListSapPeakRate=accessListSapPeakRate, accessListsServicesStatistics=accessListsServicesStatistics, standardAccessListRuleMatched=standardAccessListRuleMatched, extendedAccessListRowStatus=extendedAccessListRowStatus, macAccessListRuleMatched=macAccessListRuleMatched, standardAccessListProviderVlanId=standardAccessListProviderVlanId, standardAccessListProviderVlanMask=standardAccessListProviderVlanMask, extendedAccessListProviderVlanId=extendedAccessListProviderVlanId, accessLists=accessLists, accessListInterfaceStatistics=accessListInterfaceStatistics, ispUserInterfaceAssigen=ispUserInterfaceAssigen, extendedAccessListVlanId=extendedAccessListVlanId, etherTypeAccessListVlanId=etherTypeAccessListVlanId, extendedAccessListLog=extendedAccessListLog, macAccessListPrecedence=macAccessListPrecedence, extendedAccessListIpMASKsrc=extendedAccessListIpMASKsrc, accessListInterfacePeakBurst=accessListInterfacePeakBurst, AssigenValue=AssigenValue, standardAccessListRowStatus=standardAccessListRowStatus, extendedAccessListPortNumDst=extendedAccessListPortNumDst, accessListInterfaceShaper=accessListInterfaceShaper, ispUpLinkRowStatus=ispUpLinkRowStatus, accessListVLANPriority=accessListVLANPriority, accessListSapStatistics=accessListSapStatistics, standardAccessListTable=standardAccessListTable, macAccessListInnerVlanMask=macAccessListInnerVlanMask, accessListInterfaceRateStatistics=accessListInterfaceRateStatistics, etherTypeAccessListProviderVlanMask=etherTypeAccessListProviderVlanMask, accessListVLANStatistics=accessListVLANStatistics, accessListInterfaceRateLimit=accessListInterfaceRateLimit, accessListVLANRedirectVlanID=accessListVLANRedirectVlanID, macAccessListEntry=macAccessListEntry, accessListInterfaceTable=accessListInterfaceTable, macAccessListEtherType=macAccessListEtherType, accessListSapTableIndex=accessListSapTableIndex, extendedAccessListPortRangeDst=extendedAccessListPortRangeDst, extendedAccessListDscp=extendedAccessListDscp, accessListSapRateLimit=accessListSapRateLimit, accessListInterfaceSpanRootTrack=accessListInterfaceSpanRootTrack, etherTypeAccessListEntry=etherTypeAccessListEntry, accessListInterfaceStatisticsGroupIndex=accessListInterfaceStatisticsGroupIndex, standardAccessListLog=standardAccessListLog, accessListInterfaceGroupIndex=accessListInterfaceGroupIndex, accessListVLANSpanRootTrack=accessListVLANSpanRootTrack, extendedAccessListPortDefDst=extendedAccessListPortDefDst, IpProtocol=IpProtocol, TxqDropLevel=TxqDropLevel, extendedAccessListEstablished=extendedAccessListEstablished, accessListInterfaceRowStatus=accessListInterfaceRowStatus, accessListVLANTableIndex=accessListVLANTableIndex, macAccessListIndex=macAccessListIndex, extendedAccessListPrec=extendedAccessListPrec, extendedAccessListIndex=extendedAccessListIndex, etherTypeAccessListProviderVlanId=etherTypeAccessListProviderVlanId, isp=isp, standardAccessListIndex=standardAccessListIndex, accessListVLANTable=accessListVLANTable, extendedAccessListIpMASKdst=extendedAccessListIpMASKdst, accessListSapGroupIndex=accessListSapGroupIndex, extendedAccessListModifyTos=extendedAccessListModifyTos, accessListVLANRedirectNexthop=accessListVLANRedirectNexthop, etherTypeAccessListRuleMatched=etherTypeAccessListRuleMatched, extendedAccessListTable=extendedAccessListTable, prvtSwitchAccessListMib=prvtSwitchAccessListMib, ispUpLinkAccessGroup=ispUpLinkAccessGroup, AccessListDiscard=AccessListDiscard, etherTypeAccessListRowStatus=etherTypeAccessListRowStatus, accessListVLANGroupIndex=accessListVLANGroupIndex, accessListVLANExceedAction=accessListVLANExceedAction, accessListInterfaceEntry=accessListInterfaceEntry, accessListSapRedBytes=accessListSapRedBytes, accessListInterfaceExceedAction=accessListInterfaceExceedAction, etherTypeAccessListAction=etherTypeAccessListAction, accessListSapPeakBurst=accessListSapPeakBurst, macAccessListVpt=macAccessListVpt, accessListVLANTrafficClass=accessListVLANTrafficClass, accessListVLANRowStatus=accessListVLANRowStatus, ispUpLinkVLANtag=ispUpLinkVLANtag, extendedAccessListPortDefSrc=extendedAccessListPortDefSrc, ispUserInterfaceTable=ispUserInterfaceTable, AccessListModifyTos=AccessListModifyTos, macAccessListMacSrcMask=macAccessListMacSrcMask, etherTypeAccessListVlanMask=etherTypeAccessListVlanMask, accessListSapColorAware=accessListSapColorAware, accessListVLANUntagFilter=accessListVLANUntagFilter, ispUpLinkEntry=ispUpLinkEntry, accessListInterfaceGreenBytes=accessListInterfaceGreenBytes, accessListVLANColorAware=accessListVLANColorAware, accessListSapTxqDropLevel=accessListSapTxqDropLevel, accessListInterfaceRedirectNexthop=accessListInterfaceRedirectNexthop, ispUserInterfaceEntry=ispUserInterfaceEntry, AccessListEstablished=AccessListEstablished, etherTypeAccessListRemark=etherTypeAccessListRemark, standardAccessListIpMASKsrc=standardAccessListIpMASKsrc, accessListSapYellowBytes=accessListSapYellowBytes, prvtSwitchAccessListConformance=prvtSwitchAccessListConformance, accessListInterfaceTxq=accessListInterfaceTxq, accessListControlListGroup=accessListControlListGroup, PortDef=PortDef, ispUserInterfaceConformAction=ispUserInterfaceConformAction, accessListTemplate=accessListTemplate, accessListInterfaceDscp=accessListInterfaceDscp, accessListVLANBurst=accessListVLANBurst, accessListInterfaceTableIndex=accessListInterfaceTableIndex, accessListsInterfaces=accessListsInterfaces, ispUserInterfaceShaper=ispUserInterfaceShaper, accessListInterfaceColorAware=accessListInterfaceColorAware, accessListSapExceedAction=accessListSapExceedAction, accessListSapTxq=accessListSapTxq, accessListSapGreenBytes=accessListSapGreenBytes, ExceedAction=ExceedAction, standardAccessListEntry=standardAccessListEntry, accessListSapStatisticsTable=accessListSapStatisticsTable, extendedAccessListPortRangeSrc=extendedAccessListPortRangeSrc, ispUserInterfaceRateLimit=ispUserInterfaceRateLimit, accessListInterfaceClassifiedPackets=accessListInterfaceClassifiedPackets, accessListSapStatisticsEntry=accessListSapStatisticsEntry, extendedAccessListIpSrc=extendedAccessListIpSrc, accessListSapBurst=accessListSapBurst, accessListInterfaceRedirectVlanID=accessListInterfaceRedirectVlanID, extendedAccessListIpProtocol=extendedAccessListIpProtocol, Shaper=Shaper, AccessListDirection=AccessListDirection, ispUpLinkIndex=ispUpLinkIndex, accessListsServices=accessListsServices, etherTypeAccessListIndex=etherTypeAccessListIndex, ispUserInterfaceIspUplinkIndex=ispUserInterfaceIspUplinkIndex, accessListVLANDiscard=accessListVLANDiscard, VlanTag=VlanTag, etherTypeAccessListTable=etherTypeAccessListTable, accessListInterfaceRedirectIfIndex=accessListInterfaceRedirectIfIndex, accessListsInterfaceStatistics=accessListsInterfaceStatistics, accessListVLANDirection=accessListVLANDirection, extendedAccessListEntry=extendedAccessListEntry, etherTypeAccessListEtherType=etherTypeAccessListEtherType, standardAccessListVlanMask=standardAccessListVlanMask, accessListVLANEntry=accessListVLANEntry, extendedAccessListPortNumSrc=extendedAccessListPortNumSrc, macAccessListVlanMask=macAccessListVlanMask, etherTypeAccessListEtherTypeCodeMask=etherTypeAccessListEtherTypeCodeMask, ISPType=ISPType, ispUpLinkTable=ispUpLinkTable, macAccessListMatchTrafficPort=macAccessListMatchTrafficPort, extendedAccessListUntaggedMode=extendedAccessListUntaggedMode, AccessListRemarkString=AccessListRemarkString, accessListControlEntry=accessListControlEntry, accessListVLANPeakBurst=accessListVLANPeakBurst, accessListSapRateStatistics=accessListSapRateStatistics, standardAccessListIpSrc=standardAccessListIpSrc, macAccessListMatchTraffic=macAccessListMatchTraffic, accessListVLANRedirectIfIndex=accessListVLANRedirectIfIndex, extendedAccessListAction=extendedAccessListAction, AccessListStatistics=AccessListStatistics, accessListInterfaceTxqDropLevel=accessListInterfaceTxqDropLevel, accessListVLANRateLimit=accessListVLANRateLimit, standardAccessListRemark=standardAccessListRemark, accessListVLANPolicy=accessListVLANPolicy, accessListInterfaceDirection=accessListInterfaceDirection, etherTypeAccessListLog=etherTypeAccessListLog, AccessListAction=AccessListAction, accessListInterfacePeakRate=accessListInterfacePeakRate, standardAccessListAction=standardAccessListAction, standardAccessListUntaggedMode=standardAccessListUntaggedMode, macAccessListRemark=macAccessListRemark, accessListInterfaceTrafficClass=accessListInterfaceTrafficClass, accessListSapStatisticsGroupIndex=accessListSapStatisticsGroupIndex, extendedAccessListIgmpType=extendedAccessListIgmpType, accessListSapDirection=accessListSapDirection, Rate=Rate, accessListVLANDscp=accessListVLANDscp, accessListVLANApplyMirror=accessListVLANApplyMirror, macAccessListInnerVlanId=macAccessListInnerVlanId, macAccessListLog=macAccessListLog, macAccessListMacDst=macAccessListMacDst, accessListSapEntry=accessListSapEntry, standardAccessListVpt=standardAccessListVpt, ispUpLinkType=ispUpLinkType, ispUserInterfaceExceedAction=ispUserInterfaceExceedAction, accessListInterfaceRedBytes=accessListInterfaceRedBytes, accessListInterfaceDiscard=accessListInterfaceDiscard, macAccessListTable=macAccessListTable, extendedAccessListVlanMask=extendedAccessListVlanMask, accessListInterfaceBurst=accessListInterfaceBurst, macAccessListDscp=macAccessListDscp, prvtSwitchAccessListNotifications=prvtSwitchAccessListNotifications, accessListSapRowStatus=accessListSapRowStatus, ispUpLinkIfIndex=ispUpLinkIfIndex, macAccessListInnerVpt=macAccessListInnerVpt, macAccessListMacDstMask=macAccessListMacDstMask, macAccessListRowStatus=macAccessListRowStatus, extendedAccessListIpDest=extendedAccessListIpDest, extendedAccessListProviderVlanMask=extendedAccessListProviderVlanMask, macAccessListUntaggedMode=macAccessListUntaggedMode, macAccessListDropLevel=macAccessListDropLevel, ConformAction=ConformAction, macAccessListTos=macAccessListTos, accessListInterfaceStatisticsTable=accessListInterfaceStatisticsTable, extendedAccessListVpt=extendedAccessListVpt, extendedAccessListIcmpCode=extendedAccessListIcmpCode, accessListInterfaceYellowBytes=accessListInterfaceYellowBytes, accessGroupsDefinitions=accessGroupsDefinitions, accessListSapClassifiedPackets=accessListSapClassifiedPackets, standardAccessListVlanId=standardAccessListVlanId, standardAccessListDropLevel=standardAccessListDropLevel, accessListVLANPeakRate=accessListVLANPeakRate, macAccessListAction=macAccessListAction, accessListControlTable=accessListControlTable, extendedAccessListProviderVpt=extendedAccessListProviderVpt, MatchTraffic=MatchTraffic, accessListsVLAN=accessListsVLAN, standardAccessListProviderVpt=standardAccessListProviderVpt, prvtSwitchAccessListNotificationGroup=prvtSwitchAccessListNotificationGroup, etherTypeAccessListProviderVpt=etherTypeAccessListProviderVpt, standardAccessListDscp=standardAccessListDscp, extendedAccessListDropLevel=extendedAccessListDropLevel, accessListInterfaceStatisticsEntry=accessListInterfaceStatisticsEntry, ispUpLinkVLANid=ispUpLinkVLANid, extendedAccessListRemark=extendedAccessListRemark, accessListInterfaceApplyMirror=accessListInterfaceApplyMirror, prvtSwitchAccessListMibGroups=prvtSwitchAccessListMibGroups, accessListControlRowStatus=accessListControlRowStatus, accessListInterfaceUntagFilter=accessListInterfaceUntagFilter, extendedAccessListRuleMatched=extendedAccessListRuleMatched, macAccessListVlanId=macAccessListVlanId)
