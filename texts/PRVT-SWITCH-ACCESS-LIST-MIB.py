#
# PySNMP MIB module PRVT-SWITCH-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SWITCH-ACCESS-LIST-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 14:17:53 2021
# On host fv-az33-388 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
sapEncapValue, sapPortId, serviceId = mibBuilder.importSymbols("PRVT-SERV-MIB", "sapEncapValue", "sapPortId", "serviceId")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, TimeTicks, Bits, ModuleIdentity, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Bits", "ModuleIdentity", "Integer32", "Gauge32")
DisplayString, RowStatus, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "MacAddress")
prvtSwitchAccessListMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 1))
prvtSwitchAccessListMIB.setRevisions(('2010-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setLastUpdated('201006250000Z')
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSwitchAccessListMIB.setDescription('The private MIB module that controls switch access-list parameters')
class PrvtSwAclAcgType(TextualConvention, Integer32):
    description = 'Types of access groups.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ipStd", 0), ("ipExt", 1), ("mac", 2), ("etherType", 3))

class PrvtSwAclIpv4PrefixType(TextualConvention, OctetString):
    description = 'An IPv4 address prefix defining a subnet.\n         The value 255.255.255.255/0 will match all IPv4 traffic.'
    status = 'current'
    displayHint = '1d.1d.1d.1d/1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class PrvtSwAclVlanIdTypeOrNone(TextualConvention, Integer32):
    description = "A VLAN identifier.\n         The value '0' indicates 'no value' and its behavior differs\n         depending upon the object."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class PrvtSwAclDscpTypeOrNone(TextualConvention, Unsigned32):
    description = "An IPv4 DiffServ Code Point value.\n         The value '64' indicates 'no value' and its behavior differs\n         depending upon the object (e.g. could indicate that the DSCP\n         field is ignored or could indicate that the DSCP field is\n         unaffected.)"
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class PrvtSwAclTosTypeOrNone(TextualConvention, Unsigned32):
    description = "An IPv4 Type Of Service value.\n         The value '16' indicates 'no value' (the TOS field is ignored.)"
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16)

class PrvtSwAclFcTypeOrNone(TextualConvention, Integer32):
    description = "A forwarding class value.\n         The value 'none' indicates 'no value' (the FC field is not affected)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtSwAclPrecedenceTypeOrNone(TextualConvention, Integer32):
    description = "An IPv4 precedence value.\n         The value '8' indicates 'no value' (the Precedence field is ignored.)"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flashOverride", 4), ("critical", 5), ("internet", 6), ("network", 7), ("none", 8))

class PrvtSwAclVptTypeOrNone(TextualConvention, Unsigned32):
    description = "A VLAN priority tag value.\n         The value '8' indicates 'no value' and its behavior differs\n         depending upon the object (e.g. could indicate that the VPT\n         field is ignored or could indicate that the VPT field is\n         unaffected.)"
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 8)

class PrvtSwAclVlanMaskType(TextualConvention, OctetString):
    description = "A VLAN mask.\n         A '1' in a bit position will result in the corresponding bit in the\n         VLAN ID becoming 'don't care' (i.e. always match)."
    status = 'current'
    displayHint = '1x:1x:1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class PrvtSwAclEtherType(TextualConvention, OctetString):
    description = 'An EtherType value.'
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PrvtSwAclEtherTypeMask(TextualConvention, OctetString):
    description = "A mask to apply to an EtherType value (PrvtSwAclEtherType).\n         Currently, only values of '0000' and 'FFFF' are permitted.\n         The value '0000' represents that no mask is applied (i.e traffic must match\n         the EtherType value exactly).\n         The value 'FFFF' represents no restriction by EtherType (i.e. match any value)."
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PrvtSwAclAction(TextualConvention, Integer32):
    description = 'An action to take when an access-list condition is asserted.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permit", 0), ("deny", 1))

class PrvtSwAclIpProtocol(TextualConvention, Integer32):
    description = 'The protocol number as defined in the IP datagram header.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrvtSwAclPortIdTypeOrNone(TextualConvention, Integer32):
    description = "A UDP/TCP port number.\n         The value '-1' indicates that the object has no port\n         ID assigned to it."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class PrvtSwAclExceedAction(TextualConvention, Integer32):
    description = 'An action to take when a limit is exceeded.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noAction", 0), ("markYellow", 1), ("markRed", 2), ("drop", 3))

class PrvtSwAclMatchTrafficType(TextualConvention, Integer32):
    description = 'Types of traffic to match.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("any", 0), ("unknownUnicast", 1), ("knownUnicast", 2), ("unknownMulticast", 3), ("knownMulticast", 4), ("broadcast", 5))

class PrvtSwAclGroupType(TextualConvention, Integer32):
    description = 'Access list group types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("in", 1), ("out", 2), ("vlan", 3))

class PrvtSwAclDescrType(TextualConvention, OctetString):
    description = 'A description string for an item.'
    status = 'current'
    displayHint = '30a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 30)

class PrvtSwAclNameType(TextualConvention, OctetString):
    description = 'The name of an Access Control List.'
    status = 'current'
    displayHint = '10a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

class PrvtSwAclRuleIdType(TextualConvention, Unsigned32):
    description = 'An Access Control List rule identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

class PrvtSwAclStatsType(TextualConvention, Integer32):
    description = 'Types of statistics to monitor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("matchCounterFrames", 1), ("matchCounterBytes", 2), ("rateLimitRedNotRedFrames", 3), ("rateLimitRedNotRedBytes", 4), ("rateLimitGreenNotGreenFrames", 5), ("rateLimitGreenNotGreenBytes", 6), ("rateLimitGreenRedFrames", 7), ("rateLimitGreenRedBytes", 8), ("rateLimitGreenYellowFrames", 9), ("rateLimitGreenYellowBytes", 10), ("rateLimitRedYellowFrames", 11), ("rateLimitRedYellowBytes", 12), ("bwMonMatchCounterFrames", 13), ("bwMonMatchCounterBytes", 14), ("bwMonRedNotRedFrames", 15), ("bwMonRedNotRedBytes", 16), ("bwMonGreenNotGreenFrames", 17), ("bwMonGreenNotGreenBytes", 18), ("bwMonGreenRedFrames", 19), ("bwMonGreenRedBytes", 20), ("bwMonGreenYellowFrames", 21), ("bwMonGreenYellowBytes", 22), ("bwMonRedYellowFrames", 23), ("bwMonRedYellowBytes", 24))

class PrvtSwAclFcType(TextualConvention, Integer32):
    description = 'Types of forwarding classes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtSwAclColorType(TextualConvention, Integer32):
    description = 'Traffic color assignments.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("green", 1), ("yellow", 2), ("red", 3))

class PrvtSwAclProfileIdType(TextualConvention, Integer32):
    description = 'A monitoring profile identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PrvtSwAclRateLimitType(TextualConvention, Integer32):
    description = 'Types of rate limiting.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("single", 1), ("dual", 2))

class PrvtSwAclRateType(TextualConvention, Unsigned32):
    description = 'A rate in kilobits per second (1000 bits/s).'
    status = 'current'
    displayHint = 'd'

class PrvtSwAclBurstSizeType(TextualConvention, Unsigned32):
    description = 'A burst size in kilobits (1000 bits).'
    status = 'current'
    displayHint = 'd'

class PrvtSwAclTagType(TextualConvention, Integer32):
    description = 'Tag for an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2))

prvtSwAclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0))
prvtSwAclObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1))
prvtSwAclMonProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1))
prvtSwAclMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: prvtSwAclMonPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfTable.setDescription('A list of access group monitoring profiles.\n         Up to 50 monitoring profiles are supported.\n         \n         Note that each profile defined in prvtSwAclMonPrfTable must at all times\n         have in prvtSwAclMonPrfStatsTable at least one type of statistic configured\n         (created) for monitoring.\n         \n         This requires that, when creating a new monitoring profile, the SNMP set\n         operation must contain two createAndGo operations, one for creating the\n         entry in prvtSwAclMonPrfTable, and one for simultaneously creating the\n         entry in prvtSwAclMonPrfStatsTable.\n         \n         Deleting a monitoring profile in prvtSwAclMonPrfTable, also deletes all\n         entries belonging to this monitoring profile in prvtSwAclMonPrfStatsTable.')
prvtSwAclMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclMonPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfEntry.setDescription('An entry in prvtSwAclMonPrfTable.')
prvtSwAclMonPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1, 1), PrvtSwAclProfileIdType())
if mibBuilder.loadTexts: prvtSwAclMonPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfId.setDescription('Uniquely identifies a monitoring profile.')
prvtSwAclMonPrfIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMonPrfIdRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfIdRowStatus.setDescription('The RowStatus for the monitoring profile.')
prvtSwAclMonPrfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsTable.setDescription("A list of which statistics a monitoring profile should monitor.\n         Up to a maximum of twenty statistics may be monitored per profile.\n         \n         Note that each profile defined in prvtSwAclMonPrfTable must at all times\n         have in prvtSwAclMonPrfStatsTable at least one type of statistic configured\n         (created) for monitoring.\n         \n         Thus, when deleting, from prvtSwAclMonPrfStatsTable, the last remaining row\n         for a particular monitoring profile, the monitoring profile's entry in\n         prvtSwAclMonPrfTable must also be deleted within the same SNMP set operation.\n         Alternatively, to delete the last remaining statistic for a particular\n         monitoring profile, just delete the monitoring profile in prvtSwAclMonPrfTable.")
prvtSwAclMonPrfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfStatsType"))
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsEntry.setDescription('An entry in prvtSwAclMonPrfStatsTable.')
prvtSwAclMonPrfStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1, 1), PrvtSwAclStatsType())
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsType.setDescription('A type of statistic to monitor.')
prvtSwAclMonPrfStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMonPrfStatsRowStatus.setDescription('The RowStatus for prvtSwAclMonPrfStatsTable.')
prvtSwAclGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2))
prvtSwAclStdTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSwAclStdTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdTable.setDescription('A list of standard IP Access Control Lists.\n         Up to 250 entries are supported.')
prvtSwAclStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdName"))
if mibBuilder.loadTexts: prvtSwAclStdEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdEntry.setDescription('An entry in prvtSwAclStdTable.')
prvtSwAclStdName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclStdName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdName.setDescription('A string uniquely identifying a standard IP Access Control List.')
prvtSwAclStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRowStatus.setDescription('The RowStatus for this standard Access Control List.')
prvtSwAclStdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 1, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdDescr.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdDescr.setDescription('An arbitrary description to assign to this standard Access Control List.')
prvtSwAclStdRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclStdRuleTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleTable.setDescription('A list of rules for standard IP access-lists.\n         Up to 250 entries are supported per prvtSwAclStdName.')
prvtSwAclStdRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclStdRuleId"))
if mibBuilder.loadTexts: prvtSwAclStdRuleEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleEntry.setDescription('An entry in prvtSwAclStdRuleTable.')
prvtSwAclStdRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclStdRuleId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleId.setDescription('Index of the particular rule within the standard IP access control list.')
prvtSwAclStdRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleRowStatus.setDescription('The RowStatus for this standard access-list rule.')
prvtSwAclStdRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleAction.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleAction.setDescription('The action to perform when the condition of this access-list rule is true.')
prvtSwAclStdRuleIpSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 4), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleIpSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleIpSrcPrefix.setDescription('The IP source address prefix defining a subnet associated with this access-list rule.')
prvtSwAclStdRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 5), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanId.setDescription("The VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 6), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleVlanMask.setDescription("The VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 7), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanId.setDescription("The inner VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 8), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVlanMask.setDescription("The inner VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 9), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleVpt.setDescription("The VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 10), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleInnerVpt.setDescription("The inner VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclStdRuleUntaggedMode equals 'true').")
prvtSwAclStdRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 11), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleDscp.setDescription("The DiffServ Code Point associated with this access-list rule.\n         A value of '64' indicates that the DSCP field is ignored.")
prvtSwAclStdRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 2, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclStdRuleUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclStdRuleUntaggedMode.setDescription('Enables untagged mode.\n         In untagged mode, only untagged frames are included in the match comparison,\n         otherwise all tagged and untagged frames are included.')
prvtSwAclExtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclExtTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtTable.setDescription('A list of extended IP Access Control Lists.\n         Up to 250 entries are supported.')
prvtSwAclExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtName"))
if mibBuilder.loadTexts: prvtSwAclExtEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtEntry.setDescription('An entry in prvtSwAclExtTable.')
prvtSwAclExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclExtName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtName.setDescription('A string uniquely identifying an extended IP Access Control List.')
prvtSwAclExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRowStatus.setDescription('The RowStatus for this extended Access Control List.')
prvtSwAclExtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 3, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtDescr.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtDescr.setDescription('An arbitrary description to assign to this extended Access Control List.')
prvtSwAclExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclExtRuleTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleTable.setDescription('A list of rules for extended IP access-lists.\n         Up to 250 entries are supported per prvtSwAclExtName.')
prvtSwAclExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclExtRuleId"))
if mibBuilder.loadTexts: prvtSwAclExtRuleEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleEntry.setDescription('An entry in prvtSwAclExtRuleTable.')
prvtSwAclExtRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclExtRuleId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleId.setDescription('Index of the particular rule within the extended IP access control list.')
prvtSwAclExtRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleRowStatus.setDescription('The RowStatus for this extended access-list rule.')
prvtSwAclExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleAction.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleAction.setDescription('The action to perform when the condition of this access-list rule is true.')
prvtSwAclExtRuleIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 4), PrvtSwAclIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpProtocol.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleIpProtocol.setDescription('The IP protocol number associated with this access-list rule.')
prvtSwAclExtRuleIpSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 5), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleIpSrcPrefix.setDescription('The IP source address prefix defining the subnet associated with this flow.')
prvtSwAclExtRuleIpDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 6), PrvtSwAclIpv4PrefixType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIpDstPrefix.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleIpDstPrefix.setDescription('The IP destination address prefix defining the subnet associated with this flow.')
prvtSwAclExtRuleIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpType.setDescription("The ICMP message type associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals icmp(1).\n         The value '-1' indicates ignore ICMP message type field.")
prvtSwAclExtRuleIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpCode.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleIcmpCode.setDescription("The ICMP message code associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals icmp(1).\n         The value '-1' indicates ignore ICMP message code field.")
prvtSwAclExtRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleEstablished.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleEstablished.setDescription("When TCP protocol type is chosen, setting this object to 'true' indicates that\n         established connections will be matched.\n         Only used when prvtSwAclExtRuleIpProtocol equals tcp(6).")
prvtSwAclExtRuleTcpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 10), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpSrcPort.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpSrcPort.setDescription("The TCP source port associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals tcp(6).\n         The value '-1' indicates ignore the TCP source port field.")
prvtSwAclExtRuleTcpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 11), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpDstPort.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleTcpDstPort.setDescription("The TCP destination port associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals tcp(6).\n         The value '-1' indicates ignore the TCP destination port field.")
prvtSwAclExtRuleUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 12), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpSrcPort.setDescription("The UDP source port associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals udp(17).\n         The value '-1' indicates ignore the UDP source port field.")
prvtSwAclExtRuleUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 13), PrvtSwAclPortIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleUdpDstPort.setDescription("The UDP destination port associated with this access-list rule.\n         Only used when prvtSwAclExtRuleIpProtocol equals udp(17).\n         The value '-1' indicates ignore the UDP destination port field.")
prvtSwAclExtRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 14), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleTos.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleTos.setDescription("The Type of Service value associated with this access-list rule.\n         The value '16' indicates that the TOS field is ignored.")
prvtSwAclExtRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 15), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRulePrecedence.setDescription("The Precedence value associated with this access-list rule.\n         The value '8' indicates that the Precedence field is ignored.")
prvtSwAclExtRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 16), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanId.setDescription("The VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 17), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleVlanMask.setDescription("The VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 18), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanId.setDescription("The inner VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 19), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVlanMask.setDescription("The inner VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 20), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleVpt.setDescription("The VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 21), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleInnerVpt.setDescription("The inner VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclExtRuleUntaggedMode equals 'true').")
prvtSwAclExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 22), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleDscp.setDescription("The DiffServ Code Point associated with this access-list rule.\n         A value of '64' indicates that the DSCP field is ignored.")
prvtSwAclExtRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclExtRuleUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclExtRuleUntaggedMode.setDescription('Enables untagged mode.\n         In untagged mode, only untagged frames are included in the match comparison,\n         otherwise all tagged and untagged frames are included.')
prvtSwAclMacTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclMacTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacTable.setDescription('A list of MAC Access Control Lists.\n         Up to 250 entries are supported.')
prvtSwAclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacName"))
if mibBuilder.loadTexts: prvtSwAclMacEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacEntry.setDescription('An entry in prvtSwAclMacTable.')
prvtSwAclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclMacName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacName.setDescription('A string uniquely identifying a MAC Access Control List.')
prvtSwAclMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRowStatus.setDescription('The RowStatus for this MAC Access Control List.')
prvtSwAclMacDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 5, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacDescr.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacDescr.setDescription('An arbitrary description to assign to this MAC Access Control List.')
prvtSwAclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclMacRuleTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleTable.setDescription('A list of rules for MAC access-lists.\n         Up to 250 entries are supported per prvtSwAclMacName.')
prvtSwAclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMacRuleId"))
if mibBuilder.loadTexts: prvtSwAclMacRuleEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleEntry.setDescription('An entry in prvtSwAclMacRuleTable.')
prvtSwAclMacRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclMacRuleId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleId.setDescription('Index of the particular rule within the MAC access control list.')
prvtSwAclMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleRowStatus.setDescription('The RowStatus for this MAC access-list rule.')
prvtSwAclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleAction.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleAction.setDescription('The action to perform when the condition of this access-list rule is true.')
prvtSwAclMacRuleMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrc.setDescription('The MAC source address associated with this access-list rule.')
prvtSwAclMacRuleMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleMacSrcMask.setDescription("The mask to use with the MAC source address associated with this access-list rule.\n         A '1' in a bit position will result in the corresponding bit in the\n         source MAC address becoming 'don't care' (i.e. always match).\n         Thus, a value of all ones will result in any MAC source address matching.")
prvtSwAclMacRuleMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDst.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDst.setDescription('The MAC destination address associated with this access-list rule.')
prvtSwAclMacRuleMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDstMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleMacDstMask.setDescription("The mask to use with the MAC destination address associated with this access-list rule.\n         A '1' in a bit position will result in the corresponding bit in the\n         destination MAC address becoming 'don't care' (i.e. always match).\n         Thus, a value of all ones will result in any MAC destination address matching.")
prvtSwAclMacRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 8), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleTos.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleTos.setDescription("The Type of Service value associated with this access-list rule.\n         The value '16' indicates that the TOS field is ignored.")
prvtSwAclMacRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 9), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRulePrecedence.setDescription("The Precedence value associated with this access-list rule.\n         The value '8' indicates that the Precedence field is ignored.")
prvtSwAclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 10), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanId.setDescription("The VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclMacRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 11), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleVlanMask.setDescription("The VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclMacRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 12), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanId.setDescription("The inner VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclMacRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 13), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVlanMask.setDescription("The inner VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclMAcRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 14), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleVpt.setDescription("The VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclMacRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 15), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleInnerVpt.setDescription("The inner VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclMacRuleUntaggedMode equals 'true').")
prvtSwAclMacRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 16), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleDscp.setDescription("The DiffServ Code Point associated with this access-list rule.\n         A value of '64' indicates that the DSCP field is ignored.")
prvtSwAclMacRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleUntaggedMode.setDescription('Enables untagged mode.\n         In untagged mode, only untagged frames are included in the match comparison,\n         otherwise all tagged and untagged frames are included.')
prvtSwAclMacRuleDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 6, 1, 18), PrvtSwAclMatchTrafficType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclMacRuleDstAddrType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclMacRuleDstAddrType.setDescription('What type of traffic (based on destination address) to match.')
prvtSwAclEthTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7), )
if mibBuilder.loadTexts: prvtSwAclEthTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthTable.setDescription('A list of EtherType Access Control Lists.\n         Up to 250 entries are supported.')
prvtSwAclEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthName"))
if mibBuilder.loadTexts: prvtSwAclEthEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthEntry.setDescription('An entry in prvtSwAclEthTable.')
prvtSwAclEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 1), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclEthName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthName.setDescription('A string uniquely identifying an EtherType Access Control List.')
prvtSwAclEthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRowStatus.setDescription('The RowStatus for this EtherType Access Control List.')
prvtSwAclEthDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 7, 1, 3), PrvtSwAclDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthDescr.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthDescr.setDescription('An arbitrary description to assign to this EtherType Access Control List.')
prvtSwAclEthRuleTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8), )
if mibBuilder.loadTexts: prvtSwAclEthRuleTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleTable.setDescription('A list of rules for EtherType access-lists.\n         Up to 250 entries are supported per prvtSwAclEthName.')
prvtSwAclEthRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclEthRuleId"))
if mibBuilder.loadTexts: prvtSwAclEthRuleEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleEntry.setDescription('An entry in prvtSwAclEthRuleTable.')
prvtSwAclEthRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 1), PrvtSwAclRuleIdType())
if mibBuilder.loadTexts: prvtSwAclEthRuleId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleId.setDescription('Index of the particular rule within the EtherType IP access control list.')
prvtSwAclEthRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleRowStatus.setDescription('The RowStatus for EtherType access-list rule.')
prvtSwAclEthRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 3), PrvtSwAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleAction.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleAction.setDescription('The action to perform when the condition of this access-list rule is true.')
prvtSwAclEthRuleEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 4), PrvtSwAclEtherType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleEthType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleEthType.setDescription('The EtherType protocol number associated with this access-list rule.')
prvtSwAclEthRuleEthTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 5), PrvtSwAclEtherTypeMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleEthTypeMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleEthTypeMask.setDescription('The EtherType protocol mask to use with this access-list rule.\n         A value of all ones (0xffff) will result in any EtherType protocol number\n         matching.')
prvtSwAclEthRuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 6), PrvtSwAclTosTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleTos.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleTos.setDescription("The Type of Service value associated with this access-list rule.\n         The value '16' indicates that the TOS field is ignored.")
prvtSwAclEthRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 7), PrvtSwAclPrecedenceTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRulePrecedence.setDescription("The Precedence value associated with this access-list rule.\n         The value '8' indicates that the Precedence field is ignored.")
prvtSwAclEthRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 8), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanId.setDescription("The VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 9), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleVlanMask.setDescription("The VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 10), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanId.setDescription("The inner VLAN ID associated with this access-list rule.\n         This must be set to the value '0' (no VLAN ID) when in untagged mode\n         (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleInnerVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 11), PrvtSwAclVlanMaskType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanMask.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVlanMask.setDescription("The inner VLAN mask to use with this access-list rule.\n         This must be set to all ones (0xffff) (always match) when in untagged\n         mode (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 12), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleVpt.setDescription("The VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 13), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleInnerVpt.setDescription("The inner VLAN priority tag associated with this access-list rule.\n         A value of '8' indicates that the VPT field is ignored.\n         This must be set to the value '8' (ignore VPT field) when in untagged\n         mode (i.e. when prvtSwAclEthRuleUntaggedMode equals 'true').")
prvtSwAclEthRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 14), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleDscp.setDescription("The DiffServ Code Point associated with this access-list rule.\n         A value of '64' indicates that the DSCP field is ignored.")
prvtSwAclEthRuleUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 2, 8, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclEthRuleUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclEthRuleUntaggedMode.setDescription('Enables untagged mode.\n         In untagged mode, only untagged frames are included in the match comparison,\n         otherwise all tagged and untagged frames are included.')
prvtSwAclInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3))
prvtSwAclIfAcg = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2))
prvtSwAclIfAcgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: prvtSwAclIfAcgTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgTable.setDescription('This table creates and controls the properties of traffic flows belonging to\n         physical and LAG interfaces.\n         Up to 250 entries are supported per interface (prvtSwAclIfAcgIndex).\n         The key combination (prvtSwAclIfAcgIndex, prvtSwAclIfAcgSeqId) must be unique\n         (i.e. no more than one entry must exist with the same interface and sequence-id\n         combination).')
prvtSwAclIfAcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"))
if mibBuilder.loadTexts: prvtSwAclIfAcgEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgEntry.setDescription('An entry in prvtSwAclIfAcgTable.')
prvtSwAclIfAcgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgIndex.setDescription('The index of the physical or LAG interface to which this row applies.')
prvtSwAclIfAcgSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: prvtSwAclIfAcgSeqId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgSeqId.setDescription('Specifies the sequence (order/priority) in which this access group will be applied.')
prvtSwAclIfAcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 3), PrvtSwAclAcgType())
if mibBuilder.loadTexts: prvtSwAclIfAcgType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgType.setDescription('The type (e.g. ipStd, ipExt, mac, etherType) of access group that this row applies to.')
prvtSwAclIfAcgAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 4), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclIfAcgAclName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgAclName.setDescription('The name of the access list that this row applies to.\n         This must match the name of an ACL created having the type specified by prvtSwAclIfAcgType.\n         (i.e. it must match one of prvtSwAclStdName, prvtSwAclExtName, prvtSwAclMacName,\n         prvtSwAclEthName corresponding to the type specified in prvtSwAclIfAcgType.)')
prvtSwAclIfAcgAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 5), PrvtSwAclGroupType())
if mibBuilder.loadTexts: prvtSwAclIfAcgAclType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgAclType.setDescription('The type (e.g. in, out, vlan) of access list that this row applies to.')
prvtSwAclIfAcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRowStatus.setDescription('The RowStatus for this access-control group.')
prvtSwAclIfAcgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 8), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVlan.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgVlan.setDescription("The ID of the VLAN to which traffic belonging to this access-group will be redirected to.\n         The value of '0' indicates that redirection is disabled.\n         Only applicable for VLAN ACL types (when prvtSwAclIfAcgAclType equals 'vlan').\n         This object and prvtSwAclIfAcgVlanAdd are not permitted to be simultaneously non-zero.")
prvtSwAclIfAcgVlanAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 9), PrvtSwAclVlanIdTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVlanAdd.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgVlanAdd.setDescription("The ID of the VLAN to which traffic belonging to this access-group will have added to.\n         The value of '0' indicates that redirection is disabled.\n         Only applicable for VLAN ACL types (when prvtSwAclIfAcgAclType equals 'vlan').\n         This object and prvtSwAclIfAcgVlan are not permitted to be simultaneously non-zero.")
prvtSwAclIfAcgVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 10), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgVpt.setDescription("The VLAN priority tag to assign to traffic belonging to this access-group.\n         A value of '8' indicates that the VPT field is unaffected.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgInnerVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 11), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgInnerVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgInnerVpt.setDescription("The inner VLAN priority tag to assign to traffic belonging to this access-group.\n         A value of '8' indicates that the inner VPT field is unaffected.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 12), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgDscp.setDescription("The DSCP value to assign to traffic belonging to this access-group.\n         A value of '64' indicates that the DSCP field is not affected.\n         Only used when prvtSwAclIfAcgGroupType equals 'out'.")
prvtSwAclIfAcgColorGreenFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 13), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenFc.setDescription("Map traffic marked as green from the ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclIfAcgGroupType equals 'in'.")
prvtSwAclIfAcgColorYellowFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 14), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowFc.setDescription("Map traffic marked as yellow from ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclIfAcgGroupType equals 'in'.")
prvtSwAclIfAcgColorRedFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 15), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedFc.setDescription("Map traffic marked as red from ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclIfAcgGroupType equals 'in'.")
prvtSwAclIfAcgColorGreenVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 16), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenVpt.setDescription("Remark, with the specifed value, the VLAN priority field of frames for traffic\n         marked as green.\n         The value '8' indicates that the field should not be re-marked.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgColorYellowVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 17), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowVpt.setDescription("Remark, with the specifed value, the VLAN priority field of frames for traffic\n         marked as yellow.\n         The value '8' indicates that the field should not be re-marked.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgColorRedVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 18), PrvtSwAclVptTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedVpt.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedVpt.setDescription("Remark, with the specifed value, the VLAN priority field of frames for traffic\n         marked as green.\n         The value '8' indicates that the field should not be re-marked.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgColorGreenDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 19), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorGreenDscp.setDescription("Remark, with the specifed value, the DSCP field of frames for traffic\n         marked as green.\n         A value of '64' indicates that the DSCP value should not be re-marked.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgColorYellowDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 20), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorYellowDscp.setDescription("Remark, with the specifed value, the DSCP field of frames for traffic\n         marked as yellow.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgColorRedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 21), PrvtSwAclDscpTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedDscp.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgColorRedDscp.setDescription("Remark, with the specifed value, the DSCP field of frames for traffic\n         marked as red.\n         Only used for egress ACL types (when prvtSwAclIfAcgGroupType equals 'out').")
prvtSwAclIfAcgResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 1, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgResetStats.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgResetStats.setDescription("Set to 'true' to reset statistics for this SAP access group.\n         Reads always return the value 'false'.")
prvtSwAclIfAcgRLimitTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitTable.setDescription("Used to specify for this traffic flow which type of rate-limiting to use\n         and the parameters of the rate-limiting method.\n         Only one entry may exist (i.e. one rate-limiting method may be used) for a\n         particular traffic flow.\n         Not available for VLAN ACL types (when prvtSwAclIfAcgAclType equals 'vlan').\n         For a particular traffic flow, this table and prvtSwAclIfAcgFcTable are\n         mutually exclusive (i.e. a traffic flow is prohibited from having\n         an entry in this table and in prvtSwAclIfAcgFcTable concurrently).")
prvtSwAclIfAcgRLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRLimitType"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEntry.setDescription('An entry in prvtSwAclIfAcgRLimitTable.')
prvtSwAclIfAcgRLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 1), PrvtSwAclRateLimitType())
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitType.setDescription('Specifies the type (single vs. dual) of rate-limiting to use.')
prvtSwAclIfAcgRLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitRowStatus.setDescription('The RowStatus for this rate limit function.')
prvtSwAclIfAcgRLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 3), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCir.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCir.setDescription('The Committed Information Rate.')
prvtSwAclIfAcgRLimitCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 4), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitCbs.setDescription('The Committed Burst Size.')
prvtSwAclIfAcgRLimitEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 5), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitEbs.setDescription("The Excess Burst Size.\n         Only applicable when using single rate limiting (prvtSwAclIfAcgRLimitType\n         equals 'single').")
prvtSwAclIfAcgRLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 6), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPir.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPir.setDescription("The Peak Information Rate.\n         Only applicable when using dual rate limiting (prvtSwAclIfAcgRLimitType\n         equals 'dual').\n         When using dual rate limiting, prvtSwAclIfAcgRLimitPir\n         must be greater than or equal to prvtSwAclIfAcgRLimitCir.")
prvtSwAclIfAcgRLimitPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 7), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitPbs.setDescription("The Peak Burst Size.\n         Only applicable when using dual rate limiting (when\n         prvtSwAclIfAcgRLimitType equals 'dual').")
prvtSwAclIfAcgRLimitColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitColorAware.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitColorAware.setDescription("Set to 'true' to enable color aware traffic metering.")
prvtSwAclIfAcgRLimitExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 2, 1, 9), PrvtSwAclExceedAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitExceedAct.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitExceedAct.setDescription("The action to perform when the condition is true.\n         'markRed' is not supported for all devices.\n         'markYellow' is not supported for dual rate-limit.")
prvtSwAclIfAcgRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectTable.setDescription("Used to specify if this traffic flow should be redirected to\n         another interface.\n         Only one entry is allowed (i.e. only one redirect is permitted).\n         Only applicable to ingress ACL types (when prvtSwAclIfAcgAclType equals 'in').")
prvtSwAclIfAcgRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRedirectIfIndex"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectEntry.setDescription('An entry in prvtSwAclIfAcgRedirectTable.')
prvtSwAclIfAcgRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectIfIndex.setDescription('The ifIndex of a physical interface defined in the ifTable to which traffic should be redirected to.')
prvtSwAclIfAcgRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectRowStatus.setDescription('The RowStatus for prvtSwAclIfAcgRedirectTable.')
prvtSwAclIfAcgFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclIfAcgFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcTable.setDescription("Used to assign parameters to a particular forwarding class within a traffic flow.\n         Only one entry is allowed.\n         Only applicable to ingress ACL types (when prvtSwAclIfAcgAclType equals 'in').\n         For a particular traffic flow, this table and prvtSwAclIfAcgRLimitTable are\n         mutually exclusive (i.e. a traffic flow is prohibited from having\n         an entry in this table and in prvtSwAclIfAcgFcTable at the same time).")
prvtSwAclIfAcgFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgFcId"))
if mibBuilder.loadTexts: prvtSwAclIfAcgFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcEntry.setDescription('An entry in prvtSwAclIfAcgFcTable.')
prvtSwAclIfAcgFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 1), PrvtSwAclFcType())
if mibBuilder.loadTexts: prvtSwAclIfAcgFcId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcId.setDescription('The forwarding class that this row applies to.')
prvtSwAclIfAcgFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcRowStatus.setDescription('The RowStatus for this forwarding class.')
prvtSwAclIfAcgFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 4, 1, 3), PrvtSwAclColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcColor.setDescription('The color to assign to traffic belonging to this forwarding class.\n         Color red is not supported for all devices')
prvtSwAclIfAcgMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfTable.setDescription("Used to assign a monitoring profile to a traffic flow.\n         Only one profile may be assigned per traffic flow.\n         Only applicable to ingress ACL types (when prvtSwAclIfAcgAclType equals 'in').")
prvtSwAclIfAcgMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfEntry.setDescription('An entry in prvtSwAclIfAcgMonPrfTable.')
prvtSwAclIfAcgMonPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRowStatus.setDescription('The RowStatus for this monitoring profile.')
prvtSwAclIfAcgMonPrfMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchF.setDescription('The number of frames of traffic matching this traffic flow.')
prvtSwAclIfAcgMonPrfMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfMatchB.setDescription('The number of bytes of traffic matching this traffic flow.')
prvtSwAclIfAcgMonPrfGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenF.setDescription('The number of frames of green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfGreenB.setDescription('The number of bytes of green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenF.setDescription('The number of frames of non-green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotGreenB.setDescription('The number of bytes of non-green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowF.setDescription('The number of frames of yellow traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfYellowB.setDescription('The number of bytes of yellow traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedF.setDescription('The number of frames of red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRedB.setDescription('The number of bytes of red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedF.setDescription('The number of frames of non-red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfNotRedB.setDescription('The number of bytes of non-red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchF.setDescription('The rate, in frames per second, of traffic matching this traffic flow.')
prvtSwAclIfAcgMonPrfRateMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateMatchB.setDescription('The rate, in bytes per second, of traffic matching this traffic flow.')
prvtSwAclIfAcgMonPrfRateGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenF.setDescription('The rate, in frames per second, of green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateGreenB.setDescription('The rate, in bytes per second, of green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenF.setDescription('The rate, in frames per second, of non-green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotGreenB.setDescription('The rate, in bytes per second, of non-green traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowF.setDescription('The rate, in frames per second, of yellow traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateYellowB.setDescription('The rate, in bytes per second, of yellow traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedF.setDescription('The rate, in frames per second, of red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateRedB.setDescription('The rate, in bytes per second, of red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedF.setDescription('The rate, in frames per second, of non-red traffic belonging to this traffic flow.')
prvtSwAclIfAcgMonPrfRateNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfRateNotRedB.setDescription('The rate, in bytes per second, of non-red traffic belonging to this traffic flow.')
prvtSwAclIfAcgRestrictEgForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingTable.setDescription("Used to specify if this traffic flow should be forwarded to\n         another interface.All the other interfaces will be blocked.\n         Only applicable to ingress ACL types (when prvtSwAclIfAcgAclType equals 'in').")
prvtSwAclIfAcgRestrictEgForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgIndex"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRestrictEgForwIfIndex"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwardingEntry.setDescription('An entry in prvtSwAclIfAcgRestrictEgForwardingTable.')
prvtSwAclIfAcgRestrictEgForwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwIfIndex.setDescription('The ifIndex of a physical interface defined in the ifTable to which traffic should be forwared to.')
prvtSwAclIfAcgRestrictEgForwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 3, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRestrictEgForwRowStatus.setDescription('The RowStatus for prvtSwAclIfAcgRestrictEgForwardingTable.')
prvtSwAclSaps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4))
prvtSwAclSapAcgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: prvtSwAclSapAcgTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgTable.setDescription("This table creates and controls the properties of traffic flows belonging to\n         SAP interfaces.\n         Up to 250 entries are supported per SAP (i.e. per prvtSwAclSapServiceId,\n         prvtSwAclSapIfIndex, prvtSwAclSapEncapValue combination).\n         The key combination (serviceId, sapPortId, sapEncapValue, prvtSwAclSapAcgSeqId)\n         must be unique (i.e. no more than one entry can exist with the same SAP\n         and sequence-id combination).\n         Notes:\n          1. access-groups are not supported on VPWS SAPs.\n          2. Only ingress ACL types (prvtSwAclSapAcgAclType equals 'in') are supported on SAPs.")
prvtSwAclSapAcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"))
if mibBuilder.loadTexts: prvtSwAclSapAcgEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgEntry.setDescription('An entry in prvtSwAclSapAcgTable.')
prvtSwAclSapAcgSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: prvtSwAclSapAcgSeqId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgSeqId.setDescription('Specifies the sequence (order/priority) in which this access group will be applied.')
prvtSwAclSapAcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 5), PrvtSwAclAcgType())
if mibBuilder.loadTexts: prvtSwAclSapAcgType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgType.setDescription('The type (e.g. ipStd, ipExt, mac, etherType) of access group that this row applies to.')
prvtSwAclSapAcgAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 6), PrvtSwAclNameType())
if mibBuilder.loadTexts: prvtSwAclSapAcgAclName.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgAclName.setDescription('The name of the access list that this row applies to.\n         This must match the name of an ACL created with the type specified by prvtSwAclSapAcgType.\n         (i.e. it must match one of prvtSwAclStdName, prvtSwAclExtName, prvtSwAclMacName,\n         prvtSwAclEthName corresponding to the type specified in prvtSwAclSapAcgType.)')
prvtSwAclSapAcgAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 7), PrvtSwAclGroupType())
if mibBuilder.loadTexts: prvtSwAclSapAcgAclType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgAclType.setDescription('The type (e.g. in, out, vlan) of access list that this row applies to.')
prvtSwAclSapAcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRowStatus.setDescription("The RowStatus for this SAP's access-control group.")
prvtSwAclSapAcgColorGreenFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 13), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorGreenFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgColorGreenFc.setDescription("Map traffic marked as green from the ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclSapAcgGroupType equals 'in'.")
prvtSwAclSapAcgColorYellowFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 14), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorYellowFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgColorYellowFc.setDescription("Map traffic marked as yellow from ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclSapAcgGroupType equals 'in'.")
prvtSwAclSapAcgColorRedFc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 15), PrvtSwAclFcTypeOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgColorRedFc.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgColorRedFc.setDescription("Map traffic marked as red from ACG rate-limit to a Forwarding Class (FC).\n         The value 'none' indicates that the FC is not to be affected.\n         Only used when prvtSwAclSapAcgGroupType equals 'in'.")
prvtSwAclSapAcgResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 1, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgResetStats.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgResetStats.setDescription("Set to 'true' to reset the statistics for this SAP access group.\n         Reads always return the value 'false'.")
prvtSwAclSapAcg = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2))
prvtSwAclSapAcgRLimitTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitTable.setDescription("Used to specify for this traffic flow which type of rate-limiting to use\n         and the parameters of the rate-limiting method.\n         Only one entry may exist (i.e. one rate-limiting method may be used) for a\n         particular traffic flow.\n         Not available for VLAN ACL types (when prvtSwAclSapAcgAclType equals 'vlan').\n         For a particular traffic flow, this table and prvtSwAclSapAcgFcTable are\n         mutually exclusive (i.e. a traffic flow is prohibited from having\n         an entry in this table and in prvtSwAclSapAcgFcTable concurrently).")
prvtSwAclSapAcgRLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRLimitType"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEntry.setDescription('An entry in prvtSwAclSapAcgRLimitTable.')
prvtSwAclSapAcgRLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 1), PrvtSwAclRateLimitType())
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitType.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitType.setDescription('Specifies the type (single vs. dual) of rate-limiting to use.')
prvtSwAclSapAcgRLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitRowStatus.setDescription('The RowStatus for this rate limit function.')
prvtSwAclSapAcgRLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 3), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCir.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCir.setDescription('The Committed Information Rate.')
prvtSwAclSapAcgRLimitCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 4), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitCbs.setDescription('The Committed Burst Size.')
prvtSwAclSapAcgRLimitEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 5), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitEbs.setDescription("The Excess Burst Size.\n         Only applicable when using single rate limiting (prvtSwAclSapAcgRLimitType\n         equals 'single').")
prvtSwAclSapAcgRLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 6), PrvtSwAclRateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPir.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPir.setDescription("The Peak Information Rate.\n         Only applicable when using dual rate limiting (prvtSwAclSapAcgRLimitType\n         equals 'dual').\n         When using dual rate limiting, prvtSwAclSapAcgRLimitPir\n         must be greater than or equal to prvtSwAclSapAcgRLimitCir.")
prvtSwAclSapAcgRLimitPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 7), PrvtSwAclBurstSizeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPbs.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitPbs.setDescription("The Peak Burst Size.\n         Only applicable when using dual rate limiting (when\n         prvtSwAclSapAcgRLimitType equals 'dual').")
prvtSwAclSapAcgRLimitColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitColorAware.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitColorAware.setDescription("Set to 'true' to enable color aware traffic metering.")
prvtSwAclSapAcgRLimitExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 2, 1, 9), PrvtSwAclExceedAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitExceedAct.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitExceedAct.setDescription('The action to perform when the condition is true.')
prvtSwAclSapAcgRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectTable.setDescription("Used to specify if this traffic flow should be redirected to\n         another interface.\n         Only one entry is allowed (i.e. only one redirect is permitted).\n         Only applicable to ingress ACL types (when prvtSwAclSapAcgAclType equals 'in').")
prvtSwAclSapAcgRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRedirectIfIndex"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectEntry.setDescription('An entry in prvtSwAclSapAcgRedirectTable.')
prvtSwAclSapAcgRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectIfIndex.setDescription('The ifIndex of a physical interface defined in the ifTable to which traffic should be redirected to.')
prvtSwAclSapAcgRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectRowStatus.setDescription('The RowStatus for prvtSwAclSapAcgRedirectTable.')
prvtSwAclSapAcgFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: prvtSwAclSapAcgFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcTable.setDescription("Used to assign parameters to a particular forwarding class within a traffic flow.\n         Only one entry is allowed.\n         Only applicable to ingress ACL types (when prvtSwAclSapAcgAclType equals 'in').\n         For a particular traffic flow, this table and prvtSwAclSapAcgRLimitTable are\n         mutually exclusive (i.e. a traffic flow is prohibited from having\n         an entry in this table and in prvtSwAclSapAcgFcTable at the same time).")
prvtSwAclSapAcgFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgFcId"))
if mibBuilder.loadTexts: prvtSwAclSapAcgFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcEntry.setDescription('An entry in prvtSwAclSapAcgFcTable.')
prvtSwAclSapAcgFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 1), PrvtSwAclFcType())
if mibBuilder.loadTexts: prvtSwAclSapAcgFcId.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcId.setDescription('The forwarding class that this row applies to.')
prvtSwAclSapAcgFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcRowStatus.setDescription('The RowStatus for this forwarding class.')
prvtSwAclSapAcgFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 4, 1, 3), PrvtSwAclColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcColor.setDescription('The color to assign to traffic belonging to this forwarding class.\n         Color red is not supported for all devices')
prvtSwAclSapAcgMonPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5), )
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfTable.setDescription("Used to assign a monitoring profile to a traffic flow.\n         Only one profile may be assigned per traffic flow.\n         Only applicable to ingress ACL types (when prvtSwAclSapAcgAclType equals 'in').")
prvtSwAclSapAcgMonPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclMonPrfId"))
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfEntry.setDescription('An entry in prvtSwAclSapAcgMonPrfTable.')
prvtSwAclSapAcgMonPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRowStatus.setDescription('The RowStatus for this monitoring profile.')
prvtSwAclSapAcgMonPrfMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchF.setDescription('The number of frames of traffic matching this traffic flow.')
prvtSwAclSapAcgMonPrfMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfMatchB.setDescription('The number of bytes of traffic matching this traffic flow.')
prvtSwAclSapAcgMonPrfGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenF.setDescription('The number of frames of green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfGreenB.setDescription('The number of bytes of green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenF.setDescription('The number of frames of non-green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotGreenB.setDescription('The number of bytes of non-green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowF.setDescription('The number of frames of yellow traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfYellowB.setDescription('The number of bytes of yellow traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedF.setDescription('The number of frames of red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRedB.setDescription('The number of bytes of red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedF.setDescription('The number of frames of non-red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfNotRedB.setDescription('The number of bytes of non-red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateMatchF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchF.setDescription('The rate, in frames per second, of traffic matching this traffic flow.')
prvtSwAclSapAcgMonPrfRateMatchB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateMatchB.setDescription('The rate, in bytes per second, of traffic matching this traffic flow.')
prvtSwAclSapAcgMonPrfRateGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenF.setDescription('The rate, in frames per second, of green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateGreenB.setDescription('The rate, in bytes per second, of green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateNotGreenF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenF.setDescription('The rate, in frames per second, of non-green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateNotGreenB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotGreenB.setDescription('The rate, in bytes per second, of non-green traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateYellowF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowF.setDescription('The rate, in frames per second, of yellow traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateYellowB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateYellowB.setDescription('The rate, in bytes per second, of yellow traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedF.setDescription('The rate, in frames per second, of red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateRedB.setDescription('The rate, in bytes per second, of red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateNotRedF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedF.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedF.setDescription('The rate, in frames per second, of non-red traffic belonging to this traffic flow.')
prvtSwAclSapAcgMonPrfRateNotRedB = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedB.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfRateNotRedB.setDescription('The rate, in bytes per second, of non-red traffic belonging to this traffic flow.')
prvtSwAclSapAcgRestrictEgForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingTable.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingTable.setDescription("Used to specify if this traffic flow should be forwarded to\n         another interface.All the other interfaces will be blocked.\n         Only applicable to ingress ACL types (when prvtSwAclSapAcgAclType equals 'in').")
prvtSwAclSapAcgRestrictEgForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgSeqId"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclName"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgAclType"), (0, "PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRestrictEgForwIfIndex"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwardingEntry.setDescription('An entry in prvtSwAclSapAcgRestrictEgForwardingTable.')
prvtSwAclSapAcgRestrictEgForwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwIfIndex.setDescription('The ifIndex of a physical interface defined in the ifTable to which traffic should be forwared to.')
prvtSwAclSapAcgRestrictEgForwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 1, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRestrictEgForwRowStatus.setDescription('The RowStatus for prvtSwAclSapAcgRestrictEgForwardingTable.')
prvtSwAclIfAcgApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 1)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclIfAcgRLimitApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 2)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRLimitRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRLimitApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclIfAcgRedirectApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 3)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgRedirectRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgRedirectApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclIfAcgFcApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 4)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgFcRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgFcApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgFcApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclIfAcgMonPrfApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 5)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclIfAcgMonPrfRowStatus"))
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclIfAcgMonPrfApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclSapAcgApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 6)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclSapAcgRLimitApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 7)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRLimitRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRLimitApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclSapAcgRedirectApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 8)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgRedirectRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgRedirectApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclSapAcgFcApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 9)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgFcRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgFcApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgFcApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
prvtSwAclSapAcgMonPrfApplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 6, 1, 0, 10)).setObjects(("PRVT-SWITCH-ACCESS-LIST-MIB", "prvtSwAclSapAcgMonPrfRowStatus"))
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfApplyFailed.setStatus('current')
if mibBuilder.loadTexts: prvtSwAclSapAcgMonPrfApplyFailed.setDescription('Access group is not properly applied in hardware.\n         This means that traffic will not be filtered as\n         expected. User should either remove this access\n         group or rearrange other access groups.')
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", prvtSwAclExtRuleIpSrcPrefix=prvtSwAclExtRuleIpSrcPrefix, prvtSwAclExtRuleVlanId=prvtSwAclExtRuleVlanId, prvtSwAclSapAcgRLimitPir=prvtSwAclSapAcgRLimitPir, prvtSwAclSapAcgAclName=prvtSwAclSapAcgAclName, PrvtSwAclVptTypeOrNone=PrvtSwAclVptTypeOrNone, prvtSwAclExtRuleIcmpType=prvtSwAclExtRuleIcmpType, prvtSwAclExtRuleInnerVlanId=prvtSwAclExtRuleInnerVlanId, prvtSwAclMacRuleInnerVlanId=prvtSwAclMacRuleInnerVlanId, prvtSwAclSapAcgMonPrfGreenF=prvtSwAclSapAcgMonPrfGreenF, prvtSwAclSapAcgRLimitApplyFailed=prvtSwAclSapAcgRLimitApplyFailed, prvtSwAclStdRuleInnerVlanId=prvtSwAclStdRuleInnerVlanId, PrvtSwAclDscpTypeOrNone=PrvtSwAclDscpTypeOrNone, prvtSwAclSapAcgRedirectEntry=prvtSwAclSapAcgRedirectEntry, prvtSwAclIfAcgFcRowStatus=prvtSwAclIfAcgFcRowStatus, prvtSwAclIfAcgMonPrfRateYellowF=prvtSwAclIfAcgMonPrfRateYellowF, PrvtSwAclIpv4PrefixType=PrvtSwAclIpv4PrefixType, PrvtSwAclBurstSizeType=PrvtSwAclBurstSizeType, prvtSwAclEthRuleInnerVpt=prvtSwAclEthRuleInnerVpt, prvtSwAclIfAcgInnerVpt=prvtSwAclIfAcgInnerVpt, prvtSwAclIfAcgRestrictEgForwRowStatus=prvtSwAclIfAcgRestrictEgForwRowStatus, prvtSwAclSapAcgTable=prvtSwAclSapAcgTable, prvtSwAclIfAcgFcColor=prvtSwAclIfAcgFcColor, prvtSwAclSapAcgRestrictEgForwRowStatus=prvtSwAclSapAcgRestrictEgForwRowStatus, prvtSwAclSapAcgRestrictEgForwardingEntry=prvtSwAclSapAcgRestrictEgForwardingEntry, prvtSwAclExtRuleTcpDstPort=prvtSwAclExtRuleTcpDstPort, PrvtSwAclPrecedenceTypeOrNone=PrvtSwAclPrecedenceTypeOrNone, prvtSwAclStdName=prvtSwAclStdName, prvtSwAclExtEntry=prvtSwAclExtEntry, prvtSwAclIfAcgMonPrfRateGreenB=prvtSwAclIfAcgMonPrfRateGreenB, prvtSwAclStdRuleAction=prvtSwAclStdRuleAction, prvtSwAclIfAcgRLimitCir=prvtSwAclIfAcgRLimitCir, prvtSwAclSapAcgMonPrfRateYellowB=prvtSwAclSapAcgMonPrfRateYellowB, prvtSwAclExtRuleEstablished=prvtSwAclExtRuleEstablished, prvtSwAclIfAcgIndex=prvtSwAclIfAcgIndex, prvtSwAclIfAcgMonPrfGreenB=prvtSwAclIfAcgMonPrfGreenB, prvtSwAclMonPrfStatsEntry=prvtSwAclMonPrfStatsEntry, prvtSwAclSapAcgRedirectApplyFailed=prvtSwAclSapAcgRedirectApplyFailed, prvtSwAclSapAcgColorGreenFc=prvtSwAclSapAcgColorGreenFc, prvtSwAclIfAcgRLimitApplyFailed=prvtSwAclIfAcgRLimitApplyFailed, prvtSwAclIfAcgMonPrfRateGreenF=prvtSwAclIfAcgMonPrfRateGreenF, prvtSwAclExtTable=prvtSwAclExtTable, prvtSwAclSapAcgRowStatus=prvtSwAclSapAcgRowStatus, prvtSwAclMonPrfIdRowStatus=prvtSwAclMonPrfIdRowStatus, prvtSwAclMacRuleVpt=prvtSwAclMacRuleVpt, prvtSwAclStdRuleVpt=prvtSwAclStdRuleVpt, prvtSwAclExtRuleTos=prvtSwAclExtRuleTos, prvtSwAclMacRuleMacSrc=prvtSwAclMacRuleMacSrc, prvtSwAclIfAcgDscp=prvtSwAclIfAcgDscp, prvtSwAclSapAcgMonPrfRateGreenF=prvtSwAclSapAcgMonPrfRateGreenF, prvtSwAclSapAcgMonPrfRateNotGreenB=prvtSwAclSapAcgMonPrfRateNotGreenB, prvtSwAclMonPrfId=prvtSwAclMonPrfId, prvtSwAclSapAcgFcApplyFailed=prvtSwAclSapAcgFcApplyFailed, prvtSwAclEthRuleDscp=prvtSwAclEthRuleDscp, prvtSwAclEthRuleInnerVlanMask=prvtSwAclEthRuleInnerVlanMask, prvtSwAclSapAcgMonPrfEntry=prvtSwAclSapAcgMonPrfEntry, prvtSwAclMacRuleMacDstMask=prvtSwAclMacRuleMacDstMask, prvtSwAclIfAcgMonPrfMatchF=prvtSwAclIfAcgMonPrfMatchF, prvtSwAclIfAcgTable=prvtSwAclIfAcgTable, prvtSwAclIfAcgRedirectIfIndex=prvtSwAclIfAcgRedirectIfIndex, prvtSwAclEthDescr=prvtSwAclEthDescr, prvtSwAclExtRuleRowStatus=prvtSwAclExtRuleRowStatus, prvtSwAclIfAcgRestrictEgForwIfIndex=prvtSwAclIfAcgRestrictEgForwIfIndex, prvtSwAclEthEntry=prvtSwAclEthEntry, prvtSwAclIfAcgAclName=prvtSwAclIfAcgAclName, prvtSwAclMonPrfStatsTable=prvtSwAclMonPrfStatsTable, prvtSwAclIfAcgRLimitEbs=prvtSwAclIfAcgRLimitEbs, prvtSwAclIfAcgVlanAdd=prvtSwAclIfAcgVlanAdd, PrvtSwAclExceedAction=PrvtSwAclExceedAction, PrvtSwAclProfileIdType=PrvtSwAclProfileIdType, prvtSwAclMacRuleDscp=prvtSwAclMacRuleDscp, prvtSwAclMacRuleInnerVpt=prvtSwAclMacRuleInnerVpt, prvtSwAclEthRuleVpt=prvtSwAclEthRuleVpt, prvtSwAclIfAcgMonPrfYellowB=prvtSwAclIfAcgMonPrfYellowB, prvtSwAclSapAcgMonPrfMatchB=prvtSwAclSapAcgMonPrfMatchB, prvtSwAclSapAcgRestrictEgForwIfIndex=prvtSwAclSapAcgRestrictEgForwIfIndex, prvtSwAclMonPrfStatsType=prvtSwAclMonPrfStatsType, prvtSwAclStdRuleEntry=prvtSwAclStdRuleEntry, prvtSwAclMacEntry=prvtSwAclMacEntry, prvtSwAclIfAcgColorRedFc=prvtSwAclIfAcgColorRedFc, PrvtSwAclNameType=PrvtSwAclNameType, prvtSwAclStdRuleUntaggedMode=prvtSwAclStdRuleUntaggedMode, prvtSwAclSapAcgRLimitEntry=prvtSwAclSapAcgRLimitEntry, prvtSwAclIfAcgMonPrfGreenF=prvtSwAclIfAcgMonPrfGreenF, prvtSwAclSapAcgMonPrfRateYellowF=prvtSwAclSapAcgMonPrfRateYellowF, prvtSwAclSapAcgMonPrfApplyFailed=prvtSwAclSapAcgMonPrfApplyFailed, prvtSwAclIfAcgMonPrfMatchB=prvtSwAclIfAcgMonPrfMatchB, prvtSwAclExtRuleTcpSrcPort=prvtSwAclExtRuleTcpSrcPort, prvtSwAclIfAcgColorGreenVpt=prvtSwAclIfAcgColorGreenVpt, prvtSwAclSapAcgMonPrfRedB=prvtSwAclSapAcgMonPrfRedB, prvtSwAclIfAcgRedirectApplyFailed=prvtSwAclIfAcgRedirectApplyFailed, prvtSwAclExtRuleEntry=prvtSwAclExtRuleEntry, prvtSwAclExtRuleUdpDstPort=prvtSwAclExtRuleUdpDstPort, prvtSwAclIfAcgColorGreenFc=prvtSwAclIfAcgColorGreenFc, prvtSwAclIfAcgEntry=prvtSwAclIfAcgEntry, prvtSwAclIfAcgRLimitTable=prvtSwAclIfAcgRLimitTable, prvtSwAclExtRowStatus=prvtSwAclExtRowStatus, prvtSwAclSapAcgMonPrfRateRedF=prvtSwAclSapAcgMonPrfRateRedF, prvtSwAclMacTable=prvtSwAclMacTable, prvtSwAclExtRuleAction=prvtSwAclExtRuleAction, prvtSwAclEthRuleVlanMask=prvtSwAclEthRuleVlanMask, prvtSwAclIfAcgRLimitRowStatus=prvtSwAclIfAcgRLimitRowStatus, prvtSwAclIfAcgVpt=prvtSwAclIfAcgVpt, prvtSwAclIfAcgColorRedDscp=prvtSwAclIfAcgColorRedDscp, prvtSwAclMacRuleTable=prvtSwAclMacRuleTable, PrvtSwAclFcType=PrvtSwAclFcType, prvtSwAclExtRuleTable=prvtSwAclExtRuleTable, prvtSwAclStdDescr=prvtSwAclStdDescr, prvtSwAclIfAcgRowStatus=prvtSwAclIfAcgRowStatus, PrvtSwAclIpProtocol=PrvtSwAclIpProtocol, prvtSwAclSapAcgResetStats=prvtSwAclSapAcgResetStats, prvtSwAclSapAcgMonPrfNotRedB=prvtSwAclSapAcgMonPrfNotRedB, prvtSwAclIfAcgMonPrfRateNotRedF=prvtSwAclIfAcgMonPrfRateNotRedF, prvtSwAclEthRuleTable=prvtSwAclEthRuleTable, prvtSwAclSapAcgRedirectTable=prvtSwAclSapAcgRedirectTable, prvtSwAclSapAcgEntry=prvtSwAclSapAcgEntry, prvtSwAclSapAcgSeqId=prvtSwAclSapAcgSeqId, prvtSwAclExtRuleIcmpCode=prvtSwAclExtRuleIcmpCode, prvtSwAclIfAcgMonPrfYellowF=prvtSwAclIfAcgMonPrfYellowF, PrvtSwAclMatchTrafficType=PrvtSwAclMatchTrafficType, prvtSwAclStdTable=prvtSwAclStdTable, prvtSwAclMacRuleMacDst=prvtSwAclMacRuleMacDst, prvtSwAclIfAcgMonPrfRowStatus=prvtSwAclIfAcgMonPrfRowStatus, PrvtSwAclEtherTypeMask=PrvtSwAclEtherTypeMask, prvtSwAclIfAcgMonPrfNotGreenB=prvtSwAclIfAcgMonPrfNotGreenB, prvtSwAclSapAcgMonPrfRateNotRedB=prvtSwAclSapAcgMonPrfRateNotRedB, prvtSwAclIfAcgMonPrfRateRedF=prvtSwAclIfAcgMonPrfRateRedF, prvtSwAclIfAcgRestrictEgForwardingTable=prvtSwAclIfAcgRestrictEgForwardingTable, prvtSwAclIfAcgColorYellowDscp=prvtSwAclIfAcgColorYellowDscp, prvtSwAclEthRuleUntaggedMode=prvtSwAclEthRuleUntaggedMode, prvtSwAclSapAcgMonPrfRedF=prvtSwAclSapAcgMonPrfRedF, prvtSwAclStdRuleInnerVpt=prvtSwAclStdRuleInnerVpt, prvtSwAclExtRuleUntaggedMode=prvtSwAclExtRuleUntaggedMode, prvtSwAclIfAcgVlan=prvtSwAclIfAcgVlan, prvtSwAclSapAcgMonPrfYellowB=prvtSwAclSapAcgMonPrfYellowB, prvtSwAclMacRuleDstAddrType=prvtSwAclMacRuleDstAddrType, prvtSwAclIfAcgSeqId=prvtSwAclIfAcgSeqId, prvtSwAclIfAcgFcApplyFailed=prvtSwAclIfAcgFcApplyFailed, PrvtSwAclAcgType=PrvtSwAclAcgType, prvtSwAclSapAcgRLimitRowStatus=prvtSwAclSapAcgRLimitRowStatus, PrvtSwAclVlanIdTypeOrNone=PrvtSwAclVlanIdTypeOrNone, prvtSwAclStdRuleInnerVlanMask=prvtSwAclStdRuleInnerVlanMask, prvtSwAclMacRuleRowStatus=prvtSwAclMacRuleRowStatus, prvtSwAclInterfaces=prvtSwAclInterfaces, prvtSwAclStdRuleVlanId=prvtSwAclStdRuleVlanId, prvtSwAclExtRuleIpProtocol=prvtSwAclExtRuleIpProtocol, prvtSwAclEthTable=prvtSwAclEthTable, PrvtSwAclEtherType=PrvtSwAclEtherType, prvtSwAclEthRuleEntry=prvtSwAclEthRuleEntry, prvtSwAclMacRuleVlanId=prvtSwAclMacRuleVlanId, prvtSwAclIfAcgRestrictEgForwardingEntry=prvtSwAclIfAcgRestrictEgForwardingEntry, prvtSwAclExtRuleInnerVlanMask=prvtSwAclExtRuleInnerVlanMask, prvtSwAclIfAcgColorYellowFc=prvtSwAclIfAcgColorYellowFc, prvtSwAclGroups=prvtSwAclGroups, prvtSwAclSapAcg=prvtSwAclSapAcg, prvtSwAclSapAcgMonPrfRateRedB=prvtSwAclSapAcgMonPrfRateRedB, prvtSwAclSapAcgMonPrfRateNotGreenF=prvtSwAclSapAcgMonPrfRateNotGreenF, prvtSwAclExtRuleInnerVpt=prvtSwAclExtRuleInnerVpt, prvtSwAclSapAcgRLimitType=prvtSwAclSapAcgRLimitType, prvtSwAclMonPrfTable=prvtSwAclMonPrfTable, prvtSwAclExtRuleDscp=prvtSwAclExtRuleDscp, prvtSwAclMacRuleId=prvtSwAclMacRuleId, prvtSwAclIfAcgFcTable=prvtSwAclIfAcgFcTable, prvtSwAclSapAcgRLimitCir=prvtSwAclSapAcgRLimitCir, prvtSwAclSapAcgRedirectRowStatus=prvtSwAclSapAcgRedirectRowStatus, prvtSwAclIfAcgRLimitExceedAct=prvtSwAclIfAcgRLimitExceedAct, prvtSwAclSapAcgFcTable=prvtSwAclSapAcgFcTable, prvtSwAclIfAcgRLimitType=prvtSwAclIfAcgRLimitType, prvtSwAclSapAcgMonPrfRowStatus=prvtSwAclSapAcgMonPrfRowStatus, prvtSwAclEthRuleId=prvtSwAclEthRuleId, prvtSwAclSapAcgMonPrfNotGreenB=prvtSwAclSapAcgMonPrfNotGreenB, prvtSwAclSaps=prvtSwAclSaps, prvtSwAclIfAcgRedirectRowStatus=prvtSwAclIfAcgRedirectRowStatus, prvtSwAclSapAcgColorYellowFc=prvtSwAclSapAcgColorYellowFc, prvtSwAclIfAcgMonPrfApplyFailed=prvtSwAclIfAcgMonPrfApplyFailed, prvtSwitchAccessListMIB=prvtSwitchAccessListMIB, prvtSwAclEthName=prvtSwAclEthName, prvtSwAclMacRuleUntaggedMode=prvtSwAclMacRuleUntaggedMode, prvtSwAclEthRuleInnerVlanId=prvtSwAclEthRuleInnerVlanId, PrvtSwAclTagType=PrvtSwAclTagType, prvtSwAclIfAcgColorYellowVpt=prvtSwAclIfAcgColorYellowVpt, prvtSwAclSapAcgMonPrfRateMatchB=prvtSwAclSapAcgMonPrfRateMatchB, prvtSwAclSapAcgMonPrfNotGreenF=prvtSwAclSapAcgMonPrfNotGreenF, prvtSwAclMacRuleTos=prvtSwAclMacRuleTos, prvtSwAclIfAcgMonPrfNotGreenF=prvtSwAclIfAcgMonPrfNotGreenF, prvtSwAclIfAcgAclType=prvtSwAclIfAcgAclType, prvtSwAclIfAcgColorGreenDscp=prvtSwAclIfAcgColorGreenDscp, prvtSwAclSapAcgRLimitEbs=prvtSwAclSapAcgRLimitEbs, prvtSwAclIfAcgRedirectEntry=prvtSwAclIfAcgRedirectEntry, prvtSwAclSapAcgRLimitCbs=prvtSwAclSapAcgRLimitCbs, prvtSwAclIfAcg=prvtSwAclIfAcg, prvtSwAclSapAcgType=prvtSwAclSapAcgType, prvtSwAclEthRuleEthType=prvtSwAclEthRuleEthType, prvtSwAclExtDescr=prvtSwAclExtDescr, prvtSwAclStdRuleTable=prvtSwAclStdRuleTable, prvtSwAclStdRuleId=prvtSwAclStdRuleId, prvtSwAclIfAcgMonPrfRateMatchB=prvtSwAclIfAcgMonPrfRateMatchB, prvtSwAclIfAcgMonPrfRateNotGreenB=prvtSwAclIfAcgMonPrfRateNotGreenB, prvtSwAclSapAcgMonPrfRateMatchF=prvtSwAclSapAcgMonPrfRateMatchF, PrvtSwAclColorType=PrvtSwAclColorType, prvtSwAclMacRuleVlanMask=prvtSwAclMacRuleVlanMask, prvtSwAclMacRowStatus=prvtSwAclMacRowStatus, prvtSwAclEthRulePrecedence=prvtSwAclEthRulePrecedence, prvtSwAclIfAcgMonPrfRedF=prvtSwAclIfAcgMonPrfRedF, prvtSwAclMonProfiles=prvtSwAclMonProfiles, prvtSwAclStdRowStatus=prvtSwAclStdRowStatus, prvtSwAclSapAcgRLimitTable=prvtSwAclSapAcgRLimitTable, PrvtSwAclTosTypeOrNone=PrvtSwAclTosTypeOrNone, prvtSwAclIfAcgRLimitCbs=prvtSwAclIfAcgRLimitCbs, prvtSwAclIfAcgMonPrfRateMatchF=prvtSwAclIfAcgMonPrfRateMatchF, prvtSwAclSapAcgFcEntry=prvtSwAclSapAcgFcEntry, PYSNMP_MODULE_ID=prvtSwitchAccessListMIB, PrvtSwAclStatsType=PrvtSwAclStatsType, prvtSwAclIfAcgMonPrfRateNotRedB=prvtSwAclIfAcgMonPrfRateNotRedB, prvtSwAclEthRowStatus=prvtSwAclEthRowStatus, prvtSwAclIfAcgResetStats=prvtSwAclIfAcgResetStats, prvtSwAclIfAcgMonPrfRedB=prvtSwAclIfAcgMonPrfRedB, prvtSwAclIfAcgRedirectTable=prvtSwAclIfAcgRedirectTable, prvtSwAclSapAcgRLimitColorAware=prvtSwAclSapAcgRLimitColorAware, PrvtSwAclPortIdTypeOrNone=PrvtSwAclPortIdTypeOrNone, prvtSwAclSapAcgMonPrfNotRedF=prvtSwAclSapAcgMonPrfNotRedF, prvtSwAclStdRuleIpSrcPrefix=prvtSwAclStdRuleIpSrcPrefix, prvtSwAclExtRuleUdpSrcPort=prvtSwAclExtRuleUdpSrcPort, PrvtSwAclFcTypeOrNone=PrvtSwAclFcTypeOrNone, prvtSwAclIfAcgMonPrfRateNotGreenF=prvtSwAclIfAcgMonPrfRateNotGreenF, prvtSwAclMacRuleInnerVlanMask=prvtSwAclMacRuleInnerVlanMask, prvtSwAclMacRuleEntry=prvtSwAclMacRuleEntry, prvtSwAclMacRulePrecedence=prvtSwAclMacRulePrecedence, prvtSwAclNotifications=prvtSwAclNotifications, prvtSwAclExtRuleVpt=prvtSwAclExtRuleVpt, prvtSwAclIfAcgColorRedVpt=prvtSwAclIfAcgColorRedVpt, prvtSwAclSapAcgMonPrfYellowF=prvtSwAclSapAcgMonPrfYellowF, prvtSwAclExtRuleIpDstPrefix=prvtSwAclExtRuleIpDstPrefix, prvtSwAclStdEntry=prvtSwAclStdEntry, prvtSwAclSapAcgFcColor=prvtSwAclSapAcgFcColor, prvtSwAclEthRuleRowStatus=prvtSwAclEthRuleRowStatus, prvtSwAclIfAcgMonPrfEntry=prvtSwAclIfAcgMonPrfEntry, prvtSwAclMonPrfStatsRowStatus=prvtSwAclMonPrfStatsRowStatus, prvtSwAclExtRulePrecedence=prvtSwAclExtRulePrecedence, prvtSwAclIfAcgMonPrfTable=prvtSwAclIfAcgMonPrfTable, prvtSwAclStdRuleRowStatus=prvtSwAclStdRuleRowStatus, prvtSwAclIfAcgFcEntry=prvtSwAclIfAcgFcEntry, prvtSwAclIfAcgFcId=prvtSwAclIfAcgFcId, prvtSwAclIfAcgRLimitColorAware=prvtSwAclIfAcgRLimitColorAware, prvtSwAclMacDescr=prvtSwAclMacDescr, prvtSwAclSapAcgFcId=prvtSwAclSapAcgFcId, prvtSwAclSapAcgFcRowStatus=prvtSwAclSapAcgFcRowStatus, prvtSwAclMonPrfEntry=prvtSwAclMonPrfEntry, prvtSwAclMacRuleMacSrcMask=prvtSwAclMacRuleMacSrcMask, PrvtSwAclGroupType=PrvtSwAclGroupType, prvtSwAclEthRuleVlanId=prvtSwAclEthRuleVlanId, PrvtSwAclAction=PrvtSwAclAction, prvtSwAclIfAcgRLimitPbs=prvtSwAclIfAcgRLimitPbs, prvtSwAclSapAcgRLimitExceedAct=prvtSwAclSapAcgRLimitExceedAct, prvtSwAclIfAcgApplyFailed=prvtSwAclIfAcgApplyFailed)
mibBuilder.exportSymbols("PRVT-SWITCH-ACCESS-LIST-MIB", prvtSwAclIfAcgRLimitEntry=prvtSwAclIfAcgRLimitEntry, prvtSwAclIfAcgMonPrfNotRedB=prvtSwAclIfAcgMonPrfNotRedB, prvtSwAclExtName=prvtSwAclExtName, prvtSwAclIfAcgMonPrfNotRedF=prvtSwAclIfAcgMonPrfNotRedF, prvtSwAclObjects=prvtSwAclObjects, prvtSwAclIfAcgMonPrfRateRedB=prvtSwAclIfAcgMonPrfRateRedB, prvtSwAclIfAcgType=prvtSwAclIfAcgType, PrvtSwAclRateType=PrvtSwAclRateType, prvtSwAclSapAcgRedirectIfIndex=prvtSwAclSapAcgRedirectIfIndex, PrvtSwAclVlanMaskType=PrvtSwAclVlanMaskType, prvtSwAclSapAcgAclType=prvtSwAclSapAcgAclType, prvtSwAclSapAcgColorRedFc=prvtSwAclSapAcgColorRedFc, prvtSwAclMacRuleAction=prvtSwAclMacRuleAction, prvtSwAclEthRuleAction=prvtSwAclEthRuleAction, prvtSwAclSapAcgMonPrfRateNotRedF=prvtSwAclSapAcgMonPrfRateNotRedF, prvtSwAclSapAcgMonPrfRateGreenB=prvtSwAclSapAcgMonPrfRateGreenB, prvtSwAclExtRuleId=prvtSwAclExtRuleId, prvtSwAclSapAcgMonPrfTable=prvtSwAclSapAcgMonPrfTable, prvtSwAclEthRuleTos=prvtSwAclEthRuleTos, prvtSwAclSapAcgMonPrfGreenB=prvtSwAclSapAcgMonPrfGreenB, prvtSwAclSapAcgApplyFailed=prvtSwAclSapAcgApplyFailed, PrvtSwAclRateLimitType=PrvtSwAclRateLimitType, PrvtSwAclRuleIdType=PrvtSwAclRuleIdType, prvtSwAclStdRuleDscp=prvtSwAclStdRuleDscp, PrvtSwAclDescrType=PrvtSwAclDescrType, prvtSwAclStdRuleVlanMask=prvtSwAclStdRuleVlanMask, prvtSwAclSapAcgMonPrfMatchF=prvtSwAclSapAcgMonPrfMatchF, prvtSwAclSapAcgRestrictEgForwardingTable=prvtSwAclSapAcgRestrictEgForwardingTable, prvtSwAclIfAcgMonPrfRateYellowB=prvtSwAclIfAcgMonPrfRateYellowB, prvtSwAclExtRuleVlanMask=prvtSwAclExtRuleVlanMask, prvtSwAclIfAcgRLimitPir=prvtSwAclIfAcgRLimitPir, prvtSwAclMacName=prvtSwAclMacName, prvtSwAclSapAcgRLimitPbs=prvtSwAclSapAcgRLimitPbs, prvtSwAclEthRuleEthTypeMask=prvtSwAclEthRuleEthTypeMask)
