#
# PySNMP MIB module ALCATEL-IND1-OPENFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-OPENFLOW-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1OpenflowMIB, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1OpenflowMIB")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, IpAddress, NotificationType, ObjectIdentity, TimeTicks, Counter32, Counter64, Integer32, ModuleIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "Counter64", "Integer32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1OpenflowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1))
alcatelIND1OpenflowMIB.setRevisions(('2014-03-26 00:00', '2014-10-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setRevisionsDescriptions(('The latest version of this MIB Module.', 'alaOpenflowLogicalSwitchLearnedMacUpdate is not limited to OS6900 devices',))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setLastUpdated('201403260000Z')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n               version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                      (Formerly Alcatel Internetworking, Incorporated)\n                                 26801 West Agoura Road\n                              Agoura Hills, CA  91301-5122\n                                United States Of America\n\n              Telephone:               North America  +1 800 995 2696\n                                       Latin America  +1 877 919 9526\n                                       Europe         +31 23 556 0100\n                                       Asia           +65 394 7933\n                                       All Other      +1 818 878 4507\n\n              Electronic Mail:         support@ind.alcatel.com\n              World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n              File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n               Network Management Protocol (SNMP) Management Information Base (MIB):\n\n               Openflow for OS6900 Product Line.\n\n               The right to make changes in specification and other information\n               contained in this document without prior notice is reserved.\n\n               No liability shall be assumed for any incidental, indirect, special, or\n               consequential damages whatsoever arising from or related to this\n               document or the information contained herein.\n\n               Vendors, end-users, and other interested parties are granted\n               non-exclusive license to use this specification in connection with\n               management of the products for which it is intended to be used.\n\n                           Copyright (C) 2013 Alcatel-Lucent\n                               ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1OpenflowMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 0))
alcatelIND1OpenflowMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBObjects.setDescription(' Alcatel-Lucent Openflow Managed Objects.')
alcatelIND1OpenflowMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBConformance.setDescription(' Alcatel-Lucent Openflow Conformance Information.')
alaOpenflowGlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1))
alaOpenflowGlobalBackoffMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalBackoffMax.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowGlobalBackoffMax.setDescription(' Alcatel-Lucent Openflow maximum back-off time in seconds for controller connection attempts.')
alaOpenflowGlobalIdleProbeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOpenflowGlobalIdleProbeTimeout.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowGlobalIdleProbeTimeout.setDescription(' Alcatel-Lucent Openflow idle probe timeout value in seconds. If set to 0, idle probing is disabled.')
alaOpenflowLogicalSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2), )
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTable.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTable.setDescription('This table contains one row for each Logical Switch.')
alaOpenflowLogicalSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitch"))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchEntry.setDescription('Information about the Openflow Logical Switches. ')
alaOpenflowLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowLogicalSwitch.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitch.setDescription('Openflow Logical Switch Name.')
alaOpenflowLogicalSwitchAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchAdminState.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchAdminState.setDescription('Logical Switch Admin State. Enable or disable the Logical Switch.\n          When disabled, all controllers for the Logical Switch will be\n          operationally disabled and flows added by those controllers will\n          be removed.')
alaOpenflowLogicalSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("api", 2), ("pfcChannel", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchMode.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchMode.setDescription('Openflow Logical Switch Mode. Normal is regular Openflow,\n         API is for ACL-like flow operation. Only one Logical Switch\n         can be in api mode at a time. \n\t PFC-Channel mode is to indicate the Logical Switch \n\t is operating in NEC mode.\n\n\t This object cannot be modified after the Logical Switch has been created.')
alaOpenflowLogicalSwitchVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1))).clone(namedValues=NamedValues(("v1dot0", 0), ("v1dot3dot1", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVersions.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVersions.setDescription('Openflow Logical Switch Bitmap of enabled Openflow versions.\n         At least one version must be enabled.')
alaOpenflowLogicalSwitchVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVlan.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchVlan.setDescription('Openflow Logical Switch VLAN. The value 0 indicates that no\n          VLAN has been specified, it is not a valid value to write.\n          This object is not valid to write when creating/modifying an\n          entry with alaOpenflowLogicalSwitchMode api(2)')
alaOpenflowLogicalSwitchControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchControllerCount.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchControllerCount.setDescription('Count of the configured controllers for the Logical Switch.')
alaOpenflowLogicalSwitchInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchInterfaceCount.setDescription('Count of the configured interfaces (ports and link aggregations) for the Logical Switch.')
alaOpenflowLogicalSwitchFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFlowCount.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFlowCount.setDescription('Count of the flows pushed to the Logical Switch by its controllers.')
alaOpenflowLogicalSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchRowStatus.setDescription('Deleting a row from this table will also remove associated entries from other tables in this mib\n         that have a logical switch as part of their index.')
alaOpenflowLogicalSwitchLearnedMacUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchLearnedMacUpdate.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchLearnedMacUpdate.setDescription('This object is only applicable to Logical Switches in api(2) mode.\n          When enabled(1), learned MACs will be forwarded to controllers\n          via a Packet-In message.')
alaOpenflowLogicalSwitchProbeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchProbeTime.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchProbeTime.setDescription('Probe-time for a logical switch in the pfc-channel mode in seconds,\n\t  which will override the existing global idle-probe-time for sending \n\t  echo-request to the OpenFlow Controller.')
alaOpenflowLogicalSwitchFailureDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFailureDetectTime.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchFailureDetectTime.setDescription('Failure detect time, in seconds, is configured for a logical switch \n\t  in the pfc-channel mode for detecting disconnection to the \n\t  OpenFlow Controller if there was no echo reply or message from the controller.')
alaOpenflowLogicalSwitchDPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchDPID.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchDPID.setDescription('An unique 8 bytes DPID for a logical switch.')
alaOpenflowLogicalSwitchTableMissAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("controller", 2))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTableMissAction.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTableMissAction.setDescription('The action to be taken when an Openflow Table Miss occurs. When set to drop \n\t  if any packet has a table miss, it will be dropped. If set to controller\n\t  it will be forwarded to the controller.')
alaOpenflowLogicalSwitchTCPBufferSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(2)).setUnits('Kilo Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeTx.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeTx.setDescription('TCP send buffer size, in Kilo Bytes, for socket connection to OpenFlow controllers \n       in the logical switch.')
alaOpenflowLogicalSwitchTCPBufferSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(2)).setUnits('Kilo Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeRx.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowLogicalSwitchTCPBufferSizeRx.setDescription('TCP receive buffer size, in Kilo Bytes, for socket connection to OpenFlow controllers \n       in the logical switch.')
alaOpenflowControllerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3), )
if mibBuilder.loadTexts: alaOpenflowControllerTable.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerTable.setDescription('This table contains one row for each controller on each logical switch.\n           Currently, up to three controllers per logical switch are supported per logical switch.')
alaOpenflowControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIpType"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerIp"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerPort"))
if mibBuilder.loadTexts: alaOpenflowControllerEntry.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerEntry.setDescription('Information about the Openflow Controllers attached to Logical Switches. ')
alaOpenflowControllerLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowControllerLogicalSwitch.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerLogicalSwitch.setDescription('Openflow Logical Switch Name.')
alaOpenflowControllerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 2), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaOpenflowControllerIpType.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerIpType.setDescription('Openflow Controller IP Address Type. The only type currently supported is ipv4(1)')
alaOpenflowControllerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaOpenflowControllerIp.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerIp.setDescription('Openflow Controller IP Address. As specified by alaOpenflowControllerIpType,\n         only ipv4 is currently supported')
alaOpenflowControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowControllerPort.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerPort.setDescription('Openflow Controller Port.')
alaOpenflowControllerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("equal", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerRole.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerRole.setDescription('Role of the Controller for the Logical Switch. The role is negotiated by the\n         controllers and the switch is notified of the outcome (1.3.1+). 1.0 controllers\n         will always have the role of equal. Only one controller per Logical Switch\n         can have the role of master.')
alaOpenflowControllerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerAdminState.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerAdminState.setDescription("Controller Admin State. Enable or disable connection to the controller.\n          The Logical Switch runs in 'Fail Secure Mode' so all flow aging, etc\n          continues unaffected when the controller is administratively disabled.")
alaOpenflowControllerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("disabled", 2), ("sendError", 3), ("init", 4), ("connecting", 5), ("backoff", 6), ("exchangingHello", 7), ("active", 8), ("idle", 9), ("disconnected", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowControllerOperState.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerOperState.setDescription('State of the Logical Switch connection to the Controller.')
alaOpenflowControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerRowStatus.setDescription('On create, if the specified logical switch does not exist in alaOpenflowLogicalSwitchTable,\n          an entry will be created in that table. Delete does not effect alaOpenflowLogicalSwitchTable.')
alaOpenflowControllerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowControllerPriority.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowControllerPriority.setDescription('Openflow Controller Priority. Priority value of 0 implies highest pririoty and 2 implies lowest.')
alaOpenflowInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4), )
if mibBuilder.loadTexts: alaOpenflowInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceTable.setDescription('This table contains one row for each interface (port or link aggregation) assigned to\n           a logical switch. An interface can only belong to one logical switch at a time.\n           If a logical switch in API mode exists, interfaces cannot be manually added to/deleted from it;\n           instead, interfaces default to the API mode logical switch when not assigned to another Logical Switch.\n           Interfaces can be reassigned from the API mode logical switch to a normal mode logical switch\n           (by adding it to that normal mode logical switch) but not directly reassigned from one normal mode\n           logical switch to another normal mode logical switch.')
alaOpenflowInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterface"))
if mibBuilder.loadTexts: alaOpenflowInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceEntry.setDescription('Information about the interfaces assigned to Openflow Logical Switches.')
alaOpenflowInterfaceLogicalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaOpenflowInterfaceLogicalSwitch.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceLogicalSwitch.setDescription('Openflow Logical Switch Name.')
alaOpenflowInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaOpenflowInterface.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterface.setDescription('Openflow Interface attached to a Logical Switch. Port values are dot1dBasePort values,\n         Link Aggregations start at 32769.')
alaOpenflowInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("api", 2), ("pfcChannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOpenflowInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceMode.setDescription('Openflow Interface Mode. Normal is regular Openflow,\n         API is for ACL like flow operation and PFC-Channel is for NEC OFC.')
alaOpenflowInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceRowStatus.setDescription('On create, if the specified logical switch does not exist in alaOpenflowLogicalSwitchTable,\n          an entry will be created in that table. Delete does not effect alaOpenflowLogicalSwitchTable.')
alaOpenflowInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunk", 1), ("access", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceType.setDescription('Openflow Interface Type.')
alaOpenflowInterfaceNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceNativeVlan.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceNativeVlan.setDescription('Native VLAN for Openflow Interface.')
alaOpenflowInterfaceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5), )
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanTable.setDescription('This table contains a list of Tag VLANs for an OpenFlow Interface (port or link-aggregation) Entry.\n           logical switch belongs to.')
alaOpenflowInterfaceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceLogicalSwitch"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterface"), (0, "ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceVlanVlanID"))
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanEntry.setDescription('Information about the Tag VLANs associated with an OpenFlow Interface.')
alaOpenflowInterfaceVlanVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), )))
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanVlanID.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanVlanID.setDescription('Tag VLAN for an Openflow Interface.')
alaOpenflowInterfaceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowInterfaceVlanRowStatus.setDescription('On create, the specified logical switch interface must exist in alaOpenflowInterfaceTable,\n          otherwise an entry creation in this table would not be allowed. Deletion of an interface entry in \n          alaOpenflowInterfaceTable would result in deletion of all entries for that interface in the\n          alaOpenflowInterfaceVlanEntry')
alcatelIND1OpenflowMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBGroups.setDescription('Branch For ALU Openflow MIB Subsystem Units Of Conformance.')
alcatelIND1OpenflowMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OpenflowMIBCompliances.setDescription('Branch For ALU Openflow MIB Subsystem Compliance Statements.')
alaOpenflowMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleConfigGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleLogicalSwitchGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleControllerGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleInterfaceGroup"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowModuleInterfaceVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowMIBCompliance = alaOpenflowMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowMIBCompliance.setDescription('Compliance statement for Openflow.')
alaOpenflowModuleConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalBackoffMax"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowGlobalIdleProbeTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleConfigGroup = alaOpenflowModuleConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowModuleConfigGroup.setDescription('Openflow Global Configuration Modules Group.')
alaOpenflowModuleLogicalSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVersions"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchVlan"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchControllerCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchInterfaceCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchFlowCount"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchLearnedMacUpdate"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchProbeTime"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchFailureDetectTime"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchDPID"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTableMissAction"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTCPBufferSizeTx"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowLogicalSwitchTCPBufferSizeRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleLogicalSwitchGroup = alaOpenflowModuleLogicalSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowModuleLogicalSwitchGroup.setDescription('Openflow Logical Switch Configuration Modules Group.')
alaOpenflowModuleControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRole"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerAdminState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerOperState"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowControllerPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleControllerGroup = alaOpenflowModuleControllerGroup.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowModuleControllerGroup.setDescription('Openflow Controller Configuration Modules Group.')
alaOpenflowModuleInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceMode"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceRowStatus"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceType"), ("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceNativeVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleInterfaceGroup = alaOpenflowModuleInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowModuleInterfaceGroup.setDescription('Openflow Interface Configuration Modules Group.')
alaOpenflowModuleInterfaceVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 77, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-OPENFLOW-MIB", "alaOpenflowInterfaceVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOpenflowModuleInterfaceVlanGroup = alaOpenflowModuleInterfaceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaOpenflowModuleInterfaceVlanGroup.setDescription('Openflow Interface with VLAN Configuration Modules Group.')
mibBuilder.exportSymbols("ALCATEL-IND1-OPENFLOW-MIB", alaOpenflowControllerPort=alaOpenflowControllerPort, alaOpenflowInterfaceVlanRowStatus=alaOpenflowInterfaceVlanRowStatus, alaOpenflowModuleLogicalSwitchGroup=alaOpenflowModuleLogicalSwitchGroup, alaOpenflowControllerTable=alaOpenflowControllerTable, alaOpenflowLogicalSwitchFlowCount=alaOpenflowLogicalSwitchFlowCount, alaOpenflowLogicalSwitchLearnedMacUpdate=alaOpenflowLogicalSwitchLearnedMacUpdate, alaOpenflowLogicalSwitchVlan=alaOpenflowLogicalSwitchVlan, alaOpenflowLogicalSwitchFailureDetectTime=alaOpenflowLogicalSwitchFailureDetectTime, alaOpenflowControllerIpType=alaOpenflowControllerIpType, alcatelIND1OpenflowMIB=alcatelIND1OpenflowMIB, alaOpenflowInterfaceEntry=alaOpenflowInterfaceEntry, alaOpenflowLogicalSwitchTCPBufferSizeRx=alaOpenflowLogicalSwitchTCPBufferSizeRx, alcatelIND1OpenflowMIBConformance=alcatelIND1OpenflowMIBConformance, alaOpenflowModuleInterfaceGroup=alaOpenflowModuleInterfaceGroup, alaOpenflowInterfaceType=alaOpenflowInterfaceType, alaOpenflowLogicalSwitchTCPBufferSizeTx=alaOpenflowLogicalSwitchTCPBufferSizeTx, alaOpenflowControllerOperState=alaOpenflowControllerOperState, alaOpenflowInterfaceVlanEntry=alaOpenflowInterfaceVlanEntry, alaOpenflowInterfaceNativeVlan=alaOpenflowInterfaceNativeVlan, alaOpenflowInterfaceMode=alaOpenflowInterfaceMode, alaOpenflowModuleInterfaceVlanGroup=alaOpenflowModuleInterfaceVlanGroup, alaOpenflowInterfaceRowStatus=alaOpenflowInterfaceRowStatus, alaOpenflowLogicalSwitchTable=alaOpenflowLogicalSwitchTable, alaOpenflowInterfaceVlanVlanID=alaOpenflowInterfaceVlanVlanID, PYSNMP_MODULE_ID=alcatelIND1OpenflowMIB, alaOpenflowLogicalSwitchControllerCount=alaOpenflowLogicalSwitchControllerCount, alaOpenflowControllerLogicalSwitch=alaOpenflowControllerLogicalSwitch, alaOpenflowInterfaceVlanTable=alaOpenflowInterfaceVlanTable, alaOpenflowLogicalSwitchDPID=alaOpenflowLogicalSwitchDPID, alaOpenflowMIBCompliance=alaOpenflowMIBCompliance, alaOpenflowLogicalSwitchEntry=alaOpenflowLogicalSwitchEntry, alaOpenflowControllerRole=alaOpenflowControllerRole, alaOpenflowGlobalIdleProbeTimeout=alaOpenflowGlobalIdleProbeTimeout, alcatelIND1OpenflowMIBGroups=alcatelIND1OpenflowMIBGroups, alaOpenflowLogicalSwitch=alaOpenflowLogicalSwitch, alaOpenflowGlobalBackoffMax=alaOpenflowGlobalBackoffMax, alaOpenflowLogicalSwitchRowStatus=alaOpenflowLogicalSwitchRowStatus, alaOpenflowLogicalSwitchInterfaceCount=alaOpenflowLogicalSwitchInterfaceCount, alaOpenflowLogicalSwitchMode=alaOpenflowLogicalSwitchMode, alaOpenflowGlobalConfigObjects=alaOpenflowGlobalConfigObjects, alaOpenflowControllerIp=alaOpenflowControllerIp, alaOpenflowControllerPriority=alaOpenflowControllerPriority, alaOpenflowLogicalSwitchVersions=alaOpenflowLogicalSwitchVersions, alaOpenflowLogicalSwitchProbeTime=alaOpenflowLogicalSwitchProbeTime, alaOpenflowInterfaceTable=alaOpenflowInterfaceTable, alcatelIND1OpenflowMIBCompliances=alcatelIND1OpenflowMIBCompliances, alaOpenflowModuleControllerGroup=alaOpenflowModuleControllerGroup, alcatelIND1OpenflowMIBNotifications=alcatelIND1OpenflowMIBNotifications, alaOpenflowControllerAdminState=alaOpenflowControllerAdminState, alaOpenflowControllerRowStatus=alaOpenflowControllerRowStatus, alaOpenflowInterface=alaOpenflowInterface, alaOpenflowLogicalSwitchAdminState=alaOpenflowLogicalSwitchAdminState, alaOpenflowInterfaceLogicalSwitch=alaOpenflowInterfaceLogicalSwitch, alaOpenflowModuleConfigGroup=alaOpenflowModuleConfigGroup, alcatelIND1OpenflowMIBObjects=alcatelIND1OpenflowMIBObjects, alaOpenflowLogicalSwitchTableMissAction=alaOpenflowLogicalSwitchTableMissAction, alaOpenflowControllerEntry=alaOpenflowControllerEntry)
