#
# PySNMP MIB module DMTF-LAN-ADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DMTF-LAN-ADAPTER-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:08:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dmiCompId, dmiEventSystem, dmiEventAssociatedGroup, DmiString, dmiEventDateTime, dmiEventSubSystem, dmiEventSeverity, dmiEventStateKey = mibBuilder.importSymbols("DMTF-DMI-MIB", "dmiCompId", "dmiEventSystem", "dmiEventAssociatedGroup", "DmiString", "dmiEventDateTime", "dmiEventSubSystem", "dmiEventSeverity", "dmiEventStateKey")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks, Bits, MibIdentifier, enterprises, Integer32, Counter32, IpAddress, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "enterprises", "Integer32", "Counter32", "IpAddress", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfLANAdapterMIF = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 2, 2))
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setOrganization('Desktop Management Task Force')
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setContactInfo('         DMTF Technical Advisory Committee\n\n\t\t    Mailstop JF2-53\n                    2111 N.E. 25th Avenue\n                    Hillsboro, OR 97124\n\n\t\t    Phone: +1 503 264-9300\n                    Email: dmtf-info@dmtf.org\n          ')
if mibBuilder.loadTexts: dmtfLANAdapterMIF.setDescription('This MIB is a translation of the DMTF LAN Adapter MIF,\n          based on the translation rules defined by the\n          DMTF DMI to SNMP Mapping Standard, Version 1.0.\n\n\t  DMI-based systems running a DMI-to-SNMP Mapping\n          Agent provide the ability to access DMI component\n          instrumentation via SNMP protocol operations.\n          ')
dmtf802AlternateAddressTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 2), )
if mibBuilder.loadTexts: dmtf802AlternateAddressTable.setStatus('current')
if mibBuilder.loadTexts: dmtf802AlternateAddressTable.setDescription('Contains objects related to alternate addresses for each\nnetwork adapter port.')
dmtf802AlternateAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "alternateAddressIndex"))
if mibBuilder.loadTexts: dmtf802AlternateAddressEntry.setStatus('current')
if mibBuilder.loadTexts: dmtf802AlternateAddressEntry.setDescription('Contains objects related to alternate addresses for each\nnetwork adapter port.')
dmtf802AlternateAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtf802AlternateAddressState.setReference("'DMTF|802 Alternate Address|001' 0")
if mibBuilder.loadTexts: dmtf802AlternateAddressState.setStatus('current')
alternateAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateAddressIndex.setReference("'DMTF|802 Alternate Address|001' 1")
if mibBuilder.loadTexts: alternateAddressIndex.setStatus('current')
if mibBuilder.loadTexts: alternateAddressIndex.setDescription('This is an arbitrary number assigned to each alternate address.\nThe Alternate Address Index usually starts with 1 and increments for each\nadditional alternate address.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setReference("'DMTF|802 Alternate Address|001' 2")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription("The value of the Port Index attribute for the network port\nthat uses this alternate address, i.e. the 'port number'.")
addressType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multicast", 1), ("functional", 2), ("group", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressType.setReference("'DMTF|802 Alternate Address|001' 3")
if mibBuilder.loadTexts: addressType.setStatus('current')
if mibBuilder.loadTexts: addressType.setDescription('This is the type of alternate address, e.g. multicast, functiona\n, etc.')
alternateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 2, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateAddress.setReference("'DMTF|802 Alternate Address|001' 4")
if mibBuilder.loadTexts: alternateAddress.setStatus('current')
if mibBuilder.loadTexts: alternateAddress.setDescription('This is the actual alternate address value.')
dmtfBootROMCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 6), )
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesTable.setDescription('This group describes the capabilities or special features\nsupported by this ROM.')
dmtfBootROMCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "capabilityIndex"))
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesEntry.setDescription('This group describes the capabilities or special features\nsupported by this ROM.')
dmtfBootROMCapabilitiesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesState.setReference("'DMTF|Boot ROM Capabilities|001' 0")
if mibBuilder.loadTexts: dmtfBootROMCapabilitiesState.setStatus('current')
capabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityIndex.setReference("'DMTF|Boot ROM Capabilities|001' 1")
if mibBuilder.loadTexts: capabilityIndex.setStatus('current')
if mibBuilder.loadTexts: capabilityIndex.setDescription('This is an arbitrary number assigned to each capability.\nThe Capability Index usually starts with 1 and increments for each additional\ncapability.')
capabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityDescription.setReference("'DMTF|Boot ROM Capabilities|001' 2")
if mibBuilder.loadTexts: capabilityDescription.setStatus('current')
if mibBuilder.loadTexts: capabilityDescription.setDescription("This is a clear description of a property or special feature\nof the ROM, e.g. 'virus protection'.")
capabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 6, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityStatus.setReference("'DMTF|Boot ROM Capabilities|001' 3")
if mibBuilder.loadTexts: capabilityStatus.setStatus('current')
if mibBuilder.loadTexts: capabilityStatus.setDescription("The current state or value associated with the capability\nor special feature, e.g. 'enabled', 'active', etc.")
dmtfBootROMConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 5), )
if mibBuilder.loadTexts: dmtfBootROMConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dmtfBootROMConfigurationTable.setDescription('This group describes the characteristics of the boot ROM.')
dmtfBootROMConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfBootROMConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfBootROMConfigurationEntry.setDescription('This group describes the characteristics of the boot ROM.')
bootROMDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 1), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootROMDescription.setReference("'DMTF|Boot ROM Configuration|001' 1")
if mibBuilder.loadTexts: bootROMDescription.setStatus('current')
if mibBuilder.loadTexts: bootROMDescription.setDescription('This is the description of the software contained in the\nboot ROM.')
bootROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootROMVersion.setReference("'DMTF|Boot ROM Configuration|001' 2")
if mibBuilder.loadTexts: bootROMVersion.setStatus('current')
if mibBuilder.loadTexts: bootROMVersion.setDescription('This is the version number of the boot ROM software.')
remoteBootProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("rPL", 3), ("bootP", 4), ("dECMOP", 5), ("nativeNetWare", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteBootProtocolType.setReference("'DMTF|Boot ROM Configuration|001' 3")
if mibBuilder.loadTexts: remoteBootProtocolType.setStatus('current')
if mibBuilder.loadTexts: remoteBootProtocolType.setDescription('This is the type of remote boot protocol supported by this\nROM.')
remoteBootProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 5, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteBootProtocolVersion.setReference("'DMTF|Boot ROM Configuration|001' 4")
if mibBuilder.loadTexts: remoteBootProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: remoteBootProtocolVersion.setDescription('The version of the remote boot protocol supported by this\nROM.')
dmtfNetworkAdapter802PortTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 1), )
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortTable.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortTable.setDescription('Contains objects related to each of the network ports on\nthe network adapter.')
dmtfNetworkAdapter802PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "portIndex"))
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortEntry.setDescription('Contains objects related to each of the network ports on\nthe network adapter.')
dmtfNetworkAdapter802PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortState.setReference("'DMTF|Network Adapter 802 Port|001' 0")
if mibBuilder.loadTexts: dmtfNetworkAdapter802PortState.setStatus('current')
portIndex2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex2.setReference("'DMTF|Network Adapter 802 Port|001' 1")
if mibBuilder.loadTexts: portIndex2.setStatus('current')
if mibBuilder.loadTexts: portIndex2.setDescription("This attribute is the ordinal of the network port within\nthe network adapter, i.e. the 'port number'.")
permanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: permanentNetworkAddress.setReference("'DMTF|Network Adapter 802 Port|001' 2")
if mibBuilder.loadTexts: permanentNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: permanentNetworkAddress.setDescription('This is the node address stored permanently in the adapter.')
currentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentNetworkAddress.setReference("'DMTF|Network Adapter 802 Port|001' 3")
if mibBuilder.loadTexts: currentNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: currentNetworkAddress.setDescription('This is the node address that can be modified by software,\nsometimes referred to as the Locally Administered Address (LAA).')
connectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("aUI", 2), ("uTPCategory3", 3), ("uTPCategory4", 4), ("uTPCategory5", 5), ("bNC", 6), ("sTPRJ45", 7), ("sTPDB9", 8), ("fiberMIC", 9), ("appleAUI", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorType.setReference("'DMTF|Network Adapter 802 Port|001' 4")
if mibBuilder.loadTexts: connectorType.setStatus('current')
if mibBuilder.loadTexts: connectorType.setDescription('This is the type of connector currently being used to physically\nattach this port to the LAN.')
dataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataRate.setReference("'DMTF|Network Adapter 802 Port|001' 5")
if mibBuilder.loadTexts: dataRate.setStatus('current')
if mibBuilder.loadTexts: dataRate.setDescription('This is the rate at which data is transferred over the LAN\nin Mbps.')
totalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 6), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsTransmitted.setReference("'DMTF|Network Adapter 802 Port|001' 6")
if mibBuilder.loadTexts: totalPacketsTransmitted.setStatus('current')
if mibBuilder.loadTexts: totalPacketsTransmitted.setDescription('This is the total number of packets transmitted.')
totalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 7), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesTransmitted.setReference("'DMTF|Network Adapter 802 Port|001' 7")
if mibBuilder.loadTexts: totalBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: totalBytesTransmitted.setDescription('This is the total number of bytes transmitted.')
totalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 8), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsReceived.setReference("'DMTF|Network Adapter 802 Port|001' 8")
if mibBuilder.loadTexts: totalPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: totalPacketsReceived.setDescription('This is the total number of packets received.')
totalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 9), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesReceived.setReference("'DMTF|Network Adapter 802 Port|001' 9")
if mibBuilder.loadTexts: totalBytesReceived.setStatus('current')
if mibBuilder.loadTexts: totalBytesReceived.setDescription('This is the total number of bytes received.')
totalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 10), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTransmitErrors.setReference("'DMTF|Network Adapter 802 Port|001' 10")
if mibBuilder.loadTexts: totalTransmitErrors.setStatus('current')
if mibBuilder.loadTexts: totalTransmitErrors.setDescription('This is the total number of transmit errors of any type.')
totalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 11), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalReceiveErrors.setReference("'DMTF|Network Adapter 802 Port|001' 11")
if mibBuilder.loadTexts: totalReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: totalReceiveErrors.setDescription('This is the total number of receive errors of any type.')
totalHostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 12), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalHostErrors.setReference("'DMTF|Network Adapter 802 Port|001' 12")
if mibBuilder.loadTexts: totalHostErrors.setStatus('current')
if mibBuilder.loadTexts: totalHostErrors.setDescription('This is the total number of errors due to problems with the\nnetwork adapter host interface.(e.g. overrun / underrun errors).')
totalWireErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 1, 1, 13), DmiCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalWireErrors.setReference("'DMTF|Network Adapter 802 Port|001' 13")
if mibBuilder.loadTexts: totalWireErrors.setStatus('current')
if mibBuilder.loadTexts: totalWireErrors.setDescription('This is the total number of errors due to problems with the\nnetwork (e.g. receive CRC Errors).')
dmtfNetworkAdapterDriverTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 3), )
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverTable.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverTable.setDescription('')
dmtfNetworkAdapterDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"), (0, "DMTF-LAN-ADAPTER-MIB", "driverIndex"))
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverEntry.setDescription('')
dmtfNetworkAdapterDriverState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverState.setReference("'DMTF|Network Adapter Driver|001' 0")
if mibBuilder.loadTexts: dmtfNetworkAdapterDriverState.setStatus('current')
driverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIndex.setReference("'DMTF|Network Adapter Driver|001' 1")
if mibBuilder.loadTexts: driverIndex.setStatus('current')
if mibBuilder.loadTexts: driverIndex.setDescription('')
driverSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareName.setReference("'DMTF|Network Adapter Driver|001' 2")
if mibBuilder.loadTexts: driverSoftwareName.setStatus('current')
if mibBuilder.loadTexts: driverSoftwareName.setDescription('')
driverSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareVersion.setReference("'DMTF|Network Adapter Driver|001' 3")
if mibBuilder.loadTexts: driverSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: driverSoftwareVersion.setDescription('')
driverSoftwareDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSoftwareDescription.setReference("'DMTF|Network Adapter Driver|001' 4")
if mibBuilder.loadTexts: driverSoftwareDescription.setStatus('current')
if mibBuilder.loadTexts: driverSoftwareDescription.setDescription('')
driverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSize.setReference("'DMTF|Network Adapter Driver|001' 5")
if mibBuilder.loadTexts: driverSize.setStatus('current')
if mibBuilder.loadTexts: driverSize.setDescription('')
driverInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("iPX", 2), ("oDI", 3), ("nDIS", 4), ("packetDriver", 5), ("lANtastic", 6), ("uNIX", 7), ("appletalk", 8), ("iBMLanSupportProgram", 9), ("lLC", 10), ("netbios", 11), ("pathworksDLL", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceType.setReference("'DMTF|Network Adapter Driver|001' 6")
if mibBuilder.loadTexts: driverInterfaceType.setStatus('current')
if mibBuilder.loadTexts: driverInterfaceType.setDescription('')
driverInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceVersion.setReference("'DMTF|Network Adapter Driver|001' 7")
if mibBuilder.loadTexts: driverInterfaceVersion.setStatus('current')
if mibBuilder.loadTexts: driverInterfaceVersion.setDescription('')
driverInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 3, 1, 8), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverInterfaceDescription.setReference("'DMTF|Network Adapter Driver|001' 8")
if mibBuilder.loadTexts: driverInterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: driverInterfaceDescription.setDescription('')
dmtfNetworkAdapterHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 2, 4), )
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareTable.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareTable.setDescription('Contains objects related to the network adapter hardware.')
dmtfNetworkAdapterHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1), ).setIndexNames((0, "DMTF-LAN-ADAPTER-MIB", "DmiCompId"), (0, "DMTF-LAN-ADAPTER-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfNetworkAdapterHardwareEntry.setDescription('Contains objects related to the network adapter hardware.')
networkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("x10MbpsEthernet", 2), ("x100MbpsEthernet", 3), ("x10010MbpsEthernet", 4), ("x100MbpsVGAnyLAN", 5), ("x4MbpsTokenRing", 6), ("x16MbpsTokenRing", 7), ("x164MbpsTokenRing", 8), ("x2MbpsArcnet", 9), ("x20MbpsArcnet", 10), ("fDDI", 11), ("aTM", 12), ("appleTalk", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkTopology.setReference("'DMTF|Network Adapter Hardware|001' 1")
if mibBuilder.loadTexts: networkTopology.setStatus('current')
if mibBuilder.loadTexts: networkTopology.setDescription('This is the network media access method/topology supported\nby this adapter.')
transmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmissionCapability.setReference("'DMTF|Network Adapter Hardware|001' 2")
if mibBuilder.loadTexts: transmissionCapability.setStatus('current')
if mibBuilder.loadTexts: transmissionCapability.setDescription('The transmission capabilities of the adapter.')
networkAdapterRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAdapterRAMSize.setReference("'DMTF|Network Adapter Hardware|001' 3")
if mibBuilder.loadTexts: networkAdapterRAMSize.setStatus('current')
if mibBuilder.loadTexts: networkAdapterRAMSize.setDescription('This is the total size of adapter RAM in Kb.')
busType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("other", 1), ("iSA", 2), ("eISA", 3), ("mCA", 4), ("pCI", 5), ("vL", 6), ("pCMCIA", 7), ("parallel", 8), ("nEC98", 9), ("motherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busType.setReference("'DMTF|Network Adapter Hardware|001' 4")
if mibBuilder.loadTexts: busType.setStatus('current')
if mibBuilder.loadTexts: busType.setDescription('This is the type of bus used to interface the adapter to\nthe host.')
busWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitCard", 3), ("x16BitCard", 4), ("x32BitCard", 5), ("x64BitCard", 6), ("x128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busWidth.setReference("'DMTF|Network Adapter Hardware|001' 5")
if mibBuilder.loadTexts: busWidth.setStatus('current')
if mibBuilder.loadTexts: busWidth.setDescription('This is the width (in bits) of the data path used to interface\nthe adapter with the host.')
mibBuilder.exportSymbols("DMTF-LAN-ADAPTER-MIB", dmtfNetworkAdapter802PortTable=dmtfNetworkAdapter802PortTable, permanentNetworkAddress=permanentNetworkAddress, dmtfStdMifs=dmtfStdMifs, dmtfBootROMConfigurationTable=dmtfBootROMConfigurationTable, driverSoftwareDescription=driverSoftwareDescription, capabilityDescription=capabilityDescription, dmtfNetworkAdapterHardwareEntry=dmtfNetworkAdapterHardwareEntry, capabilityStatus=capabilityStatus, totalWireErrors=totalWireErrors, driverSoftwareVersion=driverSoftwareVersion, dmtf802AlternateAddressEntry=dmtf802AlternateAddressEntry, driverSize=driverSize, networkAdapterRAMSize=networkAdapterRAMSize, driverSoftwareName=driverSoftwareName, dmtfBootROMCapabilitiesEntry=dmtfBootROMCapabilitiesEntry, dmtfBootROMConfigurationEntry=dmtfBootROMConfigurationEntry, DmiCounter=DmiCounter, DmiGauge=DmiGauge, totalReceiveErrors=totalReceiveErrors, dmtfNetworkAdapterHardwareTable=dmtfNetworkAdapterHardwareTable, DmiInteger=DmiInteger, remoteBootProtocolType=remoteBootProtocolType, portIndex=portIndex, totalTransmitErrors=totalTransmitErrors, dmtfBootROMCapabilitiesState=dmtfBootROMCapabilitiesState, totalPacketsTransmitted=totalPacketsTransmitted, totalBytesReceived=totalBytesReceived, dmtfLANAdapterMIF=dmtfLANAdapterMIF, dmtfDynOids=dmtfDynOids, DmiGroupId=DmiGroupId, bootROMDescription=bootROMDescription, addressType=addressType, totalHostErrors=totalHostErrors, dmtfNetworkAdapterDriverEntry=dmtfNetworkAdapterDriverEntry, portIndex2=portIndex2, driverInterfaceType=driverInterfaceType, busType=busType, remoteBootProtocolVersion=remoteBootProtocolVersion, driverInterfaceVersion=driverInterfaceVersion, networkTopology=networkTopology, driverIndex=driverIndex, connectorType=connectorType, dmtfNetworkAdapterDriverTable=dmtfNetworkAdapterDriverTable, dmtf802AlternateAddressState=dmtf802AlternateAddressState, dmtfBootROMCapabilitiesTable=dmtfBootROMCapabilitiesTable, dmtf=dmtf, DmiOctetstring=DmiOctetstring, alternateAddressIndex=alternateAddressIndex, capabilityIndex=capabilityIndex, bootROMVersion=bootROMVersion, dmtfNetworkAdapter802PortEntry=dmtfNetworkAdapter802PortEntry, dmtfNetworkAdapter802PortState=dmtfNetworkAdapter802PortState, dmtf802AlternateAddressTable=dmtf802AlternateAddressTable, dataRate=dataRate, totalPacketsReceived=totalPacketsReceived, DmiCompId=DmiCompId, totalBytesTransmitted=totalBytesTransmitted, DmiCounter64=DmiCounter64, dmtfNetworkAdapterDriverState=dmtfNetworkAdapterDriverState, busWidth=busWidth, driverInterfaceDescription=driverInterfaceDescription, PYSNMP_MODULE_ID=dmtfLANAdapterMIF, transmissionCapability=transmissionCapability, currentNetworkAddress=currentNetworkAddress, alternateAddress=alternateAddress)
