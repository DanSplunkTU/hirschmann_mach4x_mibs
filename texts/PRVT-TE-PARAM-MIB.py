#
# PySNMP MIB module PRVT-TE-PARAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-TE-PARAM-MIB
# Produced by pysmi-1.1.3 at Sun Nov 21 13:32:17 2021
# On host fv-az74-779 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
mpls, = mibBuilder.importSymbols("PRVT-CR-LDP-MIB", "mpls")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, IpAddress, NotificationType, Counter32, Bits, ModuleIdentity, Integer32, Unsigned32, Gauge32, iso, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "IpAddress", "NotificationType", "Counter32", "Bits", "ModuleIdentity", "Integer32", "Unsigned32", "Gauge32", "iso", "Counter64", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
prvtTeParamMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9))
prvtTeParamMib.setRevisions(('2007-12-11 00:00', '2007-10-25 00:00', '2007-08-10 00:00', '2007-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtTeParamMib.setRevisionsDescriptions(('changed prvtTeParamAdminGroupName length to 32', 'changed ospfOpaqueEngSupport description', 'changed object descriptions', 'initial version',))
if mibBuilder.loadTexts: prvtTeParamMib.setLastUpdated('200712110000Z')
if mibBuilder.loadTexts: prvtTeParamMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtTeParamMib.setContactInfo(' BATM/Telco Systems Support team\n\t\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtTeParamMib.setDescription('The MIB module for management of TE-params entities.')
prvtTeParamMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 0))
prvtTeParamMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1))
prvtTeParamMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 2))
class TeLinkBandwidth(TextualConvention, OctetString):
    reference = 'IEEE Standard for Binary Floating-Point Arithmetic,\n           Standard 754-1985'
    description = 'This type is used to represent link bandwidth in bps.  This\n           value is represented using a 4 octet IEEE floating point\n           format [IEEE].  The floating point representation is not\n           used to represent fractional value but rather to allow\n           specification of large numbers that cannot be expressed\n           with 32-bit integers.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

prvtTeParamTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4), )
if mibBuilder.loadTexts: prvtTeParamTable.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamTable.setDescription('A list of ip interface entries.')
prvtTeParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtTeParamEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamEntry.setDescription('An entry in this table exists for each entry from\n\t\t\t\t ipInterfaceTable. An ipInterfaceEntry in the ipInterfaceTable\n\t\t\t\t must exist. If a ip interface entry in the ipInterfaceTable\n\t\t\t\t is destroyed, then so is the corresponding entry in this \n\t\t\t\t table. The administrative and operational status \n\t\t\t\t values are controlled from the ifEntry and ipInterfaceEntry.')
prvtTeParamAdminGroupTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 5), )
if mibBuilder.loadTexts: prvtTeParamAdminGroupTable.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamAdminGroupTable.setDescription('Table for administrative groups manipulation.')
prvtTeParamAdminGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 5, 1), ).setIndexNames((0, "PRVT-TE-PARAM-MIB", "prvtTeParamAdminGroupId"))
if mibBuilder.loadTexts: prvtTeParamAdminGroupEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamAdminGroupEntry.setDescription('prvtTeParamAdminGroupTable allows specifiying of a group-name to each\n          existing administrative group. Each group is uniquely identified by its prvtTeParamAdminGroupId.')
ospfOpaqueEngSupport = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfOpaqueEngSupport.setStatus('current')
if mibBuilder.loadTexts: ospfOpaqueEngSupport.setDescription('Controls ospf opaque support.')
ospfTeRouterId = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfTeRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfTeRouterId.setDescription('Traffic engineering router ID.')
ospfTrafficEngSupport = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfTrafficEngSupport.setStatus('current')
if mibBuilder.loadTexts: ospfTrafficEngSupport.setDescription('Controls traffic engeneering support. Read-only for current implementation.')
prvtTeParamLinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamLinkAddressType.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamLinkAddressType.setDescription('The type of Internet address for the TE link.')
prvtTeParamMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMetric.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201')
if mibBuilder.loadTexts: prvtTeParamMetric.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMetric.setDescription('The traffic engineering metric for the TE link is\n           derived from its component links.  All component links\n           within the TE link must have the same traffic\n           engineering metric.')
prvtTeParamLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiAccess", 1), ("pointToPoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamLinkType.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamLinkType.setDescription('This indicates the type of the link such as point-to-point\n   or multi-access')
prvtTeParamPhysicalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 4), TeLinkBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamPhysicalBandwidth.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamPhysicalBandwidth.setDescription('Physical bandwidth for the TE link.')
prvtTeParamMaximumReservableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 5), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaximumReservableBandwidth.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaximumReservableBandwidth.setDescription('Maximum reservable bandwidth for the TE link.')
prvtTeParamMaxReservableBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 6), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio0.setDescription('Maximum reservable bandwidth for the TE link with priority 0.')
prvtTeParamMaxReservableBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 7), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio1.setDescription('Maximum reservable bandwidth for the TE link with priority 1.')
prvtTeParamMaxReservableBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 8), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio2.setDescription('Maximum reservable bandwidth for the TE link with priority 2.')
prvtTeParamMaxReservableBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 9), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio3.setDescription('Maximum reservable bandwidth for the TE link with priority 3.')
prvtTeParamMaxReservableBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 10), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio4.setDescription('Maximum reservable bandwidth for the TE link with priority 4.')
prvtTeParamMaxReservableBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 11), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio5.setDescription('Maximum reservable bandwidth for the TE link with priority 5.')
prvtTeParamMaxReservableBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 12), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio6.setDescription('Maximum reservable bandwidth for the TE link with priority 6.')
prvtTeParamMaxReservableBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 13), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamMaxReservableBandwidthPrio7.setDescription('Maximum reservable bandwidth for the TE link with priority 7.')
prvtTeParamReservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 14), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio0.setDescription('Reserved bandwidth for the TE link with priority 0.')
prvtTeParamReservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 15), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio1.setDescription('Reserved bandwidth for the TE link with priority 1.')
prvtTeParamReservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 16), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio2.setDescription('Reserved bandwidth for the TE link with priority 2.')
prvtTeParamReservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 17), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio3.setDescription('Reserved bandwidth for the TE link with priority 3.')
prvtTeParamReservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 18), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio4.setDescription('Reserved bandwidth for the TE link with priority 4.')
prvtTeParamReservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 19), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio5.setDescription('Reserved bandwidth for the TE link with priority 5.')
prvtTeParamReservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 20), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio6.setDescription('Reserved bandwidth for the TE link with priority 6.')
prvtTeParamReservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 21), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamReservedBandwidthPrio7.setDescription('Reserved bandwidth for the TE link with priority 7.')
prvtTeParamUnreservedBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 22), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio0.setDescription('Unreserved bandwidth for the TE link with priority 0.')
prvtTeParamUnreservedBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 23), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio1.setDescription('Unreserved bandwidth for the TE link with priority 1.')
prvtTeParamUnreservedBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 24), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio2.setDescription('Unreserved bandwidth for the TE link with priority 2.')
prvtTeParamUnreservedBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 25), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio3.setDescription('Unreserved bandwidth for the TE link with priority 3.')
prvtTeParamUnreservedBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 26), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio4.setDescription('Unreserved bandwidth for the TE link with priority 4.')
prvtTeParamUnreservedBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 27), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio5.setDescription('Unreserved bandwidth for the TE link with priority 5.')
prvtTeParamUnreservedBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 28), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio6.setDescription('Unreserved bandwidth for the TE link with priority 6.')
prvtTeParamUnreservedBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 29), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamUnreservedBandwidthPrio7.setDescription('Unreserved bandwidth for the TE link with priority 7.')
prvtTeParamResourceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 4, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamResourceClass.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamResourceClass.setDescription("This attribute specifies the TE link resource class.\n           The resource class is a 32 bit bitfield.  The resource class\n           for a link bundle is derived from the resource class of its\n           TE links.  All TE links within a link bundle must have the\n           same resource class.  Encoding of the resource class is\n           described in the 'Traffic Engineering (TE) Extensions to\n           OSPF Version 2' document.")
prvtTeParamAdminGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTeParamAdminGroupId.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamAdminGroupId.setDescription('The prvtTeParamAdminGroupId object uniquely identifes an administrative group. Supported are \n\t\t 32 administrative groups.')
prvtTeParamAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTeParamAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: prvtTeParamAdminGroupName.setDescription('The prvtTeParamAdminGroupId object specifies the administrative group name.')
prvtCspfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6), )
if mibBuilder.loadTexts: prvtCspfStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatisticsTable.setDescription('Table containing  the statistics relating to the running CSPF.')
prvtCspfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1), ).setIndexNames((0, "PRVT-TE-PARAM-MIB", "prvtCspfEntIndex"))
if mibBuilder.loadTexts: prvtCspfStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatisticsEntry.setDescription('Each entry contains the statistics relating to the running CSPF.')
prvtCspfEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtCspfEntIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCspfEntIndex.setDescription('Identifies a CSPF entity.')
prvtCspfStatNumRtQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumRtQueries.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumRtQueries.setDescription('The number of ATG_QCTE_QUERY_CSPF_ROUTE queries sent in to this\n      CSPF process.')
prvtCspfStatNumRtsClcd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumRtsClcd.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumRtsClcd.setDescription('The number of routes successfully calculated by this CSPF process.\n      This statistic is incremented for each positive response to an\n      ATG_QCTE_QUERY_CSPF_ROUTE query.')
prvtCspfStatNumRtsInCache = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumRtsInCache.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumRtsInCache.setDescription('The number of SPF trees currently stored in the cache.  Each tree\n      corresponds to a different set of constraints.')
prvtCspfStatNumUpdatesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumUpdatesRcvd.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumUpdatesRcvd.setDescription('The number of database updates signals that have been received by\n      this CSPF process, to indicate a new, updated or deleted database\n      entry.')
prvtCspfStatNumEntriesDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumEntriesDeleted.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumEntriesDeleted.setDescription('The number of Database updates signals that have been received by this\n      CSPF process to indicate a database entry to delete.')
prvtCspfStatNumLinkEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumLinkEntries.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumLinkEntries.setDescription('The number of entries stored in the CSPF database for Traffic\n      Engineering links.')
prvtCspfStatNumNetworkEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumNetworkEntries.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumNetworkEntries.setDescription('The number of entries stored in the CSPF database for networks.')
prvtCspfStatNumReturnedCaches = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumReturnedCaches.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumReturnedCaches.setDescription('The number of queries that have been satisfied through returning a route\n      stored in the cache.')
prvtCspfStatNumBkupQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumBkupQueries.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumBkupQueries.setDescription('The number of queries that have requested a backup path.')
prvtCspfStatNumBkupPathsFound = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumBkupPathsFound.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumBkupPathsFound.setDescription('The number of queries that have been returned with a backup path\n      successfully calculated.')
prvtCspfStatNumRouteUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumRouteUpdates.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumRouteUpdates.setDescription('The number of incremental route updates which have been made to routes\n      held in the cache.')
prvtCspfStatNumDiscardedRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 5, 9, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCspfStatNumDiscardedRoutes.setStatus('current')
if mibBuilder.loadTexts: prvtCspfStatNumDiscardedRoutes.setDescription('The number of routes which have been discarded from the cache due to\n      new TE information being received.')
mibBuilder.exportSymbols("PRVT-TE-PARAM-MIB", prvtCspfStatNumNetworkEntries=prvtCspfStatNumNetworkEntries, prvtCspfStatNumUpdatesRcvd=prvtCspfStatNumUpdatesRcvd, prvtCspfStatNumDiscardedRoutes=prvtCspfStatNumDiscardedRoutes, prvtCspfStatNumRouteUpdates=prvtCspfStatNumRouteUpdates, prvtTeParamAdminGroupTable=prvtTeParamAdminGroupTable, prvtCspfStatNumLinkEntries=prvtCspfStatNumLinkEntries, prvtTeParamAdminGroupName=prvtTeParamAdminGroupName, prvtTeParamReservedBandwidthPrio4=prvtTeParamReservedBandwidthPrio4, prvtTeParamTable=prvtTeParamTable, ospfTrafficEngSupport=ospfTrafficEngSupport, prvtTeParamReservedBandwidthPrio2=prvtTeParamReservedBandwidthPrio2, prvtTeParamMibNotifications=prvtTeParamMibNotifications, prvtTeParamUnreservedBandwidthPrio6=prvtTeParamUnreservedBandwidthPrio6, prvtTeParamUnreservedBandwidthPrio7=prvtTeParamUnreservedBandwidthPrio7, prvtCspfStatisticsEntry=prvtCspfStatisticsEntry, prvtCspfStatNumBkupQueries=prvtCspfStatNumBkupQueries, prvtTeParamReservedBandwidthPrio5=prvtTeParamReservedBandwidthPrio5, prvtTeParamUnreservedBandwidthPrio4=prvtTeParamUnreservedBandwidthPrio4, prvtTeParamUnreservedBandwidthPrio5=prvtTeParamUnreservedBandwidthPrio5, prvtTeParamMibObjects=prvtTeParamMibObjects, prvtCspfEntIndex=prvtCspfEntIndex, prvtTeParamMaxReservableBandwidthPrio1=prvtTeParamMaxReservableBandwidthPrio1, PYSNMP_MODULE_ID=prvtTeParamMib, prvtTeParamMaxReservableBandwidthPrio2=prvtTeParamMaxReservableBandwidthPrio2, prvtTeParamReservedBandwidthPrio0=prvtTeParamReservedBandwidthPrio0, prvtTeParamReservedBandwidthPrio3=prvtTeParamReservedBandwidthPrio3, prvtTeParamResourceClass=prvtTeParamResourceClass, prvtCspfStatNumRtsInCache=prvtCspfStatNumRtsInCache, prvtTeParamReservedBandwidthPrio6=prvtTeParamReservedBandwidthPrio6, prvtTeParamMaxReservableBandwidthPrio5=prvtTeParamMaxReservableBandwidthPrio5, prvtTeParamAdminGroupEntry=prvtTeParamAdminGroupEntry, prvtTeParamMaxReservableBandwidthPrio4=prvtTeParamMaxReservableBandwidthPrio4, prvtCspfStatNumEntriesDeleted=prvtCspfStatNumEntriesDeleted, prvtTeParamMaximumReservableBandwidth=prvtTeParamMaximumReservableBandwidth, TeLinkBandwidth=TeLinkBandwidth, prvtTeParamLinkType=prvtTeParamLinkType, prvtTeParamUnreservedBandwidthPrio1=prvtTeParamUnreservedBandwidthPrio1, prvtTeParamUnreservedBandwidthPrio2=prvtTeParamUnreservedBandwidthPrio2, prvtTeParamMibConformance=prvtTeParamMibConformance, prvtCspfStatNumBkupPathsFound=prvtCspfStatNumBkupPathsFound, prvtTeParamMib=prvtTeParamMib, prvtTeParamMaxReservableBandwidthPrio0=prvtTeParamMaxReservableBandwidthPrio0, prvtTeParamReservedBandwidthPrio7=prvtTeParamReservedBandwidthPrio7, ospfOpaqueEngSupport=ospfOpaqueEngSupport, ospfTeRouterId=ospfTeRouterId, prvtTeParamPhysicalBandwidth=prvtTeParamPhysicalBandwidth, prvtTeParamMaxReservableBandwidthPrio7=prvtTeParamMaxReservableBandwidthPrio7, prvtCspfStatNumReturnedCaches=prvtCspfStatNumReturnedCaches, prvtTeParamReservedBandwidthPrio1=prvtTeParamReservedBandwidthPrio1, prvtCspfStatisticsTable=prvtCspfStatisticsTable, prvtTeParamUnreservedBandwidthPrio3=prvtTeParamUnreservedBandwidthPrio3, prvtCspfStatNumRtsClcd=prvtCspfStatNumRtsClcd, prvtTeParamEntry=prvtTeParamEntry, prvtTeParamLinkAddressType=prvtTeParamLinkAddressType, prvtTeParamMaxReservableBandwidthPrio3=prvtTeParamMaxReservableBandwidthPrio3, prvtTeParamAdminGroupId=prvtTeParamAdminGroupId, prvtTeParamMetric=prvtTeParamMetric, prvtTeParamUnreservedBandwidthPrio0=prvtTeParamUnreservedBandwidthPrio0, prvtTeParamMaxReservableBandwidthPrio6=prvtTeParamMaxReservableBandwidthPrio6, prvtCspfStatNumRtQueries=prvtCspfStatNumRtQueries)
