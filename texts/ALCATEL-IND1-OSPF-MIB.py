#
# PySNMP MIB module ALCATEL-IND1-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-OSPF-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 15:33:31 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Ospf, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Ospf")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ospfAreaEntry, ospfVirtIfEntry, ospfVirtNbrEntry, ospfAreaId, ospfNbrEntry, ospfAreaAggregateEntry, ospfIfEntry, ospfExtLsdbEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfAreaEntry", "ospfVirtIfEntry", "ospfVirtNbrEntry", "ospfAreaId", "ospfNbrEntry", "ospfAreaAggregateEntry", "ospfIfEntry", "ospfExtLsdbEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibIdentifier, Unsigned32, iso, Counter32, Bits, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ModuleIdentity, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Unsigned32", "iso", "Counter32", "Bits", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
alcatelIND1OSPFMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1))
alcatelIND1OSPFMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setLastUpdated('201102150000Z')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1OSPFMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 Configuration Of Global OSPF Configuration Parameters.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1OSPFMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBObjects.setDescription('Branch For Open Shortest Path First (OSPF)\n            Subsystem Managed Objects.')
alcatelIND1OSPFMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBConformance.setDescription('Branch For Open Shortest Path First (OSPF)\n            Subsystem Conformance Information.')
alcatelIND1OSPFMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBGroups.setDescription('Branch For Open Shortest Path First (OSPF)\n            Subsystem Units Of Conformance.')
alcatelIND1OSPFMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliances.setDescription('Branch For Open Shortest Path First (OSPF)\n            Subsystem Compliance Statements.')
class AlaAuthenticationEncryptKey(TextualConvention, OctetString):
    description = 'The authentication encryption key that is used to decypher\n                        RIP simple passwords.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

alaProtocolOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1))
alaOspfRedistRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRedistRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfRedistRouteTag.setDescription('A 32-bit value tagged to each OSPF internal route that\n            is redistributed in to other routing protocol domains. The\n            lower 16-bits typically indicate the autonomous system number.')
alaOspfTimerSpfDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfTimerSpfDelay.setStatus('current')
if mibBuilder.loadTexts: alaOspfTimerSpfDelay.setDescription('Number of seconds to delay the SPF calculation after\n             receiving a topology change. This value should not be\n             greater than SPF hold time.')
alaOspfTimerSpfHold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfTimerSpfHold.setStatus('current')
if mibBuilder.loadTexts: alaOspfTimerSpfHold.setDescription('Minimum time, in seconds, between two consecutive SPF\n            calculations. This value should not be less than SPF delay time.')
alaOspfRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteNumber.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteNumber.setDescription('The number of network routes in OSPF routing table.')
alaOspfMTUCheck = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfMTUCheck.setStatus('current')
if mibBuilder.loadTexts: alaOspfMTUCheck.setDescription('Enable or disable the check for MTU size in database description\n            packets. Disabled by default')
alaOspfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12), )
if mibBuilder.loadTexts: alaOspfRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTable.setDescription('OSPF routing table which contains the network routes.')
alaOspfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteDest"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMask"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTos"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNextHop"))
if mibBuilder.loadTexts: alaOspfRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteEntry.setDescription('OSPF routing table which contains the network routes.')
alaOspfRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteDest.setDescription('The destination IP address of this route.')
alaOspfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMask.setDescription('The network mask for this route.')
alaOspfRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteTos.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTos.setDescription('Type Of Service (TOS) for this route.')
alaOspfRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteNextHop.setDescription('The address of the next hop to reach this route.')
alaOspfRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteIfIndex.setDescription('The ifIndex value which identifies  the  local\n           interface  through  which  the next hop of this\n           route should be reached.')
alaOspfRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intraArea", 1), ("interArea", 2), ("externalType1", 3), ("externalType2", 4), ("nssaExternalType1", 5), ("nssaExternalType2", 6))).clone('intraArea')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteType.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteType.setDescription('The type of route.')
alaOspfRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteAge.setDescription('The number of seconds  since  this  route  was last\n           updated  or  otherwise  determined  to be correct.')
alaOspfRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteTag.setDescription("The associated route tag for external roues. It's\n        0 for routes internal to the autonomous system.")
alaOspfRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMetric1.setDescription('The primary routing  metric  for  this  route.')
alaOspfRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteMetric2.setDescription("An alternate routing metric  for  this  route. It's 0\n            for internal routes. For an external route, it's the metric\n            to reach the ASBR that announced the external route.")
alaOspfRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 12, 1, 11), RowStatus().clone('notInService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteStatus.setDescription('The row status variable, used according to\n           row installation and removal conventions.')
alaOspfBdrRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13), )
if mibBuilder.loadTexts: alaOspfBdrRouterTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterTable.setDescription('OSPF routing table which contains the routes to border\n            (ABR and ASBR) routers.')
alaOspfBdrRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAreaId"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterId"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterTos"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterNextHop"))
if mibBuilder.loadTexts: alaOspfBdrRouterEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterEntry.setDescription('OSPF routing table which contains the routes to border\n            (ABR and ASBR) routers.')
alaOspfBdrRouterAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterAreaId.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterAreaId.setDescription('The area to which the border router belongs to.')
alaOspfBdrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterId.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterId.setDescription('The router idenitifer of this border router.')
alaOspfBdrRouterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterTos.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterTos.setDescription('Type Of Service (TOS) for this route.')
alaOspfBdrRouterNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterNextHop.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterNextHop.setDescription('The address of the next hop to reach this border router.')
alaOspfBdrRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterIfIndex.setDescription('The ifIndex value which identifies  the  local\n           interface  through  which  the next hop of this\n           route should be reached.')
alaOspfBdrRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abr", 1), ("asbr", 2), ("abrAsbr", 3))).clone('abr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterType.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterType.setDescription('The type of border router.')
alaOspfBdrRouterAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterAge.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterAge.setDescription('The number of seconds  since  this  route  was last\n           updated  or  otherwise  determined  to be correct.')
alaOspfBdrRouterMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterMetric.setDescription('The cost to reach the border router.')
alaOspfBdrRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 13, 1, 9), RowStatus().clone('notInService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfBdrRouterStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterStatus.setDescription('The row status variable, used according to\n           row installation and removal conventions.')
alaOspfIfMd5Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16), )
if mibBuilder.loadTexts: alaOspfIfMd5Table.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Table.setDescription('The OSPF Interface MD5 Table describes the MD5 key\n            management for OSPF interfaces.')
alaOspfIfMd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5IpAddress"), (0, "ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyId"))
if mibBuilder.loadTexts: alaOspfIfMd5Entry.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Entry.setDescription('The OSPF Interface MD5 Entry describes the MD5 key\n            management for OSPF interfaces.')
alaOspfIfMd5IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMd5IpAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5IpAddress.setDescription('The IP address of this OSPF MD5 key interface.')
alaOspfIfMd5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMd5KeyId.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyId.setDescription('A key identifier which identifies the algorithm and\n            MD5 secret key associated with this interface.')
alaOspfIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5Key.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Key.setDescription('The MD5 message digest key.')
alaOspfIfMd5KeyStartAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 4), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartAccept.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartAccept.setDescription('The time that OSPF router will start accepting packets\n            that have been created with this key.')
alaOspfIfMd5KeyStopAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 5), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopAccept.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopAccept.setDescription('The time that OSPF router will stop accepting packets\n            that have been created with this key.')
alaOspfIfMd5KeyStartGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 6), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartGenerate.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStartGenerate.setDescription('The time that OSPF router will start using this key for\n            packet generation.')
alaOspfIfMd5KeyStopGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 7), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopGenerate.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5KeyStopGenerate.setDescription('The time that OSPF router will stop using this key for\n            packet generation.')
alaOspfIfMd5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 8), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5RowStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5RowStatus.setDescription('Row status of this entry.')
alaOspfIfMd5EncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 9), AlaAuthenticationEncryptKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5EncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5EncryptKey.setDescription('The MD5 message digest Encrypted key.')
alaOspfIfMd5AuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keyedMd5", 1), ("hmacSha256", 2))).clone('keyedMd5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfMd5AuthMode.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5AuthMode.setDescription('The Cryptographic authentication algorithm to be used to generate and verify\n            the message digest. The currently supported algorithms are Keyed-MD5 (RFC 2328, Appendix D) \n            and HMAC-SHA-256 (RFC 5709).')
alaOspfIfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17), )
if mibBuilder.loadTexts: alaOspfIfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugTable.setDescription('Expansion for ospfIfTable')
alaOspfIfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1), )
ospfIfEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfIfAugEntry"))
alaOspfIfAugEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfIfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugEntry.setDescription('An entry of alaOspfIfAugTable')
alaOspfIfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfEncryptKey.setDescription('The authentication encryption key that is used to decypher\n                        OSPF passwords.')
alaOspfIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfIpMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfIpMask.setDescription('The IP mask of this OSPF interface.')
alaOspfIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4097))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfVlanId.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfVlanId.setDescription('Vlan Identifier associated with this interface')
alaOspfIfDrRouterid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfDrRouterid.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfDrRouterid.setDescription('Router Id of Designated router for this interface')
alaOspfIfBdrRouterid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfBdrRouterid.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBdrRouterid.setDescription('Router Id of Backup Designated router for this interface')
alaOspfIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfMTU.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMTU.setDescription('Max Transfer size of OSPF packets on this interface')
alaOspfIfInitNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfInitNbrs.setDescription('Number of ospf INIT state neighbors on this interface')
alaOspfIfExchNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfExchNbrs.setDescription('Number of ospf EXCHANGE state neighbors on this interface')
alaOspfIfFullNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfFullNbrs.setDescription('Number of ospf FULL state neighbors on this interface')
alaOspfIfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("broadcast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfLinkType.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfLinkType.setDescription('Type of physical medium used for transmission of OSPF packets')
alaOspfIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfOperStatus.setDescription('Operational status of this interface')
alaOspfIfIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIfIntfName.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfIntfName.setDescription('The user defined name used to identify the IP interface')
alaOspfIf2WayNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfIf2WayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfIf2WayNbrs.setDescription('Number of ospf 2-WAY state neighbors on this interface')
alaOspfIfBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBfdStatus.setDescription('Enables/Disables OSPF for a BFD interface')
alaOspfIfBfdDrsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfIfBfdDrsOnly.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfBfdDrsOnly.setDescription('Enables/Disables Drs Only option for a BFD interface')
alaOspfVirtIfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18), )
if mibBuilder.loadTexts: alaOspfVirtIfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfAugTable.setDescription('Expansion for ospfVirtIfTable')
alaOspfVirtIfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1), )
ospfVirtIfEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfAugEntry"))
alaOspfVirtIfAugEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfVirtIfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfAugEntry.setDescription('An entry of alaOspfVirtIfAugTable')
alaOspfVirtIfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaOspfVirtIfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfEncryptKey.setDescription('The authentication encryption key that is used to decypher\n                OSPF passwords.')
alaOspfVirtIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfOperStatus.setDescription('Operational status of the virtual link')
alaOspfRestartHelperSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartHelperSupport.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartHelperSupport.setDescription("The router's support for acting as an OSPF hitless restart helper.")
alaOspfRestartHelperStrictLSAChecking = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartHelperStrictLSAChecking.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartHelperStrictLSAChecking.setDescription('Indicates whether or not a changed LSA will result in termination\n            of graceful restart by a helping router.\n            Deprecated with IETF object ospfRestartStrictLsaChecking')
alaOspfRestartHelperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("helping", 1), ("notHelping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartHelperStatus.setDescription('Indicates whether this OSPF router is operating as a Helper to a\n            restarting router.')
alaOspfRFC1583Compatibility = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setReference('OSPF Version 2, Section 16.4.1 External path preferences')
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRFC1583Compatibility.setDescription('Indicates metrics used to choose among multiple AS-\n           external-LSAs. When RFC1583Compatibility is set to\n           enabled, only cost will be used when choosing among\n           multiple AS-external-LSAs advertising the same\n           destination. When RFC1583Compatibility is set to\n           disabled, preference will be driven first by type of\n           path using cost only to break ties.\n           Deprecated by IETF standard object ospfRFC1583Compatibility')
alaOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types.")
alaOspfTrafficEngineeringSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTrafficEngineeringSupport.setStatus('current')
if mibBuilder.loadTexts: alaOspfTrafficEngineeringSupport.setDescription("The router's support for OSPF traffic engineering.")
alaOspfReferenceBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfReferenceBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfReferenceBandwidth.setDescription('Reference bandwidth in kilobits/second for\n           calculating default interface metrics. The\n           default value is 100,000 KBPS (100 MBPS)\n           deprecated by IETF mib object ospfReferenceBandwidth')
alaOspfRestartSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartSupport.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartSupport.setDescription("The router's support for OSPF hitless restart.\n           Options include: no restart support, only planned\n           restarts or both planned and unplanned restarts.\n           Deprecated by IETF object ospfRestartSupport")
alaOspfRestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartInterval.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartInterval.setDescription('Configured OSPF hitless restart timeout interval.\n            Deprecated by IETF mib ospfRestartInterval')
alaOspfRestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartStatus.setDescription('Current status of OSPF hitless restart. The status of hitless restart is\n           unplannedRestart after a CMM takeover.  Before CMM takeover, the status is\n           plannedRestart.')
alaOspfRestartAge = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartAge.setDescription('Remaining time in current OSPF hitless restart\n           interval.\n           Deprecated by alaOspfRestartAge')
alaOspfRestartExitReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfRestartExitReason.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfRestartExitReason.setDescription("Describes the outcome of the last attempt at a\n           hitless restart. If the value is 'none', no restart\n           has yet been attempted. If the value is 'inProgress',\n           a restart attempt is currently underway.\n           Deprecated by IETF object ospfRestartExitReason")
alaOspfNbrAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31), )
if mibBuilder.loadTexts: alaOspfNbrAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugTable.setDescription('Extensions to the ospfNbrTable')
alaOspfNbrAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1), )
ospfNbrEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAugEntry"))
alaOspfNbrAugEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfNbrAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugEntry.setDescription('Additions to neighbor table')
alaOspfNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperStatus.setDescription('Indicates whether the router is acting\n           as a hitless restart helper for the neighbor.')
alaOspfNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperAge.setDescription('Remaining time in current OSPF hitless restart\n           interval, if the router is acting as a restart\n           helper for the neighbor.')
alaOspfNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrRestartHelperExitReason.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting\n            as a hitless restart helper for the neighbor.')
alaOspfNbrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrAreaId.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAreaId.setDescription('The area to which this neighbor belongs')
alaOspfNbrDrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrDrAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrDrAddress.setDescription('Designated router of this neighbor')
alaOspfNbrBdrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrBdrAddress.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrBdrAddress.setDescription('Backup Designated router of this neighbor')
alaOspfNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrType.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrType.setDescription('Neighbors learned via the OSPF Hello protocol are dynamic.\n                    Configured neighbors are static')
alaOspfNbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("slaveHold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrMode.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrMode.setDescription('Current neighbor mode. This is applicable only during adjacency formation')
alaOspfNbrMd5SeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrMd5SeqNo.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrMd5SeqNo.setDescription('Sequence number used in Md5 authentication')
alaOspfNbrLastHello = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrLastHello.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrLastHello.setDescription('No of seconds elapsed since the last hello was received from this neighbor')
alaOspfNbrPendingLSreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSreq.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSreq.setDescription('Number of outstanding link state requests to be sent to this neighbor')
alaOspfNbrPendingLSack = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSack.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSack.setDescription('Number of outstanding link state acknowledgements to be sent to this neighbor')
alaOspfNbrPendingLSupd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfNbrPendingLSupd.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrPendingLSupd.setDescription('Number of outstanding link state update packets to be sent to this neighbor')
alaOspfVirtNbrAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32), )
if mibBuilder.loadTexts: alaOspfVirtNbrAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugTable.setDescription('Extensions to ospfVirtNbrTable')
alaOspfVirtNbrAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1), )
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setReference('OSPF Version 2 Management Information Base,  Work In Progress\n             draft-ietf-ospf-mib-update-07.txt Section B.4')
ospfVirtNbrEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrAugEntry"))
alaOspfVirtNbrAugEntry.setIndexNames(*ospfVirtNbrEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugEntry.setDescription('Information regarding a single virtual neighbor.')
alaOspfVirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperStatus.setDescription('Indicates whether the router is acting\n           as a hitless restart helper for the neighbor.')
alaOspfVirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperAge.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperAge.setDescription('Remaining time in current OSPF hitless restart\n           interval, if the router is acting as a restart\n           helper for the neighbor.')
alaOspfVirtNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperExitReason.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfVirtNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting\n            as a hitless restart helper for the neighbor.')
alaOspfVirtNbrDrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrDrAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrDrAddr.setDescription('Designated router of this virtual neighbor')
alaOspfVirtNbrBdrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrBdrAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrBdrAddr.setDescription('Backup Designated router of this virtual neighbor')
alaOspfVirtNbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("slaveHold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrMode.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrMode.setDescription('Current neighbor mode. This is applicable only during adjacency formation')
alaOspfVirtNbrMd5SeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrMd5SeqNo.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrMd5SeqNo.setDescription('Sequence number used in Md5 authentication')
alaOspfVirtNbrLastHello = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrLastHello.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrLastHello.setDescription('No of seconds elapsed since the last hello was received from this neighbor')
alaOspfVirtNbrPendingLSreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSreq.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSreq.setDescription('Number of outstanding link state requests to be sent to this neighbor')
alaOspfVirtNbrPendingLSack = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSack.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSack.setDescription('Number of outstanding link state acknowledgements to be sent to this neighbor')
alaOspfVirtNbrPendingLSupd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 32, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSupd.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrPendingLSupd.setDescription('Number of outstanding link state update packets to be sent to this neighbor')
alaOspfRestartInitiate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfRestartInitiate.setStatus('current')
if mibBuilder.loadTexts: alaOspfRestartInitiate.setDescription('Initiates a planned graceful restart, if set to plannedRestart.')
alaOspfGeneralTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3))
alaOspfTotalSpfRuns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalSpfRuns.setDescription('Total number of SPF runs performed on this router')
alaOspfTotalIncrSpfRuns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalIncrSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalIncrSpfRuns.setDescription('Total number of Incremental SPF runs performed on this router')
alaOspfTotalInitNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalInitNbrs.setDescription('Number of INIT state neighbors on this router')
alaOspfTotalExchNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalExchNbrs.setDescription('Number of EXCHANGE state neighbors on this router')
alaOspfTotalFullNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalFullNbrs.setDescription('Number of FULL state neighbors on this router')
alaOspfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalAreas.setDescription('Total Number of areas configured on this router')
alaOspfTotalActiveAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalActiveAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalActiveAreas.setDescription('Total Number of active areas configured on this router')
alaOspfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalTransitAreas.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalTransitAreas.setDescription('Number of transit areas on this router')
alaOspfTotalNSSA = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotalNSSA.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotalNSSA.setDescription('Total Number of NSSA areas on this router')
alaOspfTotal2wayNbrs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfTotal2wayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfTotal2wayNbrs.setDescription('Number of 2-way state neighbors on this router')
alaOspfAreaAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35), )
if mibBuilder.loadTexts: alaOspfAreaAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugTable.setDescription('Extensions to ospfAreaTable')
alaOspfAreaAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1), )
ospfAreaEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAugEntry"))
alaOspfAreaAugEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfAreaAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugEntry.setDescription('Area table additions')
alaOspfAreaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaOperStatus.setDescription('Operational status of the area')
alaOspfAreaLastSpfRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaLastSpfRun.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaLastSpfRun.setDescription('Time in secs since last SPF ran for this area')
alaOspfAreaActiveVlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaActiveVlinks.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaActiveVlinks.setDescription('Number of active virtual links in this area')
alaOspfAreaIncrSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaIncrSpfRuns.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaIncrSpfRuns.setDescription('The number of times that incremental SPF has been run for this area to\n                    calculate inter-area routes')
alaOspfAreaInitNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaInitNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaInitNbrs.setDescription('Number of ospf INIT state neighbors in this area')
alaOspfAreaExchNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaExchNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaExchNbrs.setDescription('Number of ospf EXCHANGE state neighbors in this area')
alaOspfAreaFullNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaFullNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaFullNbrs.setDescription('Number of ospf FULL state neighbors in this area')
alaOspfAreaNumIntfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNumIntfs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNumIntfs.setDescription('Number of interfaces in this area')
alaOspfAreaAttachedIntfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaAttachedIntfs.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAttachedIntfs.setDescription('List of interfaces attached to this area')
alaOspfArea2WayNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfArea2WayNbrs.setStatus('current')
if mibBuilder.loadTexts: alaOspfArea2WayNbrs.setDescription('Number of ospf 2-WAY state neighbors in this area')
alaOspfAreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2), ("none", 3))).clone('candidate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorRole.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorRole.setDescription('Specifies whether or not an NSSA border router will unconditionally translate\n            Type-7 LSAs into Type-5 LSAs. When set to always, an NSSA border router always\n            translates Type-7 LSAs into Type-5 LSAs regardless of the translator state of\n            other NSSA border routers. When set to candidate, an NSSA border router participates\n            in the translator election process. For non-NSSA border routers, this value is none.')
alaOspfAreaNssaTranslatorStabilityInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorStabilityInterval.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorStabilityInterval.setDescription('Defines the length of time (in seconds) an elected Type-7 translator will continue\n            to perform its translator duties once it has determined that its translator status\n            has been deposed by another NSSA border router translator. For non-NSSA border routers,\n            this value is not defined and will be 0.')
alaOspfAreaNssaImportSetPbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("propagate", 1), ("doNotPropagate", 2), ("none", 3))).clone('propagate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaImportSetPbit.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaImportSetPbit.setDescription('Specifies whether or not an NSSA AS boundary router sets the P-bit when external\n            routes are imported into the NSSA as Type-7 LSAs. For non-NSSA boundary routers,\n            this value is not defined and will be none.')
alaOspfAreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorState.setStatus('deprecated')
if mibBuilder.loadTexts: alaOspfAreaNssaTranslatorState.setDescription('The state of the NSSA Translator, for NSSA border routers. For non-NSSA border\n            routers, the state is none.')
alaOspfAreaNssaElectedTranslatorRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 35, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfAreaNssaElectedTranslatorRouterId.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaNssaElectedTranslatorRouterId.setDescription('The elected/current NSSA translator router id elected by this NSSA border router.\n            For non-NSSA border router, this object is not defined.')
alaOspfExtLsdbAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36), )
if mibBuilder.loadTexts: alaOspfExtLsdbAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugTable.setDescription('Extensions to ospfExtLsdbTable')
alaOspfExtLsdbAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1), )
ospfExtLsdbEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbAugEntry"))
alaOspfExtLsdbAugEntry.setIndexNames(*ospfExtLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfExtLsdbAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugEntry.setDescription('External Link state database additions')
alaOspfExtLsdbProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("static", 2), ("direct", 3), ("rip", 4), ("ospf", 5), ("isis", 6), ("bgp", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbProto.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbProto.setDescription('Protocol through which this external LSA was learnt')
alaOspfExtLsdbRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbRouteTag.setDescription('A 32-bit value attached to each external route.')
alaOspfExtLsdbFwdAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbFwdAddr.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbFwdAddr.setDescription("The address to which data traffic for the advertised destination is to be forwarded.\n            If the Forwarding address is set to 0.0.0.0, data traffic is to be forwarded to the\n            LSA's originator.")
alaOspfExtLsdbMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMetricType.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMetricType.setDescription('The type of external metric.')
alaOspfExtLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMetric.setDescription('The OSPF External TOS 0 Metric.')
alaOspfExtLsdbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbLength.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbLength.setDescription('The length of the AS External Link-State Advertisement.')
alaOspfExtLsdbMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 36, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaOspfExtLsdbMask.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbMask.setDescription('The IP address mask for the advertised destination.')
alaOspfAreaAggregateAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38), )
if mibBuilder.loadTexts: alaOspfAreaAggregateAugTable.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugTable.setDescription('Extensions to ospfAreaAggregateTable')
alaOspfAreaAggregateAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38, 1), )
ospfAreaAggregateEntry.registerAugmentions(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateAugEntry"))
alaOspfAreaAggregateAugEntry.setIndexNames(*ospfAreaAggregateEntry.getIndexNames())
if mibBuilder.loadTexts: alaOspfAreaAggregateAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugEntry.setDescription('Additions to the area aggregate table')
alaOspfAreaAggregateMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfAreaAggregateMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateMetric.setDescription('If set, this value is used as the metric for the area aggregate route,\n                    overriding the calculated metric')
alaOspfDefaultOriginate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("only", 2), ("always", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginate.setDescription("Indicates whether this ASBR router originates the default route\n            into the OSPF normal area(s).  If set to 'only', the default route\n            is advertised into the OSPF normal area, provided the ASBR has\n            a route to 0.0.0.0/0 in its routing table. Alternatively, if set\n            to 'always', a default route is advertised into the OSPF domain\n            regardless of whether the ASBR has a route to 0.0.0.0/0. A value of\n            'none' has the effect of not originating the default route.")
alaOspfDefaultOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetricType.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetricType.setDescription('Type of metric to be used with the default route.')
alaOspfDefaultOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetric.setStatus('current')
if mibBuilder.loadTexts: alaOspfDefaultOriginateMetric.setDescription('Default metric to be used for the default route.')
alaOspfBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBfdStatus.setDescription('Enables or disables bfd  for OSPF protocol')
alaOspfBfdAllInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfBfdAllInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaOspfBfdAllInterfaceStatus.setDescription('Enables or disables bfd for all OSPF interfaces')
alaOspfOpaqueTransitCapability = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaOspfOpaqueTransitCapability.setStatus('current')
if mibBuilder.loadTexts: alaOspfOpaqueTransitCapability.setDescription('Enables or disables opaque LSA accept and retransmit capability for OSPF')
alcatelIND1OSPFMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfMiscellaneousGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5Group"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfGeneralGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAugEntryGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateAugEntryGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbAugGroup"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAugGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1OSPFMIBCompliance = alcatelIND1OSPFMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1OSPFMIBCompliance.setDescription('Compliance statement for\n             Open Shortest Path First (OSPF) Subsystem.')
alaOspfMiscellaneousGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRedistRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTimerSpfDelay"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTimerSpfHold"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNumber"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfMTUCheck"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBfdStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBfdAllInterfaceStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperStrictLSAChecking"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartHelperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRFC1583Compatibility"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfOpaqueLsaSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTrafficEngineeringSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfReferenceBandwidth"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartSupport"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartInterval"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginateMetricType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfDefaultOriginateMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRestartInitiate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfOpaqueTransitCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfMiscellaneousGroup = alaOspfMiscellaneousGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfMiscellaneousGroup.setDescription('Collection of Miscellaneous objects for management of OSPF.')
alaOspfRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteDest"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTos"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteNextHop"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteIfIndex"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMetric1"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteMetric2"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfRouteGroup = alaOspfRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfRouteGroup.setDescription('Collection of objects for management of Network Route configuration.')
alaOspfBdrRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAreaId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterTos"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterNextHop"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterIfIndex"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfBdrRouterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfBdrRouterGroup = alaOspfBdrRouterGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfBdrRouterGroup.setDescription('Collection of objects for management of routes to Border Routers.')
alaOspfIfMd5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5IpAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5Key"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStartAccept"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStopAccept"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStartGenerate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5KeyStopGenerate"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5RowStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5EncryptKey"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMd5AuthMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfIfMd5Group = alaOspfIfMd5Group.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfMd5Group.setDescription('Collection of objects for management of Interface MD5 configuration.')
alaOspfGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalIncrSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalActiveAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalTransitAreas"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotalNSSA"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfTotal2wayNbrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfGeneralGroup = alaOspfGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfGeneralGroup.setDescription('Collection of objects for management of Interface MD5 configuration.')
alaOspfAreaAugEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaOperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaLastSpfRun"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaActiveVlinks"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaIncrSpfRuns"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNumIntfs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAttachedIntfs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfArea2WayNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorRole"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorStabilityInterval"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaImportSetPbit"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaTranslatorState"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaNssaElectedTranslatorRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfAreaAugEntryGroup = alaOspfAreaAugEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAugEntryGroup.setDescription('Extensions to ospfAreaTable.')
alaOspfAreaAggregateAugEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfAreaAggregateMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfAreaAggregateAugEntryGroup = alaOspfAreaAggregateAugEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfAreaAggregateAugEntryGroup.setDescription('Extensions to ospfAreaAggregateTable.')
alaOspfIfAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfIfEncryptKey"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfIpMask"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfVlanId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfDrRouterid"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBdrRouterid"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfMTU"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfInitNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfExchNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfFullNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfLinkType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfOperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfIntfName"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIf2WayNbrs"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBfdStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfIfBfdDrsOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfIfAugGroup = alaOspfIfAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfIfAugGroup.setDescription('Collection of objects for management of Interface configuration.')
alaOspfExtLsdbAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbProto"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbRouteTag"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbFwdAddr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMetricType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMetric"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbLength"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfExtLsdbMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfExtLsdbAugGroup = alaOspfExtLsdbAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfExtLsdbAugGroup.setDescription('Objects of ospf ExtLsdb Aug Group.')
alaOspfNbrAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrRestartHelperExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrAreaId"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrDrAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrBdrAddress"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrType"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrMode"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrMd5SeqNo"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrLastHello"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSreq"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSack"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfNbrPendingLSupd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfNbrAugGroup = alaOspfNbrAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfNbrAugGroup.setDescription('Collection of objects for management of OspfNbr configuration.')
alaOspfVirtIfAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfEncryptKey"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtIfOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfVirtIfAugGroup = alaOspfVirtIfAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtIfAugGroup.setDescription('Collection of objects for management of Virtual Interface configuration.')
alaOspfVirtNbrAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 4, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperStatus"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperAge"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrRestartHelperExitReason"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrDrAddr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrBdrAddr"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrMode"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrMd5SeqNo"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrLastHello"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSreq"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSack"), ("ALCATEL-IND1-OSPF-MIB", "alaOspfVirtNbrPendingLSupd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaOspfVirtNbrAugGroup = alaOspfVirtNbrAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaOspfVirtNbrAugGroup.setDescription('Collection of objects for management of Virtual Neighbor configuration.')
mibBuilder.exportSymbols("ALCATEL-IND1-OSPF-MIB", alaOspfIfBdrRouterid=alaOspfIfBdrRouterid, alaOspfIfAugEntry=alaOspfIfAugEntry, alaOspfVirtIfAugEntry=alaOspfVirtIfAugEntry, alaOspfNbrBdrAddress=alaOspfNbrBdrAddress, alaOspfTotal2wayNbrs=alaOspfTotal2wayNbrs, alaOspfVirtNbrRestartHelperExitReason=alaOspfVirtNbrRestartHelperExitReason, alaOspfTotalInitNbrs=alaOspfTotalInitNbrs, alaOspfIfLinkType=alaOspfIfLinkType, alaOspfRouteNumber=alaOspfRouteNumber, alaOspfTotalFullNbrs=alaOspfTotalFullNbrs, alaOspfVirtNbrPendingLSupd=alaOspfVirtNbrPendingLSupd, alaOspfExtLsdbRouteTag=alaOspfExtLsdbRouteTag, alaOspfIfMd5KeyStartGenerate=alaOspfIfMd5KeyStartGenerate, alaOspfAreaNssaTranslatorState=alaOspfAreaNssaTranslatorState, alaOspfVirtNbrAugEntry=alaOspfVirtNbrAugEntry, alaOspfAreaExchNbrs=alaOspfAreaExchNbrs, alaOspfBdrRouterStatus=alaOspfBdrRouterStatus, alaOspfRestartSupport=alaOspfRestartSupport, alaOspfExtLsdbAugGroup=alaOspfExtLsdbAugGroup, alaOspfTotalExchNbrs=alaOspfTotalExchNbrs, alaOspfRestartHelperStrictLSAChecking=alaOspfRestartHelperStrictLSAChecking, alaOspfRestartAge=alaOspfRestartAge, alaOspfAreaAggregateAugEntry=alaOspfAreaAggregateAugEntry, alaOspfVirtNbrMode=alaOspfVirtNbrMode, alcatelIND1OSPFMIBCompliance=alcatelIND1OSPFMIBCompliance, alcatelIND1OSPFMIBCompliances=alcatelIND1OSPFMIBCompliances, alaOspfTotalSpfRuns=alaOspfTotalSpfRuns, alaOspfIfMd5KeyStopAccept=alaOspfIfMd5KeyStopAccept, alaOspfRouteType=alaOspfRouteType, alaOspfIfMd5KeyStartAccept=alaOspfIfMd5KeyStartAccept, alaOspfNbrDrAddress=alaOspfNbrDrAddress, alaOspfRouteEntry=alaOspfRouteEntry, alaOspfVirtNbrAugTable=alaOspfVirtNbrAugTable, alaOspfTotalNSSA=alaOspfTotalNSSA, alaOspfRFC1583Compatibility=alaOspfRFC1583Compatibility, alaOspfAreaInitNbrs=alaOspfAreaInitNbrs, alaOspfNbrLastHello=alaOspfNbrLastHello, alaOspfRouteAge=alaOspfRouteAge, alaOspfNbrMd5SeqNo=alaOspfNbrMd5SeqNo, alaOspfNbrType=alaOspfNbrType, alaOspfRouteTag=alaOspfRouteTag, alaOspfRedistRouteTag=alaOspfRedistRouteTag, alaOspfIfExchNbrs=alaOspfIfExchNbrs, alaOspfVirtNbrMd5SeqNo=alaOspfVirtNbrMd5SeqNo, alaOspfTotalIncrSpfRuns=alaOspfTotalIncrSpfRuns, alaOspfExtLsdbMask=alaOspfExtLsdbMask, AlaAuthenticationEncryptKey=AlaAuthenticationEncryptKey, alaOspfTotalTransitAreas=alaOspfTotalTransitAreas, alcatelIND1OSPFMIBConformance=alcatelIND1OSPFMIBConformance, alaOspfAreaLastSpfRun=alaOspfAreaLastSpfRun, alaOspfAreaIncrSpfRuns=alaOspfAreaIncrSpfRuns, alaOspfNbrMode=alaOspfNbrMode, alaOspfIfBfdDrsOnly=alaOspfIfBfdDrsOnly, alaOspfVirtNbrRestartHelperAge=alaOspfVirtNbrRestartHelperAge, alaOspfAreaAggregateAugEntryGroup=alaOspfAreaAggregateAugEntryGroup, alaOspfIfIntfName=alaOspfIfIntfName, alaOspfRouteGroup=alaOspfRouteGroup, alaOspfIfIpMask=alaOspfIfIpMask, alaOspfRestartInitiate=alaOspfRestartInitiate, alaOspfBfdStatus=alaOspfBfdStatus, alaOspfBfdAllInterfaceStatus=alaOspfBfdAllInterfaceStatus, alaOspfNbrPendingLSupd=alaOspfNbrPendingLSupd, alaOspfBdrRouterMetric=alaOspfBdrRouterMetric, alaOspfIfMd5Group=alaOspfIfMd5Group, alaOspfRestartHelperStatus=alaOspfRestartHelperStatus, alaOspfVirtNbrPendingLSreq=alaOspfVirtNbrPendingLSreq, alaOspfAreaAttachedIntfs=alaOspfAreaAttachedIntfs, alaOspfIfBfdStatus=alaOspfIfBfdStatus, alaOspfNbrAugEntry=alaOspfNbrAugEntry, alaOspfBdrRouterId=alaOspfBdrRouterId, alaOspfMTUCheck=alaOspfMTUCheck, alaOspfIfInitNbrs=alaOspfIfInitNbrs, alaOspfBdrRouterTable=alaOspfBdrRouterTable, alaOspfGeneralTable=alaOspfGeneralTable, alaOspfAreaOperStatus=alaOspfAreaOperStatus, alaOspfIfMd5Table=alaOspfIfMd5Table, alaOspfArea2WayNbrs=alaOspfArea2WayNbrs, alaOspfVirtNbrLastHello=alaOspfVirtNbrLastHello, alaOspfVirtNbrAugGroup=alaOspfVirtNbrAugGroup, alaOspfVirtNbrRestartHelperStatus=alaOspfVirtNbrRestartHelperStatus, alaProtocolOspf=alaProtocolOspf, alaOspfTimerSpfHold=alaOspfTimerSpfHold, alaOspfTrafficEngineeringSupport=alaOspfTrafficEngineeringSupport, alaOspfIfMTU=alaOspfIfMTU, alaOspfNbrPendingLSreq=alaOspfNbrPendingLSreq, alaOspfRouteMetric2=alaOspfRouteMetric2, alaOspfBdrRouterNextHop=alaOspfBdrRouterNextHop, alaOspfBdrRouterType=alaOspfBdrRouterType, alaOspfVirtIfAugGroup=alaOspfVirtIfAugGroup, alaOspfOpaqueTransitCapability=alaOspfOpaqueTransitCapability, alaOspfExtLsdbAugEntry=alaOspfExtLsdbAugEntry, alaOspfIfDrRouterid=alaOspfIfDrRouterid, alaOspfIfVlanId=alaOspfIfVlanId, alaOspfBdrRouterAge=alaOspfBdrRouterAge, alaOspfTotalAreas=alaOspfTotalAreas, alaOspfAreaNumIntfs=alaOspfAreaNumIntfs, alaOspfNbrRestartHelperAge=alaOspfNbrRestartHelperAge, alaOspfRouteNextHop=alaOspfRouteNextHop, alaOspfDefaultOriginateMetricType=alaOspfDefaultOriginateMetricType, alaOspfIfMd5EncryptKey=alaOspfIfMd5EncryptKey, alaOspfAreaNssaElectedTranslatorRouterId=alaOspfAreaNssaElectedTranslatorRouterId, alaOspfIfAugGroup=alaOspfIfAugGroup, alaOspfMiscellaneousGroup=alaOspfMiscellaneousGroup, alaOspfGeneralGroup=alaOspfGeneralGroup, alaOspfAreaNssaTranslatorStabilityInterval=alaOspfAreaNssaTranslatorStabilityInterval, alaOspfRouteDest=alaOspfRouteDest, alaOspfNbrRestartHelperExitReason=alaOspfNbrRestartHelperExitReason, alaOspfRestartStatus=alaOspfRestartStatus, alaOspfAreaFullNbrs=alaOspfAreaFullNbrs, alaOspfIfFullNbrs=alaOspfIfFullNbrs, PYSNMP_MODULE_ID=alcatelIND1OSPFMIB, alaOspfRouteMetric1=alaOspfRouteMetric1, alaOspfIfMd5Key=alaOspfIfMd5Key, alaOspfExtLsdbAugTable=alaOspfExtLsdbAugTable, alaOspfDefaultOriginate=alaOspfDefaultOriginate, alaOspfVirtNbrDrAddr=alaOspfVirtNbrDrAddr, alaOspfVirtIfAugTable=alaOspfVirtIfAugTable, alaOspfNbrRestartHelperStatus=alaOspfNbrRestartHelperStatus, alaOspfRestartHelperSupport=alaOspfRestartHelperSupport, alaOspfRouteTos=alaOspfRouteTos, alcatelIND1OSPFMIBObjects=alcatelIND1OSPFMIBObjects, alaOspfTotalActiveAreas=alaOspfTotalActiveAreas, alaOspfIfMd5KeyStopGenerate=alaOspfIfMd5KeyStopGenerate, alaOspfIfMd5AuthMode=alaOspfIfMd5AuthMode, alaOspfExtLsdbMetric=alaOspfExtLsdbMetric, alaOspfRouteMask=alaOspfRouteMask, alaOspfNbrAugGroup=alaOspfNbrAugGroup, alaOspfRouteIfIndex=alaOspfRouteIfIndex, alaOspfBdrRouterEntry=alaOspfBdrRouterEntry, alaOspfBdrRouterIfIndex=alaOspfBdrRouterIfIndex, alaOspfIfMd5Entry=alaOspfIfMd5Entry, alaOspfAreaActiveVlinks=alaOspfAreaActiveVlinks, alaOspfIfAugTable=alaOspfIfAugTable, alaOspfExtLsdbFwdAddr=alaOspfExtLsdbFwdAddr, alaOspfRestartInterval=alaOspfRestartInterval, alaOspfRouteStatus=alaOspfRouteStatus, alaOspfTimerSpfDelay=alaOspfTimerSpfDelay, alaOspfBdrRouterTos=alaOspfBdrRouterTos, alaOspfExtLsdbMetricType=alaOspfExtLsdbMetricType, alaOspfIfMd5IpAddress=alaOspfIfMd5IpAddress, alaOspfReferenceBandwidth=alaOspfReferenceBandwidth, alaOspfAreaAggregateAugTable=alaOspfAreaAggregateAugTable, alaOspfIf2WayNbrs=alaOspfIf2WayNbrs, alaOspfNbrAugTable=alaOspfNbrAugTable, alaOspfAreaAugEntryGroup=alaOspfAreaAugEntryGroup, alaOspfNbrPendingLSack=alaOspfNbrPendingLSack, alaOspfRouteTable=alaOspfRouteTable, alaOspfIfMd5RowStatus=alaOspfIfMd5RowStatus, alaOspfIfOperStatus=alaOspfIfOperStatus, alaOspfIfEncryptKey=alaOspfIfEncryptKey, alaOspfNbrAreaId=alaOspfNbrAreaId, alaOspfAreaNssaImportSetPbit=alaOspfAreaNssaImportSetPbit, alaOspfAreaNssaTranslatorRole=alaOspfAreaNssaTranslatorRole, alaOspfExtLsdbLength=alaOspfExtLsdbLength, alaOspfAreaAugEntry=alaOspfAreaAugEntry, alaOspfIfMd5KeyId=alaOspfIfMd5KeyId, alaOspfOpaqueLsaSupport=alaOspfOpaqueLsaSupport, alaOspfVirtIfEncryptKey=alaOspfVirtIfEncryptKey, alaOspfVirtNbrBdrAddr=alaOspfVirtNbrBdrAddr, alaOspfExtLsdbProto=alaOspfExtLsdbProto, alaOspfBdrRouterAreaId=alaOspfBdrRouterAreaId, alaOspfRestartExitReason=alaOspfRestartExitReason, alaOspfAreaAugTable=alaOspfAreaAugTable, alaOspfDefaultOriginateMetric=alaOspfDefaultOriginateMetric, alaOspfVirtIfOperStatus=alaOspfVirtIfOperStatus, alcatelIND1OSPFMIB=alcatelIND1OSPFMIB, alcatelIND1OSPFMIBGroups=alcatelIND1OSPFMIBGroups, alaOspfVirtNbrPendingLSack=alaOspfVirtNbrPendingLSack, alaOspfAreaAggregateMetric=alaOspfAreaAggregateMetric, alaOspfBdrRouterGroup=alaOspfBdrRouterGroup)
