#
# PySNMP MIB module PRVT-LLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-LLDP-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 14:20:37 2021
# On host fv-az42-142 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, TimeTicks, Counter64, Unsigned32, Gauge32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, NotificationType, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "TimeTicks", "Counter64", "Unsigned32", "Gauge32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "NotificationType", "iso", "IpAddress")
DisplayString, TextualConvention, PhysAddress, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress", "RowStatus", "TruthValue")
prvtLldpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 145))
prvtLldpMIB.setRevisions(('2009-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtLldpMIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: prvtLldpMIB.setLastUpdated('200907280000Z')
if mibBuilder.loadTexts: prvtLldpMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtLldpMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtLldpMIB.setDescription('Management Information Base module for LLDP configuration')
prvtlldpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 0))
prvtLldpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1))
prvtLldpEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpEnable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpEnable.setDescription('Enable/disable the LLDP on the device')
prvtLldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpReinitDelay.setStatus('current')
if mibBuilder.loadTexts: prvtLldpReinitDelay.setDescription('Specify the time interval (in [s]) at\n         which the interface is checked if is enabled\n         again so that the port can be reinitialized')
prvtLldpSnmpNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpSnmpNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: prvtLldpSnmpNotifyInterval.setDescription('Set the SNMP notification interval (in [s])')
prvtLldpTransmitDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpTransmitDelay.setStatus('current')
if mibBuilder.loadTexts: prvtLldpTransmitDelay.setDescription('Specify the minimum transmint delay interval (in [s])')
prvtLldpTransmitHold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpTransmitHold.setStatus('current')
if mibBuilder.loadTexts: prvtLldpTransmitHold.setDescription('Specify the transmit-hold parameter')
prvtLldpTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtLldpTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: prvtLldpTransmitInterval.setDescription('Specify the minimum transmint interval (in [s])')
prvtLldpStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7))
prvtLldpStatsRemTablesLastChange = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRemTablesLastChange.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRemTablesLastChange.setDescription('Time from last remote table change.')
prvtLldpStatsRemTablesInserts = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRemTablesInserts.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRemTablesInserts.setDescription('Number of entries insterted in remote table')
prvtLldpStatsRemTablesDeletes = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRemTablesDeletes.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRemTablesDeletes.setDescription('Number of entries deleted in remote table')
prvtLldpStatsRemTablesDrops = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRemTablesDrops.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRemTablesDrops.setDescription('Number of entries dropped from remote table')
prvtLldpStatsRemTablesAgeouts = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 7, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRemTablesAgeouts.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRemTablesAgeouts.setDescription('Number of entries dropped from remote table')
prvtLldpStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 8), )
if mibBuilder.loadTexts: prvtLldpStatsTxPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsTxPortTable.setDescription('A table containing send LLDPDU from all ports.')
prvtLldpStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 8, 1), ).setIndexNames((0, "PRVT-LLDP-MIB", "prvtLldpStatsTxIfNum"))
if mibBuilder.loadTexts: prvtLldpStatsTxPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsTxPortEntry.setDescription('An entry for send LLDPDU from given port.')
prvtLldpStatsTxIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 8, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtLldpStatsTxIfNum.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsTxIfNum.setDescription('Interface name.')
prvtLldpStatsTxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsTxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsTxPortFramesTotal.setDescription('Total LLDPDUs send from this interface')
prvtLldpStatsTxPortFramesMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsTxPortFramesMalformed.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsTxPortFramesMalformed.setDescription('Malformed LLDPDUs send from this interface')
prvtLldpStatsRxPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9), )
if mibBuilder.loadTexts: prvtLldpStatsRxPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortTable.setDescription('A table containing received LLDPDU from all ports.')
prvtLldpStatsRxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1), ).setIndexNames((0, "PRVT-LLDP-MIB", "prvtLldpStatsRxIfNum"))
if mibBuilder.loadTexts: prvtLldpStatsRxPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortEntry.setDescription('An entry for received LLDPDU from given port.')
prvtLldpStatsRxIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtLldpStatsRxIfNum.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxIfNum.setDescription('Interface name.')
prvtLldpStatsRxPortFramesDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesDiscardedTotal.setDescription('Total number of discarded frames from port.')
prvtLldpStatsRxPortFramesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesErrors.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesErrors.setDescription('Total number of frame errors on port.')
prvtLldpStatsRxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortFramesTotal.setDescription('Total number of received frames from port.')
prvtLldpStatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortTLVsDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortTLVsDiscardedTotal.setDescription('Total number of discarded TLVs from port')
prvtLldpStatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortTLVsUnrecognizedTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortTLVsUnrecognizedTotal.setDescription('Total number of unrecognized TLVs from port.')
prvtLldpStatsRxPortAgeoutsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpStatsRxPortAgeoutsTotal.setStatus('current')
if mibBuilder.loadTexts: prvtLldpStatsRxPortAgeoutsTotal.setDescription('Total number of age outs on port.')
prvtLldpLocalSystemDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10))
prvtLldpLocChassisIdSubtype = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocChassisIdSubtype.setDescription('Subtype of the local Chasis')
prvtLldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocChassisId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocChassisId.setDescription('MAC address of the local chassis.')
prvtLldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocSysName.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocSysName.setDescription('Local system name.')
prvtLldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocSysDesc.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocSysDesc.setDescription('Local system description.')
prvtLldpLocSysCapSupported = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 5), Bits().clone(namedValues=NamedValues(("other", 0), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocSysCapSupported.setDescription('Local system supported capabilities.')
prvtLldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 10, 6), Bits().clone(namedValues=NamedValues(("other", 0), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocSysCapEnabled.setDescription('Local system enabled capabilities.')
prvtLldpLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11), )
if mibBuilder.loadTexts: prvtLldpLocManAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrTable.setDescription('Table of local management addresses.')
prvtLldpLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1), ).setIndexNames((0, "PRVT-LLDP-MIB", "prvtLldpLocManAddrSubtype"), (0, "PRVT-LLDP-MIB", "prvtLldpLocManAddress"))
if mibBuilder.loadTexts: prvtLldpLocManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrEntry.setDescription('Local management address entry')
prvtLldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65535))).clone(namedValues=NamedValues(("other", 0), ("ipV4", 1), ("ipV6", 2), ("nsap", 3), ("hldc", 4), ("bbn1822", 5), ("all802", 6), ("e163", 7), ("e164", 8), ("f69", 9), ("x121", 10), ("ipx", 11), ("appletalk", 12), ("decnetIV", 13), ("banyanVines", 14), ("e164withNsap", 15), ("dns", 16), ("distinguishedname", 17), ("asnumber", 18), ("xtpoveripv4", 19), ("xtpoveripv6", 20), ("xtpnativemodextp", 21), ("reserved", 65535))))
if mibBuilder.loadTexts: prvtLldpLocManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrSubtype.setDescription('Subtype of local management address')
prvtLldpLocManAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: prvtLldpLocManAddress.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddress.setDescription('Local management address')
prvtLldpLocManAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocManAddrLen.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrLen.setDescription('Lenght of local managemet address')
prvtLldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocManAddrIfSubtype.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrIfSubtype.setDescription('Local management addres interface subtype')
prvtLldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocManAddrIfId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrIfId.setDescription('Interface index of local management address')
prvtLldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 11, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpLocManAddrOID.setStatus('current')
if mibBuilder.loadTexts: prvtLldpLocManAddrOID.setDescription('')
prvtLldpPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12), )
if mibBuilder.loadTexts: prvtLldpPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpPortTable.setDescription('Table of LLDP ports')
prvtLldpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1), ).setIndexNames((0, "PRVT-LLDP-MIB", "prvtLldpCfgPortName"))
if mibBuilder.loadTexts: prvtLldpPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLldpPortEntry.setDescription('Entry for LLDP ports')
prvtLldpCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtLldpCfgPortName.setStatus('current')
if mibBuilder.loadTexts: prvtLldpCfgPortName.setDescription('Interface name.')
prvtLldpCfgPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpCfgPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtLldpCfgPortRowStatus.setDescription('The RowStatus entry for this interface.')
prvtLldpCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("rxTx", 3), ("disabled", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpCfgPortMode.setStatus('current')
if mibBuilder.loadTexts: prvtLldpCfgPortMode.setDescription('Set port admin status')
prvtLldpCfgPortSnmpNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpCfgPortSnmpNotify.setStatus('current')
if mibBuilder.loadTexts: prvtLldpCfgPortSnmpNotify.setDescription('Configure sending of LLDP SNMP notifications')
prvtLldpAdvBasicPortManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpAdvBasicPortManAddr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpAdvBasicPortManAddr.setDescription('Specify if LLDP will advertise the management addresses.')
prvtLldpAdvBasicPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpAdvBasicPortDescr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpAdvBasicPortDescr.setDescription('Specify if the description of the configured interface will be advertised by LLDP.')
prvtLldpAdvBasicPortSysCap = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysCap.setStatus('current')
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysCap.setDescription('Specify if system capabilities information (bitmap) will be sent to the interface being configured.')
prvtLldpAdvBasicPortSysDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysDescr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysDescr.setDescription('Specify if the system description will be sent to the interface being configured.')
prvtLldpAdvBasicPortSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysName.setStatus('current')
if mibBuilder.loadTexts: prvtLldpAdvBasicPortSysName.setDescription('Specify if the system name will be sent to the interface being configured')
prvtLldpDot1PortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot1PortVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot1PortVlanId.setDescription('Port VLAN-Id TLVs.')
prvtLldpDot1PortProtoIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot1PortProtoIdentity.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot1PortProtoIdentity.setDescription('Protocol Identity TLVs.')
prvtLldpDot1PortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot1PortVlanName.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot1PortVlanName.setDescription('VLAN Name TLVs.')
prvtLldpDot1PortProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot1PortProtoVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot1PortProtoVlanId.setDescription('VLAN ID TLVs.')
prvtLldpDot3PortLAG = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot3PortLAG.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot3PortLAG.setDescription('Link-aggregation TLVs.')
prvtLldpDot3PortMacPhy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot3PortMacPhy.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot3PortMacPhy.setDescription('Mac-phy TLVs.')
prvtLldpDot3PortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot3PortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot3PortMaxFrameSize.setDescription('Maximum Frame Size TLV.')
prvtLldpDot3PortPowerViaMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 12, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtLldpDot3PortPowerViaMdi.setStatus('current')
if mibBuilder.loadTexts: prvtLldpDot3PortPowerViaMdi.setDescription('Power-via-mdi TLV.')
prvtLldpRemDbPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13), )
if mibBuilder.loadTexts: prvtLldpRemDbPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortTable.setDescription('A table containing remote Db.')
prvtLldpRemDbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1), ).setIndexNames((0, "PRVT-LLDP-MIB", "prvtLldpRemDbIfNum"))
if mibBuilder.loadTexts: prvtLldpRemDbPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortEntry.setDescription('An entry for received LLDPDU from given port.')
prvtLldpRemDbIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtLldpRemDbIfNum.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbIfNum.setDescription('Interface name.')
prvtLldpRemDbPortDataTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortDataTTL.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortDataTTL.setDescription('Remote Data TTL')
prvtLldpRemDbPortDataAge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortDataAge.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortDataAge.setDescription('Remote Data Age')
prvtLldpRemDbPortChasIdSub = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortChasIdSub.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortChasIdSub.setDescription('Subtype of the Remote Chasis')
prvtLldpRemDbPortChasId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortChasId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortChasId.setDescription('Remote Chassis ID')
prvtLldpRemDbPortIdSub = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortIdSub.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortIdSub.setDescription('Subtype of the Remote Port')
prvtLldpRemDbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortId.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortId.setDescription('Remote Port ID')
prvtLldpRemDbPortSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortSysName.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortSysName.setDescription('Remote system name.')
prvtLldpRemDbPortSysDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortSysDescr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortSysDescr.setDescription('Remote system description.')
prvtLldpRemDbPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortDescr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortDescr.setDescription('Remote port description.')
prvtLldpRemDbPortSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 11), Bits().clone(namedValues=NamedValues(("other", 0), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortSysCapSupported.setDescription('Remote System supported capabilities.')
prvtLldpRemDbPortSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 12), Bits().clone(namedValues=NamedValues(("other", 0), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortSysCapEnabled.setDescription('Remote System enabled capabilities.')
prvtLldpRemDbPortManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 1, 13, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLldpRemDbPortManAddr.setStatus('current')
if mibBuilder.loadTexts: prvtLldpRemDbPortManAddr.setDescription('Remote management address.')
lldpNewRemoteInfo = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 145, 0, 1)).setObjects(("PRVT-LLDP-MIB", "prvtLldpStatsRemTablesInserts"), ("PRVT-LLDP-MIB", "prvtLldpStatsRemTablesDeletes"), ("PRVT-LLDP-MIB", "prvtLldpStatsRemTablesDrops"), ("PRVT-LLDP-MIB", "prvtLldpStatsRemTablesAgeouts"))
if mibBuilder.loadTexts: lldpNewRemoteInfo.setStatus('current')
if mibBuilder.loadTexts: lldpNewRemoteInfo.setDescription('New Remote Info')
mibBuilder.exportSymbols("PRVT-LLDP-MIB", prvtlldpNotifications=prvtlldpNotifications, prvtLldpLocManAddrSubtype=prvtLldpLocManAddrSubtype, prvtLldpReinitDelay=prvtLldpReinitDelay, prvtLldpAdvBasicPortManAddr=prvtLldpAdvBasicPortManAddr, prvtLldpDot1PortProtoVlanId=prvtLldpDot1PortProtoVlanId, PYSNMP_MODULE_ID=prvtLldpMIB, prvtLldpAdvBasicPortSysName=prvtLldpAdvBasicPortSysName, prvtLldpAdvBasicPortSysDescr=prvtLldpAdvBasicPortSysDescr, prvtLldpTransmitInterval=prvtLldpTransmitInterval, prvtLldpLocSysName=prvtLldpLocSysName, prvtLldpStatsRemTablesDrops=prvtLldpStatsRemTablesDrops, prvtLldpDot1PortProtoIdentity=prvtLldpDot1PortProtoIdentity, prvtLldpRemDbPortIdSub=prvtLldpRemDbPortIdSub, prvtLldpAdvBasicPortSysCap=prvtLldpAdvBasicPortSysCap, prvtLldpLocChassisId=prvtLldpLocChassisId, prvtLldpTransmitDelay=prvtLldpTransmitDelay, prvtLldpStatsRxPortFramesTotal=prvtLldpStatsRxPortFramesTotal, prvtLldpDot3PortMacPhy=prvtLldpDot3PortMacPhy, prvtLldpLocManAddrEntry=prvtLldpLocManAddrEntry, prvtLldpEnable=prvtLldpEnable, prvtLldpMIB=prvtLldpMIB, prvtLldpStatsRemTablesLastChange=prvtLldpStatsRemTablesLastChange, prvtLldpAdvBasicPortDescr=prvtLldpAdvBasicPortDescr, prvtLldpPortTable=prvtLldpPortTable, prvtLldpStatsTxIfNum=prvtLldpStatsTxIfNum, prvtLldpRemDbIfNum=prvtLldpRemDbIfNum, prvtLldpRemDbPortId=prvtLldpRemDbPortId, prvtLldpLocManAddrOID=prvtLldpLocManAddrOID, prvtLldpStatsRemTablesAgeouts=prvtLldpStatsRemTablesAgeouts, prvtLldpStatsRxPortTable=prvtLldpStatsRxPortTable, prvtLldpRemDbPortDataTTL=prvtLldpRemDbPortDataTTL, prvtLldpStatsRemTablesInserts=prvtLldpStatsRemTablesInserts, prvtLldpStatsTxPortTable=prvtLldpStatsTxPortTable, prvtLldpCfgPortMode=prvtLldpCfgPortMode, prvtLldpObjects=prvtLldpObjects, prvtLldpStatsRxPortFramesErrors=prvtLldpStatsRxPortFramesErrors, prvtLldpRemDbPortChasId=prvtLldpRemDbPortChasId, prvtLldpRemDbPortSysCapEnabled=prvtLldpRemDbPortSysCapEnabled, prvtLldpCfgPortSnmpNotify=prvtLldpCfgPortSnmpNotify, prvtLldpLocManAddrIfId=prvtLldpLocManAddrIfId, prvtLldpCfgPortRowStatus=prvtLldpCfgPortRowStatus, prvtLldpDot1PortVlanId=prvtLldpDot1PortVlanId, prvtLldpStatsRxPortAgeoutsTotal=prvtLldpStatsRxPortAgeoutsTotal, prvtLldpDot3PortMaxFrameSize=prvtLldpDot3PortMaxFrameSize, prvtLldpStatisticsObjects=prvtLldpStatisticsObjects, prvtLldpLocChassisIdSubtype=prvtLldpLocChassisIdSubtype, prvtLldpRemDbPortDataAge=prvtLldpRemDbPortDataAge, prvtLldpRemDbPortSysDescr=prvtLldpRemDbPortSysDescr, prvtLldpStatsRemTablesDeletes=prvtLldpStatsRemTablesDeletes, prvtLldpRemDbPortDescr=prvtLldpRemDbPortDescr, prvtLldpRemDbPortSysCapSupported=prvtLldpRemDbPortSysCapSupported, prvtLldpLocSysDesc=prvtLldpLocSysDesc, prvtLldpStatsTxPortFramesTotal=prvtLldpStatsTxPortFramesTotal, prvtLldpPortEntry=prvtLldpPortEntry, prvtLldpLocManAddrLen=prvtLldpLocManAddrLen, prvtLldpStatsRxPortTLVsDiscardedTotal=prvtLldpStatsRxPortTLVsDiscardedTotal, prvtLldpStatsRxPortFramesDiscardedTotal=prvtLldpStatsRxPortFramesDiscardedTotal, prvtLldpStatsTxPortFramesMalformed=prvtLldpStatsTxPortFramesMalformed, prvtLldpRemDbPortEntry=prvtLldpRemDbPortEntry, prvtLldpTransmitHold=prvtLldpTransmitHold, prvtLldpLocManAddrTable=prvtLldpLocManAddrTable, prvtLldpStatsRxPortTLVsUnrecognizedTotal=prvtLldpStatsRxPortTLVsUnrecognizedTotal, prvtLldpSnmpNotifyInterval=prvtLldpSnmpNotifyInterval, prvtLldpLocManAddress=prvtLldpLocManAddress, prvtLldpRemDbPortChasIdSub=prvtLldpRemDbPortChasIdSub, prvtLldpLocSysCapEnabled=prvtLldpLocSysCapEnabled, prvtLldpLocManAddrIfSubtype=prvtLldpLocManAddrIfSubtype, prvtLldpStatsRxPortEntry=prvtLldpStatsRxPortEntry, prvtLldpStatsRxIfNum=prvtLldpStatsRxIfNum, prvtLldpDot3PortLAG=prvtLldpDot3PortLAG, prvtLldpCfgPortName=prvtLldpCfgPortName, prvtLldpRemDbPortSysName=prvtLldpRemDbPortSysName, prvtLldpDot1PortVlanName=prvtLldpDot1PortVlanName, prvtLldpLocSysCapSupported=prvtLldpLocSysCapSupported, prvtLldpRemDbPortManAddr=prvtLldpRemDbPortManAddr, prvtLldpLocalSystemDataObjects=prvtLldpLocalSystemDataObjects, prvtLldpDot3PortPowerViaMdi=prvtLldpDot3PortPowerViaMdi, prvtLldpStatsTxPortEntry=prvtLldpStatsTxPortEntry, lldpNewRemoteInfo=lldpNewRemoteInfo, prvtLldpRemDbPortTable=prvtLldpRemDbPortTable)
