#
# PySNMP MIB module DOCS-MCAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-MCAST-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 00:53:20 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
DocsBpkmDataEncryptAlg, DocsSAId = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsBpkmDataEncryptAlg", "DocsSAId")
Dsid, ChSetId = mibBuilder.importSymbols("DOCS-IF3-MIB", "Dsid", "ChSetId")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter64, Gauge32, Counter32, Bits, IpAddress, TimeTicks, ObjectIdentity, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter64", "Gauge32", "Counter32", "Bits", "IpAddress", "TimeTicks", "ObjectIdentity", "Integer32", "NotificationType")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
docsMcastMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18))
docsMcastMib.setRevisions(('2007-08-03 00:00', '2006-12-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsMcastMib.setRevisionsDescriptions(('Revised Version includes ECNs \n             OSSIv3.0-N-07.0499-1 \n             OSSIv3.0-N-07.0473-3 \n             and is published as I04', 'Initial version, published as part of the CableLabs \n        OSSIv3.0 specification CM-SP-OSSIv3.0-I01-061207 \n        Copyright 1999-2006 Cable Television Laboratories, Inc. \n        All rights reserved.',))
if mibBuilder.loadTexts: docsMcastMib.setLastUpdated('200708030000Z')
if mibBuilder.loadTexts: docsMcastMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsMcastMib.setContactInfo(' \n         Postal: Cable Television Laboratories, Inc. \n         858 Coal Creek Circle \n         Louisville, Colorado 80027-9750 \n         U.S.A. \n         Phone: +1 303-661-9100 \n         Fax:   +1 303-661-9199 \n         E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsMcastMib.setDescription('This MIB module contains the management objects for the \n        management of Multicast over DOCSIS to support Multicast \n        DSID forwarding and or bonded multicast.')
docsMcastMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1))
docsMcastCmtsGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1), )
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTable.setDescription("This object controls the QoS, PHS and encryption settings \n        for downstream forwarding of IP multicast sessions. \n        An IP multicast session is replicated to one \n        or more Downstream Channel Sets (DCSs), where each \n        DCS is either a single downstream channel or a downstream \n        bonding group of multiple channels. The CMTS determines \n        on which DCSs to replicate a multicast session \n        based on IP multicast membership reports ('joins') \n        or other vendor-specific static configuration. \n \n        The CmtsGrpCfg object allows for the configuration \n        of a range of sessions through the SrcPrefixAddr and \n        GrpPrefixAddr and SrcPrefixLen and GrpPrefixLen attributes. \n \n        The CmtsGrpCfg object allows for the configuration \n        of QoS, Encryption and PHS for multicast sessions. Cable \n        operators can specify configuration rules for \n        a range of multicast sessions through the tuple of \n        (SrcPrefixAddr,SrcPrefixLen, GrpPrefixAddr, GrpPrefixLen) \n        attributes in an entry. The QosConfigId attribute \n        identifies the QoS rule, the EncryptionConfigId \n        identifies the encryption rule and the PhsConfigId \n        identifies the PHS rule for a particular entry. \n        Even if an entry indicates a range of multicast sessions \n        the Encryption and PHS rules are applied on a per-session \n        basis. That is, a separate DSID is assigned \n        to an individual multicast session from a range of multicast \n        sessions identified by an entry in the CmtsGrpCfg \n        object and a PHS rule (indicated by the PhsCfgId) \n        is applied individually to each session which is \n        identified by the DSID assigned for that session. Similarly, \n        a separate SAID is assigned to individual multicast \n        session from range identified by the CmtsGrpCfg \n        object. \n        The CmtsGrpQosConfigQosCtrl attribute from the CmtsGrpQosCfg \n        object is used to determine if the traffic \n        for a range of multicast sessions identified by an \n        entry in the CmtsGrpCfg object will be transmitted in \n        an 'Aggregate-Session' Group Service Flow or will \n        be transmitted separately for each session using \n        'Single-Session' Group Service Flows.  Even if the range \n        of multicast sessions are transmitted on an 'Aggregate-Session' \n        Group Service Flow, the PHS and Encryption \n        rules are always applied individually to a multicast \n        session on a per-session DSID basis prior to \n        being transmitted on an 'Aggregate-Session' Group \n        Service Flow (GSF). \n \n        This object supports the creation and deletion of multiple \n        instances. \n        Creation of a new instance of this object requires the \n        following attributes to be set \n        RulePriority \n        PrefixAddrType \n        SrcPrefixAddr \n        SrcPrefixLen \n        GrpPrefixAddr \n        GrpPrefixLen \n        IpDsLow \n        IpDsHigh \n        IpDsMask")
docsMcastCmtsGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpCfg. \n          The CMTS persists all instances of the CmtsGrpConfig object \n          across system reinitializations.')
docsMcastCmtsGrpCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgId.setDescription('This attribute represents the unique identifier \n        of instances of this object. This attribute is \n        the key that identifies unique instances of the CmtsGrpConfig \n        object.')
docsMcastCmtsGrpCfgRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRulePriority.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRulePriority.setDescription('This attribute indicates the priority of this entry \n        used to resolve which instance of this object apply \n        when a newly replicated multicast session matches \n        multiple entries. Higher values indicate a higher \n        priority. Valid values for this attribute are 0..63 \n        and 192..255 in order to not conflict with CMTS \n        internally-created instances that use the range \n        64..191.')
docsMcastCmtsGrpCfgPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPrefixAddrType.setDescription('This attribute identifies the address family for \n        the multicast session (S,G) of the GC which corresponds \n        to the SrcPrefixAddr and GrpPrefixAddr attributes \n        respectively.')
docsMcastCmtsGrpCfgSrcPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setReference('RFC 3569. \n         RFC 3306.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixAddr.setDescription('This attribute defines the IP source address prefix \n        of the IP multicast session. \n         Source prefix addresses are unicast host addresses.')
docsMcastCmtsGrpCfgSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgSrcPrefixLen.setDescription('This attribute identifies the prefix of a range of \n        Source (S) IP multicast group addresses. For Group or \n        ASM based sessions this attribute is set to 0.')
docsMcastCmtsGrpCfgGrpPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixAddr.setDescription('This attribute identifies the prefix of a range of \n        destination IP multicast group addresses.')
docsMcastCmtsGrpCfgGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setReference('DOCSIS 3.0 Operation and Support System Interface \n           Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n           Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgGrpPrefixLen.setDescription('This attribute identifies the prefix of a range of \n        IP multicast group addresses.')
docsMcastCmtsGrpCfgTosLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setReference('RFC 791. \n         RFC 3260. \n         RFC3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosLow.setDescription('This attribute identifies the low value of a range \n        of  the TOS byte value to be defined in a packet classifier \n        this GC instantiates in the GCR in order to limit the \n        GCR-matched traffic to a particular set of DSCPs. \n         This applies to the IPv4 TOS byte and the IPv6 Traffic \n        Class byte. \n        The IP TOS octet, as originally defined in RFC 791, has \n        been superseded by the 6-bit Differentiated Services \n        Field and the 2-bit Explicit Congestion Notification \n        Field.')
docsMcastCmtsGrpCfgTosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setReference('RFC 791. \n         RFC 3260. \n         RFC 3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosHigh.setDescription('This attribute identifies the high value of a range \n        of  the TOS byte value to be defined in a packet classifier \n        this GC instantiates in the GCR in order to limit \n        the GCR-matched traffic to a particular set of DSCPs. \n        This applies to the IPv4 TOS byte and the IPv6 Traffic \n        Class byte. \n        The IP TOS octet, as originally defined in RFC 791, has \n        been superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit \n        Congestion Notification Field (ECN field, RFC 3168).')
docsMcastCmtsGrpCfgTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setReference('RFC 791. \n         RFC 3260. \n         RFC 3168.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgTosMask.setDescription('This attribute identifies the mask value bitwise \n        ANDed with a TOS byte value to be defined in a packet classifier \n        this GC instantiates in the GCR in order to limit \n        the GCR-matched traffic to a particular set of DSCPs. \n         This applies to the IPv4 TOS byte and the IPv6 Traffic \n        Class byte. \n        The IP TOS octet, as originally defined in RFC 791, has \n        been superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit \n        Congestion Notification Field (ECN field, RFC 3168).')
docsMcastCmtsGrpCfgQosConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface \n                 Specification CM-SP-OSSIv3.0-I04-070803, Multicast QoS \n                 Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgQosConfigId.setDescription('This attribute identifies an instance in CmtsGrpQosCfg \n        for configuring the QoS for the replication \n        of the sessions matching this CmtsGrpCfg instance. \n        The value 0 indicates that all replications referenced \n        by this CmtsGrpCfg instance will be forwarded to the \n        default GSF.')
docsMcastCmtsGrpCfgEncryptConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface \n                 Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n                 Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgEncryptConfigId.setDescription('This attribute identifies an instance in CmtsGrpEncryptionCfg \n        for configuring the encryption of replicationsderived \n        from this GC. \n        The value 0 indicates no encryption for all replications \n        derived from this GC.')
docsMcastCmtsGrpCfgPhsConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setReference('DOCSIS 3.0 Operation and Support System Interface \n                  Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n                  Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgPhsConfigId.setDescription('This attribute identifies an instance in CmtsGrpPhsCfg \n        that configures DSID-indexed PHS compression \n        for all replications derived from this GC. \n        The value 0 indicates no PHS compression for all replications \n        derived from this GC.')
docsMcastCmtsGrpCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpEncryptCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2), )
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgTable.setDescription('This object controls the configuration of the Security \n        Association (SA) and the encryption algorithm \n        used for multicast sessions. \n        This object supports the creation and deletion of instances.')
docsMcastCmtsGrpEncryptCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpEncryptCfg. \n         The CMTS persists all instances of the CmtsGrpEncryptionConfig \n         object across system reinitializations.')
docsMcastCmtsGrpEncryptCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgId.setDescription('This attribute specifies the unique identifier of \n        instances of this object')
docsMcastCmtsGrpEncryptCfgCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cmts", 1), ("mgmt", 2))).clone('mgmt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgCtrl.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgCtrl.setDescription("This attribute controls whether the CMTS can select \n        the encryption algorithm or if this can be set manually \n        using the Alg attribute.  If this attribute is set \n        to 'cmts', the CMTS can select the encryption algorithm \n        for the Security Association (SA).  If this attribute \n        is set to 'mgmt', the Alg attribute is used to define \n        the encryption algorithm for this SA.")
docsMcastCmtsGrpEncryptCfgAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 3), DocsBpkmDataEncryptAlg().clone('des56CbcMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setReference('DOCSIS 3.0 Security Specification \n         CM-SP-SECv3.0-I01-060804,Security-Capabilities \n         section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgAlg.setDescription("This attribute defines which encryption algorithm \n        will be used for an SA referenced by this object when \n        the Ctrl is set to 'mgmt'.")
docsMcastCmtsGrpEncryptCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpEncryptCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpPhsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3), )
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgTable.setDescription('This object controls the configuration of DSID-indexed \n        PHS for multicast sessions. Configuration of \n        PHS Rules via this table must not be based on the configuration \n        of a range of sessions, but must be configured \n        on a single multicast session. \n        Creation of multple instances of this object require \n        the following attributes to be set: \n        PhsField \n        PhsMask \n        PhsSize')
docsMcastCmtsGrpPhsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpPhsCfg. \n         The CMTS persists all instances of the CmtsGrpPhsConfig \n         object across system reinitializations.')
docsMcastCmtsGrpPhsCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgId.setDescription('This attribute identifies the unique identifier \n        of a PHS rule that is referenced by the GrpConfig object.')
docsMcastCmtsGrpPhsCfgPhsField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsField.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsField.setDescription('This attribute defines the bytes of the DOCSIS header \n        which must be suppressed/restored by the sending/receiving \n        device.')
docsMcastCmtsGrpPhsCfgPhsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n         Specification CM-SP-MULPIv3.0-I01-060804, \n         Payload Header Suppression Encodings section and  \n         Payload Header Suppression Mask (PHSM) in the Common \n         Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsMask.setDescription("This attribute defines the bit mask which is used in \n        combination with the PhsField  to define which bytes \n        in header must be suppressed/restored by the sending \n        or receiving device. \n        Each bit of this bit mask corresponds to a byte in the \n        PhsField, with the least significant bit corresponding \n        to the first byte of the PhsField. \n        Each bit of the bit mask specifies whether or not the \n        corresponding byte should be suppressed in the packet. \n        A bit value of '1' indicates that the byte should be \n        suppressed by the sending device and restored by the \n        receiving device. \n        A bit value of '0' indicates that the byte should not be \n        suppressed by the sending device or restored by the \n        receiving device. \n        If the bit mask does not contain a bit for each byte in the \n        PhsField then the bit mask is extended with bit values \n        of '1' to be the  necessary length.")
docsMcastCmtsGrpPhsCfgPhsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n         Specification CM-SP-MULPIv3.0-I01-060804, Payload Header \n         Suppression Encodings section and Payload Header Suppression \n         Size (PHSS) section in the Common Radio Frequency Interface \n         Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsSize.setDescription('This attribute specifies the number of bytes in the \n        header to be suppressed and restored. \n        The value of this object matches the number of bytes the \n        bits indicated in the PhsField attribute.')
docsMcastCmtsGrpPhsCfgPhsVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n         Specification CM-SP-MULPIv3.0-I01-060804, Payload Header \n         Suppression Encodings section and Payload Header Suppression \n         Size (PHSS) section in the Common Radio Frequency Interface \n         Encodings Annex.')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgPhsVerify.setDescription("This attribute specifies the Payload Header Suppression \n        verification value of 'true' the sender must \n        verify PhsField is the same as what is contained in the \n        packet to be suppressed.")
docsMcastCmtsGrpPhsCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpPhsCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsGrpQosCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4), )
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgTable.setDescription('This object configures the QoS configured for Multicast \n        sessions replicated to any Downstream Channel \n        Set. It does not control which particular DCSs to which \n        the CMTS replicates a multicast session. \n        An instance in this object is called a GQC entry. A GQC \n        entry controls how the CMTS instantiates a Group Classifier \n        Rule (GCR) on the DCS to match packets of the multicast \n        session.  A Group Classifier Rule (GCR) uses \n        source and destination IP address and ToS criteria. \n \n        A GQC entry controls how and with what QoS parameters \n        a Group Service Flow (GSF) is created on a DCS. All downstream \n        multicast packets are scheduled on a GSF. The \n        QoS Type attribute of the GQC entry controls whether \n        the CMTS creates one GSF for each single IP multicast \n        session or whether the CMTS creates one GSF for the aggregate \n        of all sessions that match the GQC criteria. \n         The GQC instance contains a reference to a Service Class \n        from docsIetfQosServiceClassTable. The Service \n        Class defines the list of QoS parameters for the GSF(s) \n        instantiated for the GQC entry. \n        A CMTS identifies one Service Class as the Default Group \n        QoS Service Class.  The CMTS instantiates a Default \n        Group Service Flow on each single-channel DCS based \n        on the parameters of the Default Group QoS Service \n        Class. \n        The set of GCRs and GSFs instantiated on a DCS control \n        how QoS is provided to multicast packets replicated \n        to the DCS.   For each multicast packet, the CMTS classifies \n        the packet to the highest priority matching GCR \n        on that DCS. The GCR refers to a single GSF, which controls \n        the scheduling of the packets on the DCS.   If the \n        multicast packet does not match any GCR on the DCS, the \n        packet is scheduled on the Default Group Service Flow \n        of the DCS. The CMTS replicates unclassified multicast \n        traffic to only DCSs consisting of a single downstream \n        channel.  Thus, the Maximum Sustained Traffic \n        Rate QoS parameter of the Default Group Service Class \n        limits the aggregate rate of unclassified multicast \n        traffic on each downstream channel. \n        The CMTS is expected to instantiate GCRs and GSFs controlled \n        by the entries in this table only for the duration \n        of replication of the multicast sessions matching \n        the entry. \n        This object supports the creation of multiple instances. \n \n        Creation of new instances of this object require the \n        following objects to be set: \n        ServiceClassName \n        QosCtrl \n        AggSessLimit')
docsMcastCmtsGrpQosCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgId"))
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgEntry.setDescription('The conceptual row of docsMcastCmtsGrpQosCfg. \n         The CMTS persists all instances of the CmtsGrpQosConfig \n         object across system reinitialization.')
docsMcastCmtsGrpQosCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgId.setDescription('This attribute identifies a unique Group QoS Configuration \n        object instance.')
docsMcastCmtsGrpQosCfgServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setReference('DOCSIS 3.0 Operation and Support System Interface \n                  Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n                 Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgServiceClassName.setDescription('This attribute identifies the Service Class Name \n        reference for the set of QoS parameters for this GQC.')
docsMcastCmtsGrpQosCfgQosCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleSession", 1), ("aggregateSession", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setReference('DOCSIS 3.0 Operation and Support System Interface \n                  Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n        Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgQosCtrl.setDescription("This attribute identifies how Group Classifier Rules \n        (GCRs) and Group Service Flows (GSFs) are instantiated \n        when multiple sessions match the (S,G) criteria \n        of this entry. If 'singleSession', the CMTS creates \n        a unique GCR and a unique GSF for the session. If this \n        object's value is 'aggregateSession', all sessions \n        matching this criterion are aggregated into the \n        same GSF.")
docsMcastCmtsGrpQosCfgAggSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setReference('DOCSIS 3.0 Operation and Support System Interface \n                  Specification CM-SP-OSSIv3.0-I01-061207, Multicast QoS \n        Configuration Object Model section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAggSessLimit.setDescription("This attribute identifies the maximum number of sessions \n        that may be aggregated in an aggregated Service \n        Flow. This value is ignored in case of a GQC entry with QosCtrl \n        set to 'singleSession'.")
docsMcastCmtsGrpQosCfgAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I04-070518, Application \n        Idenfifier section in the Common TLV Encodings Annex; \n        PacketCable Multimedia Specification PKT-SP-MM-I03-051221, \n        Policy Server and CMTS Interface section.')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgAppId.setDescription('This attribute configures an application identifier \n        that an operator configures to enable special features \n        for QoS admission control or other policies. \n        The behavior and usage of the Application dentifier \n        is vendor specific. \n        This attribute allows the operator to configure a Cable \n        Operator defined Application Identifier for multicast \n        sessions, e.g., an Application Manager ID and \n        Application Type. \n        This Application Identifier can be used to influence \n        admission control or other policies in the CMTS that \n        outside of the scope of this specification. \n        This parameter is optional in defining QoS for \n        multicast sessions. \n        If the value of this attribute is different from the \n        value of the AppId in the referenced SCN for this GQC \n        instance, the value of this attribute is used.')
docsMcastCmtsGrpQosCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsGrpQosCfgRowStatus.setDescription('The status of this instance.')
docsMcastCmtsReplSessTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5), )
if mibBuilder.loadTexts: docsMcastCmtsReplSessTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessTable.setDescription("This object describes the replication of IP Multicast \n        sessions onto the different Downstream Channel \n        Sets of a CMTS.  Each DCS may be either a single downstream \n        channel or a bonding group of multiple downstream \n        channels. Each IP Multicast session is identified \n        by a combination of IP source and IP Destination group \n        address '(S,G).  The CMTS replicates each IP packet \n        in an (S,G) session onto one or more Downstream Channel \n        Sets (DCSs), each of which is implemented in a MAC \n        Domain.  The CMTS assigns each replication a Downstream \n        Service ID (DSID) that is unique per MAC Domain.")
docsMcastCmtsReplSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1), ).setIndexNames((0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessPrefixAddrType"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessGrpPrefix"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessSrcPrefix"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessMdIfIndex"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessDcsId"), (0, "DOCS-MCAST-MIB", "docsMcastCmtsReplSessServiceFlowId"))
if mibBuilder.loadTexts: docsMcastCmtsReplSessEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessEntry.setDescription('The conceptual row of docsMcastCmtsReplSess.')
docsMcastCmtsReplSessPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsMcastCmtsReplSessPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessPrefixAddrType.setDescription('This atrribute defines the address type for the GrpPrefix \n        and SrcPrefix addresses.')
docsMcastCmtsReplSessGrpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsMcastCmtsReplSessGrpPrefix.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessGrpPrefix.setDescription('This attribute defines the group G of a particular \n        (S,G) IP multicast session.')
docsMcastCmtsReplSessSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setReference('RFC 3569. \n         RFC 3306.')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSrcPrefix.setDescription("This attribute identifies a specific Multicast Source \n        Address.  A Source Address that is all zeros is defined \n        as 'all source addresses  (*, G)'.")
docsMcastCmtsReplSessMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: docsMcastCmtsReplSessMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessMdIfIndex.setDescription('This attribute defines the MAC Domain Interface index \n        of the channel to which the (S,G) session is replicated.')
docsMcastCmtsReplSessDcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 5), ChSetId())
if mibBuilder.loadTexts: docsMcastCmtsReplSessDcsId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessDcsId.setDescription('This attribute provides the reference for the Downstream \n        Channel Set within a MAC Domain that the multicast \n        session (S,G) is replicated to.')
docsMcastCmtsReplSessServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsMcastCmtsReplSessServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessServiceFlowId.setDescription('This attribute indicates the service flow into which \n        packets are classified for this replication of the \n        multicast session (S,G).')
docsMcastCmtsReplSessDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 7), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCmtsReplSessDsid.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessDsid.setDescription('This attribute defines the Downstream Service ID \n        (DSID) label with which the CMTS labels all packets of \n        the (S,G) session on the DCS of a MAC Domain.   The DSID \n        value is unique per MAC domain.')
docsMcastCmtsReplSessSaid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 5, 1, 8), DocsSAId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastCmtsReplSessSaid.setStatus('current')
if mibBuilder.loadTexts: docsMcastCmtsReplSessSaid.setDescription('This attribute defines the Security Association \n        ID (SAID) of this multicast replication session. The \n        value 0 indicates no SAID assocated with this session.')
docsMcastDefGrpSvcClass = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 6))
docsMcastDefGrpSvcClassDef = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 6, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setReference('RFC 4323.')
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setStatus('current')
if mibBuilder.loadTexts: docsMcastDefGrpSvcClassDef.setDescription('This attribute references an instance of the SNMP \n        table docsIetfQosServiceClassName object. This attribute \n        is used to expand the QoS parameter Set of QoS \n        for multicast sessions that uses a default QoS policy. \n        The CMTS persists all instances of this attribute across \n        reinitializations.')
docsMcastDsidPhsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7), )
if mibBuilder.loadTexts: docsMcastDsidPhsTable.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsTable.setDescription('This object reports the set of DSID-Indexed PHS rules \n        that are signaled between the CMTS and CMs as part \n        of the  Multicast Sessions setup. The attributes PhsMask, \n        PhsSize and PhsVerify comes from the configuration \n        object CmtsGrpPhsCfg. The value of the PhsField \n        attribute is derived by the CMTS from the CmtsGrpCfg \n        object parameters, and possibly other IP header informaton \n        of the multicast session that the CMTS is capable \n        of knowning prior to the multicast session setup. \n        In cases where the PhsSize is longer than the CMTS \n        knowledge of IP/TCP header fields, the CMTS extends \n        the PhsMask with bits set to  0  until reaching the equivalent \n        PhsSize value.')
docsMcastDsidPhsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-MCAST-MIB", "docsMcastDsidPhsDsid"))
if mibBuilder.loadTexts: docsMcastDsidPhsEntry.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsEntry.setDescription('The conceptual row of docsMcastDsidPhs. \n         The ifIndex key corresponds to the MAC Domain interface \n         where the PHSI-Indexed DSID is configured.')
docsMcastDsidPhsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 1), Dsid())
if mibBuilder.loadTexts: docsMcastDsidPhsDsid.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsDsid.setDescription('This attribute represents the 20-bit DSID associated \n        with this PHS rule.')
docsMcastDsidPhsPhsField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsField.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsField.setDescription('This attribute defines the bytes of the header which \n        must be suppressed/restored by the sending/receiving \n        device.')
docsMcastDsidPhsPhsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsMask.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsMask.setDescription('This attribute defnes the Payload Header Suppression \n        mask in the header to be suppressed and restored.')
docsMcastDsidPhsPhsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsSize.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsSize.setDescription('This attribute defines the the number of bytes in the \n        header to be suppressed and restored.')
docsMcastDsidPhsPhsVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 1, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsMcastDsidPhsPhsVerify.setStatus('current')
if mibBuilder.loadTexts: docsMcastDsidPhsPhsVerify.setDescription("This attribute, when set to  'true', indicates that \n        the sender must verify that the PHS Field attribute \n        value is the same is the same as what is contained in the \n        packet to be suppressed.")
docsMcastMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2))
docsMcastMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 1))
docsMcastMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 2))
docsMcastCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 1, 1)).setObjects(("DOCS-MCAST-MIB", "docsMcastGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsMcastCompliance = docsMcastCompliance.setStatus('current')
if mibBuilder.loadTexts: docsMcastCompliance.setDescription('The compliance statement for devices that implement the DOCSIS \n         Multicast MIB.')
docsMcastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 18, 2, 2, 1)).setObjects(("DOCS-MCAST-MIB", "docsMcastCmtsReplSessDsid"), ("DOCS-MCAST-MIB", "docsMcastCmtsReplSessSaid"), ("DOCS-MCAST-MIB", "docsMcastDefGrpSvcClassDef"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsField"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsMask"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsSize"), ("DOCS-MCAST-MIB", "docsMcastDsidPhsPhsVerify"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgRulePriority"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgPrefixAddrType"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgSrcPrefixAddr"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgSrcPrefixLen"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgGrpPrefixAddr"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgGrpPrefixLen"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosLow"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosHigh"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgTosMask"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgQosConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgEncryptConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgPhsConfigId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgServiceClassName"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgQosCtrl"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgAggSessLimit"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgAppId"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpQosCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgCtrl"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgAlg"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpEncryptCfgRowStatus"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsField"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsMask"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsSize"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgPhsVerify"), ("DOCS-MCAST-MIB", "docsMcastCmtsGrpPhsCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsMcastGroup = docsMcastGroup.setStatus('current')
if mibBuilder.loadTexts: docsMcastGroup.setDescription('Group of objects implemented in the CMTS.')
mibBuilder.exportSymbols("DOCS-MCAST-MIB", docsMcastCmtsGrpQosCfgServiceClassName=docsMcastCmtsGrpQosCfgServiceClassName, docsMcastCmtsGrpPhsCfgTable=docsMcastCmtsGrpPhsCfgTable, docsMcastCmtsReplSessServiceFlowId=docsMcastCmtsReplSessServiceFlowId, docsMcastCmtsReplSessPrefixAddrType=docsMcastCmtsReplSessPrefixAddrType, docsMcastCmtsGrpPhsCfgRowStatus=docsMcastCmtsGrpPhsCfgRowStatus, docsMcastCmtsGrpCfgEntry=docsMcastCmtsGrpCfgEntry, docsMcastCmtsGrpCfgGrpPrefixAddr=docsMcastCmtsGrpCfgGrpPrefixAddr, docsMcastCmtsGrpCfgSrcPrefixAddr=docsMcastCmtsGrpCfgSrcPrefixAddr, docsMcastCmtsGrpQosCfgAppId=docsMcastCmtsGrpQosCfgAppId, docsMcastCmtsReplSessEntry=docsMcastCmtsReplSessEntry, docsMcastCmtsGrpQosCfgQosCtrl=docsMcastCmtsGrpQosCfgQosCtrl, docsMcastCmtsGrpQosCfgTable=docsMcastCmtsGrpQosCfgTable, docsMcastCmtsGrpEncryptCfgId=docsMcastCmtsGrpEncryptCfgId, docsMcastCmtsGrpQosCfgRowStatus=docsMcastCmtsGrpQosCfgRowStatus, docsMcastCmtsGrpCfgTosLow=docsMcastCmtsGrpCfgTosLow, docsMcastCmtsReplSessDsid=docsMcastCmtsReplSessDsid, docsMcastCmtsGrpEncryptCfgRowStatus=docsMcastCmtsGrpEncryptCfgRowStatus, docsMcastCmtsGrpQosCfgEntry=docsMcastCmtsGrpQosCfgEntry, docsMcastMibGroups=docsMcastMibGroups, docsMcastMibObjects=docsMcastMibObjects, docsMcastDsidPhsPhsSize=docsMcastDsidPhsPhsSize, docsMcastMibConformance=docsMcastMibConformance, docsMcastMibCompliances=docsMcastMibCompliances, docsMcastCmtsReplSessSaid=docsMcastCmtsReplSessSaid, docsMcastCmtsGrpCfgTosHigh=docsMcastCmtsGrpCfgTosHigh, docsMcastCmtsGrpCfgEncryptConfigId=docsMcastCmtsGrpCfgEncryptConfigId, docsMcastCmtsGrpPhsCfgPhsVerify=docsMcastCmtsGrpPhsCfgPhsVerify, docsMcastCmtsReplSessSrcPrefix=docsMcastCmtsReplSessSrcPrefix, docsMcastDsidPhsPhsField=docsMcastDsidPhsPhsField, docsMcastCmtsGrpQosCfgAggSessLimit=docsMcastCmtsGrpQosCfgAggSessLimit, docsMcastDsidPhsEntry=docsMcastDsidPhsEntry, docsMcastDsidPhsPhsVerify=docsMcastDsidPhsPhsVerify, docsMcastCmtsReplSessGrpPrefix=docsMcastCmtsReplSessGrpPrefix, docsMcastDsidPhsPhsMask=docsMcastDsidPhsPhsMask, docsMcastMib=docsMcastMib, docsMcastCmtsGrpCfgPhsConfigId=docsMcastCmtsGrpCfgPhsConfigId, docsMcastCmtsGrpPhsCfgPhsField=docsMcastCmtsGrpPhsCfgPhsField, docsMcastDefGrpSvcClassDef=docsMcastDefGrpSvcClassDef, docsMcastCmtsGrpPhsCfgEntry=docsMcastCmtsGrpPhsCfgEntry, docsMcastCmtsGrpCfgTable=docsMcastCmtsGrpCfgTable, docsMcastCmtsGrpPhsCfgId=docsMcastCmtsGrpPhsCfgId, docsMcastCmtsGrpEncryptCfgEntry=docsMcastCmtsGrpEncryptCfgEntry, docsMcastCmtsGrpEncryptCfgCtrl=docsMcastCmtsGrpEncryptCfgCtrl, docsMcastCmtsGrpCfgTosMask=docsMcastCmtsGrpCfgTosMask, docsMcastCmtsGrpPhsCfgPhsMask=docsMcastCmtsGrpPhsCfgPhsMask, docsMcastCmtsReplSessTable=docsMcastCmtsReplSessTable, PYSNMP_MODULE_ID=docsMcastMib, docsMcastCmtsReplSessMdIfIndex=docsMcastCmtsReplSessMdIfIndex, docsMcastCmtsReplSessDcsId=docsMcastCmtsReplSessDcsId, docsMcastDsidPhsTable=docsMcastDsidPhsTable, docsMcastGroup=docsMcastGroup, docsMcastCmtsGrpEncryptCfgTable=docsMcastCmtsGrpEncryptCfgTable, docsMcastCompliance=docsMcastCompliance, docsMcastCmtsGrpCfgPrefixAddrType=docsMcastCmtsGrpCfgPrefixAddrType, docsMcastCmtsGrpCfgSrcPrefixLen=docsMcastCmtsGrpCfgSrcPrefixLen, docsMcastCmtsGrpCfgRowStatus=docsMcastCmtsGrpCfgRowStatus, docsMcastCmtsGrpQosCfgId=docsMcastCmtsGrpQosCfgId, docsMcastDefGrpSvcClass=docsMcastDefGrpSvcClass, docsMcastDsidPhsDsid=docsMcastDsidPhsDsid, docsMcastCmtsGrpCfgId=docsMcastCmtsGrpCfgId, docsMcastCmtsGrpCfgRulePriority=docsMcastCmtsGrpCfgRulePriority, docsMcastCmtsGrpPhsCfgPhsSize=docsMcastCmtsGrpPhsCfgPhsSize, docsMcastCmtsGrpCfgQosConfigId=docsMcastCmtsGrpCfgQosConfigId, docsMcastCmtsGrpCfgGrpPrefixLen=docsMcastCmtsGrpCfgGrpPrefixLen, docsMcastCmtsGrpEncryptCfgAlg=docsMcastCmtsGrpEncryptCfgAlg)
