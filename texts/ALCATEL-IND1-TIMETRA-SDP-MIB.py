#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-TIMETRA-SDP-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:12:03 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
tmnxMDASlotNum, tmnxCardSlotNum, tmnxChassisIndex = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum", "tmnxCardSlotNum", "tmnxChassisIndex")
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
timetraSRMIBModules, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
SdpBFHundredthsOfPercent, SdpBindVcType, TStpPortState, LspIdList, tmnxOldSdpBindTlsStpPortState, SdpBindTlsBpduTranslation, StpPortRole, svcId, ServObjName, svcDhcpLseStatePopulateError, custId, TlsLimitMacMoveLevel, TdmOptionsCasTrunkFraming, MvplsPruneState, tmnxServConformance, svcDhcpLseStateOldChAddr, svcDhcpProxyError, SdpId, SdpBindBandwidth, VpnId, tstpTraps, tmnxServObjs, L2RouteOrigin, BridgeId, svcDhcpLseStateNewCiAddr, ServObjDesc, StpExceptionCondition, tmnxOtherBridgeId, svcDhcpLseStateNewChAddr, svcDhcpLseStateOldCiAddr, PWTemplateId, tmnxSvcObjs, tmnxCustomerRootBridgeId, tmnxServNotifications, svcTlsMacMoveMaxRate, tmnxCustomerBridgeId, svcDhcpSubAuthError, svcTlsStpDesignatedRoot, L2ptProtocols, TdmOptionsSigPkts, svcDhcpPacketProblem, svcDhcpCoAError, ConfigStatus, tlsDhcpPacketProblem, svcVpnId, TlsLimitMacMove, svcDhcpClientLease, StpProtocol = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "SdpBFHundredthsOfPercent", "SdpBindVcType", "TStpPortState", "LspIdList", "tmnxOldSdpBindTlsStpPortState", "SdpBindTlsBpduTranslation", "StpPortRole", "svcId", "ServObjName", "svcDhcpLseStatePopulateError", "custId", "TlsLimitMacMoveLevel", "TdmOptionsCasTrunkFraming", "MvplsPruneState", "tmnxServConformance", "svcDhcpLseStateOldChAddr", "svcDhcpProxyError", "SdpId", "SdpBindBandwidth", "VpnId", "tstpTraps", "tmnxServObjs", "L2RouteOrigin", "BridgeId", "svcDhcpLseStateNewCiAddr", "ServObjDesc", "StpExceptionCondition", "tmnxOtherBridgeId", "svcDhcpLseStateNewChAddr", "svcDhcpLseStateOldCiAddr", "PWTemplateId", "tmnxSvcObjs", "tmnxCustomerRootBridgeId", "tmnxServNotifications", "svcTlsMacMoveMaxRate", "tmnxCustomerBridgeId", "svcDhcpSubAuthError", "svcTlsStpDesignatedRoot", "L2ptProtocols", "TdmOptionsSigPkts", "svcDhcpPacketProblem", "svcDhcpCoAError", "ConfigStatus", "tlsDhcpPacketProblem", "svcVpnId", "TlsLimitMacMove", "svcDhcpClientLease", "StpProtocol")
TNamedItem, TItemDescription, TmnxOperState, SdpBindId, TNamedItemOrEmpty, TmnxVPNRouteDistinguisher, ServiceAdminStatus, TmnxVRtrMplsLspID, TmnxServId, TPolicyStatementNameOrEmpty, TmnxIgmpVersion, TmnxEnabledDisabled, TmnxCustId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TNamedItem", "TItemDescription", "TmnxOperState", "SdpBindId", "TNamedItemOrEmpty", "TmnxVPNRouteDistinguisher", "ServiceAdminStatus", "TmnxVRtrMplsLspID", "TmnxServId", "TPolicyStatementNameOrEmpty", "TmnxIgmpVersion", "TmnxEnabledDisabled", "TmnxCustId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, iso, NotificationType, Integer32, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "iso", "NotificationType", "Integer32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Bits")
TimeStamp, DisplayString, TextualConvention, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "MacAddress", "TruthValue", "RowStatus")
timetraServicesSdpMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 56))
timetraServicesSdpMIBModule.setRevisions(('1907-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setRevisionsDescriptions(('Rev 1.0                01 Oct 2007 00:00\n                     1.0 release of the TIMETRA-SDP-MIB from TIMETRA-SERV-MIB.',))
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setLastUpdated('0710010000Z')
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setContactInfo('Alcatel 7x50 Support\n         Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setDescription("This  document  is the SNMP MIB module to manage and provision\n        the various services of the Alcatel 7x50 SR system.\n\n        Copyright  2003-2008 Alcatel-Lucent. All rights reserved. Reproduction\n        of  this  document  is  authorized  on  the  condition that the\n        foregoing copyright notice is included.\n\n        This   SNMP   MIB  module  (Specification)  embodies  Alcatel's\n        proprietary  intellectual  property.  Alcatel retains all title\n        and ownership in the Specification, including any revisions.\n\n        Alcatel  grants  all interested parties a non-exclusive license\n        to  use and distribute an unmodified copy of this Specification\n        in  connection with management of Alcatel products, and without\n        fee,  provided  this copyright notice and license appear on all\n        copies.\n\n        This  Specification  is  supplied `as is', and Alcatel makes no\n        warranty,  either express or implied, as to the use, operation,\n        condition, or performance of the Specification.")
tmnxSdpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4))
tmnxSdpNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100))
tmnxSdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4))
sdpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4))
sdpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0))
sdpNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNumEntries.setStatus('current')
if mibBuilder.loadTexts: sdpNumEntries.setDescription('The current number of SDPs configured in this\n                     device.')
sdpNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 2), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNextFreeId.setStatus('current')
if mibBuilder.loadTexts: sdpNextFreeId.setDescription('The next available value for sdpId.')
sdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3), )
if mibBuilder.loadTexts: sdpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sdpInfoTable.setDescription('A table that contains SDP information.')
sdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sdpInfoEntry.setDescription('Information about a specific SDP.')
sdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 1), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpId.setStatus('current')
if mibBuilder.loadTexts: sdpId.setDescription('SDP identifier.')
sdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'. To delete an entry\n                     from this table, the corresponding SDP must be\n                     administratively down, not bound to any service,\n                     and not in use as a mirror destination.")
sdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDelivery.setStatus('current')
if mibBuilder.loadTexts: sdpDelivery.setDescription("This object specifies the type of delivery used\n                     by this SDP: e.g. GRE or MPLS. The value of this\n                     object must be specified when the row is created\n                     and cannot be changed while the row status is\n                     'active'.")
sdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFarEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: sdpFarEndIpAddress.setDescription("This object specifies the IP address of the\n                     remote end of the GRE or MPLS tunnel defined\n                     by this SDP. The value of this object must\n                     be set for the row to become 'active', and\n                     can only be changed while the admin status\n                     of the SDP is 'down'.")
sdpLspList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 5), LspIdList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLspList.setStatus('current')
if mibBuilder.loadTexts: sdpLspList.setDescription("When the SDP delivery specified by sdpDelivery\n                     is 'mpls', this object specifies the list of\n                     LSPs used to reach the far-end ESR device.\n                     All the LSPs in this list must terminate at the\n                     IP address specified by sdpFarEndIpAddress. This\n                     object is otherwise insignificant and should\n                     contain a value of 0.\n\n                     When this list has more than one element, the\n                     Alcatel 7x50 SR router will use all of the LSPs for\n                     load balancing purposes. Each LSP ID in the list\n                     corresponds to the vRtrMplsLspIndex of the given\n                     MPLS LSP.")
sdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDescription.setStatus('current')
if mibBuilder.loadTexts: sdpDescription.setDescription('Generic information about this SDP.')
sdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2))).clone('tldp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLabelSignaling.setStatus('current')
if mibBuilder.loadTexts: sdpLabelSignaling.setDescription("This object specifies the signaling protocol\n                     used to obtain the ingress and egress labels\n                     used in frames transmitted and received on\n                     this SDP. When the value of this object is\n                     'none' then the labels are manually assigned\n                     at the time the SDP is bound to a service. The\n                     value of this object can only be changed while\n                     the admin status of the SDP is 'down'.")
sdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpAdminStatus.setDescription('The desired state of this SDP.')
sdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("notAlive", 2), ("notReady", 3), ("invalidEgressInterface", 4), ("transportTunnelDown", 5), ("down", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: sdpOperStatus.setDescription("The operating state of this SDP. The value\n                     'notAlive' is valid only when keep-alive is\n                     enabled, and it means that the keep-alive\n                     operating status is not alive. The value\n                     'notReady' is valid only when this SDP uses a\n                     label signaling protocol (e.g. TLDP) and it means\n                     that the signaling session with the far-end peer\n                     has not been established. The value\n                     'invalidEgressInterface' indicates that the\n                     IOM's have detected that the egress interface\n                     towards the far-end device is not a network\n                     port.")
sdpAdminPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 9194), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminPathMtu.setStatus('current')
if mibBuilder.loadTexts: sdpAdminPathMtu.setDescription('This object specifies the desired largest service\n                     frame size (in octets) that can be transmitted\n                     through this SDP to the far-end ESR, without\n                     requiring the packet to be fragmented. The default\n                     value of zero indicates that the path MTU should\n                     be computed dynamically from the corresponding\n                     MTU of the tunnel.')
sdpOperPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperPathMtu.setStatus('current')
if mibBuilder.loadTexts: sdpOperPathMtu.setDescription('This object specifies the actual largest service\n                     frame size (in octets) that can be transmitted\n                     through this SDP to the far-end ESR, without\n                     requiring the packet to be fragmented. In order\n                     to be able to bind this SDP to a given service,\n                     the value of this object must be equal to or\n                     larger than the MTU of the service, as defined\n                     by its svcMtu.')
sdpKeepAliveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveAdminStatus.setDescription('This object is used to enable or disable the\n                     keep-alive protocol used to determine the\n                     operating status of this SDP.')
sdpKeepAliveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alive", 1), ("noResponse", 2), ("senderIdInvalid", 3), ("responderIdError", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveOperStatus.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveOperStatus.setDescription("The current status of the keep-alive protocol.\n                     The value 'alive' indicates that the far-end\n                     ESR is replying the SDP Echo Requests messages\n                     sent by this device indicating no error condition.\n                     The value 'noResponse' indicates that the number\n                     of consecutive SDP Echo Request messages unack-\n                     nowledged by the far-end ESR exceeded the limit\n                     defined by sdpKeepAliveMaxDropCount. The values\n                     'senderIdInvalid' and 'responderIdError' are\n                     two error conditions detected by the far-end ESR.\n                     The value 'disabled' indicates that the keep-alive\n                     protocol is not enabled.")
sdpKeepAliveHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloTime.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveHelloTime.setDescription('This object specifies how often the SDP Echo\n                     Request messages are transmitted on this SDP.')
sdpKeepAliveMaxDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveMaxDropCount.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveMaxDropCount.setDescription('This object specifies the maximum number of\n                     consecutive SDP Echo Request messages that can\n                     be unacknowledged before the keep-alive\n                     protocol reports a fault.')
sdpKeepAliveHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveHoldDownTime.setDescription("This object specifies the amount of time to\n                     wait before the keep-alive operating status\n                     is eligible to enter the 'alive' state.")
sdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sdpLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this SDP.')
sdpKeepAliveHelloMessageLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(40, 9198), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloMessageLength.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveHelloMessageLength.setDescription("This object specifies the length of the\n                     SDP Echo Request messages transmitted on\n                     this SDP. The default value of zero\n                     indicates that the message length should\n                     be equal to the SDP's operating path MTU,\n                     as specified by sdpOperPathMtu. When the\n                     default value is overridden, the message\n                     length is sdpKeepAliveHelloMessageLength.")
sdpKeepAliveNumHelloRequestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumHelloRequestMessages.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveNumHelloRequestMessages.setDescription('The number of SDP Echo Request messages\n                     transmitted since the keep-alive was\n                     administratively enabled or the counter\n                     was cleared.')
sdpKeepAliveNumHelloResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumHelloResponseMessages.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveNumHelloResponseMessages.setDescription('The number of SDP Echo Response messages\n                     received since the keep-alive was\n                     administratively enabled or the counter\n                     was cleared.')
sdpKeepAliveNumLateHelloResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumLateHelloResponseMessages.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveNumLateHelloResponseMessages.setDescription('The number of SDP Echo Response messages\n                     received after the corresponding Request\n                     timeout timer expired.')
sdpKeepAliveHelloRequestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: sdpKeepAliveHelloRequestTimeout.setDescription('The number of seconds to wait for an SDP\n                     Echo Response message before declaring\n                     a timeout.')
sdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLdpEnabled.setStatus('current')
if mibBuilder.loadTexts: sdpLdpEnabled.setDescription("When the value of this object is 'true'\n                     the transport LSP's are signalled by LDP,\n                     as opposed to being provisioned static or\n                     RSVP-signalled LSP's. This object applies\n                     only to MPLS SDP's.")
sdpVlanVcEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpVlanVcEtype.setStatus('current')
if mibBuilder.loadTexts: sdpVlanVcEtype.setDescription('This object specifies the Ethertype used in\n                     frames sent out this SDP, when the VC type\n                     is vlan.')
sdpAdvertisedVllMtuOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdvertisedVllMtuOverride.setStatus('current')
if mibBuilder.loadTexts: sdpAdvertisedVllMtuOverride.setDescription("When the value of this object is 'true'\n                     the advertised MTU of a VLL spoke SDP bind\n                     includes the 14-byte L2 header, so that it is\n                     backward compatible with pre-2.0 software.")
sdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 26), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("keepaliveFailure", 3), ("invalidEgressInterface", 4), ("noSystemIpAddress", 5), ("transportTunnelUnstable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperFlags.setStatus('current')
if mibBuilder.loadTexts: sdpOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SDP.')
sdpLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: sdpLastStatusChange.setDescription('The value of sysUpTime at the time of the\n                     most recent operating status change to this\n                     SDP.')
sdpMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 28), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpMvplsMgmtService.setStatus('current')
if mibBuilder.loadTexts: sdpMvplsMgmtService.setDescription('The value of sdpMvplsMgmtService indicates\n                     the service Id of the service where the STP instance\n                     is running that is managing this SDP. This object is\n                     only valid if sdpMvplsMgmtService is different from\n                     0.')
sdpMvplsMgmtSdpBndId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 29), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpMvplsMgmtSdpBndId.setStatus('current')
if mibBuilder.loadTexts: sdpMvplsMgmtSdpBndId.setDescription('The value of sdpMvplsMgmtSdpBndId indicates\n                     which SDP bind in the mVPLS instance specified in\n                     sdpMvplsMgmtService is controlling this SDP. This\n                     object is only valid if sdpMvplsMgmtService is\n                     different from 0.')
sdpCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpCollectAcctStats.setStatus('current')
if mibBuilder.loadTexts: sdpCollectAcctStats.setDescription("The value of the object sdpCollectAcctStats specifies\n                     whether the agent collects accounting statistics for this\n                     SDP. When the value is 'true' the agent\n                     collects accounting statistics on this SDP.")
sdpAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAccountingPolicyId.setStatus('current')
if mibBuilder.loadTexts: sdpAccountingPolicyId.setDescription('The value of sdpAccountingPolicyId specifies the\n                     policy to use to collect accounting statistics on\n                     this SDP. The value zero indicates that the\n                     agent should use the default accounting policy,\n                     if one exists.')
sdpClassFwdingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingEnabled.setStatus('current')
if mibBuilder.loadTexts: sdpClassFwdingEnabled.setDescription("The value of sdpClassFwdingEnabled specifies the\n                     admin state of class-based forwarding on this SDP. When\n                     the value is 'true', class-based forwarding is enabled.")
sdpClassFwdingDefaultLsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 33), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingDefaultLsp.setStatus('current')
if mibBuilder.loadTexts: sdpClassFwdingDefaultLsp.setDescription('The value of sdpClassFwdingDefaultLsp specifies the\n                     LSP ID that is used as a default when class-based\n                     forwarding is enabled on this SDP. This object\n                     must be set when enabling class-based forwarding.')
sdpClassFwdingMcLsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 34), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingMcLsp.setStatus('current')
if mibBuilder.loadTexts: sdpClassFwdingMcLsp.setDescription('The value of sdpClassFwdingMcLsp specifies the LSP ID that\n                     all multicast traffic will be forwarded on when class-based\n                     forwarding is enabled on this SDP. When this object has its\n                     default value, multicast traffic will be forwarded \n                     on an LSP according to its forwarding class mapping.')
sdpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpMetric.setStatus('current')
if mibBuilder.loadTexts: sdpMetric.setDescription('The value of sdpMetric specifies the metric to be used \n                     within the Tunnel Table Manager for decision making \n                     purposes. When multiple SDPs going to the same destination \n                     exist, this value is used as a tie-breaker by Tunnel Table \n                     Manager users like MP-BGP to select route with lower \n                     value.')
sdpAutoSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoSdp.setStatus('current')
if mibBuilder.loadTexts: sdpAutoSdp.setDescription('The value of sdpAutoSdp indicates whether this is an \n                     Auto generated SDP from RADIUS discovery or BGP\n                     auto-discovery.')
sdpSnmpAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpSnmpAllowed.setStatus('current')
if mibBuilder.loadTexts: sdpSnmpAllowed.setDescription('The value of sdpSnmpAllowed indicates if SNMP sets \n                      are allowed on this SDP.')
sdpPBBEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(35047)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpPBBEtype.setStatus('current')
if mibBuilder.loadTexts: sdpPBBEtype.setDescription("This object specifies the Ethertype used in frames sent\n                     out on this SDP when sdpBindVcType is 'vlan' for\n                     Provider Backbone Bridging frames.")
sdpBandwidthBookingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBandwidthBookingFactor.setStatus('current')
if mibBuilder.loadTexts: sdpBandwidthBookingFactor.setDescription('sdpBandwidthBookingFactor is used to calculate the max\n                     SDP available bandwidth.  The value of\n                     sdpBandwidthBookingFactor specifies the percentage of the\n                     SDP max available bandwidth for VLL call admission. When\n                     the value of sdpBandwidthBookingFactor is set to zero (0),\n                     no new VLL spoke-sdp bindings with non-zero bandwidth are\n                     permitted with this SDP.  Overbooking, >100% is allowed.')
sdpOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 40), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpOperBandwidth.setDescription('The value of sdpOperBandwidth indicates the operational \n                      Bandwidth in kilo-bits per seconds (Kbps) available for \n                      this SDP. The value sdpOperBandwidth is determined by the \n                      sum of the bandwidth of all the RSVP LSPs used by the \n                      SDP.')
sdpAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 41), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpAvailableBandwidth.setDescription('The value of sdpAvailableBandwidth indicates the Bandwidth\n                      that is still free for booking by the SDP bindings on the\n                      SDP.')
sdpMaxBookableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 42), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpMaxBookableBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpMaxBookableBandwidth.setDescription('The value of sdpMaxBookableBandwidth indicates the max \n                      Bandwidth that the SDP has for booking by the SDP \n                      bindings. The value of sdpMaxBookableBandwidth is \n                      calculated as follow:\n  \n                      sdpMaxBookableBandwidth = sdpOperBandwidth * \n                                                sdpBandwidthBookingFactor\n                      ')
sdpBookedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 43), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpBookedBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpBookedBandwidth.setDescription('The value of sdpBookedBandwidth indicates the \n                      SDP Bandwidth that has been booked by the SDP \n                      bindings.')
sdpCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 44), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpCreationOrigin.setStatus('current')
if mibBuilder.loadTexts: sdpCreationOrigin.setDescription('The value of sdpCreationOrigin indicates the protocol or \n                     mechanism which created this SDP.')
sdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4), )
if mibBuilder.loadTexts: sdpBindTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTable.setDescription('A table that contains SDP binding information.')
sdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindEntry.setDescription('Information about a specific SDP binding.')
sdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 1), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindId.setStatus('current')
if mibBuilder.loadTexts: sdpBindId.setDescription('SDP Binding identifier.')
sdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpBindRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'.")
sdpBindAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2048, 18431), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminIngressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpBindAdminIngressLabel.setDescription('The static MPLS VC label used by the far-end device\n                     to send packets to this device in this service via\n                     this SDP. The value of sdpBindAdminIngressLabel is\n                     1 when it is used by a mirror service. All mirror SDPs\n                     use this label to avoid the unnecessary use of\n                     additional labels.')
sdpBindAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminEgressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpBindAdminEgressLabel.setDescription('The static MPLS VC label used by this device to send\n                     packets to the far-end device in this service via\n                     this SDP.')
sdpBindOperIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperIngressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperIngressLabel.setDescription("The MPLS label used by the far-end device to send\n                     packets to this device in this service via this SDP.\n                     This label is either sdpBindAdminIngressLabel, if\n                     not null, or the one obtained via the SDP's signaling\n                     protocol.")
sdpBindOperEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperEgressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperEgressLabel.setDescription("The MPLS label used by this device to send packets\n                     to the far-end device in this service via this SDP.\n                     This label is either sdpBindAdminEgressLabel, if\n                     not null, or the one obtained via the SDP's signaling\n                     protocol.")
sdpBindAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 7), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpBindAdminStatus.setDescription('The desired state of this Service-SDP binding.')
sdpBindOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("noEgressLabel", 2), ("noIngressLabel", 3), ("noLabels", 4), ("down", 5), ("svcMtuMismatch", 6), ("sdpPathMtuTooSmall", 7), ("sdpNotReady", 8), ("sdpDown", 9), ("sapDown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperStatus.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperStatus.setDescription("The value of sdpBindOperStatus indicates the operating status of\n         this Service-SDP binding.\n            'up'               The Service-SDP binding is operational.\n\n            'noEgressLabel'    The ingress label is available but the\n                               egress one is missing.\n\n            'noIngressLabel'   The egress label is available but the\n                               ingress one is not.\n\n            'noLabels'         Both the ingress and the egress labels\n                               are missing.\n\n            'down'             The binding is administratively down.\n\n            'svcMtuMismatch'   Both labels are available, but a service\n                               MTU mismatch was detected between the local\n                               and the far-end devices.\n\n            'sdpPathMtuTooSmall' The operating path MTU of the corresponding\n                                 SDP is smaller than the service MTU.\n\n            'sdpNotReady'      The SDP's signaling session is down.\n\n            'sdpDown'          The SDP is not operationally up.\n\n            'sapDown'          The SAP associated with the service is down.")
sdpBindLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sdpBindLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this Service-SDP binding.')
sdpBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spoke", 1), ("mesh", 2))).clone('mesh')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindType.setStatus('current')
if mibBuilder.loadTexts: sdpBindType.setDescription("This object indicates whether this Service SDP\n                     binding is a spoke or a mesh.  The value of this\n                     object must be specified when the row is created\n                     and cannot be changed while the row status is\n                     'active'.")
sdpBindIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 11), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindIngressMacFilterId.setDescription('The row index in the tMacFilterTable\n                     corresponding to this ingress filter,\n                     or zero if no filter is specified.')
sdpBindIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 12), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindIngressIpFilterId.setDescription('The row index in the tIPFilterTable\n                     corresponding to this ingress filter,\n                     or zero if no filter is specified.')
sdpBindEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 13), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindEgressMacFilterId.setDescription('The row index in the tMacFilterTable\n                     corresponding to this egress filter,\n                     or zero if no filter is specified.')
sdpBindEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 14), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindEgressIpFilterId.setDescription('The row index in the tIPFilterTable\n                     corresponding to this egress filter,\n                     or zero if no filter is specified.')
sdpBindVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 15), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindVpnId.setStatus('current')
if mibBuilder.loadTexts: sdpBindVpnId.setDescription('The VPN ID of the associated service.')
sdpBindCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 16), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCustId.setStatus('current')
if mibBuilder.loadTexts: sdpBindCustId.setDescription('The Customer ID of the associated service.')
sdpBindVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 17), SdpBindVcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindVcType.setStatus('current')
if mibBuilder.loadTexts: sdpBindVcType.setDescription("The value of sdpBindVcType is an enumerated integer that specifies\n         the type of virtual circuit (VC) associated with the SDP binding.\n\n         The value 'vpls' is no longer supported.")
sdpBindVlanVcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindVlanVcTag.setStatus('current')
if mibBuilder.loadTexts: sdpBindVlanVcTag.setDescription('')
sdpBindSplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 19), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindSplitHorizonGrp.setStatus('current')
if mibBuilder.loadTexts: sdpBindSplitHorizonGrp.setDescription('This value of the object sdpBindSplitHorizonGrp specifies\n                     the name of the split-horizon group where the spoke SDP\n                     Bind belongs to. This object can be set only at the time\n                     the row is created. Per default a spoke SDP Bind does not\n                     belong to any split-horizon group. The name specified must\n                     correspond to an existing split-horizon group in the TLS\n                     service where this spoke SDP Bind is defined.')
sdpBindOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 20), Bits().clone(namedValues=NamedValues(("sdpBindAdminDown", 0), ("svcAdminDown", 1), ("sapOperDown", 2), ("sdpOperDown", 3), ("sdpPathMtuTooSmall", 4), ("noIngressVcLabel", 5), ("noEgressVcLabel", 6), ("svcMtuMismatch", 7), ("vcTypeMismatch", 8), ("relearnLimitExceeded", 9), ("iesIfAdminDown", 10), ("releasedIngressVcLabel", 11), ("labelsExhausted", 12), ("svcParamMismatch", 13), ("insufficientBandwidth", 14), ("pwPeerFaultStatusBits", 15), ("meshSdpDown", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperFlags.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SDP Bind.')
sdpBindLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: sdpBindLastStatusChange.setDescription('The value of the object sdpBindLastStatusChange specifies\n                     the value of sysUpTime at the time of the most recent\n                     operating status change to this SDP Bind.')
sdpBindIesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIesIfIndex.setStatus('current')
if mibBuilder.loadTexts: sdpBindIesIfIndex.setDescription("When this SDP Bind is defined on an IES service\n                     and the value of sdpBindType is 'spoke', this\n                     object specifies the index of the associated IES\n                     interface. The value of this object can be set\n                     only when the row is created and cannot be changed\n                     while the row status is 'active'. This object is\n                     otherwise not significant and should have\n                     the value zero.")
sdpBindMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 23), TmnxEnabledDisabled()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindMacPinning.setStatus('current')
if mibBuilder.loadTexts: sdpBindMacPinning.setDescription("The value of the object sdpBindMacPinning specifies\n                     whether or not MAC address pinning is active on this SDP\n                     bind (mesh or spoke). Setting the value to enable disables\n                     re-learning of MAC addresses on other SAPs or SDPs\n                     within the same VPLS; the MAC address will hence\n                     remain attached to the SDP Bind for the duration of\n                     its age-timer. This object has effect only for MAC\n                     addresses learned via the normal MAC learning\n                     process, and not for entries learned via DHCP. The\n                     value will be set by default to disabled. However for\n                     a spoke SDP that belongs to a residential SHG, the\n                     value is set to enabled by the system, and cannot be\n                     altered by the operator. This object applies to spoke-SDP\n                     associated with the service with svcType set to \n                     'tls'.")
sdpBindIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 24), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindIngressIpv6FilterId.setDescription('The value of the object sdpBindIngressIpv6FilterId\n                     specifies the row index in the tIPv6FilterTable\n                     corresponding to this ingress ipv6 filter,\n                     or zero if no ipv6 filter is specified.')
sdpBindEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 25), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sdpBindEgressIpv6FilterId.setDescription('The value of the object sdpBindEgressIpv6FilterId\n                     specifies the row index in the tIPv6FilterTable\n                     corresponding to this egress ipv6 filter,\n                     or zero if no ipv6 filter is specified.')
sdpBindCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindCollectAcctStats.setStatus('current')
if mibBuilder.loadTexts: sdpBindCollectAcctStats.setDescription("The value of the object sdpBindCollectAcctStats specifies\n                     whether the agent collects accounting statistics for this\n                     SDP bind. When the value is 'true' the agent\n                     collects accounting statistics on this SDP bind.")
sdpBindAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 27), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAccountingPolicyId.setStatus('current')
if mibBuilder.loadTexts: sdpBindAccountingPolicyId.setDescription('The value of sdpBindAccountingPolicyId specifies the\n                     policy to use to collect accounting statistics on\n                     this SDP bind. The value zero indicates that the\n                     agent should use the default accounting policy,\n                     if one exists.')
sdpBindPwPeerStatusBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 28), Bits().clone(namedValues=NamedValues(("pwNotForwarding", 0), ("lacIngressFault", 1), ("lacEgresssFault", 2), ("psnIngressFault", 3), ("psnEgressFault", 4), ("pwFwdingStandby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwPeerStatusBits.setStatus('current')
if mibBuilder.loadTexts: sdpBindPwPeerStatusBits.setDescription('sdpBindPwPeerStatusBits indicates the bits set by the LDP\n                     peer when there is a fault on its side of the pseudowire.\n                     LAC failures occur on the SAP that has been configured on\n                     the PIPE service, PSN bits are set by SDP-binding failures\n                     on the PIPE service.  The pwNotForwarding bit is set when\n                     none of the above failures apply, such as an MTU mismatch\n                     failure.  This value is only applicable if the peer is\n                     using the pseudowire status signalling method to indicate\n                     faults.')
sdpBindPeerVccvCvBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 29), Bits().clone(namedValues=NamedValues(("icmpPing", 0), ("lspPing", 1), ("bfdFaultDetection", 2), ("bfdFaultDetectionAndSignalling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPeerVccvCvBits.setStatus('current')
if mibBuilder.loadTexts: sdpBindPeerVccvCvBits.setDescription('sdpBindPeerVccvCvBits indicates the CV type bits set by the\n                     LDP peer if it supports VCCV (Virtual Circuit Connection\n                     Verification) on a pseudowire.  If the peer does not send\n                     VCCV information, or does not support it, the bits will\n                     be set to 0.')
sdpBindPeerVccvCcBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 30), Bits().clone(namedValues=NamedValues(("pwe3ControlWord", 0), ("mplsRouterAlertLabel", 1), ("mplsPwDemultiplexorLabel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPeerVccvCcBits.setStatus('current')
if mibBuilder.loadTexts: sdpBindPeerVccvCcBits.setDescription('sdpBindPeerVccvCcBits indicates the CC type bits set by the\n                     LDP peer if it supports VCCV (Virtual Circuit Connection\n                     Verification) on a pseudowire.  If the peer does not send\n                     VCCV information, or does not support it, the bits will\n                     all be 0.')
sdpBindControlWordBit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 31), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindControlWordBit.setStatus('current')
if mibBuilder.loadTexts: sdpBindControlWordBit.setDescription("sdpBindControlWordBit specifies whether the use of the\n                     'ControlWord' is preferred or not. The value of \n                     sdpBindControlWordBit is exchanged with LDP peer during\n                     pseudowire negotiation time. The default value is\n                     determined by sdpBindVcType. sdpBindVcType of atmSdu and \n                     frDlci must have default value of 'true'. Other values of \n                     sdpBindVcType must have default value of 'false'.")
sdpBindOperControlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperControlWord.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperControlWord.setDescription("sdpBindOperControlWord indicates whether the 'ControlWord'\n                     is used or not. The value of sdpBindOperControlWord is \n                     negotiated with the LDP peer.  When both the local and the\n                     peer prefer the use of the 'ControlWord', sdpBindOperControlWord\n                     has the value of 'true'.")
sdpBindEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 33), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEndPoint.setStatus('current')
if mibBuilder.loadTexts: sdpBindEndPoint.setDescription('sdpBindEndPoint specifies the service endpoint to which\n                     this SDP bind is attached. The svcId of the SDP bind MUST\n                     match the svcId of the service endpoint.')
sdpBindEndPointPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEndPointPrecedence.setStatus('current')
if mibBuilder.loadTexts: sdpBindEndPointPrecedence.setDescription('sdpBindEndPointPrecedence specifies the precedence of this\n                     SDP bind when there are multiple SDP binds attached to one\n                     service endpoint. The value 0 can only be assigned to one\n                     SDP bind, making it the primary SDP bind. When an SDP bind\n                     goes down, the next highest precedence SDP bind begins \n                     forwarding traffic.')
sdpBindIsICB = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIsICB.setStatus('current')
if mibBuilder.loadTexts: sdpBindIsICB.setDescription('sdpBindIsICB specifies whether this sdpBind is an \n                     inter-chassis backup SDP bind.')
sdpBindPwFaultInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 36), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwFaultInetAddressType.setStatus('current')
if mibBuilder.loadTexts: sdpBindPwFaultInetAddressType.setDescription('The value of the object sdpBindPwFaultInetAddressType\n                     indicates the address type of sdpBindPwFaultInetAddress.')
sdpBindPwFaultInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 37), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwFaultInetAddress.setStatus('current')
if mibBuilder.loadTexts: sdpBindPwFaultInetAddress.setDescription('The value of sdpBindPwFaultInetAddress indicates the IP\n                     address that was included in the pseudowire status \n                     message sent by the LDP peer.  This value is only \n                     applicable if the peer is using the pseudowire status \n                     signalling method to indicate faults.')
sdpBindClassFwdingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 38), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindClassFwdingOperState.setStatus('current')
if mibBuilder.loadTexts: sdpBindClassFwdingOperState.setDescription("The value of sdpBindClassFwdingOperState indicates the\n                     operational state of forwarding-class based forwarding\n                     on this sdpBind. \n\n                     When the SDP this sdpBind is bound to has \n                     sdpClassFwdingEnabled set to 'false', the value of \n                     sdpBindClassFwdingOperState is 'outOfService'.\n\n                     When the SDP this sdpBind is bound to has \n                     sdpClassFwdingEnabled set to 'true' and the svcType\n                     of the service this sdpBind is defined on is 'tls',\n                     'vprn', or 'ies', the value of \n                     sdpBindClassFwdingOperState is 'inService'. If the\n                     service has svcVcSwitching set to 'true', the value\n                     of sdpBindClassFwdingOperState is 'inService'\n\n                     When the SDP this sdpBind is bound to has \n                     sdpClassFwdingEnabled set to 'true' and the svcType\n                     of the service this sdpBind is defined on is 'epipe',\n                     'apipe', 'fpipe', or 'ipipe' with no SAP \n                     defined on the service, the value of \n                     sdpBindClassFwdingOperState is 'unknown'. If the \n                     service has a SAP with a NULL \n                     sapIngressSharedQueuePolicy, the value of \n                     sdpBindClassFwdingOperState is 'outOfService'. If the\n                     service has a SAP with a non-NULL \n                     sapIngressSharedQueuePolicy, the value of \n                     sdpBindClassFwdingOperState is 'inService'.")
sdpBindForceVlanVcForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 39), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindForceVlanVcForwarding.setStatus('current')
if mibBuilder.loadTexts: sdpBindForceVlanVcForwarding.setDescription("The value of sdpBindForceVlanVcForwarding specifies whether or not\n        vc-vlan-type forwarding is forced in the data-path for the sdp which\n        have sdpBindVcType set to 'ether'.  When set to 'true'\n        vc-vlan-type forwarding is forced.\n\n        An 'inconsistentValue' error is returned when an attempt is made to set\n        the value of sdpBindForceVlanVcForwarding to 'true' and sdpBindVcType is\n        not set to 'ether'.")
sdpBindAdminBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 40), SdpBindBandwidth()).setUnits('kilo-bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpBindAdminBandwidth.setDescription('The value of the object sdpBindAdminBandwidth specifies the\n                     bandwidth that needs to be reserved for this SDP binding in\n                     kilo-bits per second. The SdpBindBandwidth object only applies \n                     to the SDP bindings under the epipe(1), apipe(7), fpipe(8), \n                     ipipe(9) and cpipe(10) services.')
sdpBindOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 41), SdpBindBandwidth()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpBindOperBandwidth.setDescription("The value of the object sdpBindOperBandwidth indicates the\n                     bandwidth that has been reserved for this SDP binding in \n                     kilo-bits per second. The value 0 indicates that SDP doesn't \n                     have bandwidth to satisfy the bandwidth requirement of this \n                     SDP binding. The sdpBindOperBandwidth object only applies \n                     to the SDP bindings under the epipe(1), apipe(7), fpipe(8), \n                     ipipe(9) and cpipe(10) services.")
sdpBindBaseStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5), )
if mibBuilder.loadTexts: sdpBindBaseStatsTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsTable.setDescription('A table that contains basic SDP Binding\n                     statistics.')
sdpBindBaseStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindBaseStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsEntry.setDescription('Basic statistics about a specific SDP\n                     Binding.')
sdpBindBaseStatsIngressForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngressForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsIngressForwardedPackets.setDescription('')
sdpBindBaseStatsIngressDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngressDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsIngressDroppedPackets.setDescription('')
sdpBindBaseStatsEgressForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedPackets.setDescription('')
sdpBindBaseStatsEgressForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedOctets.setDescription('')
sdpBindBaseStatsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsCustId.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsCustId.setDescription('The Customer ID of the associated service.')
sdpBindBaseStatsIngFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngFwdOctets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsIngFwdOctets.setDescription('')
sdpBindBaseStatsIngDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngDropOctets.setStatus('current')
if mibBuilder.loadTexts: sdpBindBaseStatsIngDropOctets.setDescription('')
sdpBindTlsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6), )
if mibBuilder.loadTexts: sdpBindTlsTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsTable.setDescription('A table that contains TLS spoke SDP Bind\n                     information.')
sdpBindTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsEntry.setDescription('TLS specific information about an SDP Bind.')
sdpBindTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpAdminStatus.setDescription("The value of the object sdpBindTlsStpAdminStatus specifies\n                     whether this SDP Bind participates in the TLS's Spanning\n                     Tree Protocol.")
sdpBindTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPriority.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpPriority.setDescription('The value of the object sdpBindTlsStpPriority specifies\n                     the value of the port priority field which is contained\n                     in the most significant 4 bits of the 16-bit Port ID\n                     associated with this SDP Bind. As only the most\n                     significant 4 bits of the value are used, the\n                     actual value of this object is limited to\n                     multiples of 16: e.g. the agent rounds down\n                     the value to one of: 0, 16, 32, .. , 224, 240.')
sdpBindTlsStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPortNum.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpPortNum.setDescription('The value of the object sdpBindTlsStpPortNum specifies\n                     the value of the port number field which is contained in\n                     the least significant 12 bits of the 16-bit Port ID\n                     associated with this SDP Bind.\n                     Values in the range 2048..4094 are automatically\n                     assigned by the agent when the SDP Bind is created or\n                     when the value of this object is set to zero via\n                     management. Values in the range 1..2047 can be set\n                     via management, to allow this object to have a\n                     deterministic value across system reboots.')
sdpBindTlsStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPathCost.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpPathCost.setDescription('The value of the object sdpBindTlsStpPathCost specifies\n                     the contribution of this port to the path cost of paths\n                     towards the spanning tree root which include this port.')
sdpBindTlsStpRapidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpRapidStart.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpRapidStart.setDescription("The value of the object sdpBindTlsStpRapidStart\n                     specifies whether Rapid Start is enabled on this SDP Bind.\n                     When the value is 'enabled' the Spanning Tree Protocol\n                     state transitions on this SDP Bind are driven by the value\n                     of the 'HelloTime', instead of the value of 'ForwardDelay',\n                     thus allowing a faster transition into the forwarding\n                     state.")
sdpBindTlsStpBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpBpduEncap.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpBpduEncap.setDescription('The value of the object sdpBindTlsStpBpduEncap\n                     specifies the type of encapsulation used on BPDUs sent out\n                     and received on this SDP Bind.')
sdpBindTlsStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 7), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpPortState.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpPortState.setDescription("The value of the object sdpBindTlsStpPortState indicates\n                     the port's current state as defined by application of the\n                     Spanning Tree Protocol. This state controls what action a\n                     port takes on reception of a frame. If the bridge has\n                     detected a port that is malfunctioning it will\n                     place that port into the 'broken' state. All possible\n                     states are: learning, forwarding, broken, and discarding.")
sdpBindTlsStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedBridge.setDescription("The value of the object sdpBindTlsStpDesignatedBridge\n                     indicates the Bridge Identifier of the bridge which this\n                     port considers to be the Designated Bridge for this port's\n                     segment.")
sdpBindTlsStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedPort.setDescription("The value of the object sdpBindTlsStpDesignatedPort\n                     indicates the Port Identifier of the port on the\n                     Designated Bridge for this port's segment.")
sdpBindTlsStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpForwardTransitions.setDescription('The value of the object sdpBindTlsStpForwardTransitions\n                     indicates the number of times this port has transitioned\n                     from the Learning state to the Forwarding state.')
sdpBindTlsStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpInConfigBpdus.setDescription('The value of the object sdpBindTlsStpInConfigBpdus\n                     indicates the number of Configuration BPDUs received on\n                     this SDP Bind.')
sdpBindTlsStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpInTcnBpdus.setDescription('The value of the object sdpBindTlsStpInTcnBpdus\n                     indicates the number of Topology\n                     Change Notification BPDUs received on this SDP Bind.')
sdpBindTlsStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInBadBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpInBadBpdus.setDescription('The value of the object sdpBindTlsStpInBadBpdus indicates\n                     the number of bad BPDUs received on this SDP Bind.')
sdpBindTlsStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOutConfigBpdus.setDescription('The value of the object sdpBindTlsStpOutConfigBpdus\n                     indicates the number of Configuration BPDUs sent out this\n                     SDP Bind.')
sdpBindTlsStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOutTcnBpdus.setDescription('The value of the object sdpBindTlsStpOutTcnBpdus\n                     indicates the number of Topology Change Notification BPDUs\n                     sent out this SDP Bind.')
sdpBindTlsStpOperBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot1d", 2), ("pvst", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperBpduEncap.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOperBpduEncap.setDescription('The value of the object sdpBindTlsStpOperBpduEncap\n                     indicates the operating encapsulation type used on BPDUs\n                     sent out and received on this SDP Bind.')
sdpBindTlsStpVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 17), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpVpnId.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpVpnId.setDescription('The value of the object sdpBindTlsStpVpnId indicates the\n                      VPN ID of the associated service.')
sdpBindTlsStpCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 18), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpCustId.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpCustId.setDescription('The value of the object sdpBindTlsStpCustId indicates the\n                     Customer ID of the associated service.')
sdpBindTlsMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacAddressLimit.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacAddressLimit.setDescription("The value of the object sdpBindTlsMacAddressLimit\n                     specifies the maximum number of learned and static entries\n                     allowed in the FDB for this  SDP  Bind.  The value 0\n                     means: no limit for this SDP Bind. The command is valid\n                     only for spoke SDPs. When the value of\n                     ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisOperMode is not 'c', the\n                     maximum value of sdpBindTlsMacAddressLimit is '131071'.")
sdpBindTlsNumMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsNumMacAddresses.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsNumMacAddresses.setDescription('The value of the object sdpBindTlsNumMacAddresses\n                     indicates the number of MAC addresses  currently present\n                     in the FDB that belong to this  SDP  Bind (Both learned\n                     and static MAC addresses are counted).')
sdpBindTlsNumStaticMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsNumStaticMacAddresses.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsNumStaticMacAddresses.setDescription('The value of the object sdpBindTlsNumStaticMacAddresses\n                     indicates the number of static MAC addresses currently\n                     present in the FDB that belong to this SDP Bind.')
sdpBindTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 22), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacLearning.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacLearning.setDescription('The value of the object sdpBindTlsMacLearning specifies\n                     whether the MAC learning process is enabled for this SDP\n                     Bind. The value is ignored if MAC learning is disabled on\n                     service level.')
sdpBindTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 23), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacAgeing.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacAgeing.setDescription('The value of the object sdpBindTlsMacAgeing specifies\n                     whether the MAC aging process  is  enabled  for  this\n                     SDP Bind. the value is ignored if MAC aging is disabled\n                     on service level.')
sdpBindTlsStpOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperEdge.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: sdpBindTlsStpOperEdge.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOperEdge.setDescription('The value of the object sdpBindTlsStpOperEdge indicates\n                     the operational value of the Edge Port parameter.\n                     The object is initialized to the value of\n                     sdpBindTlsStpRapidStart and is set FALSE on reception of a\n                     BPDU.')
sdpBindTlsStpAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1))).clone('forceTrue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: sdpBindTlsStpAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpAdminPointToPoint.setDescription("The value of the object xx sdpBindTlsStpAdminPointToPoint\n                     specifies the administrative   point-to-point   status  of\n                     the  LAN segment  attached to this sdp.\n                     A value of 'forceTrue' indicates  that  this port should\n                     always be treated as if it is connected to a\n                     point-to-point link.\n                     A value of 'forceFalse' indicates that this port should\n                     be treated as having a shared media connection.")
sdpBindTlsStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 26), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpPortRole.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpPortRole.setDescription('The value of the object sdpBindTlsStpPortRole indicates\n                     the current role of the sdp as defined by the Rapid\n                     Spanning Tree Protocol.')
sdpBindTlsStpAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 27), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAutoEdge.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpAutoEdge.setDescription('The value of the object sdpBindTlsStpAutoEdge specifies\n                     whether this SDP is enabled for auto-edge detection as\n                     defined by Rapid Spanning Tree Protocol.')
sdpBindTlsStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 28), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperProtocol.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOperProtocol.setDescription('The value of the object sdpBindTlsStpOperProtocol\n                     indicates whether stp, rstp or mstp is running on this\n                     spoke sdp. If the protocol is not enabled on this\n                     spoke-sdp the value notApplicable is returned.')
sdpBindTlsStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInRstBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpInRstBpdus.setDescription('The value of the object sdpBindTlsStpInRstBpdus indicates\n                     the number of Rapid Spanning Tree (Rst) BPDUs received on\n                     this SDP.')
sdpBindTlsStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutRstBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOutRstBpdus.setDescription('The value of the object sdpBindTlsStpOutRstBpdus indicates\n                     the number of Rapid Spanning Tree (Rstp) BPDUs sent out on\n                     this SDP.')
sdpBindTlsLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 31), TlsLimitMacMove().clone('blockable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsLimitMacMove.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsLimitMacMove.setDescription("When sdpBindTlsLimitMacMove value is set to  blockable\n                     (1) the agent will monitor the MAC relearn rate on this\n                     SDP  Bind,  and it will block it when the re-learn rate\n                     specified by svcTlsMacMoveMaxRate is exceeded. When the\n                     value  is  'nonBlockable' this SDP binding will not be\n                     blocked,  and  another  blockable  SDP  binding will be\n                     blocked instead.")
sdpBindTlsDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsDiscardUnknownSource.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsDiscardUnknownSource.setDescription('With the object sdpBindTlsMacAddressLimit a limit  can\n                     be configured for the max number of MAC addresses that\n                     will  be  learned  on  this  SDP  Bind (only for spoke\n                     SDPs).  When  this  limit  is  reached,  packets  with\n                     unknown  source  MAC address are forwarded by default.\n                     By  setting sdpBindTlsDiscardUnknownSource to enabled,\n                     packets  with  unknown  source  MAC will be dropped in\n                     stead.')
sdpBindTlsMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 33), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsPruneState.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMvplsPruneState.setDescription('The value of the object sdpBindTlsMvplsPruneState\n                     indicates the mVPLS prune state of the spoke SDP. The\n                     object will be set to notApplicable if the spoke SDP is\n                     not managed by a mVPLS. If the SDP is managed the state\n                     reflects whether or not it is pruned by the STP instance\n                     running in the mVPLS instance.')
sdpBindTlsMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 34), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtService.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtService.setDescription('The value of the object sdpBindTlsMvplsMgmtService\n                     indicates the service Id of the service where the STP\n                     instance is running that is managing this spoke SDP. This\n                     object is only valid if sdpBindTlsMvplsPruneState is\n                     different from notApplicable.')
sdpBindTlsMvplsMgmtSdpBndId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 35), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtSdpBndId.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtSdpBndId.setDescription('The value of the object sdpBindTlsMvplsMgmtSdpBndId\n                     indicates the SDP bind id in the mVPLS instance specified\n                     in sdpBindTlsMvplsMgmtService that is controlling this\n                     SDP. This object is only valid if\n                     sdpBindTlsMvplsPruneState is different from\n                     notApplicable.')
sdpBindTlsStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 36), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpException.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpException.setDescription('The value of the object sdpBindTlsStpException indicates\n                     whether an STP exception condition is present on this\n                     Spoke Sdp.\n                     - none : no exception condition found.\n                     - oneWayCommuniation : The neighbor RSTP peer on this link\n                                            is not able to detect our presence.\n                     - downstreamLoopDetected :A loop is detected on this link.')
sdpBindTlsL2ptTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 37), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsL2ptTermination.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptTermination.setDescription("The value of the object sdpBindTlsL2ptTermination\n                     specifies whether received L2 Protocol Tunnel pdu's are\n                     terminated on this port or sdp")
sdpBindTlsBpduTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 38), SdpBindTlsBpduTranslation().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsBpduTranslation.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsBpduTranslation.setDescription("The value of the object sdpBindTlsBpduTranslation\n                     specifies whether received L2 Protocol Tunnel pdu's are\n                     translated before being sent out on this port or sap")
sdpBindTlsStpRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpRootGuard.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpRootGuard.setDescription("The value of the object sdpBindTlsStpRootGuard specifies\n                     whether this port is allowed to become STP root port.\n                     It corresponds to the parameter 'restrictedRole' in 802.1Q.\n                     If set, it can cause lack of spanning tree connectivity.")
sdpBindTlsStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInMstBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpInMstBpdus.setDescription('The value of the object sdpBindTlsStpInMstBpdus indicates\n                     the number of Multiple Spanning Tree (Mst) BPDUs received\n                     on this SDP.')
sdpBindTlsStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutMstBpdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpOutMstBpdus.setDescription('The value of the object sdpBindTlsStpOutMstBpdus indicates\n                     the number of Multiple Spanning Tree (Mst) BPDUs sent out\n                     on this SDP.')
sdpBindTlsStpRxdDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 42), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpRxdDesigBridge.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsStpRxdDesigBridge.setDescription('The value of the object sdpBindTlsStpRxdDesigBridge\n                     indicates  the designated Bridge Identifier in the last\n                     BPDU which was received on this SDP.')
sdpBindTlsMacMoveNextUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 43), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMacMoveNextUpTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacMoveNextUpTime.setDescription("The value of the object sdpBindTlsMacMoveNextUpTime \n                     counts down the time in seconds until a SDP bind that \n                     has been brought down due to exceeding the TLS \n                     svcTlsMacMoveMaxRate, sdpBindOperFlags \n                     'relearnLimitExceeded', is automatically brought up again. \n                     When this value is 0xffff, the SDP bind will never be \n                     automatically brought up. The value is zero when \n                     sdpBindOperStatus is 'up'.")
sdpBindTlsMacMoveRateExcdLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMacMoveRateExcdLeft.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacMoveRateExcdLeft.setDescription('The value of the object sapTlsMacMoveRateExcdLeft\n                     counts down the number of times this SDP bind can exceed \n                     the TLS svcTlsMacMoveMaxRate and still be automatically\n                     brought up.')
sdpBindTlsLimitMacMoveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 45), TlsLimitMacMoveLevel().clone('tertiary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsLimitMacMoveLevel.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsLimitMacMoveLevel.setDescription('The value of the object sdpBindTlsLimitMacMoveLevel\n                     specifies the hierarchy in which spoke-SDPs are\n                     blocked when a MAC-move limit is exceeded. When a MAC is\n                     moving among multiple SAPs or spoke-SDPs, the SAP bind\n                     or spoke-SDP bind with the lower level is blocked first.\n                     (tertiary is the lowest)')
sdpBindTlsBpduTransOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("disabled", 2), ("pvst", 3), ("stp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsBpduTransOper.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsBpduTransOper.setDescription('The value of the object sdpBindTlsBpduTransOper indicates\n                     the operational BPDU encapsulation used for BPDU \n                     translated frames.')
sdpBindTlsL2ptProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 47), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsL2ptProtocols.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptProtocols.setDescription("The value of the object sdpBindTlsL2ptTermination\n                     specifies which L2 Protocol Tunnel pdu's are\n                     terminated on this port or sdp")
sdpBindTlsIgnoreStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 48), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsIgnoreStandbySig.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsIgnoreStandbySig.setDescription("The value of sdpBindTlsIgnoreStandbySig specifies whether\n                     the local internal tasks will take into account the \n                     'pseudo-wire forwarding standby' bit received from the LDP\n                     peer which is normally ignored. \n\n                     When set to 'true', this bit is not considered in the\n                     internal tasks.\n\n                     A similar object svcEndPointIgnoreStandbySig is present at\n                     the endpoint level.  If this spoke-SDP is part of that\n                     explicit endpoint, this object will be set to the value of\n                     svcEndPointIgnoreStandbySig and its value will not allowed\n                     to be changed.\n        \n                     This spoke-SDP can be made part of an explicit-endpoint\n                     only if the setting of this object is not conflicting with\n                     the setting of svcEndPointIgnoreStandbySig object.")
sdpBindTlsBlockOnMeshFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsBlockOnMeshFail.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsBlockOnMeshFail.setDescription("The value of sdpBindTlsBlockOnMeshFail specifies that the\n                     operational status of this spoke SDP will consider\n                     operational status of associated mesh SDPs in this service.\n                     \n                     If there are no mesh SDPs in the service, value of this\n                     object is ignored.\n                     \n                     When this object is set to 'true', then the operational\n                     status of this spoke SDP will be 'down' until the\n                     operational status of atleast one mesh SDP in this service\n                     is 'up'.\n\n                     When set to 'false', the operational status of this spoke\n                     SDP does not consider the operational status of any mesh\n                     SDPs in the service.")
sdpBindMeshTlsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7), )
if mibBuilder.loadTexts: sdpBindMeshTlsTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsTable.setDescription('A table that contains TLS Mesh SDP Bind\n                     information.')
sdpBindMeshTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindMeshTlsEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsEntry.setDescription('TLS specific information about an Mesh SDP Bind.')
sdpBindMeshTlsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 1), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsPortState.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsPortState.setDescription("This object indicates the actual state of the Mesh SDP. If\n                     the sdp is operationally down, the port will be in the\n                     'disabled' state. If the sdp is operationally up, the\n                     state will be 'forwarding' unless the hold-down timer is\n                     active in which case the state will be 'discarding'.")
sdpBindMeshTlsHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsHoldDownTimer.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsHoldDownTimer.setDescription("When the hold-down timer is active, all traffic coming\n                     from this mesh sdp will be blocked. This timer will be\n                     activated for any of the following cases:\n                     1. when a mesh SDP becomes operational;\n                     2. when a 'disputed' BPDU is received over this mesh sdp;\n                        This is typically a symptom of one way communication\n                        (the peer at the other side of the mesh sdp does not\n                        receive our BPDUs).\n                     3. when a MSTP BPDU from outside the region is received\n                        over this mesh SDP.")
sdpBindMeshTlsTransitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("waiting-for-agreement", 2), ("agreement-received", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsTransitionState.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsTransitionState.setDescription("This object indicates whether we already received an\n                     agreement from the peer connected via this mesh sdp. RSTP\n                     expects an agreement from every peer after sending a\n                     proposal over the VCP when it wants to transition the latter\n                     to the forwarding state. This object is only relevant when\n                     the role of the VCP is 'designated'. Not receiving an\n                     agreement is typically caused by an improperly configured\n                     sdp or by a non rstp enabled peer.")
sdpBindMeshTlsNotInMstRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsNotInMstRegion.setStatus('current')
if mibBuilder.loadTexts: sdpBindMeshTlsNotInMstRegion.setDescription("This object sdpBindMeshTlsNotInMstRegion indicates whether\n                     we received a BPDU from another MST-region on this mesh\n                     SDP.\n\n                     If set to 'true' then the object sdpBindMeshTlsHoldDownTimer\n                     will have the value 'active'.\n\n                     It is up to the operator to make sure bridges connected\n                     via mesh SDPs are in the same MST-region. If not the mesh\n                     will NOT become operational.")
sdpBindApipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8), )
if mibBuilder.loadTexts: sdpBindApipeTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeTable.setDescription('The sdpBindApipeTable has an entry for each apipe sdpBind\n                     configured on this system.')
sdpBindApipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindApipeEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeEntry.setDescription('Each row entry represents a particular sdpBind related to a\n                     particular Apipe service entry. Entries are created/deleted\n                     by the user.')
sdpBindApipeAdminConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeAdminConcatCellCount.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeAdminConcatCellCount.setDescription('The value of sdpBindApipeAdminConcatCellCount specifies\n                     the maximum number of ATM cells to accumulate\n                     into an MPLS packet.  The remote peer will also signal the\n                     maximum number of concatenated cells it is willing to\n                     accept in an MPLS packet.  When the lesser of (the\n                     configured value and the signaled value) number of cells\n                     is reached, the MPLS packet is queued for transmission\n                     onto the pseudowire.')
sdpBindApipeSigConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindApipeSigConcatCellCount.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeSigConcatCellCount.setDescription('The value of sdpBindApipeSigConcatCellCount indicates the\n                     maximum number of concatenated ATM cells the remote peer\n                     is willing to accept.  If there is no remote peer, or if\n                     the label mapping has not been received, this object will\n                     be zero (0).')
sdpBindApipeOperConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindApipeOperConcatCellCount.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeOperConcatCellCount.setDescription('The value of sdpBindApipeOperConcatCellCount indicates the\n                     maximum number of concatenated ATM cells that will be sent\n                     on this SDP binding.')
sdpBindApipeConcatMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400)).clone(400)).setUnits('hundreds of microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatMaxDelay.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeConcatMaxDelay.setDescription('The value of sdpBindApipeConcatMaxDelay object specifies\n                     the maximum amount of time to wait while\n                     performing ATM cell concatenation into an MPLS packet\n                     before transmitting the MPLS packet.  This places an upper\n                     bound on the amount of delay introduced by the\n                     concatenation process.\n                     When this amount of time is reached from when the first\n                     ATM cell for this MPLS packet was received, the MPLS\n                     packet is queued for transmission onto the pseudowire.')
sdpBindApipeConcatCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatCellClp.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeConcatCellClp.setDescription("The value of sdpBindApipeConcatCellClp specifies whether\n                     a CLP change should be used as an indication to complete\n                     the cell concatenation operation. When the value is 'true',\n                     CLP is used to indicate that cell concatenation should\n                     be completed.")
sdpBindApipeConcatCellAal5Fr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatCellAal5Fr.setStatus('current')
if mibBuilder.loadTexts: sdpBindApipeConcatCellAal5Fr.setDescription("The value of sdpBindApipeConcatCellAal5Fr specifies\n                     whether the AAL5 EOP (end of packet) should be used as an\n                     indication to complete the cell concatenation operation.\n                     When the value is 'true', EOP is used to indicate that\n                     cell concatenation should be completed.")
sdpBindDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9), )
if mibBuilder.loadTexts: sdpBindDhcpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpInfoTable.setDescription('A table that contains DHCP information related to a\n                     SDP Bind.\n\n                     A row will exist in this table for each spoke or\n                     mesh SDP in a  Tls Service. Rows are created and deleted\n                     automatically by the system.')
sdpBindDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDhcpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpInfoEntry.setDescription('DHCP specific information about an SDP Bind.')
sdpBindDhcpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1, 1), ServObjDesc().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindDhcpDescription.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpDescription.setDescription('The value of the object sdpBindDhcpDescription specifies\n                     a user provided description for DHCP on this Sdp Bind.')
sdpBindDhcpSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindDhcpSnoop.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpSnoop.setDescription('The value of the object sdpBindDhcpSnoop specifies\n                     whether or not DHCP snooping is enabled on the Sdp Bind.')
sdpBindDhcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10), )
if mibBuilder.loadTexts: sdpBindDhcpStatsTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsTable.setDescription('sdpBindDhcpStatsTable contains DHCP statistics related\n                     to  a TLS SDP Bind. A row will exist in this table for\n                     each  spoke  or  mesh  SDP  in a Tls Service. Rows are\n                     created and deleted automatically by the system.')
sdpBindDhcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDhcpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsEntry.setDescription('DHCP statistics for a TLS spoke SDP or mesh SDP.')
sdpBindDhcpStatsClntSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntSnoopdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsClntSnoopdPckts.setDescription('The value of the object sdpBindDhcpStatsClntSnoopdPckts\n                     indicates the number of  DHCP client packets that have\n                     been snooped on this SDP bind.')
sdpBindDhcpStatsSrvrSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrSnoopdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrSnoopdPckts.setDescription('The value of the object sdpBindDhcpStatsSrvrSnoopdPckts\n                     indicates the number of  DHCP server packets that have\n                     been snooped on this SDP bind.')
sdpBindDhcpStatsClntForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntForwdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsClntForwdPckts.setDescription('The value of the object sdpBindDhcpStatsClntForwdPckts\n                     indicates the number of  DHCP  client  packets  that have\n                     been forwarded on this SDP bind.')
sdpBindDhcpStatsSrvrForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrForwdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrForwdPckts.setDescription('The value of the object sdpBindDhcpStatsSrvrForwdPckts\n                     indicates the number of  DHCP  server  packets  that have\n                     been forwarded on this SDP bind.')
sdpBindDhcpStatsClntDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntDropdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsClntDropdPckts.setDescription('The value of the object sdpBindDhcpStatsClntDropdPckts\n                     indicates the number of  DHCP client packets that have\n                     been dropped on this SDP bind.')
sdpBindDhcpStatsSrvrDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrDropdPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrDropdPckts.setDescription('The value of the object sdpBindDhcpStatsSrvrDropdPckts\n                     indicates the number of  DHCP server packets that have\n                     been dropped on this SDP bind.')
sdpBindDhcpStatsClntProxRadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxRadPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxRadPckts.setDescription('The value of the object sdpBindDhcpStatsClntProxRadPckts\n                     indicates the number of DHCP client packets that have\n                     been proxied on this SDP bind based on data received from\n                     a RADIUS server.')
sdpBindDhcpStatsClntProxLSPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxLSPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxLSPckts.setDescription('The value of the object sdpBindDhcpStatsClntProxLSPckts\n                     indicates the number of DHCP client packets that have\n                     been proxied on this SDP bind based on a lease state. The\n                     lease itself can have been obtained from a DHCP or RADIUS\n                     server. This is the so called lease split functionality.')
sdpBindDhcpStatsGenReleasePckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsGenReleasePckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsGenReleasePckts.setDescription('The value of the object sdpBindDhcpStatsGenReleasePckts\n                     indicates the number of DHCP RELEASE messages spoofed on\n                     this SDP bind to the DHCP server.')
sdpBindDhcpStatsGenForceRenPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsGenForceRenPckts.setStatus('current')
if mibBuilder.loadTexts: sdpBindDhcpStatsGenForceRenPckts.setDescription('The value of the object sdpBindDhcpStatsGenForceRenPckts\n                     indicates the number of DHCP FORCERENEW messages spoofed\n                     on this SDP bind to the DHCP clients.')
sdpBindIpipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11), )
if mibBuilder.loadTexts: sdpBindIpipeTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindIpipeTable.setDescription('The sdpBindIpipeTable has an entry for each IPIPE sdpBind\n                     configured on this system.')
sdpBindIpipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindIpipeEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindIpipeEntry.setDescription('Each row entry represents a particular sdpBind related to a\n                     particular IPIPE service entry. Entries are created/deleted\n                     by the user.')
sdpBindIpipeCeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddressType.setStatus('current')
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddressType.setDescription('The value of the object sdpBindIpipeCeInetAddressType\n                     specifies the addresstype of the IP address of the CE\n                     device reachable throught this IPIPE SDP binding.')
sdpBindIpipeCeInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddress.setStatus('current')
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddress.setDescription('The type of this address is determined by the value of\n                     the sdpBindIpipeCeInetAddressType object.\n\n                     This object specifies the IPv4 address of the\n                     CE device reachable through this SDP binding.')
sdpFCMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12), )
if mibBuilder.loadTexts: sdpFCMappingTable.setStatus('current')
if mibBuilder.loadTexts: sdpFCMappingTable.setDescription('The sdpFCMappingTable has an entry for each FC mapping\n                     on an SDP configured on this system.')
sdpFCMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingFCName"))
if mibBuilder.loadTexts: sdpFCMappingEntry.setStatus('current')
if mibBuilder.loadTexts: sdpFCMappingEntry.setDescription('Each row entry represents a particular FC to LSP ID\n                     mapping on an SDP. Entries are created/deleted by \n                     the user.')
sdpFCMappingFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sdpFCMappingFCName.setStatus('current')
if mibBuilder.loadTexts: sdpFCMappingFCName.setDescription("The value of sdpFCMappingFCName specifies the forwarding\n                     class for which this mapping is defined, in the SDP\n                     indexed by 'sdpId'.")
sdpFCMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFCMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpFCMappingRowStatus.setDescription('The value of sdpFCMappingRowStatus is used for the \n                     creation and deletion of forwarding class to LSP\n                     mappings.')
sdpFCMappingLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 3), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFCMappingLspId.setStatus('current')
if mibBuilder.loadTexts: sdpFCMappingLspId.setDescription('The value of sdpFCMappingLspId specifies the LSP ID that\n                     traffic corresponding to the class specified in \n                     sdpFCMappingFCName will be forwarded on. This object MUST\n                     be specified at row creation time.')
sdpBindCpipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15), )
if mibBuilder.loadTexts: sdpBindCpipeTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeTable.setDescription('The sdpBindCpipeTable has an entry for each cpipe sdpBind\n                     configured on this system.')
sdpBindCpipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindCpipeEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeEntry.setDescription('Each row entry represents a particular sdpBind related to a\n                     particular Cpipe service entry. Entries are created/deleted\n                     by the user.')
sdpBindCpipeLocalPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 1), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalPayloadSize.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalPayloadSize.setDescription('This object indicates the local payload size (in bytes).')
sdpBindCpipePeerPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerPayloadSize.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerPayloadSize.setDescription('This object indicates the remote payload size (in bytes).\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if this value has not been received\n                     from the remote peer then this object will be zero (0).')
sdpBindCpipeLocalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 3), Unsigned32()).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalBitrate.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalBitrate.setDescription('This object indicates the local bit-rate in multiples of\n                     64 Kbit/s.')
sdpBindCpipePeerBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 4), Unsigned32()).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerBitrate.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerBitrate.setDescription('This object indicates the remote bit-rate in multiples of\n                     64 Kbit/s.\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if this value has not been received\n                     from the remote peer then this object will be zero (0).')
sdpBindCpipeLocalSigPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 5), TdmOptionsSigPkts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalSigPkts.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalSigPkts.setDescription('This object indicates the local CE application signalling\n                     packets mode.')
sdpBindCpipePeerSigPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 6), TdmOptionsSigPkts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerSigPkts.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerSigPkts.setDescription('This object indicates the remote CE application signalling\n                     packets mode.\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if the remote peer does not support\n                     signalling packets then this object will be zero (0).')
sdpBindCpipeLocalCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 7), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalCasTrunkFraming.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalCasTrunkFraming.setDescription('This object indicates the local CAS trunk framing mode.')
sdpBindCpipePeerCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 8), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerCasTrunkFraming.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerCasTrunkFraming.setDescription('This object indicates the remote CAS trunk framing mode.\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if the remote peer does not support\n                     CAS trunk framing then this object will be zero (0).')
sdpBindCpipeLocalUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalUseRtpHeader.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalUseRtpHeader.setDescription('This object indicates whether a RTP header is used\n                     when packets are transmitted to the remote peer, and\n                     the local peer expects a RTP header when packets are\n                     received from the remote peer.')
sdpBindCpipePeerUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerUseRtpHeader.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerUseRtpHeader.setDescription("This object indicates whether a RTP header is used\n                     when packets are transmitted by the remote peer, and\n                     the remote peer expects a RTP header when packets are\n                     received from the local peer. \n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if the remote peer does not support\n                     RTP headers then this object will be 'false'.")
sdpBindCpipeLocalDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalDifferential.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalDifferential.setDescription('This object indicates whether differential timestamp\n                     mode is used in the RTP header when packets are\n                     transmitted to the remote peer, and the local peer expects\n                     differential timestamps in the RTP header when packets are\n                     received from the remote peer.')
sdpBindCpipePeerDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerDifferential.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerDifferential.setDescription("This object indicates whether differential timestamp mode\n                     is used in the RTP header when packets are transmitted by\n                     the remote peer, and the remote peer expects differential\n                     timestamps in the RTP header when packets are received\n                     from the local peer.\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if the remote peer does not support\n                     differential timestamp mode then this object will be\n                     'false'.")
sdpBindCpipeLocalTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 13), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalTimestampFreq.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipeLocalTimestampFreq.setDescription('This object indicates the timestamp frequency used\n                     in the RTP header when packets are transmitted to the\n                     remote peer, and the local peer expects same timestamp\n                     frequency in the RTP header when packets are received\n                     from the remote peer.\n                     \n                     This value is in multiples of 8 KHz.')
sdpBindCpipePeerTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 14), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerTimestampFreq.setStatus('current')
if mibBuilder.loadTexts: sdpBindCpipePeerTimestampFreq.setDescription('This object indicates the timestamp frequency used in\n                     the RTP header when packets are transmitted by the remote\n                     peer, and the remote peer expects the same timestamp\n                     frequency in the RTP header when packets are received\n                     from the local peer.\n                     If there is no remote peer, or if the label mapping has\n                     not been received, or if the remote peer does not support\n                     support RTP headers then this object will be zero (0).\n\n                     This value is in multiples of 8 KHz.')
sdpBindTlsMfibAllowedMdaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13), )
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaTable.setDescription('The sdpBindTlsMfibAllowedMdaTable has an entry for each\n                     MFIB allowed MDA destination for an SDP Binding configured\n                     in the system.')
sdpBindTlsMfibAllowedMdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaEntry.setDescription('Each row entry represents an MFIB allowed MDA destination\n                     for an SDP Binding configured in the system. Entries can\n                     be created and deleted via SNMP SET operations on the\n                     object sdpBindTlsMfibMdaRowStatus.')
sdpBindTlsMfibMdaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindTlsMfibMdaRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMfibMdaRowStatus.setDescription('The value of sdpBindTlsMfibMdaRowStatus controls the\n                     creation and deletion of rows in this table.')
sdpBindTlsL2ptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16), )
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsTable.setDescription('A table that contains TLS spoke SDP Bind \n                     Layer 2 Protocol Tunneling Statistics.\n                     This table complements the sdpBindTlsTable. Rows in this\n                     table  are  created  and  deleted automatically by the\n                     system.')
sdpBindTlsL2ptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsEntry.setDescription('TLS specific information about an SDP Bind.')
sdpBindTlsL2ptStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsLastClearedTime.setDescription('The value of sdpBindTlsL2ptStatsLastClearedTime indicates \n                     the last time that these stats were cleared. The value\n                     zero indicates that they have not been cleared yet.')
sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx indicates the\n                     number of L2PT encapsulated STP config bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx indicates the\n                     number of L2PT encapsulated STP config bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx indicates the\n                     number of L2PT encapsulated STP rst bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx indicates the\n                     number of L2PT encapsulated STP rst bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx indicates the\n                     number of L2PT encapsulated STP tcn bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx indicates the\n                     number of L2PT encapsulated STP tcn bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx indicates the\n                     number of L2PT encapsulated PVST config bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx indicates the\n                     number of L2PT encapsulated PVST config bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx indicates the\n                     number of L2PT encapsulated PVST rst bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx indicates the\n                     number of L2PT encapsulated PVST rst bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx indicates the\n                     number of L2PT encapsulated PVST tcn bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx indicates the\n                     number of L2PT encapsulated PVST tcn bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsStpConfigBpdusRx indicates the\n                     number of STP config bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsStpConfigBpdusTx indicates the\n                     number of STP config bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsStpRstBpdusRx indicates the\n                     number of STP rst bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsStpRstBpdusTx indicates the\n                     number of STP rst bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsStpTcnBpdusRx indicates the\n                     number of STP tcn bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsStpTcnBpdusTx indicates the\n                     number of STP tcn bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsPvstConfigBpdusRx indicates the\n                     number of PVST config bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsPvstConfigBpdusTx indicates the\n                     number of PVST config bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsPvstRstBpdusRx indicates the\n                     number of PVST rst bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsPvstRstBpdusTx indicates the\n                     number of PVST rst bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsPvstTcnBpdusRx indicates the\n                     number of PVST tcn bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsPvstTcnBpdusTx indicates the\n                     number of PVST tcn bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsOtherBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsOtherBpdusRx indicates the\n                     number of other bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsOtherBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsOtherBpdusTx indicates the\n                     number of other bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsOtherL2ptBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsOtherL2ptBpdusRx indicates the\n                     number of other L2PT bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsOtherL2ptBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsOtherL2ptBpdusTx indicates the\n                     number of other L2PT bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsOtherInvalidBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsOtherInvalidBpdusRx indicates the\n                     number of other invalid bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsOtherInvalidBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsOtherInvalidBpdusTx indicates the\n                     number of other invalid bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx indicates the\n                     number of L2PT encapsulated CDP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx indicates the\n                     number of L2PT encapsulated CDP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx indicates the\n                     number of L2PT encapsulated VTP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx indicates the\n                     number of L2PT encapsulated VTP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx indicates the\n                     number of L2PT encapsulated DTP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx indicates the\n                     number of L2PT encapsulated DTP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx indicates the\n                     number of L2PT encapsulated PAGP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx indicates the\n                     number of L2PT encapsulated PAGP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx indicates the\n                     number of L2PT encapsulated UDLD bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx indicates the\n                     number of L2PT encapsulated UDLD bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsCdpBpdusRx indicates the\n                     number of CDP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsCdpBpdusTx indicates the\n                     number of CDP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsVtpBpdusRx indicates the\n                     number of VTP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsVtpBpdusTx indicates the\n                     number of VTP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsDtpBpdusRx indicates the\n                     number of DTP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsDtpBpdusTx indicates the\n                     number of DTP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsPagpBpdusRx indicates the\n                     number of PAGP bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsPagpBpdusTx indicates the\n                     number of PAGP bpdus transmitted on this spoke SDP.')
sdpBindTlsL2ptStatsUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusRx.setDescription('The value of sdpBindTlsL2ptStatsUdldBpdusRx indicates the\n                     number of UDLD bpdus received on this spoke SDP.')
sdpBindTlsL2ptStatsUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusTx.setDescription('The value of sdpBindTlsL2ptStatsUdldBpdusTx indicates the\n                     number of UDLD bpdus transmitted on this spoke SDP.')
pwTemplateTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: pwTemplateTableLastChanged.setDescription('The value of pwTemplateTableLastChanged indicates the\n                     sysUpTime at the time of the last modification\n                     of pwTemplateTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
pwTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18), )
if mibBuilder.loadTexts: pwTemplateTable.setStatus('current')
if mibBuilder.loadTexts: pwTemplateTable.setDescription('A table that contains entries for pseudowire (PW) templates\n                     specifying SDP auto-binding.')
pwTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"))
if mibBuilder.loadTexts: pwTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: pwTemplateEntry.setDescription('Information about a specific PW template.')
pwTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 1), PWTemplateId())
if mibBuilder.loadTexts: pwTemplateId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateId.setDescription('The PW template identifier.')
pwTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: pwTemplateRowStatus.setDescription('The value of pwTemplateRowStatus is used for the\n                     creation and deletion of PW templates.')
pwTemplateLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateLastChanged.setStatus('current')
if mibBuilder.loadTexts: pwTemplateLastChanged.setDescription('The value of pwTemplateLastChanged indicates the \n                     sysUpTime at the time of the last modification of this\n                     entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
pwTemplateUseProvisionedSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateUseProvisionedSdp.setStatus('current')
if mibBuilder.loadTexts: pwTemplateUseProvisionedSdp.setDescription("The value of pwTemplateUseProvisionedSdp specifies\n                     whether the to use an already provisioned SDP.\n                     A value of 'true' specifies that the tunnel manager\n                     will be consulted for an existing active SDP.\n                     Otherwise, a value of 'false' specifies that\n                     the default SDP template will be used to use for\n                     instantiation of the SDP.")
pwTemplateVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 5), SdpBindVcType().clone('ether')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateVcType.setStatus('current')
if mibBuilder.loadTexts: pwTemplateVcType.setDescription('The value of pwTemplateVcType specifies the type of\n                     virtual circuit (VC) associated with the SDP Bind.')
pwTemplateAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateAccountingPolicyId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateAccountingPolicyId.setDescription('The value of pwTemplateAccountingPolicyId specifies the\n                     policy to use to collect accounting statistics on\n                     the SDP Bind. The value zero indicates that the\n                     agent should use the default accounting policy,\n                     if one exists.')
pwTemplateCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateCollectAcctStats.setStatus('current')
if mibBuilder.loadTexts: pwTemplateCollectAcctStats.setDescription("The value of pwTemplateCollectAcctStats specifies\n                     whether the agent collects accounting statistics for\n                     the SDP Bind. When the value is 'true' the agent\n                     collects accounting statistics on the SDP Bind.")
pwTemplateMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 8), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacLearning.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMacLearning.setDescription('The value of pwTemplateMacLearning specifies whether\n                     the MAC learning process is enabled for the SDP Bind.\n                     The value is ignored if MAC learning is disabled at\n                     service level.')
pwTemplateMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 9), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacAgeing.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMacAgeing.setDescription('The value of pwTemplateMacAgeing specifies whether\n                     the MAC aging process is enabled for the SDP Bind.\n                     The value is ignored if MAC aging is disabled\n                     at the service level.')
pwTemplateDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateDiscardUnknownSource.setStatus('current')
if mibBuilder.loadTexts: pwTemplateDiscardUnknownSource.setDescription("With the object pwTemplateMacAddressLimit a limit can\n                     be configured for the max number of MAC addresses that\n                     will be learned on the SDP Bind (only for spoke SDPs).\n                     When the limit is reached, packets with unknown source\n                     MAC address are forwarded by default. By setting\n                     sdpBindTlsDiscardUnknownSource to 'enabled', packets with\n                     unknown source MAC will be dropped instead.")
pwTemplateLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 11), TlsLimitMacMove().clone('blockable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateLimitMacMove.setStatus('current')
if mibBuilder.loadTexts: pwTemplateLimitMacMove.setDescription("The value of pwTemplateLimitMacMove specifies the\n                     behavior for when the re-learn rate specified by\n                     svcTlsMacMoveMaxRate is exceeded.\n\n                     When pwTemplateLimitMacMove value is set to 'blockable'\n                     the agent will monitor the MAC relearn rate on the\n                     SDP  Bind, and it will block it when the re-learn rate\n                     specified by svcTlsMacMoveMaxRate is exceeded. When the\n                     value is 'nonBlockable' the SDP Bind will not be\n                     blocked,  and  another  blockable  SDP Bind will be\n                     blocked instead.")
pwTemplateMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 12), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacPinning.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMacPinning.setDescription("The value of pwTemplateMacPinning specifies\n                     whether or not MAC address pinning is active on the\n                     SDP Bind (mesh or spoke). Setting the value to 'enabled'\n                     disables re-learning of MAC addresses on other SAPs or\n                     SDPs within the same VPLS; the MAC address will hence\n                     remain attached to the SDP Bind for the duration of\n                     its age-timer. This object has effect only for MAC\n                     addresses learned via the normal MAC learning\n                     process, and not for entries learned via DHCP. The\n                     value will be set by default to 'disabled'. However for\n                     a spoke SDP that belongs to a residential SHG, the\n                     value is set to enabled by the system, and cannot be\n                     altered by the operator.")
pwTemplateVlanVcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateVlanVcTag.setStatus('current')
if mibBuilder.loadTexts: pwTemplateVlanVcTag.setDescription('The value of pwTemplateVlanVcTag specifies the VLAN VC tag\n                     for the SDP Bind.')
pwTemplateMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacAddressLimit.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMacAddressLimit.setDescription("The value of pwTemplateMacAddressLimit specifies\n                     the maximum number of learned and static entries\n                     allowed in the FDB for the SDP Bind. The value 0\n                     specifies no limit for the SDP Bind. The command is\n                     valid only for spoke SDPs. When the value of\n                     ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisOperMode is not 'c', the\n                     maximum value of pwTemplateMacAddressLimit is '131071'.")
pwTemplateShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgName.setStatus('current')
if mibBuilder.loadTexts: pwTemplateShgName.setDescription('The value of pwTemplateShgName specifies the name of the\n                     split-horizon group where the spoke SDP Bind belongs to.\n                     By default a spoke SDP Bind does not belong to any\n                     split-horizon group. The name specified must\n                     correspond to an existing split-horizon group in the TLS\n                     service where the spoke SDP Bind is defined.')
pwTemplateShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 16), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgDescription.setStatus('current')
if mibBuilder.loadTexts: pwTemplateShgDescription.setDescription('The value of pwTemplateShgDescription specifies a \n                     user-provided description for split-horizon group on\n                     the SDP Bind.')
pwTemplateShgRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgRestProtSrcMac.setStatus('current')
if mibBuilder.loadTexts: pwTemplateShgRestProtSrcMac.setDescription("The value of pwTemplateShgRestProtSrcMac specifies\n                     how the agent will handle relearn requests for protected\n                     MAC addresses. When the value of this object is 'true'\n                     requests to relearn a protected MAC address will be\n                     ignored.")
pwTemplateShgRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgRestUnprotDstMac.setStatus('current')
if mibBuilder.loadTexts: pwTemplateShgRestUnprotDstMac.setDescription("The value of pwTemplateShgRestUnprotDstMac specifies\n                     how the system will forward packets destined to an\n                     unprotected MAC address. When the value of this object is\n                     'true' packets destined to an unprotected MAC address\n                     will be dropped.")
pwTemplateEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 19), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateEgressMacFilterId.setDescription('The value of pwTemplateEgressMacFilterId specifies\n                     the tMacFilterId which indexes an egress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tMacFilterTable, or zero if no\n                     filter is specified.')
pwTemplateEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 20), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateEgressIpFilterId.setDescription('The value of pwTemplateEgressIpFilterId specifies\n                     the tIPFilterId which indexes an egress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tIPFilterTable, or zero if no\n                     filter is specified.')
pwTemplateEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 21), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateEgressIpv6FilterId.setDescription('The value of pwTemplateEgressIpv6FilterId specifies\n                     the tIPv6FilterId which indexes an egress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tIPv6FilterTable, or zero if no\n                     filter is specified.')
pwTemplateIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 22), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIngressMacFilterId.setDescription('The value of pwTemplateIngressMacFilterId specifies\n                     the tMacFilterId which indexes an ingress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tMacFilterTable, or zero if no\n                     filter is specified.')
pwTemplateIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 23), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIngressIpFilterId.setDescription('The value of pwTemplateIngressIpFilterId specifies\n                     the tIPFilterId which indexes an ingress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tIPFilterTable, or zero if no\n                     filter is specified.')
pwTemplateIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 24), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIngressIpv6FilterId.setDescription('The value of pwTemplateIngressIpv6FilterId specifies\n                     the tIPv6FilterId which indexes an ingress filter entry\n                     in ALCATEL-IND1-TIMETRA-FILTER-MIB::tIPv6FilterTable, or zero if no\n                     filter is specified.')
pwTemplateIgmpFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpFastLeave.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpFastLeave.setDescription("The value of pwTemplateIgmpFastLeave specifies\n                     whether or not fastleave is allowed on the SDP Bind.\n\n                     If set to 'enabled', the system prunes the port on which an IGMP\n                     'leave' message has been received without waiting for the Group\n                     Specific Query to timeout.")
pwTemplateIgmpImportPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 26), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpImportPlcy.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpImportPlcy.setDescription('The value of pwTemplateIgmpImportPlcy specifies\n                     a policy statement that must be applied to all\n                     incoming IGMP messages on the SDP Bind.')
pwTemplateIgmpLastMembIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpLastMembIntvl.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpLastMembIntvl.setDescription("The value of pwTemplateIgmpLastMembIntvl specifies\n                     the Max Response Time (in tenths of a second) used in\n                     Group-Specific and Group-Source-Specific Queries sent\n                     in response to 'leave' messages. This is also the\n                     amount of time between Group-Specific Query messages.\n\n                     This value may be tuned to modify the leave latency of\n                     the network. A reduced value results in reduced time to\n                     detect the loss of the last member of a group.")
pwTemplateIgmpMaxNbrGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMaxNbrGrps.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpMaxNbrGrps.setDescription('The value of pwTemplateIgmpMaxNbrGrps specifies how many\n                     group addresses are allowed for the SDP Bind. The value 0\n                     means that no limit is imposed.')
pwTemplateIgmpGenQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpGenQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpGenQueryIntvl.setDescription("The value of pwTemplateIgmpGenQueryIntvl specifies\n                     the interval (in seconds) between two consecutive general\n                     queries sent by the system on the SDP.\n\n                     The value of this object is only meaningful when the value of\n                     pwTemplateIgmpSendQueries is 'enabled'.")
pwTemplateIgmpQueryRespIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpQueryRespIntvl.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpQueryRespIntvl.setDescription("The value of pwTemplateIgmpQueryRespIntvl specifies the\n                     maximum response time (in seconds) advertised in\n                     IGMPv2/v3 queries.\n\n                     The value of this object is only meaningful when the value of\n                     pwTemplateIgmpSendQueries is 'enabled'.")
pwTemplateIgmpRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpRobustCount.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpRobustCount.setDescription("The value of pwTemplateIgmpRobustCount specifies the\n                     value of the Robust count.\n\n                     This object allows tuning for the expected packet loss on\n                     the SDP. If an SDP is expected to be lossy, the Robustness\n                     Variable may be increased. IGMP snooping is robust to\n                     (Robustness Variable-1) packet losses.\n\n                     The value of this object is only meaningful when the\n                     value of pwTemplateIgmpSendQueries is 'enabled'.")
pwTemplateIgmpSendQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpSendQueries.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSendQueries.setDescription('The value of pwTemplateIgmpSendQueries specifies whether\n                     the system generates General Queries by itself on the SDP.')
pwTemplateIgmpMcacPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 33), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacPolicyName.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpMcacPolicyName.setDescription('The value of pwTemplateIgmpMcacPolicyName indicates the name\n         of the multicast CAC policy.')
pwTemplateIgmpMcacUnconstBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacUnconstBW.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpMcacUnconstBW.setDescription("The value of pwTemplateIgmpMcacUnconstBW specifies the bandwidth\n         assigned for interface's multicast CAC policy traffic in kilo-bits per\n         second(kbps). \n\n         If the default value of '-1' is set, there is no constraint on\n         bandwidth allocated at the interface. \n\n         If the value of pwTemplateIgmpMcacUnconstBW is set to '0' and if \n         a multicast CAC policy is assigned on the interface, then \n         no group (channel) from that policy is allowed on that interface.")
pwTemplateIgmpMcacPrRsvMndBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacPrRsvMndBW.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpMcacPrRsvMndBW.setDescription("The value of pwTemplateIgmpMcacPrRsvMndBW specifies the bandwidth\n         pre-reserved for all the mandatory channels on a given interface\n         in kilo-bits per second(kbps). \n              \n         If the value of pwTemplateIgmpMcacUnconstBW is '0', no mandatory\n         channels are allowed. If the value of pwTemplateIgmpMcacUnconstBW \n         is '-1', then all mandatory and optional channels are allowed.\n\n         If the value of pwTemplateIgmpMcacPrRsvMndBW is equal to the \n         value of pwTemplateIgmpMcacUnconstBW, then all the unconstrained \n         bandwidth on a given interface is allocated to mandatory channels \n         configured through multicast CAC policy on that interface and no \n         optional groups (channels) are allowed.\n\n         The value of pwTemplateIgmpMcacPrRsvMndBW should always be less \n         than or equal to that of pwTemplateIgmpMcacUnconstBW. An attempt \n         to set the value of pwTemplateIgmpMcacPrRsvMndBW greater than \n         that of pwTemplateIgmpMcacUnconstBW will result in \n         'inconsistentValue' error.")
pwTemplateIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 36), TmnxIgmpVersion().clone('version3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpVersion.setDescription('The value of pwTemplateIgmpVersion specifies the version\n         of IGMP for the PW template.')
pwTemplateIgmpSnpgGrpSrcTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTblLC.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTblLC.setDescription('The value of pwTemplateIgmpSnpgGrpSrcTblLC indicates\n                     the sysUpTime at the time of the last modification\n                     of pwTemplateIgmpSnpgGrpSrcTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
pwTemplateIgmpSnpgGrpSrcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20), )
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTable.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTable.setDescription('A table that contains entries for static IGMP Snooping\n                     groups.')
pwTemplateIgmpSnpgGrpSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpAddrType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgSrcAddrType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgSrcAddr"))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcEntry.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcEntry.setDescription('Information about a specific static IGMP Snooping groups.')
pwTemplateIgmpSnpgGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 1), InetAddressType())
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddrType.setDescription('The IP multicast group address type for this entry.')
pwTemplateIgmpSnpgGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddr.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddr.setDescription('The IP multicast group address for this entry.')
pwTemplateIgmpSnpgSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 3), InetAddressType())
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddrType.setDescription('The source address type for this entry.')
pwTemplateIgmpSnpgSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddr.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddr.setDescription('The source address for this entry.')
pwTemplateIgmpSnpgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgRowStatus.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgRowStatus.setDescription('The value of pwTemplateIgmpSnpgRowStatus is used for\n                     the creation and deletion of static IGMP snooping entries.')
pwTemplateIgmpSnpgLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgLastChngd.setStatus('current')
if mibBuilder.loadTexts: pwTemplateIgmpSnpgLastChngd.setDescription('The value of pwTemplateIgmpSnpgLastChngd indicates the \n                     sysUpTime at the time of the last modification of this\n                     entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
pwTemplateMfibAllowedMdaTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTblLC.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTblLC.setDescription('The value of pwTemplateMfibAllowedMdaTblLC indicates\n                     the sysUpTime at the time of the last modification\n                     of pwTemplateMfibAllowedMdaTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
pwTemplateMfibAllowedMdaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22), )
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTable.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTable.setDescription('The pwTemplateMfibAllowedMdaTable has an entry for each\n                     MFIB allowed MDA destination for an PW template.')
pwTemplateMfibAllowedMdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaEntry.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaEntry.setDescription('Each row entry represents an MFIB allowed MDA destination\n                     for an PW template configured in the system. Entries\n                     can be created and deleted via SNMP SET operations on the\n                     object pwTemplateMfibMdaRowStatus.')
pwTemplateMfibMdaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMfibMdaRowStatus.setStatus('current')
if mibBuilder.loadTexts: pwTemplateMfibMdaRowStatus.setDescription('The value of pwTemplateMfibMdaRowStatus controls the\n                     creation and deletion of rows in this table.')
sdpBindTlsMrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTableLastChanged.setDescription('The value of sdpBindTlsMrpTableLastChanged indicates the\n                     sysUpTime at the time of the last modification\n                     of sdpBindTlsMrpTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
sdpBindTlsMrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24), )
if mibBuilder.loadTexts: sdpBindTlsMrpTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTable.setDescription('The sdpBindTlsMrpTable allows the operator to modify\n                     attributes of the Multiple Registration Protocol (MRP)\n                     feature for the TLS SDP Bind.\n\n                     This table contains an entry for each TLS SDP Bind created\n                     by the user using either sdpBindTlsTable or\n                     sdpBindMeshTlsTable.\n\n                     Rows in this table are created and deleted automatically\n                     by the system.')
sdpBindTlsMrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsMrpEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpEntry.setDescription('Each row entry contains objects that allows the\n                     modification of the Multiple Registration Protocol feature\n                     for a specific SDP-Binding in a TLS service.')
sdpBindTlsMrpLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpLastChngd.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpLastChngd.setDescription('The value of sdpBindTlsMrpLastChngd indicates the \n                     sysUpTime at the time of the last modification of this\n                     entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
sdpBindTlsMrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpJoinTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpJoinTime.setDescription('The value of sdpBindTlsMrpJoinTime specifies a timer\n                    value in 10ths of seconds which determines the maximum rate\n                    at which attribute join messages can be sent on the SDP.')
sdpBindTlsMrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 60)).clone(30)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveTime.setDescription('The value of sdpBindTlsMrpLeaveTime specifies a timer\n                    value in 10ths of seconds which determines the amount of\n                    time a registered attribute is held in leave state before\n                    the registration is removed.')
sdpBindTlsMrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(100)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveAllTime.setDescription('The value of sdpBindTlsMrpLeaveAllTime specifies a timer\n                    value in 10ths of seconds which determines the frequency\n                    where all attribute declarations on the SDP are all\n                    refreshed.')
sdpBindTlsMrpPeriodicTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicTime.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicTime.setDescription('The value of sdpBindTlsMrpPeriodicTime specifies a timer\n                    value in 10ths of seconds which determines the frequency of\n                    re-transmission of attribute declarations.')
sdpBindTlsMrpPeriodicEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicEnabled.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicEnabled.setDescription('The value of sdpBindTlsMrpPeriodicEnabled specifies whether\n                    re-transmission of attribute declarations is enabled.')
sdpBindTlsMrpRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxPdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxPdus.setDescription('The value of sdpBindTlsMrpRxPdus indicates the number of MRP packets\n        received on this SDP Bind.')
sdpBindTlsMrpDroppedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpDroppedPdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpDroppedPdus.setDescription('The value of sdpBindTlsMrpDroppedPdus indicates the number of dropped\n        MRP packets on this SDP Bind.')
sdpBindTlsMrpTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxPdus.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxPdus.setDescription('The value of sdpBindTlsMrpTxPdus indicates the number of MRP packets\n        transmitted on this SDP Bind.')
sdpBindTlsMrpRxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxNewEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxNewEvent.setDescription("The value of sdpBindTlsMrpRxNewEvent indicates the number of 'New' MRP\n        events received on this SDP Bind.")
sdpBindTlsMrpRxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinInEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinInEvent.setDescription("The value of sdpBindTlsMrpRxJoinInEvent indicates the number of\n        'Join-In' MRP events received on this SDP Bind.")
sdpBindTlsMrpRxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxInEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxInEvent.setDescription("The value of sdpBindTlsMrpRxInEvent indicates the number of 'In' MRP\n        events received on this SDP Bind.")
sdpBindTlsMrpRxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinEmptyEvent.setDescription("The value of sdpBindTlsMrpRxJoinEmptyEvent indicates the number of\n        'Join Empty' MRP events received on this SDP Bind.")
sdpBindTlsMrpRxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxEmptyEvent.setDescription("The value of sdpBindTlsMrpRxEmptyEvent indicates the number of 'Empty'\n        MRP events received on this SDP Bind.")
sdpBindTlsMrpRxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxLeaveEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpRxLeaveEvent.setDescription("The value of sdpBindTlsMrpRxLeaveEvent indicates the number of 'Leave'\n        MRP events received on this SDP Bind.")
sdpBindTlsMrpTxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxNewEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxNewEvent.setDescription("The value of sdpBindTlsMrpTxNewEvent indicates the number of 'New' MRP\n        events transmitted on this SDP Bind.")
sdpBindTlsMrpTxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinInEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinInEvent.setDescription("The value of sdpBindTlsMrpTxJoinInEvent indicates the number of\n        'Join-In' MRP events transmitted on this SDP Bind.")
sdpBindTlsMrpTxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxInEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxInEvent.setDescription("The value of sdpBindTlsMrpTxInEvent indicates the number of 'In' MRP\n        events transmitted on this SDP Bind.")
sdpBindTlsMrpTxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinEmptyEvent.setDescription("The value of sdpBindTlsMrpTxJoinEmptyEvent indicates the number of\n        'Join Empty' MRP events transmitted on this SDP Bind.")
sdpBindTlsMrpTxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxEmptyEvent.setDescription("The value of sdpBindTlsMrpTxEmptyEvent indicates the number of 'Empty'\n        MRP events transmitted on this SDP Bind.")
sdpBindTlsMrpTxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxLeaveEvent.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMrpTxLeaveEvent.setDescription("The value of sdpBindTlsMrpTxLeaveEvent indicates the number of 'Leave'\n        MRP events transmitted on this SDP Bind.")
sdpBindTlsMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25), )
if mibBuilder.loadTexts: sdpBindTlsMmrpTable.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMmrpTable.setDescription('This table contains an entry for each MAC address managed\n                    by Multiple MAC Registration Protocol (MMRP) on the SDP\n                    Bind for the TLS.  Entries are dynamically created and\n                    destroyed by the system as the MAC Addresses are registered\n                    or declared in MMRP.')
sdpBindTlsMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpMacAddr"))
if mibBuilder.loadTexts: sdpBindTlsMmrpEntry.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMmrpEntry.setDescription('MMRP specific information about a MAC address managed by\n                    MMRP on a SDP Bind in a TLS.')
sdpBindTlsMmrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 1), MacAddress())
if mibBuilder.loadTexts: sdpBindTlsMmrpMacAddr.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMmrpMacAddr.setDescription('The value of sdpBindTlsMmrpMacAddr indicates an ethernet MAC address which\n        is being managed by MMRP on this SAP.')
sdpBindTlsMmrpDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMmrpDeclared.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMmrpDeclared.setDescription('The value of sdpBindTlsMmrpDeclared indicates whether the MRP applicant\n        on this SAP is declaring this MAC address on behalf of MMRP.')
sdpBindTlsMmrpRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMmrpRegistered.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMmrpRegistered.setDescription('The value of sdpBindTlsMmrpRegistered indicates whether the MRP\n        registrant on this SAP has notified MMRP of a registration of this MAC\n        address.')
sdpAutoBindBgpInfoTableLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTableLC.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTableLC.setDescription('The value of sdpAutoBindBgpInfoTableLC indicates\n                     the sysUpTime at the time of the last modification\n                     of sdpAutoBindBgpInfoTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
sdpAutoBindBgpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27), )
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTable.setDescription('The sdpAutoBindBgpInfoTable has an entry for each\n                     SDP Bind entry from sdpBindTable which was\n                     created as a result of BGP Auto-discovery.')
sdpAutoBindBgpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpAutoBindBgpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoEntry.setDescription('Each row entry contains BGP-related information for an\n                     SDP Bind entry created as a result of BGP Auto-discovery.')
sdpAutoBindBgpInfoTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 1), PWTemplateId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTemplateId.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTemplateId.setDescription('The value of sdpAutoBindBgpInfoTemplateId indicates the\n                     the value of the pwTemplateId object for the\n                     PW template entry used to create this\n                     SDP Bind.')
sdpAutoBindBgpInfoAGI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 2), TmnxVPNRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoAGI.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoAGI.setDescription('The value of sdpAutoBindBgpInfoAGI indicates the\n                     Attachment Group Indentifier (AGI) portion of the\n                     Generalized Id FEC element from the pseudowire\n                     setup for this SDP Bind.')
sdpAutoBindBgpInfoSAII = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoSAII.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoSAII.setDescription('The value of sdpAutoBindBgpInfoSAII indicates the\n                     Source Attachment Individual Indentifier (SAII) portion\n                     of the Generalized Id FEC element from the pseudowire\n                     setup for this SDP Bind.')
sdpAutoBindBgpInfoTAII = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTAII.setStatus('current')
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTAII.setDescription('The value of sdpAutoBindBgpInfoTAII indicates the\n                     Target Attachment Individual Indentifier (TAII) portion\n                     of the Generalized Id FEC element from the pseudowire\n                     setup for this SDP Bind.')
svcTlsBgpADPWTempBindTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTblLC.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTblLC.setDescription('The value of svcTlsBgpADPWTempBindTblLC indicates the\n                     sysUpTime at the time of the last modification\n                     of svcTlsBgpADPWTempBindTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
svcTlsBgpADPWTempBindTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33), )
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTable.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTable.setDescription('svcTlsBgpADPWTempBindTable contains entries for the\n                    associations between SDP Auto-Bind policies and a\n                    BGP Auto-Discovery context for a VPLS service.')
svcTlsBgpADPWTempBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"))
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindEntry.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindEntry.setDescription('A SDP Auto-Bind Policy entry in the\n                    svcTlsBgpADPWTempBindTable.')
svcTlsBgpADPWTempBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRowStatus.setDescription('The value of svcTlsBgpADPWTempBindRowStatus is used\n                    for the creation and deletion of associations between\n                    SDP Auto-Bind policies and a BGP Auto-Discovery context\n                    for a VPLS service.')
svcTlsBgpADPWTempBindLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindLastChngd.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindLastChngd.setDescription('The value of svcTlsBgpADPWTempBindLastChngd indicates\n                     the sysUpTime at the time of the last modification of\n                     this entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
svcTlsBgpADPWTempBindSHG = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindSHG.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindSHG.setDescription("The value of svcTlsBgpADPWTempBindSHG specifies the\n                    split-horizon group to associate with the SDP Auto-Bind\n                    policy in this BGP Auto-Discovery context in a VPLS\n                    service.\n\n                    When this Auto-Bind policy is used to create an SDP,\n                    this split-horizon group will be associated with the\n                    SDP.\n\n                    The name specified must correspond to an\n                    existing split-horizon group in the VPLS service,\n                    otherwise an 'inconsistentValue' error will be\n                    returned.")
svcTlsBgpADPWTempBindRTTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTblLC.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTblLC.setDescription('The value of svcTlsBgpADPWTempBindRTTblLC indicates the\n                     sysUpTime at the time of the last modification\n                     of svcTlsBgpADPWTempBindRTTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
svcTlsBgpADPWTempBindRTTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35), )
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTable.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTable.setDescription('svcTlsBgpADPWTempBindTable contains entries for Route\n                    Targets associated with a SDP Auto-Bind policy and a\n                    BGP Auto-Discovery context for a VPLS service.')
svcTlsBgpADPWTempBindRTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (1, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRT"))
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTEntry.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTEntry.setDescription('A SDP Auto-Bind Policy Route Target entry in the\n                    svcTlsBgpADPWTempBindRTTable.')
svcTlsBgpADPWTempBindRT = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRT.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRT.setDescription('The value of svcTlsBgpADPWTempBindRT is the Route\n                    Target associated with a PW template and a\n                    BGP Auto-Discovery context for a VPLS service.\n\n                    When advertisements are received with this Route Target,\n                    the PW template specified by the index, pwTemplateId,\n                    will be used to create the SDP.')
svcTlsBgpADPWTempBindRTRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTRowStat.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTRowStat.setDescription('The value of svcTlsBgpADPWTempBindRTRowStat is used\n                    for the association of Route Targets with a SDP Auto-Bind\n                    policy and a BGP Auto-Discovery context for a VPLS\n                    service.')
svcL2RteTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 38), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RteTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: svcL2RteTableLastChanged.setDescription('The value of svcL2RteTableLastChanged indicates the\n                     sysUpTime at the time of the last modification of\n                     svcL2RteTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
svcL2RteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39), )
if mibBuilder.loadTexts: svcL2RteTable.setStatus('current')
if mibBuilder.loadTexts: svcL2RteTable.setDescription('svcL2RteTable contains entries for L2 routes.')
svcL2RteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteVsiPrefix"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteRouteDistinguisher"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteNextHopType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteNextHop"))
if mibBuilder.loadTexts: svcL2RteEntry.setStatus('current')
if mibBuilder.loadTexts: svcL2RteEntry.setDescription('An L2 route entry in the svcL2RteTable.')
svcL2RteVsiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 1), Unsigned32())
if mibBuilder.loadTexts: svcL2RteVsiPrefix.setStatus('current')
if mibBuilder.loadTexts: svcL2RteVsiPrefix.setDescription('The value of svcL2RteVsiPrefix is the low-order 4 bytes\n                     of the Virtual Switch Instance idendifier (VSI-id) of the\n                     remote VSI for this L2 route.')
svcL2RteRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 2), TmnxVPNRouteDistinguisher())
if mibBuilder.loadTexts: svcL2RteRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: svcL2RteRouteDistinguisher.setDescription('The value of svcL2RteRouteDistinguisher is the high-order\n                     6 bytes of the Virtual Switch Instance idendifier (VSI-id)\n                     of the remote VSI for this L2 route.')
svcL2RteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 3), InetAddressType())
if mibBuilder.loadTexts: svcL2RteNextHopType.setStatus('current')
if mibBuilder.loadTexts: svcL2RteNextHopType.setDescription('The value of svcL2RteNextHopType indicates the address\n                     type of svcL2RteNextHop.')
svcL2RteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 4), InetAddress())
if mibBuilder.loadTexts: svcL2RteNextHop.setStatus('current')
if mibBuilder.loadTexts: svcL2RteNextHop.setDescription('The value of svcL2RteNextHop indicates the IP next hop\n                     for this L2 route. This value is equivilant to the\n                     IP address of the Far End of this L2 route.')
svcL2RteSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 5), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RteSdpBindId.setStatus('current')
if mibBuilder.loadTexts: svcL2RteSdpBindId.setDescription('The value of svcL2RteSdpBindId indicates the SDP bind\n                     ID of the SDP bind that binds this VPLS context to\n                     the VSI indicated by svcL2RteRouteDistinguisher,\n                     svcL2RteVsiPrefix, and svcL2RteNextHop.')
svcL2RtePwTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 6), PWTemplateId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RtePwTemplateId.setStatus('current')
if mibBuilder.loadTexts: svcL2RtePwTemplateId.setDescription('The value of svcL2RtePwTemplateId indicates the PW\n                     template associated with the SDP bind that binds\n                     this VPLS context to the VSI indicated by\n                     svcL2RteRouteDistinguisher, svcL2RteVsiPrefix,\n                     and svcL2RteNextHop.')
sdpNotifySdpId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 1), SdpId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpNotifySdpId.setStatus('current')
if mibBuilder.loadTexts: sdpNotifySdpId.setDescription('The ID of the SDP where SDP Bindings are associated.\n                     This object is used by the sdpBindSdpStateChangeProcessed\n                     notification to indicate the SDP that changed\n                     state and that resulted in having the associated\n                     sdpBindStatusChanged events suppressed for all SDP\n                     Bindings on that SDP.')
dynamicSdpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 2), ConfigStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpStatus.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpStatus.setDescription("The value of dynamicSdpStatus indicates the status of the\n                     dynamic SDP which is used by the dynamicSdpConfigChanged\n                     and dynamicSdpBindConfigChanged notifications to indicate\n                     what state the dynamic SDP or SDP Bind \n                     has entered: 'created', 'modified', or 'deleted'.")
dynamicSdpOrigin = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 3), L2RouteOrigin()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpOrigin.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpOrigin.setDescription('The value of dynamicSdpOrigin indicates the origin of the\n                     dynamic SDP. The origin indicates the protocol or mechanism\n                     that created the dynamic SDP.')
dynamicSdpCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpCreationError.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpCreationError.setDescription('The value of the object dynamicSdpCreationError\n                    indicates the reason why the system was unable to create\n                    the dynamic SDP.')
dynamicSdpBindCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpBindCreationError.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpBindCreationError.setDescription('The value of the object dynamicSdpBindCreationError\n                   indicates the reason why the system was unable to create\n                   the dynamic SDP Binding.')
sdpCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpCreated.setStatus('obsolete')
if mibBuilder.loadTexts: sdpCreated.setDescription('The sdpCreated notification is sent when a new row is\n                     created in the sdpInfoTable.')
sdpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: sdpDeleted.setDescription('The sdpDeleted notification is sent when an existing row\n                     is deleted from the ng row is deleted from the\n                     sdpInfoTable.')
sdpStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperStatus"))
if mibBuilder.loadTexts: sdpStatusChanged.setStatus('current')
if mibBuilder.loadTexts: sdpStatusChanged.setDescription('The sdpStatusChanged notification is generated\n                     when there is a change in the administrative or\n                     operating status of an SDP.')
sdpBindCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindCreated.setStatus('obsolete')
if mibBuilder.loadTexts: sdpBindCreated.setDescription('The sdpBindCreated notification is sent when a new row\n                     is created in the sdpBindTable.')
sdpBindDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: sdpBindDeleted.setDescription('The sdpBindDeleted notification is sent when an existing\n                     row is deleted from the sdpBindTable.')
sdpBindStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperFlags"))
if mibBuilder.loadTexts: sdpBindStatusChanged.setStatus('current')
if mibBuilder.loadTexts: sdpBindStatusChanged.setDescription('The sdpBindStatusChanged notification is generated\n                     when there is a change in the administrative or\n                     operating status of an SDP Binding.\n\n                     Notice that this trap is not generated whenever\n                     the SDP Binding operating status change is caused by\n                     an operating status change on the associated SDP.')
sdpTlsMacAddrLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmRaised.setDescription('The sdpTlsMacAddrLimitAlarmRaised notification is sent\n                     whenever the number of MAC addresses stored in the FDB\n                     for this spoke sdp increases to reach the watermark\n                     specified by the object svcTlsFdbTableFullHighWatermark.')
sdpTlsMacAddrLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmCleared.setDescription('The sdpTlsMacAddrLimitAlarmCleared notification is sent\n                     whenever the number of MAC addresses stored in the FDB for\n                     this spoke SDP drops to the watermark specified by the\n                     object svcTlsFdbTableFullLowWatermark.')
sdpTlsDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"))
if mibBuilder.loadTexts: sdpTlsDHCPSuspiciousPcktRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: sdpTlsDHCPSuspiciousPcktRcvd.setDescription('The sdpTlsDHCPSuspiciousPcktRcvd notification is\n                     generated when a DHCP packet is received with suspicious\n                     content.')
sdpBindDHCPLeaseEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: sdpBindDHCPLeaseEntriesExceeded.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPLeaseEntriesExceeded.setDescription('The sdpBindDHCPLeaseEntriesExceeded notification is\n                     generated when the number of DHCP lease state entries on a\n                     given IES or VRPN spoke-SDP reaches the user configurable\n                     upper limit given by\n                     ALCATEL-IND1-TIMETRA-VRTR-MIB::vRtrIfDHCPLeasePopulate.')
sdpBindDHCPLseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sdpBindDHCPLseStateOverride.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPLseStateOverride.setDescription('The sdpBindDHCPLseStateOverride notification is generated\n                     when an existing DHCP lease state is overridden by a new\n                     lease state which has the same IP address but a different\n                     MAC address. This trap is only applicable for IES and VPRN\n                     spoke-SDPs.')
sdpBindDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"))
if mibBuilder.loadTexts: sdpBindDHCPSuspiciousPcktRcvd.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPSuspiciousPcktRcvd.setDescription('The sdpBindDHCPSuspiciousPcktRcvd notification is\n                     generated when a DHCP packet is received with suspicious\n                     content.')
sdpBindDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sdpBindDHCPLseStatePopulateErr.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPLseStatePopulateErr.setDescription('The sdpBindDHCPLseStatePopulateErr notification indicates\n                     that the system was unable to update the DHCP Lease State\n                     table with the information contained in the DHCP ACK\n                     message. The DHCP ACK message has been discarded. This\n                     trap is only applicable for IES and VPRN spoke-SDPs.')
sdpBindPwPeerStatusBitsChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBits"))
if mibBuilder.loadTexts: sdpBindPwPeerStatusBitsChanged.setStatus('current')
if mibBuilder.loadTexts: sdpBindPwPeerStatusBitsChanged.setDescription('The sdpBindPwPeerStatusBitsChanged notification is \n                     generated when there is a change in the PW status\n                     bits received from the peer.')
sdpBindTlsMacMoveExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"))
if mibBuilder.loadTexts: sdpBindTlsMacMoveExceeded.setStatus('current')
if mibBuilder.loadTexts: sdpBindTlsMacMoveExceeded.setDescription('The sdpBindTlsMacMoveExceeded notification is generated\n                     when the SDP exceeds the TLS svcTlsMacMoveMaxRate.')
sdpBindPwPeerFaultAddrChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddressType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddress"))
if mibBuilder.loadTexts: sdpBindPwPeerFaultAddrChanged.setStatus('current')
if mibBuilder.loadTexts: sdpBindPwPeerFaultAddrChanged.setDescription('The sdpBindPwPeerFaultAddrChanged notification is \n                     generated when there is a change in the IP address\n                     included in the PW status message sent by the peer.\n                     This notification is only generated if the IP address\n                     is the only information in the notification that \n                     changed.  If the status bits changed as well, then\n                     the sdpBindPwPeerStatusBitsChanged notification will \n                     be generated instead.')
sdpBindDHCPProxyServerError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"))
if mibBuilder.loadTexts: sdpBindDHCPProxyServerError.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPProxyServerError.setDescription('The sdpBindDHCPProxyServerError notification indicates\n                     that the system was unable to proxy DHCP requests.')
sdpBindDHCPCoAError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"))
if mibBuilder.loadTexts: sdpBindDHCPCoAError.setStatus('obsolete')
if mibBuilder.loadTexts: sdpBindDHCPCoAError.setDescription('The sdpBindDHCPCoAError notification indicates that\n                     the system was unable to process a Change of Authorization\n                     (CoA) request from a Radius server.')
sdpBindDHCPSubAuthError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"))
if mibBuilder.loadTexts: sdpBindDHCPSubAuthError.setStatus('obsolete')
if mibBuilder.loadTexts: sdpBindDHCPSubAuthError.setDescription('The sdpBindDHCPSubAuthError notification indicates that\n                     the system encountered a problem while trying to\n                     authenticate a subscriber.')
sdpBindSdpStateChangeProcessed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNotifySdpId"))
if mibBuilder.loadTexts: sdpBindSdpStateChangeProcessed.setStatus('current')
if mibBuilder.loadTexts: sdpBindSdpStateChangeProcessed.setDescription('The sdpBindSdpStateChangeProcessed notification \n                     indicates that the agent has finished processing an \n                     SDP state change event, and that the operating status\n                     of all the affected SDP Bindings has been updated \n                     accordingly. The value of the sdpNotifySdpId object\n                     indicates the SDP that experienced the state change.')
sdpBindDHCPLseStateMobilityErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sdpBindDHCPLseStateMobilityErr.setStatus('current')
if mibBuilder.loadTexts: sdpBindDHCPLseStateMobilityErr.setDescription('The sdpBindDHCPLseStateMobilityErr notification indicates\n                     that the system was unable to perform a mobility check\n                     for this lease state.')
sdpBandwidthOverbooked = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMaxBookableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBookedBandwidth"))
if mibBuilder.loadTexts: sdpBandwidthOverbooked.setStatus('current')
if mibBuilder.loadTexts: sdpBandwidthOverbooked.setDescription('The sdpBandwidthOverbooked notification indicates\n                     that the bandwidth that has been allocated to the SDP \n                     bindings indicated by sdpBookedBandwidth exceeds \n                     sdpMaxBookableBandwidth.')
sdpBindInsufficientBandwidth = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAvailableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminBandwidth"))
if mibBuilder.loadTexts: sdpBindInsufficientBandwidth.setStatus('current')
if mibBuilder.loadTexts: sdpBindInsufficientBandwidth.setDescription('The sdpBindInsufficientBandwidth notification indicates\n                     that the available bandwidth of the SDP is insufficient \n                     to satisfy the bandwidth requirement specified by \n                     sdpBindAdminBandwidth of this SDP binding.')
dynamicSdpConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"))
if mibBuilder.loadTexts: dynamicSdpConfigChanged.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpConfigChanged.setDescription("The dynamicSdpConfigChanged notification is generated when a\n                    dynamic SDP is 'created', 'modified', or 'deleted', with the\n                    value of dynamicSdpStatus indicated which state it has entered.")
dynamicSdpBindConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"))
if mibBuilder.loadTexts: dynamicSdpBindConfigChanged.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpBindConfigChanged.setDescription("The dynamicSdpBindConfigChanged notification is generated when a\n                    dynamic SDP Bind is 'created', 'modified', or 'deleted', with the\n                    value of dynamicSdpStatus indicated which state it has entered.")
dynamicSdpCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationError"))
if mibBuilder.loadTexts: dynamicSdpCreationFailed.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpCreationFailed.setDescription('The dynamicSdpCreationFailed notification is generated\n                    when the system fails to create a dynamic SDP.')
dynamicSdpBindCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 27)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationError"))
if mibBuilder.loadTexts: dynamicSdpBindCreationFailed.setStatus('current')
if mibBuilder.loadTexts: dynamicSdpBindCreationFailed.setDescription('The dynamicSdpBindCreationFailed notification is generated\n                    when the system fails to create a dynamic SDP Bind.')
unacknowledgedTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: unacknowledgedTCN.setStatus('current')
if mibBuilder.loadTexts: unacknowledgedTCN.setDescription('The unacknowledgedTCN notification is generated when a\n                     TCN sent towards the root bridge on the root port (SAP\n                     or  SDP  binding) has not been acknowledged within the\n                     allowed  time. A portion of the spanning tree topology\n                     may  not have been notified that a topology change has\n                     taken  place.  FDB  tables  on  some  devices may take\n                     significantly longer to represent the new distribution\n                     of  layer-2 addresses. Examine this device and devices\n                     towards the root bridge for STP issues.')
tmnxSvcTopoChgSdpBindMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"))
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindMajorState.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindMajorState.setDescription('The tmnxSvcTopoChgSdpBindMajorState  notification   is\n                     generated  when  a  SDP  binding  has transitioned its\n                     state  from  learning to forwarding or from forwarding\n                     to  blocking or broken. The spanning tree topology has\n                     been  modified.  It may denote loss of customer access\n                     or  redundancy.  Check  the  new  topology against the\n                     provisioned  topology  to  determine  the  severity of\n                     connectivity loss.')
tmnxSvcNewRootSdpBind = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpDesignatedRoot"))
if mibBuilder.loadTexts: tmnxSvcNewRootSdpBind.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcNewRootSdpBind.setDescription('The  tmnxSvcNewRootSdpBind notification  is  generated\n                     when  the previous root bridge has been aged out and a\n                     new  root bridge has been elected. The new root bridge\n                     creates  a  new  spanning tree topology. It may denote\n                     loss  of  customer access or redundancy. Check the new\n                     topology against the provisioned topology to determine\n                     the severity of connectivity loss.')
tmnxSvcTopoChgSdpBindState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"))
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindState.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindState.setDescription('The    tmnxSvcTopoChgSdpBindState    notification   is\n                     generated when a SDP binding has transitioned state to\n                     blocking  or  broken  from  learning state. This event\n                     complements     what     is     not     covered     by\n                     tmnxSvcTopoChgSdpBindMajorState.   The  spanning  tree\n                     topology  has  been  modified.  It  may denote loss of\n                     customer  access or redundancy. Check the new topology\n                     against  the  provisioned  topology  to  determine the\n                     severity of connectivity loss.')
tmnxSvcSdpBindRcvdTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdTCN.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdTCN.setDescription('The tmnxSvcSdpBindRcvdTCN  notification  is  generated\n                     when  a  SDP  binding  has  received  TCN from another\n                     bridge.  This  bridge  will either have its configured\n                     BPDU with the topology change flag set if it is a root\n                     bridge,  or  it  will  pass  TCN  to  its root bridge.\n                     Eventually  the address aging timer for the forwarding\n                     database  will  be  made shorter for a short period of\n                     time. No recovery is needed.')
tmnxSvcSdpBindRcvdHigherBriPrio = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdHigherBriPrio.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdHigherBriPrio.setDescription("The tmnxSvcSdpBindRcvdHigherBriPrio  notification   is\n                     generated when a customer's device has been configured\n                     with  a bridge priority equal to zero. The SDP binding\n                     that  the  customer's device is connected through will\n                     be   blocked.   Remove   the   customer's   device  or\n                     reconfigure  the customer's bridge priority with value\n                     greater than zero.")
tmnxSvcSdpBindEncapPVST = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapPVST.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapPVST.setDescription("The tmnxSvcSdpBindEncapPVST notification is  generated\n                     when an SDP bindings STP received a BPDU that was PVST\n                     encapsulated. The SDP binding STP's BPDUs will be PVST\n                     encapsulated. No recovery is needed.")
tmnxSvcSdpBindEncapDot1d = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapDot1d.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapDot1d.setDescription('The tmnxSvcSdpBindEncapDot1d notification is generated\n                     when  a  SDP  binding  received a BPDU that was 802.1d\n                     encapsulated.  The  SDP  binding  BPDUs  will  also be\n                     802.1d encapsulated. No recovery is needed.')
tmnxSvcSdpActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 31)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperProtocol"))
if mibBuilder.loadTexts: tmnxSvcSdpActiveProtocolChange.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcSdpActiveProtocolChange.setDescription('The tmnxSvcSdpActiveProtocolChange  notification    is\n                     generated  when the spanning tree protocol on this SDP\n                     changes from rstp to stp or vise versa. No recovery is\n                     needed.')
tmnxStpMeshNotInMstRegion = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 36)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: tmnxStpMeshNotInMstRegion.setStatus('current')
if mibBuilder.loadTexts: tmnxStpMeshNotInMstRegion.setDescription('The tmnxStpMeshNotInMstRegion notification is\n                     generated when a MSTP BPDU from outside the MST region\n                     is received on the indicated mesh SDP.\n\n                     It is up to the operator to make sure bridges connected\n                     via mesh SDPs are in the same MST-region. If not the mesh\n                     will NOT become operational.')
tmnxSdpBndStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 38)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpException"))
if mibBuilder.loadTexts: tmnxSdpBndStpExcepCondStateChng.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBndStpExcepCondStateChng.setDescription('The tmnxSdpBndStpExcepCondStateChng notification is\n                     generated when the value of the object sdpBindTlsStpException\n                     has changed, i.e. when the exception condition \n                     changes on the indicated SDP Bind.')
tmnxSdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1))
tmnxSdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2))
tmnxSdp77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindMeshV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpApipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindIpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpAutoBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsMrpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpL2V6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpFCV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindCpipeV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdp77x0V6v0Compliance = tmnxSdp77x0V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSdp77x0V6v0Compliance.setDescription('The compliance statement for management of services SDPs\n         on Alcatel 7750 SR and 7710 SR series systems.')
tmnxSdp7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindMeshV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindIpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpAutoBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsMrpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpL2V6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpFCV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdp7450V6v0Compliance = tmnxSdp7450V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSdp7450V6v0Compliance.setDescription('The compliance statement for management of services SDPs\n         on Alcatel 7450 ESS series systems.')
tmnxSdpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNumEntries"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNextFreeId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDelivery"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFarEndIpAddress"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLspList"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLabelSignaling"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperPathMtu"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveMaxDropCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHoldDownTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumHelloRequestMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumHelloResponseMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumLateHelloResponseMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloRequestTimeout"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLdpEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpVlanVcEtype"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdvertisedVllMtuOverride"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperFlags"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMvplsMgmtSdpBndId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingDefaultLsp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingMcLsp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMetric"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoSdp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpSnmpAllowed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpPBBEtype"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBandwidthBookingFactor"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAvailableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminPathMtu"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloMessageLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpV6v0Group = tmnxSdpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpV6v0Group.setDescription('The  group  of objects supporting SDP base feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVcType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVlanVcTag"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindSplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperFlags"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIesIfIndex"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMacPinning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPeerVccvCvBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPeerVccvCcBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindControlWordBit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperControlWord"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEndPoint"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEndPointPrecedence"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIsICB"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddressType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindClassFwdingOperState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindForceVlanVcForwarding"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngressForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngressDroppedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsEgressForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsEgressForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngFwdOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngDropOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminIngressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminEgressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperIngressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperEgressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddress"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIpipeCeInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindV6v0Group = tmnxSdpBindV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindV6v0Group.setDescription('The  group  of objects supporting SDP Bind feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortNum"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPathCost"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRapidStart"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpBpduEncap"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperBpduEncap"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsNumMacAddresses"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsNumStaticMacAddresses"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperEdge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAdminPointToPoint"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortRole"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAutoEdge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsMgmtSdpBndId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpException"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptTermination"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBpduTranslation"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRootGuard"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRxdDesigBridge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsLimitMacMoveLevel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBpduTransOper"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptProtocols"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsIgnoreStandbySig"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBlockOnMeshFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsV6v0Group = tmnxSdpBindTlsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindTlsV6v0Group.setDescription('The  group  of objects supporting SDP Bind TLS feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindMeshV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsPortState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsNotInMstRegion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsHoldDownTimer"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsTransitionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindMeshV6v0Group = tmnxSdpBindMeshV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindMeshV6v0Group.setDescription('The  group  of objects supporting mesh SDP bind feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpApipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeAdminConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeSigConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeOperConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatMaxDelay"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatCellClp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatCellAal5Fr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpApipeV6v0Group = tmnxSdpApipeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpApipeV6v0Group.setDescription('The  group  of objects supporting SDP A-Pipe feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpSnoop"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntForwdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrForwdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntDropdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrDropdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntProxRadPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntProxLSPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsGenReleasePckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsGenForceRenPckts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindDhcpV6v0Group = tmnxSdpBindDhcpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindDhcpV6v0Group.setDescription('The  group  of objects supporting SDP Bind DHCP feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindIpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIpipeCeInetAddressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindIpipeV6v0Group = tmnxSdpBindIpipeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindIpipeV6v0Group.setDescription('The  group  of objects supporting SDP Bind I-Pipe feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpFCV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingLspId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpFCV6v0Group = tmnxSdpFCV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpFCV6v0Group.setDescription('The  group  of objects supporting SDP FC feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindCpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalPayloadSize"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerPayloadSize"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalBitrate"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerBitrate"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalSigPkts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerSigPkts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalDifferential"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerDifferential"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalTimestampFreq"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerTimestampFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindCpipeV6v0Group = tmnxSdpBindCpipeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindCpipeV6v0Group.setDescription('The  group  of objects supporting SDP bind C-Pipe feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindTlsL2ptV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMfibMdaRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsLastClearedTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherL2ptBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherL2ptBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherInvalidBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherInvalidBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsUdldBpdusTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsL2ptV6v0Group = tmnxSdpBindTlsL2ptV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindTlsL2ptV6v0Group.setDescription('The  group  of objects supporting SDP bind L2pt feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpAutoBindV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateVcType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacLearning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacAgeing"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacPinning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgName"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpFastLeave"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpImportPlcy"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpLastMembIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMaxNbrGrps"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpGenQueryIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpQueryRespIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpRobustCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSendQueries"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacPolicyName"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacPrRsvMndBW"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacUnconstBW"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpVersion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpSrcTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMfibAllowedMdaTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMfibMdaRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateUseProvisionedSdp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateVlanVcTag"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTableLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTemplateId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoAGI"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoSAII"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTAII"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpAutoBindV6v0Group = tmnxSdpAutoBindV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpAutoBindV6v0Group.setDescription('The  group  of objects supporting SDP auto-bind feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpBindTlsMrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 113)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpJoinTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLeaveTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLeaveAllTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpPeriodicTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpPeriodicEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpDroppedPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxNewEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxNewEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpDeclared"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsMrpV6v0Group = tmnxSdpBindTlsMrpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpBindTlsMrpV6v0Group.setDescription('The  group  of objects supporting SDP MRP feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpTlsBgpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindSHG"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRTTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRTRowStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpTlsBgpV6v0Group = tmnxSdpTlsBgpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpTlsBgpV6v0Group.setDescription('The  group  of objects supporting SDP BGP feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpL2V6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCreationOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RtePwTemplateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpL2V6v0Group = tmnxSdpL2V6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpL2V6v0Group.setDescription('The  group  of objects supporting SDP L2 Route feature\n         on Alcatel 7x50 SR series systems.')
tmnxSdpNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNotifySdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMaxBookableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBookedBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpNotifyObjsV6v0Group = tmnxSdpNotifyObjsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpNotifyObjsV6v0Group.setDescription('The  group  of objects supporting SDP notification objects\n         on Alcatel 7x50 SR series systems.')
tmnxSdpNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 400)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "unacknowledgedTCN"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcTopoChgSdpBindMajorState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcNewRootSdpBind"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcTopoChgSdpBindState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindRcvdTCN"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindRcvdHigherBriPrio"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindEncapPVST"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindEncapDot1d"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxStpMeshNotInMstRegion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBndStpExcepCondStateChng"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpStatusChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindStatusChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsMacAddrLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsMacAddrLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLeaseEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStateOverride"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStatePopulateErr"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBitsChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveExceeded"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerFaultAddrChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPProxyServerError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindSdpStateChangeProcessed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStateMobilityErr"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBandwidthOverbooked"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindInsufficientBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpConfigChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindConfigChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationFailed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpNotifyV6v0Group = tmnxSdpNotifyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpNotifyV6v0Group.setDescription('The  group  of SDP notifications on Alcatel 7x50 SR series systems.')
tmnxSdpObsoletedNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCreated"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDeleted"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCreated"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDeleted"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPCoAError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPSubAuthError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpObsoletedNotifyV6v0Group = tmnxSdpObsoletedNotifyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSdpObsoletedNotifyV6v0Group.setDescription('The  group  of obsoleted SDP objects on Alcatel 7x50 SR series systems.')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SDP-MIB", sdpBindForceVlanVcForwarding=sdpBindForceVlanVcForwarding, dynamicSdpOrigin=dynamicSdpOrigin, pwTemplateIngressIpv6FilterId=pwTemplateIngressIpv6FilterId, sdpClassFwdingEnabled=sdpClassFwdingEnabled, sdpTlsMacAddrLimitAlarmCleared=sdpTlsMacAddrLimitAlarmCleared, pwTemplateIgmpSnpgSrcAddrType=pwTemplateIgmpSnpgSrcAddrType, sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx, sdpBindTlsL2ptStatsPvstTcnBpdusRx=sdpBindTlsL2ptStatsPvstTcnBpdusRx, sdpFCMappingTable=sdpFCMappingTable, pwTemplateIgmpSnpgGrpSrcEntry=pwTemplateIgmpSnpgGrpSrcEntry, sdpBindTlsStpInConfigBpdus=sdpBindTlsStpInConfigBpdus, sdpFCMappingFCName=sdpFCMappingFCName, sdpBindTlsL2ptStatsUdldBpdusTx=sdpBindTlsL2ptStatsUdldBpdusTx, sdpBindTlsMrpPeriodicEnabled=sdpBindTlsMrpPeriodicEnabled, sdpBindTlsMmrpTable=sdpBindTlsMmrpTable, sdpBindTlsMfibAllowedMdaEntry=sdpBindTlsMfibAllowedMdaEntry, sdpBindControlWordBit=sdpBindControlWordBit, sdpAdminStatus=sdpAdminStatus, sdpBandwidthBookingFactor=sdpBandwidthBookingFactor, sdpBindBaseStatsCustId=sdpBindBaseStatsCustId, sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx, pwTemplateCollectAcctStats=pwTemplateCollectAcctStats, sdpBindCpipePeerCasTrunkFraming=sdpBindCpipePeerCasTrunkFraming, sdpOperStatus=sdpOperStatus, sdpMvplsMgmtSdpBndId=sdpMvplsMgmtSdpBndId, sdpBindTlsStpPriority=sdpBindTlsStpPriority, sdpBindTlsL2ptStatsStpRstBpdusTx=sdpBindTlsL2ptStatsStpRstBpdusTx, sdpBindLastStatusChange=sdpBindLastStatusChange, tmnxSvcNewRootSdpBind=tmnxSvcNewRootSdpBind, sdpBindTlsStpInTcnBpdus=sdpBindTlsStpInTcnBpdus, sdpBindApipeAdminConcatCellCount=sdpBindApipeAdminConcatCellCount, sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx, sdpBindTlsStpOperProtocol=sdpBindTlsStpOperProtocol, sdpBindDhcpStatsClntForwdPckts=sdpBindDhcpStatsClntForwdPckts, sdpBindIpipeCeInetAddressType=sdpBindIpipeCeInetAddressType, sdpBindTlsL2ptStatsPagpBpdusTx=sdpBindTlsL2ptStatsPagpBpdusTx, sdpBindTlsMrpRxJoinEmptyEvent=sdpBindTlsMrpRxJoinEmptyEvent, dynamicSdpConfigChanged=dynamicSdpConfigChanged, dynamicSdpBindCreationFailed=dynamicSdpBindCreationFailed, pwTemplateIgmpVersion=pwTemplateIgmpVersion, sdpLastMgmtChange=sdpLastMgmtChange, sdpBindTlsMrpPeriodicTime=sdpBindTlsMrpPeriodicTime, svcL2RteEntry=svcL2RteEntry, dynamicSdpBindConfigChanged=dynamicSdpBindConfigChanged, sdpBindTlsLimitMacMoveLevel=sdpBindTlsLimitMacMoveLevel, svcTlsBgpADPWTempBindRTTblLC=svcTlsBgpADPWTempBindRTTblLC, sdpBindDhcpDescription=sdpBindDhcpDescription, sdpBindIesIfIndex=sdpBindIesIfIndex, sdpBindSplitHorizonGrp=sdpBindSplitHorizonGrp, sdpBindTlsL2ptStatsDtpBpdusTx=sdpBindTlsL2ptStatsDtpBpdusTx, sdpFarEndIpAddress=sdpFarEndIpAddress, sdpBindTlsL2ptStatsOtherInvalidBpdusTx=sdpBindTlsL2ptStatsOtherInvalidBpdusTx, pwTemplateAccountingPolicyId=pwTemplateAccountingPolicyId, sdpBindApipeOperConcatCellCount=sdpBindApipeOperConcatCellCount, tmnxSdpBindTlsL2ptV6v0Group=tmnxSdpBindTlsL2ptV6v0Group, sdpAutoBindBgpInfoTAII=sdpAutoBindBgpInfoTAII, sdpBindTlsMrpRxEmptyEvent=sdpBindTlsMrpRxEmptyEvent, sdpBindTlsStpInRstBpdus=sdpBindTlsStpInRstBpdus, sdpAvailableBandwidth=sdpAvailableBandwidth, tmnxSdpBindTlsV6v0Group=tmnxSdpBindTlsV6v0Group, sdpBindTlsL2ptStatsTable=sdpBindTlsL2ptStatsTable, sdpBindTlsMrpTxLeaveEvent=sdpBindTlsMrpTxLeaveEvent, sdpBindTlsTable=sdpBindTlsTable, tmnxSvcSdpActiveProtocolChange=tmnxSvcSdpActiveProtocolChange, pwTemplateIngressMacFilterId=pwTemplateIngressMacFilterId, sdpBindIngressIpv6FilterId=sdpBindIngressIpv6FilterId, sdpBindDHCPLseStateOverride=sdpBindDHCPLseStateOverride, sdpBindCpipePeerBitrate=sdpBindCpipePeerBitrate, sdpOperFlags=sdpOperFlags, pwTemplateMacAddressLimit=pwTemplateMacAddressLimit, sdpBandwidthOverbooked=sdpBandwidthOverbooked, sdpBindTlsMrpTxJoinInEvent=sdpBindTlsMrpTxJoinInEvent, sdpAccountingPolicyId=sdpAccountingPolicyId, sdpBindInsufficientBandwidth=sdpBindInsufficientBandwidth, sdpBindCollectAcctStats=sdpBindCollectAcctStats, sdpBindTlsMrpEntry=sdpBindTlsMrpEntry, sdpBindTlsStpOperEdge=sdpBindTlsStpOperEdge, sdpBindTlsMfibAllowedMdaTable=sdpBindTlsMfibAllowedMdaTable, sdpBindCpipeLocalDifferential=sdpBindCpipeLocalDifferential, sdpFCMappingLspId=sdpFCMappingLspId, sdpBindTable=sdpBindTable, svcTlsBgpADPWTempBindRTRowStat=svcTlsBgpADPWTempBindRTRowStat, sdpBindBaseStatsEntry=sdpBindBaseStatsEntry, tmnxSvcSdpBindEncapDot1d=tmnxSvcSdpBindEncapDot1d, sdpBindDHCPLseStateMobilityErr=sdpBindDHCPLseStateMobilityErr, sdpBindTlsMrpTable=sdpBindTlsMrpTable, sdpBindTlsMmrpEntry=sdpBindTlsMmrpEntry, sdpBindTlsStpBpduEncap=sdpBindTlsStpBpduEncap, sdpBindTlsStpOutConfigBpdus=sdpBindTlsStpOutConfigBpdus, sdpBindEndPoint=sdpBindEndPoint, sdpBindOperEgressLabel=sdpBindOperEgressLabel, svcTlsBgpADPWTempBindRT=svcTlsBgpADPWTempBindRT, pwTemplateIgmpSnpgRowStatus=pwTemplateIgmpSnpgRowStatus, svcTlsBgpADPWTempBindSHG=svcTlsBgpADPWTempBindSHG, sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx, sdpBindIsICB=sdpBindIsICB, svcTlsBgpADPWTempBindRTEntry=svcTlsBgpADPWTempBindRTEntry, sdpAutoBindBgpInfoAGI=sdpAutoBindBgpInfoAGI, sdpTlsMacAddrLimitAlarmRaised=sdpTlsMacAddrLimitAlarmRaised, sdpBindDhcpStatsClntSnoopdPckts=sdpBindDhcpStatsClntSnoopdPckts, sdpBindTlsMacAgeing=sdpBindTlsMacAgeing, sdpBindCpipePeerUseRtpHeader=sdpBindCpipePeerUseRtpHeader, sdpBindLastMgmtChange=sdpBindLastMgmtChange, sdpBookedBandwidth=sdpBookedBandwidth, pwTemplateIgmpImportPlcy=pwTemplateIgmpImportPlcy, PYSNMP_MODULE_ID=timetraServicesSdpMIBModule, sdpBindTlsMrpRxPdus=sdpBindTlsMrpRxPdus, sdpBindDeleted=sdpBindDeleted, sdpBindClassFwdingOperState=sdpBindClassFwdingOperState, pwTemplateIngressIpFilterId=pwTemplateIngressIpFilterId, sdpBindDHCPProxyServerError=sdpBindDHCPProxyServerError, tmnxSdpTlsBgpV6v0Group=tmnxSdpTlsBgpV6v0Group, sdpBindCpipeLocalPayloadSize=sdpBindCpipeLocalPayloadSize, sdpAdminPathMtu=sdpAdminPathMtu, sdpBindTlsStpPortNum=sdpBindTlsStpPortNum, sdpBindCpipePeerSigPkts=sdpBindCpipePeerSigPkts, sdpKeepAliveHelloTime=sdpKeepAliveHelloTime, sdpBindTlsMrpTxEmptyEvent=sdpBindTlsMrpTxEmptyEvent, sdpBindApipeTable=sdpBindApipeTable, tmnxSvcSdpBindRcvdHigherBriPrio=tmnxSvcSdpBindRcvdHigherBriPrio, sdpInfoEntry=sdpInfoEntry, sdpBindAdminEgressLabel=sdpBindAdminEgressLabel, sdpBindDhcpInfoTable=sdpBindDhcpInfoTable, sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx, svcL2RteSdpBindId=svcL2RteSdpBindId, sdpTlsDHCPSuspiciousPcktRcvd=sdpTlsDHCPSuspiciousPcktRcvd, sdpBindTlsMvplsPruneState=sdpBindTlsMvplsPruneState, sdpBindBaseStatsEgressForwardedPackets=sdpBindBaseStatsEgressForwardedPackets, sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx, sdpBindTlsStpVpnId=sdpBindTlsStpVpnId, sdpKeepAliveHelloRequestTimeout=sdpKeepAliveHelloRequestTimeout, sdpBindCustId=sdpBindCustId, sdpBindDHCPSuspiciousPcktRcvd=sdpBindDHCPSuspiciousPcktRcvd, sdpBindDhcpStatsSrvrSnoopdPckts=sdpBindDhcpStatsSrvrSnoopdPckts, sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx, pwTemplateEntry=pwTemplateEntry, sdpBindTlsL2ptStatsPvstConfigBpdusRx=sdpBindTlsL2ptStatsPvstConfigBpdusRx, sdpBindDhcpStatsTable=sdpBindDhcpStatsTable, sdpLspList=sdpLspList, sdpBindIpipeTable=sdpBindIpipeTable, svcL2RteNextHop=svcL2RteNextHop, tmnxSdpBindMeshV6v0Group=tmnxSdpBindMeshV6v0Group, pwTemplateIgmpSnpgGrpSrcTblLC=pwTemplateIgmpSnpgGrpSrcTblLC, sdpBindRowStatus=sdpBindRowStatus, sdpBindDHCPLeaseEntriesExceeded=sdpBindDHCPLeaseEntriesExceeded, sdpDelivery=sdpDelivery, sdpBindAdminStatus=sdpBindAdminStatus, tmnxSdpBndStpExcepCondStateChng=tmnxSdpBndStpExcepCondStateChng, tmnxSdpBindIpipeV6v0Group=tmnxSdpBindIpipeV6v0Group, sdpBindAdminBandwidth=sdpBindAdminBandwidth, sdpBindTlsBlockOnMeshFail=sdpBindTlsBlockOnMeshFail, pwTemplateMfibAllowedMdaTblLC=pwTemplateMfibAllowedMdaTblLC, sdpSnmpAllowed=sdpSnmpAllowed, sdpBindIngressMacFilterId=sdpBindIngressMacFilterId, sdpBindTlsBpduTransOper=sdpBindTlsBpduTransOper, sdpBindTlsL2ptStatsCdpBpdusRx=sdpBindTlsL2ptStatsCdpBpdusRx, tmnxSdpBindCpipeV6v0Group=tmnxSdpBindCpipeV6v0Group, sdpBindApipeConcatMaxDelay=sdpBindApipeConcatMaxDelay, sdpBindVpnId=sdpBindVpnId, sdpBindTlsStpDesignatedBridge=sdpBindTlsStpDesignatedBridge, sdpAutoSdp=sdpAutoSdp, sdpBindTlsL2ptStatsEntry=sdpBindTlsL2ptStatsEntry, sdpBindStatusChanged=sdpBindStatusChanged, sdpBindTlsMrpRxLeaveEvent=sdpBindTlsMrpRxLeaveEvent, pwTemplateIgmpMcacPolicyName=pwTemplateIgmpMcacPolicyName, sdpBindDhcpStatsClntDropdPckts=sdpBindDhcpStatsClntDropdPckts, svcTlsBgpADPWTempBindEntry=svcTlsBgpADPWTempBindEntry, dynamicSdpStatus=dynamicSdpStatus, sdpBindTlsL2ptStatsStpTcnBpdusTx=sdpBindTlsL2ptStatsStpTcnBpdusTx, pwTemplateIgmpMaxNbrGrps=pwTemplateIgmpMaxNbrGrps, tmnxStpMeshNotInMstRegion=tmnxStpMeshNotInMstRegion, sdpBindDhcpStatsSrvrDropdPckts=sdpBindDhcpStatsSrvrDropdPckts, pwTemplateIgmpMcacUnconstBW=pwTemplateIgmpMcacUnconstBW, tmnxSdpObsoletedNotifyV6v0Group=tmnxSdpObsoletedNotifyV6v0Group, tmnxSvcSdpBindEncapPVST=tmnxSvcSdpBindEncapPVST, sdpBindTlsL2ptStatsOtherBpdusTx=sdpBindTlsL2ptStatsOtherBpdusTx, sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx, sdpBindPwPeerStatusBits=sdpBindPwPeerStatusBits, sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx, sdpBindDhcpStatsClntProxLSPckts=sdpBindDhcpStatsClntProxLSPckts, sdpBindCpipeTable=sdpBindCpipeTable, sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx, sdpMaxBookableBandwidth=sdpMaxBookableBandwidth, sdpBindTlsNumMacAddresses=sdpBindTlsNumMacAddresses, pwTemplateIgmpMcacPrRsvMndBW=pwTemplateIgmpMcacPrRsvMndBW, sdpBindMeshTlsPortState=sdpBindMeshTlsPortState, sdpBindTlsStpPortState=sdpBindTlsStpPortState, sdpBindTlsStpOutMstBpdus=sdpBindTlsStpOutMstBpdus, sdpKeepAliveHelloMessageLength=sdpKeepAliveHelloMessageLength, sdpVlanVcEtype=sdpVlanVcEtype, sdpBindDHCPLseStatePopulateErr=sdpBindDHCPLseStatePopulateErr, sdpBindTlsStpAutoEdge=sdpBindTlsStpAutoEdge, sdpBindTlsMrpRxInEvent=sdpBindTlsMrpRxInEvent, tmnxSdpGroups=tmnxSdpGroups, pwTemplateMacLearning=pwTemplateMacLearning, sdpBindTlsMmrpRegistered=sdpBindTlsMmrpRegistered, sdpKeepAliveOperStatus=sdpKeepAliveOperStatus, sdpBindTlsStpInMstBpdus=sdpBindTlsStpInMstBpdus, sdpBindTlsL2ptStatsStpConfigBpdusTx=sdpBindTlsL2ptStatsStpConfigBpdusTx, sdpAutoBindBgpInfoTable=sdpAutoBindBgpInfoTable, sdpBindTlsL2ptProtocols=sdpBindTlsL2ptProtocols, sdpBindApipeConcatCellAal5Fr=sdpBindApipeConcatCellAal5Fr, sdpBindTlsL2ptStatsStpTcnBpdusRx=sdpBindTlsL2ptStatsStpTcnBpdusRx, pwTemplateEgressMacFilterId=pwTemplateEgressMacFilterId, sdpBindMeshTlsEntry=sdpBindMeshTlsEntry, sdpBindBaseStatsIngDropOctets=sdpBindBaseStatsIngDropOctets, tmnxSdpBindDhcpV6v0Group=tmnxSdpBindDhcpV6v0Group, pwTemplateId=pwTemplateId, sdpBindTlsMrpDroppedPdus=sdpBindTlsMrpDroppedPdus, sdpBindTlsL2ptStatsVtpBpdusTx=sdpBindTlsL2ptStatsVtpBpdusTx, pwTemplateIgmpGenQueryIntvl=pwTemplateIgmpGenQueryIntvl, sdpDeleted=sdpDeleted, sdpFCMappingEntry=sdpFCMappingEntry, sdpBindTlsStpException=sdpBindTlsStpException, sdpPBBEtype=sdpPBBEtype, sdpBindAccountingPolicyId=sdpBindAccountingPolicyId, sdpCollectAcctStats=sdpCollectAcctStats, pwTemplateIgmpLastMembIntvl=pwTemplateIgmpLastMembIntvl, sdpBindTlsStpInBadBpdus=sdpBindTlsStpInBadBpdus, sdpBindMeshTlsNotInMstRegion=sdpBindMeshTlsNotInMstRegion, sdpBindPwPeerStatusBitsChanged=sdpBindPwPeerStatusBitsChanged, sdpBindCreated=sdpBindCreated, sdpBindBaseStatsIngressForwardedPackets=sdpBindBaseStatsIngressForwardedPackets, sdpBindTlsStpForwardTransitions=sdpBindTlsStpForwardTransitions, sdpBindCpipePeerPayloadSize=sdpBindCpipePeerPayloadSize, pwTemplateDiscardUnknownSource=pwTemplateDiscardUnknownSource, sdpKeepAliveHoldDownTime=sdpKeepAliveHoldDownTime, sdpCreationOrigin=sdpCreationOrigin, sdpAutoBindBgpInfoTemplateId=sdpAutoBindBgpInfoTemplateId, sdpBindTlsL2ptStatsVtpBpdusRx=sdpBindTlsL2ptStatsVtpBpdusRx, sdpBindEgressMacFilterId=sdpBindEgressMacFilterId, sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx, sdpBindTlsIgnoreStandbySig=sdpBindTlsIgnoreStandbySig, sdpBindTlsL2ptStatsOtherL2ptBpdusTx=sdpBindTlsL2ptStatsOtherL2ptBpdusTx, sdpClassFwdingDefaultLsp=sdpClassFwdingDefaultLsp, sdpBindTlsStpCustId=sdpBindTlsStpCustId, sdpTraps=sdpTraps, svcL2RtePwTemplateId=svcL2RtePwTemplateId, tmnxSdpAutoBindV6v0Group=tmnxSdpAutoBindV6v0Group, sdpNotifySdpId=sdpNotifySdpId, pwTemplateLimitMacMove=pwTemplateLimitMacMove, sdpBindTlsEntry=sdpBindTlsEntry, svcTlsBgpADPWTempBindTable=svcTlsBgpADPWTempBindTable, tmnxSdpNotifyObjsV6v0Group=tmnxSdpNotifyObjsV6v0Group, sdpBindTlsMrpRxJoinInEvent=sdpBindTlsMrpRxJoinInEvent, pwTemplateMfibAllowedMdaTable=pwTemplateMfibAllowedMdaTable, sdpBindPwFaultInetAddressType=sdpBindPwFaultInetAddressType, sdpBindEntry=sdpBindEntry, sdpId=sdpId, pwTemplateIgmpQueryRespIntvl=pwTemplateIgmpQueryRespIntvl, sdpFCMappingRowStatus=sdpFCMappingRowStatus, sdpBindOperStatus=sdpBindOperStatus, sdpBindTlsLimitMacMove=sdpBindTlsLimitMacMove, sdpBindDhcpStatsEntry=sdpBindDhcpStatsEntry)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SDP-MIB", sdpBindDhcpStatsSrvrForwdPckts=sdpBindDhcpStatsSrvrForwdPckts, sdpAutoBindBgpInfoTableLC=sdpAutoBindBgpInfoTableLC, svcL2RteNextHopType=svcL2RteNextHopType, pwTemplateTable=pwTemplateTable, sdpBindTlsMrpRxNewEvent=sdpBindTlsMrpRxNewEvent, svcTlsBgpADPWTempBindRowStatus=svcTlsBgpADPWTempBindRowStatus, sdpBindTlsMmrpMacAddr=sdpBindTlsMmrpMacAddr, sdpBindTlsMvplsMgmtService=sdpBindTlsMvplsMgmtService, pwTemplateIgmpSnpgGrpAddrType=pwTemplateIgmpSnpgGrpAddrType, sdpBindDhcpStatsGenReleasePckts=sdpBindDhcpStatsGenReleasePckts, sdpLastStatusChange=sdpLastStatusChange, sdpBindTlsL2ptTermination=sdpBindTlsL2ptTermination, sdpBindTlsL2ptStatsOtherL2ptBpdusRx=sdpBindTlsL2ptStatsOtherL2ptBpdusRx, sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx, pwTemplateShgName=pwTemplateShgName, pwTemplateShgRestProtSrcMac=pwTemplateShgRestProtSrcMac, pwTemplateMfibMdaRowStatus=pwTemplateMfibMdaRowStatus, pwTemplateIgmpFastLeave=pwTemplateIgmpFastLeave, pwTemplateMacPinning=pwTemplateMacPinning, sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx, sdpBindTlsL2ptStatsOtherInvalidBpdusRx=sdpBindTlsL2ptStatsOtherInvalidBpdusRx, tmnxSdpConformance=tmnxSdpConformance, sdpBindPwFaultInetAddress=sdpBindPwFaultInetAddress, sdpBindCpipeEntry=sdpBindCpipeEntry, svcL2RteVsiPrefix=svcL2RteVsiPrefix, sdpBindMeshTlsHoldDownTimer=sdpBindMeshTlsHoldDownTimer, sdpBindTlsMacLearning=sdpBindTlsMacLearning, sdpBindTlsDiscardUnknownSource=sdpBindTlsDiscardUnknownSource, sdpBindCpipeLocalTimestampFreq=sdpBindCpipeLocalTimestampFreq, sdpBindTlsL2ptStatsPvstRstBpdusTx=sdpBindTlsL2ptStatsPvstRstBpdusTx, sdpBindDHCPCoAError=sdpBindDHCPCoAError, sdpMetric=sdpMetric, sdpBindSdpStateChangeProcessed=sdpBindSdpStateChangeProcessed, sdpBindMeshTlsTable=sdpBindMeshTlsTable, sdpBindType=sdpBindType, sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx, sdpBindTlsL2ptStatsPvstRstBpdusRx=sdpBindTlsL2ptStatsPvstRstBpdusRx, sdpLdpEnabled=sdpLdpEnabled, pwTemplateShgRestUnprotDstMac=pwTemplateShgRestUnprotDstMac, sdpKeepAliveAdminStatus=sdpKeepAliveAdminStatus, sdpBindTlsMfibMdaRowStatus=sdpBindTlsMfibMdaRowStatus, pwTemplateIgmpSnpgGrpSrcTable=pwTemplateIgmpSnpgGrpSrcTable, sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx, tmnxSvcSdpBindRcvdTCN=tmnxSvcSdpBindRcvdTCN, sdpBindTlsNumStaticMacAddresses=sdpBindTlsNumStaticMacAddresses, sdpInfoTable=sdpInfoTable, svcTlsBgpADPWTempBindLastChngd=svcTlsBgpADPWTempBindLastChngd, svcL2RteTableLastChanged=svcL2RteTableLastChanged, dynamicSdpCreationFailed=dynamicSdpCreationFailed, sdpBindTlsMacAddressLimit=sdpBindTlsMacAddressLimit, sdpBindTlsMrpTableLastChanged=sdpBindTlsMrpTableLastChanged, sdpBindBaseStatsEgressForwardedOctets=sdpBindBaseStatsEgressForwardedOctets, sdpBindTlsMrpTxInEvent=sdpBindTlsMrpTxInEvent, sdpBindApipeEntry=sdpBindApipeEntry, sdpBindBaseStatsIngFwdOctets=sdpBindBaseStatsIngFwdOctets, sdpBindTlsL2ptStatsPagpBpdusRx=sdpBindTlsL2ptStatsPagpBpdusRx, sdpBindTlsMrpTxJoinEmptyEvent=sdpBindTlsMrpTxJoinEmptyEvent, sdpBindTlsMrpJoinTime=sdpBindTlsMrpJoinTime, sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx, sdpRowStatus=sdpRowStatus, sdpLabelSignaling=sdpLabelSignaling, tmnxSdp77x0V6v0Compliance=tmnxSdp77x0V6v0Compliance, sdpBindTlsL2ptStatsCdpBpdusTx=sdpBindTlsL2ptStatsCdpBpdusTx, pwTemplateIgmpSnpgLastChngd=pwTemplateIgmpSnpgLastChngd, pwTemplateIgmpSnpgGrpAddr=pwTemplateIgmpSnpgGrpAddr, pwTemplateUseProvisionedSdp=pwTemplateUseProvisionedSdp, tmnxSdpV6v0Group=tmnxSdpV6v0Group, sdpBindTlsMrpLastChngd=sdpBindTlsMrpLastChngd, tmnxSdp7450V6v0Compliance=tmnxSdp7450V6v0Compliance, sdpBindVlanVcTag=sdpBindVlanVcTag, sdpBindTlsMrpLeaveTime=sdpBindTlsMrpLeaveTime, sdpBindMacPinning=sdpBindMacPinning, sdpBindOperBandwidth=sdpBindOperBandwidth, sdpBindBaseStatsTable=sdpBindBaseStatsTable, sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx, sdpBindTlsL2ptStatsStpConfigBpdusRx=sdpBindTlsL2ptStatsStpConfigBpdusRx, sdpNextFreeId=sdpNextFreeId, pwTemplateIgmpSendQueries=pwTemplateIgmpSendQueries, unacknowledgedTCN=unacknowledgedTCN, sdpBindTlsMvplsMgmtSdpBndId=sdpBindTlsMvplsMgmtSdpBndId, sdpBindTlsMrpTxNewEvent=sdpBindTlsMrpTxNewEvent, sdpKeepAliveNumHelloResponseMessages=sdpKeepAliveNumHelloResponseMessages, sdpBindPwPeerFaultAddrChanged=sdpBindPwPeerFaultAddrChanged, sdpClassFwdingMcLsp=sdpClassFwdingMcLsp, pwTemplateRowStatus=pwTemplateRowStatus, sdpBindPeerVccvCvBits=sdpBindPeerVccvCvBits, sdpTrapsPrefix=sdpTrapsPrefix, pwTemplateIgmpSnpgSrcAddr=pwTemplateIgmpSnpgSrcAddr, sdpCreated=sdpCreated, sdpBindTlsL2ptStatsPvstTcnBpdusTx=sdpBindTlsL2ptStatsPvstTcnBpdusTx, dynamicSdpCreationError=dynamicSdpCreationError, sdpBindCpipeLocalUseRtpHeader=sdpBindCpipeLocalUseRtpHeader, svcTlsBgpADPWTempBindRTTable=svcTlsBgpADPWTempBindRTTable, pwTemplateVlanVcTag=pwTemplateVlanVcTag, sdpBindTlsL2ptStatsOtherBpdusRx=sdpBindTlsL2ptStatsOtherBpdusRx, sdpBindCpipeLocalCasTrunkFraming=sdpBindCpipeLocalCasTrunkFraming, pwTemplateShgDescription=pwTemplateShgDescription, pwTemplateIgmpRobustCount=pwTemplateIgmpRobustCount, tmnxSdpCompliances=tmnxSdpCompliances, tmnxSdpNotifyObjs=tmnxSdpNotifyObjs, sdpBindVcType=sdpBindVcType, sdpBindTlsL2ptStatsUdldBpdusRx=sdpBindTlsL2ptStatsUdldBpdusRx, sdpBindTlsStpPortRole=sdpBindTlsStpPortRole, svcL2RteRouteDistinguisher=svcL2RteRouteDistinguisher, sdpBindDhcpInfoEntry=sdpBindDhcpInfoEntry, pwTemplateLastChanged=pwTemplateLastChanged, sdpBindTlsStpOperBpduEncap=sdpBindTlsStpOperBpduEncap, sdpBindCpipePeerTimestampFreq=sdpBindCpipePeerTimestampFreq, timetraServicesSdpMIBModule=timetraServicesSdpMIBModule, sdpBindTlsMacMoveRateExcdLeft=sdpBindTlsMacMoveRateExcdLeft, sdpBindTlsL2ptStatsStpRstBpdusRx=sdpBindTlsL2ptStatsStpRstBpdusRx, sdpAutoBindBgpInfoEntry=sdpAutoBindBgpInfoEntry, sdpBindTlsStpOutTcnBpdus=sdpBindTlsStpOutTcnBpdus, sdpBindTlsStpAdminPointToPoint=sdpBindTlsStpAdminPointToPoint, sdpBindMeshTlsTransitionState=sdpBindMeshTlsTransitionState, sdpBindEgressIpFilterId=sdpBindEgressIpFilterId, sdpBindTlsStpRootGuard=sdpBindTlsStpRootGuard, sdpBindAdminIngressLabel=sdpBindAdminIngressLabel, sdpBindCpipeLocalSigPkts=sdpBindCpipeLocalSigPkts, pwTemplateMfibAllowedMdaEntry=pwTemplateMfibAllowedMdaEntry, sdpNumEntries=sdpNumEntries, sdpKeepAliveNumHelloRequestMessages=sdpKeepAliveNumHelloRequestMessages, sdpBindTlsL2ptStatsDtpBpdusRx=sdpBindTlsL2ptStatsDtpBpdusRx, sdpBindId=sdpBindId, tmnxSvcTopoChgSdpBindState=tmnxSvcTopoChgSdpBindState, sdpBindTlsMrpTxPdus=sdpBindTlsMrpTxPdus, sdpBindTlsMrpLeaveAllTime=sdpBindTlsMrpLeaveAllTime, sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx, sdpBindTlsStpDesignatedPort=sdpBindTlsStpDesignatedPort, sdpBindTlsStpRxdDesigBridge=sdpBindTlsStpRxdDesigBridge, sdpBindCpipePeerDifferential=sdpBindCpipePeerDifferential, sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx, tmnxSvcTopoChgSdpBindMajorState=tmnxSvcTopoChgSdpBindMajorState, sdpBindApipeSigConcatCellCount=sdpBindApipeSigConcatCellCount, tmnxSdpBindV6v0Group=tmnxSdpBindV6v0Group, sdpBindIpipeCeInetAddress=sdpBindIpipeCeInetAddress, sdpOperPathMtu=sdpOperPathMtu, svcTlsBgpADPWTempBindTblLC=svcTlsBgpADPWTempBindTblLC, sdpBindOperControlWord=sdpBindOperControlWord, sdpOperBandwidth=sdpOperBandwidth, pwTemplateVcType=pwTemplateVcType, tmnxSdpNotifyV6v0Group=tmnxSdpNotifyV6v0Group, sdpBindDhcpStatsClntProxRadPckts=sdpBindDhcpStatsClntProxRadPckts, sdpBindOperIngressLabel=sdpBindOperIngressLabel, sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx=sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx, sdpBindTlsStpAdminStatus=sdpBindTlsStpAdminStatus, sdpBindOperFlags=sdpBindOperFlags, sdpBindTlsStpOutRstBpdus=sdpBindTlsStpOutRstBpdus, sdpBindDhcpStatsGenForceRenPckts=sdpBindDhcpStatsGenForceRenPckts, sdpBindTlsL2ptStatsLastClearedTime=sdpBindTlsL2ptStatsLastClearedTime, sdpBindCpipeLocalBitrate=sdpBindCpipeLocalBitrate, dynamicSdpBindCreationError=dynamicSdpBindCreationError, sdpMvplsMgmtService=sdpMvplsMgmtService, sdpKeepAliveMaxDropCount=sdpKeepAliveMaxDropCount, pwTemplateEgressIpv6FilterId=pwTemplateEgressIpv6FilterId, sdpStatusChanged=sdpStatusChanged, sdpBindApipeConcatCellClp=sdpBindApipeConcatCellClp, sdpBindIpipeEntry=sdpBindIpipeEntry, sdpBindTlsStpRapidStart=sdpBindTlsStpRapidStart, sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx=sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx, pwTemplateMacAgeing=pwTemplateMacAgeing, pwTemplateEgressIpFilterId=pwTemplateEgressIpFilterId, sdpDescription=sdpDescription, svcL2RteTable=svcL2RteTable, sdpBindTlsMacMoveExceeded=sdpBindTlsMacMoveExceeded, tmnxSdpL2V6v0Group=tmnxSdpL2V6v0Group, sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx, sdpAutoBindBgpInfoSAII=sdpAutoBindBgpInfoSAII, sdpBindBaseStatsIngressDroppedPackets=sdpBindBaseStatsIngressDroppedPackets, sdpBindTlsMacMoveNextUpTime=sdpBindTlsMacMoveNextUpTime, tmnxSdpFCV6v0Group=tmnxSdpFCV6v0Group, sdpBindTlsBpduTranslation=sdpBindTlsBpduTranslation, tmnxSdpBindTlsMrpV6v0Group=tmnxSdpBindTlsMrpV6v0Group, sdpBindIngressIpFilterId=sdpBindIngressIpFilterId, tmnxSdpObjs=tmnxSdpObjs, sdpBindDhcpSnoop=sdpBindDhcpSnoop, sdpBindTlsMmrpDeclared=sdpBindTlsMmrpDeclared, sdpBindTlsL2ptStatsPvstConfigBpdusTx=sdpBindTlsL2ptStatsPvstConfigBpdusTx, sdpBindEndPointPrecedence=sdpBindEndPointPrecedence, sdpBindPeerVccvCcBits=sdpBindPeerVccvCcBits, sdpKeepAliveNumLateHelloResponseMessages=sdpKeepAliveNumLateHelloResponseMessages, tmnxSdpApipeV6v0Group=tmnxSdpApipeV6v0Group, sdpAdvertisedVllMtuOverride=sdpAdvertisedVllMtuOverride, sdpBindTlsStpPathCost=sdpBindTlsStpPathCost, pwTemplateTableLastChanged=pwTemplateTableLastChanged, sdpBindDHCPSubAuthError=sdpBindDHCPSubAuthError, sdpBindEgressIpv6FilterId=sdpBindEgressIpv6FilterId)
