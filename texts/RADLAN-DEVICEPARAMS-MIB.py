#
# PySNMP MIB module RADLAN-DEVICEPARAMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/RADLAN-DEVICEPARAMS-MIB
# Produced by pysmi-1.1.3 at Sun Nov 21 00:55:50 2021
# On host fv-az83-627 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, NotificationType, MibIdentifier, iso, Bits, Counter32, Unsigned32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Bits", "Counter32", "Unsigned32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "ModuleIdentity")
TextualConvention, DisplayString, PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress", "TruthValue")
rndDeviceParams = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 2))
rndDeviceParams.setRevisions(('2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rndDeviceParams.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rndDeviceParams.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rndDeviceParams.setOrganization('Radlan - a MARVELL company.\n                              Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rndDeviceParams.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rndDeviceParams.setDescription('This private MIB module defines general Parameters private MIBs.')
rndBridgeType = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("reb", 1), ("ceb", 2), ("ceblb", 3), ("xeb", 4), ("xeb1", 5), ("rebsx", 6), ("rtb", 7), ("ltb", 8), ("tre", 9), ("rtre", 10), ("xtb", 11), ("ete", 12), ("rete", 13), ("ielb", 30), ("leb", 31), ("openGate12", 32), ("openGate4", 33), ("ran", 34), ("itlb", 35), ("gatelinx", 36), ("openGate2", 37), ("ogRanTR", 38), ("rdapter", 39), ("ogVan", 40), ("wanGate", 41), ("ogRubE", 42), ("ogRubT", 43), ("wanGateI", 44), ("vGate4", 45), ("lre", 46), ("mrt", 47), ("vGate2", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBridgeType.setStatus('current')
if mibBuilder.loadTexts: rndBridgeType.setDescription('Identification of the RND bridge type.')
rndInactiveArpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndInactiveArpTimeOut.setStatus('current')
if mibBuilder.loadTexts: rndInactiveArpTimeOut.setDescription('This variable defines the maximum time period that can pass\n       between ARP requests concerning an entry in the ARP table.\n       After this time period, the entry is deleted from the table.')
rndBridgeAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 3))
rndErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndErrorDesc.setStatus('current')
if mibBuilder.loadTexts: rndErrorDesc.setDescription('A textual description of the enterprise-specific trap sent\n        to the Network Management Station by the RND managed device.')
rndErrorSeverity = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("info", 0), ("warning", 1), ("error", 2), ("fatal-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndErrorSeverity.setStatus('current')
if mibBuilder.loadTexts: rndErrorSeverity.setDescription('The severity type of the enterprise-specific trap sent to the\n      Network Management Station by the RND managed device.')
rndBrgVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBrgVersion.setStatus('current')
if mibBuilder.loadTexts: rndBrgVersion.setDescription('The bridge version.')
rndBrgFeatures = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBrgFeatures.setStatus('current')
if mibBuilder.loadTexts: rndBrgFeatures.setDescription('A bit mask that defines the features supported by a particular configuration\n       of this network element:\n       __________________________________________\n       |  Byte 1|Byte 2 |Byte 3 | ....|Byte 20  |\n       |87654321|                     | 87654321|\n       |________|_______________________________|\n\n Byte1 :\n      bit1: TX Block mask\n      bit2: Source Routing Encapulation\n      bit3: SNA/SDLC\n      bit4: Frame Relay\n      bit5: SNMP\n      bit6: LAN Manager\n      bit7: High Performance\n      bit8: Translation\n Byte2 :\n      bit1: DEC Router\n      bit2: IPX Router\n      bit3: IP  Router\n Byte3 :\n      bit1: Dial Up Backup\n      bit2: COD\n      bit3: FACS\n      bit4: Load Balance\n      bit5: Remote Configuration\n      bit6: RIP 2\n      bit7: OSPF\n      bit8: IPX RIP/SAP Filter\n Byte4 :\n      bit1: BootP Server\n      bit2: BootP Client\n      bit3: Compression\n      bit4: V25.bis\n      bit5: ISDN\n      bit6: CODv2\n      bit7: NSPF\n      bit8: UDP Relay\n\n Byte5\n      bit1:VirtualLAN\n      bit2:Static IP Multicast\n      bit3:IP Redundancy\n      bit4:CCM2\n      bit5:ISDN Bonding\n      bit6:Backup Link Selection -- for the  VAN/Rdapter ver 4.0\n      bit7:IP/IPX Forwarding     -- for the  WANgate ver 4.0\n      bit8:Improved COD\n\n Byte6\n      bit1: Server Disptacher\n      bit2: ISDN_US             -- for the  VANSX/WANGATE ver 5.0\n      bit3: PPP\n      bit4: IP Rip Filter       -- for Vgate3\n      bit5: Zero Hop Routing    -- for Vgate3\n      bit6: ISDN Japan\n      bit7: PPP-Security\n\n Byte7\n     bit1: With unmanaged Switch\n     bit2: 2 LANs\n     bit3: OSPF Ver 2.0\n     bit4: FACS Ver 2.0\n     bit5: Multiple WEB Farm\n     bit6: Backup Server\n     bit7: Check Connectivity\n     bit8: WSD multiplexing\n\nByte8\n     bit1: MRT3\n     bit2: WSD Redundancy\n     bit3: DHCP Server\n     bit4: WSD Connection Limit\n     bit5: WSD Distributed System\n     bit6: WSD Load Report\n     bit7: WSD super farm\n     bit8: RadWiz leased line\n\nByte9\n     bit1: PPP IP address negotiaton\n     bit2: DNS\n     bit3: Nat\n     bit4: WSD Static proximity\n     bit5: WSD Dynamic proximity\n     bit6: WSD Proxy\n     bit7: WSD Proximity client\n     bit8: MAC Load balancing\n\nByte10\n     bit1: Unnum Inf\n     bit2: Power Supply redundancy\n     bit3: MRT PPP Compression\n     bit4: ZHR Apolo\n     bit5: Copy port\n     bit6: UDP Relay 2.0\n     bit7: NVRAM\n     bit8: URL table\n\nByte11\n     bit1: URL super farm\n     bit2: NAT on LAN\n     bit3: Remote Con\n     bit4: AP5000\n     bit5: Session tracking\n     bit6: Mirroring\n     bit7: Alias IP\n     bit8: CSD Nat\n\nByte12\n     bit1: content check\n     bit2: mlb virtual ip\n     bit3: reserved RadLan\n     bit4: csd nat exception\n     bit5: statistics monitor\n     bit6: reserved-for-radware          ')
rndBrgLicense = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndBrgLicense.setStatus('current')
if mibBuilder.loadTexts: rndBrgLicense.setDescription('This parameter is used for entering a s/w license number for a device.\n        A separate license number is supplied for each device.')
rndIpHost = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 7))
rndCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 7, 2), )
if mibBuilder.loadTexts: rndCommunityTable.setStatus('current')
if mibBuilder.loadTexts: rndCommunityTable.setDescription('The community table of the agent')
rndCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1), ).setIndexNames((0, "RADLAN-DEVICEPARAMS-MIB", "rndCommunityMngStationAddr"), (1, "RADLAN-DEVICEPARAMS-MIB", "rndCommunityString"))
if mibBuilder.loadTexts: rndCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: rndCommunityEntry.setDescription(' The row definition for this table.')
rndCommunityMngStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityMngStationAddr.setStatus('current')
if mibBuilder.loadTexts: rndCommunityMngStationAddr.setDescription('The management station that will be allowed to\n    communicate with the agent IP address')
rndCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityString.setStatus('current')
if mibBuilder.loadTexts: rndCommunityString.setDescription('The community string with which the management\n     station will communicate with the agent')
rndCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("super", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityAccess.setStatus('current')
if mibBuilder.loadTexts: rndCommunityAccess.setDescription('The allowed access to this management station')
rndCommunityTrapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2", 2), ("snmpV3", 3), ("trapsDisable", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: rndCommunityTrapsEnable.setDescription('Should the agent send traps to the management station,\n     and what version is required')
rndCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: rndCommunityStatus.setDescription('The status of this entry. If the status is invalid the\n    community entry will be deleted')
rndCommunityPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityPortSecurity.setStatus('current')
if mibBuilder.loadTexts: rndCommunityPortSecurity.setDescription('If enabled the device will only receive SNMP messages from the port,\n     through which this NMS is reachable from the device.')
rndCommunityOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityOwner.setStatus('current')
if mibBuilder.loadTexts: rndCommunityOwner.setDescription('The owner of this community')
rndCommunityTrapDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rndCommunityTrapDestPort.setStatus('current')
if mibBuilder.loadTexts: rndCommunityTrapDestPort.setDescription('The transport protocol (usually UDP) port to which traps to the\n    management station represebted by this entry will be sent. The default\n    is the well-known IANA assigned port number for SNMP traps.\n    This object is relevant only if rndCommunityTrapsEnable has a value\n    different from trapsDisable.')
rlMridTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 7, 3), )
if mibBuilder.loadTexts: rlMridTable.setStatus('current')
if mibBuilder.loadTexts: rlMridTable.setDescription('The MRID related configurations table of the agent')
rlMridEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 7, 3, 1), ).setIndexNames((0, "RADLAN-DEVICEPARAMS-MIB", "rndCommunityMngStationAddr"), (1, "RADLAN-DEVICEPARAMS-MIB", "rndCommunityString"))
if mibBuilder.loadTexts: rlMridEntry.setStatus('current')
if mibBuilder.loadTexts: rlMridEntry.setDescription(' The row definition for this table.')
rlMridConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMridConnection.setStatus('current')
if mibBuilder.loadTexts: rlMridConnection.setDescription('The router instance connecting the NMS who accessed the agent\n     through the community table entry corresponding to the keys of this entry.')
rlManagedMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 7, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlManagedMrid.setStatus('current')
if mibBuilder.loadTexts: rlManagedMrid.setDescription('The router instance currently managed by the NMS who accessed the agent\n     through the community table entry corresponding to the keys of this entry ')
rndManagedTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndManagedTime.setStatus('current')
if mibBuilder.loadTexts: rndManagedTime.setDescription('The time will be sent in the format hhmmss')
rndManagedDate = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndManagedDate.setStatus('current')
if mibBuilder.loadTexts: rndManagedDate.setDescription('The date will be sent in the format ddmmyy')
rndBaseBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBaseBootVersion.setStatus('current')
if mibBuilder.loadTexts: rndBaseBootVersion.setDescription('Defines the boot version of the product.')
rndIpHostManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 7, 4))
rndIpHostManagementSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 7, 4, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndIpHostManagementSupported.setStatus('current')
if mibBuilder.loadTexts: rndIpHostManagementSupported.setDescription('ifindex manage supported.')
rndIpHostManagementIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 7, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndIpHostManagementIfIndex.setStatus('current')
if mibBuilder.loadTexts: rndIpHostManagementIfIndex.setDescription('if supported manage , indicate ifindex, if 0 thaen disable')
genGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 11))
genGroupHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWVersion.setStatus('current')
if mibBuilder.loadTexts: genGroupHWVersion.setDescription('Defines the HW version of the product.')
genGroupConfigurationSymbol = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setStatus('current')
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setDescription('Defines the Configuration Symbol attached to any hardware module\n      manufactured by LANNET. One single character A..Z defines the CS\n      version.')
genGroupHWStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("hardwareProblems", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWStatus.setStatus('current')
if mibBuilder.loadTexts: genGroupHWStatus.setDescription('This attribute describes the status of the group hardware as detected\n      by the sensors software.')
rndBasePhysicalAddress = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBasePhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: rndBasePhysicalAddress.setDescription('The Base physical (MAC) address of the device.')
class RlImageIdType(TextualConvention, Integer32):
    description = 'SW images enumeration'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("image1", 1), ("image2", 2))

rndSoftwareFile = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 13))
rndActiveSoftwareFileTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 13, 1), )
if mibBuilder.loadTexts: rndActiveSoftwareFileTable.setStatus('current')
if mibBuilder.loadTexts: rndActiveSoftwareFileTable.setDescription(' The (conceptual) table listing the active software file of the\n          requested unit.')
rndActiveSoftwareFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 13, 1, 1), ).setIndexNames((0, "RADLAN-DEVICEPARAMS-MIB", "rndUnitNumber"))
if mibBuilder.loadTexts: rndActiveSoftwareFileEntry.setStatus('current')
if mibBuilder.loadTexts: rndActiveSoftwareFileEntry.setDescription(' An entry (conceptual row) in the rndActiveSoftwareFileTable.')
rndUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rndUnitNumber.setDescription("The unit number (for stackable devices) or 1 for 'stand alone' device.")
rndActiveSoftwareFile = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 13, 1, 1, 2), RlImageIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndActiveSoftwareFile.setStatus('current')
if mibBuilder.loadTexts: rndActiveSoftwareFile.setDescription('Indicates the current active software file, image1 or image2.')
rndActiveSoftwareFileAfterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("image1", 1), ("image2", 2), ("invalidImage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndActiveSoftwareFileAfterReset.setStatus('current')
if mibBuilder.loadTexts: rndActiveSoftwareFileAfterReset.setDescription("Indicates the software file that will be active after reset (image1 or image2).\n         If an error occurred in the download process, resulting in the corruption\n         of the single software file, The value 'invalidImage' will be returned.\n         This value can not be set by the user.")
rlResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 13, 2), Bits().clone(namedValues=NamedValues(("ok", 0), ("no-stack-integrity", 1), ("downgrade", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlResetStatus.setStatus('current')
if mibBuilder.loadTexts: rlResetStatus.setDescription('A bit mask that specifies system status before reset action is preformed.\n         Reset is prohibited in stackable products if the images selected after\n         reboot are not of the same release version in ALL stack units.\n         Downgrade status specifies that there are some actions to be preformed\n         on the CDB file before reset is preformed.\n         0x0 - OK\n         0x1 - noStackIntegrity\n         0x2 - downgrade')
rndImageSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImageSize.setStatus('current')
if mibBuilder.loadTexts: rndImageSize.setDescription('Max number of sectors currently allocated for image(s).')
rndBackupConfigurationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 2, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndBackupConfigurationEnabled.setStatus('current')
if mibBuilder.loadTexts: rndBackupConfigurationEnabled.setDescription('Specifies whether the device supports backup-config parameters in lcli commands.')
rndImageInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 2, 16))
rndImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 16, 1), )
if mibBuilder.loadTexts: rndImageInfoTable.setStatus('current')
if mibBuilder.loadTexts: rndImageInfoTable.setDescription(' The table contains information about images.')
rndImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1), ).setIndexNames((0, "RADLAN-DEVICEPARAMS-MIB", "rndStackUnitNumber"))
if mibBuilder.loadTexts: rndImageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rndImageInfoEntry.setDescription(' An entry in the rndImageInfoTable.')
rndStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rndStackUnitNumber.setDescription("The unit number (for stackable devices) or 1 for 'stand alone' device.")
rndImage1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage1Name.setStatus('current')
if mibBuilder.loadTexts: rndImage1Name.setDescription('Indicates the file name of image-1 in the system.')
rndImage2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage2Name.setStatus('current')
if mibBuilder.loadTexts: rndImage2Name.setDescription("Indicates the file name of image-2 (if present) in the system.If image-2 is not present show 'no info' text")
rndImage1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage1Version.setStatus('current')
if mibBuilder.loadTexts: rndImage1Version.setDescription('Indicates the version of image-1 in the system.')
rndImage2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage2Version.setStatus('current')
if mibBuilder.loadTexts: rndImage2Version.setDescription("Indicates the version of image-2 (if present) in the system.If image-2 is not present show 'no info' text")
rndImage1Date = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage1Date.setStatus('current')
if mibBuilder.loadTexts: rndImage1Date.setDescription('Indicates the compilation date of image-1 in the system.')
rndImage2Date = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage2Date.setStatus('current')
if mibBuilder.loadTexts: rndImage2Date.setDescription("Indicates the compilation date of image-2 (if present) in the system.If image-2 is not present show 'no info' text")
rndImage1Time = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage1Time.setStatus('current')
if mibBuilder.loadTexts: rndImage1Time.setDescription('Indicates the compilation time of image-1 in the system.')
rndImage2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndImage2Time.setStatus('current')
if mibBuilder.loadTexts: rndImage2Time.setDescription("Indicates the compilation time of image-2 (if present) in the system.If image-2 is not present show 'no info' text")
rndImage1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndImage1Description.setStatus('current')
if mibBuilder.loadTexts: rndImage1Description.setDescription('Indicates the description of image-1 in the system.')
rndImage2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndImage2Description.setStatus('current')
if mibBuilder.loadTexts: rndImage2Description.setDescription('Indicates the description of image-2 in the system.')
rlComponentsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 89, 2, 16, 2), )
if mibBuilder.loadTexts: rlComponentsInfoTable.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoTable.setDescription('The table contains information about components, their streams and baselines in the device images.')
rlComponentsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 2, 16, 2, 1), ).setIndexNames((0, "RADLAN-DEVICEPARAMS-MIB", "rlComponentsInfoStackUnitNumber"), (0, "RADLAN-DEVICEPARAMS-MIB", "rlComponentsInfoImageId"), (1, "RADLAN-DEVICEPARAMS-MIB", "rlComponentsInfoComponent"))
if mibBuilder.loadTexts: rlComponentsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoEntry.setDescription('An entry in the rlComponentsInfoTable.')
rlComponentsInfoStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlComponentsInfoStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoStackUnitNumber.setDescription("The unit number (for stackable devices) or 1 for 'stand alone' device.")
rlComponentsInfoImageId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 2, 1, 2), RlImageIdType())
if mibBuilder.loadTexts: rlComponentsInfoImageId.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoImageId.setDescription('Indicates the image id in the unit')
rlComponentsInfoComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: rlComponentsInfoComponent.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoComponent.setDescription('Indicates the SW component name.')
rlComponentsInfoBaseline = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 2, 16, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlComponentsInfoBaseline.setStatus('current')
if mibBuilder.loadTexts: rlComponentsInfoBaseline.setDescription('Indicates the version control baseline of the SW component name.')
mibBuilder.exportSymbols("RADLAN-DEVICEPARAMS-MIB", rlComponentsInfoImageId=rlComponentsInfoImageId, rlMridEntry=rlMridEntry, rndManagedDate=rndManagedDate, PYSNMP_MODULE_ID=rndDeviceParams, rndCommunityEntry=rndCommunityEntry, rndImage1Date=rndImage1Date, rndBrgFeatures=rndBrgFeatures, rndActiveSoftwareFileAfterReset=rndActiveSoftwareFileAfterReset, rndBasePhysicalAddress=rndBasePhysicalAddress, rndActiveSoftwareFileEntry=rndActiveSoftwareFileEntry, rndImage2Name=rndImage2Name, rndSoftwareFile=rndSoftwareFile, rndImage1Version=rndImage1Version, rndCommunityTrapsEnable=rndCommunityTrapsEnable, rndIpHostManagement=rndIpHostManagement, rlResetStatus=rlResetStatus, rndCommunityStatus=rndCommunityStatus, rndBackupConfigurationEnabled=rndBackupConfigurationEnabled, rndImage1Time=rndImage1Time, rlComponentsInfoStackUnitNumber=rlComponentsInfoStackUnitNumber, rndActiveSoftwareFileTable=rndActiveSoftwareFileTable, RlImageIdType=RlImageIdType, rndInactiveArpTimeOut=rndInactiveArpTimeOut, rndUnitNumber=rndUnitNumber, rndIpHost=rndIpHost, rndCommunityPortSecurity=rndCommunityPortSecurity, rndImage2Time=rndImage2Time, genGroupHWVersion=genGroupHWVersion, rndImageInfo=rndImageInfo, rndImage2Date=rndImage2Date, rlComponentsInfoEntry=rlComponentsInfoEntry, rndImage2Version=rndImage2Version, rndImageInfoTable=rndImageInfoTable, rlComponentsInfoComponent=rlComponentsInfoComponent, rndCommunityMngStationAddr=rndCommunityMngStationAddr, rndCommunityTrapDestPort=rndCommunityTrapDestPort, rndManagedTime=rndManagedTime, rlManagedMrid=rlManagedMrid, rndIpHostManagementIfIndex=rndIpHostManagementIfIndex, rndBridgeAlarm=rndBridgeAlarm, rndBaseBootVersion=rndBaseBootVersion, rndCommunityTable=rndCommunityTable, rndBrgVersion=rndBrgVersion, rndCommunityAccess=rndCommunityAccess, rndCommunityOwner=rndCommunityOwner, genGroup=genGroup, genGroupHWStatus=genGroupHWStatus, rndImage1Description=rndImage1Description, rlComponentsInfoBaseline=rlComponentsInfoBaseline, rndIpHostManagementSupported=rndIpHostManagementSupported, rndBridgeType=rndBridgeType, rndCommunityString=rndCommunityString, rndStackUnitNumber=rndStackUnitNumber, rndErrorSeverity=rndErrorSeverity, rndActiveSoftwareFile=rndActiveSoftwareFile, rlMridTable=rlMridTable, rlMridConnection=rlMridConnection, rndDeviceParams=rndDeviceParams, rndErrorDesc=rndErrorDesc, genGroupConfigurationSymbol=genGroupConfigurationSymbol, rlComponentsInfoTable=rlComponentsInfoTable, rndImageSize=rndImageSize, rndImage2Description=rndImage2Description, rndImageInfoEntry=rndImageInfoEntry, rndImage1Name=rndImage1Name, rndBrgLicense=rndBrgLicense)
