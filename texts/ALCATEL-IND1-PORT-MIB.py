#
# PySNMP MIB module ALCATEL-IND1-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-PORT-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:01:26 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1Port, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Port")
alclnkaggAggIndex, = mibBuilder.importSymbols("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifInErrors, ifEntry, InterfaceIndex, ifIndex, ifOutErrors = mibBuilder.importSymbols("IF-MIB", "ifInErrors", "ifEntry", "InterfaceIndex", "ifIndex", "ifOutErrors")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, NotificationType, Integer32, MibIdentifier, IpAddress, Gauge32, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "Gauge32", "Bits", "TimeTicks", "Counter64")
TextualConvention, DateAndTime, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "MacAddress", "RowStatus")
alcatelIND1PortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1))
alcatelIND1PortMIB.setRevisions(('2013-11-22 00:00', '2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1PortMIB.setRevisionsDescriptions(('Add support for Fiber Channel interface statistics', 'Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1PortMIB.setLastUpdated('201311220000Z')
if mibBuilder.loadTexts: alcatelIND1PortMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1PortMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1PortMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This group contains the configuration information data\n                        for the Ethernet and Fiber Channel Switching Module.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2013 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
class CableState(TextualConvention, Integer32):
    description = 'an enumerated value used to indicate the status of a cable\n                 pair'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ok", 1), ("open", 2), ("short", 3), ("openShort", 4), ("crossTalk", 5), ("unknown", 6))

alcatelIND1PortNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0))
alcatelIND1PortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1))
alcatelIND1PortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2))
esmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1))
physicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2))
ddmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4))
portViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5))
csmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6))
interfaceCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7))
esmStormTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8))
linkAggPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9))
esmDrvTrapDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmDrvTrapDrops.setStatus('current')
if mibBuilder.loadTexts: esmDrvTrapDrops.setDescription('Partitioned port (separated due to errors).')
alaDyingGaspChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspChassisId.setStatus('current')
if mibBuilder.loadTexts: alaDyingGaspChassisId.setDescription('This object specifies the chassis id of the chassis whose NI is going down.')
alaDyingGaspPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("saps", 3), ("all", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: alaDyingGaspPowerSupplyType.setDescription('This object specifies the type of the power supply.')
alaDyingGaspTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspTime.setStatus('current')
if mibBuilder.loadTexts: alaDyingGaspTime.setDescription('This object specifies the time of power failure.')
esmStormViolationThresholdNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearViolation", 1), ("highAlarm", 2), ("lowAlarm", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: esmStormViolationThresholdNotificationType.setStatus('current')
if mibBuilder.loadTexts: esmStormViolationThresholdNotificationType.setDescription('This type defines the trap genrated by storm control feature for high or low threshold.')
esmStormViolationThresholdTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("uunicast", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: esmStormViolationThresholdTrafficType.setStatus('current')
if mibBuilder.loadTexts: esmStormViolationThresholdTrafficType.setDescription('This type defines the traffic for which the trap genrated by storm control feature for high or low threshold.')
esmConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1), )
if mibBuilder.loadTexts: esmConfTable.setStatus('current')
if mibBuilder.loadTexts: esmConfTable.setDescription('A list of ESM Physical Port instances.')
esmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmConfEntry.setStatus('current')
if mibBuilder.loadTexts: esmConfEntry.setDescription('A ESM Physical Port entry.')
esmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortSlot.setStatus('current')
if mibBuilder.loadTexts: esmPortSlot.setDescription('The physical Slot number for this Ethernet Port.\n             Slot number has been added to be used by the private Trap.')
esmPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortIF.setStatus('current')
if mibBuilder.loadTexts: esmPortIF.setDescription('The on-board interface number for this Ethernet Port.\n             Port Number has been added to be used by the private Trap.')
esmPortAutoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("unknown", 4), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7), ("speed20000", 11), ("speed21000", 12), ("speed2000", 13), ("speed4000", 14), ("speed8000", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoSpeed.setStatus('current')
if mibBuilder.loadTexts: esmPortAutoSpeed.setDescription('The automatically detected port line speed\n             of this ESM port.')
esmPortAutoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoDuplexMode.setStatus('current')
if mibBuilder.loadTexts: esmPortAutoDuplexMode.setDescription('The automatically detected port duplex mode\n             of this ESM port.\n\n             Note: GigaEthernet supports only Full duplex mode.\n                   Default value for 10/100 = Half duplex mode.')
esmPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7), ("speedMax100", 8), ("speedMax1000", 9), ("speed2000", 13), ("speed4000", 14), ("speed8000", 15), ("speedMax4000", 16), ("speedMax8000", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgSpeed.setDescription('The configured port line speed of this ESM port.')
esmPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgDuplexMode.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgDuplexMode.setDescription('The configured port duplex mode of this ESM port.\n            Note: GigaEthernet support only full-duplex.')
esmPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: esmPortAdminStatus.setDescription('The desired state of the interface.  The testing(3) state\n                indicates that no operational packets can be passed.  When a\n                managed system initializes, all interfaces start with\n                ifAdminStatus in the down(2) state.  As a result of either\n                explicit management action or per configuration information\n                retained by the managed system, ifAdminStatus is then\n                changed to either the up(1) or testing(3) states (or remains\n                in the down(2) state).')
esmPortLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortLinkUpDownTrapEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortLinkUpDownTrapEnable.setDescription("Indicates whether linkUp/linkDown traps should be generated\n                for this interface.\n\n                                By default, this object should have the value enable(1) for\n                interfaces which do not operate on 'top' of any other\n                interface (as defined in the ifStackTable), and disable(2)\n                otherwise.")
esmPortCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgMaxFrameSize.setDescription('Configure the value of the maximum frame\n                  size allow.\n                                 For 10Mbps the range is upto 1518 bytes.\n                         For ports with speed > 10Mbps the value can extend upto 9216 bytes.')
esmPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAlias.setStatus('current')
if mibBuilder.loadTexts: esmPortAlias.setDescription("This object is an 'alias' name for the interface as\n                specified by a network manager, and provides a non-volatile\n                'handle' for the interface.\n\n                On the first instantiation of an interface, the value of\n                ifAlias associated with that interface is the zero-length\n                string.  As and when a value is written into an instance of\n                ifAlias through a network management set operation, then the\n                agent must retain the supplied value in the ifAlias instance\n                associated with the same interface for as long as that\n                interface remains instantiated, including across all re-\n                initializations/reboots of the network management system,\n                including those which result in a change of the interface's\n                ifIndex value.\n\n                An example of the value which a network manager might store\n                                in this object for a WAN interface is the (Telco's) circuit\n                number/identifier of the interface.\n\n                Some agents may support write-access only for interfaces\n                having particular values of ifType.  An agent which supports\n                write access to this object is required to keep the value in\n                non-volatile storage, but it may limit the length of new\n                values depending on how much storage is already occupied by\n                the current values for other interfaces.")
esmPortCfgPause = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgPause.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgPause.setDescription('This object is used to configure the default\n                                                administrative PAUSE mode for this interface.\n\n                       This object represents the\n                       administratively-configured PAUSE mode for this\n                       interface.  If auto-negotiation is not enabled\n                       or is not implemented for the active MAU\n                       attached to this interface, the value of this\n                       object determines the operational PAUSE mode\n                       of the interface whenever it is operating in\n                       full-duplex mode.  In this case, a set to this\n                       object will force the interface into the\n                       specified mode.\n\n                       If auto-negotiation is implemented and enabled\n                       for the MAU attached to this interface, the\n                       PAUSE mode for this interface is determined by\n                       auto-negotiation, and the value of this object\n                       denotes the mode to which the interface will\n                       automatically revert if/when auto-negotiation is\n                       later disabled. For more information on what\n                       pause values will be autonegotiated based on\n                       settings on this object, please refer to the\n                       truth table in the users manual.\n\n                       Note that the value of this object is ignored\n                       when the interface is not operating in\n                       full-duplex mode.')
esmPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgAutoNegotiation.setDescription('Allow the user to enable or disable the port auto negotiation.')
esmPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3), ("notapplicable", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgCrossover.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgCrossover.setDescription('Allow the user to configure port crossover.\n                 This object is applicable only to copper ports.\n                 For fiber ports notapplicable is returned as a status.')
esmPortCfgHybridActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notapplicable", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortCfgHybridActiveType.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgHybridActiveType.setDescription('This object is only applicable to hybrid ports .\n                  It indicates configured active media type.(the operational media\n                  type may be different if esmPortCfgHybridMode is configured to be\n                  preferredFiber or preferredCopper)\n                  For non hybrid ports notapplicable is returned as a status.')
esmPortCfgHybridMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notapplicable", 0), ("preferredCopper", 1), ("forcedCopper", 2), ("preferredFiber", 3), ("forcedFiber", 4))).clone('preferredFiber')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgHybridMode.setStatus('current')
if mibBuilder.loadTexts: esmPortCfgHybridMode.setDescription('This object is only applicable to hybrid ports.\n                  This allows the user the user to configure the media type\n                  with which the port should come up.\n                  The user can configure the port to come as copper only\n                  or fiber only or either fiber/copper\n                  (with preference to one of them).')
esmPortOperationalHybridType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortOperationalHybridType.setStatus('current')
if mibBuilder.loadTexts: esmPortOperationalHybridType.setDescription('This object is only applicable to hybrid ports .\n                  It indicates  the actual media type that has link up and is or will be\n                  passing traffic. If link is not present the object will return none(0) value.')
esmPortBcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortBcastRateLimitEnable.setDescription("Enable/disable per port broadcast traffic rate limit. When 'enable' value from\n                        esmPortBcastRateLimit object will be applicable to the ingressing broadcast traffic if\n                        the speed is greater than the limit else the default limit for the speed will be\n                        applied. When it is 'disable' no limit is applied to incoming broadcast traffic which\n                        is limited by the port speed.")
esmPortBcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitType.setStatus('current')
if mibBuilder.loadTexts: esmPortBcastRateLimitType.setDescription('The unit applicable to the value in esmPortBcastRateLimit object.')
esmPortBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortBcastRateLimit.setDescription('The value of the maximum broadcast traffic that can flow\n            through the port. The actual value depends on the port speed\n            if the configured values is greater than the current port speed.\n            It is mandatory to set esmPortBcastRateLimitType object along with \n\t    esmPortBcastRateLimit object to set the broadcast rate limit.')
esmPortMcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortMcastRateLimitEnable.setDescription("Enable/disable per port multicast traffic rate limit. When 'enable' value from\n            esmPortMcastRateLimit object will be applicable to the ingressing multicast traffic if\n            the speed is greater than the limit else the default limit for the speed will be\n            applied. When it is 'disable' no limit is applied to incoming multicast traffic which\n            is limited by the port speed.")
esmPortMcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitType.setStatus('current')
if mibBuilder.loadTexts: esmPortMcastRateLimitType.setDescription('The unit applicable to the value in esmPortMcastRateLimit object.')
esmPortMcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortMcastRateLimit.setDescription('The value of the maximum multicast traffic that can flow\n            through the port. The actual value depends on the port speed\n            if the configured values is greater than the current port speed.\n            It is mandatory to set esmPortMcastRateLimitType object along with \n\t    esmPortMcastRateLimit object to set the multicast rate limit.')
esmPortUucastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortUucastRateLimitEnable.setDescription("Enable/disable per port unknown unicast traffic rate limit. When 'enable' value from\n            esmPortUucastRateLimit object will be applicable to the ingressing unknown unicast traffic if\n            the speed is greater than the limit else the default limit for the speed will be\n            applied. When it is 'disable' no limit is applied to incoming unknown unicast traffic which\n            is limited by the port speed.")
esmPortUucastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3), ("default", 4))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitType.setStatus('current')
if mibBuilder.loadTexts: esmPortUucastRateLimitType.setDescription('The unit applicable to the value in esmPortUucastRate object.')
esmPortUucastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortUucastRateLimit.setDescription('The value of the maximum unknown unicast traffic that can flow\n            through the port. The actual value depends on the port speed\n            if the configured values is greater than the current port speed. \n            It is mandatory to set esmPortUucastRateLimitType object along with \n\t    esmPortUucastRateLimit object to set the unknown unicast rate limit.')
esmPortIngressRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortIngressRateLimitEnable.setDescription("Enable/disable per port ingress traffic rate limit. When 'enable' value from\n            esmPortIngressRate object will be applicable to the ingressing traffic (BC, MC, UUC) if\n            the speed is greater than the limit else the default limit for the speed will be\n            applied. When it is 'disable' no limit is applied to incoming traffic which\n            is limited by the port speed.")
esmPortIngressRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortIngressRateLimit.setDescription('The value of the maximum ingress traffic that can flow\n            through the port. The actual value depends on the port speed\n            if the configured value is greater than the current port speed.')
esmPortIngressRateLimitBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitBurst.setStatus('current')
if mibBuilder.loadTexts: esmPortIngressRateLimitBurst.setDescription('The value of ingress traffic burst size in Mbits.')
esmPortEPPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEPPEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortEPPEnable.setDescription('use for port diagnostics')
esmPortEEEEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEEEEnable.setStatus('current')
if mibBuilder.loadTexts: esmPortEEEEnable.setDescription('10Gbase-T Energy Efficent Ethernet port parameter.')
esmPortIsFiberChannelCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIsFiberChannelCapable.setStatus('current')
if mibBuilder.loadTexts: esmPortIsFiberChannelCapable.setDescription('The port can be configured as Fiber Channel interface (yes) or can \n\t    not be configured as Fiber Channel interface.')
esmPortBcastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastThresholdAction.setStatus('current')
if mibBuilder.loadTexts: esmPortBcastThresholdAction.setDescription('The port can be configured to send trap/shutdown if \n        the threshold limit is crossed for Bcast Frames')
esmPortMcastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastThresholdAction.setStatus('current')
if mibBuilder.loadTexts: esmPortMcastThresholdAction.setDescription('The port can be configured to send trap/shutdown if \n        the threshold limit is crossed for Mcast Frames')
esmPortUucastThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("trap", 2), ("shutdown", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastThresholdAction.setStatus('current')
if mibBuilder.loadTexts: esmPortUucastThresholdAction.setDescription('The port can be configured to send trap/shutdown if \n        the threshold limit is crossed Unknown Unicast Frames')
esmPortMinBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinBcastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortMinBcastRateLimit.setDescription('The value of low threshold for bcast.')
esmPortMinMcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinMcastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortMinMcastRateLimit.setDescription('The value of low threshold for mcast.')
esmPortMinUucastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMinUucastRateLimit.setStatus('current')
if mibBuilder.loadTexts: esmPortMinUucastRateLimit.setDescription('The value of low threshold for uucast.')
esmPortBcastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortBcastStormState.setStatus('current')
if mibBuilder.loadTexts: esmPortBcastStormState.setDescription('The state of the port for broadcast Storm Control.')
esmPortMcastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortMcastStormState.setStatus('current')
if mibBuilder.loadTexts: esmPortMcastStormState.setDescription('The state of the port for multi-cast Storm Control.')
esmPortUucastStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("storm", 2), ("trap", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortUucastStormState.setStatus('current')
if mibBuilder.loadTexts: esmPortUucastStormState.setDescription('The state of the port for uucast Storm Control.')
alcetherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alcetherStatsTable.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTable.setDescription('A list of Ethernet statistics entries.')
alcetherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcetherStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsEntry.setDescription('A collection of statistics kept for a particular\n                  Ethernet interface.  As an example, an instance of the\n                  etherStatsPkts object might be named alcetherStatsPkts.1')
alcetherClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcetherClearStats.setStatus('current')
if mibBuilder.loadTexts: alcetherClearStats.setDescription('Used to Clear all Statistics counters.\n                   By default, this object contains zero value.')
alcetherLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherLastClearStats.setStatus('current')
if mibBuilder.loadTexts: alcetherLastClearStats.setDescription('The value of SysUpTime at the time of all\n                   the statistics counters are cleared.\n                   By default, this object contains a zero value.')
alcetherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsCRCAlignErrors.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsCRCAlignErrors.setDescription('The total number of packets received that\n                  had a length (excluding framing bits, but\n                  including FCS octets) of between 64 and 1518\n                  octets, inclusive, but but had either a bad\n                  Frame Check Sequence (FCS) with an integral\n                  number of octets (FCS Error) or a bad FCS with\n                  a non-integral number of octets (Alignment Error).')
alcetherStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxUndersizePkts.setDescription('The total number of packets received that were\n                  less than 64 octets long (excluding framing bits,\n                  but including FCS octets) and were otherwise well\n                  formed.')
alcetherStatsTxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxUndersizePkts.setDescription('The total number of packets transmitted that were\n                  less than 64 octets long (excluding framing bits,\n                  but including FCS octets) and were otherwise well\n                  formed.')
alcetherStatsTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxOversizePkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxOversizePkts.setDescription('The total number of packets transmitted that were\n                  longer than 1518 octets long (excluding framing bits,\n                  but including FCS octets) and were otherwise well\n                  formed.')
alcetherStatsRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxJabbers.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxJabbers.setDescription('The total number of packets received that were\n                  longer than 1518 octets (excluding framing bits,\n                  but including FCS octets), and had either a bad\n                  Frame Check Sequence (FCS) with an integral number\n                  of octets (FCS Error) or a bad FCS with a\n                  non-integral number of octets (Alignment Error).\n\n                  Note that this definition of jabber is different\n                  than the definition in IEEE-802.3 section 8.2.1.5\n                  (10BASE5) and section 10.3.1.4 (10BASE2).  These\n                  documents define jabber as the condition where any\n                  packet exceeds 20 ms.  The allowed range to detect\n                  jabber is between 20 ms and 150 ms.')
alcetherStatsRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCollisions.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxCollisions.setDescription('The best estimate of the total number of collisions\n                  on this Ethernet segment (in reception).\n                  Only for Ethernet Interfaces.\n\n                  The value returned will depend on the location of\n                  the RMON probe. Section 8.2.1.3 (10BASE-5) and\n                  section 10.3.1.3 (10BASE-2) of IEEE standard 802.3\n                  states that a station must detect a collision, in\n                  the receive mode, if three or more stations are\n                  transmitting simultaneously.  A repeater port must\n                  detect a collision when two or more stations are\n                  transmitting simultaneously.  Thus a probe placed on\n                  a repeater port could record more collisions than a\n                  probe connected to a station on the same segment\n                  would.\n\n                  Probe location plays a much smaller role when\n                  considering 10BASE-T.  14.2.1.4 (10BASE-T) of IEEE\n                  standard 802.3 defines a collision as the\n                  simultaneous presence of signals on the DO and RD\n                  circuits (transmitting and receiving at the same\n                  time).  A 10BASE-T station can only detect\n                  collisions when it is transmitting.  Thus probes\n                  placed on a station and a repeater, should report\n                  the same number of collisions.\n\n                  Note also that an RMON probe inside a repeater\n                  should ideally report collisions between the\n                  repeater and one or more other hosts (transmit\n                  collisions as defined by IEEE 802.3k) plus receiver\n                  collisions observed on any coax segments to which\n                  the repeater is connected.')
alcetherStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxCollisions.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxCollisions.setDescription('The best estimate of the total number of collisions\n                  on this Ethernet segment (in transmition).\n                  Only for Ethernet Interfaces.\n\n                  The value returned will depend on the location of\n                  the RMON probe. Section 8.2.1.3 (10BASE-5) and\n                  section 10.3.1.3 (10BASE-2) of IEEE standard 802.3\n                  states that a station must detect a collision, in\n                  the receive mode, if three or more stations are\n                  transmitting simultaneously.  A repeater port must\n                  detect a collision when two or more stations are\n                  transmitting simultaneously.  Thus a probe placed on\n                  a repeater port could record more collisions than a\n                  probe connected to a station on the same segment\n                  would.\n\n                  Probe location plays a much smaller role when\n                  considering 10BASE-T.  14.2.1.4 (10BASE-T) of IEEE\n                  standard 802.3 defines a collision as the\n                  simultaneous presence of signals on the DO and RD\n                  circuits (transmitting and receiving at the same\n                  time).  A 10BASE-T station can only detect\n                  collisions when it is transmitting.  Thus probes\n                  placed on a station and a repeater, should report\n                  the same number of collisions.\n\n                  Note also that an RMON probe inside a repeater\n                  should ideally report collisions between the\n                  repeater and one or more other hosts (transmit\n                  collisions as defined by IEEE 802.3k) plus receiver\n                  collisions observed on any coax segments to which\n                  the repeater is connected.')
alcetherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts64Octets.setDescription('The total number of packets (including bad\n                  packets) received that were 64 octets in length\n                  (excluding framing bits but including FCS octets).')
alcetherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts65to127Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  65 and 127 octets in length inclusive\n                  (excluding framing bits but including FCS octets).')
alcetherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts128to255Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  128 and 255 octets in length inclusive\n                  (excluding framing bits but including FCS octets).')
alcetherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts256to511Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  256 and 511 octets in length inclusive\n                  (excluding framing bits but including FCS octets).')
alcetherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts512to1023Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  512 and 1023 octets in length inclusive\n                  (excluding framing bits but including FCS octets).')
alcetherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts1024to1518Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  1024 and 1518 octets in length inclusive\n                  (excluding framing bits but including FCS octets).\n                  For both Ethernet and GigaEthernet.')
gigaEtherStatsPkts1519to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts1519to4095Octets.setStatus('current')
if mibBuilder.loadTexts: gigaEtherStatsPkts1519to4095Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  1519 and 4095 octets in length inclusive\n                  (excluding framing bits but including FCS octets).\n                  Only for GigaEthernet interfaces')
gigaEtherStatsPkts4096to9215Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts4096to9215Octets.setStatus('current')
if mibBuilder.loadTexts: gigaEtherStatsPkts4096to9215Octets.setDescription('The total number of packets (including bad\n                  packets) received that were between\n                  4096 and 9215 octets in length inclusive\n                  (excluding framing bits but including FCS octets).\n                  Only for GigaEthernet interfaces')
alcetherStatsPkts1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1519to2047Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts1519to2047Octets.setDescription('The total number of frames(including error packets) received\n                   that were between 1519 and 2047 bytes in length inclusive\n                   (excluding framing bits but including FCS bytes).\n                   ')
alcetherStatsPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts2048to4095Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts2048to4095Octets.setDescription('The total number of frames(including error packets) received\n                   that were between 2048 and 4095 bytes in length inclusive\n                   (excluding framing bits but including FCS bytes).\n                   ')
alcetherStatsPkts4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts4096Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsPkts4096Octets.setDescription('The total number of frames(including error packets) received\n                   that were greater than or equal to 4096 bytes in length inclusive\n                   (excluding framing bits but including FCS bytes).\n                   ')
alcetherStatsRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxGiantPkts.setDescription('The total number of frames that are greater than the specified\n                   Max length value, with a valid CRC, dropped because too long.\n                   ')
alcetherStatsRxDribbleNibblePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDribbleNibblePkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxDribbleNibblePkts.setDescription('The total number of frames for which a dribble nibble has been\n                   received and CRC is correct.\n                   ')
alcetherStatsRxLongEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLongEventPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxLongEventPkts.setDescription('The total number of frames for which the Carrier sense exceeds\n                   50000 bit times for 10 Mbits/sec or 80000 bit times for\n                   100 Mbits/sec.')
alcetherStatsRxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxVlanTagPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxVlanTagPkts.setDescription('The total number of frames for which Type/Length field\n                   contains the VLAN protocol identifier (0x8100). ')
alcetherStatsRxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxControlPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxControlPkts.setDescription('The total number of frames that were recognized as control frames.')
alcetherStatsRxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLenChkErrPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxLenChkErrPkts.setDescription('The total number of frames for which the frame length field value\n                   in the Type/Length field does not match the actual data bytes\n                    length and is NOT a type field.')
alcetherStatsRxCodeErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCodeErrPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxCodeErrPkts.setDescription('The total number of frames for which one or more nibbles were\n                   signaled as errors during reception of the frame.')
alcetherStatsRxDvEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDvEventPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxDvEventPkts.setDescription('The total number of frames for which a RX_DV event (packet not\n                   too long enough to be valid packet) has been seen before the\n                    correct frame.')
alcetherStatsRxPrevPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxPrevPktDropped.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsRxPrevPktDropped.setDescription('The total number of frames for which a packet has been dropped\n                   (because of too small IFG) before the correct frame.')
alcetherStatsTx64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx64Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx64Octets.setDescription('The total number of transmitted frames of 64 bytes.')
alcetherStatsTx65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx65to127Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx65to127Octets.setDescription('The total number of transmitted frames that were between\n                   65 and 127 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx128to255Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx128to255Octets.setDescription('The total number of transmitted frames that were between\n                   128 and 255 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx256to511Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx256to511Octets.setDescription('The total number of transmitted frames that were between\n                   256 and 511 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx512to1023Octets.setDescription('The total number of transmitted frames that were between\n                   512 and 1023 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx1024to1518Octets.setDescription('The total number of transmitted frames that were between\n                   1024 and 1518 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1519to2047Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx1519to2047Octets.setDescription('The total number of transmitted frames that were between\n                   1519 and 2047 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx2048to4095Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx2048to4095Octets.setDescription('The total number of transmitted frames that were between\n                   2048 and 4095 bytes in length inclusive (excluding framing bits\n                    but including FCS bytes).')
alcetherStatsTx4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx4096Octets.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTx4096Octets.setDescription('The total number of transmitted frames that were greater than\n                    or equal to 4096 bytes in length and less than Max frame length\n                    (excluding framing bits but including FCS bytes).')
alcetherStatsTxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxRetryCount.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxRetryCount.setDescription('The total number of collisions that the frames faced during\n                   transmission attempts.')
alcetherStatsTxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxVlanTagPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxVlanTagPkts.setDescription('The total number of transmitted frames for which Type/Length field contains the\n                   VLAN protocol identifier (0x8100).')
alcetherStatsTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxControlPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxControlPkts.setDescription('The total number of transmitted frames that were recognised as control frames.')
alcetherStatsTxLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLatePkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxLatePkts.setDescription('The total number of late collisions that occured beyond the collision window.')
alcetherStatsTxTotalBytesOnWire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxTotalBytesOnWire.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxTotalBytesOnWire.setDescription('The total number of bytes transmitted on wire, including all bytes from collided\n                  attempts.')
alcetherStatsTxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLenChkErrPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxLenChkErrPkts.setDescription('The total number of transmitted frames for which the frame length field value\n                  in the Type/Length field does not match the actual data bytes length and\n                   is NOT a Type field.')
alcetherStatsTxExcDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxExcDeferPkts.setStatus('current')
if mibBuilder.loadTexts: alcetherStatsTxExcDeferPkts.setDescription('The total number of frames that were deferred in excess of 6071 nibble-times\n                   in 100 Mbps, 24287 bit-times in 10 Mbps mode. These frames are dropped.(This\n                   stat is only in case of Half duplex and excessive defer bit reset).')
alcLagStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alcLagStatsTable.setStatus('current')
if mibBuilder.loadTexts: alcLagStatsTable.setDescription('A list of Link Aggregation statistics entries.')
alcLagStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alcLagStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alcLagStatsEntry.setDescription('A collection of statistics kept for a particular\n                  Link Aggregation interface. alclnkaggAggIndex is defined\n                  in alclnkaggAggTable; it is of SYNTAX InterfaceIndex\n                  (aka ifIndex) starting at value 40000001 for link agg 1.\n                  Index values received outside of the range for link aggregation\n                  interfaces will return an error.')
alcLagClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcLagClearStats.setStatus('current')
if mibBuilder.loadTexts: alcLagClearStats.setDescription('Used to Clear all Link Aggregation Statistics counters. New stats collection starts immediately.\n                   No meaningful read on this object.')
esmHybridConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: esmHybridConfTable.setStatus('current')
if mibBuilder.loadTexts: esmHybridConfTable.setDescription('A list of inactive hybrid port instances.')
esmHybridConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmHybridConfEntry.setStatus('current')
if mibBuilder.loadTexts: esmHybridConfEntry.setDescription('A ESM Physical Port entry.')
esmHybridPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 8, 9))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speedMax100", 8), ("speedMax1000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgSpeed.setDescription('The configured port line speed of this ESM port.')
esmHybridPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgDuplexMode.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgDuplexMode.setDescription('The configured port duplex mode of this ESM port.\n            Note: GigaEthernet support only full-duplex.')
esmHybridPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgAutoNegotiation.setDescription('Allow the user to enable or disable the port auto negotiation.')
esmHybridPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgCrossover.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgCrossover.setDescription('Allow the user to configure port crossover.')
esmHybridPortCfgFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgFlow.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgFlow.setDescription('This object is used for flow control of hybrid ports. It is similar to the dot3PauseAdminMode\n                  object in dot3PauseTable. It is used to configure pause for fiber media.')
esmHybridPortCfgInactiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmHybridPortCfgInactiveType.setStatus('current')
if mibBuilder.loadTexts: esmHybridPortCfgInactiveType.setDescription('This object is only applicable to hybrid ports .\n                  It indicates the configured inactive media type.')
ddmConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmConfig.setStatus('current')
if mibBuilder.loadTexts: ddmConfig.setDescription('This object enables/disables DDM software feature in the system.')
ddmTrapConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmTrapConfig.setStatus('current')
if mibBuilder.loadTexts: ddmTrapConfig.setDescription('This objects enables/disables traps for DDM warning/alarm threshold violations.')
ddmNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clearViolation", 1), ("highAlarm", 2), ("highWarning", 3), ("lowWarning", 4), ("lowAlarm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ddmNotificationType.setStatus('current')
if mibBuilder.loadTexts: ddmNotificationType.setDescription('This object defines the trap type for monitored DDM parameters.')
ddmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5), )
if mibBuilder.loadTexts: ddmInfoTable.setStatus('deprecated')
if mibBuilder.loadTexts: ddmInfoTable.setDescription('The ddmInfoTable has an entry for each SFP/XFP in the\n         system that supports Digital Diagnostic Monitoring (DDM). The table is\n         indexed by ifIndex. Each row in this table is dynamically added\n         and removed internally by the system based on the presence or absence\n         of DDM capable SFP/XFP components.')
ddmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ddmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ddmInfoEntry.setDescription('Each row represents a particular SFP/XFP that supports Digital\n         Diagnostic Monitoring.\n         Entries are created and deleted internally by the system.')
ddmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTemperature.setStatus('current')
if mibBuilder.loadTexts: ddmTemperature.setDescription('The value of ddmTemperature indicates the current temperature\n         of the SFP/XFP in 1000s of degrees Celsius.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTempLowWarning.setDescription('The value of ddmTempLowWarning indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTempLowAlarm.setDescription('The value of ddmTempLowAlarm indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTempHiWarning.setDescription('The value of ddmTempHiWarning indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTempHiAlarm.setDescription('The value of ddmTempHiAlarm indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: ddmSupplyVoltage.setDescription('The value of ddmSupplyVoltage indicates the current supply\n         voltage of the SFP/XFP in 1000s of Volts (V).\n\t\t A value of -200000 indicates this object is not applicable.')
ddmSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmSupplyVoltageLowWarning.setDescription('The value of ddmSupplyVoltageLowWarning indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmSupplyVoltageLowAlarm.setDescription('The value of ddmSupplyVoltageLowAlarm indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmSupplyVoltageHiWarning.setDescription('The value of ddmSupplyVoltageHiWarning indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmSupplyVoltageHiAlarm.setDescription('The value of ddmSupplyVoltageHiAlarm indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: ddmTxBiasCurrent.setDescription('The value of ddmTxBiasCurrent indicates the current Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA).\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTxBiasCurrentLowWarning.setDescription('The value of ddmTxBiasCurrentLowWarning indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA) that triggers a\n         low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTxBiasCurrentLowAlarm.setDescription('The value of ddmTxBiasCurrentLowAlarm indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA) that triggers a\n         low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTxBiasCurrentHiWarning.setDescription('The value of ddmTxBiasCurrentHiWarning indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s milli-Amperes (mA) that triggers a\n         hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTxBiasCurrentHiAlarm.setDescription('The value of ddmTxBiasCurrentHiAlarm indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s milli-Amperes (mA) that triggers a\n         hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: ddmTxOutputPower.setDescription('The value of ddmTxOutputPower indicates the current Output\n         Power of the SFP/XFP in 1000s of dBm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTxOutputPowerLowWarning.setDescription('The value of ddmTxOutputPowerLowWarning indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTxOutputPowerLowAlarm.setDescription('The value of ddmTxOutputPowerLowAlarm indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmTxOutputPowerHiWarning.setDescription('The value of ddmTxOutputPowerHiWarning indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmTxOutputPowerHiAlarm.setDescription('The value of ddmTxOutputPowerHiAlarm indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: ddmRxOpticalPower.setDescription('The value of ddmRxOpticalPower indicates the current Received\n         Optical Power of the SFP/XFP in 1000s of dBm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmRxOpticalPowerLowWarning.setDescription('The value of ddmRxOpticalPowerLowWarning indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmRxOpticalPowerLowAlarm.setDescription('The value of ddmRxOpticalPowerLowAlarm indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmRxOpticalPowerHiWarning.setDescription('The value of ddmRxOpticalPowerHiWarning indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmRxOpticalPowerHiAlarm.setDescription('The value of ddmRxOpticalPowerHiAlarm indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6), )
if mibBuilder.loadTexts: ddmPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: ddmPortInfoTable.setDescription('The ddmPortInfoTable has an entry for each SFP/XFP in the\n         system that supports Digital Diagnostic Monitoring (DDM). The table is\n         indexed by ifIndex and port channel. Each row in this table is \n         dynamically added\n         and removed internally by the system based on the presence or absence\n         of DDM capable SFP/XFP components.')
ddmPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if mibBuilder.loadTexts: ddmPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ddmPortInfoEntry.setDescription('Each row represents a particular SFP/XFP that supports Digital\n         Diagnostic Monitoring.\n         Entries are created and deleted internally by the system.')
ddmPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setUnits('QSFP/SFP channel number').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortChannel.setStatus('current')
if mibBuilder.loadTexts: ddmPortChannel.setDescription('The channel number of the data that is being read. In the case\n         of a QSFP there will be 4 10 gigabyte channels, for SFP/XFP there \n\t\t will only be one.')
ddmPortTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTemperature.setStatus('current')
if mibBuilder.loadTexts: ddmPortTemperature.setDescription('The value of ddmTemperature indicates the current temperature\n         of the SFP/XFP in 1000s of degrees Celsius.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTempLowWarning.setDescription('The value of ddmTempLowWarning indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTempLowAlarm.setDescription('The value of ddmTempLowAlarm indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTempHiWarning.setDescription('The value of ddmTempHiWarning indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTempHiAlarm.setDescription('The value of ddmTempHiAlarm indicates the temperature\n         of the SFP/XFP in 1000s of degrees Celsius that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: ddmPortSupplyVoltage.setDescription('The value of ddmSupplyVoltage indicates the current supply\n         voltage of the SFP/XFP in 1000s of Volts (V).\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowWarning.setDescription('The value of ddmSupplyVoltageLowWarning indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowAlarm.setDescription('The value of ddmSupplyVoltageLowAlarm indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiWarning.setDescription('The value of ddmSupplyVoltageHiWarning indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiAlarm.setDescription('The value of ddmSupplyVoltageHiAlarm indicates the supply\n         voltage of the SFP/XFP in 1000s of Volts (V) that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxBiasCurrent.setDescription('The value of ddmTxBiasCurrent indicates the current Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA).\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowWarning.setDescription('The value of ddmTxBiasCurrentLowWarning indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA) that triggers a\n         low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowAlarm.setDescription('The value of ddmTxBiasCurrentLowAlarm indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s of milli-Amperes (mA) that triggers a\n         low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiWarning.setDescription('The value of ddmTxBiasCurrentHiWarning indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s milli-Amperes (mA) that triggers a\n         hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiAlarm.setDescription('The value of ddmTxBiasCurrentHiAlarm indicates the Transmit\n         Bias Current of the SFP/XFP in 1000s milli-Amperes (mA) that triggers a\n         hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxOutputPower.setDescription('The value of ddmTxOutputPower indicates the current Output\n         Power of the SFP/XFP in 1000s of dBm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowWarning.setDescription('The value of ddmTxOutputPowerLowWarning indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowAlarm.setDescription('The value of ddmTxOutputPowerLowAlarm indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiWarning.setDescription('The value of ddmTxOutputPowerHiWarning indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiAlarm.setDescription('The value of ddmTxOutputPowerHiAlarm indicates the Output Power\n         of the SFP/XFP in 1000s of dBm that triggers a hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: ddmPortRxOpticalPower.setDescription('The value of ddmRxOpticalPower indicates the current Received\n         Optical Power of the SFP/XFP in 1000s of dBm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowWarning.setDescription('The value of ddmRxOpticalPowerLowWarning indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         low-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowAlarm.setDescription('The value of ddmRxOpticalPowerLowAlarm indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         low-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiWarning.setDescription('The value of ddmRxOpticalPowerHiWarning indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         hi-warning.\n\t\t A value of -200000 indicates this object is not applicable.')
ddmPortRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiAlarm.setDescription('The value of ddmRxOpticalPowerHiAlarm indicates the Received\n         Optical Power of the SFP/XFP in 1000s of dBm that triggers a\n         hi-alarm.\n\t\t A value of -200000 indicates this object is not applicable.')
alcfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7), )
if mibBuilder.loadTexts: alcfcStatsTable.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsTable.setDescription('A list of Fiber Channel statistics entries.')
alcfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcfcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsEntry.setDescription('A collection of statistics kept for a particular\n                  Fiber Channel interface.  As an example, an instance of the\n                  fcStatsPkts object might be named alcfcStatsPkts.1')
alcfcClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcfcClearStats.setStatus('current')
if mibBuilder.loadTexts: alcfcClearStats.setDescription('Used to Clear all Statistics counters.\n                   By default, this object contains zero value.')
alcfcLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcLastClearStats.setStatus('current')
if mibBuilder.loadTexts: alcfcLastClearStats.setDescription('The value of SysUpTime at the time of all\n                   the statistics counters are cleared.\n                   By default, this object contains a zero value.')
alcfcStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsRxUndersizePkts.setDescription('The total number of packets received that were\n                  less than 36 octets long (excluding framing bits,\n                  but including FCS octets) and were otherwise well\n                  formed.')
alcfcStatsTxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsTxBBCreditZeros.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsTxBBCreditZeros.setDescription('The number of transitions in/out of the buffer-to-buffer\n\t\t  credit zero state.')
alcfcStatsRxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxBBCreditZeros.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsRxBBCreditZeros.setDescription('The number of times RX BBCredit drops to zero.')
alcfcStatsLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLinkFailures.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsLinkFailures.setDescription('The number of link failures.')
alcfcStatsLossofSynchs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSynchs.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsLossofSynchs.setDescription('The number of loss of word-sync detected.')
alcfcStatsLossofSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSignals.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsLossofSignals.setDescription('The number of loss of signals detected.')
alcfcStatsPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsPrimSeqProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsPrimSeqProtocolErrors.setDescription('The number of primitive sequence protocol errors detected.')
alcfcStatsInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsInvalidTxWords.setDescription('The number of invalid transmission words. This includes \n\t\t  invalid ordered sets and invalid data words.')
alcfcStatsInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidCRCs.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsInvalidCRCs.setDescription('The number of frames received with an invalid CRC.')
alcfcStatsInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidOrderedSets.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsInvalidOrderedSets.setDescription('The number of invalid ordered sets received at this port.')
alcfcStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsFrameTooLongs.setDescription('The number of frames received at this port for which the\n\t\t  frame length was greater than what was agreed to in\n\t\t  FLOGI/PLOGI.')
alcfcStatsDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsDelimiterErrors.setDescription('The number of invalid delimiters received')
alcfcStatsEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsEncodingDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsEncodingDisparityErrors.setDescription('The number of detected running disparity at 10b/8b level.')
alcfcStatsOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsOtherErrors.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsOtherErrors.setDescription('The number of errors detected but not counted by any other\n\t\t  error counter. This only includes RX frames drops due to zero\n\t\t  RX BBCredits')
esmDrvTrapDropsLink = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortSlot"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"), ("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"))
if mibBuilder.loadTexts: esmDrvTrapDropsLink.setStatus('current')
if mibBuilder.loadTexts: esmDrvTrapDropsLink.setDescription('When the Ethernet code drops the link because of\n            excessive errors, a Trap is sent.')
ddmTemperatureThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTemperature"))
if mibBuilder.loadTexts: ddmTemperatureThresholdViolated.setStatus('current')
if mibBuilder.loadTexts: ddmTemperatureThresholdViolated.setDescription('This object notifies management station if an SFP/XFP/SFP+ temperature has crossed any\n                 threshold or reverted from previous threshold violation for a port represented by ifIndex.\n                 It also provides the current realtime value of SFP/XFP/SFP+ temperature.')
ddmVoltageThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"))
if mibBuilder.loadTexts: ddmVoltageThresholdViolated.setStatus('current')
if mibBuilder.loadTexts: ddmVoltageThresholdViolated.setDescription('This object notifies management station if an SFP/XFP/SFP+ supply voltage has crossed any\n         threshold or reverted from previous threshold violation for a port represented by ifIndex.\n         It also provides the current realtime value of SFP/XFP/SFP+ supply voltage.')
ddmCurrentThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"))
if mibBuilder.loadTexts: ddmCurrentThresholdViolated.setStatus('current')
if mibBuilder.loadTexts: ddmCurrentThresholdViolated.setDescription('This object notifies management station if an SFP/XFP/SFP+ Tx bias current has crossed any\n         threshold or reverted from previous threshold violation for a port represented by ifIndex.\n         It also provides the current realtime value of SFP/XFP/SFP+ Tx bias current.')
ddmTxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"))
if mibBuilder.loadTexts: ddmTxPowerThresholdViolated.setStatus('current')
if mibBuilder.loadTexts: ddmTxPowerThresholdViolated.setDescription('This object notifies management station if an SFP/XFP/SFP+ Tx output power has crossed any\n         threshold or reverted from previous threshold violation for a port represented by ifIndex.\n         It also provides the current realtime value of SFP/XFP/SFP+ Tx output power.')
ddmRxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"))
if mibBuilder.loadTexts: ddmRxPowerThresholdViolated.setStatus('current')
if mibBuilder.loadTexts: ddmRxPowerThresholdViolated.setDescription('This object notifies management station if an SFP/XFP/SFP+ Rx optical power has crossed any\n         threshold or reverted from previous threshold violation for a port represented by ifIndex.\n         It also provides the current realtime value of SFP/XFP/SFP+ Rx optical power.')
portViolationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1), )
if mibBuilder.loadTexts: portViolationTable.setStatus('current')
if mibBuilder.loadTexts: portViolationTable.setDescription('This table contains the port Violations per port.')
portViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "portViolationIfIndex"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationSource"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationEntry.setStatus('current')
if mibBuilder.loadTexts: portViolationEntry.setDescription('Port Violation Entry. The entries in this table are indexed\n               by 3 units,\n               1. ifIndex of the port for which the violation is set\n               2. source of the violation, the feature or module\n               3. reason for the violation (sub reason under each source).')
portViolationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portViolationIfIndex.setStatus('current')
if mibBuilder.loadTexts: portViolationIfIndex.setDescription('The IfIndex of the port that has a violation.')
portViolationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ag", 1), ("qos", 2), ("netsec", 3), ("udld", 4), ("nisup", 5), ("oam", 6), ("lfp", 8), ("lm", 9), ("lbd", 10), ("spb", 11), ("storm", 12), ("stormuucast", 13), ("lldp", 14))))
if mibBuilder.loadTexts: portViolationSource.setStatus('current')
if mibBuilder.loadTexts: portViolationSource.setDescription('Indicates the source of the port violation.\n             The source is the feature or module that has\n             caused the violation. The list is given below\n             1. Initiated by Access Guardian\n             2. Initiated by QOS Policy\n             3. Initiated by Net Sec\n             4. Initiated by UDLD\n             5. Initiated by NI supervison (Fabric Stability).\n             6. initiated by OAM\n             8. initiated by LFP\n             9. initiated by Link Monitor\n             10. initiated by LBD\n             11. initiated by SPB\n             12. initiated by ESM\n             13. initiated by ESM \n             14. initiated by LLDP\n             When there is no value the value of this will be 0')
portViolationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("pvSLLpsShutDown", 1), ("pvSLLpsRestrict", 2), ("pvQosPolicy", 3), ("pvQosSpoofed", 4), ("pvQosBpdu", 5), ("pvQosBgp", 6), ("pvQosOspf", 7), ("pvQosRip", 8), ("pvQosVrrp", 9), ("pvQosDhcp", 10), ("pvQosPim", 11), ("pvQosIsis", 12), ("pvQosDnsReply", 13), ("pvUdld", 14), ("pvOamRfp", 15), ("pvAgLpsDiscard", 16), ("pvLfpShutDown", 17), ("pvLmThreshold", 18), ("pvLbd", 19), ("pvQosDvmrp", 20), ("pvSpbRfp", 21), ("pvEsmStorm", 22), ("pvEsmStormUucast", 23), ("pvLldpShutDown", 24), ("pvRemoteLbd", 25))))
if mibBuilder.loadTexts: portViolationReason.setStatus('current')
if mibBuilder.loadTexts: portViolationReason.setDescription('The Reason for the port violation. This will be application\n            specific. The Reason indicate the violation for the 1st Violation\n            that happened on this port.')
portViolationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portDown", 1), ("portAdminDown", 2), ("portTimerDown", 3), ("portTimerAdminDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationAction.setStatus('current')
if mibBuilder.loadTexts: portViolationAction.setDescription('The action determines on violation, what action will\n            taken. Either the port would be shutdown or Admin Down\n            or wait for the timer to expire and the timerAction\n            will determine what needs to be done.  ')
portViolationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimer.setStatus('current')
if mibBuilder.loadTexts: portViolationTimer.setDescription('If any timer is associated with the violation\n            This is Zero if no timer is associated.')
portViolationTimerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("portNoTimerAction", 0), ("portDownAfterTimer", 1), ("portUpAfterTimer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimerAction.setStatus('current')
if mibBuilder.loadTexts: portViolationTimerAction.setDescription('The Timer related action.\n            If set to portDownAfterTimer, no operation will be performed on\n            the port and the port will be shutdown after timer expiry.\n\n            If set to portUpAfterTimer the port will be shutdown immediately\n            and after the timer expiry the port will brought up..')
portViolationClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portViolationClearPort.setStatus('current')
if mibBuilder.loadTexts: portViolationClearPort.setDescription('When this MIB object is set all violation on the\n            given port will be cleared. The Indices portViolationSource and\n            portViolationReason should be set to 0')
portViolationCfgRecoveryMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationCfgRecoveryMax.setStatus('current')
if mibBuilder.loadTexts: portViolationCfgRecoveryMax.setDescription('The maximum attempts for auto-recovery as configured for the ifindex in alaPvrRecoveryMax. \n            Value 0 means auto recovery is disabled for this port.\n            Value -1 means auto recovery will retry infinitely.\n            ')
portViolationCfgRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationCfgRetryTime.setStatus('current')
if mibBuilder.loadTexts: portViolationCfgRetryTime.setDescription('The time (in seconds) between auto-recovery attempts as configured for the ifindex in alaPvrRetryTime.\n            ')
portViolationRetryRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationRetryRemain.setStatus('current')
if mibBuilder.loadTexts: portViolationRetryRemain.setDescription('The number of remaining auto-recovery attempts.\n            Value -1 means there are infinite retries remaining.\n            ')
alaLinkMonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2), )
if mibBuilder.loadTexts: alaLinkMonConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonConfigTable.setDescription('A list of Link Monitoring Configuration Parameters')
alaLinkMonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonConfigEntry.setDescription('A collection of Link Monitoring configurations kept for a                particular\n            Ethernet interface.')
alaLinkMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatus.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatus.setDescription('Allows the user to enable or disable Link Monitoring on                the port.')
alaLinkMonTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonTimeWindow.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonTimeWindow.setDescription('Indicates the number of seconds the Link will be                       monitored for a port.')
alaLinkMonLinkFlapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkFlapThreshold.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonLinkFlapThreshold.setDescription('Indicaes the number of link flaps allowed for the                      specified port during the time window before the port is                shutdown.')
alaLinkMonLinkErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonLinkErrorThreshold.setDescription('Indicates the number of link errors allowed on Rx for the             specified port during the time window before the port is                shutdown. The errors are the MAC errors that include CRC,               lost frames, error frames, alignment frames.')
alaLinkMonWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonWaitToRestoreTimer.setDescription('Indicates the number of seconds after which the link up                   event is notified to other applications. The timer is started whenever a Link Up is detected on a                   port being monitored.')
alaLinkMonWaitToShutdownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToShutdownTimer.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonWaitToShutdownTimer.setDescription('Indicates the number of milli seconds after which the link down                   event is notified to other applications. The timer is started whenever a Link down is detected on a                   port being monitored.')
alaLinkMonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3), )
if mibBuilder.loadTexts: alaLinkMonStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsTable.setDescription('A list of Link Monitoring Statistics')
alaLinkMonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsEntry.setDescription('A collection of Link Monitoring statistics for a                        particular Ethernet interface.')
alaLinkMonStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsClearStats.setDescription('Used to Clear all Statistics counters.\nThe value reset (1) indicates that Link Monitoring shuold all           statistic counters related to the particular port.\nBy default, this object contains zero value.')
alaLinkMonStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsPortState.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsPortState.setDescription('Indicates the status of the port.\nup(1) means the port is physically up,\n    down(2) means the port is physically down, \n    shutdown(3) means the interface is shutdown because of                      excessive link flaps or link errors.')
alaLinkMonStatsCurrentLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkFlaps.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkFlaps.setDescription('Indicates the number of Link flaps in the current time                 window.')
alaLinkMonStatsCurrentErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentErrorFrames.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentErrorFrames.setDescription('Indicates the number of error frames in the current time                  window.')
alaLinkMonStatsCurrentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentCRCErrors.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentCRCErrors.setDescription('Indicates the number of CRC errors in the current time                   window.')
alaLinkMonStatsCurrentLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLostFrames.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLostFrames.setDescription('Indicates the number of Rx Lost frames in the current                   time window.')
alaLinkMonStatsCurrentAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentAlignErrors.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentAlignErrors.setDescription('Indicates the number of Rx alignment frames in the                     current time window.')
alaLinkMonStatsCurrentLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkErrors.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkErrors.setDescription('Indicates the sum of all the MAC Errors within the                    current time window.\n    i.e., the sum of alaLinkMonStatsCurrentErrorFrames,                 alaLinkMonStatsCurrentCRCErrors,\n    alaLinkMonCurrentLosFrames,                                  alaLinkMonStatsCurrentAlignErrors.')
alaLinkMonStatsTotalLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkFlaps.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkFlaps.setDescription('Indicates the total number of link flaps across all the                 time windows.')
alaLinkMonStatsTotalLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkErrors.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkErrors.setDescription('Indicates the total number of link errors across all the                   time windows.')
alaLFPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4), )
if mibBuilder.loadTexts: alaLFPGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupTable.setDescription('A list of Link Fault Propagation Grooups and their status')
alaLFPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"))
if mibBuilder.loadTexts: alaLFPGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupEntry.setDescription('The list of Link Fault Propagation group id and status for each group')
alaLFPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPGroupId.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupId.setDescription('Indicates the unique group id for Link Fault Propagation (LFP).')
alaLFPGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupAdminStatus.setDescription('Indicates the admin status of the group. disable(2) means link fault propagation,\n    is disbaled. enable(1) means link fault propagation is enabled')
alaLFPGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLFPGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupOperStatus.setDescription('Indicates the operational status of the group. down(2) means all the source ports are down,\n    up(1) means atleast one source port in the group is up.')
alaLFPGroupWaitToShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupWaitToShutdown.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupWaitToShutdown.setDescription('0 - Disable wait to shutdown timer\n5 - 300 - after expiry of this timer all destination ports will be shutdown')
alaLFPGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupRowStatus.setDescription('Row Status for initiating a MIB retrieval request.')
alaLFPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5), )
if mibBuilder.loadTexts: alaLFPConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigTable.setDescription('A list of Link Fault Propagation port and port type of each LFP group')
alaLFPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), (0, "ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"))
if mibBuilder.loadTexts: alaLFPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigEntry.setDescription('A list of Link Fault Propagation port and port type of each LFP group')
alaLFPConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPConfigPort.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigPort.setDescription('Indicates ifindex of source/destination port for a LFP Group.')
alaLFPConfigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination", 1), ("source", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigPortType.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigPortType.setDescription('Indicates the type of port, (1) means the port is destination port and\n(2) means the port is a destination port for a LFP Group.')
alaLFPConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigRowStatus.setDescription('Row Status for initiating a MIB retrieval request.')
alaPvrGlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6))
alaPvrGlobalRecoveryMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalRecoveryMax.setStatus('current')
if mibBuilder.loadTexts: alaPvrGlobalRecoveryMax.setDescription('Auto violation recovery maximum attempts.\n Value 0 means auto recovery is disabled for any ports using this global value.\n Value -1 means auto recovery will retry infinitely for any ports using this global value.\n')
alaPvrGlobalRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalRetryTime.setStatus('current')
if mibBuilder.loadTexts: alaPvrGlobalRetryTime.setDescription('Time (in seconds) between auto violation recovery attempts for any ports using this global value.')
alaPvrGlobalTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrGlobalTrapEnable.setStatus('current')
if mibBuilder.loadTexts: alaPvrGlobalTrapEnable.setDescription('Auto violation recovery global trap configuration')
alaPvrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7), )
if mibBuilder.loadTexts: alaPvrConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaPvrConfigTable.setDescription('A list of auto violation recovery configuration parameters')
alaPvrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaPvrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaPvrConfigEntry.setDescription('Auto violation recovery configuration parameters')
alaPvrRecoveryMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 50)).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrRecoveryMax.setStatus('current')
if mibBuilder.loadTexts: alaPvrRecoveryMax.setDescription('Per port maximum auto violation recovery maximum attempts.\n Value -2 means use value from alaPvrGlobalRecoveryMax \n Value -1 means retry infinitely.\n Value 0 means disable this port.\n Values 1 to 50 mean 1 to 50 auto violation recovery attempts.\n')
alaPvrRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(30, 600), )).clone(-2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPvrRetryTime.setStatus('current')
if mibBuilder.loadTexts: alaPvrRetryTime.setDescription('Per port time (in seconds) between auto violation recovery attempts.\n Value -2 means use value from alaPvrGlobalRetryTime.\n')
alaPortViolationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 8))
portViolationRecoveryReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("clearViolationCmd", 2), ("recoveryTimer", 3), ("adminUpDown", 4), ("nativeRecoveryTimer", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portViolationRecoveryReason.setStatus('current')
if mibBuilder.loadTexts: portViolationRecoveryReason.setDescription('The reason for the recovery from port violation. It can be \n         none (1): none.\n         clearViolationCmd (2): Indicates that the port is recovered from \n             clear violation command.\n         recoveryTimer (3): Indicates that the port is recovered by \n             Recovery Timer mechanism.\n         adminUpDown (4): Indicates that the port is recovered from\n             admin Up/Down.\n         nativeRecoveryTimer (5): Indicates that the port is recovered \n             from the feature that shutdown the interface.')
portViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "portViolationSource"), ("ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationTrap.setStatus('current')
if mibBuilder.loadTexts: portViolationTrap.setDescription('A Trap will be generated when a port violation occurs. The port\n    violation trap will indicate the source of the violation and the\n    reason for the violation.')
portViolationNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "portViolationRecoveryReason"))
if mibBuilder.loadTexts: portViolationNotificationTrap.setStatus('current')
if mibBuilder.loadTexts: portViolationNotificationTrap.setDescription('A Trap will be generated when a port violation is cleared. This trap \n     will indicate the reason for the recovery from violation.')
alaDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if mibBuilder.loadTexts: alaDyingGaspTrap.setStatus('current')
if mibBuilder.loadTexts: alaDyingGaspTrap.setDescription('Dying Gasp trap.')
esmStormThresholdViolationStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdNotificationType"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdTrafficType"))
if mibBuilder.loadTexts: esmStormThresholdViolationStatus.setStatus('current')
if mibBuilder.loadTexts: esmStormThresholdViolationStatus.setDescription('This object notifies management station if User-Port ports gets the ingress traffic inflow\n                 above the configured value.')
esmTdrPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8), )
if mibBuilder.loadTexts: esmTdrPortTable.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortTable.setDescription('The table lists the results of cable diagnostics.')
esmTdrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmTdrPortEntry.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortEntry.setDescription('An entry corresponding to each port.')
esmTdrPortCableState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 1), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortCableState.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortCableState.setDescription('State of a cable as returned by the TDR test.')
esmTdrPortValidPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortValidPairs.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortValidPairs.setDescription('The number of wire pairs in the cable for which the results of this test are valid.')
esmTdrPortPair1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 3), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair1State.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair1State.setDescription('The state for wire pair-1 of the cable as returned by the TDR test.')
esmTdrPortPair1Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair1Length.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair1Length.setDescription('The length for wire pair-1 of the cable at which the fault is detected if the pair is faulty, complete length of the cable otherwise.')
esmTdrPortPair2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 5), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair2State.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair2State.setDescription('The state for wire pair-2 of the cable as returned by the TDR test.')
esmTdrPortPair2Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair2Length.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair2Length.setDescription('The length for wire pair-2 of the cable at which the fault is detected if the pair is faulty, complete length of the cable otherwise.')
esmTdrPortPair3State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 7), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair3State.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair3State.setDescription('The state for wire pair-3 of the cable as returned by the TDR test.')
esmTdrPortPair3Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair3Length.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair3Length.setDescription('The length for wire pair-3 of the cable at which the fault is detected if the pair is faulty, complete length of the cable otherwise.')
esmTdrPortPair4State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 9), CableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair4State.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair4State.setDescription('The state for wire pair-4 of the cable as returned by the TDR test.')
esmTdrPortPair4Length = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortPair4Length.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortPair4Length.setDescription('The length for wire pair-4 of the cable at which the fault is detected if the pair is faulty, complete length of the cable otherwise.')
esmTdrPortFuzzLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortFuzzLength.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortFuzzLength.setDescription('The error in the estimated length of the cable (as returned by TDR test).')
esmTdrPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmTdrPortTest.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortTest.setDescription('Object used to start a TDR test on the port. When configured as on, it initiates a TDR test on the port. A read operation on this object always returns the value off.')
esmTdrPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmTdrPortClearStats.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortClearStats.setDescription('Used to Clear TDR stats.\n\t\t   By default, this object contains zero value.')
esmTdrPortResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("fail", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmTdrPortResult.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortResult.setDescription('Used to give the status of BCM API,whether API able to execute TDR test successfully or failed to executethe TDR test.')
interfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1), )
if mibBuilder.loadTexts: interfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: interfaceStatsTable.setDescription('Expansion for ifEntry.')
interfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1), )
ifEntry.registerAugmentions(("ALCATEL-IND1-PORT-MIB", "interfaceStatsEntry"))
interfaceStatsEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: interfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceStatsEntry.setDescription('An entry of interfaceStatsTable')
inBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: inBitsPerSec.setDescription('The average number of Bits Received per second')
outBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: outBitsPerSec.setDescription('The average number of Bits Transmitted per second')
ifInPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInPauseFrames.setStatus('current')
if mibBuilder.loadTexts: ifInPauseFrames.setDescription('The average number of Pause Frames Received per second')
ifOutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: ifOutPauseFrames.setDescription('The average number of Pause Frames Transmitted per second')
ifInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: ifInPktsPerSec.setDescription('The average number of Packet Received per second')
ifOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: ifOutPktsPerSec.setDescription('The average number of Packets Transmitted per second')
esmPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9), )
if mibBuilder.loadTexts: esmPortModeTable.setStatus('current')
if mibBuilder.loadTexts: esmPortModeTable.setDescription('A list of interface entries.  This table contains\n            Configured Port mode and operational port mode')
esmPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmPortModeEntry.setStatus('current')
if mibBuilder.loadTexts: esmPortModeEntry.setDescription('An entry containing additional management information\n            applicable to a particular interface with respect to port mode')
esmConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode40Gig", 1), ("mode4X10Gig", 2), ("modeAuto", 3))).clone('modeAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmConfiguredMode.setStatus('current')
if mibBuilder.loadTexts: esmConfiguredMode.setDescription('The desired mode of the interface. When a\n            managed system initializes, all interfaces start with\n            ifConfiguredMode in the Auto state.  \n            User is not allowed to configure this parameter for subport')
esmOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode40Gig", 1), ("mode4X10Gig", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmOperationalMode.setStatus('current')
if mibBuilder.loadTexts: esmOperationalMode.setDescription(' Operational mode of the port ')
esmPortBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10), )
if mibBuilder.loadTexts: esmPortBeaconTable.setStatus('current')
if mibBuilder.loadTexts: esmPortBeaconTable.setDescription('A list of interface entries.  This table contains\n            Beacon Admin State Beacon Led Color and Beacon Led mode')
esmPortBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmPortBeaconEntry.setStatus('current')
if mibBuilder.loadTexts: esmPortBeaconEntry.setDescription('An entry containing additional management information\n            applicable to a particular interface with respect to Beacon')
esmBeaconAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconAdminState.setStatus('current')
if mibBuilder.loadTexts: esmBeaconAdminState.setDescription('The beacon admin state of the interface. When a\n            managed system initializes, all interfaces start with\n            esmBeaconAdminState in disable state')
esmBeaconLedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ledOff", 1), ("ledBlue", 2), ("ledGreen", 3), ("ledAqua", 4), ("ledRed", 5), ("ledMagenta", 6), ("ledYellow", 7), ("ledWhite", 8))).clone('ledMagenta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconLedColor.setStatus('current')
if mibBuilder.loadTexts: esmBeaconLedColor.setDescription(' Beacon Led Color of the port ')
esmBeaconLedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ledModeSolid", 1), ("ledModeActivity", 2))).clone('ledModeActivity')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconLedMode.setStatus('current')
if mibBuilder.loadTexts: esmBeaconLedMode.setDescription(' Beacon Led Mode of the port ')
esmBeaconRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: esmBeaconRowStatus.setStatus('current')
if mibBuilder.loadTexts: esmBeaconRowStatus.setDescription('Row status to control creation/deletion of the Beacon')
alcatelIND1PortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1))
alcatelIND1PortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2))
esmConfPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "esmDetectedConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcPortNotificationGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmInfoGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationsGroup"), ("ALCATEL-IND1-PORT-MIB", "esmConfTrapGroup"), ("ALCATEL-IND1-PORT-MIB", "esmHybridConfEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "esmConfEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "csmConfTrapGroup"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortGroup"), ("ALCATEL-IND1-PORT-MIB", "portViolationEntryGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmPortInfoGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPvrConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "interfaceStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaPortViolationTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfPortCompliance = esmConfPortCompliance.setStatus('current')
if mibBuilder.loadTexts: esmConfPortCompliance.setDescription('The compliance statement for the configuration of Ethernet\n            ports.')
alcEtherStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcEtherStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsGroup"), ("ALCATEL-IND1-PORT-MIB", "esmPortFiberstatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsCompliance = alcEtherStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: alcEtherStatsCompliance.setDescription('The compliance statement for the Statistics of the Ethernet\n            ports.')
alcLagStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcLagStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcLagStatsCompliance = alcLagStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: alcLagStatsCompliance.setDescription('The compliance statement for the Statistics of the Link Aggregation\n            ports.')
esmConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgMaxFrameSize"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgPause"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitBurst"), ("ALCATEL-IND1-PORT-MIB", "esmPortEPPEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortEEEEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastThresholdAction"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinBcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinMcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMinUucastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastStormState"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastStormState"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastStormState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfMIBGroup = esmConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: esmConfMIBGroup.setDescription('A collection of objects to support the management of global\n            configuration parameters of the Ethernet ports.')
esmDetectedConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAutoSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortAutoDuplexMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmDetectedConfMIBGroup = esmDetectedConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: esmDetectedConfMIBGroup.setDescription('A collection of objects to support the Detected\n            configuration parameters of the Ethernet ports.')
alcEtherStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcetherClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherLastClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsCRCAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxOversizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxJabbers"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts1519to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts4096to9215Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxGiantPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDribbleNibblePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLongEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCodeErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDvEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxPrevPktDropped"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxRetryCount"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLatePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxTotalBytesOnWire"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxExcDeferPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsMIBGroup = alcEtherStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alcEtherStatsMIBGroup.setDescription('A collection of objects to provide all the statistics related\n             to the Ethernet and GigaEthernert ports.')
alcPortNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDropsLink"), ("ALCATEL-IND1-PORT-MIB", "portViolationTrap"), ("ALCATEL-IND1-PORT-MIB", "portViolationNotificationTrap"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTrap"), ("ALCATEL-IND1-PORT-MIB", "esmStormThresholdViolationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcPortNotificationGroup = alcPortNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alcPortNotificationGroup.setDescription('The Port MIB Notification Group.')
ddmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmInfoGroup = ddmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ddmInfoGroup.setDescription('A collection of objects to provide digital diagnostics information\n                         related to SFPs, XFPs, and SFP+s.')
ddmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmTrapConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmConfigGroup = ddmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ddmConfigGroup.setDescription('A collection of objects to allow configuration of DDM and DDM traps.')
ddmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperatureThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmVoltageThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmCurrentThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmTxPowerThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmRxPowerThresholdViolated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmNotificationsGroup = ddmNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ddmNotificationsGroup.setDescription('A collection of notifications used to indicate DDM threshold violations.')
esmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdNotificationType"), ("ALCATEL-IND1-PORT-MIB", "esmStormViolationThresholdTrafficType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfTrapGroup = esmConfTrapGroup.setStatus('current')
if mibBuilder.loadTexts: esmConfTrapGroup.setDescription('Partitioned port (separated due to errors).')
esmHybridConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgFlow"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgInactiveType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmHybridConfEntryGroup = esmHybridConfEntryGroup.setStatus('current')
if mibBuilder.loadTexts: esmHybridConfEntryGroup.setDescription('A list of inactive hybrid port instances.')
esmConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "esmPortAlias"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridActiveType"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("ALCATEL-IND1-PORT-MIB", "esmPortLinkUpDownTrapEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortOperationalHybridType"), ("ALCATEL-IND1-PORT-MIB", "esmPortSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfEntryGroup = esmConfEntryGroup.setStatus('current')
if mibBuilder.loadTexts: esmConfEntryGroup.setDescription('A list of ESM Physical Port instances.')
portViolationEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-PORT-MIB", "portViolationAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimer"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimerAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationClearPort"), ("ALCATEL-IND1-PORT-MIB", "portViolationCfgRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "portViolationCfgRetryTime"), ("ALCATEL-IND1-PORT-MIB", "portViolationRetryRemain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portViolationEntryGroup = portViolationEntryGroup.setStatus('current')
if mibBuilder.loadTexts: portViolationEntryGroup.setDescription('This table contains the port Violations per port.')
ddmPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmPortTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmPortInfoGroup = ddmPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ddmPortInfoGroup.setDescription('A collection of objects to provide digital diagnostics information\n                         related to SFPs, XFPs, and SFP+s.')
alaLinkMonConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 14)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonTimeWindow"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkFlapThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkErrorThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToRestoreTimer"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToShutdownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonConfigMIBGroup = alaLinkMonConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonConfigMIBGroup.setDescription('A collection of objects to support the Link Monitoring Configurations on the ports.')
alaLinkMonStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 15)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsClearStats"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsPortState"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentErrorFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentCRCErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLostFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonStatsMIBGroup = alaLinkMonStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaLinkMonStatsMIBGroup.setDescription('A collection of objects to provide all the statistics related\n             to the Link Monitoring on the ports.')
alaLFPGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 16)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupOperStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupWaitToShutdown"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPGroupMIBGroup = alaLFPGroupMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaLFPGroupMIBGroup.setDescription('A collection of objects to configure Link Fault Propagation Group,\n             Wait to shutdown timer and admin staus of group.')
alaLFPConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 17)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPortType"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPConfigMIBGroup = alaLFPConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaLFPConfigMIBGroup.setDescription('A collection of objects to configure a port and port type for a Link Fault Propagation Group.')
csmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 18)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csmConfTrapGroup = csmConfTrapGroup.setStatus('current')
if mibBuilder.loadTexts: csmConfTrapGroup.setDescription('A collection of objects for chassis supervision traps')
esmTdrPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 19)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmTdrPortCableState"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortValidPairs"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair1State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair1Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair2State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair2Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair3State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair3Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair4State"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortPair4Length"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortFuzzLength"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortTest"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortClearStats"), ("ALCATEL-IND1-PORT-MIB", "esmTdrPortResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmTdrPortGroup = esmTdrPortGroup.setStatus('current')
if mibBuilder.loadTexts: esmTdrPortGroup.setDescription('A collection of objects to provide TDR information')
alcfcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 20)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcfcClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcfcLastClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsDelimiterErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsEncodingDisparityErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsFrameTooLongs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidCRCs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidOrderedSets"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsInvalidTxWords"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLinkFailures"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLossofSignals"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsRxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsTxBBCreditZeros"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsLossofSynchs"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsOtherErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsPrimSeqProtocolErrors"), ("ALCATEL-IND1-PORT-MIB", "alcfcStatsRxBBCreditZeros"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcfcStatsGroup = alcfcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alcfcStatsGroup.setDescription('A collection of objects for chassis supervision traps')
esmPortFiberstatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 21)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortIsFiberChannelCapable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortFiberstatsGroup = esmPortFiberstatsGroup.setStatus('current')
if mibBuilder.loadTexts: esmPortFiberstatsGroup.setDescription('A collection of objects for chassis supervision traps')
alaPvrGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 22)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalRetryTime"), ("ALCATEL-IND1-PORT-MIB", "alaPvrGlobalTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPvrGlobalConfigGroup = alaPvrGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaPvrGlobalConfigGroup.setDescription('A collection of global pvr objects')
esmPortModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 23)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmConfiguredMode"), ("ALCATEL-IND1-PORT-MIB", "esmOperationalMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortModeGroup = esmPortModeGroup.setStatus('current')
if mibBuilder.loadTexts: esmPortModeGroup.setDescription('A collection of objects for port splitter mode')
esmPortBeaconGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 24)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmBeaconAdminState"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconLedColor"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconLedMode"), ("ALCATEL-IND1-PORT-MIB", "esmBeaconRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmPortBeaconGroup = esmPortBeaconGroup.setStatus('current')
if mibBuilder.loadTexts: esmPortBeaconGroup.setDescription('A collection of objects for port Beacon ')
alaPvrConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 25)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaPvrRecoveryMax"), ("ALCATEL-IND1-PORT-MIB", "alaPvrRetryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPvrConfigGroup = alaPvrConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaPvrConfigGroup.setDescription('A collection of pvr objects')
interfaceStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 26)).setObjects(("ALCATEL-IND1-PORT-MIB", "inBitsPerSec"), ("ALCATEL-IND1-PORT-MIB", "outBitsPerSec"), ("ALCATEL-IND1-PORT-MIB", "ifInPauseFrames"), ("ALCATEL-IND1-PORT-MIB", "ifOutPauseFrames"), ("ALCATEL-IND1-PORT-MIB", "ifInPktsPerSec"), ("ALCATEL-IND1-PORT-MIB", "ifOutPktsPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    interfaceStatsMIBGroup = interfaceStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: interfaceStatsMIBGroup.setDescription('A collection of objects to display the interface counters details of the ports')
alaPortViolationTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 27)).setObjects(("ALCATEL-IND1-PORT-MIB", "portViolationRecoveryReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPortViolationTrapGroup = alaPortViolationTrapGroup.setStatus('current')
if mibBuilder.loadTexts: alaPortViolationTrapGroup.setDescription('A collection of global pvr objects')
alcLagStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 28)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcLagClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcLagStatsMIBGroup = alcLagStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alcLagStatsMIBGroup.setDescription('A collection of link aggregation objects')
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MIB", ifOutPktsPerSec=ifOutPktsPerSec, esmTdrPortPair4Length=esmTdrPortPair4Length, alcetherStatsTx512to1023Octets=alcetherStatsTx512to1023Octets, alaDyingGaspTime=alaDyingGaspTime, alcetherStatsEntry=alcetherStatsEntry, alcetherStatsRxLenChkErrPkts=alcetherStatsRxLenChkErrPkts, esmTdrPortEntry=esmTdrPortEntry, ddmNotificationsGroup=ddmNotificationsGroup, esmHybridPortCfgFlow=esmHybridPortCfgFlow, alcetherStatsRxJabbers=alcetherStatsRxJabbers, alcetherStatsTx65to127Octets=alcetherStatsTx65to127Octets, esmPortMcastRateLimit=esmPortMcastRateLimit, esmTdrPortPair2Length=esmTdrPortPair2Length, esmPortIngressRateLimit=esmPortIngressRateLimit, ddmTxBiasCurrent=ddmTxBiasCurrent, alcetherStatsPkts128to255Octets=alcetherStatsPkts128to255Octets, alcfcStatsInvalidTxWords=alcfcStatsInvalidTxWords, ddmConfig=ddmConfig, alcetherStatsTxOversizePkts=alcetherStatsTxOversizePkts, alcetherStatsRxUndersizePkts=alcetherStatsRxUndersizePkts, alaLFPConfigPortType=alaLFPConfigPortType, alcfcStatsLinkFailures=alcfcStatsLinkFailures, ddmPortTxBiasCurrentLowAlarm=ddmPortTxBiasCurrentLowAlarm, alaDyingGaspChassisId=alaDyingGaspChassisId, alaPvrConfigGroup=alaPvrConfigGroup, interfaceCounters=interfaceCounters, esmConfTrap=esmConfTrap, esmPortBeaconEntry=esmPortBeaconEntry, ddmInfoGroup=ddmInfoGroup, alcetherStatsTxVlanTagPkts=alcetherStatsTxVlanTagPkts, esmTdrPortPair1Length=esmTdrPortPair1Length, ddmPortSupplyVoltageHiAlarm=ddmPortSupplyVoltageHiAlarm, esmStormViolationThresholdTrafficType=esmStormViolationThresholdTrafficType, ddmTxOutputPowerLowAlarm=ddmTxOutputPowerLowAlarm, alcfcStatsInvalidCRCs=alcfcStatsInvalidCRCs, esmTdrPortResult=esmTdrPortResult, alcetherStatsRxPrevPktDropped=alcetherStatsRxPrevPktDropped, alcetherStatsTxRetryCount=alcetherStatsTxRetryCount, alcetherStatsTxControlPkts=alcetherStatsTxControlPkts, alcfcStatsInvalidOrderedSets=alcfcStatsInvalidOrderedSets, alcetherStatsTable=alcetherStatsTable, ddmPortTemperature=ddmPortTemperature, alcfcStatsOtherErrors=alcfcStatsOtherErrors, esmStormTrap=esmStormTrap, alcLagStatsEntry=alcLagStatsEntry, alaLinkMonStatsCurrentLostFrames=alaLinkMonStatsCurrentLostFrames, ddmNotificationType=ddmNotificationType, esmTdrPortCableState=esmTdrPortCableState, esmPortCfgCrossover=esmPortCfgCrossover, alcetherStatsTxLenChkErrPkts=alcetherStatsTxLenChkErrPkts, ddmPortRxOpticalPower=ddmPortRxOpticalPower, alcEtherStatsMIBGroup=alcEtherStatsMIBGroup, interfaceStatsTable=interfaceStatsTable, ddmPortInfoEntry=ddmPortInfoEntry, esmPortBcastRateLimitEnable=esmPortBcastRateLimitEnable, alaDyingGaspTrap=alaDyingGaspTrap, esmConfiguredMode=esmConfiguredMode, ddmPortRxOpticalPowerHiWarning=ddmPortRxOpticalPowerHiWarning, ddmPortTxBiasCurrent=ddmPortTxBiasCurrent, esmTdrPortFuzzLength=esmTdrPortFuzzLength, esmTdrPortPair1State=esmTdrPortPair1State, esmHybridPortCfgDuplexMode=esmHybridPortCfgDuplexMode, alaLFPConfigRowStatus=alaLFPConfigRowStatus, alaDyingGaspPowerSupplyType=alaDyingGaspPowerSupplyType, portViolationRetryRemain=portViolationRetryRemain, alcfcStatsDelimiterErrors=alcfcStatsDelimiterErrors, alcetherStatsRxVlanTagPkts=alcetherStatsRxVlanTagPkts, alcfcStatsGroup=alcfcStatsGroup, ddmCurrentThresholdViolated=ddmCurrentThresholdViolated, esmDetectedConfMIBGroup=esmDetectedConfMIBGroup, esmConfTable=esmConfTable, esmPortUucastThresholdAction=esmPortUucastThresholdAction, esmDrvTrapDropsLink=esmDrvTrapDropsLink, esmOperationalMode=esmOperationalMode, esmHybridPortCfgAutoNegotiation=esmHybridPortCfgAutoNegotiation, portViolationClearPort=portViolationClearPort, alcetherStatsPkts64Octets=alcetherStatsPkts64Octets, ddmTxOutputPowerLowWarning=ddmTxOutputPowerLowWarning, alaLFPGroupRowStatus=alaLFPGroupRowStatus, alcatelIND1PortMIBGroups=alcatelIND1PortMIBGroups, alcfcStatsTable=alcfcStatsTable, ddmPortSupplyVoltageHiWarning=ddmPortSupplyVoltageHiWarning, linkAggPort=linkAggPort, ddmPortSupplyVoltage=ddmPortSupplyVoltage, portViolationTrap=portViolationTrap, esmPortUucastRateLimitType=esmPortUucastRateLimitType, esmTdrPortTable=esmTdrPortTable, portViolationEntryGroup=portViolationEntryGroup, alcetherStatsTx64Octets=alcetherStatsTx64Octets, esmBeaconLedColor=esmBeaconLedColor, esmPortCfgHybridActiveType=esmPortCfgHybridActiveType, ddmPortTempHiWarning=ddmPortTempHiWarning, esmPortIsFiberChannelCapable=esmPortIsFiberChannelCapable, csmConfTrap=csmConfTrap, alcetherStatsRxControlPkts=alcetherStatsRxControlPkts, esmPortCfgHybridMode=esmPortCfgHybridMode, ddmInfoTable=ddmInfoTable, alcetherStatsPkts4096Octets=alcetherStatsPkts4096Octets, alcetherStatsPkts256to511Octets=alcetherStatsPkts256to511Octets, ddmInfoEntry=ddmInfoEntry, alcetherStatsPkts1024to1518Octets=alcetherStatsPkts1024to1518Octets, esmPortAlias=esmPortAlias, esmConfPortCompliance=esmConfPortCompliance, esmPortUucastStormState=esmPortUucastStormState, alaLinkMonStatsEntry=alaLinkMonStatsEntry, alaLFPConfigMIBGroup=alaLFPConfigMIBGroup, alcetherStatsTx4096Octets=alcetherStatsTx4096Octets, portViolationTable=portViolationTable, alcetherStatsRxCollisions=alcetherStatsRxCollisions, ddmTxOutputPowerHiWarning=ddmTxOutputPowerHiWarning, alaLinkMonStatsMIBGroup=alaLinkMonStatsMIBGroup, ddmTempLowWarning=ddmTempLowWarning, esmPortLinkUpDownTrapEnable=esmPortLinkUpDownTrapEnable, esmBeaconRowStatus=esmBeaconRowStatus, alcatelIND1PortMIBConformance=alcatelIND1PortMIBConformance, interfaceStatsMIBGroup=interfaceStatsMIBGroup, alaPvrRetryTime=alaPvrRetryTime, alcetherStatsRxDribbleNibblePkts=alcetherStatsRxDribbleNibblePkts, alcetherStatsRxDvEventPkts=alcetherStatsRxDvEventPkts, ddmRxPowerThresholdViolated=ddmRxPowerThresholdViolated, alaLinkMonStatsCurrentLinkFlaps=alaLinkMonStatsCurrentLinkFlaps, alaPortViolationTrapObjects=alaPortViolationTrapObjects, ddmTxOutputPowerHiAlarm=ddmTxOutputPowerHiAlarm, alcetherStatsRxCodeErrPkts=alcetherStatsRxCodeErrPkts, portViolationNotificationTrap=portViolationNotificationTrap, alaLinkMonStatsPortState=alaLinkMonStatsPortState, esmPortAdminStatus=esmPortAdminStatus, alaLinkMonLinkFlapThreshold=alaLinkMonLinkFlapThreshold, esmPortUucastRateLimit=esmPortUucastRateLimit, esmTdrPortPair3State=esmTdrPortPair3State, ddmTxBiasCurrentHiAlarm=ddmTxBiasCurrentHiAlarm, portViolationTimer=portViolationTimer, ddmTxBiasCurrentLowAlarm=ddmTxBiasCurrentLowAlarm, ddmPortInfoTable=ddmPortInfoTable, esmPortMinBcastRateLimit=esmPortMinBcastRateLimit, ddmTxOutputPower=ddmTxOutputPower, esmDrvTrapDrops=esmDrvTrapDrops, esmPortBcastThresholdAction=esmPortBcastThresholdAction, ddmSupplyVoltageHiWarning=ddmSupplyVoltageHiWarning, alcfcStatsTxBBCreditZeros=alcfcStatsTxBBCreditZeros, alcetherStatsTxTotalBytesOnWire=alcetherStatsTxTotalBytesOnWire, alaPvrGlobalRetryTime=alaPvrGlobalRetryTime, esmTdrPortClearStats=esmTdrPortClearStats, ddmPortTempLowWarning=ddmPortTempLowWarning, alaLFPGroupOperStatus=alaLFPGroupOperStatus, PYSNMP_MODULE_ID=alcatelIND1PortMIB, ddmConfigGroup=ddmConfigGroup, physicalPort=physicalPort, alcfcStatsFrameTooLongs=alcfcStatsFrameTooLongs, alcatelIND1PortNotifications=alcatelIND1PortNotifications, alcfcStatsLossofSynchs=alcfcStatsLossofSynchs, esmPortCfgMaxFrameSize=esmPortCfgMaxFrameSize, alaLinkMonConfigEntry=alaLinkMonConfigEntry, esmConfEntry=esmConfEntry, alcfcClearStats=alcfcClearStats, ddmPortTempLowAlarm=ddmPortTempLowAlarm, esmPortBeaconGroup=esmPortBeaconGroup, ddmSupplyVoltageHiAlarm=ddmSupplyVoltageHiAlarm, alcLagStatsMIBGroup=alcLagStatsMIBGroup, alcLagClearStats=alcLagClearStats, ddmPortRxOpticalPowerHiAlarm=ddmPortRxOpticalPowerHiAlarm, alaLinkMonStatsTotalLinkFlaps=alaLinkMonStatsTotalLinkFlaps, ddmSupplyVoltage=ddmSupplyVoltage, alcfcStatsEncodingDisparityErrors=alcfcStatsEncodingDisparityErrors, ddmRxOpticalPowerLowWarning=ddmRxOpticalPowerLowWarning, alaPortViolationTrapGroup=alaPortViolationTrapGroup, alaPvrGlobalConfigObjects=alaPvrGlobalConfigObjects, esmPortCfgDuplexMode=esmPortCfgDuplexMode, esmHybridPortCfgSpeed=esmHybridPortCfgSpeed, csmConfTrapGroup=csmConfTrapGroup, esmPortModeGroup=esmPortModeGroup, esmPortMcastRateLimitEnable=esmPortMcastRateLimitEnable, esmPortBcastRateLimitType=esmPortBcastRateLimitType, ddmTrapConfig=ddmTrapConfig, ifInPktsPerSec=ifInPktsPerSec, esmHybridPortCfgInactiveType=esmHybridPortCfgInactiveType, esmPortAutoSpeed=esmPortAutoSpeed, alcetherStatsRxGiantPkts=alcetherStatsRxGiantPkts, alaLinkMonStatsClearStats=alaLinkMonStatsClearStats, alaLFPConfigTable=alaLFPConfigTable, alaLinkMonStatsCurrentCRCErrors=alaLinkMonStatsCurrentCRCErrors, esmTdrPortGroup=esmTdrPortGroup, alcfcStatsEntry=alcfcStatsEntry, esmPortIngressRateLimitEnable=esmPortIngressRateLimitEnable, gigaEtherStatsPkts4096to9215Octets=gigaEtherStatsPkts4096to9215Octets, alaLinkMonStatus=alaLinkMonStatus, interfaceStatsEntry=interfaceStatsEntry, ddmTempHiWarning=ddmTempHiWarning, ddmRxOpticalPower=ddmRxOpticalPower, alcatelIND1PortMIB=alcatelIND1PortMIB, ddmPortTxBiasCurrentHiAlarm=ddmPortTxBiasCurrentHiAlarm, ddmPortChannel=ddmPortChannel, alaPvrRecoveryMax=alaPvrRecoveryMax, alcLagStatsTable=alcLagStatsTable, alaPvrConfigTable=alaPvrConfigTable, alaLFPGroupEntry=alaLFPGroupEntry, alaLinkMonTimeWindow=alaLinkMonTimeWindow, esmTdrPortPair2State=esmTdrPortPair2State, esmPortMinMcastRateLimit=esmPortMinMcastRateLimit, alaPvrGlobalTrapEnable=alaPvrGlobalTrapEnable, ddmRxOpticalPowerLowAlarm=ddmRxOpticalPowerLowAlarm, alaLFPGroupTable=alaLFPGroupTable, esmPortAutoDuplexMode=esmPortAutoDuplexMode, esmPortIF=esmPortIF, alaLinkMonLinkErrorThreshold=alaLinkMonLinkErrorThreshold, esmConfEntryGroup=esmConfEntryGroup, ddmTxPowerThresholdViolated=ddmTxPowerThresholdViolated, ddmPortTxOutputPowerHiAlarm=ddmPortTxOutputPowerHiAlarm, ddmPortTxOutputPowerLowAlarm=ddmPortTxOutputPowerLowAlarm, alcetherStatsCRCAlignErrors=alcetherStatsCRCAlignErrors, ddmVoltageThresholdViolated=ddmVoltageThresholdViolated, esmStormThresholdViolationStatus=esmStormThresholdViolationStatus, ddmSupplyVoltageLowAlarm=ddmSupplyVoltageLowAlarm, alcetherStatsTxCollisions=alcetherStatsTxCollisions, ddmConfiguration=ddmConfiguration, alcetherStatsTx256to511Octets=alcetherStatsTx256to511Octets, ifInPauseFrames=ifInPauseFrames, alcetherStatsTx128to255Octets=alcetherStatsTx128to255Octets, alcPortNotificationGroup=alcPortNotificationGroup, esmPortCfgPause=esmPortCfgPause, esmHybridPortCfgCrossover=esmHybridPortCfgCrossover, alcEtherStatsCompliance=alcEtherStatsCompliance, portViolationCfgRecoveryMax=portViolationCfgRecoveryMax, ddmTemperature=ddmTemperature, ddmPortInfoGroup=ddmPortInfoGroup, esmPortModeEntry=esmPortModeEntry, alcetherStatsPkts2048to4095Octets=alcetherStatsPkts2048to4095Octets, alcetherStatsRxLongEventPkts=alcetherStatsRxLongEventPkts, esmHybridConfEntryGroup=esmHybridConfEntryGroup, alcfcStatsRxUndersizePkts=alcfcStatsRxUndersizePkts, alcLagStatsCompliance=alcLagStatsCompliance, esmPortBcastStormState=esmPortBcastStormState, alcetherLastClearStats=alcetherLastClearStats, alcfcStatsPrimSeqProtocolErrors=alcfcStatsPrimSeqProtocolErrors, alaLinkMonWaitToRestoreTimer=alaLinkMonWaitToRestoreTimer, ddmPortTxOutputPower=ddmPortTxOutputPower, esmPortBeaconTable=esmPortBeaconTable, alaLFPGroupWaitToShutdown=alaLFPGroupWaitToShutdown, alcetherStatsTxUndersizePkts=alcetherStatsTxUndersizePkts, outBitsPerSec=outBitsPerSec, alaLinkMonStatsCurrentLinkErrors=alaLinkMonStatsCurrentLinkErrors, alaLFPGroupMIBGroup=alaLFPGroupMIBGroup, alcetherStatsTx1024to1518Octets=alcetherStatsTx1024to1518Octets, esmPortFiberstatsGroup=esmPortFiberstatsGroup, ddmPortTxOutputPowerLowWarning=ddmPortTxOutputPowerLowWarning, esmPortSlot=esmPortSlot, esmPortMcastRateLimitType=esmPortMcastRateLimitType, esmTdrPortPair4State=esmTdrPortPair4State, ddmSupplyVoltageLowWarning=ddmSupplyVoltageLowWarning, CableState=CableState, alaLinkMonConfigMIBGroup=alaLinkMonConfigMIBGroup, gigaEtherStatsPkts1519to4095Octets=gigaEtherStatsPkts1519to4095Octets, alaPvrGlobalConfigGroup=alaPvrGlobalConfigGroup, alcfcStatsRxBBCreditZeros=alcfcStatsRxBBCreditZeros)
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MIB", esmHybridConfTable=esmHybridConfTable, esmPortModeTable=esmPortModeTable, portViolationAction=portViolationAction, portViolations=portViolations, alcetherStatsPkts65to127Octets=alcetherStatsPkts65to127Octets, esmHybridConfEntry=esmHybridConfEntry, alcatelIND1PortMIBObjects=alcatelIND1PortMIBObjects, alcfcStatsLossofSignals=alcfcStatsLossofSignals, esmPortMinUucastRateLimit=esmPortMinUucastRateLimit, alaPvrConfigEntry=alaPvrConfigEntry, alaLinkMonStatsTable=alaLinkMonStatsTable, alcetherStatsTxLatePkts=alcetherStatsTxLatePkts, ddmPortTxOutputPowerHiWarning=ddmPortTxOutputPowerHiWarning, ddmRxOpticalPowerHiAlarm=ddmRxOpticalPowerHiAlarm, portViolationCfgRetryTime=portViolationCfgRetryTime, esmTdrPortPair3Length=esmTdrPortPair3Length, alcetherStatsTx2048to4095Octets=alcetherStatsTx2048to4095Octets, ddmTempLowAlarm=ddmTempLowAlarm, ddmPortTempHiAlarm=ddmPortTempHiAlarm, alcetherStatsPkts512to1023Octets=alcetherStatsPkts512to1023Octets, ddmPortRxOpticalPowerLowAlarm=ddmPortRxOpticalPowerLowAlarm, alcfcLastClearStats=alcfcLastClearStats, esmPortIngressRateLimitBurst=esmPortIngressRateLimitBurst, ddmRxOpticalPowerHiWarning=ddmRxOpticalPowerHiWarning, alaLFPGroupAdminStatus=alaLFPGroupAdminStatus, ddmPortTxBiasCurrentLowWarning=ddmPortTxBiasCurrentLowWarning, esmPortCfgAutoNegotiation=esmPortCfgAutoNegotiation, portViolationEntry=portViolationEntry, esmStormViolationThresholdNotificationType=esmStormViolationThresholdNotificationType, esmPortEPPEnable=esmPortEPPEnable, alaLinkMonStatsCurrentErrorFrames=alaLinkMonStatsCurrentErrorFrames, esmTdrPortTest=esmTdrPortTest, alcetherStatsPkts1519to2047Octets=alcetherStatsPkts1519to2047Octets, portViolationRecoveryReason=portViolationRecoveryReason, ifOutPauseFrames=ifOutPauseFrames, esmPortOperationalHybridType=esmPortOperationalHybridType, portViolationIfIndex=portViolationIfIndex, alaLinkMonStatsTotalLinkErrors=alaLinkMonStatsTotalLinkErrors, portViolationTimerAction=portViolationTimerAction, alaLinkMonConfigTable=alaLinkMonConfigTable, esmPortMcastThresholdAction=esmPortMcastThresholdAction, esmPortUucastRateLimitEnable=esmPortUucastRateLimitEnable, ddmPortRxOpticalPowerLowWarning=ddmPortRxOpticalPowerLowWarning, ddmPortTxBiasCurrentHiWarning=ddmPortTxBiasCurrentHiWarning, esmTdrPortValidPairs=esmTdrPortValidPairs, portViolationReason=portViolationReason, esmPortEEEEnable=esmPortEEEEnable, ddmTxBiasCurrentHiWarning=ddmTxBiasCurrentHiWarning, alcatelIND1PortMIBCompliances=alcatelIND1PortMIBCompliances, alaPvrGlobalRecoveryMax=alaPvrGlobalRecoveryMax, alcetherStatsTxExcDeferPkts=alcetherStatsTxExcDeferPkts, esmBeaconAdminState=esmBeaconAdminState, alaLinkMonStatsCurrentAlignErrors=alaLinkMonStatsCurrentAlignErrors, esmPortMcastStormState=esmPortMcastStormState, alaLFPConfigPort=alaLFPConfigPort, ddmPortSupplyVoltageLowWarning=ddmPortSupplyVoltageLowWarning, esmConfTrapGroup=esmConfTrapGroup, inBitsPerSec=inBitsPerSec, alaLFPConfigEntry=alaLFPConfigEntry, esmPortCfgSpeed=esmPortCfgSpeed, alcetherClearStats=alcetherClearStats, esmConfMIBGroup=esmConfMIBGroup, esmPortBcastRateLimit=esmPortBcastRateLimit, ddmPortSupplyVoltageLowAlarm=ddmPortSupplyVoltageLowAlarm, portViolationSource=portViolationSource, esmBeaconLedMode=esmBeaconLedMode, ddmTemperatureThresholdViolated=ddmTemperatureThresholdViolated, alaLinkMonWaitToShutdownTimer=alaLinkMonWaitToShutdownTimer, ddmTxBiasCurrentLowWarning=ddmTxBiasCurrentLowWarning, ddmTempHiAlarm=ddmTempHiAlarm, alcetherStatsTx1519to2047Octets=alcetherStatsTx1519to2047Octets, alaLFPGroupId=alaLFPGroupId)
