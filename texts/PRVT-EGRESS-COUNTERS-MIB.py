#
# PySNMP MIB module PRVT-EGRESS-COUNTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-EGRESS-COUNTERS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:24:57 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Gauge32, Counter64, TimeTicks, Counter32, IpAddress, ObjectIdentity, Bits, MibIdentifier, NotificationType, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "TimeTicks", "Counter32", "IpAddress", "ObjectIdentity", "Bits", "MibIdentifier", "NotificationType", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TimeStamp, DisplayString, TruthValue, RowStatus, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TruthValue", "RowStatus", "StorageType", "TextualConvention")
prvtEgressCounterMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 160))
prvtEgressCounterMib.setRevisions(('2010-05-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtEgressCounterMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtEgressCounterMib.setLastUpdated('201005210000Z')
if mibBuilder.loadTexts: prvtEgressCounterMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtEgressCounterMib.setContactInfo('BATM/Telco Systems Support team\n                Email: \n                For North America: techsupport@telco.com\n                For North Europe: support@batm.de, info@batm.de\n                For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtEgressCounterMib.setDescription('This MIB provides the egress counters for specific boards, refer to documentation for more details.')
prvtEgressCntNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 0))
prvtEgressCntObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1))
prvtEgressCntConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2))
prvtEgressCntCounterSetTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1), )
if mibBuilder.loadTexts: prvtEgressCntCounterSetTable.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCounterSetTable.setDescription('This table contains objects for the counters set. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntCounterSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1), ).setIndexNames((0, "PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetID"))
if mibBuilder.loadTexts: prvtEgressCntCounterSetEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCounterSetEntry.setDescription('prvtEgressCntCounterSetEntry')
prvtEgressCntCounterSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: prvtEgressCntCounterSetID.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCounterSetID.setDescription('The counters set ID. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntAllPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllPriorities.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntAllPriorities.setDescription('Shows if all priorities are set. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntPriority.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntPriority.setDescription('Priority definition. If prvtAllPriorities object is true then prvtPriority object is irrelevant. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntAllDropLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllDropLevels.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntAllDropLevels.setDescription('Shows if all drop levels are set. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntDropLevelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntDropLevelMode.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntDropLevelMode.setDescription(' Drop level definition. If prvtAllDropLevels object is true then prvtDropLevelMode object is irrelevant. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntAllVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllVlans.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntAllVlans.setDescription('Shows if all vlans are set. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntVlan.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntVlan.setDescription('The vlan ID. If prvtAllVlans object is true then prvtVlan object is irrelevant. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntAllInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntAllInterfaces.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntAllInterfaces.setDescription('Shows if all interfaces are set. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 9), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntInterfaces.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntInterfaces.setDescription('The interface definition. If prvtAllInterfaces object is true then prvtInterfaces object is irrelevant. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("set", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntPort.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntPort.setDescription('CPU port. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntClearCounterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntClearCounterSet.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntClearCounterSet.setDescription('Deletes a specified set of egress counters. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntCounterSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEgressCntCounterSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCounterSetRowStatus.setDescription('Counter set  rowStatus. Supported only NotInService/Active. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntCountersTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2), )
if mibBuilder.loadTexts: prvtEgressCntCountersTable.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCountersTable.setDescription('This table contains the counters. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1), ).setIndexNames((0, "PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetID"))
if mibBuilder.loadTexts: prvtEgressCntCountersEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCountersEntry.setDescription('prvtEgressCntCountersEntry')
prvtEgressCntOutBcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutBcFrames.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntOutBcFrames.setDescription('Broadcast packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntOutNUcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutNUcFrames.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntOutNUcFrames.setDescription('Multicast packet counter . Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntOutUcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutUcFrames.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntOutUcFrames.setDescription('Unicast packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntEgrFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntEgrFilterDisc.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntEgrFilterDisc.setDescription('Egress filtered packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntTxqFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntTxqFilterDisc.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntTxqFilterDisc.setDescription('Tail dropped packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntOutCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntOutCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntOutCtrlFrames.setDescription('Control packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntEgrFrwFilterDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntEgrFrwFilterDisc.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntEgrFrwFilterDisc.setDescription('Egress forwarding restriction packet counter. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEgressCntClearCounters.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntClearCounters.setDescription('Clears a counter set statistics. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntQosCountersTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3), )
if mibBuilder.loadTexts: prvtEgressCntQosCountersTable.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosCountersTable.setDescription('This table contains objects for counters which count number of packets dropped due to congestions. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntQosCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEgressCntQosCountersEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosCountersEntry.setDescription('prvtEgressCntQosCountersEntry')
prvtEgressCntQosYellowPacketCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosYellowPacketCounters.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosYellowPacketCounters.setDescription('Congestion color yellow dropped packet. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntQosRedPacketCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosRedPacketCounters.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosRedPacketCounters.setDescription('Congestion color red dropped packet. Available only for specific boards, refer to documentation for more details. ')
prvtEgressCntQosMaximumRateReached = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEgressCntQosMaximumRateReached.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosMaximumRateReached.setDescription('Checks if port egress maximum rate has been reached. Available only for specific boards, refer to documentation for more details.')
prvtEgressCntCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 1))
prvtEgressCntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2))
prvtEgressCntCounterSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 1)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllPriorities"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntPriority"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllDropLevels"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntDropLevelMode"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllVlans"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntVlan"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntAllInterfaces"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntInterfaces"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntPort"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntClearCounterSet"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCounterSetGroup = prvtEgressCntCounterSetGroup.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCounterSetGroup.setDescription('Objects for the egress counter set group.')
prvtEgressCntCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 2)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutBcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutNUcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutUcFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntEgrFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntTxqFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntOutCtrlFrames"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntEgrFrwFilterDisc"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntClearCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCountersGroup = prvtEgressCntCountersGroup.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCountersGroup.setDescription('Objects for the egress counters group.')
prvtEgressCntQosCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 2, 3)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosYellowPacketCounters"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosRedPacketCounters"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosMaximumRateReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntQosCountersGroup = prvtEgressCntQosCountersGroup.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntQosCountersGroup.setDescription('Objects for the qos egress counters.')
prvtEgressCntCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 160, 2, 1, 1)).setObjects(("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCounterSetGroup"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntCountersGroup"), ("PRVT-EGRESS-COUNTERS-MIB", "prvtEgressCntQosCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtEgressCntCompliance = prvtEgressCntCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtEgressCntCompliance.setDescription('The compliance statement for support of the egress counters MIB module.')
mibBuilder.exportSymbols("PRVT-EGRESS-COUNTERS-MIB", prvtEgressCntAllDropLevels=prvtEgressCntAllDropLevels, prvtEgressCntDropLevelMode=prvtEgressCntDropLevelMode, prvtEgressCntClearCounters=prvtEgressCntClearCounters, prvtEgressCntEgrFilterDisc=prvtEgressCntEgrFilterDisc, prvtEgressCntQosMaximumRateReached=prvtEgressCntQosMaximumRateReached, prvtEgressCntClearCounterSet=prvtEgressCntClearCounterSet, prvtEgressCntQosCountersEntry=prvtEgressCntQosCountersEntry, prvtEgressCntObjects=prvtEgressCntObjects, prvtEgressCounterMib=prvtEgressCounterMib, prvtEgressCntCountersGroup=prvtEgressCntCountersGroup, PYSNMP_MODULE_ID=prvtEgressCounterMib, prvtEgressCntGroups=prvtEgressCntGroups, prvtEgressCntEgrFrwFilterDisc=prvtEgressCntEgrFrwFilterDisc, prvtEgressCntQosCountersTable=prvtEgressCntQosCountersTable, prvtEgressCntNotifications=prvtEgressCntNotifications, prvtEgressCntCountersTable=prvtEgressCntCountersTable, prvtEgressCntOutNUcFrames=prvtEgressCntOutNUcFrames, prvtEgressCntOutUcFrames=prvtEgressCntOutUcFrames, prvtEgressCntAllVlans=prvtEgressCntAllVlans, prvtEgressCntInterfaces=prvtEgressCntInterfaces, prvtEgressCntPriority=prvtEgressCntPriority, prvtEgressCntCounterSetRowStatus=prvtEgressCntCounterSetRowStatus, prvtEgressCntConformance=prvtEgressCntConformance, prvtEgressCntCounterSetID=prvtEgressCntCounterSetID, prvtEgressCntCounterSetTable=prvtEgressCntCounterSetTable, prvtEgressCntAllInterfaces=prvtEgressCntAllInterfaces, prvtEgressCntCounterSetEntry=prvtEgressCntCounterSetEntry, prvtEgressCntOutCtrlFrames=prvtEgressCntOutCtrlFrames, prvtEgressCntQosRedPacketCounters=prvtEgressCntQosRedPacketCounters, prvtEgressCntCompliances=prvtEgressCntCompliances, prvtEgressCntCountersEntry=prvtEgressCntCountersEntry, prvtEgressCntOutBcFrames=prvtEgressCntOutBcFrames, prvtEgressCntTxqFilterDisc=prvtEgressCntTxqFilterDisc, prvtEgressCntVlan=prvtEgressCntVlan, prvtEgressCntPort=prvtEgressCntPort, prvtEgressCntQosYellowPacketCounters=prvtEgressCntQosYellowPacketCounters, prvtEgressCntCompliance=prvtEgressCntCompliance, prvtEgressCntQosCountersGroup=prvtEgressCntQosCountersGroup, prvtEgressCntCounterSetGroup=prvtEgressCntCounterSetGroup, prvtEgressCntAllPriorities=prvtEgressCntAllPriorities)
