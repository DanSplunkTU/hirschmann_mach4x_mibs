#
# PySNMP MIB module ALCATEL-IND1-DVMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-DVMRP-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:12:03 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
routingIND1Dvmrp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Dvmrp")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
dvmrpInterfaceEntry, = mibBuilder.importSymbols("DVMRP-STD-MIB", "dvmrpInterfaceEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, iso, Integer32, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "iso", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Bits")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
alcatelIND1DVMRPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1))
alcatelIND1DVMRPMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1DVMRPMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1DVMRPMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1DVMRPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1DVMRPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DVMRPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This MIB contains management information for Coronado Layer\n             3 Hardware Routing Engine (HRE) management.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2007 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1DVMRPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1))
alaDvmrpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1))
alaDvmrpTunnelXIfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 2), )
if mibBuilder.loadTexts: alaDvmrpTunnelXIfTable.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpTunnelXIfTable.setDescription('A list of attributes that are associated with the internal\n        assigned tunnel index when a DVMRP tunnel is created.  This table\n        contains additional objects that are not present in the tunnelMIB\n        tunnelIfTable.')
alaDvmrpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("unrestrictedEnable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpAdminStatus.setDescription('Administratively enables/disables the\n                 DVMRP protocol on this router.')
alaDvmrpRouteReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpRouteReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpRouteReportInterval.setDescription('The Route Report Interval determines how often\n                 a router will send its complete routing tables to\n                 neighboring routers running DVMRP.')
alaDvmrpFlashUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpFlashUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpFlashUpdateInterval.setDescription('The minimum Flash Update Interval defines how often\n                 routing table change messages are sent to\n                 neighboring DVMRP routers.  Since these messages\n                 are sent between the transmission of complete\n                 routing tables, the flash update interval value\n                 must be shorter than that of the route report\n                 interval.')
alaDvmrpNeighborTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(35)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpNeighborTimeout.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpNeighborTimeout.setDescription('The Neighbor Timeout value specifies how long, without\n                 any activity from a neighboring DVMRP router, the\n                 router will wait before assuming that the inactive\n                 router is down.')
alaDvmrpRouteExpirationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000)).clone(140)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpRouteExpirationTimeout.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpRouteExpirationTimeout.setDescription("The Route Expiration Timeout value specifies how\n                 long the router will wait before aging out a route.\n                 When this value expires, the route is advertised as\n                 inactive until either it's activity resumes or it is\n                 deleted.")
alaDvmrpRouteHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpRouteHoldDown.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpRouteHoldDown.setDescription('Specifies the time during which DVMRP routes are kept\n                 in a hold-down state.  A hold-down state refers to\n                 the time that a route to an inactive network continues\n                 to be advertised.')
alaDvmrpNeighborProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpNeighborProbeInterval.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpNeighborProbeInterval.setDescription('The Neighbor Probe Interval value specifies how often\n                 probes will be transmitted to those interfaces\n                 with attached DVMRP neighbors.')
alaDvmrpPruneLifetime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 86400)).clone(7200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpPruneLifetime.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpPruneLifetime.setDescription('The Prune Lifetime value defines the value\n                 whereby a source-rooted multicast tree will be\n                 pruned.')
alaDvmrpPruneRetransmission = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpPruneRetransmission.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpPruneRetransmission.setDescription('The Prune Packet Retransmission value is the duration\n                 of time that the router will wait, if it continues\n                 to receive unwanted multicast traffic, before\n                 retransmitting a prune message.')
alaDvmrpGraftRetransmission = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpGraftRetransmission.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpGraftRetransmission.setDescription('The Graft message Retransmission value defines\n                 the duration of time that the router will wait\n                 before retransmitting a graft message, if it has\n                 not already received an acknowledgement from its\n                 neighbor.')
alaDvmrpInitNbrAsSubord = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDvmrpInitNbrAsSubord.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpInitNbrAsSubord.setDescription('The value true(1) indicates neighbors, on initial discovery,\n                are considered subordinate.  This means traffic may be resumed\n                slightly quicker on network disruptions.  But, if the neighbor\n                has trouble handling huge initial blasts of traffic, it may be\n                wise to wait until route reports have been exchanged and the\n                neighbor has requested dependency, before forwarding traffic.')
alaDvmrpBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDvmrpBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpBfdStatus.setDescription('Enables/Disables Bfd for DVMRP Protocol.')
alaDvmrpBfdAllInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDvmrpBfdAllInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpBfdAllInterfaceStatus.setDescription('Enables/Disables Bfd for all DVMRP interfaces.')
alaDvmrpMbrOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDvmrpMbrOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpMbrOperStatus.setDescription('Whether MBR is currently enabled/disabled for DVMRP.')
alaDvmrpTunnelXIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DVMRP-MIB", "alaDvmrpTunnelIndex"))
if mibBuilder.loadTexts: alaDvmrpTunnelXIfEntry.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpTunnelXIfEntry.setDescription('An entry containing additional attributes associated with a DVMRP\n        tunnel.')
alaDvmrpTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaDvmrpTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpTunnelIndex.setDescription('The tunnel index of the DVMRP tunnel.')
alaDvmrpLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDvmrpLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpLocalIfIndex.setDescription('The interface index of the local end-point of the DVMRP tunnel.')
alaDvmrpIfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 4), )
if mibBuilder.loadTexts: alaDvmrpIfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpIfAugTable.setDescription('Expansion for Dvmrp Intf table.')
alaDvmrpIfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 4, 1), )
dvmrpInterfaceEntry.registerAugmentions(("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpIfAugEntry"))
alaDvmrpIfAugEntry.setIndexNames(*dvmrpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: alaDvmrpIfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpIfAugEntry.setDescription('An entry of alaDvmrpIfAugEntry.')
alaDvmrpIfBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDvmrpIfBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpIfBfdStatus.setDescription('This object enables/disables BFD for this DVMRP interface.')
alaDvmrpIfMbrDefaultInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDvmrpIfMbrDefaultInfoStatus.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpIfMbrDefaultInfoStatus.setDescription('This object enables/disables DVMRP to advertise the default route \n        on this interface.  This object is only applicable if the router\n        is operating as a Multicast Border Router.')
alcatelIND1DVMRPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2))
alcatelIND1DVMRPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 1))
alcatelIND1DVMRPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 2))
alaDvmrpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpConfigMIBGroup"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpTunnelXIfMIBGroup"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpIfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDvmrpCompliance = alaDvmrpCompliance.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpCompliance.setDescription('The compliance statement for routers running DVMRP\n            and implementing the ALCATEL-IND1-DVMRP MIB.')
alaDvmrpConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpAdminStatus"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpRouteReportInterval"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpFlashUpdateInterval"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpNeighborTimeout"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpRouteExpirationTimeout"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpRouteHoldDown"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpNeighborProbeInterval"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpPruneLifetime"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpPruneRetransmission"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpGraftRetransmission"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpInitNbrAsSubord"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpBfdStatus"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpBfdAllInterfaceStatus"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpMbrOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDvmrpConfigMIBGroup = alaDvmrpConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpConfigMIBGroup.setDescription('A collection of objects to support the management of global\n            configuration parameters on DVMRP routers.')
alaDvmrpTunnelXIfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpLocalIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDvmrpTunnelXIfMIBGroup = alaDvmrpTunnelXIfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpTunnelXIfMIBGroup.setDescription('These objects are required to provide additional information \n            about configured DVMRP tunnels not found in the standard tunnel\n            MIB.')
alaDvmrpIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 7, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpIfBfdStatus"), ("ALCATEL-IND1-DVMRP-MIB", "alaDvmrpIfMbrDefaultInfoStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDvmrpIfConfigGroup = alaDvmrpIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaDvmrpIfConfigGroup.setDescription('These objects are required to provide additional information\n            about configured DVMRP interfaces not found in the standard tunnel\n            MIB.')
mibBuilder.exportSymbols("ALCATEL-IND1-DVMRP-MIB", alaDvmrpIfMbrDefaultInfoStatus=alaDvmrpIfMbrDefaultInfoStatus, PYSNMP_MODULE_ID=alcatelIND1DVMRPMIB, alaDvmrpInitNbrAsSubord=alaDvmrpInitNbrAsSubord, alaDvmrpLocalIfIndex=alaDvmrpLocalIfIndex, alaDvmrpPruneRetransmission=alaDvmrpPruneRetransmission, alaDvmrpCompliance=alaDvmrpCompliance, alaDvmrpNeighborProbeInterval=alaDvmrpNeighborProbeInterval, alaDvmrpRouteReportInterval=alaDvmrpRouteReportInterval, alcatelIND1DVMRPMIBObjects=alcatelIND1DVMRPMIBObjects, alaDvmrpConfigMIBGroup=alaDvmrpConfigMIBGroup, alaDvmrpNeighborTimeout=alaDvmrpNeighborTimeout, alaDvmrpTunnelXIfEntry=alaDvmrpTunnelXIfEntry, alaDvmrpAdminStatus=alaDvmrpAdminStatus, alcatelIND1DVMRPMIBGroups=alcatelIND1DVMRPMIBGroups, alaDvmrpFlashUpdateInterval=alaDvmrpFlashUpdateInterval, alaDvmrpBfdStatus=alaDvmrpBfdStatus, alaDvmrpPruneLifetime=alaDvmrpPruneLifetime, alaDvmrpIfAugTable=alaDvmrpIfAugTable, alaDvmrpIfConfigGroup=alaDvmrpIfConfigGroup, alaDvmrpTunnelIndex=alaDvmrpTunnelIndex, alaDvmrpBfdAllInterfaceStatus=alaDvmrpBfdAllInterfaceStatus, alaDvmrpIfAugEntry=alaDvmrpIfAugEntry, alcatelIND1DVMRPMIB=alcatelIND1DVMRPMIB, alaDvmrpIfBfdStatus=alaDvmrpIfBfdStatus, alcatelIND1DVMRPMIBConformance=alcatelIND1DVMRPMIBConformance, alaDvmrpRouteHoldDown=alaDvmrpRouteHoldDown, alaDvmrpRouteExpirationTimeout=alaDvmrpRouteExpirationTimeout, alaDvmrpGlobalConfig=alaDvmrpGlobalConfig, alaDvmrpTunnelXIfTable=alaDvmrpTunnelXIfTable, alcatelIND1DVMRPMIBCompliances=alcatelIND1DVMRPMIBCompliances, alaDvmrpGraftRetransmission=alaDvmrpGraftRetransmission, alaDvmrpMbrOperStatus=alaDvmrpMbrOperStatus, alaDvmrpTunnelXIfMIBGroup=alaDvmrpTunnelXIfMIBGroup)
