#
# PySNMP MIB module FROGFOOT-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/FROGFOOT-RESOURCES-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 19:41:17 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Counter32, MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Counter64, Unsigned32, Gauge32, ObjectIdentity, ModuleIdentity, IpAddress, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Counter64", "Unsigned32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
resources = ModuleIdentity((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1))
if mibBuilder.loadTexts: resources.setLastUpdated('200407170000Z')
if mibBuilder.loadTexts: resources.setOrganization('Frogfoot Networks')
if mibBuilder.loadTexts: resources.setContactInfo('\tAbraham van der Merwe\n\n\t\t\tPostal: Frogfoot Networks CC\n\t\t\t\t\tP.O. Box 23618\n\t\t\t\t\tClaremont\n\t\t\t\t\tCape Town\n\t\t\t\t\t7735\n\t\t\t\t\tSouth Africa\n\n\t\t\tPhone: +27 82 565 4451\n\t\t\tEmail: abz@frogfoot.net')
if mibBuilder.loadTexts: resources.setDescription('The MIB module to describe system resources.')
frogfoot = MibIdentifier((1, 3, 6, 1, 4, 1, 10002))
servers = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1))
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1))
swap = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3))
load = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4))
resMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31))
resMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 1))
resConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2))
resGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1))
resCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 2))
class TableIndex(TextualConvention, Integer32):
    description = 'A unique value, greater than zero. It is recommended\n\t\tthat values are assigned contiguously starting from 1.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

memTotal = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotal.setStatus('current')
if mibBuilder.loadTexts: memTotal.setDescription('Total usable physical memory (in KB)')
memFree = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFree.setStatus('current')
if mibBuilder.loadTexts: memFree.setDescription('Available physical memory (in KB)')
memBuffer = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBuffer.setStatus('current')
if mibBuilder.loadTexts: memBuffer.setDescription('Physical memory used by buffers (in KB)')
memCache = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCache.setStatus('current')
if mibBuilder.loadTexts: memCache.setDescription('Physical memory used for caching (in KB)')
swapTotal = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapTotal.setStatus('current')
if mibBuilder.loadTexts: swapTotal.setDescription('Total swap space size (in KB)')
swapFree = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapFree.setStatus('current')
if mibBuilder.loadTexts: swapFree.setDescription('Swap space still available (in KB)')
diskNumber = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('current')
if mibBuilder.loadTexts: diskNumber.setDescription('The number of mounted disks present on this system.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('A table of mounted disks on this system.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "FROGFOOT-RESOURCES-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry containing management information applicable\n\t\tto a particular mounted disk on the system.')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 1), TableIndex())
if mibBuilder.loadTexts: diskIndex.setStatus('current')
if mibBuilder.loadTexts: diskIndex.setDescription('A unique value, greater than zero, for each disk on the\n\t\tsystem. It is recommended that values are assigned contiguously\n\t\tstarting from 1.')
diskDev = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDev.setStatus('current')
if mibBuilder.loadTexts: diskDev.setDescription('A textual string containing the disk device name.')
diskDir = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDir.setStatus('current')
if mibBuilder.loadTexts: diskDir.setDescription('A textual string containing the disk mount point.')
diskFSType = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unknown", 0), ("adfs", 1), ("affs", 2), ("coda", 3), ("cramfs", 4), ("ext2", 5), ("hpfs", 6), ("iso9660", 7), ("jffs2", 8), ("jfs", 9), ("minix", 10), ("msdos", 11), ("ncpfs", 12), ("nfs", 13), ("ntfs", 14), ("qnx4", 15), ("reiserfs", 16), ("romfs", 17), ("smbfs", 18), ("sysv", 19), ("tmpfs", 20), ("udf", 21), ("ufs", 22), ("vxfs", 23), ("xfs", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFSType.setStatus('current')
if mibBuilder.loadTexts: diskFSType.setDescription('The type of file system present on the disk. This\n\t\tdoes not include fake file systems such as the proc file\n\t\tsystem, devfs, etc. Additional types may be assigned by\n\t\tFrogfoot Networks in the future.')
diskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotal.setStatus('current')
if mibBuilder.loadTexts: diskTotal.setDescription('Total space on disk (in MB)')
diskFree = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFree.setStatus('current')
if mibBuilder.loadTexts: diskFree.setDescription('Disk space still available (in MB)')
loadNumber = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumber.setStatus('current')
if mibBuilder.loadTexts: loadNumber.setDescription('The number of load averages stored in the\n\t\tload average table.')
loadTable = MibTable((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: loadTable.setStatus('current')
if mibBuilder.loadTexts: loadTable.setDescription('Load average information.')
loadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "FROGFOOT-RESOURCES-MIB", "loadIndex"))
if mibBuilder.loadTexts: loadEntry.setStatus('current')
if mibBuilder.loadTexts: loadEntry.setDescription('An entry containing load average information.')
loadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 1), TableIndex())
if mibBuilder.loadTexts: loadIndex.setStatus('current')
if mibBuilder.loadTexts: loadIndex.setDescription('A unique value, greater than zero, for each\n\t\tload average stored.')
loadDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadDescr.setStatus('current')
if mibBuilder.loadTexts: loadDescr.setDescription('A description of each load average.')
loadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadValue.setStatus('current')
if mibBuilder.loadTexts: loadValue.setDescription('The 1,5 and 10 minute load averages. These values are\n\t\tstored as a percentage of processor load.')
resCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 2, 1)).setObjects(("FROGFOOT-RESOURCES-MIB", "resMemGroup"), ("FROGFOOT-RESOURCES-MIB", "resSwapGroup"), ("FROGFOOT-RESOURCES-MIB", "resDiskGroup"), ("FROGFOOT-RESOURCES-MIB", "resLoadGroup"), ("FROGFOOT-RESOURCES-MIB", "resMemGroup"), ("FROGFOOT-RESOURCES-MIB", "resSwapGroup"), ("FROGFOOT-RESOURCES-MIB", "resDiskGroup"), ("FROGFOOT-RESOURCES-MIB", "resLoadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resCompliance = resCompliance.setStatus('current')
if mibBuilder.loadTexts: resCompliance.setDescription('The compliance statement for SNMP entities which have\n\t\tsystem resources such as volatile and non-volatile\n\t\tstorage.')
resMemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 1)).setObjects(("FROGFOOT-RESOURCES-MIB", "memTotal"), ("FROGFOOT-RESOURCES-MIB", "memFree"), ("FROGFOOT-RESOURCES-MIB", "memBuffer"), ("FROGFOOT-RESOURCES-MIB", "memCache"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resMemGroup = resMemGroup.setStatus('current')
if mibBuilder.loadTexts: resMemGroup.setDescription('A collection of objects providing information specific to\n\t\tvolatile system storage.')
resSwapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 2)).setObjects(("FROGFOOT-RESOURCES-MIB", "swapTotal"), ("FROGFOOT-RESOURCES-MIB", "swapFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resSwapGroup = resSwapGroup.setStatus('current')
if mibBuilder.loadTexts: resSwapGroup.setDescription('A collection of objects providing information specific to\n\t\tstorage used for swapping pages to disk.')
resDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 3)).setObjects(("FROGFOOT-RESOURCES-MIB", "diskNumber"), ("FROGFOOT-RESOURCES-MIB", "diskDev"), ("FROGFOOT-RESOURCES-MIB", "diskDir"), ("FROGFOOT-RESOURCES-MIB", "diskFSType"), ("FROGFOOT-RESOURCES-MIB", "diskTotal"), ("FROGFOOT-RESOURCES-MIB", "diskFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resDiskGroup = resDiskGroup.setStatus('current')
if mibBuilder.loadTexts: resDiskGroup.setDescription('A collection of objects providing information specific to\n\t\tnon-volatile system storage.')
resLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 4)).setObjects(("FROGFOOT-RESOURCES-MIB", "loadNumber"), ("FROGFOOT-RESOURCES-MIB", "loadDescr"), ("FROGFOOT-RESOURCES-MIB", "loadValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resLoadGroup = resLoadGroup.setStatus('current')
if mibBuilder.loadTexts: resLoadGroup.setDescription('A collection of objects providing information specific to\n\t\tprocessor load averages.')
mibBuilder.exportSymbols("FROGFOOT-RESOURCES-MIB", TableIndex=TableIndex, memTotal=memTotal, diskDev=diskDev, resConformance=resConformance, memBuffer=memBuffer, loadTable=loadTable, memFree=memFree, loadNumber=loadNumber, swap=swap, resGroups=resGroups, diskEntry=diskEntry, diskFSType=diskFSType, resDiskGroup=resDiskGroup, servers=servers, load=load, diskTotal=diskTotal, diskTable=diskTable, memCache=memCache, resCompliance=resCompliance, diskIndex=diskIndex, swapFree=swapFree, resLoadGroup=resLoadGroup, resources=resources, resMIB=resMIB, diskFree=diskFree, resSwapGroup=resSwapGroup, loadDescr=loadDescr, resMIBObjects=resMIBObjects, memory=memory, PYSNMP_MODULE_ID=resources, resCompliances=resCompliances, loadValue=loadValue, system=system, frogfoot=frogfoot, storage=storage, diskDir=diskDir, resMemGroup=resMemGroup, loadIndex=loadIndex, loadEntry=loadEntry, swapTotal=swapTotal, diskNumber=diskNumber)
