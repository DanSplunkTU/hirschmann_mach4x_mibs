#
# PySNMP MIB module ALCATEL-IND1-PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-PIM-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:56:00 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
routingIND1Pim, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Pim")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
pimInterfaceEntry, = mibBuilder.importSymbols("PIM-STD-MIB", "pimInterfaceEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Gauge32, TimeTicks, ObjectIdentity, MibIdentifier, iso, Integer32, ModuleIdentity, Counter64, NotificationType, Unsigned32, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
alcatelIND1PIMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1))
alcatelIND1PIMMIB.setRevisions(('2007-04-03 00:00', '2015-05-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1PIMMIB.setRevisionsDescriptions(('The latest version of this MIB Module.', 'Added V4/V6 bidir ssm compatibility, bidir fast-join, asm fast-join and ssm-fast-join.',))
if mibBuilder.loadTexts: alcatelIND1PIMMIB.setLastUpdated('201505280000Z')
if mibBuilder.loadTexts: alcatelIND1PIMMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1PIMMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1PIMMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for \n             the configuration of PIM-SM and PIM-DM global configuration \n             parameters.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2007 Alcatel-Lucent\n                     Copyright (C) 2015 ALE USA, Inc.\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1PIMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1))
alaPimsmGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1))
alaPimdmGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2))
alaPimGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3))
alaPimsmAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimsmAdminStatus.setDescription('Administratively enables/disables the\n                PIM-SM protocol on this router.')
alaPimsmMaxRPs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmMaxRPs.setStatus('current')
if mibBuilder.loadTexts: alaPimsmMaxRPs.setDescription('The maximum number of C-RPs allowed in the PIM-SM\n                domain.')
alaPimsmProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmProbeTime.setStatus('current')
if mibBuilder.loadTexts: alaPimsmProbeTime.setDescription('When NULL Registers are used, this is the time\n                between sending a NULL Register and the Register-\n                Suppression-Timer expiring unless it is restarted\n                by receiving a Register-Stop.')
alaPimsmOldRegisterMessageSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("header", 1), ("full", 2))).clone('header')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmOldRegisterMessageSupport.setStatus('current')
if mibBuilder.loadTexts: alaPimsmOldRegisterMessageSupport.setDescription('Specifies the application of the checksum function on\n                received Register messages in the PIM-SM domain.  When\n                set to full(2), the checksum for a register message\n                is computed for the entire packet (i.e. includes data).\n                When set to header(1), the checksum is done only on the\n                first 8 bytes of the packet.  This variable is provided\n                for interoperability reasons and may be required for\n                Compatibility with older implementations of PIM-SM v2.\n                This parameter must be set the same throughout the\n                PIM-SM domain.')
alaPimsmAdminSPTConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmAdminSPTConfig.setStatus('current')
if mibBuilder.loadTexts: alaPimsmAdminSPTConfig.setDescription('Administratively enables/disables SPT Switchover\n                upon receiving the first data packet.')
alaPimsmRPThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmRPThreshold.setStatus('current')
if mibBuilder.loadTexts: alaPimsmRPThreshold.setDescription('Sets the RP threshold value (in bps) to be used\n                in determining when to switch to native\n                forwarding at the RP.  The value of 0\n                disables the RP Threshold functionality.')
alaPimsmV6AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6AdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6AdminStatus.setDescription('Administratively enables/disables the\n                PIM-SM IPv6 protocol on this router.')
alaPimsmV6SPTConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6SPTConfig.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6SPTConfig.setDescription('Administratively enables/disables PIM IPv6 SPT Switchover\n                upon receiving the first data packet.')
alaPimsmV6RPSwitchover = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6RPSwitchover.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6RPSwitchover.setDescription('Administratively enables/disables whether PIM IPv6\n                will attempt to switch to native forwarding at the RP\n                upon receiving the first register-encapsulated packet.')
alaPimsmBidirStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmBidirStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimsmBidirStatus.setDescription('Administratively enables/disables the\n                PIM BIDIR protocol on this router.')
alaPimsmBidirPeriodicInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmBidirPeriodicInterval.setStatus('current')
if mibBuilder.loadTexts: alaPimsmBidirPeriodicInterval.setDescription('This is the interval at which the DF for each RPA\n                will periodically announce its status in a\n                Winner message.\n\n                A value of 0 indicates that periodic messages will\n                not be sent.')
alaPimsmBidirDFAbort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmBidirDFAbort.setStatus('current')
if mibBuilder.loadTexts: alaPimsmBidirDFAbort.setDescription('Administratively enables/disables whether the DF \n                election will be automatically aborted if a PIM hello \n                is received from a PIM neighbor without the \n                bidirectional capable option.  By default, the DF \n                election will still occur among those PIM routers that \n                support BIDIR.  By enabling this option, if a BIDIR-\n                capable router receives a PIM hello from a \n                non-BIDIR-capable router, the DF election is aborted.')
alaPimsmNonBidirHelloPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(65535)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmNonBidirHelloPeriod.setStatus('current')
if mibBuilder.loadTexts: alaPimsmNonBidirHelloPeriod.setDescription("The minimum time that must elapse between\n            alaPimNonBidirHello notifications originated by this router.\n            The default value of 65535 represents an 'infinite' time, in\n            which case, no alaPimNonBidirHello notifications are ever\n            sent.\n\n            The non-zero minimum allowed value provides resilience\n            against propagation of denial-of-service attacks from the\n            control plane to the network management plane.")
alaPimsmNonBidirHelloMsgsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimsmNonBidirHelloMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaPimsmNonBidirHelloMsgsRcvd.setDescription('The number of PIM Hello messages that have been\n            received by a BIDIR-capable device that do not have the\n            Bidirectional Capable option.\n\n            This counter is incremented if BIDIR mode is enabled on\n            this router and a PIM Hello message is received from a\n            PIM neighbor that does not include the Bidirectional Capable\n            option. \n\n            By default, the reception of these messages will not \n            effect the BIDIR DF election.  The alaPimsmBidirDFAbort \n            object may be used to change the default behavior\n            and have the DF election aborted whenever a BIDIR-capable\n            router receives a PIM hello from a non-BIDIR-capable\n            router.')
alaPimsmNonBidirHelloAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimsmNonBidirHelloAddressType.setStatus('current')
if mibBuilder.loadTexts: alaPimsmNonBidirHelloAddressType.setDescription('The address type stored in alaPimsmNonBidirHelloOrigin.\n\n            If no Non Bidir Hello messages have been received, this\n            object is set to unknown(0).')
alaPimsmNonBidirHelloOrigin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 16), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimsmNonBidirHelloOrigin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmNonBidirHelloOrigin.setDescription('The source address of the last Non Bidir Hello message\n            received by this device.')
alaPimsmV6BidirStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6BidirStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6BidirStatus.setDescription('Administratively enables/disables the\n                PIM IPv6 BIDIR protocol on this router.')
alaPimsmRPHashStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmRPHashStatus.setReference('RFC 4601 section 4.7.2')
if mibBuilder.loadTexts: alaPimsmRPHashStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimsmRPHashStatus.setDescription('Administratively enables/disables applying the PIM hash function\n                defined in RFC 4601 when selecting an RP from two or more equal\n                group-range-to-RP mappings.')
alaPimsmBidirSsmCompat = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmBidirSsmCompat.setStatus('current')
if mibBuilder.loadTexts: alaPimsmBidirSsmCompat.setDescription('Administratively enables/disables whether PIM\n                BIDIR will support receiving IGMPv3 source-specific\n                joins and treat them as a (*,G) join.\n                By default, IGMPv3 source-specific joins are ignored\n                when PIM is operating in BIDIR mode.')
alaPimsmV6BidirSsmCompat = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6BidirSsmCompat.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6BidirSsmCompat.setDescription('Administratively enables/disables whether IPv6 PIM\n                BIDIR will support receiving MLDv2 source-specific\n                joins and treat them as a (*,G) join.\n                By default, MLDv2 source-specific joins are ignored\n                when PIM is operating in BIDIR mode.')
alaPimsmBidirFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmBidirFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmBidirFastJoin.setDescription('Administratively enables/disables whether PIM\n                BIDIR will automatically create the routes in hardware\n                as soon as the BIDIR (*,G) routes are learned.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimsmV6BidirFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6BidirFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6BidirFastJoin.setDescription('Administratively enables/disables whether IPv6 PIM\n                BIDIR will automatically create the routes in hardware\n                as soon as the BIDIR (*,G) routes are learned.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimsmAsmFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmAsmFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmAsmFastJoin.setDescription('Administratively enables/disables whether PIM\n                ASM will automatically create the (*,G) routes in\n                hardware as soon as the ASM (*,G) routes are learned.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimsmV6AsmFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6AsmFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6AsmFastJoin.setDescription('Administratively enables/disables whether IPv6 PIM\n                ASM will automatically create the (*,G) routes in \n                hardware as soon as the ASM (*,G) routes are learned.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimsmSsmFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmSsmFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmSsmFastJoin.setDescription('Administratively enables/disables whether PIM \n                will automatically create the (S,G) routes in \n                hardware as soon as the (S,G) routes are learned.\n                This includes PIM Sparse Mode (S,G) routes as well\n                as PIM SSM (S,G) routes.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimsmV6SsmFastJoin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimsmV6SsmFastJoin.setStatus('current')
if mibBuilder.loadTexts: alaPimsmV6SsmFastJoin.setDescription('Administratively enables/disables whether IPv6 PIM\n                will automatically create the (S,G) routes in hardware\n                as soon as the (S,G) routes are learned.\n                This includes PIM Sparse Mode (S,G) routes as well\n                as PIM SSM (S,G) routes.\n                By default, this is disabled and the routes are not\n                installed in hardware until the multicast traffic\n                reaches the switch.')
alaPimdmAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimdmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimdmAdminStatus.setDescription('Administratively enables/disables the\n                PIM-DM protocol on this router.')
alaPimdmStateRefreshTimeToLive = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 2), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimdmStateRefreshTimeToLive.setStatus('current')
if mibBuilder.loadTexts: alaPimdmStateRefreshTimeToLive.setDescription("The TTL to be used by this router's originated State\n                 Refresh messages if the data packet's TTL is not\n                 recorded.")
alaPimdmStateRefreshLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimdmStateRefreshLimitInterval.setStatus('current')
if mibBuilder.loadTexts: alaPimdmStateRefreshLimitInterval.setDescription('This router will not forward successive State Refresh\n                 messages received at less than this interval.')
alaPimdmV6AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimdmV6AdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimdmV6AdminStatus.setDescription('Administratively enables/disables the\n                PIM-DM IPv6 protocol on this router.')
alaPimdmDenseGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5), )
if mibBuilder.loadTexts: alaPimdmDenseGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupTable.setDescription('This table is used to manage configuration of dense groups.\n\n            If the group prefixes configured for two or more rows in\n            this table overlap, the row with the greatest value of\n            alaPimdmDenseGroupGrpPrefixLength is used for the overlapping\n            range.')
alaPimdmDenseGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupAddressType"), (0, "ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupGrpAddress"), (0, "ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupGrpPrefixLength"))
if mibBuilder.loadTexts: alaPimdmDenseGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupEntry.setDescription('An entry (conceptual row) in the alaPimdmDenseGroupTable.  This\n            entry is preserved on agent restart.')
alaPimdmDenseGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaPimdmDenseGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupAddressType.setDescription('The address type of this entry.')
alaPimdmDenseGroupGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaPimdmDenseGroupGrpAddress.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupGrpAddress.setDescription('The multicast group address that, when combined with\n            alaPimdmDenseGroupGrpPrefixLength, gives the group prefix for this\n            entry.  The InetAddressType is given by the\n            alaPimdmDenseGroupAddressType object.\n\n            This address object is only significant up to\n            alaPimdmDenseGroupGrpPrefixLength bits.  The remainder of the\n            address bits are zero.  This is especially important for\n            this index field, which is part of the index of this entry.\n            Any non-zero bits would signify an entirely different\n            entry.')
alaPimdmDenseGroupGrpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaPimdmDenseGroupGrpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupGrpPrefixLength.setDescription("The multicast group prefix length that, when combined\n            with alaPimdmDenseGroupGrpAddress, gives the group prefix for this\n            entry.  The InetAddressType is given by the\n            alaPimdmDenseGroupAddressType object.  If alaPimdmDenseGroupAddressType is\n            'ipv4' or 'ipv4z', this object must be in the range 4..32.\n            If alaPimdmDenseGroupGrpAddressType is 'ipv6' or 'ipv6z', this\n            object must be in the range 8..128.")
alaPimdmDenseGroupOverrideDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimdmDenseGroupOverrideDynamic.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupOverrideDynamic.setDescription('Whether this dense group configuration will override other\n            group mappings in this group prefix.  If this object is\n            TRUE, then it will override:\n\n            -  RP information learned dynamically for groups in this\n            group prefix.\n\n            -  RP information configured in alaPimdmDenseGroupTable with\n            alaPimdmDenseGroupOverrideDynamic set to FALSE.\n\n            See pimGroupMappingTable for details.')
alaPimdmDenseGroupPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimdmDenseGroupPrecedence.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupPrecedence.setDescription('The value for pimGroupMappingPrecedence to be used for this\n            static RP configuration.  This allows fine control over\n            which configuration is overridden by this static\n            configuration.\n\n            If alaPimdmDenseGroupOverrideDynamic is set to TRUE, all dynamic RP\n            configuration is overridden by this static configuration,\n            whatever the value of this object.\n\n            The absolute values of this object have a significance only\n            on the local router and do not need to be coordinated with\n            other routers.  A setting of this object may have different\n            effects when applied to other routers.\n\n            Do not use this object unless fine control of static RP\n            behavior on the local router is required.')
alaPimdmDenseGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimdmDenseGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimdmDenseGroupRowStatus.setDescription('The status of this row, by which rows in this table can\n            be created and destroyed.\n\n            All writeable objects in this entry can be modified when the\n            status of this entry is active(1).')
alaPimBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimBfdStatus.setDescription('Administratively enables/disables PIM\n                with the BFD protocol on this router.')
alaPimBfdAllInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimBfdAllInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimBfdAllInterfaceStatus.setDescription('Administratively enables/disables BFD\n                for all PIM interfaces on this router.')
alaPimMoFRRStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimMoFRRStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimMoFRRStatus.setDescription('Administratively enables/disables MoFRR\n                (Multicast only Fast Re-Route) on this router.')
alaPimMoFRRAllRouteStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimMoFRRAllRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimMoFRRAllRouteStatus.setDescription('By default, MoFRR is only applied to multicast\n                routes that have local clients.  Enabling \n                alaPimMoFRRAllRouteStatus will enable MoFRR\n                on all routes whether there are local clients\n                or not.  alaPimMoFRRStatus must be enabled for\n                this to take effect.')
alaPimInterfaceAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 5), )
if mibBuilder.loadTexts: alaPimInterfaceAugTable.setStatus('current')
if mibBuilder.loadTexts: alaPimInterfaceAugTable.setDescription('Expansion for pimInterfaceTable')
alaPimInterfaceAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 5, 1), )
pimInterfaceEntry.registerAugmentions(("ALCATEL-IND1-PIM-MIB", "alaPimInterfaceAugEntry"))
alaPimInterfaceAugEntry.setIndexNames(*pimInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: alaPimInterfaceAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaPimInterfaceAugEntry.setDescription('An entry of alaPimInterfaceAugTable')
alaPimInterfaceBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimInterfaceBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimInterfaceBfdStatus.setDescription('Enables/Disables BFD for particular interfaces of PIM.')
alaPimMbrAllSourcesStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimMbrAllSourcesStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimMbrAllSourcesStatus.setDescription('Administratively enables/disables PIM to notify DVMRP about\n                the routes to all multicast sources learned instead of just\n                the directly connected subnets so that these routes can be\n                advertised in the DVMRP domain via standard DVMRP mechanisms.\n                This object is only applicable if the router is operating as \n                a Multicast Border Router.')
alaPimMbrOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimMbrOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimMbrOperStatus.setDescription('Whether MBR is currently enabled/disabled for PIM.')
alaPimV6BfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimV6BfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimV6BfdStatus.setDescription('Administratively enables/disables PIM IPv6\n                with the BFD protocol on this router.')
alaPimV6BfdAllInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaPimV6BfdAllInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaPimV6BfdAllInterfaceStatus.setDescription('Administratively enables/disables BFD\n                for all PIM IPv6 interfaces on this router.')
alaPimNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 0))
alaPimNonBidirHello = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 0, 1)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloAddressType"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloOrigin"))
if mibBuilder.loadTexts: alaPimNonBidirHello.setStatus('current')
if mibBuilder.loadTexts: alaPimNonBidirHello.setDescription('An alaPimNonBidirHello notification signifies that\n            a bidir-capable router has received a PIM hello from \n            a non-bidir-capable router.\n\n            This notification is generated whenever the counter\n            alaPimsmNonBidirHelloMsgsRcvd is incremented, subject\n            to the rate limit specified by\n            alaPimsmNonBidirHelloNotificationPeriod.')
alcatelIND1PIMMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2))
alcatelIND1PIMMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 1))
alcatelIND1PIMMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2))
alaPimsmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimsmConfigMIBGroup"), ("ALCATEL-IND1-PIM-MIB", "alaPimConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimsmCompliance = alaPimsmCompliance.setStatus('current')
if mibBuilder.loadTexts: alaPimsmCompliance.setDescription('The compliance statement for routers running PIM Sparse\n            Mode and implementing the ALCATEL-IND1-PIM MIB.')
alaPimdmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimdmConfigMIBGroup"), ("ALCATEL-IND1-PIM-MIB", "alaPimConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimdmCompliance = alaPimdmCompliance.setStatus('current')
if mibBuilder.loadTexts: alaPimdmCompliance.setDescription('The compliance statement for routers running PIM Dense\n            Mode and implementing the ALCATEL-IND1-PIM MIB.')
alaPimsmConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimsmAdminStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmMaxRPs"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmProbeTime"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmOldRegisterMessageSupport"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmAdminSPTConfig"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmRPThreshold"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6AdminStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6SPTConfig"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6RPSwitchover"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmBidirStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmBidirPeriodicInterval"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmBidirDFAbort"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloPeriod"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloMsgsRcvd"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6BidirStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmRPHashStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmBidirSsmCompat"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6BidirSsmCompat"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmBidirFastJoin"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6BidirFastJoin"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmAsmFastJoin"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6AsmFastJoin"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmSsmFastJoin"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmV6SsmFastJoin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimsmConfigMIBGroup = alaPimsmConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaPimsmConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of PIM Sparse Mode routers.')
alaPimdmConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimdmAdminStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmStateRefreshTimeToLive"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmStateRefreshLimitInterval"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmV6AdminStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupOverrideDynamic"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupPrecedence"), ("ALCATEL-IND1-PIM-MIB", "alaPimdmDenseGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimdmConfigMIBGroup = alaPimdmConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaPimdmConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of PIM Dense Mode routers.')
alaPimConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimBfdStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimBfdAllInterfaceStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimMoFRRStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimMoFRRAllRouteStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimInterfaceBfdStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimMbrAllSourcesStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimMbrOperStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimV6BfdStatus"), ("ALCATEL-IND1-PIM-MIB", "alaPimV6BfdAllInterfaceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimConfigMIBGroup = alaPimConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaPimConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of PIM routers.')
alaPimOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloAddressType"), ("ALCATEL-IND1-PIM-MIB", "alaPimsmNonBidirHelloOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimOptionalGroup = alaPimOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: alaPimOptionalGroup.setDescription(' PIM objects to stop the tools from complaining ')
alaPimNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-PIM-MIB", "alaPimNonBidirHello"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimNotificationGroup = alaPimNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaPimNotificationGroup.setDescription(' PIM Notification objects ')
mibBuilder.exportSymbols("ALCATEL-IND1-PIM-MIB", alaPimdmDenseGroupEntry=alaPimdmDenseGroupEntry, alaPimdmDenseGroupGrpPrefixLength=alaPimdmDenseGroupGrpPrefixLength, alaPimdmGlobalConfig=alaPimdmGlobalConfig, alaPimsmV6SsmFastJoin=alaPimsmV6SsmFastJoin, alaPimBfdStatus=alaPimBfdStatus, alaPimMoFRRStatus=alaPimMoFRRStatus, alaPimdmDenseGroupTable=alaPimdmDenseGroupTable, alaPimsmBidirDFAbort=alaPimsmBidirDFAbort, alcatelIND1PIMMIBGroups=alcatelIND1PIMMIBGroups, alaPimsmAdminStatus=alaPimsmAdminStatus, alaPimV6BfdStatus=alaPimV6BfdStatus, alaPimdmAdminStatus=alaPimdmAdminStatus, alaPimsmConfigMIBGroup=alaPimsmConfigMIBGroup, alaPimsmMaxRPs=alaPimsmMaxRPs, alcatelIND1PIMMIBObjects=alcatelIND1PIMMIBObjects, alcatelIND1PIMMIBCompliances=alcatelIND1PIMMIBCompliances, alaPimdmCompliance=alaPimdmCompliance, alcatelIND1PIMMIBConformance=alcatelIND1PIMMIBConformance, alaPimOptionalGroup=alaPimOptionalGroup, alaPimsmV6RPSwitchover=alaPimsmV6RPSwitchover, alaPimsmBidirPeriodicInterval=alaPimsmBidirPeriodicInterval, alaPimdmDenseGroupGrpAddress=alaPimdmDenseGroupGrpAddress, alaPimMoFRRAllRouteStatus=alaPimMoFRRAllRouteStatus, alaPimsmV6BidirFastJoin=alaPimsmV6BidirFastJoin, alaPimsmAsmFastJoin=alaPimsmAsmFastJoin, alaPimdmV6AdminStatus=alaPimdmV6AdminStatus, alaPimsmBidirStatus=alaPimsmBidirStatus, alaPimsmBidirSsmCompat=alaPimsmBidirSsmCompat, alaPimNotifications=alaPimNotifications, alaPimGlobalConfig=alaPimGlobalConfig, alaPimdmDenseGroupPrecedence=alaPimdmDenseGroupPrecedence, alaPimsmNonBidirHelloOrigin=alaPimsmNonBidirHelloOrigin, alaPimsmBidirFastJoin=alaPimsmBidirFastJoin, alaPimsmNonBidirHelloPeriod=alaPimsmNonBidirHelloPeriod, alaPimdmDenseGroupRowStatus=alaPimdmDenseGroupRowStatus, alaPimsmCompliance=alaPimsmCompliance, alaPimsmGlobalConfig=alaPimsmGlobalConfig, alaPimsmNonBidirHelloAddressType=alaPimsmNonBidirHelloAddressType, alaPimsmV6AsmFastJoin=alaPimsmV6AsmFastJoin, alaPimInterfaceAugTable=alaPimInterfaceAugTable, alaPimNotificationGroup=alaPimNotificationGroup, alaPimsmV6AdminStatus=alaPimsmV6AdminStatus, alaPimMbrAllSourcesStatus=alaPimMbrAllSourcesStatus, alaPimsmV6BidirStatus=alaPimsmV6BidirStatus, alaPimsmV6BidirSsmCompat=alaPimsmV6BidirSsmCompat, alaPimsmAdminSPTConfig=alaPimsmAdminSPTConfig, alaPimdmStateRefreshLimitInterval=alaPimdmStateRefreshLimitInterval, alaPimsmRPHashStatus=alaPimsmRPHashStatus, alaPimdmDenseGroupAddressType=alaPimdmDenseGroupAddressType, alaPimBfdAllInterfaceStatus=alaPimBfdAllInterfaceStatus, PYSNMP_MODULE_ID=alcatelIND1PIMMIB, alaPimNonBidirHello=alaPimNonBidirHello, alaPimdmConfigMIBGroup=alaPimdmConfigMIBGroup, alaPimConfigMIBGroup=alaPimConfigMIBGroup, alaPimsmProbeTime=alaPimsmProbeTime, alaPimMbrOperStatus=alaPimMbrOperStatus, alcatelIND1PIMMIB=alcatelIND1PIMMIB, alaPimsmRPThreshold=alaPimsmRPThreshold, alaPimsmSsmFastJoin=alaPimsmSsmFastJoin, alaPimsmNonBidirHelloMsgsRcvd=alaPimsmNonBidirHelloMsgsRcvd, alaPimV6BfdAllInterfaceStatus=alaPimV6BfdAllInterfaceStatus, alaPimdmDenseGroupOverrideDynamic=alaPimdmDenseGroupOverrideDynamic, alaPimsmOldRegisterMessageSupport=alaPimsmOldRegisterMessageSupport, alaPimInterfaceAugEntry=alaPimInterfaceAugEntry, alaPimdmStateRefreshTimeToLive=alaPimdmStateRefreshTimeToLive, alaPimsmV6SPTConfig=alaPimsmV6SPTConfig, alaPimInterfaceBfdStatus=alaPimInterfaceBfdStatus)
