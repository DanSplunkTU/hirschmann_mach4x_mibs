#
# PySNMP MIB module PPP-BRIDGE-NCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/PPP-BRIDGE-NCP-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 19:22:03 2021
# On host fv-az42-715 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ppp, = mibBuilder.importSymbols("PPP-LCP-MIB", "ppp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Integer32, Counter32, Gauge32, Counter64, Unsigned32, TimeTicks, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "Counter64", "Unsigned32", "TimeTicks", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pppBridge = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 4))
pppBridgeTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 4, 1), )
if mibBuilder.loadTexts: pppBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeTable.setDescription('Table containing the parameters and statistics\n                         for the local PPP entity that are related to\n                         the operation of Bridging over the PPP.')
pppBridgeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeEntry.setDescription('Bridging information for a particular PPP\n                         link.')
pppBridgeOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeOperStatus.setDescription('The operational status of the Bridge network\n                         protocol. If the value of this object is up\n                         then the finite state machine for the Bridge\n                         network protocol has reached the Opened state.')
pppBridgeLocalToRemoteTinygramCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeLocalToRemoteTinygramCompression.setReference('Section 6.7, Tinygram Compression Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeLocalToRemoteTinygramCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeLocalToRemoteTinygramCompression.setDescription('Indicates whether the local node will perform\n                         Tinygram Compression when sending packets to\n                         the remote entity. If false then the local\n                         entity will not perform Tinygram Compression.\n                         If true then the local entity will perform\n                         Tinygram Compression. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (pppBridgeOperStatus is\n                         opened).')
pppBridgeRemoteToLocalTinygramCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeRemoteToLocalTinygramCompression.setReference('Section 6.7, Tinygram Compression Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeRemoteToLocalTinygramCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeRemoteToLocalTinygramCompression.setDescription('If false(1) then the remote entity is not\n                         expected to perform Tinygram Compression. If\n                         true then the remote entity is expected to\n                         perform Tinygram Compression. The value of this\n                         object is meaningful only when the link has\n                         reached the open state (pppBridgeOperStatus is\n                         opened).')
pppBridgeLocalToRemoteLanId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeLocalToRemoteLanId.setReference('Section 6.8, LAN Identification Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeLocalToRemoteLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeLocalToRemoteLanId.setDescription('Indicates whether the local node will include\n                         the LAN Identification field in transmitted\n                         packets or not. If false(1) then the local node\n                         will not transmit this field, true(2) means\n                         that the field will be transmitted. The value\n                         of this object is meaningful only when the link\n                         has reached the open state (pppBridgeOperStatus\n                         is opened).')
pppBridgeRemoteToLocalLanId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeRemoteToLocalLanId.setReference('Section 6.8, LAN Identification Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeRemoteToLocalLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeRemoteToLocalLanId.setDescription('Indicates whether the remote node has\n                         indicated that it will include the LAN\n                         Identification field in transmitted packets or\n                         not. If false(1) then the field will not be\n                         transmitted, if true(2) then the field will be\n                         transmitted. The value of this object is\n                         meaningful only when the link has reached the\n                         open state (pppBridgeOperStatus is opened).')
pppBridgeConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 4, 2), )
if mibBuilder.loadTexts: pppBridgeConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigTable.setDescription('Table containing the parameters and statistics\n                         for the local PPP entity that are related to\n                         the operation of Bridging over the PPP.')
pppBridgeConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppBridgeConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigEntry.setDescription('Bridging Configuration information for a\n                         particular PPP link.')
pppBridgeConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigAdminStatus.setDescription("The immediate desired status of the Bridging\n                         network protocol. Setting this object to open\n                         will inject an administrative open event into\n                         the Bridging network protocol's finite state\n                         machine. Setting this object to close will\n                         inject an administrative close event into the\n                         Bridging network protocol's finite state\n                         machine.")
pppBridgeConfigTinygram = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeConfigTinygram.setReference('Section 6.7, Tinygram Compression Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeConfigTinygram.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigTinygram.setDescription('If false then the local BNCP entity will not\n                         initiate the Tinygram Compression Option\n                         Negotiation. If true then the local BNCP entity\n                         will initiate negotiation of this option.')
pppBridgeConfigRingId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeConfigRingId.setReference('Section 6.4, IEEE 802.5 Remote Ring\n                         Identification Option, of RFC1220')
if mibBuilder.loadTexts: pppBridgeConfigRingId.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigRingId.setDescription('If false then the local PPP Entity will not\n                         initiate a Remote Ring Identification Option\n                         negotiation. If true then the local PPP entity\n                         will intiate this negotiation. This MIB object\n                         is relevant only if the interface is for 802.5\n                         Token Ring bridging.')
pppBridgeConfigLineId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeConfigLineId.setReference('Section 6.5, IEEE 802.5 Line Identification\n                         Option, of RFC1220')
if mibBuilder.loadTexts: pppBridgeConfigLineId.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigLineId.setDescription('If false then the local PPP Entity is not to\n                         initiate a Line Identification Option\n                         negotiation. If true then the local PPP entity\n                         will intiate this negotiation. This MIB object\n                         is relevant only if the interface is for 802.5\n                         Token Ring bridging.')
pppBridgeConfigLanId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeConfigLanId.setReference('Section 6.8, LAN Identification Option, of\n                         RFC1220')
if mibBuilder.loadTexts: pppBridgeConfigLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeConfigLanId.setDescription('If false then the local BNCP entity will not\n                         initiate the LAN Identification Option\n                         Negotiation. If true then the local BNCP entity\n                         will initiate negotiation of this option.')
pppBridgeMediaTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 4, 3), )
if mibBuilder.loadTexts: pppBridgeMediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaTable.setDescription('Table identifying which MAC media types are\n                         enabled for the Bridging NCPs.')
pppBridgeMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PPP-BRIDGE-NCP-MIB", "pppBridgeMediaMacType"))
if mibBuilder.loadTexts: pppBridgeMediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaEntry.setDescription('Status of a specific MAC Type for a specific\n                         PPP Link.')
pppBridgeMediaMacType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeMediaMacType.setReference('Section 6.6, MAC Type Support Selection, of\n                         RFC1212.')
if mibBuilder.loadTexts: pppBridgeMediaMacType.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaMacType.setDescription('The MAC type for which this entry in the\n                         pppBridgeMediaTable is providing status\n                         information. Valid values for this object are\n                         defined in Section 6.6 MAC Type Support\n                         Selection of RFC1220 (Bridging Point-to-Point\n                         Protocol).')
pppBridgeMediaLocalStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dont-accept", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeMediaLocalStatus.setReference('Section 6.6, MAC Type Support Selection, of\n                         RFC1212.')
if mibBuilder.loadTexts: pppBridgeMediaLocalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaLocalStatus.setDescription('Indicates whether the local PPP Bridging\n                         Entity will accept packets of the protocol type\n                         identified in pppBridgeMediaMacType on the PPP\n                         link identified by ifIndex or not. If this\n                         object is accept then any packets of the\n                         indicated MAC type will be received and\n                         properly processed. If this object is dont-\n                         accept then received packets of the indicated\n                         MAC type will not be properly processed.')
pppBridgeMediaRemoteStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dont-accept", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBridgeMediaRemoteStatus.setReference('Section 6.6, MAC Type Support Selection, of\n                         RFC1212.')
if mibBuilder.loadTexts: pppBridgeMediaRemoteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaRemoteStatus.setDescription('Indicates whether the local PPP Bridging\n                         Entity believes that the remote PPP Bridging\n                         Entity will accept packets of the protocol type\n                         identified in pppBridgeMediaMacType on the PPP\n                         link identified by ifIndex or not.')
pppBridgeMediaConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 4, 4), )
if mibBuilder.loadTexts: pppBridgeMediaConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaConfigTable.setDescription('Table identifying which MAC media types are\n                         enabled for the Bridging NCPs.')
pppBridgeMediaConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PPP-BRIDGE-NCP-MIB", "pppBridgeMediaConfigMacType"))
if mibBuilder.loadTexts: pppBridgeMediaConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaConfigEntry.setDescription('Status of a specific MAC Type for a specific\n                         PPP Link.')
pppBridgeMediaConfigMacType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeMediaConfigMacType.setReference('Section 6.6, MAC Type Support Selection, of\n                         RFC1212.')
if mibBuilder.loadTexts: pppBridgeMediaConfigMacType.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaConfigMacType.setDescription('The MAC type for which this entry in the\n                         pppBridgeMediaConfigTable is providing status\n                         information. Valid values for this object are\n                         defined in Section 6.6 MAC Type Support\n                         Selection of RFC1220 (Bridging Point-to-Point\n                         Protocol).')
pppBridgeMediaConfigLocalStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dont-accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppBridgeMediaConfigLocalStatus.setReference('Section 6.6, MAC Type Support Selection, of\n                         RFC1212.')
if mibBuilder.loadTexts: pppBridgeMediaConfigLocalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppBridgeMediaConfigLocalStatus.setDescription('Indicates whether the local PPP Bridging\n                         Entity should accept packets of the protocol\n                         type identified in pppBridgeMediaConfigMacType\n                         on the PPP link identified by ifIndex or not.\n                         Setting this object to the value dont-accept\n                         has the affect of invalidating the\n                         corresponding entry in the\n                         pppBridgeMediaConfigTable object. It is an\n                         implementation-specific matter as to whether\n                         the agent removes an invalidated entry from the\n                         table. Accordingly, management stations must be\n                         prepared to receive tabular information from\n                         agents that corresponds to entries not\n                         currently in use. Changing this object will\n                         have effect when the link is next restarted.')
mibBuilder.exportSymbols("PPP-BRIDGE-NCP-MIB", pppBridgeRemoteToLocalLanId=pppBridgeRemoteToLocalLanId, pppBridgeConfigTable=pppBridgeConfigTable, pppBridgeMediaConfigTable=pppBridgeMediaConfigTable, pppBridgeOperStatus=pppBridgeOperStatus, pppBridgeLocalToRemoteTinygramCompression=pppBridgeLocalToRemoteTinygramCompression, pppBridgeEntry=pppBridgeEntry, pppBridgeMediaConfigEntry=pppBridgeMediaConfigEntry, pppBridgeRemoteToLocalTinygramCompression=pppBridgeRemoteToLocalTinygramCompression, pppBridgeTable=pppBridgeTable, pppBridgeConfigAdminStatus=pppBridgeConfigAdminStatus, pppBridge=pppBridge, pppBridgeConfigTinygram=pppBridgeConfigTinygram, pppBridgeConfigRingId=pppBridgeConfigRingId, pppBridgeMediaLocalStatus=pppBridgeMediaLocalStatus, pppBridgeConfigLanId=pppBridgeConfigLanId, pppBridgeMediaRemoteStatus=pppBridgeMediaRemoteStatus, pppBridgeConfigLineId=pppBridgeConfigLineId, pppBridgeMediaConfigMacType=pppBridgeMediaConfigMacType, pppBridgeMediaTable=pppBridgeMediaTable, pppBridgeLocalToRemoteLanId=pppBridgeLocalToRemoteLanId, pppBridgeMediaMacType=pppBridgeMediaMacType, pppBridgeMediaConfigLocalStatus=pppBridgeMediaConfigLocalStatus, pppBridgeConfigEntry=pppBridgeConfigEntry, pppBridgeMediaEntry=pppBridgeMediaEntry)
