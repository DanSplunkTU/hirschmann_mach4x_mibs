#
# PySNMP MIB module RFC1406-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RFC1406-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 17:49:47 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
transmission, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Integer32, IpAddress, Gauge32, Bits, NotificationType, Counter32, Unsigned32, MibIdentifier, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Integer32", "IpAddress", "Gauge32", "Bits", "NotificationType", "Counter32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ds1 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18))
dsx1ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 6), )
if mibBuilder.loadTexts: dsx1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ConfigTable.setDescription('The DS1 Configuration table.')
dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 6, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1LineIndex"))
if mibBuilder.loadTexts: dsx1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ConfigEntry.setDescription('An entry in the DS1 Configuration table.')
dsx1LineIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1LineIndex.setDescription('This object is the identifier of a DS1  Inter-\n                face on a managed device.  If there is an ifEn-\n                try that is directly associated with  this  and\n                only  this  DS1  interface,  it should have the\n                same value as ifIndex.   Otherwise,  the  value\n                exceeds  ifNumber,  and  is a unique identifier\n                following this rule: inside  interfaces  (e.g.,\n                equipment  side)  with even numbers and outside\n                interfaces  (e.g.,  network   side)   with   odd\n                numbers.')
dsx1IfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IfIndex.setDescription('This value for this object  is  equal  to  the\n                value  of  ifIndex from the Interfaces table of\n                MIB II (RFC 1213).')
dsx1TimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TimeElapsed.setDescription('The number of seconds that have elapsed  since\n                the  beginning of the current error-measurement\n                period.')
dsx1ValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ValidIntervals.setDescription('The number of  previous  intervals  for  which\n                valid data was collected.  The value will be 96\n                unless the interface was brought on-line within\n                the last 24 hours, in which case the value will\n                be the number of complete 15  minute  intervals\n                the since interface has been online.')
dsx1LineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1-CRC", 5), ("dsx1E1-MF", 6), ("dsx1E1-CRC-MF", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1LineType.setDescription('This variable indicates  the  variety  of  DS1\n                Line  implementing  this  circuit.  The type of\n                circuit affects the number of bits  per  second\n                that  the circuit can reasonably carry, as well\n                as the interpretation of the  usage  and  error\n                statistics.  The values, in sequence, describe:\n\n                TITLE:        SPECIFICATION:\n                dsx1ESF       Extended SuperFrame DS1\n                dsx1D4        AT&T D4 format DS1\n                dsx1E1        CCITT Recommendation G.704\n                                (Table 4a)\n                dsx1E1-CRC    CCITT Recommendation G.704\n                                (Table 4b)\n                dsxE1-MF      G.704 (Table 4a) with TS16\n                                multiframing enabled\n                dsx1E1-CRC-MF G.704 (Table 4b) with TS16\n                                multiframing enabled')
dsx1LineCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1LineCoding.setDescription('This variable describes the  variety  of  Zero\n                Code  Suppression  used  on  the link, which in\n                turn affects a number of its characteristics.\n\n                dsx1JBZS refers the Jammed  Bit  Zero  Suppres-\n                sion,  in  which  the  AT&T specification of at\n                least one pulse every 8 bit periods is literal-\n                ly  implemented  by forcing a pulse in bit 8 of\n                each channel.  Thus, only seven bits per  chan-\n                nel, or 1.344 Mbps, is available for data.\n\n                dsx1B8ZS refers to the use of a specified  pat-\n                tern  of  normal  bits  and  bipolar violations\n                which are used to replace a sequence  of  eight\n                zero bits.\n\n                ANSI Clear Channels may use dsx1ZBTSI, or  Zero\n                Byte Time Slot Interchange.\n\n                E1 links, with or without CRC, use dsx1HDB3  or\n                dsx1AMI.\n\n                dsx1AMI refers to a mode wherein no  zero  code\n                suppression  is  present  and the line encoding\n                does not solve the problem directly.   In  this\n                application, the higher layer must provide data\n                which meets or exceeds the  pulse  density  re-\n                quirements, such as inverting HDLC data.')
dsx1SendCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4), ("dsx1SendQRS", 5), ("dsx1Send511Pattern", 6), ("dsx1Send3in24Pattern", 7), ("dsx1SendOtherTestPattern", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1SendCode.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1SendCode.setDescription('This variable indicates what type of  code  is\n                being sent across the DS1 interface by the dev-\n                ice.  The values mean:\n\n                dsx1SendNoCode\n                     sending looped or normal data\n\n                dsx1SendLineCode\n                     sending a request for a line loopback\n\n                dsx1SendPayloadCode\n                     sending a request for a payload loopback\n\n                dsx1SendResetCode\n                     sending a loopback termination request\n\n                dsx1SendQRS\n                     sending a Quasi-Random Signal  (QRS)  test\n                     pattern\n\n                dsx1Send511Pattern\n                     sending a 511 bit fixed test pattern\n\n                dsx1Send3in24Pattern\n                     sending a fixed test pattern of 3 bits set\n                     in 24\n\n                dsx1SendOtherTestPattern\n                     sending a test pattern  other  than  those\n                     described by this object')
dsx1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1CircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CircuitIdentifier.setDescription("This  variable   contains   the   transmission\n                vendor's circuit identifier, for the purpose of\n                facilitating troubleshooting.")
dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1LoopbackConfig.setDescription("This variable represents the  loopback  confi-\n                guration of the DS1 interface.  Agents support-\n                ing read/write access should return badValue in\n                response to a requested loopback state that the\n                interface does not support.  The values mean:\n                dsx1NoLoop\n                     Not in the loopback state.  A device  that\n                     is not capable of performing a loopback on\n                     the interface shall always return this  as\n                     it's value.\n\n                dsx1PayloadLoop\n                     The received signal at this  interface  is\n                     looped  through  the device. Typically the\n                     received signal is  looped  back  for  re-\n                     transmission  after  it has passed through\n                     the device's framing function.\n\n                dsx1LineLoop\n                     The received signal at this interface does\n                     not  go  through the device (minimum pene-\n                     tration) but is looped back out.\n\n                dsx1OtherLoop\n                     Loopbacks that are not defined here.")
dsx1LineStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1LineStatus.setDescription("This variable indicates the Line Status of the\n                interface.   It contains loopback, failure, re-\n                ceived 'alarm'  and transmitted 'alarm'  infor-\n                mation.\n\n     The dsx1LineStatus is a bit  map  represented  as  a  sum,\n     therefore, it can represent multiple failures (alarms) and\n     a LoopbackState simultaneously.\n\n     dsx1NoAlarm should be set if and only if no other flag  is\n     set.\n\n     If the dsx1LoopbackState bit is set, the loopback  in  ef-\n     fect can be determined from the dsx1LoopbackConfig object.\n\n     The various bit positions are:\n          1     dsx1NoAlarm           No Alarm Present\n          2     dsx1RcvFarEndLOF      Far end LOF (a.k.a., Yellow Alarm)\n          4     dsx1XmtFarEndLOF      Near end sending LOF Indication\n          8     dsx1RcvAIS            Far end sending AIS\n\n         16     dsx1XmtAIS            Near end sending AIS\n         32     dsx1LossOfFrame       Near end LOF (a.k.a., Red Alarm)\n         64     dsx1LossOfSignal      Near end Loss Of Signal\n        128     dsx1LoopbackState     Near end is looped\n        256     dsx1T16AIS            E1 TS16 AIS\n        512     dsx1RcvFarEndLOMF     Far End Sending TS16 LOMF\n       1024     dsx1XmtFarEndLOMF     Near End Sending TS16 LOMF\n       2048     dsx1RcvTestCode       Near End detects a test code\n       4096     dsx1OtherFailure      any line status not defined here")
dsx1SignalMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1SignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1SignalMode.setDescription("'none' indicates that no bits are reserved for\n                signaling on this channel.\n\n                 'robbedBit' indicates that T1 Robbed Bit  Sig-\n                naling is in use.\n\n                 'bitOriented' indicates that E1 Channel  Asso-\n                ciated Signaling is in use.\n\n                 'messageOriented' indicates that Common  Chan-\n                nel Signaling is in use either on channel 16 of\n                an E1 link or channel 24 of a T1.")
dsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TransmitClockSource.setDescription("The source of Tranmit Clock.\n                 'loopTiming' indicates that the recovered  re-\n                ceive clock is used as the transmit clock.\n\n                 'localTiming' indicates  that  a  local  clock\n                source is used.\n\n                 'throughTiming' indicates that  recovered  re-\n                ceive  clock  from another interface is used as\n                the transmit clock.")
dsx1Fdl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("other", 1), ("dsx1Ansi-T1-403", 2), ("dsx1Att-54016", 4), ("dsx1Fdl-none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1Fdl.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1Fdl.setDescription("This bitmap describes the use of  the  facili-\n                ties data link, and is the sum of the capabili-\n                ties:\n\n                 'other' indicates that a protocol  other  than\n                one following is used.\n\n                 'dsx1Ansi-T1-403' refers to the  FDL  exchange\n                recommended by ANSI.\n\n                 'dsx1Att-54016' refers to ESF FDL exchanges.\n\n                 'dsx1Fdl-none' indicates that the device  does\n                not use the FDL.")
dsx1CurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 7), )
if mibBuilder.loadTexts: dsx1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentTable.setDescription('The DS1 Current table.')
dsx1CurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 7, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1CurrentIndex"))
if mibBuilder.loadTexts: dsx1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentEntry.setDescription('An entry in the DS1 Current table.')
dsx1CurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value as a dsx1LineIndex\n                object instance.')
dsx1CurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentESs.setDescription('The number of Errored Seconds, encountered  by\n                a DS1 interface in the current 15 minute inter-\n                val.')
dsx1CurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentSESs.setDescription('The number of Severely Errored Seconds encoun-\n                tered  by  a  DS1  interface  in the current 15\n                minute interval.')
dsx1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds\n                encountered  by  a DS1 interface in the current\n                15 minute interval.')
dsx1CurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentUASs.setDescription('The number of Unavailable Seconds  encountered\n                by a DS1 interface in the current 15 minute in-\n                terval.')
dsx1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentCSSs.setDescription('The number of Controlled Slip Seconds  encoun-\n                tered  by  a  DS1  interface  in the current 15\n                minute interval.')
dsx1CurrentPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentPCVs.setDescription('The number of Path Coding  Violations  encoun-\n                tered  by  a  DS1  interface  in the current 15\n                minute interval.')
dsx1CurrentLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentLESs.setDescription('The number of Line Errored Seconds encountered\n                by a DS1 interface in the current 15 minute in-\n                terval.')
dsx1CurrentBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by  a DS1 interface in the current\n                15 minute interval.')
dsx1CurrentDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered  by  a  DS1  interface  in the current 15\n                minute interval.')
dsx1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1CurrentLCVs.setDescription('The number of Line Code Violations (LCVs)  en-\n                countered  by a DS1 interface in the current 15\n                minute interval.')
dsx1IntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 8), )
if mibBuilder.loadTexts: dsx1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalTable.setDescription('The DS1 Interval table.')
dsx1IntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 8, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1IntervalIndex"), (0, "RFC1406-MIB", "dsx1IntervalNumber"))
if mibBuilder.loadTexts: dsx1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalEntry.setDescription('An entry in the DS1 Interval table.')
dsx1IntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value as a dsx1LineIndex\n                object instance.')
dsx1IntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most\n                recently completed 15 minute interval and 96 is\n                the least recently completed 15 minutes  inter-\n                val   (assuming   that  all  96  intervals  are\n                valid).')
dsx1IntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalESs.setDescription('The number of Errored Seconds encountered by a\n                DS1  interface in one of the previous 96, indi-\n                vidual 15 minute, intervals.')
dsx1IntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalSESs.setDescription('The number of Severely Errored Seconds encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds\n                encountered  by  a  DS1 interface in one of the\n                previous 96, individual 15 minute, intervals.')
dsx1IntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalUASs.setDescription('The number of Unavailable Seconds  encountered\n                by  a  DS1 interface in one of the previous 96,\n                individual 15 minute, intervals.')
dsx1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalCSSs.setDescription('The number of Controlled Slip Seconds  encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalPCVs.setDescription('The number of Path Coding  Violations  encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1IntervalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalLESs.setDescription('The number of Line Errored Seconds encountered\n                by  a  DS1 interface in one of the previous 96,\n                individual 15 minute, intervals.')
dsx1IntervalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by  a  DS1 interface in one of the\n                previous 96, individual 15 minute, intervals.')
dsx1IntervalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1IntervalLCVs.setDescription('The number of Line Code Violations (LCVs)  en-\n                countered  by a DS1 interface in the current 15\n                minute interval.')
dsx1TotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 9), )
if mibBuilder.loadTexts: dsx1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalTable.setDescription('The DS1 Total table.  24 hour interval.')
dsx1TotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 9, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1TotalIndex"))
if mibBuilder.loadTexts: dsx1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalEntry.setDescription('An entry in the DS1 Total table.')
dsx1TotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value as a dsx1LineIndex\n                object instance.')
dsx1TotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalESs.setDescription('The number of Errored Seconds encountered by a\n                DS1 interface in the previous 24 hour interval')
dsx1TotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalSESs.setDescription('The number of Severely Errored Seconds encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalSEFSs.setDescription('The number of Severely Errored Framing Seconds\n                encountered  by a DS1 interface in the previous\n                24 hour interval.')
dsx1TotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalUASs.setDescription('The number of Unavailable Seconds  encountered\n                by  a DS1 interface in the previous 24 hour in-\n                terval.')
dsx1TotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalCSSs.setDescription('The number of Controlled Slip Seconds  encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1TotalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalPCVs.setDescription('The number of Path Coding  Violations  encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1TotalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalLESs.setDescription('The number of Line Errored Seconds encountered\n                by  a DS1 interface in the previous 24 hour in-\n                terval.')
dsx1TotalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by a DS1 interface in the previous\n                24 hour interval.')
dsx1TotalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1TotalLCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1TotalLCVs.setDescription('The number of Line Code Violations (LCVs)  en-\n                countered  by a DS1 interface in the current 15\n                minute interval.')
dsx1FarEndCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 10), )
if mibBuilder.loadTexts: dsx1FarEndCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentTable.setDescription('The DS1 Far End Current table.')
dsx1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 10, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1FarEndCurrentIndex"))
if mibBuilder.loadTexts: dsx1FarEndCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentEntry.setDescription('An entry in the DS1 Far End Current table.')
dsx1FarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value  an  dsx1LineIndex\n                object instance.')
dsx1FarEndTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTimeElapsed.setDescription('The number of seconds that  have  elapsed\n                     since the beginning of the far end current\n                     error-measurement period.')
dsx1FarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndValidIntervals.setDescription('The number of previous far end  intervals\n                     for  which  valid data was collected.  The\n                     value will be 96 unless the interface  was\n                     brought  online  within the last 24 hours,\n                     in which case the value will be the number\n                     of  complete  15  minute far end intervals\n                     since the interface has been online.')
dsx1FarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentESs.setDescription('The number of Far Far End Errored Seconds  en-\n                countered  by a DS1 interface in the current 15\n                minute interval.')
dsx1FarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentSESs.setDescription('The number of Far End Severely Errored Seconds\n                encountered  by  a DS1 interface in the current\n                15 minute interval.')
dsx1FarEndCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentSEFSs.setDescription('The number of Far End Severely Errored Framing\n                Seconds  encountered  by a DS1 interface in the\n                current 15 minute interval.')
dsx1FarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentUASs.setDescription('The number of Unavailable Seconds  encountered\n                by a DS1 interface in the current 15 minute in-\n                terval.')
dsx1FarEndCurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentCSSs.setDescription('The number of Far End Controlled Slip  Seconds\n                encountered  by  a DS1 interface in the current\n                15 minute interval.')
dsx1FarEndCurrentLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentLESs.setDescription('The number of Far End Line Errored Seconds en-\n                countered  by a DS1 interface in the current 15\n                minute interval.')
dsx1FarEndCurrentPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentPCVs.setDescription('The number of Far End Path  Coding  Violations\n                reported  via the far end block error count en-\n                countered by a DS1 interface in the current  15\n                minute interval.')
dsx1FarEndCurrentBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by  a DS1 interface in the current\n                15 minute interval.')
dsx1FarEndCurrentDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndCurrentDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered  by  a  DS1  interface  in the current 15\n                minute interval.')
dsx1FarEndIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 11), )
if mibBuilder.loadTexts: dsx1FarEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalTable.setDescription('The DS1 Far End Interval table.')
dsx1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 11, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1FarEndIntervalIndex"), (0, "RFC1406-MIB", "dsx1FarEndIntervalNumber"))
if mibBuilder.loadTexts: dsx1FarEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalEntry.setDescription('An entry in the DS1 Far End Interval table.')
dsx1FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value as a dsx1LineIndex\n                object instance.')
dsx1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most\n                recently completed 15 minute interval and 96 is\n                the least recently completed 15 minutes  inter-\n                val   (assuming   that  all  96  intervals  are\n                valid).')
dsx1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalESs.setDescription('The number of Far End Errored Seconds  encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalSESs.setDescription('The number of Far End Severely Errored Seconds\n                encountered  by  a  DS1 interface in one of the\n                previous 96, individual 15 minute, intervals.')
dsx1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalSEFSs.setDescription('The number of Far End Severely Errored Framing\n                Seconds  encountered  by a DS1 interface in one\n                of the previous 96, individual 15  minute,  in-\n                tervals.')
dsx1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalUASs.setDescription('The number of Unavailable Seconds  encountered\n                by  a  DS1 interface in one of the previous 96,\n                individual 15 minute, intervals.')
dsx1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalCSSs.setDescription('The number of Far End Controlled Slip  Seconds\n                encountered  by  a  DS1 interface in one of the\n                previous 96, individual 15 minute, intervals.')
dsx1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalLESs.setDescription('The number of Far End Line Errored Seconds en-\n                countered by a DS1 interface in one of the pre-\n                vious 96, individual 15 minute, intervals.')
dsx1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalPCVs.setDescription('The number of Far End Path  Coding  Violations\n                reported  via the far end block error count en-\n                countered by a DS1 interface in one of the pre-\n                vious 96, individual 15 minute, intervals.')
dsx1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by  a  DS1 interface in one of the\n                previous 96, individual 15 minute, intervals.')
dsx1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndIntervalDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered by a DS1 interface in one of the previous\n                96, individual 15 minute, intervals.')
dsx1FarEndTotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 12), )
if mibBuilder.loadTexts: dsx1FarEndTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalTable.setDescription('The DS1 Far End Total table.')
dsx1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 12, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1FarEndTotalIndex"))
if mibBuilder.loadTexts: dsx1FarEndTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalEntry.setDescription('An entry in the DS1 Far End Total table.')
dsx1FarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value  an  dsx1LineIndex\n                object instance.')
dsx1FarEndTotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalESs.setDescription('The number of Far End Errored Seconds  encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1FarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalSESs.setDescription('The number of Far End Severely Errored Seconds\n                encountered  by a DS1 interface in the previous\n                24 hour interval.')
dsx1FarEndTotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalSEFSs.setDescription('The number of Far End Severely Errored Framing\n                Seconds  encountered  by a DS1 interface in the\n                previous 24 hour interval.')
dsx1FarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalUASs.setDescription('The number of Unavailable Seconds  encountered\n                by  a DS1 interface in the previous 24 hour in-\n                terval.')
dsx1FarEndTotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalCSSs.setDescription('The number of Far End Controlled Slip  Seconds\n                encountered  by a DS1 interface in the previous\n                24 hour interval.')
dsx1FarEndTotalLESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalLESs.setDescription('The number of Far End Line Errored Seconds en-\n                countered by a DS1 interface in the previous 24\n                hour interval.')
dsx1FarEndTotalPCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalPCVs.setDescription('The number of Far End Path  Coding  Violations\n                reported  via the far end block error count en-\n                countered by a DS1 interface in the previous 24\n                hour interval.')
dsx1FarEndTotalBESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalBESs.setDescription('The number of Bursty  Errored  Seconds  (BESs)\n                encountered  by a DS1 interface in the previous\n                24 hour interval.')
dsx1FarEndTotalDMs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FarEndTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FarEndTotalDMs.setDescription('The number of Degraded Minutes  (DMs)  encoun-\n                tered  by  a  DS1  interface in the previous 24\n                hour interval.')
dsx1FracTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 13), )
if mibBuilder.loadTexts: dsx1FracTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FracTable.setDescription('The DS1 Fractional table.')
dsx1FracEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 13, 1), ).setIndexNames((0, "RFC1406-MIB", "dsx1FracIndex"), (0, "RFC1406-MIB", "dsx1FracNumber"))
if mibBuilder.loadTexts: dsx1FracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FracEntry.setDescription('An entry in the DS1 Fractional table.')
dsx1FracIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FracIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FracIndex.setDescription('The index value which uniquely identifies  the\n                DS1  interface  to which this entry is applica-\n                ble.  The interface identified by a  particular\n                value  of  this  index is the same interface as\n                identified by the same value  an  dsx1LineIndex\n                object instance.')
dsx1FracNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FracNumber.setDescription('The channel number for this entry.')
dsx1FracIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1FracIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1FracIfIndex.setDescription('An index value that uniquely identifies an in-\n                terface.  The interface identified by a partic-\n                ular value of this index is the same  interface\n                as  identified by the same value an ifIndex ob-\n                ject instance. If no interface is currently us-\n                ing  a channel, the value should be zero.  If a\n                single interface occupies more  than  one  time\n                slot,  that ifIndex value will be found in mul-\n                tiple time slots.')
mibBuilder.exportSymbols("RFC1406-MIB", dsx1TimeElapsed=dsx1TimeElapsed, dsx1LineIndex=dsx1LineIndex, dsx1TransmitClockSource=dsx1TransmitClockSource, dsx1FarEndCurrentSESs=dsx1FarEndCurrentSESs, dsx1FarEndCurrentESs=dsx1FarEndCurrentESs, dsx1CurrentESs=dsx1CurrentESs, dsx1FarEndTotalTable=dsx1FarEndTotalTable, dsx1CurrentPCVs=dsx1CurrentPCVs, dsx1IntervalEntry=dsx1IntervalEntry, dsx1IntervalDMs=dsx1IntervalDMs, dsx1TotalCSSs=dsx1TotalCSSs, dsx1CurrentCSSs=dsx1CurrentCSSs, dsx1FarEndCurrentDMs=dsx1FarEndCurrentDMs, dsx1FracIfIndex=dsx1FracIfIndex, dsx1FarEndTotalCSSs=dsx1FarEndTotalCSSs, dsx1FarEndCurrentIndex=dsx1FarEndCurrentIndex, dsx1IntervalUASs=dsx1IntervalUASs, dsx1FarEndTotalSEFSs=dsx1FarEndTotalSEFSs, dsx1IntervalPCVs=dsx1IntervalPCVs, dsx1FarEndIntervalTable=dsx1FarEndIntervalTable, dsx1FarEndTotalESs=dsx1FarEndTotalESs, dsx1FarEndIntervalSESs=dsx1FarEndIntervalSESs, dsx1ValidIntervals=dsx1ValidIntervals, dsx1FarEndIntervalUASs=dsx1FarEndIntervalUASs, dsx1Fdl=dsx1Fdl, dsx1ConfigEntry=dsx1ConfigEntry, dsx1CurrentSEFSs=dsx1CurrentSEFSs, dsx1FarEndCurrentTable=dsx1FarEndCurrentTable, dsx1TotalEntry=dsx1TotalEntry, dsx1IntervalIndex=dsx1IntervalIndex, dsx1CurrentUASs=dsx1CurrentUASs, dsx1TotalLCVs=dsx1TotalLCVs, dsx1FarEndCurrentSEFSs=dsx1FarEndCurrentSEFSs, dsx1IntervalCSSs=dsx1IntervalCSSs, dsx1IfIndex=dsx1IfIndex, dsx1IntervalNumber=dsx1IntervalNumber, dsx1CurrentLESs=dsx1CurrentLESs, dsx1FarEndIntervalNumber=dsx1FarEndIntervalNumber, dsx1IntervalTable=dsx1IntervalTable, dsx1FarEndTotalUASs=dsx1FarEndTotalUASs, dsx1FarEndTotalEntry=dsx1FarEndTotalEntry, dsx1IntervalSESs=dsx1IntervalSESs, dsx1LineCoding=dsx1LineCoding, dsx1LoopbackConfig=dsx1LoopbackConfig, dsx1FarEndTotalSESs=dsx1FarEndTotalSESs, dsx1FarEndTotalPCVs=dsx1FarEndTotalPCVs, dsx1FarEndIntervalDMs=dsx1FarEndIntervalDMs, dsx1TotalUASs=dsx1TotalUASs, dsx1TotalSEFSs=dsx1TotalSEFSs, dsx1CurrentSESs=dsx1CurrentSESs, dsx1FarEndTotalBESs=dsx1FarEndTotalBESs, dsx1IntervalESs=dsx1IntervalESs, dsx1FarEndCurrentLESs=dsx1FarEndCurrentLESs, dsx1CurrentEntry=dsx1CurrentEntry, dsx1FarEndValidIntervals=dsx1FarEndValidIntervals, dsx1FarEndIntervalCSSs=dsx1FarEndIntervalCSSs, dsx1FracTable=dsx1FracTable, dsx1FracEntry=dsx1FracEntry, dsx1FarEndTotalIndex=dsx1FarEndTotalIndex, dsx1FarEndIntervalLESs=dsx1FarEndIntervalLESs, dsx1FracNumber=dsx1FracNumber, dsx1LineStatus=dsx1LineStatus, dsx1FarEndIntervalEntry=dsx1FarEndIntervalEntry, dsx1FarEndIntervalESs=dsx1FarEndIntervalESs, dsx1CurrentLCVs=dsx1CurrentLCVs, dsx1TotalPCVs=dsx1TotalPCVs, dsx1FarEndTotalLESs=dsx1FarEndTotalLESs, dsx1IntervalSEFSs=dsx1IntervalSEFSs, dsx1IntervalLCVs=dsx1IntervalLCVs, dsx1TotalSESs=dsx1TotalSESs, dsx1FarEndTotalDMs=dsx1FarEndTotalDMs, dsx1LineType=dsx1LineType, dsx1FarEndTimeElapsed=dsx1FarEndTimeElapsed, dsx1FarEndIntervalBESs=dsx1FarEndIntervalBESs, dsx1TotalLESs=dsx1TotalLESs, dsx1FarEndCurrentEntry=dsx1FarEndCurrentEntry, dsx1ConfigTable=dsx1ConfigTable, dsx1SendCode=dsx1SendCode, dsx1SignalMode=dsx1SignalMode, dsx1FarEndIntervalPCVs=dsx1FarEndIntervalPCVs, dsx1CircuitIdentifier=dsx1CircuitIdentifier, dsx1FracIndex=dsx1FracIndex, dsx1TotalTable=dsx1TotalTable, dsx1FarEndIntervalIndex=dsx1FarEndIntervalIndex, dsx1IntervalLESs=dsx1IntervalLESs, dsx1TotalBESs=dsx1TotalBESs, dsx1CurrentTable=dsx1CurrentTable, ds1=ds1, dsx1FarEndIntervalSEFSs=dsx1FarEndIntervalSEFSs, dsx1FarEndCurrentUASs=dsx1FarEndCurrentUASs, dsx1TotalDMs=dsx1TotalDMs, dsx1TotalIndex=dsx1TotalIndex, dsx1TotalESs=dsx1TotalESs, dsx1FarEndCurrentPCVs=dsx1FarEndCurrentPCVs, dsx1IntervalBESs=dsx1IntervalBESs, dsx1CurrentIndex=dsx1CurrentIndex, dsx1CurrentDMs=dsx1CurrentDMs, dsx1FarEndCurrentBESs=dsx1FarEndCurrentBESs, dsx1CurrentBESs=dsx1CurrentBESs, dsx1FarEndCurrentCSSs=dsx1FarEndCurrentCSSs)
