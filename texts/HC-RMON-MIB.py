#
# PySNMP MIB module HC-RMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/HC-RMON-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 19:11:57 2021
# On host fv-az42-715 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ZeroBasedCounter64, CounterBasedGauge64 = mibBuilder.importSymbols("HCNUM-TC", "ZeroBasedCounter64", "CounterBasedGauge64")
statistics, hostTopN, OwnerString, hosts, etherHistoryIndex, etherStatsIndex, history, etherHistorySampleIndex, matrix, rmon = mibBuilder.importSymbols("RMON-MIB", "statistics", "hostTopN", "OwnerString", "hosts", "etherHistoryIndex", "etherStatsIndex", "history", "etherHistorySampleIndex", "matrix", "rmon")
rmonConformance, ZeroBasedCounter32, probeConfig = mibBuilder.importSymbols("RMON2-MIB", "rmonConformance", "ZeroBasedCounter32", "probeConfig")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, iso, IpAddress, Counter32, ModuleIdentity, NotificationType, Counter64, Bits, Gauge32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "iso", "IpAddress", "Counter32", "ModuleIdentity", "NotificationType", "Counter64", "Bits", "Gauge32", "MibIdentifier", "ObjectIdentity")
TimeStamp, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "RowStatus")
hcRMON = ModuleIdentity((1, 3, 6, 1, 2, 1, 16, 20, 5))
hcRMON.setRevisions(('2002-05-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hcRMON.setRevisionsDescriptions(('The original version of this MIB, published as RFC3273.',))
if mibBuilder.loadTexts: hcRMON.setLastUpdated('200205080000Z')
if mibBuilder.loadTexts: hcRMON.setOrganization('Netgear Inc')
if mibBuilder.loadTexts: hcRMON.setContactInfo('')
if mibBuilder.loadTexts: hcRMON.setDescription('The MIB module for managing remote monitoring\n        device implementations. This MIB module\n        augments the original RMON MIB as specified in\n        RFC 2819 and RFC 1513 and RMON-2 MIB as specified in\n        RFC 2021.')
mediaIndependentStats = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 21))
mediaIndependentTable = MibTable((1, 3, 6, 1, 2, 1, 16, 21, 1), )
if mibBuilder.loadTexts: mediaIndependentTable.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentTable.setDescription('Media independent statistics for promiscuous monitoring of\n        any media.\n\n        The following table defines media independent statistics that\n        provide information for full and/or half-duplex links as well\n        as high capacity links.\n\n        For half-duplex links, or full-duplex-capable links operating\n        in half-duplex mode, the mediaIndependentIn* objects shall be\n        used and the mediaIndependentOut* objects shall not increment.\n\n        For full-duplex links, the mediaIndependentOut* objects shall\n        be present and shall increment. Whenever possible, the probe\n        should count packets moving away from the closest terminating\n        equipment as output packets. Failing that, the probe should\n        count packets moving away from the DTE as output packets.')
mediaIndependentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 21, 1, 1), ).setIndexNames((0, "HC-RMON-MIB", "mediaIndependentIndex"))
if mibBuilder.loadTexts: mediaIndependentEntry.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentEntry.setDescription('Media independent statistics for promiscuous monitoring of\n        any media.')
mediaIndependentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mediaIndependentIndex.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentIndex.setDescription('The value of this object uniquely identifies this\n        mediaIndependent entry.')
mediaIndependentDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentDataSource.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDataSource.setDescription('This object identifies the source of the data that\n        this mediaIndependent entry is configured to analyze.  This\n        source can be any interface on this device.\n        In order to identify a particular interface, this\n        object shall identify the instance of the ifIndex\n        object, defined in RFC 1213 and RFC 2233 [16,17], for\n        the desired interface.  For example, if an entry\n        were to receive data from interface #1, this object\n        would be set to ifIndex.1.\n\n        The statistics in this group reflect all packets\n        on the local network segment attached to the\n        identified interface.\n\n        An agent may or may not be able to tell if\n        fundamental changes to the media of the interface\n        have occurred and necessitate a deletion of\n        this entry.  For example, a hot-pluggable ethernet\n        card could be pulled out and replaced by a\n        token-ring card.  In such a case, if the agent has\n        such knowledge of the change, it is recommended that\n        it delete this entry.\n\n        This object may not be modified if the associated\n        mediaIndependentStatus object is equal to active(1).')
mediaIndependentDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 3), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDropEvents.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDropEvents.setDescription('The total number of events in which packets\n        were dropped by the probe due to lack of resources.\n        Note that this number is not necessarily the number of\n        packets dropped; it is just the number of times this\n        condition has been detected.')
mediaIndependentDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDroppedFrames.setDescription('The total number of frames which were received by the probe\n        and therefore not accounted for in the\n        mediaIndependentDropEvents, but for which the probe chose not\n        to count for this entry for whatever reason.  Most often, this\n        event occurs when the probe is out of some resources and\n        decides to shed load from this collection.\n\n        This count does not include packets that were not counted\n        because they had MAC-layer errors.\n\n        Note that, unlike the dropEvents counter, this number is the\n        exact number of frames dropped.')
mediaIndependentInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received\n        on a half-duplex link or on the inbound connection of a\n        full-duplex link.')
mediaIndependentInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOverflowPkts.setDescription('The number of times the associated\n        mediaIndependentInPkts counter has overflowed.')
mediaIndependentInHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInHighCapacityPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received\n        on a half-duplex link or on the inbound connection of a\n        full-duplex link.')
mediaIndependentOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received on a\n        full-duplex link in the direction of the network.')
mediaIndependentOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOverflowPkts.setDescription('The number of times the associated\n        mediaIndependentOutPkts counter has overflowed.')
mediaIndependentOutHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received on a\n        full-duplex link in the direction of the network.')
mediaIndependentInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOctets.setDescription('The total number of octets of data (including those in bad\n        packets) received (excluding framing bits but including FCS\n        octets) on a half-duplex link or on the inbound connection of\n        a full-duplex link.')
mediaIndependentInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOverflowOctets.setDescription('The number of times the associated\n        mediaIndependentInOctets counter has overflowed.')
mediaIndependentInHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInHighCapacityOctets.setDescription('The total number of octets of data (including those in bad\n        packets) received (excluding framing bits but\n        including FCS octets) on a half-duplex link or on the inbound\n        connection of a full-duplex link.')
mediaIndependentOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 14), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOctets.setDescription('The total number of octets of data (including those in bad\n        packets) received on a full-duplex link in the direction of\n        the network (excluding framing bits but including FCS\n        octets).')
mediaIndependentOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 15), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOverflowOctets.setDescription('The number of times the associated\n        mediaIndependentOutOctets counter has overflowed.')
mediaIndependentOutHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 16), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityOctets.setDescription('The total number of octets of data (including those in bad\n        packets) received on a full-duplex link in the direction of\n        the network (excluding framing bits but including FCS\n        octets).')
mediaIndependentInNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastPkts.setDescription('The total number of non-unicast packets (including bad\n        packets) received on a half-duplex link or on the inbound\n        connection of a full-duplex link.')
mediaIndependentInNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastOverflowPkts.setDescription('The number of times the associated\n        mediaIndependentInNUCastPkts counter has overflowed.')
mediaIndependentInNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastHighCapacityPkts.setDescription('The total number of non-unicast packets (including bad\n        packets) received on a half-duplex link or on the inbound\n        connection of a full-duplex link.')
mediaIndependentOutNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastPkts.setDescription('The total number of non-unicast packets (including bad\n        packets) received on a full-duplex link in the direction of\n        the network.')
mediaIndependentOutNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 21), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastOverflowPkts.setDescription('The number of times the associated\n        mediaIndependentOutNUCastPkts counter has overflowed.')
mediaIndependentOutNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastHighCapacityPkts.setDescription('The total number of packets (including bad packets)\n        received on a full-duplex link in the direction of the\n        network.')
mediaIndependentInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInErrors.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInErrors.setDescription('The total number of bad packets received on a\n        half-duplex link or on the inbound connection of a\n        full-duplex link.')
mediaIndependentOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutErrors.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutErrors.setDescription('The total number of bad packets received on a full-duplex\n        link in the direction of the network.')
mediaIndependentInputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 25), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInputSpeed.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInputSpeed.setDescription('The nominal maximum speed in kilobits per second of this\n        half-duplex link or on the inbound connection of this\n        full-duplex link. If the speed is unknown or there is no fixed\n        maximum (e.g. a compressed link), this value shall be zero.')
mediaIndependentOutputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 26), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutputSpeed.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutputSpeed.setDescription('The nominal maximum speed in kilobits per second of this\n        full-duplex link in the direction of the network. If the speed\n        is unknown, the link is half-duplex, or there is no fixed\n        maximum (e.g. a compressed link), this value shall be zero.')
mediaIndependentDuplexMode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexMode.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexMode.setDescription('The current mode of this link.\n\n        Note that if the link has full-duplex capabilities but\n        is operating in half-duplex mode, this value will be\n        halfduplex(1).')
mediaIndependentDuplexChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 28), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexChanges.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexChanges.setDescription('The number of times this link has changed from full-duplex\n        mode to half-duplex mode or from half-duplex mode to\n        full-duplex mode.')
mediaIndependentDuplexLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexLastChange.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexLastChange.setDescription('The value of sysUpTime at the time the duplex status\n        of this link last changed.')
mediaIndependentOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 30), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentOwner.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOwner.setDescription('The entity that configured this entry and is\n        therefore using the resources assigned to it.')
mediaIndependentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentStatus.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentStatus.setDescription('The status of this media independent statistics entry.')
etherStatsHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 7), )
if mibBuilder.loadTexts: etherStatsHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1\n        etherStatsTable.')
etherStatsHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 7, 1), ).setIndexNames((0, "RMON-MIB", "etherStatsIndex"))
if mibBuilder.loadTexts: etherStatsHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1\n        etherStatsEntry. These objects will be created by the agent\n        for all etherStatsEntries it deems appropriate.')
etherStatsHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts.setDescription('The number of times the associated etherStatsPkts\n        counter has overflowed.')
etherStatsHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received.')
etherStatsHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowOctets.setDescription('The number of times the associated etherStatsOctets\n        counter has overflowed.')
etherStatsHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOctets.setDescription('The total number of octets of data (including\n        those in bad packets) received on the\n        network (excluding framing bits but including\n        FCS octets).\n\n        If the network is half-duplex Fast Ethernet, this\n        object can be used as a reasonable estimate of\n        utilization. If greater precision is desired, the\n        etherStatsHighCapacityPkts and\n        etherStatsHighCapacityOctets objects should be sampled\n        before and after a common interval.  The differences\n        in the sampled values are Pkts and Octets,\n        respectively, and the number of seconds in the\n        interval is Interval.  These values\n        are used to calculate the Utilization as follows:\n\n\n                        Pkts * (.96 + .64) + (Octets * .08)\n        Utilization = -------------------------------------\n                                Interval * 10,000\n\n        The result of this equation is the value Utilization\n        which is the percent utilization of the ethernet\n        segment on a scale of 0 to 100 percent.\n\n        This table is not appropriate for monitoring full-duplex\n        ethernets. If the network is a full-duplex ethernet and the\n        mediaIndependentTable is monitoring that network, the\n        utilization can be calculated as follows:\n\n        1) Determine the utilization of the inbound path by using\n           the appropriate equation (for ethernet or fast ethernet)\n           to determine the utilization, substituting\n           mediaIndependentInPkts for etherStatsHighCapacityPkts, and\n           mediaIndependentInOctets for etherStatsHighCapacityOctets.\n           Call the resulting utilization inUtilization.\n\n        2) Determine the utilization of the outbound path by using\n           the same equation to determine the utilization, substituting\n           mediaIndependentOutPkts for etherStatsHighCapacityPkts, and\n           mediaIndependentOutOctets for etherStatsHighCapacityOctets.\n           Call the resulting utilization outUtilization.\n\n        3) The utilization is the maximum of inUtilization and\n           outUtilization. This metric shows the amount of percentage\n           of bandwidth that is left before congestion will be\n           experienced on the link.')
etherStatsHighCapacityOverflowPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts64Octets.setDescription('The number of times the associated etherStatsPkts64Octets\n        counter has overflowed.')
etherStatsHighCapacityPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts64Octets.setDescription('The total number of packets (including bad\n        packets) received that were 64 octets in length\n        (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts65to127Octets.setDescription('The number of times the associated etherStatsPkts65to127Octets\n        counter has overflowed.')
etherStatsHighCapacityPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts65to127Octets.setDescription('The total number of packets (including bad\n        packets) received that were between\n        65 and 127 octets in length inclusive\n        (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts128to255Octets.setDescription('The number of times the associated etherStatsPkts128to255Octets\n        counter has overflowed.')
etherStatsHighCapacityPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts128to255Octets.setDescription('The total number of packets (including bad\n        packets) received that were between\n        128 and 255 octets in length inclusive\n        (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts256to511Octets.setDescription('The number of times the associated etherStatsPkts256to511Octets\n        counter has overflowed.')
etherStatsHighCapacityPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts256to511Octets.setDescription('The total number of packets (including bad\n        packets) received that were between\n        256 and 511 octets in length inclusive\n        (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts512to1023Octets.setDescription('The number of times the associated\n         etherStatsPkts512to1023Octets counter has overflowed.')
etherStatsHighCapacityPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts512to1023Octets.setDescription('The total number of packets (including bad\n        packets) received that were between\n        512 and 1023 octets in length inclusive\n        (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts1024to1518Octets.setDescription('The number of times the associated\n        etherStatsPkts1024to1518Octets counter has overflowed.')
etherStatsHighCapacityPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts1024to1518Octets.setDescription('The total number of packets (including bad\n        packets) received that were between\n        1024 and 1518 octets in length inclusive\n        (excluding framing bits but including FCS octets).')
etherHistoryHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 6), )
if mibBuilder.loadTexts: etherHistoryHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1\n        etherHistoryTable.')
etherHistoryHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 6, 1), ).setIndexNames((0, "RMON-MIB", "etherHistoryIndex"), (0, "RMON-MIB", "etherHistorySampleIndex"))
if mibBuilder.loadTexts: etherHistoryHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1\n        etherHistoryEntry. These objects will be created by the agent\n        for all etherHistoryEntries associated with whichever\n        historyControlEntries it deems appropriate. (i.e., either all\n        etherHistoryHighCapacityEntries associated with a particular\n        historyControlEntry will be created, or none of them will\n        be.)')
etherHistoryHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 1), Gauge32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowPkts.setDescription('The number of times the associated etherHistoryPkts\n        Gauge overflowed during this sampling interval.')
etherHistoryHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 2), CounterBasedGauge64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityPkts.setDescription('The total number of packets (including bad packets,\n        broadcast packets, and multicast packets) received during\n        this sampling interval.')
etherHistoryHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 3), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowOctets.setDescription('The number of times the associated etherHistoryOctets\n        counter has overflowed during this sampling interval.')
etherHistoryHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 4), CounterBasedGauge64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOctets.setDescription('The total number of octets of data (including\n        those in bad packets) received on the\n        network (excluding framing bits but including\n        FCS octets) during this sampling interval.')
mibBuilder.exportSymbols("HC-RMON-MIB", etherStatsHighCapacityPkts128to255Octets=etherStatsHighCapacityPkts128to255Octets, mediaIndependentInHighCapacityOctets=mediaIndependentInHighCapacityOctets, etherStatsHighCapacityOverflowPkts65to127Octets=etherStatsHighCapacityOverflowPkts65to127Octets, mediaIndependentOutOverflowOctets=mediaIndependentOutOverflowOctets, mediaIndependentInputSpeed=mediaIndependentInputSpeed, mediaIndependentIndex=mediaIndependentIndex, mediaIndependentDataSource=mediaIndependentDataSource, etherHistoryHighCapacityPkts=etherHistoryHighCapacityPkts, hcRMON=hcRMON, mediaIndependentInOverflowPkts=mediaIndependentInOverflowPkts, etherHistoryHighCapacityEntry=etherHistoryHighCapacityEntry, etherStatsHighCapacityPkts256to511Octets=etherStatsHighCapacityPkts256to511Octets, etherStatsHighCapacityOverflowPkts1024to1518Octets=etherStatsHighCapacityOverflowPkts1024to1518Octets, mediaIndependentInOverflowOctets=mediaIndependentInOverflowOctets, mediaIndependentOutPkts=mediaIndependentOutPkts, mediaIndependentOutHighCapacityOctets=mediaIndependentOutHighCapacityOctets, mediaIndependentEntry=mediaIndependentEntry, mediaIndependentTable=mediaIndependentTable, mediaIndependentOutHighCapacityPkts=mediaIndependentOutHighCapacityPkts, etherStatsHighCapacityPkts1024to1518Octets=etherStatsHighCapacityPkts1024to1518Octets, etherHistoryHighCapacityOverflowOctets=etherHistoryHighCapacityOverflowOctets, mediaIndependentInErrors=mediaIndependentInErrors, etherStatsHighCapacityOverflowPkts128to255Octets=etherStatsHighCapacityOverflowPkts128to255Octets, etherHistoryHighCapacityTable=etherHistoryHighCapacityTable, mediaIndependentDropEvents=mediaIndependentDropEvents, etherStatsHighCapacityOverflowPkts=etherStatsHighCapacityOverflowPkts, etherStatsHighCapacityOverflowOctets=etherStatsHighCapacityOverflowOctets, mediaIndependentOutOctets=mediaIndependentOutOctets, mediaIndependentInHighCapacityPkts=mediaIndependentInHighCapacityPkts, etherStatsHighCapacityPkts512to1023Octets=etherStatsHighCapacityPkts512to1023Octets, etherStatsHighCapacityOctets=etherStatsHighCapacityOctets, etherStatsHighCapacityPkts64Octets=etherStatsHighCapacityPkts64Octets, etherHistoryHighCapacityOverflowPkts=etherHistoryHighCapacityOverflowPkts, mediaIndependentOutNUCastPkts=mediaIndependentOutNUCastPkts, mediaIndependentInNUCastHighCapacityPkts=mediaIndependentInNUCastHighCapacityPkts, etherStatsHighCapacityOverflowPkts512to1023Octets=etherStatsHighCapacityOverflowPkts512to1023Octets, mediaIndependentDroppedFrames=mediaIndependentDroppedFrames, mediaIndependentOutOverflowPkts=mediaIndependentOutOverflowPkts, mediaIndependentOutputSpeed=mediaIndependentOutputSpeed, etherStatsHighCapacityOverflowPkts64Octets=etherStatsHighCapacityOverflowPkts64Octets, PYSNMP_MODULE_ID=hcRMON, mediaIndependentOutNUCastOverflowPkts=mediaIndependentOutNUCastOverflowPkts, mediaIndependentStats=mediaIndependentStats, mediaIndependentOutNUCastHighCapacityPkts=mediaIndependentOutNUCastHighCapacityPkts, mediaIndependentDuplexChanges=mediaIndependentDuplexChanges, mediaIndependentOutErrors=mediaIndependentOutErrors, mediaIndependentDuplexMode=mediaIndependentDuplexMode, mediaIndependentInNUCastOverflowPkts=mediaIndependentInNUCastOverflowPkts, mediaIndependentInNUCastPkts=mediaIndependentInNUCastPkts, etherStatsHighCapacityOverflowPkts256to511Octets=etherStatsHighCapacityOverflowPkts256to511Octets, mediaIndependentOwner=mediaIndependentOwner, etherStatsHighCapacityEntry=etherStatsHighCapacityEntry, etherStatsHighCapacityPkts=etherStatsHighCapacityPkts, mediaIndependentDuplexLastChange=mediaIndependentDuplexLastChange, etherHistoryHighCapacityOctets=etherHistoryHighCapacityOctets, mediaIndependentInOctets=mediaIndependentInOctets, etherStatsHighCapacityPkts65to127Octets=etherStatsHighCapacityPkts65to127Octets, etherStatsHighCapacityTable=etherStatsHighCapacityTable, mediaIndependentInPkts=mediaIndependentInPkts, mediaIndependentStatus=mediaIndependentStatus)
