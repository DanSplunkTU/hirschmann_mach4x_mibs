#
# PySNMP MIB module ALCATEL-IND1-MVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-MVRP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 18:00:01 2022
# On host fv-az126-670 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Mvrp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Mvrp")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Counter32, iso, Counter64, ObjectIdentity, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, TimeTicks, NotificationType, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "iso", "Counter64", "ObjectIdentity", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "ModuleIdentity")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
alcatelIND1MVRPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1))
alcatelIND1MVRPMIB.setRevisions(('2010-05-13 00:00', '2009-08-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1MVRPMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The MVRP MIB defines a set of MVRP related management objects for VLANs\n                        and ports that support Multiple VLAN Registration Protocol (MVRP). MVRP as a\n                        protocol provides mechanisms to dynamically learn and further propagate VLAN\n                        membership information across a bridged network, as recommended in standards\n                        IEEE Std. 802.1ak-2007, which is an amendment to IEEE Std 802.1Q-2005 Edition.\n\n                        This MVRP MIB extends already existing IETF_Q_BRIDGE MIB which is based on\n                        RFC 2674 (Bridges with Traffic Classes, Multicast Filtering and Virtual LAN\n                        Extensions), to accomodate the proprietary behavior of the device and for\n                        defining objects as recommended by standards.\n\n                        This MIB comprises proprietary managed objects as well the objects required\n                        for conforming to the standards. However, the set of objects defined in this MIB,\n                        do not duplicate, nor conflict with any MIB object definitions defined in the\n                        IETF_Q_BRIDGE_MIB.',))
if mibBuilder.loadTexts: alcatelIND1MVRPMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1MVRPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1MVRPMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate\n                        version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                        (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                        United States Of America\n\n                        Telephone:                              North America  +1 800 995 2696\n                                                                Latin America  +1 877 919 9526\n                                                                Europe         +31 23 556 0100\n                                                                Asia           +65 394 7933\n                                                                All Other      +1 818 878 4507\n\n                        Electronic Mail:                support@ind.alcatel.com\n                        World Wide Web:                 http://alcatel-lucent.com/wps/portal/enterprise\n                        File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1MVRPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n                        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                        For the Birds Of Prey Product Line\n                        MVRP for the distribution of VLAN configuration information.\n\n                        The right to make changes in specification and other information\n                        contained in this document without prior notice is reserved.\n\n                        No liability shall be assumed for any incidental, indirect, special, or\n                        consequential damages whatsoever arising from or related to this\n                        document or the information contained herein.\n\n                        Vendors, end-users, and other interested parties are granted\n                        non-exclusive license to use this specification in connection with\n                        management of the products for which it is intended to be used.\n\n                        Copyright (C) 1995-2009 Alcatel-Lucent, Incorporated\n                        ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1MVRPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 0))
if mibBuilder.loadTexts: alcatelIND1MVRPMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBNotifications.setDescription('Branch For MVRP MIB Subsystem Notifications.')
alcatelIND1MVRPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1))
if mibBuilder.loadTexts: alcatelIND1MVRPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBObjects.setDescription('Branch For MVRP Subsystem Managed Objects.')
alcatelIND1MVRPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2))
if mibBuilder.loadTexts: alcatelIND1MVRPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBConformance.setDescription('Branch for MVRP Module MIB Subsystem Conformance Information.')
alcatelIND1MVRPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MVRPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBGroups.setDescription('Branch for MVRP Module MIB Subsystem Units of Conformance.')
alcatelIND1MVRPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MVRPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBCompliances.setDescription('Branch for MVRP Module MIB Subsystem Compliance Statements.')
class MvrpPortVlanRestrictBitmap(TextualConvention, Bits):
    description = "The bitmap that includes the status value for different type of restrictions that could be\n            applied for a port VLAN combination.\n            Each bit in the bitmap corresponds to the status of the restriction applied for a VLAN on a port.\n\n            Having the bit 'noRestriction(0)' set indicates that the no restriction is applied for the VLAN\n            on the port. No other option can be applied along with this option.\n\n            Having the bit 'restrictRegistration(1)' set indicates that the VLAN is restricted from\n            getting registered on the port.\n\n            Having the bit 'restrictAdvertisement(2)' set indicates that the advertisement for the\n            VLAN is restricted on the port.\n\n            Having the bit 'restrictStaticVlanRegistration(3)' set indicates that the registration\n            on a port for a static VLAN is restricted."
    status = 'current'
    namedValues = NamedValues(("noRestriction", 0), ("restrictRegistration", 1), ("restrictAdvertisement", 2), ("restrictStaticVlanRegistration", 3))

alaMvrpGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: alaMvrpGlobalStatus.setDescription('The administrative global status requested by management for\n                MVRP.  The value enabled(1) indicates that MVRP should\n                be enabled on this device.  When disabled(2), MVRP\n                is disabled in the system and all MVRP packets will be\n                forwarded transparently if transparent switching status is\n                also enabled.  This object affects all MVRP Applicant and Registrar\n                state machines.  A transition from disabled(2) to enabled(1) will cause a reset of all\n                MVRP state machines on all ports.')
alaMvrpGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpGlobalClearStats.setStatus('current')
if mibBuilder.loadTexts: alaMvrpGlobalClearStats.setDescription('Defines the global clear statistics control for MVRP.\n                        The value reset (1) indicates that MVRP should clear all statistic\n                        counters related to all ports in the system. By default, this object\n                        contains a zero value.')
alaMvrpTransparentSwitching = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpTransparentSwitching.setStatus('current')
if mibBuilder.loadTexts: alaMvrpTransparentSwitching.setDescription('Defines the behavior when MVRP is globally disabled on a device.\n                        The value enabled (1) indicates that device behaves like a MVRP\n                        transparent device and the MVRP frames will be flooded transparently.\n                        Value disabled (2) disabled indicates that the device will not flood\n                        MVRP frames and will simply discard the received MVRP frames.')
alaMvrpMaxVlanLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4094)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpMaxVlanLimit.setStatus('current')
if mibBuilder.loadTexts: alaMvrpMaxVlanLimit.setDescription('Defines the maximum number of dynamic VLANs that can be created on the system by MVRP.\n                        If the number of VLANs created by MVRP reaches this limit, the system will prevent\n                        MVRP from creating additional VLANs.')
alaMvrpVlanConflictInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpVlanConflictInfo.setStatus('current')
if mibBuilder.loadTexts: alaMvrpVlanConflictInfo.setDescription('MVRP has received registration for Vlan which is configured for End To End Flow Control.\n                        Notify the Management with the Port in which the MVRP PDU was recieved and the Vlan.')
alaVlanRegistrationProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gvrp", 0), ("mvrp", 1))).clone('mvrp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVlanRegistrationProtocolType.setStatus('current')
if mibBuilder.loadTexts: alaVlanRegistrationProtocolType.setDescription('Defines which VLAN registration mode is running in the system.')
alaMvrpVlanLimitReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 0, 1)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpMaxVlanLimit"))
if mibBuilder.loadTexts: alaMvrpVlanLimitReachedEvent.setStatus('current')
if mibBuilder.loadTexts: alaMvrpVlanLimitReachedEvent.setDescription('The number of vlans learnt dynamically by MVRP has\n                        reached a configured limit. Notify the management\n                        entity with number of vlans learnt dynamically by\n                        MVRP and the configured MVRP vlan limit.')
alaMvrpE2eVlanConflict = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 0, 2)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpVlanConflictInfo"))
if mibBuilder.loadTexts: alaMvrpE2eVlanConflict.setStatus('current')
if mibBuilder.loadTexts: alaMvrpE2eVlanConflict.setDescription('MVRP has recieved a registration for Vlan which is configured for End To End Flow Control.\n                        Notify the Management with the Port in which the MVRP PDU was recieved and the Vlan.')
alaMvrpPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7))
alaMvrpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaMvrpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigTable.setDescription('A table containing MVRP port configuration information.')
alaMvrpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigIfIndex"))
if mibBuilder.loadTexts: alaMvrpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigEntry.setDescription('A MVRP port configuration entry.')
alaMvrpPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMvrpPortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigIfIndex.setDescription('The ifindex of the port on which MVRP is running')
alaMvrpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatus.setDescription('The state of MVRP operation on this port.  The value\n                        enabled(1) indicates that MVRP is enabled on this port.\n                        When disabled(2), MVRP is disabled on this port.\n                        Any MVRP packets received will be silently discarded on\n                        this port and no MVRP registrations will be propagated from\n                        this port. This object affects all MVRP Applicant and\n                        Registrar state machines on this port.  A transition\n                        from disabled(2) to enabled(1) will cause a reset of all\n                        MVRP state machines on this port.')
alaMvrpPortConfigRegistrarMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbidden", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigRegistrarMode.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigRegistrarMode.setDescription('Defines the mode of operation of all the registrar state machines associated to the port.\n                        normal - registration as well as de-registration of VLANs are allowed.\n                        fixed  - A VLAN that was previously mapped onto such a port either dynamically or statically\n                        cannot be de-registered through MVRP. When the port registration mode is set to fixed,\n                        VLAN(s) can only be mapped onto such port statically.\n                        forbidden - dynamic VLAN registration or de-registration are not allowed on the port.\n\n                        NOTE: The registrar state machines for the default VLAN will operate in Fixed Registration Mode\n                        for all the ports on the switch.')
alaMvrpPortConfigApplicantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("participant", 1), ("nonparticipant", 2), ("active", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigApplicantMode.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigApplicantMode.setDescription('Defines the mode of operation of all the applicant state machines associated to the port.\n                        participant - The state machines participates normally  in MVRP protocol exchanges.\n                        nonparticipant - The state machines does not send any MVRP PDU(s).\n                        active - The state machines send MVRP frames even on ports that are in blocking state on\n                        the active spanning tree instance.')
alaMvrpPortConfigJoinTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 2147483647)).clone(600)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigJoinTimer.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigJoinTimer.setDescription('Maximum period of time that a MVRP instance waits before making declarations for VLANs.')
alaMvrpPortConfigLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(750, 2147483647)).clone(1800)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigLeaveTimer.setDescription('Period of time that a registrar state machine of a MVRP instance waits, after receiving\n                        a leave message on a port for a particular VLAN, to remove the registration of that VLAN\n                        on the port.\n                        The value for the Leave Timer must be greater than twice the value for the Join timer,\n                        plus six times the timer resolution.')
alaMvrpPortConfigLeaveAllTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(750, 2147483647)).clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigLeaveAllTimer.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigLeaveAllTimer.setDescription('Interval at which the Leave All state machine of a MVRP instance generates Leave All\n                        messages. A Leave All message instructs MVRP to modify the state of all VLANs registered\n                        on a port to Leaving.\n                        The value for the LeaveAll Timer must be greater than the value for the Leave\n                        timer.')
alaMvrpPortConfigPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigPeriodicTimer.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigPeriodicTimer.setDescription('Interval at which the Periodic transmission state machine of a MVRP instance generates\n                        transmission opportunities for the MVRP instance.')
alaMvrpPortConfigPeriodicTransmissionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 7, 1, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortConfigPeriodicTransmissionStatus.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigPeriodicTransmissionStatus.setDescription('Used to enable or disable the Periodic transmission state machine of a MVRP instance.')
alaMvrpPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8))
alaMvrpPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaMvrpPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsTable.setDescription('A table containing MVRP port statistics information.')
alaMvrpPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsIfIndex"))
if mibBuilder.loadTexts: alaMvrpPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsEntry.setDescription('A MVRP port statistics entry.')
alaMvrpPortStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMvrpPortStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsIfIndex.setDescription('The ifindex of the port on which MVRP is running')
alaMvrpPortStatsNewReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsNewReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsNewReceived.setDescription('The number of New messages received.')
alaMvrpPortStatsJoinInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsJoinInReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsJoinInReceived.setDescription('The number of Join In messages received.')
alaMvrpPortStatsJoinEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsJoinEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsJoinEmptyReceived.setDescription('The number of Join Empty messages received.')
alaMvrpPortStatsLeaveReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveReceived.setDescription('The number of Leave messages received.')
alaMvrpPortStatsInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsInReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsInReceived.setDescription('The number of In messages received.')
alaMvrpPortStatsEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsEmptyReceived.setDescription('The number of Empty messages received.')
alaMvrpPortStatsLeaveAllReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveAllReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveAllReceived.setDescription('The number of Leave all messages received.')
alaMvrpPortStatsNewTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsNewTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsNewTransmitted.setDescription('The number of New messages transmitted.')
alaMvrpPortStatsJoinInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsJoinInTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsJoinInTransmitted.setDescription('The number of Join In messages transmitted.')
alaMvrpPortStatsJoinEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsJoinEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsJoinEmptyTransmitted.setDescription('The number of Join Empty messages transmitted.')
alaMvrpPortStatsLeaveTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveTransmitted.setDescription('The number of Leave messages transmitted.')
alaMvrpPortStatsInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsInTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsInTransmitted.setDescription('The number of In messages transmitted.')
alaMvrpPortStatsEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsEmptyTransmitted.setDescription('The number of Empty messages transmitted.')
alaMvrpPortStatsLeaveAllTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveAllTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsLeaveAllTransmitted.setDescription('The number of Leave all messages transmitted.')
alaMvrpPortStatsTotalPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsTotalPDUReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsTotalPDUReceived.setDescription('The total number of MVRP PDUs received.')
alaMvrpPortStatsTotalPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsTotalPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsTotalPDUTransmitted.setDescription('The total number of MVRP PDUs transmitted.')
alaMvrpPortStatsTotalMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsTotalMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsTotalMsgsReceived.setDescription('The total number of MVRP messages received.')
alaMvrpPortStatsTotalMsgsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsTotalMsgsTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsTotalMsgsTransmitted.setDescription('The total number of MVRP messages transmitted.')
alaMvrpPortStatsInvalidMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortStatsInvalidMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsInvalidMsgsReceived.setDescription('The number of Invalid messages received.')
alaMvrpPortFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortFailedRegistrations.setDescription('The total number of failed GVRP registrations,\n                        for any reason, on this port.')
alaMvrpPortLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 22), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMvrpPortLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortLastPduOrigin.setDescription('The Source MAC Address of the last GVRP message\n                        received on this port.')
alaMvrpPortStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsClearStats.setDescription('Reset all statistics parameters corresponding to this port.\n                        By default, this objects contains a zero value.')
alaMvrpPortRestrictVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9))
alaMvrpPortRestrictVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanConfigTable.setDescription('A table containing MVRP port restrict VLAN configuration information.')
alaMvrpPortRestrictVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MVRP-MIB", "alaMvrpPortRestrictVlanIfIndex"), (0, "ALCATEL-IND1-MVRP-MIB", "alaMvrpPortRestrictVlanID"))
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanConfigEntry.setDescription('A MVRP port restrict VLAN configuration entry.')
alaMvrpPortRestrictVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanIfIndex.setDescription('The ifindex of the port on which MVRP is running')
alaMvrpPortRestrictVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9, 1, 1, 2), VlanId())
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanID.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanID.setDescription('An integer indicating VLAN-ID.')
alaMvrpPortVlanRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 1, 9, 1, 1, 3), MvrpPortVlanRestrictBitmap().clone(namedValues=NamedValues(("noRestriction", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMvrpPortVlanRestrictions.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortVlanRestrictions.setDescription("The bitmap includes the status value for different type of restrictions that could be\n                        applied for a port VLAN combination. Each bit in the bitmap corresponds to the status\n                        of a particular restriction applied for a VLAN on the port.\n                        If the bit is set, the particular restriction is enabled for the VLAN port combination.\n\n                        Having the bit 'noRestriction(0)' set indicates that the no restriction is applied for\n                        the VLAN on the port. No other option can be applied along with this option.\n\n                        Having the bit 'restrictRegistration(1)' set indicates that the VLAN is restricted from\n                        getting registered on the port.\n\n                        Having the bit 'restrictAdvertisement(2)' set indicates that the advertisement for the\n                        VLAN is restricted on the port.\n\n                        Having the bit 'restrictStaticVlanRegistration(3)' set indicates that the registration\n                        on a port for a static VLAN is restricted.")
alcatelIND1MVRPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpBaseGroup"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigGroup"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsGroup"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortRestrictVlanConfigGroup"), ("ALCATEL-IND1-MVRP-MIB", "alaIND1MvrpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MVRPMIBCompliance = alcatelIND1MVRPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MVRPMIBCompliance.setDescription('Compliance statement for MVRP.')
alaMvrpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpGlobalStatus"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpGlobalClearStats"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpTransparentSwitching"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpMaxVlanLimit"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpVlanConflictInfo"), ("ALCATEL-IND1-MVRP-MIB", "alaVlanRegistrationProtocolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMvrpBaseGroup = alaMvrpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: alaMvrpBaseGroup.setDescription('Collection of objects for management of MVRP Base Group.')
alaMvrpPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatus"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigRegistrarMode"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigApplicantMode"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigJoinTimer"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigLeaveTimer"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigLeaveAllTimer"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigPeriodicTimer"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortConfigPeriodicTransmissionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMvrpPortConfigGroup = alaMvrpPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortConfigGroup.setDescription('Collection of objects for management of MVRP Port Configuration Table.')
alaMvrpPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsNewReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsJoinInReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsJoinEmptyReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsLeaveReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsInReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsEmptyReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsLeaveAllReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsNewTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsJoinInTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsJoinEmptyTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsLeaveTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsInTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsEmptyTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsLeaveAllTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsTotalPDUReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsTotalPDUTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsTotalMsgsReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsTotalMsgsTransmitted"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsInvalidMsgsReceived"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortFailedRegistrations"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortLastPduOrigin"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortStatsClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMvrpPortStatsGroup = alaMvrpPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortStatsGroup.setDescription('Collection of objects for management of MVRP Statistics Table.')
alaMvrpPortRestrictVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpPortVlanRestrictions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMvrpPortRestrictVlanConfigGroup = alaMvrpPortRestrictVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaMvrpPortRestrictVlanConfigGroup.setDescription('Collection of objects for management of MVRP Port Restrict VLAN Configuration Table.')
alaIND1MvrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 62, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-MVRP-MIB", "alaMvrpVlanLimitReachedEvent"), ("ALCATEL-IND1-MVRP-MIB", "alaMvrpE2eVlanConflict"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1MvrpNotificationGroup = alaIND1MvrpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaIND1MvrpNotificationGroup.setDescription('Collection of notifications for MVRP.')
mibBuilder.exportSymbols("ALCATEL-IND1-MVRP-MIB", alaMvrpPortStatsLeaveTransmitted=alaMvrpPortStatsLeaveTransmitted, alaMvrpPortConfigApplicantMode=alaMvrpPortConfigApplicantMode, alaMvrpPortStatsTotalMsgsTransmitted=alaMvrpPortStatsTotalMsgsTransmitted, alaMvrpPortStatsLeaveReceived=alaMvrpPortStatsLeaveReceived, alaMvrpPortConfigPeriodicTransmissionStatus=alaMvrpPortConfigPeriodicTransmissionStatus, alaMvrpPortStatsInTransmitted=alaMvrpPortStatsInTransmitted, alaMvrpPortRestrictVlanIfIndex=alaMvrpPortRestrictVlanIfIndex, alcatelIND1MVRPMIB=alcatelIND1MVRPMIB, alaMvrpPortStatsLeaveAllTransmitted=alaMvrpPortStatsLeaveAllTransmitted, alaMvrpPortRestrictVlanConfig=alaMvrpPortRestrictVlanConfig, alaMvrpPortRestrictVlanConfigGroup=alaMvrpPortRestrictVlanConfigGroup, alcatelIND1MVRPMIBCompliances=alcatelIND1MVRPMIBCompliances, PYSNMP_MODULE_ID=alcatelIND1MVRPMIB, alaMvrpGlobalStatus=alaMvrpGlobalStatus, alaMvrpVlanConflictInfo=alaMvrpVlanConflictInfo, alcatelIND1MVRPMIBGroups=alcatelIND1MVRPMIBGroups, alaMvrpPortStatsInReceived=alaMvrpPortStatsInReceived, alaMvrpPortStatsNewReceived=alaMvrpPortStatsNewReceived, alaMvrpPortStatsTotalPDUTransmitted=alaMvrpPortStatsTotalPDUTransmitted, alaMvrpPortConfigJoinTimer=alaMvrpPortConfigJoinTimer, alaMvrpPortStatsGroup=alaMvrpPortStatsGroup, alaMvrpPortStatsJoinInTransmitted=alaMvrpPortStatsJoinInTransmitted, alcatelIND1MVRPMIBConformance=alcatelIND1MVRPMIBConformance, alaMvrpPortStatsInvalidMsgsReceived=alaMvrpPortStatsInvalidMsgsReceived, alaMvrpE2eVlanConflict=alaMvrpE2eVlanConflict, alcatelIND1MVRPMIBObjects=alcatelIND1MVRPMIBObjects, alaMvrpPortStatsEmptyReceived=alaMvrpPortStatsEmptyReceived, alaMvrpPortStats=alaMvrpPortStats, alaMvrpMaxVlanLimit=alaMvrpMaxVlanLimit, alaMvrpPortStatsEmptyTransmitted=alaMvrpPortStatsEmptyTransmitted, alaMvrpPortStatsClearStats=alaMvrpPortStatsClearStats, alaMvrpPortStatsJoinInReceived=alaMvrpPortStatsJoinInReceived, alcatelIND1MVRPMIBCompliance=alcatelIND1MVRPMIBCompliance, alaMvrpPortConfigTable=alaMvrpPortConfigTable, alaMvrpPortConfigGroup=alaMvrpPortConfigGroup, MvrpPortVlanRestrictBitmap=MvrpPortVlanRestrictBitmap, alaVlanRegistrationProtocolType=alaVlanRegistrationProtocolType, alaMvrpPortConfigIfIndex=alaMvrpPortConfigIfIndex, alaMvrpTransparentSwitching=alaMvrpTransparentSwitching, alcatelIND1MVRPMIBNotifications=alcatelIND1MVRPMIBNotifications, alaMvrpPortConfigPeriodicTimer=alaMvrpPortConfigPeriodicTimer, alaMvrpPortStatsTotalPDUReceived=alaMvrpPortStatsTotalPDUReceived, alaMvrpPortFailedRegistrations=alaMvrpPortFailedRegistrations, alaMvrpPortStatsTable=alaMvrpPortStatsTable, alaMvrpPortConfig=alaMvrpPortConfig, alaMvrpPortStatsJoinEmptyReceived=alaMvrpPortStatsJoinEmptyReceived, alaMvrpPortRestrictVlanConfigEntry=alaMvrpPortRestrictVlanConfigEntry, alaMvrpPortStatsEntry=alaMvrpPortStatsEntry, alaMvrpPortConfigEntry=alaMvrpPortConfigEntry, alaIND1MvrpNotificationGroup=alaIND1MvrpNotificationGroup, alaMvrpPortStatus=alaMvrpPortStatus, alaMvrpVlanLimitReachedEvent=alaMvrpVlanLimitReachedEvent, alaMvrpBaseGroup=alaMvrpBaseGroup, alaMvrpGlobalClearStats=alaMvrpGlobalClearStats, alaMvrpPortStatsIfIndex=alaMvrpPortStatsIfIndex, alaMvrpPortStatsNewTransmitted=alaMvrpPortStatsNewTransmitted, alaMvrpPortLastPduOrigin=alaMvrpPortLastPduOrigin, alaMvrpPortConfigLeaveTimer=alaMvrpPortConfigLeaveTimer, alaMvrpPortConfigLeaveAllTimer=alaMvrpPortConfigLeaveAllTimer, alaMvrpPortConfigRegistrarMode=alaMvrpPortConfigRegistrarMode, alaMvrpPortStatsTotalMsgsReceived=alaMvrpPortStatsTotalMsgsReceived, alaMvrpPortVlanRestrictions=alaMvrpPortVlanRestrictions, alaMvrpPortRestrictVlanConfigTable=alaMvrpPortRestrictVlanConfigTable, alaMvrpPortRestrictVlanID=alaMvrpPortRestrictVlanID, alaMvrpPortStatsJoinEmptyTransmitted=alaMvrpPortStatsJoinEmptyTransmitted, alaMvrpPortStatsLeaveAllReceived=alaMvrpPortStatsLeaveAllReceived)
