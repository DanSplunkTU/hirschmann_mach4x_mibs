#
# PySNMP MIB module PRVT-SYS-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SYS-MON-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 14:17:53 2021
# On host fv-az33-388 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
software, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "software")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, TimeTicks, Bits, ModuleIdentity, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Bits", "ModuleIdentity", "Integer32", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
prvtSysMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 111, 3))
prvtSysMonMIB.setRevisions(('2013-12-12 00:00', '2009-09-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSysMonMIB.setRevisionsDescriptions(('add prvtSysMonDoorOpen table prvtSysMonDoorOpenTest notification.', 'Sync to internal implementation.',))
if mibBuilder.loadTexts: prvtSysMonMIB.setLastUpdated('201312120000Z')
if mibBuilder.loadTexts: prvtSysMonMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSysMonMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSysMonMIB.setDescription('Information for system resources')
prvtSysMonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0))
prvtSysMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1))
prvtSysMonCurrentCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonCurrentCpuUsage.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCurrentCpuUsage.setDescription('Current CPU Utilization')
prvtSysMonCurrentCpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonCurrentCpuTemperature.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCurrentCpuTemperature.setDescription('Current CPU Temperature')
prvtSysMonCurrentRamUsage = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonCurrentRamUsage.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCurrentRamUsage.setDescription('Current RAM Utilization')
prvtSysMonSelfTestExecuteNow = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonSelfTestExecuteNow.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonSelfTestExecuteNow.setDescription("When this object is set to '1', command\n         self-test execute-now.  Setting the variable to '0'\n         results in an 'inconsistentValue' error.\n         Setting it to any other value has no effect.\n         \n         When this object is read, the value '0' is returned.")
prvtSysMonCpuUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5))
prvtSysMonCpuUsageShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonCpuUsageLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageLog.setDescription('Send log if test failed')
prvtSysMonCpuUsageLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageLed.setDescription('Enable led if test failed')
prvtSysMonCpuUsageTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageTrap.setDescription('Send trap if test failed')
prvtSysMonCpuUsagePeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsagePeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsagePeriod.setDescription('Test period in seconds')
prvtSysMonCpuUsageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageLowThreshold.setDescription('Low threshold')
prvtSysMonCpuUsageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuUsageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageHighThreshold.setDescription('High threshold')
prvtSysMonCpuUsageLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 5, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonCpuUsageLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUsageLastStatus.setDescription('Status')
prvtSysMonCPUTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6))
prvtSysMonCpuTemperatureShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonCpuTemperatureLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLog.setDescription('Send log if test failed')
prvtSysMonCpuTemperatureLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLed.setDescription('Enable led if test failed')
prvtSysMonCpuTemperatureTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureTrap.setDescription('Send trap if test failed')
prvtSysMonCpuTemperaturePeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperaturePeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperaturePeriod.setDescription('Test period in seconds')
prvtSysMonCpuTemperatureLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLowThreshold.setDescription('Low threshold')
prvtSysMonCpuTemperatureHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureHighThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureHighThreshold.setDescription('High threshold')
prvtSysMonCpuTemperatureLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 6, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperatureLastStatus.setDescription('Status')
prvtSysMonRAMUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7))
prvtSysMonRamUsageShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonRamUsageLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageLog.setDescription('Send log if test failed')
prvtSysMonRamUsageLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageLed.setDescription('Enable led if test failed')
prvtSysMonRamUsageTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageTrap.setDescription('Send trap if test failed')
prvtSysMonRamUsagePeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsagePeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsagePeriod.setDescription('Test period in seconds')
prvtSysMonRamUsageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageLowThreshold.setDescription('Low threshold')
prvtSysMonRamUsageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonRamUsageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageHighThreshold.setDescription('High threshold')
prvtSysMonRamUsageLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonRamUsageLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsageLastStatus.setDescription('Status')
prvtSysMonPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8))
prvtSysMonPortStatisticsShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonPortStatisticsLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLog.setDescription('Send log if test failed')
prvtSysMonPortStatisticsLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLed.setDescription('Enable led if test failed')
prvtSysMonPortStatisticsTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsTrap.setDescription('Send trap if test failed')
prvtSysMonPortStatisticsPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsPeriod.setDescription('Test period in seconds')
prvtSysMonPortStatisticsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLowThreshold.setDescription('Low threshold')
prvtSysMonPortStatisticsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsHighThreshold.setDescription('High threshold')
prvtSysMonPortStatisticsLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLastStatus.setDescription('Status')
prvtSysMonPortStatisticsLastFailedPorts = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 8, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLastFailedPorts.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsLastFailedPorts.setDescription('Status')
prvtSysMonFan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9))
prvtSysMonFanShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonFanShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonFanLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonFanLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanLog.setDescription('Send log if test failed')
prvtSysMonFanLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonFanLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanLed.setDescription('Enable led if test failed')
prvtSysMonFanTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonFanTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanTrap.setDescription('Send trap if test failed')
prvtSysMonFanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonFanPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanPeriod.setDescription('Test period in seconds')
prvtSysMonFanLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 9, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonFanLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFanLastStatus.setDescription('Status')
prvtSysMonOnboardPower = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10))
prvtSysMonOnboardPowerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonOnboardPowerLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLog.setDescription('Send log if test failed')
prvtSysMonOnboardPowerLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLed.setDescription('Enable led if test failed')
prvtSysMonOnboardPowerTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerTrap.setDescription('Send trap if test failed')
prvtSysMonOnboardPowerPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerPeriod.setDescription('Test period in seconds')
prvtSysMonOnboardPowerLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 10, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnboardPowerLastStatus.setDescription('Status')
prvtSysMonPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11))
prvtSysMonPowerSupplyShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonPowerSupplyLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLog.setDescription('Send log if test failed')
prvtSysMonPowerSupplyLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLed.setDescription('Enable led if test failed')
prvtSysMonPowerSupplyTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyTrap.setDescription('Send trap if test failed')
prvtSysMonPowerSupplyPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyPeriod.setDescription('Test period in seconds')
prvtSysMonPowerSupplyLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 11, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyLastStatus.setDescription('Status')
prvtSysMonPowerSupplyFan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12))
prvtSysMonPowerSupplyFanShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonPowerSupplyFanLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLog.setDescription('Send log if test failed')
prvtSysMonPowerSupplyFanLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLed.setDescription('Enable led if test failed')
prvtSysMonPowerSupplyFanTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanTrap.setDescription('Send trap if test failed')
prvtSysMonPowerSupplyFanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanPeriod.setDescription('Test period in seconds')
prvtSysMonPowerSupplyFanLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 12, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFanLastStatus.setDescription('Status')
prvtSysMonDoorOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13))
prvtSysMonDoorOpenShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonDoorOpenShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenShutdown.setDescription('Shutdown cpu usage test')
prvtSysMonDoorOpenLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonDoorOpenLog.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenLog.setDescription('Send log if test failed')
prvtSysMonDoorOpenLed = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonDoorOpenLed.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenLed.setDescription('Enable led if test failed')
prvtSysMonDoorOpenTrap = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonDoorOpenTrap.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenTrap.setDescription('Send trap if test failed')
prvtSysMonDoorOpenPeriod = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSysMonDoorOpenPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenPeriod.setDescription('Test period in seconds')
prvtSysMonDoorOpenLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 1, 13, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSysMonDoorOpenLastStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenLastStatus.setDescription('Status')
prvtSysMonCpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 1)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonCurrentCpuUsage"), ("PRVT-SYS-MON-MIB", "prvtSysMonCpuUsageLowThreshold"), ("PRVT-SYS-MON-MIB", "prvtSysMonCpuUsageHighThreshold"))
if mibBuilder.loadTexts: prvtSysMonCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuUtilization.setDescription('CPU utilization test has passed the\n         program threshold.')
prvtSysMonRamUsage = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 2)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonCurrentRamUsage"), ("PRVT-SYS-MON-MIB", "prvtSysMonRamUsageLowThreshold"), ("PRVT-SYS-MON-MIB", "prvtSysMonRamUsageHighThreshold"))
if mibBuilder.loadTexts: prvtSysMonRamUsage.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonRamUsage.setDescription('Memory utilization test has passed the\n         program threshold.')
prvtSysMonPowerSupplyTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 3)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonPowerSupplyLastStatus"))
if mibBuilder.loadTexts: prvtSysMonPowerSupplyTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyTest.setDescription('Result from power supply test has changed.')
prvtSysMonFansTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 4)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonFanLastStatus"))
if mibBuilder.loadTexts: prvtSysMonFansTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonFansTest.setDescription('Result from fan test has changed.')
prvtSysMonCpuTemperature = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 5)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonCurrentCpuTemperature"), ("PRVT-SYS-MON-MIB", "prvtSysMonCpuTemperatureLowThreshold"), ("PRVT-SYS-MON-MIB", "prvtSysMonCpuTemperatureHighThreshold"))
if mibBuilder.loadTexts: prvtSysMonCpuTemperature.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonCpuTemperature.setDescription('CPU temperature test has passed the\n         program threshold.')
prvtSysMonPortStatisticsTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 6)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonPortStatisticsLastFailedPorts"))
if mibBuilder.loadTexts: prvtSysMonPortStatisticsTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPortStatisticsTest.setDescription('Result from port statistics test has changed.')
prvtSysMonPowerSupplyFansTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 7)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonPowerSupplyFanLastStatus"))
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFansTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonPowerSupplyFansTest.setDescription('Result from power-supply-fan test has changed.')
prvtSysMonOnBoardPowerSupplyTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 8)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonOnboardPowerLastStatus"))
if mibBuilder.loadTexts: prvtSysMonOnBoardPowerSupplyTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonOnBoardPowerSupplyTest.setDescription('Result from onboard-power test has changed.')
prvtSysMonDoorOpenTest = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 111, 3, 0, 9)).setObjects(("PRVT-SYS-MON-MIB", "prvtSysMonDoorOpenLastStatus"))
if mibBuilder.loadTexts: prvtSysMonDoorOpenTest.setStatus('current')
if mibBuilder.loadTexts: prvtSysMonDoorOpenTest.setDescription('Result from door-open test has changed.')
mibBuilder.exportSymbols("PRVT-SYS-MON-MIB", prvtSysMonCpuUsageLowThreshold=prvtSysMonCpuUsageLowThreshold, prvtSysMonOnboardPowerTrap=prvtSysMonOnboardPowerTrap, prvtSysMonPowerSupplyPeriod=prvtSysMonPowerSupplyPeriod, prvtSysMonCpuTemperatureLed=prvtSysMonCpuTemperatureLed, prvtSysMonCpuTemperatureLastStatus=prvtSysMonCpuTemperatureLastStatus, prvtSysMonPowerSupplyTrap=prvtSysMonPowerSupplyTrap, prvtSysMonCurrentCpuTemperature=prvtSysMonCurrentCpuTemperature, prvtSysMonPortStatisticsTrap=prvtSysMonPortStatisticsTrap, prvtSysMonFanLog=prvtSysMonFanLog, prvtSysMonPowerSupplyFan=prvtSysMonPowerSupplyFan, prvtSysMonCpuUsagePeriod=prvtSysMonCpuUsagePeriod, prvtSysMonCpuUsageTrap=prvtSysMonCpuUsageTrap, prvtSysMonDoorOpenPeriod=prvtSysMonDoorOpenPeriod, prvtSysMonRamUsageLastStatus=prvtSysMonRamUsageLastStatus, prvtSysMonPortStatistics=prvtSysMonPortStatistics, prvtSysMonCpuUsageLog=prvtSysMonCpuUsageLog, prvtSysMonNotifications=prvtSysMonNotifications, prvtSysMonFanLastStatus=prvtSysMonFanLastStatus, prvtSysMonDoorOpen=prvtSysMonDoorOpen, prvtSysMonPortStatisticsTest=prvtSysMonPortStatisticsTest, prvtSysMonDoorOpenShutdown=prvtSysMonDoorOpenShutdown, prvtSysMonPowerSupplyFanLog=prvtSysMonPowerSupplyFanLog, prvtSysMonCpuUtilization=prvtSysMonCpuUtilization, prvtSysMonCpuUsageLastStatus=prvtSysMonCpuUsageLastStatus, prvtSysMonPortStatisticsLed=prvtSysMonPortStatisticsLed, prvtSysMonPowerSupplyFansTest=prvtSysMonPowerSupplyFansTest, prvtSysMonCpuTemperatureTrap=prvtSysMonCpuTemperatureTrap, prvtSysMonRamUsage=prvtSysMonRamUsage, prvtSysMonCpuTemperatureHighThreshold=prvtSysMonCpuTemperatureHighThreshold, prvtSysMonRamUsageLed=prvtSysMonRamUsageLed, prvtSysMonPortStatisticsLowThreshold=prvtSysMonPortStatisticsLowThreshold, prvtSysMonFan=prvtSysMonFan, prvtSysMonOnboardPowerLastStatus=prvtSysMonOnboardPowerLastStatus, PYSNMP_MODULE_ID=prvtSysMonMIB, prvtSysMonOnBoardPowerSupplyTest=prvtSysMonOnBoardPowerSupplyTest, prvtSysMonCpuTemperatureLog=prvtSysMonCpuTemperatureLog, prvtSysMonPortStatisticsLastStatus=prvtSysMonPortStatisticsLastStatus, prvtSysMonRamUsageLog=prvtSysMonRamUsageLog, prvtSysMonSelfTestExecuteNow=prvtSysMonSelfTestExecuteNow, prvtSysMonOnboardPowerShutdown=prvtSysMonOnboardPowerShutdown, prvtSysMonCpuUsageLed=prvtSysMonCpuUsageLed, prvtSysMonPowerSupplyFanShutdown=prvtSysMonPowerSupplyFanShutdown, prvtSysMonPortStatisticsHighThreshold=prvtSysMonPortStatisticsHighThreshold, prvtSysMonPowerSupplyFanLed=prvtSysMonPowerSupplyFanLed, prvtSysMonCurrentRamUsage=prvtSysMonCurrentRamUsage, prvtSysMonCPUTemperature=prvtSysMonCPUTemperature, prvtSysMonPowerSupplyLastStatus=prvtSysMonPowerSupplyLastStatus, prvtSysMonCpuUsageHighThreshold=prvtSysMonCpuUsageHighThreshold, prvtSysMonFanLed=prvtSysMonFanLed, prvtSysMonDoorOpenLed=prvtSysMonDoorOpenLed, prvtSysMonPowerSupplyFanPeriod=prvtSysMonPowerSupplyFanPeriod, prvtSysMonOnboardPowerLog=prvtSysMonOnboardPowerLog, prvtSysMonDoorOpenTrap=prvtSysMonDoorOpenTrap, prvtSysMonRamUsagePeriod=prvtSysMonRamUsagePeriod, prvtSysMonCpuUsageShutdown=prvtSysMonCpuUsageShutdown, prvtSysMonPowerSupply=prvtSysMonPowerSupply, prvtSysMonOnboardPower=prvtSysMonOnboardPower, prvtSysMonRamUsageShutdown=prvtSysMonRamUsageShutdown, prvtSysMonFanShutdown=prvtSysMonFanShutdown, prvtSysMonPortStatisticsShutdown=prvtSysMonPortStatisticsShutdown, prvtSysMonRamUsageLowThreshold=prvtSysMonRamUsageLowThreshold, prvtSysMonPowerSupplyLog=prvtSysMonPowerSupplyLog, prvtSysMonRAMUsage=prvtSysMonRAMUsage, prvtSysMonCpuTemperaturePeriod=prvtSysMonCpuTemperaturePeriod, prvtSysMonRamUsageTrap=prvtSysMonRamUsageTrap, prvtSysMonCpuTemperature=prvtSysMonCpuTemperature, prvtSysMonDoorOpenTest=prvtSysMonDoorOpenTest, prvtSysMonPowerSupplyShutdown=prvtSysMonPowerSupplyShutdown, prvtSysMonCpuUsage=prvtSysMonCpuUsage, prvtSysMonFansTest=prvtSysMonFansTest, prvtSysMonPowerSupplyFanLastStatus=prvtSysMonPowerSupplyFanLastStatus, prvtSysMonObjects=prvtSysMonObjects, prvtSysMonCurrentCpuUsage=prvtSysMonCurrentCpuUsage, prvtSysMonFanPeriod=prvtSysMonFanPeriod, prvtSysMonPowerSupplyFanTrap=prvtSysMonPowerSupplyFanTrap, prvtSysMonDoorOpenLastStatus=prvtSysMonDoorOpenLastStatus, prvtSysMonPortStatisticsLastFailedPorts=prvtSysMonPortStatisticsLastFailedPorts, prvtSysMonRamUsageHighThreshold=prvtSysMonRamUsageHighThreshold, prvtSysMonCpuTemperatureLowThreshold=prvtSysMonCpuTemperatureLowThreshold, prvtSysMonPowerSupplyTest=prvtSysMonPowerSupplyTest, prvtSysMonOnboardPowerLed=prvtSysMonOnboardPowerLed, prvtSysMonPortStatisticsLog=prvtSysMonPortStatisticsLog, prvtSysMonOnboardPowerPeriod=prvtSysMonOnboardPowerPeriod, prvtSysMonCpuTemperatureShutdown=prvtSysMonCpuTemperatureShutdown, prvtSysMonDoorOpenLog=prvtSysMonDoorOpenLog, prvtSysMonFanTrap=prvtSysMonFanTrap, prvtSysMonPowerSupplyLed=prvtSysMonPowerSupplyLed, prvtSysMonPortStatisticsPeriod=prvtSysMonPortStatisticsPeriod, prvtSysMonMIB=prvtSysMonMIB)
