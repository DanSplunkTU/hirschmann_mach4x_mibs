#
# PySNMP MIB module PRVT-RING-EPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-RING-EPS-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 17:28:31 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
Dot1agCfmMepIdOrZero, Dot1agCfmMDLevelOrNone = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMepIdOrZero", "Dot1agCfmMDLevelOrNone")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Gauge32, NotificationType, iso, TimeTicks, Counter64, Bits, Integer32, Counter32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "NotificationType", "iso", "TimeTicks", "Counter64", "Bits", "Integer32", "Counter32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32")
MacAddress, TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
prvtRingEpsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 134))
prvtRingEpsMib.setRevisions(('2013-02-22 00:00', '2011-03-11 00:00', '2010-12-17 00:00', '2010-03-16 00:00', '2010-02-02 00:00', '2009-11-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtRingEpsMib.setRevisionsDescriptions(('Added raps monitoring methods for rings and subrings', 'Added ring ID for rings and subrings', 'Added descriptions for rings and subrings', 'Added support for subrings', 'Added prvtRingEpsWaitToBlockTimer, changed values order for PrvtRingEpsPortStatusType ', 'Initial version.',))
if mibBuilder.loadTexts: prvtRingEpsMib.setLastUpdated('201003160000Z')
if mibBuilder.loadTexts: prvtRingEpsMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtRingEpsMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtRingEpsMib.setDescription('This private MIB provides capability of controlling the\n automatic Ring Ethernet Protection Switching (ITU-T G.8032)')
prvtRingEpsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 0))
prvtRingEpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1))
prvtRingEpsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2))
prvtRingEpsInstances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1))
prvtRingEpsVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2))
prvtRingEpsSubRings = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3))
class PrvtRingEpsModeType(TextualConvention, Integer32):
    reference = 'G.8032v2 clause 10.1.13'
    description = 'Version of the protocol the instance will use'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rapsMode8032v1", 1), ("rapsMode8032v2", 2))

class PrvtRingEpsStateType(TextualConvention, Integer32):
    reference = 'G.8032v2 clause 10.1.2'
    description = 'State of the R-APS request processing logic'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("rapsInit", 0), ("rapsIdle", 1), ("rapsProtection", 2), ("rapsManualSwitch", 3), ("rapsForcedSwitch", 4), ("rapsPending", 5))

class PrvtRingEpsLocalCommandType(TextualConvention, Integer32):
    reference = 'G.8032v2 clause 8'
    description = 'Local system state given by the top priority command received'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("rapsLcNoRequest", 0), ("rapsLcExercise", 1), ("rapsLcManualSwitch", 2), ("rapsLcSignalDegrade", 3), ("rapsLcSignalFail", 4), ("rapsLcForcedSwitch", 5), ("rapsLcClear", 6), ("rapsLcLockoutOfProtection", 7))

class PrvtRingEpsRemoteRequestType(TextualConvention, Integer32):
    reference = 'G.8032v2 clause 10.3'
    description = 'Remote command received via RAPS packets'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 7, 11, 13, 14))
    namedValues = NamedValues(("rapsRsNone", -1), ("rapsRsNoRequest", 0), ("rapsRsManualSwitch", 7), ("rapsRsSignalFail", 11), ("rapsRsForcedSwitch", 13), ("rapsRsEvent", 14))

class PrvtRingEpsNodeRoleType(TextualConvention, Integer32):
    reference = 'G.8032v2'
    description = 'Role of the defined node inside the protected ring'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("rapsNrSimpleNode", 0), ("rapsNrRplNeighborNode", 1), ("rapsNrRplOwner", 2))

class PrvtRingEpsRplPortType(TextualConvention, Integer32):
    reference = 'G.8032v2'
    description = 'Ring port designated as RPL\n       (only valid if prvtRingEpsNodeRole is rapsNrRplOwner or rapsNrRplNeighborNode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("port0", 0), ("port1", 1), ("none", 2))

class PrvtRingEpsDefectType(TextualConvention, Bits):
    reference = 'G.8032v2 10.4'
    description = 'Ring port designated as RPL\n       (only valid if prvtRingEpsNodeRole is rapsNrRplOwner or rapsNrRplNeighborNode'
    status = 'current'
    namedValues = NamedValues(("rapsDprovisioningMismatch", 0))

class PrvtRingEpsPortStatusType(TextualConvention, Integer32):
    description = 'Status of the port link'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("rapsPsOk", 0), ("rapsPsBlocked", 1), ("rapsPsFailed", 2))

class PrvtRingEpsPeerStatusType(TextualConvention, Bits):
    reference = 'ITU-T G.8032v2 clause 10.3'
    description = 'Status bits set in the received RAPS packet. The meanings are:\n\n        bRplBlocked(0) The RPL link is blocked by the RPL owner.\n        bDoNotFlush(1) RAPS sender requests that we do don flush our FDB.\n        bBlockedPortReference(2) The port that is blocked by the sender of the RAPS packet.\n       '
    status = 'current'
    namedValues = NamedValues(("bRplBlocked", 0), ("bDoNotFlush", 1), ("bBlockedPortReference", 2))

prvtRingEpsInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1), )
if mibBuilder.loadTexts: prvtRingEpsInstanceTable.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsInstanceTable.setDescription('This table includes information about the ring instances\n     defined on this node.')
prvtRingEpsInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-RING-EPS-MIB", "prvtRingEpsInstanceIndex"))
if mibBuilder.loadTexts: prvtRingEpsInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsInstanceEntry.setDescription('NONE')
prvtRingEpsInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: prvtRingEpsInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsInstanceIndex.setDescription('RAPS instance index')
prvtRingEpsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 2), PrvtRingEpsModeType().clone('rapsMode8032v2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsMode.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsMode.setDescription('Version of the protocol the instance will use')
prvtRingEpsNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 3), PrvtRingEpsNodeRoleType().clone('rapsNrSimpleNode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsNodeRole.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsNodeRole.setDescription('This variable identifies the role that the node will play inside the ring.\n     The node can have two special roles, RPL owner or RPL neighbor, when one\n     of its ports is designated as RPL. The ring can have a single RPL owner\n     and a single RPL neighbor, connected between eachother via the RPL.\n     If neither of the node ports are designated as RPL, then the node should\n     have the role of a Simple node')
prvtRingEpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 4), PrvtRingEpsStateType().clone('rapsInit')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsState.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsState.setDescription('This variable identifies the state of the ring node according to\n     the standard state machine.')
prvtRingEpsLocalCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 5), PrvtRingEpsLocalCommandType().clone('rapsLcNoRequest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsLocalCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsLocalCommand.setDescription('The user can control the ring using a set of commands allowing\n     blocking and unblocking of ports. These commands are rapsLcManualSwitch,\n     rapsLcForcedSwitch and rapsLcClear. The others are either read-only values\n     or not yet defined by the standard.')
prvtRingEpsControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 6), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsControlVlan.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsControlVlan.setDescription('The vlan ID used for RAPS & CFM traffic.')
prvtRingEpsPort0Ifindex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsPort0Ifindex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0Ifindex.setDescription('This variable is the interface index of the interface either a\n    bridge port, or an aggregated IEEE 802.1 link within a bridge\n    port, attached to the ring as port 0.')
prvtRingEpsPort1Ifindex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsPort1Ifindex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1Ifindex.setDescription('This variable is the interface index of the interface either a\n    bridge port, or an aggregated IEEE 802.1 link within a bridge\n    port, attached to the ring as port 1.')
prvtRingEpsRplPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 9), PrvtRingEpsRplPortType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsRplPort.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsRplPort.setDescription('This object controls whether the one of the ring ports is designated as RPL\n     for the ring or not.')
prvtRingEpsManualSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 10), PrvtRingEpsRplPortType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsManualSwitchPort.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsManualSwitchPort.setDescription('The port blocked by the Manual Switch command')
prvtRingEpsCfmMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 11), Dot1agCfmMDLevelOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsCfmMdLevel.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsCfmMdLevel.setDescription('Value of the CFM MD level where the protected domain is situated')
prvtRingEpsPort0Mep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 12), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsPort0Mep.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0Mep.setDescription('This variable is the peer MEP ID that should send CCMs towards port 0.')
prvtRingEpsPort1Mep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 13), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsPort1Mep.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1Mep.setDescription('This variable is the peer MEP ID that should send CCMs towards port 1.')
prvtRingEpsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsRevertive.setReference('G.8032v2 clause 9.1')
if mibBuilder.loadTexts: prvtRingEpsRevertive.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsRevertive.setDescription('This is the MI_RAPS_Revertive variable defined in the standard.\n     It controls whether the RPL is blocked again after a failure of\n     some ring link recovers.')
prvtRingEpsNoVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsNoVirtualChannel.setReference('G.8032v2 10.1.14')
if mibBuilder.loadTexts: prvtRingEpsNoVirtualChannel.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsNoVirtualChannel.setDescription("Node is part of a subring that doesn't use RAPS virtual channel")
prvtRingEpsHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsHoldOffTimer.setReference('G.8032v2 clause 10.1.8')
if mibBuilder.loadTexts: prvtRingEpsHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsHoldOffTimer.setDescription('Range is from 0 to 10 seconds in 100msec intervals')
prvtRingEpsWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsWaitToRestoreTimer.setReference('G.8032v2 clause 10.1.4')
if mibBuilder.loadTexts: prvtRingEpsWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsWaitToRestoreTimer.setDescription('Range is from 1 to 12 minutes')
prvtRingEpsGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsGuardTimer.setReference('G.8032v2 clause 10.1.5')
if mibBuilder.loadTexts: prvtRingEpsGuardTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsGuardTimer.setDescription('Range is from 10msec to 2 seconds in 10msec intervals')
prvtRingEpsWaitToBlockTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5010, 7000)).clone(5500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsWaitToBlockTimer.setReference('G.8032v2 clause 10.1.5')
if mibBuilder.loadTexts: prvtRingEpsWaitToBlockTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsWaitToBlockTimer.setDescription('Range is from 5010msec to 7 seconds in 10msec intervals.\n     This time is actulally the Guard Timer + 5 seconds')
prvtRingEpsDefectFop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 20), PrvtRingEpsDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsDefectFop.setReference('G.8032v2 clause 10.4')
if mibBuilder.loadTexts: prvtRingEpsDefectFop.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsDefectFop.setDescription('So far only the situation when two or more RPL-owners are defined\n     in the ring is identified as a defect. This scenario is noticed when\n     the instance with the RPL-Owner role receives a RAPS packet with the\n     RB bit set in its status field from a different NodeID than its own.')
prvtRingEpsPort0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 21), PrvtRingEpsPortStatusType().clone('rapsPsFailed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort0Status.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0Status.setDescription('This variable reflects the state of port 0.\n     It can be either Ok (unblocked), Blocked or Failed.')
prvtRingEpsPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 22), PrvtRingEpsPortStatusType().clone('rapsPsFailed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort1Status.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1Status.setDescription('This variable reflects the state of port 1.\n     It can be either Ok (unblocked), Blocked or Failed.')
prvtRingEpsPort0PeerNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 23), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort0PeerNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0PeerNodeId.setDescription('This variable reflects the Node ID from the RAPS packet received\n     via port 0.')
prvtRingEpsPort1PeerNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort1PeerNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1PeerNodeId.setDescription('This variable reflects the Node ID from the RAPS packet received\n     via port 1.')
prvtRingEpsPort0PeerCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 25), PrvtRingEpsRemoteRequestType().clone('rapsRsNone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort0PeerCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0PeerCommand.setDescription('This variable reflects the Request/State of the RAPS packet received\n     via port 0.')
prvtRingEpsPort1PeerCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 26), PrvtRingEpsRemoteRequestType().clone('rapsRsNone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort1PeerCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1PeerCommand.setDescription('This variable reflects the Request/State of the RAPS packet received\n     via port 1.')
prvtRingEpsPort0PeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 27), PrvtRingEpsPeerStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort0PeerStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0PeerStatus.setDescription('This variable reflects the status field of the RAPS packet received\n     via port 0.')
prvtRingEpsPort1PeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 28), PrvtRingEpsPeerStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsPort1PeerStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1PeerStatus.setDescription('This variable reflects the status field of the RAPS packet received\n     via port 1.')
prvtRingEpsOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsOperationalStatus.setDescription('The purpose of this status is to identify to the user whether\n     this instance is ready for running. The operational status can\n     be up or down. When creating the instance the operational\n     status will be down. Receiving CCMs from the expected peer MEPs on\n     both ring ports will bring the operational status to up. If any\n     needed CFM configuration is removed the operational status will\n     go back to down')
prvtRingEpsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsAdminStatus.setDescription('Administrative status of the instance')
prvtRingEpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsRowStatus.setDescription('The status of the row.')
prvtRingEpsForcedSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 32), PrvtRingEpsRplPortType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsForcedSwitchPort.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsForcedSwitchPort.setDescription('The port blocked by the Forced Switch command')
prvtRingEpsInstanceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsInstanceDescription.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsInstanceDescription.setDescription('RAPS instance description.')
prvtRingEpsRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsRingId.setReference('G.8032v2 Appendix VII')
if mibBuilder.loadTexts: prvtRingEpsRingId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsRingId.setDescription("The last octet of the RAPS destination MAC address\n     is designated as Ring ID (01-19-A7-00-00-[Ring ID]).\n     As of G.8032v2 the destination MAC address\n     '01-19-A7-00-00-01' is used. The usage of other\n     MAC addresses is for further study.")
prvtRingEpsPort0MonitoringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccm", 1), ("link-status", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtRingEpsPort0MonitoringMethod.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort0MonitoringMethod.setDescription('Raps monitoring methods for port 0: \n    ccm - CCM messages and link status will be used for raps monitoring,\n    link-status -Link status will be used for raps monitoring')
prvtRingEpsPort1MonitoringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccm", 1), ("link-status", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtRingEpsPort1MonitoringMethod.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsPort1MonitoringMethod.setDescription('Raps monitoring methods for port 1:\n\tccm - CCM messages and link status will be used for raps monitoring,\n    link-status - Link status will be used for raps monitoring')
prvtRingEpsVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2, 1), )
if mibBuilder.loadTexts: prvtRingEpsVlanTable.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsVlanTable.setDescription('This table includes information about protected vlans and the ring\n     instances that monitor them.')
prvtRingEpsVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-RING-EPS-MIB", "prvtRingEpsVlanIndex"))
if mibBuilder.loadTexts: prvtRingEpsVlanEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsVlanEntry.setDescription('Connection between vlan IDs and the RAPS instance that monitors them')
prvtRingEpsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: prvtRingEpsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsVlanIndex.setDescription('The vlan ID.')
prvtRingEpsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsInstance.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsInstance.setDescription('RAPS instance that will monitor this vlan')
prvtRingEpsVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsVlanRowStatus.setDescription('The status of the row.')
prvtRingEpsSubRingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1), )
if mibBuilder.loadTexts: prvtRingEpsSubRingTable.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingTable.setDescription('Table containing information about the subring instances\n     defined on this node.')
prvtRingEpsSubRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-RING-EPS-MIB", "prvtRingEpsInstanceIndex"), (0, "PRVT-RING-EPS-MIB", "prvtRingEpsSubRingIndex"))
if mibBuilder.loadTexts: prvtRingEpsSubRingEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingEntry.setDescription('Configuration of a subring that is interconnected to the main ring in an interconnection node')
prvtRingEpsSubRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: prvtRingEpsSubRingIndex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingIndex.setDescription('A subring ID')
prvtRingEpsSubRingNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 2), PrvtRingEpsNodeRoleType().clone('rapsNrSimpleNode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingNodeRole.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingNodeRole.setDescription('This variable identifies the role that the node will play inside the subring.\n     The node can have two special roles, RPL owner or RPL neighbor, when the\n     subring port is designated as RPL. The subring can have a single RPL owner\n     and a single RPL neighbor, connected between eachother via the RPL.\n     If the subring port is not designated as RPL, then the node should\n     have the role of a Simple node')
prvtRingEpsSubRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 3), PrvtRingEpsStateType().clone('rapsInit')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingState.setReference('G.8032v2 clause 10.1.2')
if mibBuilder.loadTexts: prvtRingEpsSubRingState.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingState.setDescription('This variable identifies the state of the subring node according to\n     the standard state machine.')
prvtRingEpsSubRingLocalCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 4), PrvtRingEpsLocalCommandType().clone('rapsLcNoRequest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingLocalCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingLocalCommand.setDescription('The user can control the ring using a set of commands allowing\n     blocking and unblocking of ports. These commands are rapsLcManualSwitch,\n     rapsLcForcedSwitch and rapsLcClear. The others are either read-only values\n     or not yet defined by the standard.')
prvtRingEpsSubRingPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingPortIfindex.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPortIfindex.setDescription('This variable is the interface index of the interface either a\n    bridge port, or an aggregated IEEE 802.1 link within a bridge\n    port, attached to the subring.')
prvtRingEpsSubRingPortMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 6), Dot1agCfmMepIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingPortMep.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPortMep.setDescription('This variable is the peer MEP ID that should send CCMs towards the subring port.')
prvtRingEpsSubRingRplPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 7), PrvtRingEpsRplPortType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingRplPort.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingRplPort.setDescription('This object controls whether the subring port is designated as RPL\n     for the subring or not.')
prvtRingEpsSubRingVirtualChannelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 8), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingVirtualChannelVlan.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingVirtualChannelVlan.setDescription('The vlan ID used for Virtual Channel encapsulation')
prvtRingEpsSubRingRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingRevertive.setReference('G.8032v2 clause 9.1')
if mibBuilder.loadTexts: prvtRingEpsSubRingRevertive.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingRevertive.setDescription('This is the MI_RAPS_Revertive variable defined in the standard.\n     It controls whether the RPL is blocked again after a failure of\n     some subring link recovers.')
prvtRingEpsSubRingHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingHoldOffTimer.setReference('G.8032v2 clause 10.1.8')
if mibBuilder.loadTexts: prvtRingEpsSubRingHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingHoldOffTimer.setDescription('Range is from 0 to 10 seconds in 100msec intervals')
prvtRingEpsSubRingWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToRestoreTimer.setReference('G.8032v2 clause 10.1.4')
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToRestoreTimer.setDescription('Range is from 1 to 12 minutes')
prvtRingEpsSubRingGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingGuardTimer.setReference('G.8032v2 clause 10.1.5')
if mibBuilder.loadTexts: prvtRingEpsSubRingGuardTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingGuardTimer.setDescription('Range is from 10msec to 2 seconds in 10msec intervals')
prvtRingEpsSubRingWaitToBlockTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5010, 7000)).clone(5500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToBlockTimer.setReference('G.8032v2 clause 10.1.5')
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToBlockTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingWaitToBlockTimer.setDescription('Range is from 5010msec to 7 seconds in 10msec intervals.\n     This time is actulally the Guard Timer + 5 seconds')
prvtRingEpsSubRingDefectFop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 14), PrvtRingEpsDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingDefectFop.setReference('G.8032v2 clause 10.4')
if mibBuilder.loadTexts: prvtRingEpsSubRingDefectFop.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingDefectFop.setDescription('So far only the situation when two or more RPL-owners are defined\n     in the ring is identified as a defect. This scenario is noticed when\n     the instance with the RPL-Owner role receives a RAPS packet with the\n     RB bit set in its status field from a different NodeID than its own.')
prvtRingEpsSubRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 15), PrvtRingEpsPortStatusType().clone('rapsPsFailed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingPortStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPortStatus.setDescription('This variable reflects the state of the subring port.\n     It can be either Ok (unblocked), Blocked or Failed.')
prvtRingEpsSubRingPortPeerNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingPortPeerNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPortPeerNodeId.setDescription('This variable reflects the Node ID from the RAPS packet received\n     via the subring port.')
prvtRingEpsSubRingPeerCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 17), PrvtRingEpsRemoteRequestType().clone('rapsRsNone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingPeerCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPeerCommand.setDescription('This variable reflects the Request/State of the RAPS packet received\n     via the subring port.')
prvtRingEpsSubRingPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 18), PrvtRingEpsPeerStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingPeerStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPeerStatus.setDescription('This variable reflects the status field of the RAPS packet received\n     via the subring port.')
prvtRingEpsSubRingVcPeerNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerNodeId.setDescription('This variable reflects the Node ID from the RAPS packet received\n     via the virtual channel.')
prvtRingEpsSubRingVcPeerCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 20), PrvtRingEpsRemoteRequestType().clone('rapsRsNone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerCommand.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerCommand.setDescription('This variable reflects the Request/State of the RAPS packet received\n     via the virtual channel.')
prvtRingEpsSubRingVcPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 21), PrvtRingEpsPeerStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingVcPeerStatus.setDescription('This variable reflects the status field of the RAPS packet received\n     via the virtual channel.')
prvtRingEpsSubRingPropagateTC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingPropagateTC.setReference('G.8032v2 10.1.11')
if mibBuilder.loadTexts: prvtRingEpsSubRingPropagateTC.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingPropagateTC.setDescription('This is the MI_RAPS_Propagate_TC variable mentioned in the standard.\n     If this is enabled a flush in the subring will be followed by a flush in\n     the main instance.')
prvtRingEpsSubRingOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRingEpsSubRingOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingOperationalStatus.setDescription('The purpose of this status is to identify to the user whether\n     this instance is ready for running. The operational status can\n     be up or down. When creating the instance the operational\n     status will be down. Receiving CCMs from the expected peer MEP on\n     the subring port will bring the operational status to up. If any\n     needed CFM configuration is removed the operational status will\n     go back to down')
prvtRingEpsSubRingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingAdminStatus.setDescription('Administrative status of the subring instance')
prvtRingEpsSubRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingRowStatus.setDescription('The status of the row.')
prvtRingEpsSubRingControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 26), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingControlVlan.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingControlVlan.setDescription('The vlan ID used for RAPS & CFM traffic.')
prvtRingEpsSubRingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingDescription.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingDescription.setDescription('RAPS instance sub-ring description.')
prvtRingEpsSubRingRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRingEpsSubRingRingId.setReference('G.8032v2 Appendix VII')
if mibBuilder.loadTexts: prvtRingEpsSubRingRingId.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingRingId.setDescription("The last octet of the RAPS destination MAC address\n     is designated as Ring ID (01-19-A7-00-00-[Ring ID]).\n     As of G.8032v2 the destination MAC address\n     '01-19-A7-00-00-01' is used. The usage of other\n     MAC addresses is for further study.")
prvtRingEpsSubRingMonitoringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 1, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccm", 1), ("link-status", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtRingEpsSubRingMonitoringMethod.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingMonitoringMethod.setDescription('Raps monitoring methods for subring port:\n\tccm - CCM messags and link status  will be used for raps monitoring,\n    link-status -Link status will be used for raps monitoring')
prvtRingEpsDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 0, 1)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsOperationalStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsDefectFop"))
if mibBuilder.loadTexts: prvtRingEpsDefectAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsDefectAlarm.setDescription('This trap will be sent by any instance when it notices a defect.\n        So far only the situation when two or more RPL-owners are defined\n        in the ring is identified as a defect. This scenario is noticed when\n        the instance with the RPL-Owner role receives a RAPS packet with the\n        RB bit set in its status field from a different NodeID than its own.\n        The management entity receiving the notification can identify\n        the system from the network source address of the\n        notification, and can identify the instance reporting the change\n        by the indices in the OID of the prvtRingEpsDefectFop\n        variable in the notification.')
prvtRingEpsSwitchoverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 0, 2)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsState"))
if mibBuilder.loadTexts: prvtRingEpsSwitchoverAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSwitchoverAlarm.setDescription('This trap will be sent by any instance when it changes state.\n        The management entity receiving the notification can identify\n        the system from the network source address of the\n        notification, and can identify the instance reporting the change\n        by the indices in the OID of the prvtRingEpsState\n        variable in the notification.')
prvtRingEpsSubRingDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 0, 3)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingOperationalStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingDefectFop"))
if mibBuilder.loadTexts: prvtRingEpsSubRingDefectAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingDefectAlarm.setDescription('This trap will be sent by any subring instance when it notices a defect.\n        So far only the situation when two or more RPL-owners are defined\n        in the ring is identified as a defect. This scenario is noticed when\n        the instance with the RPL-Owner role receives a RAPS packet with the\n        RB bit set in its status field from a different NodeID than its own.\n        The management entity receiving the notification can identify\n        the system from the network source address of the\n        notification, and can identify the instance reporting the change\n        by the indices in the OID of the prvtRingEpsDefectFop\n        variable in the notification.')
prvtRingEpsSubRingSwitchoverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 0, 4)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingState"))
if mibBuilder.loadTexts: prvtRingEpsSubRingSwitchoverAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingSwitchoverAlarm.setDescription('This trap will be sent by any subring instance when it changes state.\n        The management entity receiving the notification can identify\n        the system from the network source address of the\n        notification, and can identify the instance reporting the change\n        by the indices in the OID of the prvtRingEpsSubRingState\n        variable in the notification.')
prvtRingEpsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 1))
prvtRingEpsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 2))
prvtRingEpsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 2, 1)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsMode"), ("PRVT-RING-EPS-MIB", "prvtRingEpsNodeRole"), ("PRVT-RING-EPS-MIB", "prvtRingEpsState"), ("PRVT-RING-EPS-MIB", "prvtRingEpsLocalCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsControlVlan"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0Ifindex"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1Ifindex"), ("PRVT-RING-EPS-MIB", "prvtRingEpsRplPort"), ("PRVT-RING-EPS-MIB", "prvtRingEpsManualSwitchPort"), ("PRVT-RING-EPS-MIB", "prvtRingEpsCfmMdLevel"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0Mep"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1Mep"), ("PRVT-RING-EPS-MIB", "prvtRingEpsRevertive"), ("PRVT-RING-EPS-MIB", "prvtRingEpsNoVirtualChannel"), ("PRVT-RING-EPS-MIB", "prvtRingEpsHoldOffTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsWaitToRestoreTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsGuardTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsWaitToBlockTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsDefectFop"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0Status"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1Status"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0PeerNodeId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1PeerNodeId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0PeerCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1PeerCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0PeerStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1PeerStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsOperationalStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsAdminStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsRowStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsForcedSwitchPort"), ("PRVT-RING-EPS-MIB", "prvtRingEpsInstanceDescription"), ("PRVT-RING-EPS-MIB", "prvtRingEpsRingId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort0MonitoringMethod"), ("PRVT-RING-EPS-MIB", "prvtRingEpsPort1MonitoringMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRingEpsGroup = prvtRingEpsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsGroup.setDescription('Objects for the RAPS instances group.')
prvtRingEpsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 2, 2)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsInstance"), ("PRVT-RING-EPS-MIB", "prvtRingEpsVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRingEpsVlanGroup = prvtRingEpsVlanGroup.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsVlanGroup.setDescription('Objects for the RAPS monitored vlans group.')
prvtRingEpsSubRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 2, 3)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingNodeRole"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingState"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingLocalCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPortIfindex"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPortMep"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingRplPort"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingVirtualChannelVlan"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingRevertive"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingHoldOffTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingWaitToRestoreTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingGuardTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingWaitToBlockTimer"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingDefectFop"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPortStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPortPeerNodeId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPeerCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPeerStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingVcPeerNodeId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingVcPeerCommand"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingVcPeerStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingPropagateTC"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingOperationalStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingAdminStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingRowStatus"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingControlVlan"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingDescription"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingRingId"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingMonitoringMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRingEpsSubRingGroup = prvtRingEpsSubRingGroup.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsSubRingGroup.setDescription('Objects for the RAPS subring group.')
prvtRingEpsNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 2, 4)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsSwitchoverAlarm"), ("PRVT-RING-EPS-MIB", "prvtRingEpsDefectAlarm"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingSwitchoverAlarm"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingDefectAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRingEpsNotificationsGroup = prvtRingEpsNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsNotificationsGroup.setDescription('Objects for the Notifications group.')
prvtRingEpsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 134, 2, 1, 1)).setObjects(("PRVT-RING-EPS-MIB", "prvtRingEpsGroup"), ("PRVT-RING-EPS-MIB", "prvtRingEpsVlanGroup"), ("PRVT-RING-EPS-MIB", "prvtRingEpsSubRingGroup"), ("PRVT-RING-EPS-MIB", "prvtRingEpsNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtRingEpsCompliance = prvtRingEpsCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtRingEpsCompliance.setDescription('The compliance statement for support of the Ring EPS MIB module.')
mibBuilder.exportSymbols("PRVT-RING-EPS-MIB", prvtRingEpsSubRingGuardTimer=prvtRingEpsSubRingGuardTimer, prvtRingEpsSubRingRingId=prvtRingEpsSubRingRingId, prvtRingEpsSubRingVirtualChannelVlan=prvtRingEpsSubRingVirtualChannelVlan, prvtRingEpsSwitchoverAlarm=prvtRingEpsSwitchoverAlarm, prvtRingEpsPort0Ifindex=prvtRingEpsPort0Ifindex, prvtRingEpsMib=prvtRingEpsMib, prvtRingEpsSubRingPortMep=prvtRingEpsSubRingPortMep, prvtRingEpsSubRingIndex=prvtRingEpsSubRingIndex, prvtRingEpsSubRingMonitoringMethod=prvtRingEpsSubRingMonitoringMethod, prvtRingEpsSubRingDescription=prvtRingEpsSubRingDescription, prvtRingEpsPort0MonitoringMethod=prvtRingEpsPort0MonitoringMethod, prvtRingEpsPort1PeerCommand=prvtRingEpsPort1PeerCommand, PrvtRingEpsModeType=PrvtRingEpsModeType, prvtRingEpsSubRingPeerStatus=prvtRingEpsSubRingPeerStatus, prvtRingEpsPort0PeerNodeId=prvtRingEpsPort0PeerNodeId, prvtRingEpsCfmMdLevel=prvtRingEpsCfmMdLevel, prvtRingEpsInstanceIndex=prvtRingEpsInstanceIndex, prvtRingEpsRingId=prvtRingEpsRingId, prvtRingEpsOperationalStatus=prvtRingEpsOperationalStatus, PrvtRingEpsRplPortType=PrvtRingEpsRplPortType, prvtRingEpsPort0PeerCommand=prvtRingEpsPort0PeerCommand, prvtRingEpsInstanceDescription=prvtRingEpsInstanceDescription, prvtRingEpsVlans=prvtRingEpsVlans, prvtRingEpsSubRingPortPeerNodeId=prvtRingEpsSubRingPortPeerNodeId, prvtRingEpsSubRingHoldOffTimer=prvtRingEpsSubRingHoldOffTimer, prvtRingEpsVlanGroup=prvtRingEpsVlanGroup, prvtRingEpsNodeRole=prvtRingEpsNodeRole, prvtRingEpsHoldOffTimer=prvtRingEpsHoldOffTimer, prvtRingEpsSubRingRowStatus=prvtRingEpsSubRingRowStatus, prvtRingEpsSubRingControlVlan=prvtRingEpsSubRingControlVlan, prvtRingEpsSubRingGroup=prvtRingEpsSubRingGroup, prvtRingEpsDefectAlarm=prvtRingEpsDefectAlarm, PrvtRingEpsStateType=PrvtRingEpsStateType, prvtRingEpsSubRingAdminStatus=prvtRingEpsSubRingAdminStatus, prvtRingEpsNotifications=prvtRingEpsNotifications, prvtRingEpsGroups=prvtRingEpsGroups, PrvtRingEpsNodeRoleType=PrvtRingEpsNodeRoleType, prvtRingEpsRevertive=prvtRingEpsRevertive, prvtRingEpsWaitToBlockTimer=prvtRingEpsWaitToBlockTimer, prvtRingEpsSubRingOperationalStatus=prvtRingEpsSubRingOperationalStatus, prvtRingEpsSubRingSwitchoverAlarm=prvtRingEpsSubRingSwitchoverAlarm, prvtRingEpsInstance=prvtRingEpsInstance, prvtRingEpsConformance=prvtRingEpsConformance, prvtRingEpsSubRingVcPeerStatus=prvtRingEpsSubRingVcPeerStatus, prvtRingEpsInstanceTable=prvtRingEpsInstanceTable, prvtRingEpsMode=prvtRingEpsMode, prvtRingEpsSubRingLocalCommand=prvtRingEpsSubRingLocalCommand, prvtRingEpsSubRingWaitToRestoreTimer=prvtRingEpsSubRingWaitToRestoreTimer, PrvtRingEpsLocalCommandType=PrvtRingEpsLocalCommandType, prvtRingEpsSubRingVcPeerNodeId=prvtRingEpsSubRingVcPeerNodeId, prvtRingEpsSubRingPeerCommand=prvtRingEpsSubRingPeerCommand, prvtRingEpsAdminStatus=prvtRingEpsAdminStatus, prvtRingEpsVlanIndex=prvtRingEpsVlanIndex, prvtRingEpsSubRingRplPort=prvtRingEpsSubRingRplPort, prvtRingEpsSubRingState=prvtRingEpsSubRingState, prvtRingEpsInstanceEntry=prvtRingEpsInstanceEntry, prvtRingEpsSubRingDefectFop=prvtRingEpsSubRingDefectFop, prvtRingEpsState=prvtRingEpsState, PrvtRingEpsPeerStatusType=PrvtRingEpsPeerStatusType, prvtRingEpsNotificationsGroup=prvtRingEpsNotificationsGroup, prvtRingEpsInstances=prvtRingEpsInstances, prvtRingEpsSubRingDefectAlarm=prvtRingEpsSubRingDefectAlarm, prvtRingEpsObjects=prvtRingEpsObjects, prvtRingEpsSubRingPortIfindex=prvtRingEpsSubRingPortIfindex, prvtRingEpsSubRingRevertive=prvtRingEpsSubRingRevertive, prvtRingEpsSubRingVcPeerCommand=prvtRingEpsSubRingVcPeerCommand, prvtRingEpsVlanRowStatus=prvtRingEpsVlanRowStatus, prvtRingEpsSubRings=prvtRingEpsSubRings, prvtRingEpsPort1PeerNodeId=prvtRingEpsPort1PeerNodeId, prvtRingEpsSubRingPortStatus=prvtRingEpsSubRingPortStatus, PrvtRingEpsPortStatusType=PrvtRingEpsPortStatusType, PrvtRingEpsRemoteRequestType=PrvtRingEpsRemoteRequestType, prvtRingEpsControlVlan=prvtRingEpsControlVlan, prvtRingEpsSubRingWaitToBlockTimer=prvtRingEpsSubRingWaitToBlockTimer, prvtRingEpsCompliance=prvtRingEpsCompliance, prvtRingEpsWaitToRestoreTimer=prvtRingEpsWaitToRestoreTimer, prvtRingEpsSubRingPropagateTC=prvtRingEpsSubRingPropagateTC, PrvtRingEpsDefectType=PrvtRingEpsDefectType, prvtRingEpsSubRingNodeRole=prvtRingEpsSubRingNodeRole, prvtRingEpsRplPort=prvtRingEpsRplPort, prvtRingEpsPort0Status=prvtRingEpsPort0Status, prvtRingEpsPort0PeerStatus=prvtRingEpsPort0PeerStatus, PYSNMP_MODULE_ID=prvtRingEpsMib, prvtRingEpsDefectFop=prvtRingEpsDefectFop, prvtRingEpsSubRingEntry=prvtRingEpsSubRingEntry, prvtRingEpsManualSwitchPort=prvtRingEpsManualSwitchPort, prvtRingEpsLocalCommand=prvtRingEpsLocalCommand, prvtRingEpsGroup=prvtRingEpsGroup, prvtRingEpsPort1PeerStatus=prvtRingEpsPort1PeerStatus, prvtRingEpsVlanEntry=prvtRingEpsVlanEntry, prvtRingEpsForcedSwitchPort=prvtRingEpsForcedSwitchPort, prvtRingEpsRowStatus=prvtRingEpsRowStatus, prvtRingEpsPort1MonitoringMethod=prvtRingEpsPort1MonitoringMethod, prvtRingEpsPort1Mep=prvtRingEpsPort1Mep, prvtRingEpsGuardTimer=prvtRingEpsGuardTimer, prvtRingEpsVlanTable=prvtRingEpsVlanTable, prvtRingEpsSubRingTable=prvtRingEpsSubRingTable, prvtRingEpsPort0Mep=prvtRingEpsPort0Mep, prvtRingEpsNoVirtualChannel=prvtRingEpsNoVirtualChannel, prvtRingEpsCompliances=prvtRingEpsCompliances, prvtRingEpsPort1Ifindex=prvtRingEpsPort1Ifindex, prvtRingEpsPort1Status=prvtRingEpsPort1Status)
