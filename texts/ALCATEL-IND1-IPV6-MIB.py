#
# PySNMP MIB module ALCATEL-IND1-IPV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-IPV6-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:01:26 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1Ipv6, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Ipv6")
alaVirtualRouterName, = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterName")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ipv6IfIndex, ipv6RouteEntry = mibBuilder.importSymbols("IPV6-MIB", "ipv6IfIndex", "ipv6RouteEntry")
Ipv6Address, Ipv6IfIndexOrZero = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6IfIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, iso, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Integer32, MibIdentifier, IpAddress, Gauge32, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "Gauge32", "Bits", "TimeTicks", "Counter64")
TextualConvention, PhysAddress, DateAndTime, DisplayString, RowStatus, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DateAndTime", "DisplayString", "RowStatus", "TimeStamp", "TruthValue")
alcatelIND1IPv6MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1))
alcatelIND1IPv6MIB.setRevisions(('2016-04-12 00:00', '2015-03-24 00:00', '2014-10-14 00:00', '2014-09-18 00:00', '2014-08-12 00:00', '2014-05-20 00:00', '2014-02-28 00:00', '2013-07-30 00:00', '2013-07-29 00:00', '2013-03-13 00:00', '2012-02-07 00:00', '2011-03-09 00:00', '2010-05-13 00:00', '2010-01-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPv6MIB.setRevisionsDescriptions(('Correct specification of objects included in \n\t alaIPv6InterfaceNeighborLimitExceeded trap.', 'Router Advertisement filtering changes.', 'Module compliance section update.', 'Added alaIPv6InterfaceStatsTable.', 'Added alaIPv6NeighborPortIfIndex.  Deprecated alaIPv6NeighborChassis, \n\t alaIPv6NeighborSlot, alaIPv6NeighborPort and alaIPv6RAFilterTrustedTable.\n\n\t Added alaIPv6RAFilterTrustedPortTable.  Obsoleted alaIPv6RAFilterTrustedTable.', 'Added alaIPv6InterfaceRouterPreference.', 'Updated alaIPv6InterfaceTable description for loopback0 support.  \n         Changed range/updated description for alaIPv6InterfaceEUI64AddressPrefixLength.', 'Added alaIPv6InterfaceRetransBackoff and alaIPv6InterfaceRetransMax', 'Allow 0 as valid value for alaIPv6InterfaceDADTransmits.', 'Added neighbour cache limit objects (global, per-VRF, per-interface).\n         Added Local Proxy Neighbor Discovery objects.', 'Added alaIPv6NeighborChassis', 'Increased size of alaIPv6InterfaceName to 32', 'Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPv6MIB.setLastUpdated('201503240000Z')
if mibBuilder.loadTexts: alcatelIND1IPv6MIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPv6MIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPv6MIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Propietary IPv6 MIB definitions\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n         or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2015 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPv6MIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 0))
if mibBuilder.loadTexts: alcatelIND1IPv6MIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPv6MIBNotifications.setDescription('Branch For IPv6 MIB Subsystem Notifications.')
alcatelIND1IPv6MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1))
class AlaIPv6AddressPrefix(TextualConvention, OctetString):
    description = 'A data type for the 8 byte IPv6 prefixes for EUI-64 addresses'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class AlaIPv6RAFilterTrustedSourceType(TextualConvention, Integer32):
    description = 'A value that represents the type of an RA Filter trusted source.\n\n         port(1)   A physical port or link aggregation ifIndex\n                   as defined by the AlaIPv6RAFilterTrustedSourceIfIndex\n                   textual convention\n         netAddress(2)  A layer 3 IPv6 address as defined by the \n                        Ipv6Address textual convention\n         physAddress(3) A layer 2 physical address as defined by the \n                        PhysAddress textual convention'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("port", 1), ("netAddress", 2), ("physAddress", 3))

class AlaIPv6RAFilterTrustedSourceValue(TextualConvention, OctetString):
    description = 'The value identifying a trusted source.  The value must be\n\t interpreted within the context of an AlaIPv6RAFilterTrustedSourceType\n\t value.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class AlaIPv6RAFilterTrustedSourceIfIndex(TextualConvention, OctetString):
    description = 'The ifIndex value identifying a trusted source port or \n\t link aggregation.  The ifIndex value is in network byte order.'
    status = 'current'
    displayHint = '4d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

alaIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1))
alaIPv6ClearNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6ClearNeighbors.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ClearNeighbors.setDescription('Clear all non-static entries from the Neighbor table.')
alaIPv6ClearTraffic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6ClearTraffic.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ClearTraffic.setDescription('Reset all IPv6 traffic counters.')
alaIPv6ClearPMTUTable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6ClearPMTUTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ClearPMTUTable.setDescription('Clear the path MTU table.')
alaIPv6PMTUMinLifetime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6PMTUMinLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUMinLifetime.setDescription('Set the minimum lifetime for entries in the\n        path MTU table.')
alaIPv6NeighborStaleLifetime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 2880)).clone(10)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6NeighborStaleLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborStaleLifetime.setDescription('Set the minimum lifetime for neighbor entries in the\n        stale state.\n\n        In older versions of this MIB the default was specified\n        as 1440 minutes.')
alaIPv6GlobalID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6GlobalID.setStatus('current')
if mibBuilder.loadTexts: alaIPv6GlobalID.setDescription('The global ID used in the creation of local IPv6 unicast\n      addresses (RFC 4193).  An explicit value may be specified for\n      the global ID or this object may be set to all zero to have a\n      global ID be created based on the algorithm from the RFC.')
alaIPv6VirtualSourceMAC = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6VirtualSourceMAC.setStatus('current')
if mibBuilder.loadTexts: alaIPv6VirtualSourceMAC.setDescription("If set to enable(1) when a packet's source address is a\n         VRRP virtual IPv6 address, the corresponding VRRP virtual\n         MAC will be used as the source L2 address.\n\n         If set to disable(2), the default, the interface's real\n         MAC will be used as the source L2 address.")
alaIPv6NeighborLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 8), Unsigned32().clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6NeighborLimit.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborLimit.setDescription('The system-wide maximum size of the neighbor cache.  A value\n\tof 0 indicates that no limit will be enforced.  The minimum\n\tvalue is 200 entries.')
alaIPv6NeighborVRFLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIPv6NeighborVRFLimit.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborVRFLimit.setDescription('The maximum size of the neighbor cache for a specific VRF.  \n\tA value\tof 0 indicates that no limit is set.  The minimum\n\tvalue is 200 entries.')
alaIPv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2), )
if mibBuilder.loadTexts: alaIPv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceTable.setDescription("Table allowing the creation and removal of IPv6\n        interfaces.\n\n        The table is indexed by ipv6IfIndex.  The value of\n        ipv6IfIndex shall be a four byte value in one of\n        the following formats:\n\n          0x0000vvvv - The interface for VLAN vvvv\n          0x0100tttt - The interface for tunnel tttt\n          0x02000001 - The IPv6 loopback interface\n          0x0300nnnn - A loopback0 interface with ID nnnn\n\n        The IPv6 loopback interface's configuration cannot be\n\tmodified.\n\n\tA loopback0 interface's configuration cannog be modified\n\tother than to change its name or administrative status.\n\tWhen creating a new loopback0 interface, the special\n\tipv6IfIndex value of 0x03000000 should be specified \n\t(ID of 0).  Upon creation the interface will automatically\n\tbe assigned its actual ID and ipv6IfIndex.")
alaIPv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"))
if mibBuilder.loadTexts: alaIPv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEntry.setDescription('An IPv6 interface entry.')
alaIPv6InterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceRowStatus.setDescription('Used to control the addition and removal of IPv6\n        interfaces.')
alaIPv6InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6InterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceDescription.setDescription("The IPv6 interface's description.")
alaIPv6InterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceMtu.setDescription("The IPv6 interface's maximum transmission unit.")
alaIPv6InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("vlan", 2), ("tunnel", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6InterfaceType.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceType.setDescription('The interface type.')
alaIPv6InterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdminStatus.setDescription('Interface administrative status.')
alaIPv6InterfaceSendRouterAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceSendRouterAdvertisements.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceSendRouterAdvertisements.setDescription('Specify whether the router sends periodic router\n         advertisements and responds to router solicitations\n         on the interface.\n\n         The default value for most interfaces is enable(1).\n         Some interface types (e.g. 6to4 tunnel) cannot send\n         router advertisements so the default (and only)\n         value for those interfaces is disable(2).')
alaIPv6InterfaceMaxRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceMaxRtrAdvInterval.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceMaxRtrAdvInterval.setDescription('The maximum time allowed between sending unsolicited\n        multicast router advertisements from the interface.')
alaIPv6InterfaceAdvManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvManagedFlag.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvManagedFlag.setDescription("The TRUE/FALSE value to be placed in the 'Managed\n        address configuration' flag field in router advertisements.")
alaIPv6InterfaceAdvOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvOtherConfigFlag.setDescription("The TRUE/FALSE value to be placed in the 'Other stateful\n        configuration' flag field in router advertisements.")
alaIPv6InterfaceAdvReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvReachableTime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvReachableTime.setDescription('The value to be placed in the Reachable Time field in\n        the router advertisements sent over this interface.  The\n        value zero means unspecified by this router.')
alaIPv6InterfaceAdvRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 11), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvRetransTimer.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvRetransTimer.setDescription('The value to be placed in the Retrans Timer field in\n        the router advertisements sent over this interface.  The\n        value zero means unspecified by this router.')
alaIPv6InterfaceAdvDefaultLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvDefaultLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvDefaultLifetime.setDescription("The value to be placed in the Router Lifetime field in\n        the router advertisements sent over this interface.\n\n        The value MUST be either zero, 1, or between\n        alaIPv6InterfaceMaxRtrAdvInterval and 9000 seconds.\n\n        The special value zero indicates that the router is not\n        to be used as a default router.\n\n        The special value 1 indicates that this object's true\n        value should be computed using the formula\n        3 * alaIPv6InterfaceMaxRtrAdvInterval.")
alaIPv6InterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceName.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceName.setDescription("The mandatory user-assigned name for the interface.\n\n        Since the loopback interface is created without user\n        interaction, the name 'loopback' will be automatically\n        assigned.")
alaIPv6InterfaceAdvSendMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvSendMtu.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvSendMtu.setDescription('The TRUE/FALSE value that determines whether the MTU\n        option is sent in Router Advertisements.')
alaIPv6InterfaceReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6InterfaceReachableTime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceReachableTime.setDescription('In the absence of any reachability notification, the\n        amount of time a neighbor reached via this interface\n        will remain in the reachable state before transitioning\n        to the stale state.  Computed to be between .5 and 1.5\n        times the alaIPv6InterfaceBaseReachableTime.')
alaIPv6InterfaceBaseReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceBaseReachableTime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceBaseReachableTime.setDescription('The base value used to compute the reachable time\n        for neighbors reached via this interface.  See\n        alaIPv6InterfaceReachableTime above.')
alaIPv6InterfaceMinRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1350))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceMinRtrAdvInterval.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceMinRtrAdvInterval.setDescription('The minimum time allowed between sending unsolicited\n        multicast router advertisements from the interface.\n\n        The time must be a minimum of 3 seconds and no more than\n        .75 times the value of alaIPv6InterfaceMaxRtrAdvInterval.\n\n        Setting this object to the special value of 0 indicates\n        that the minimum interval should be automatically\n        recalculated using the formula .33 times the value of\n        alaIPv6InterfaceMaxRtrAdvInterval.')
alaIPv6InterfaceClockSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceClockSkew.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceClockSkew.setDescription('Router Advertisement decrementing timers must be consistent\n     in all Advertisements on the link. The clock skew accounts\n     for link propogation delays and poorly synchronized clocks.')
alaIPv6InterfaceRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 30000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRetransTimer.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceRetransTimer.setDescription('The amount of time to wait before retransmitting a Neighbor\n     Solicitation during neighbor discovery.')
alaIPv6InterfaceDADTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceDADTransmits.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceDADTransmits.setDescription('The number of Neighbor Solicitations to send during Duplicate\n     Address Detection.\n\n     A value of 0 indicates that DAD will not be performed for\n     addresses assigned to the interface.')
alaIPv6InterfaceAdvHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAdvHopLimit.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAdvHopLimit.setDescription('The value placed in the current hop limit field of router\n    advertisements.')
alaIPv6InterfaceLPND = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceLPND.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceLPND.setDescription('Enable/disable local proxy neighbor discovery.')
alaIPv6InterfaceRAFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRAFilter.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6InterfaceRAFilter.setDescription('Enable/disable RA filtering.\n\n\t This object has been superseded by the \n\t alaIPv6RAFilterInterfaceTable.')
alaIPv6InterfaceNeighborLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceNeighborLimit.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceNeighborLimit.setDescription('The maximum number o neighbor entries that may be cached\n\ton this interface.  A value of 0 indicates that no limit\n\tis set.  The minimum value is 10.')
alaIPv6InterfaceRetransBackoff = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRetransBackoff.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceRetransBackoff.setDescription('The neighbor unreachability detection exponential backoff base.\n    A value of 1 indicates the use of fixed interval retransmissions.')
alaIPv6InterfaceRetransMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRetransMax.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceRetransMax.setDescription('The maximum number of neighbor solicitations to be sent during \n    neighbor discovery or neighbor unreachability detection.')
alaIPv6InterfaceRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("medium", 0), ("high", 1), ("low", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceRouterPreference.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceRouterPreference.setDescription('The preference a host should give to using this router\n\tas a default router.')
alaIPv6TunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 3))
alaIPv6ConfigTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 3, 2), )
if mibBuilder.loadTexts: alaIPv6ConfigTunnelTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ConfigTunnelTable.setDescription('Table for IPv6 configured tunnels.  This table contains the\n         tunnel-specific information extending the corresponding\n         tunnel interface entry in alaIPv6InterfaceTable.')
alaIPv6ConfigTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 3, 2, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"))
if mibBuilder.loadTexts: alaIPv6ConfigTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ConfigTunnelEntry.setDescription('A entry contains the objects for an IPv6 configured tunnel.')
alaIPv6ConfigTunnelV4Source = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6ConfigTunnelV4Source.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ConfigTunnelV4Source.setDescription('The source IPv4 address for the tunnel.')
alaIPv6ConfigTunnelV4Dest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6ConfigTunnelV4Dest.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ConfigTunnelV4Dest.setDescription('The destination IPv4 address for the tunnel.')
alaIPv6InterfaceAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4), )
if mibBuilder.loadTexts: alaIPv6InterfaceAddressTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressTable.setDescription('Table allowing the creation and removal of IPv6\n        addresses assigned to interfaces.')
alaIPv6InterfaceAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddress"))
if mibBuilder.loadTexts: alaIPv6InterfaceAddressEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressEntry.setDescription('An IPv6 interface address entry.\n\n        The same link-local address may be assigned to\n        multiple interfaces.  A global address may only\n        be assigned to a single interface.')
alaIPv6InterfaceAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressRowStatus.setDescription('Used to control the addition and removal of IPv6\n        interface addresses.')
alaIPv6InterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6InterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddress.setDescription('An IPv6 address (or prefix for EUI-64 addresses)\n        assigned to the interface.')
alaIPv6InterfaceAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressPrefixLength.setDescription("The number of bits that are significant in the IPv6\n        address' prefix.")
alaIPv6InterfaceAddressAnycastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAddressAnycastFlag.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressAnycastFlag.setDescription("This object has the value 'true(1)', if this\n         address is an anycast address and the value\n         'false(2)' otherwise.")
alaIPv6InterfaceAddressDADStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("pending", 1), ("duplicate", 2), ("passed", 3), ("check", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceAddressDADStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressDADStatus.setDescription("The status of duplicate address detection for this address.\n        The only value that may be set via SNMP is 'check' when the\n        current status is 'duplicate'.  In such cases, duplicate\n        address detection will be performed again for the address.")
alaIPv6InterfaceEUI64AddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5), )
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressTable.setDescription('Table allowing the creation and removal of IPv6\n        addresses formed by appending an EUI-64 interface\n        identifier to the specified prefix.\n\n        This table is mainly used for the creation of such\n        addresses.  After creation they can be managed\n        via the alaIPv6InterfaceAddressTable.')
alaIPv6InterfaceEUI64AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceEUI64AddressPrefix"))
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressEntry.setDescription('An IPv6 interface EUI-64 address entry.')
alaIPv6InterfaceEUI64AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressRowStatus.setDescription('Used to control the addition and removal of IPv6\n        interface EUI-64 addresses.')
alaIPv6InterfaceEUI64AddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5, 1, 2), AlaIPv6AddressPrefix())
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressPrefix.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressPrefix.setDescription('The prefix for the EUI-64 address.')
alaIPv6InterfaceEUI64AddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressPrefixLength.setDescription("The number of bits that are significant in the IPv6\n        address' prefix.  The prefix length must be in the \n\trange 3..64 or 128.")
alaIPv6InterfaceEUI64AddressIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressIdentifier.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressIdentifier.setDescription("The interface's EUI-64 identifier which is combined\n         with the prefix to form the IPv6 address.")
alaIPv6NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6), )
if mibBuilder.loadTexts: alaIPv6NeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborTable.setDescription('The IPv6 neighbor table.  Much of this information is\n        available in the RFC-2465 ipv6NetToMediaTable.  However,\n        that table does not allow the static configuration of\n        neighbor entries (all objects except for\n        ipv6NetToMediaValid are read-only).')
alaIPv6NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborNetAddress"))
if mibBuilder.loadTexts: alaIPv6NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborEntry.setDescription("Each entry contains one IPv6 address to `physical'\n        address equivalence (a neighbor).")
alaIPv6NeighborNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6NeighborNetAddress.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborNetAddress.setDescription("The neighbor's IPv6 Address.")
alaIPv6NeighborPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 2), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborPhysAddress.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborPhysAddress.setDescription("The neighbor's media-dependent `physical' address.")
alaIPv6NeighborSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborSlot.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6NeighborSlot.setDescription('The slot used to reach the neighbor.  When creating a static neighbor\n         the slot must be specified.  On read, a value of zero indicates\n         the slot is not known/not applicable.\n\n\t Superseded by alaIPv6NeighborPortIfIndex')
alaIPv6NeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborPort.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6NeighborPort.setDescription('The port used to reach the neighbor.  When creating a static neighbor\n         the port must be specified.  On read, a value of zero indicates the\n         port is not known/not applicable.\n\n\t Superseded by alaIPv6NeighborPortIfIndex.')
alaIPv6NeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("static", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6NeighborType.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborType.setDescription("The type of the mapping. The 'dynamic(2)' type\n        indicates that the IPv6 address to physical\n        addresses mapping has been dynamically\n        resolved using the IPv6 Neighbor Discovery\n        protocol. The static(3)' types indicates that\n        the mapping has been statically configured.\n        The local(4) indicates that the mapping is\n        provided for an entity's own interface address.\n\n        All entries added via this table will have the\n        type static(3) and only static entries may be\n        removed via this table.")
alaIPv6NeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6NeighborState.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6NeighborState.setDescription('The Neighbor Unreachability Detection state\n        for the interface when the address mapping in\n        this entry is used.')
alaIPv6NeighborLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6NeighborLastUpdated.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborLastUpdated.setDescription('The value of sysUpTime at the time this entry\n        was last updated.  If this entry was updated prior\n        to the last re-initialization of the local network\n        management subsystem, then this object contains\n        a zero value.')
alaIPv6NeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborRowStatus.setDescription('Used to control the addition and removal of static\n        entries in the neighbor table.')
alaIPv6NeighborLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6NeighborLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborLifetime.setDescription('The remaining time the neighbor will stay in its current\n        state.  External events may cause a state change before\n        the expiry of this lifetime.  A value of zero indicates\n        the neighbor will remain in its current state indefinitely.')
alaIPv6NeighborReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("confirmed", 1), ("unconfirmed", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6NeighborReachability.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborReachability.setDescription('The reachability status of the neighbor.')
alaIPv6NeighborChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborChassis.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6NeighborChassis.setDescription('On a multi-chasis system, the chassis used to reach the neighbor.\n\tOn a single-chassis system this value is always 0.  On read, a\n\tvalue of zero may indicate that the chassis is not known/not \n\tapplicable.\n\n\tSuperseded by alaIPv6NeighborPortIfIndex.')
alaIPv6NeighborPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 6, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6NeighborPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborPortIfIndex.setDescription('The ifIndex of the physical port or link aggregation used to reach \n\tthe neighbor.  When creating a static neighbor the port ifIndex must \n\tbe specified.  On read, a value of zero indicates the port ifIndex \n\tis not known/not applicable.')
alaIPv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7), )
if mibBuilder.loadTexts: alaIPv6StaticRouteTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteTable.setDescription('This table has been superseded by alaIprmV6StaticRouteTable in\n        ALCATEL-IND1-IPRMV6-MIB.\n\n        Table allowing the creation and removal of static\n        IPv6 routes.')
alaIPv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRouteDest"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRoutePfxLength"))
if mibBuilder.loadTexts: alaIPv6StaticRouteEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteEntry.setDescription('A static route entry.')
alaIPv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6StaticRouteDest.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteDest.setDescription('The destination IPv6 address of this static\n        route.  This object may not take a Multicast\n        address value.')
alaIPv6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaIPv6StaticRoutePfxLength.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination\n        address.')
alaIPv6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 3), Ipv6IfIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6StaticRouteIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteIfIndex.setDescription('If the next hop address is a link-local\n        address, this is the ipv6IfIndex value of the\n        interface over which the destination is reached.\n        For all other next hop address types the value\n        is zero.')
alaIPv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6StaticRouteNextHop.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteNextHop.setDescription('The IPv6 address of the next hop towards the\n        destination.')
alaIPv6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6StaticRouteMetric.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteMetric.setDescription('The routing metric for this route. The lower the\n        value, the higher the priority for the static\n        route.')
alaIPv6StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6StaticRouteRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteRowStatus.setDescription('Used to control the addition and removal of static\n        routes.')
alaIPv6HostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 8), )
if mibBuilder.loadTexts: alaIPv6HostTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostTable.setDescription('Local table mapping host names to IPv6 addresses. This provides\n        the equivalent of /etc/hosts for IPv6.')
alaIPv6HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6HostName"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6HostAddress"))
if mibBuilder.loadTexts: alaIPv6HostEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostEntry.setDescription('A entry maps a host name to an IPv6 address.')
alaIPv6HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: alaIPv6HostName.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostName.setDescription('A host name to be mapped to an IPv6 address.')
alaIPv6HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 8, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6HostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostAddress.setDescription('The IPv6 address mapped to the host name.')
alaIPv6HostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6HostRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostRowStatus.setDescription('Allows host name/IPv6 address mappings to be created and\n        deleted in this table.')
alaIPv6InterfacePrefixTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9), )
if mibBuilder.loadTexts: alaIPv6InterfacePrefixTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixTable.setDescription('Table allowing the creation and removal of IPv6\n        prefixes to be placed in Prefix Information\n        options in Router Advertisement messages sent\n        from the interface.\n\n        Default: all prefixes that the router advertises\n        via routing protocols as being on-link for the\n        interface from which the advertisement is sent.\n        The link-local prefix is not included in the\n        list of advertised prefixes.')
alaIPv6InterfacePrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefix"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixLength"))
if mibBuilder.loadTexts: alaIPv6InterfacePrefixEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixEntry.setDescription('An IPv6 interface prefix entry.')
alaIPv6InterfacePrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixRowStatus.setDescription('Used to control the addition and removal of IPv6\n        interface prefixes for Router ADvertisement messages.')
alaIPv6InterfacePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6InterfacePrefix.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefix.setDescription('The prefix associated with this interface.')
alaIPv6InterfacePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: alaIPv6InterfacePrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixLength.setDescription('The length of the prefix in bits.')
alaIPv6InterfacePrefixValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 4), Unsigned32().clone(2592000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetime.setDescription('The value to be placed in the Valid\n        Lifetime in the Prefix Information\n        option, in seconds. The designated value\n        of 4,294,967,295 represents infinity.')
alaIPv6InterfacePrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixOnLinkFlag.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixOnLinkFlag.setDescription('The value to be placed in the on-link\n        flag (L-bit) field in the Prefix\n        Information option.')
alaIPv6InterfacePrefixPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 6), Unsigned32().clone(604800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetime.setDescription('The value to be placed in the Preferred\n        Lifetime in the Prefix Information\n        option, in seconds. The designated value\n        of 4,294,967,295 represents infinity.')
alaIPv6InterfacePrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixAutonomousFlag.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixAutonomousFlag.setDescription('The value to be placed in the Autonomous\n        Flag field in the Prefix Information\n        option.')
alaIPv6InterfacePrefixSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("configured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixSource.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixSource.setDescription('The source of this prefix. If configured by\n        management the value will be configured(3). If\n        determined automatically from IPv6 interface\n        address configuration the value will be\n        dynamic(2).')
alaIPv6InterfacePrefixValidLifetimeDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetimeDecrement.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetimeDecrement.setDescription('If true, use the remaining seconds derived from\n        alaIPv6InterfacePrefixValidLifetime in the\n        Router Advertisement. If false, use the static value\n        alaIPv6InterfacePrefixValidLifetime.')
alaIPv6InterfacePrefixValidLifetimeExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 10), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetimeExpire.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixValidLifetimeExpire.setDescription('The date and time when the advertised prefix Valid Lifetime\n     expires. To use this value,\n     alaIPv6InterfaceValidLifetimeDecrement must be set to true.')
alaIPv6InterfacePrefixPreferredLifetimeDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetimeDecrement.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetimeDecrement.setDescription('If true, use the remaining seconds derived from\n        alaIPv6InterfacePrefixPreferredLifetime in the\n        Router Advertisement. If false, use the static value\n        alaIPv6InterfacePrefixPreferredLifetime.')
alaIPv6InterfacePrefixPreferredLifetimeExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 9, 1, 12), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetimeExpire.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixPreferredLifetimeExpire.setDescription('The date and time when the advertised prefix Preferred Lifetime\n     expires. To use this value,\n     alaIPv6InterfacePreferredLifetimeDecrement must be set to true.')
alaIPv6PMTUTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10), )
if mibBuilder.loadTexts: alaIPv6PMTUTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUTable.setDescription('Table allowing the retrieval of the known IPv6\n         path MTU value.')
alaIPv6PMTUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUDest"))
if mibBuilder.loadTexts: alaIPv6PMTUEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUEntry.setDescription('An IPv6 path MTU entry.')
alaIPv6PMTUDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIPv6PMTUDest.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUDest.setDescription('The destination address of the IPv6 path.')
alaIPv6PMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6PMTU.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTU.setDescription("The path's MTU.")
alaIPv6PMTUExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6PMTUExpire.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUExpire.setDescription('The minimum time remaining before the PMTU entry is\n        removed from the table.')
alaIPv6PMTUHits = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6PMTUHits.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUHits.setDescription('The number of times the path MTU entry has been used.')
alaIPv6PMTUUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6PMTUUpdates.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUUpdates.setDescription('The number of times the path MTU entry has been updated.')
alaIPv6RouteFlagsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11), )
if mibBuilder.loadTexts: alaIPv6RouteFlagsTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsTable.setDescription('Table allowing the retrieval of the flags for\n        IPv6 route entries.')
alaIPv6RouteFlagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1), )
ipv6RouteEntry.registerAugmentions(("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsEntry"))
alaIPv6RouteFlagsEntry.setIndexNames(*ipv6RouteEntry.getIndexNames())
if mibBuilder.loadTexts: alaIPv6RouteFlagsEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsEntry.setDescription('An IPV6 route flags entry.')
alaIPv6RouteFlagsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsUp.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsUp.setDescription('True if the Up (U) flag is set on the route.')
alaIPv6RouteFlagsGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsGateway.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsGateway.setDescription('True if the Gateway (G) flag is set on the route.')
alaIPv6RouteFlagsHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsHost.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsHost.setDescription('True if the Host (H) flag is set on the route.')
alaIPv6RouteFlagsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsStatic.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsStatic.setDescription('True if the Static (S) flag is set on the route.')
alaIPv6RouteFlagsCloneable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsCloneable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsCloneable.setDescription('True if the Cloneable (C) flag is set on the route.')
alaIPv6RouteFlagsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsDiscard.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsDiscard.setDescription('True if the Discard/Blackhole (B) flag is set on the route.')
alaIPv6RouteFlagsECMP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsECMP.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsECMP.setDescription('True if the ECMP (E) flag is set on the route.')
alaIPv6RouteFlagsTransient = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIPv6RouteFlagsTransient.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsTransient.setDescription('True if route has not been replaced by valid route after takeover.')
alaIPv6LocalUnicastTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13), )
if mibBuilder.loadTexts: alaIPv6LocalUnicastTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastTable.setDescription('Table allowing the creation and removal of local IPv6\n      unicast addresses (RFC 4193) on an interface.')
alaIPv6LocalUnicastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastGlobalID"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastSubnetID"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastInterfaceID"))
if mibBuilder.loadTexts: alaIPv6LocalUnicastEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastEntry.setDescription('An local unicast IPv6 address entry.')
alaIPv6LocalUnicastGlobalID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5))
if mibBuilder.loadTexts: alaIPv6LocalUnicastGlobalID.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastGlobalID.setDescription('The global ID portion of the local IPv6 unicast address.  Leave\n      the value as all zero when adding a new addres to use the\n      alaIPv6GlobalID value.')
alaIPv6LocalUnicastSubnetID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2))
if mibBuilder.loadTexts: alaIPv6LocalUnicastSubnetID.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastSubnetID.setDescription('The subnet ID portion of the local IPv6 unicast address.')
alaIPv6LocalUnicastInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: alaIPv6LocalUnicastInterfaceID.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastInterfaceID.setDescription('The interface identifier portion of the local IPv6 unicast\n      address.  When alaIPv6LocalUnicastEUI64 is true(1) the value\n      of this object should be all zero.')
alaIPv6LocalUnicastPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 128)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6LocalUnicastPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastPrefixLength.setDescription('The number of bits that are significant in the IPv6\n      address prefix.')
alaIPv6LocalUnicastEUI64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6LocalUnicastEUI64.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastEUI64.setDescription('If true(1) the interface identifier is formed from an\n      automatically generated EUI-64 value.')
alaIPv6LocalUnicastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6LocalUnicastRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastRowStatus.setDescription('Used to control the addition and removal of local IPv6\n      unicast addresses.')
alaIPv6RAFilterTrustedPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 15), )
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortTable.setDescription("Table allowing the creation and removal of trusted ports\n      for an interface's RA filtering.\n\n      This table has been superseded by the \n      alaIPv6RAFilterTrustedSourceTable")
alaIPv6RAFilterTrustedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 15, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterTrustedPortIfIndex"))
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortEntry.setDescription('An RA filter trusted port entry.')
alaIPv6RAFilterTrustedPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortIfIndex.setDescription('The ifIndex of a trusted physical port or link aggregation.')
alaIPv6RAFilterTrustedPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedPortRowStatus.setDescription("Used to control the addition and removal of an RA filter's\n         trusted ports.")
alaIPv6RAFilterInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 16), )
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceTable.setDescription('Table to control operation of RA Filtering on a VLAN.')
alaIPv6RAFilterInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterInterfaceVlan"))
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceEntry.setDescription('An RA filter interface entry.')
alaIPv6RAFilterInterfaceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceVlan.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceVlan.setDescription('The ID of the VLAN on which RA Filtering is to be configured.')
alaIPv6RAFilterInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceAdminStatus.setDescription('RA filtering administrative status.')
alaIPv6RAFilterInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 16, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterInterfaceRowStatus.setDescription("Used to control the addition and removal of an interface's\n         RA filter configuration.")
alaIPv6RAFilterTrustedSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 17), )
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceTable.setDescription("Table allowing the creation and removal of trusted sources\n      for a VLAN's RA filtering.")
alaIPv6RAFilterTrustedSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterInterfaceVlan"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterTrustedSourceType"), (0, "ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterTrustedSourceValue"))
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceEntry.setDescription('An RA filter trusted source entry.')
alaIPv6RAFilterTrustedSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 17, 1, 1), AlaIPv6RAFilterTrustedSourceType())
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceType.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceType.setDescription('The type of the trusted source selector.')
alaIPv6RAFilterTrustedSourceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 17, 1, 2), AlaIPv6RAFilterTrustedSourceValue())
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceValue.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceValue.setDescription("The trusted source selector's value.")
alaIPv6RAFilterTrustedSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 1, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterTrustedSourceRowStatus.setDescription('Used to control the addition and removal of a trusted source entry.')
ndpMaxLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 0, 1))
if mibBuilder.loadTexts: ndpMaxLimitReached.setStatus('deprecated')
if mibBuilder.loadTexts: ndpMaxLimitReached.setDescription(' This notification is generated when hardware table has reached supported\n             Maximum entries. OS6400 will not generate new ARP request for new nexthops')
alaIPv6NeighborLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 0, 2)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborLimit"))
if mibBuilder.loadTexts: alaIPv6NeighborLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborLimitExceeded.setDescription('Notification that the system-wide neighbor cache limit\n        has been exceeded.')
alaIPv6NeighborVRFLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 0, 3)).setObjects(("ALCATEL-IND1-VIRTUALROUTER-MIB", "alaVirtualRouterName"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborVRFLimit"))
if mibBuilder.loadTexts: alaIPv6NeighborVRFLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborVRFLimitExceeded.setDescription('Notification that a per-VRF neighbor cache limit\n        has been exceeded.')
alaIPv6InterfaceNeighborLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 0, 4)).setObjects(("IPV6-MIB", "ipv6IfIndex"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceNeighborLimit"))
if mibBuilder.loadTexts: alaIPv6InterfaceNeighborLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceNeighborLimitExceeded.setDescription('Notification that a per-interface neighbor cache limit\n        has been exceeded.')
alcatelIND1IPv6MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2))
alcatelIND1IPv6MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 1))
alcatelIND1IPv6MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2))
alaIPv6Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6TunnelConfigGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6ConfigGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddressGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceEUI64AddressGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastGroup"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6Compliance = alaIPv6Compliance.setStatus('current')
if mibBuilder.loadTexts: alaIPv6Compliance.setDescription('The compliance statement for switches with Alcatel IPv6 stack and\n        implementing ALCATEL-IND1-IPV6-MIB.')
alaIPv6TunnelConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6ConfigTunnelV4Source"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6ConfigTunnelV4Dest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6TunnelConfigGroup = alaIPv6TunnelConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6TunnelConfigGroup.setDescription('A collection of objects to support management of Alcatel IPv6\n        tunneling.')
alaIPv6ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6ClearNeighbors"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6ClearTraffic"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6ClearPMTUTable"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUMinLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborStaleLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6GlobalID"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6VirtualSourceMAC"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborLimit"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborVRFLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6ConfigGroup = alaIPv6ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6ConfigGroup.setDescription('A collection of objects to support management of configuration\n        parameters of Alcatel IPv6 stack.')
alaIPv6NeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborPhysAddress"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborType"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborLastUpdated"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborReachability"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6NeighborGroup = alaIPv6NeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6NeighborGroup.setDescription('A collection of objects to support management of IPv6\n        neighbors.')
alaIPv6StaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRouteIfIndex"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRouteNextHop"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRouteMetric"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6StaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6StaticRouteGroup = alaIPv6StaticRouteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alaIPv6StaticRouteGroup.setDescription('A collection of objects to support management of IPv6\n        static routes.')
alaIPv6InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceDescription"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceMtu"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceType"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdminStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceSendRouterAdvertisements"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceMaxRtrAdvInterval"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvManagedFlag"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvOtherConfigFlag"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvReachableTime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvRetransTimer"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvDefaultLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceName"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvSendMtu"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceReachableTime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceBaseReachableTime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceMinRtrAdvInterval"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceClockSkew"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRetransTimer"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceDADTransmits"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAdvHopLimit"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceLPND"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceNeighborLimit"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRetransBackoff"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRetransMax"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRouterPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6InterfaceGroup = alaIPv6InterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceGroup.setDescription('A collection of objects to support management of IPv6\n        interfaces.')
alaIPv6InterfaceAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddressRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddressPrefixLength"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddressAnycastFlag"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceAddressDADStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6InterfaceAddressGroup = alaIPv6InterfaceAddressGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceAddressGroup.setDescription('A collection of objects to support management of IPv6\n        addresses assigned to interfaces.')
alaIPv6InterfaceEUI64AddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceEUI64AddressRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceEUI64AddressPrefixLength"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceEUI64AddressIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6InterfaceEUI64AddressGroup = alaIPv6InterfaceEUI64AddressGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfaceEUI64AddressGroup.setDescription('A collection of objects to support management of IPv6\n        EUI-64 addresses assigned to interfaces.')
alaIPv6InterfacePrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixValidLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixOnLinkFlag"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixPreferredLifetime"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixAutonomousFlag"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixSource"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixValidLifetimeDecrement"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixValidLifetimeExpire"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixPreferredLifetimeDecrement"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfacePrefixPreferredLifetimeExpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6InterfacePrefixGroup = alaIPv6InterfacePrefixGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6InterfacePrefixGroup.setDescription('A collection of objects to support management of IPv6\n        prefixes assigned to interfaces.')
alaIPv6PMTUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTU"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUExpire"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUHits"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6PMTUUpdates"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6PMTUGroup = alaIPv6PMTUGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6PMTUGroup.setDescription('A collection of objects to support management of IPv6\n        path MTUs.')
alaIPv6RouteFlagsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsUp"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsGateway"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsHost"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsStatic"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsCloneable"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsDiscard"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsECMP"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RouteFlagsTransient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6RouteFlagsGroup = alaIPv6RouteFlagsGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RouteFlagsGroup.setDescription('A collection of objects to support management of IPv6\n        route flags.')
alaIPv6LocalUnicastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastPrefixLength"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastEUI64"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6LocalUnicastRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6LocalUnicastGroup = alaIPv6LocalUnicastGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6LocalUnicastGroup.setDescription('A collection of objects to support management of\n        local IPv6 unicast addresses (RFC 4193).')
alaIPv6HostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6HostRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6HostGroup = alaIPv6HostGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6HostGroup.setDescription('A collection of objects to support management of IPv6\n        addresses assigned to Host.')
alcatelIND1IPv6NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborLimitExceeded"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborVRFLimitExceeded"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceNeighborLimitExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPv6NotificationGroup = alcatelIND1IPv6NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPv6NotificationGroup.setDescription('The AlcatelIND1IPv6 MIB Notification Group.')
alcatelIND1IPv6DeprecatedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 14)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborSlot"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborPort"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborState"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6NeighborChassis"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6InterfaceRAFilter"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterTrustedPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPv6DeprecatedObjectGroup = alcatelIND1IPv6DeprecatedObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPv6DeprecatedObjectGroup.setDescription('Deprecated/obsolete objects')
alcatelIND1IPv6DeprecatedNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 15)).setObjects(("ALCATEL-IND1-IPV6-MIB", "ndpMaxLimitReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPv6DeprecatedNotificationGroup = alcatelIND1IPv6DeprecatedNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPv6DeprecatedNotificationGroup.setDescription('Deprecated/obsolete notifications')
alaIPv6RAFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 1, 2, 2, 16)).setObjects(("ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterInterfaceAdminStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterInterfaceRowStatus"), ("ALCATEL-IND1-IPV6-MIB", "alaIPv6RAFilterTrustedSourceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIPv6RAFilterGroup = alaIPv6RAFilterGroup.setStatus('current')
if mibBuilder.loadTexts: alaIPv6RAFilterGroup.setDescription('A collection of objects to support management of\n        RA filtering.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPV6-MIB", alaIPv6InterfaceSendRouterAdvertisements=alaIPv6InterfaceSendRouterAdvertisements, alaIPv6NeighborState=alaIPv6NeighborState, alaIPv6RouteFlagsEntry=alaIPv6RouteFlagsEntry, alaIPv6TunnelConfigGroup=alaIPv6TunnelConfigGroup, alaIPv6InterfaceRouterPreference=alaIPv6InterfaceRouterPreference, alaIPv6RAFilterTrustedSourceType=alaIPv6RAFilterTrustedSourceType, alaIPv6StaticRouteMetric=alaIPv6StaticRouteMetric, alaIPv6StaticRoutePfxLength=alaIPv6StaticRoutePfxLength, alaIPv6HostName=alaIPv6HostName, alaIPv6InterfacePrefixTable=alaIPv6InterfacePrefixTable, alaIPv6RAFilterInterfaceRowStatus=alaIPv6RAFilterInterfaceRowStatus, alcatelIND1IPv6MIB=alcatelIND1IPv6MIB, alaIPv6ClearTraffic=alaIPv6ClearTraffic, alaIPv6HostRowStatus=alaIPv6HostRowStatus, alaIPv6InterfaceAddressDADStatus=alaIPv6InterfaceAddressDADStatus, alaIPv6InterfaceEUI64AddressRowStatus=alaIPv6InterfaceEUI64AddressRowStatus, alaIPv6NeighborVRFLimit=alaIPv6NeighborVRFLimit, alaIPv6PMTUMinLifetime=alaIPv6PMTUMinLifetime, alaIPv6InterfaceAddressPrefixLength=alaIPv6InterfaceAddressPrefixLength, alaIPv6PMTUTable=alaIPv6PMTUTable, alaIPv6HostGroup=alaIPv6HostGroup, alaIPv6RAFilterInterfaceVlan=alaIPv6RAFilterInterfaceVlan, alaIPv6ConfigTunnelV4Source=alaIPv6ConfigTunnelV4Source, alaIPv6RAFilterTrustedPortIfIndex=alaIPv6RAFilterTrustedPortIfIndex, alaIPv6InterfaceClockSkew=alaIPv6InterfaceClockSkew, alaIPv6RAFilterTrustedSourceTable=alaIPv6RAFilterTrustedSourceTable, alaIPv6InterfacePrefixGroup=alaIPv6InterfacePrefixGroup, alaIPv6InterfaceDescription=alaIPv6InterfaceDescription, alaIPv6NeighborPortIfIndex=alaIPv6NeighborPortIfIndex, alaIPv6InterfacePrefixValidLifetime=alaIPv6InterfacePrefixValidLifetime, alaIPv6HostTable=alaIPv6HostTable, alaIPv6InterfaceAdminStatus=alaIPv6InterfaceAdminStatus, AlaIPv6RAFilterTrustedSourceType=AlaIPv6RAFilterTrustedSourceType, alaIPv6PMTUExpire=alaIPv6PMTUExpire, alaIPv6InterfaceRAFilter=alaIPv6InterfaceRAFilter, alaIPv6NeighborPort=alaIPv6NeighborPort, alaIPv6NeighborSlot=alaIPv6NeighborSlot, alaIPv6NeighborLimitExceeded=alaIPv6NeighborLimitExceeded, alaIPv6PMTU=alaIPv6PMTU, alaIPv6RAFilterTrustedSourceRowStatus=alaIPv6RAFilterTrustedSourceRowStatus, alaIPv6StaticRouteRowStatus=alaIPv6StaticRouteRowStatus, ndpMaxLimitReached=ndpMaxLimitReached, alaIPv6LocalUnicastEntry=alaIPv6LocalUnicastEntry, alaIPv6NeighborPhysAddress=alaIPv6NeighborPhysAddress, alaIPv6InterfacePrefixPreferredLifetimeDecrement=alaIPv6InterfacePrefixPreferredLifetimeDecrement, alaIPv6InterfaceEUI64AddressGroup=alaIPv6InterfaceEUI64AddressGroup, alaIPv6RAFilterInterfaceEntry=alaIPv6RAFilterInterfaceEntry, alaIPv6InterfaceEUI64AddressPrefixLength=alaIPv6InterfaceEUI64AddressPrefixLength, alaIPv6RouteFlagsECMP=alaIPv6RouteFlagsECMP, alaIPv6LocalUnicastGlobalID=alaIPv6LocalUnicastGlobalID, alaIPv6InterfacePrefixPreferredLifetime=alaIPv6InterfacePrefixPreferredLifetime, alaIPv6PMTUGroup=alaIPv6PMTUGroup, alaIPv6NeighborReachability=alaIPv6NeighborReachability, alaIPv6InterfacePrefixLength=alaIPv6InterfacePrefixLength, alaIPv6HostEntry=alaIPv6HostEntry, alaIPv6RAFilterGroup=alaIPv6RAFilterGroup, alaIPv6InterfacePrefixOnLinkFlag=alaIPv6InterfacePrefixOnLinkFlag, alaIPv6NeighborType=alaIPv6NeighborType, alaIPv6InterfaceRetransMax=alaIPv6InterfaceRetransMax, alcatelIND1IPv6MIBGroups=alcatelIND1IPv6MIBGroups, alaIPv6RAFilterTrustedSourceEntry=alaIPv6RAFilterTrustedSourceEntry, alaIPv6InterfaceAdvReachableTime=alaIPv6InterfaceAdvReachableTime, alaIPv6RouteFlagsTransient=alaIPv6RouteFlagsTransient, alaIPv6RouteFlagsGroup=alaIPv6RouteFlagsGroup, alaIPv6NeighborLastUpdated=alaIPv6NeighborLastUpdated, alaIPv6InterfacePrefixRowStatus=alaIPv6InterfacePrefixRowStatus, alcatelIND1IPv6MIBNotifications=alcatelIND1IPv6MIBNotifications, alaIPv6NeighborVRFLimitExceeded=alaIPv6NeighborVRFLimitExceeded, alaIPv6InterfaceAddressTable=alaIPv6InterfaceAddressTable, alaIPv6InterfaceAddressAnycastFlag=alaIPv6InterfaceAddressAnycastFlag, alaIPv6RAFilterTrustedPortEntry=alaIPv6RAFilterTrustedPortEntry, alaIPv6InterfaceNeighborLimitExceeded=alaIPv6InterfaceNeighborLimitExceeded, alaIPv6InterfaceMaxRtrAdvInterval=alaIPv6InterfaceMaxRtrAdvInterval, alaIPv6InterfaceGroup=alaIPv6InterfaceGroup, alaIPv6RouteFlagsHost=alaIPv6RouteFlagsHost, alaIPv6InterfaceEUI64AddressPrefix=alaIPv6InterfaceEUI64AddressPrefix, alaIPv6PMTUDest=alaIPv6PMTUDest, alaIPv6InterfacePrefixEntry=alaIPv6InterfacePrefixEntry, alaIPv6LocalUnicastTable=alaIPv6LocalUnicastTable, alaIPv6PMTUEntry=alaIPv6PMTUEntry, alaIPv6InterfaceLPND=alaIPv6InterfaceLPND, alaIPv6InterfaceName=alaIPv6InterfaceName, AlaIPv6RAFilterTrustedSourceValue=AlaIPv6RAFilterTrustedSourceValue, alcatelIND1IPv6MIBObjects=alcatelIND1IPv6MIBObjects, alaIPv6RAFilterTrustedPortTable=alaIPv6RAFilterTrustedPortTable, alcatelIND1IPv6DeprecatedObjectGroup=alcatelIND1IPv6DeprecatedObjectGroup, alaIPv6InterfaceAdvManagedFlag=alaIPv6InterfaceAdvManagedFlag, alaIPv6InterfaceDADTransmits=alaIPv6InterfaceDADTransmits, alaIPv6RouteFlagsDiscard=alaIPv6RouteFlagsDiscard, alaIPv6InterfacePrefix=alaIPv6InterfacePrefix, alcatelIND1IPv6MIBCompliances=alcatelIND1IPv6MIBCompliances, AlaIPv6AddressPrefix=AlaIPv6AddressPrefix, alaIPv6ConfigGroup=alaIPv6ConfigGroup, alaIPv6ClearPMTUTable=alaIPv6ClearPMTUTable, alaIPv6NeighborRowStatus=alaIPv6NeighborRowStatus, alaIPv6InterfaceMtu=alaIPv6InterfaceMtu, alaIPv6ConfigTunnelTable=alaIPv6ConfigTunnelTable, alaIPv6NeighborChassis=alaIPv6NeighborChassis, alaIPv6NeighborGroup=alaIPv6NeighborGroup, alaIPv6InterfaceTable=alaIPv6InterfaceTable, alaIPv6InterfacePrefixValidLifetimeExpire=alaIPv6InterfacePrefixValidLifetimeExpire, alaIPv6NeighborEntry=alaIPv6NeighborEntry, alaIPv6InterfacePrefixPreferredLifetimeExpire=alaIPv6InterfacePrefixPreferredLifetimeExpire, alaIPv6LocalUnicastSubnetID=alaIPv6LocalUnicastSubnetID, alaIPv6InterfaceEntry=alaIPv6InterfaceEntry, alaIPv6InterfaceNeighborLimit=alaIPv6InterfaceNeighborLimit, alaIPv6StaticRouteDest=alaIPv6StaticRouteDest, alaIPv6NeighborNetAddress=alaIPv6NeighborNetAddress, alaIPv6StaticRouteTable=alaIPv6StaticRouteTable, alaIPv6InterfaceAdvSendMtu=alaIPv6InterfaceAdvSendMtu, alcatelIND1IPv6DeprecatedNotificationGroup=alcatelIND1IPv6DeprecatedNotificationGroup, alaIPv6InterfaceAdvRetransTimer=alaIPv6InterfaceAdvRetransTimer, alaIPv6NeighborStaleLifetime=alaIPv6NeighborStaleLifetime, alaIPv6InterfaceRetransBackoff=alaIPv6InterfaceRetransBackoff, alaIPv6ConfigTunnelV4Dest=alaIPv6ConfigTunnelV4Dest, alaIPv6LocalUnicastGroup=alaIPv6LocalUnicastGroup, alaIPv6TunnelConfig=alaIPv6TunnelConfig, AlaIPv6RAFilterTrustedSourceIfIndex=AlaIPv6RAFilterTrustedSourceIfIndex, alaIPv6ClearNeighbors=alaIPv6ClearNeighbors, alaIPv6InterfaceAddress=alaIPv6InterfaceAddress, alaIPv6LocalUnicastEUI64=alaIPv6LocalUnicastEUI64, alaIPv6InterfaceEUI64AddressIdentifier=alaIPv6InterfaceEUI64AddressIdentifier, alaIPv6InterfaceEUI64AddressTable=alaIPv6InterfaceEUI64AddressTable, alaIPv6RouteFlagsGateway=alaIPv6RouteFlagsGateway, alaIPv6LocalUnicastRowStatus=alaIPv6LocalUnicastRowStatus, alaIPv6NeighborLifetime=alaIPv6NeighborLifetime, alaIPv6InterfacePrefixAutonomousFlag=alaIPv6InterfacePrefixAutonomousFlag, alaIPv6NeighborLimit=alaIPv6NeighborLimit, alaIPv6InterfaceType=alaIPv6InterfaceType, alaIPv6InterfaceAddressGroup=alaIPv6InterfaceAddressGroup, alaIPv6InterfaceEUI64AddressEntry=alaIPv6InterfaceEUI64AddressEntry, alaIPv6InterfaceAdvDefaultLifetime=alaIPv6InterfaceAdvDefaultLifetime, alaIPv6NeighborTable=alaIPv6NeighborTable, alaIPv6InterfaceRowStatus=alaIPv6InterfaceRowStatus, alaIPv6LocalUnicastPrefixLength=alaIPv6LocalUnicastPrefixLength, alaIPv6RAFilterTrustedSourceValue=alaIPv6RAFilterTrustedSourceValue, PYSNMP_MODULE_ID=alcatelIND1IPv6MIB, alaIPv6PMTUUpdates=alaIPv6PMTUUpdates, alaIPv6InterfaceBaseReachableTime=alaIPv6InterfaceBaseReachableTime, alaIPv6InterfaceAdvOtherConfigFlag=alaIPv6InterfaceAdvOtherConfigFlag, alaIPv6Compliance=alaIPv6Compliance, alaIPv6StaticRouteGroup=alaIPv6StaticRouteGroup, alaIPv6ConfigTunnelEntry=alaIPv6ConfigTunnelEntry, alaIPv6RouteFlagsUp=alaIPv6RouteFlagsUp, alcatelIND1IPv6MIBConformance=alcatelIND1IPv6MIBConformance, alcatelIND1IPv6NotificationGroup=alcatelIND1IPv6NotificationGroup, alaIPv6InterfacePrefixSource=alaIPv6InterfacePrefixSource, alaIPv6InterfaceReachableTime=alaIPv6InterfaceReachableTime, alaIPv6StaticRouteEntry=alaIPv6StaticRouteEntry, alaIPv6RAFilterTrustedPortRowStatus=alaIPv6RAFilterTrustedPortRowStatus, alaIPv6InterfaceAddressRowStatus=alaIPv6InterfaceAddressRowStatus, alaIPv6RouteFlagsCloneable=alaIPv6RouteFlagsCloneable, alaIPv6Config=alaIPv6Config, alaIPv6VirtualSourceMAC=alaIPv6VirtualSourceMAC, alaIPv6RouteFlagsTable=alaIPv6RouteFlagsTable, alaIPv6InterfaceAddressEntry=alaIPv6InterfaceAddressEntry, alaIPv6PMTUHits=alaIPv6PMTUHits, alaIPv6InterfacePrefixValidLifetimeDecrement=alaIPv6InterfacePrefixValidLifetimeDecrement, alaIPv6RAFilterInterfaceAdminStatus=alaIPv6RAFilterInterfaceAdminStatus, alaIPv6StaticRouteNextHop=alaIPv6StaticRouteNextHop, alaIPv6HostAddress=alaIPv6HostAddress, alaIPv6GlobalID=alaIPv6GlobalID, alaIPv6RAFilterInterfaceTable=alaIPv6RAFilterInterfaceTable, alaIPv6InterfaceRetransTimer=alaIPv6InterfaceRetransTimer, alaIPv6RouteFlagsStatic=alaIPv6RouteFlagsStatic, alaIPv6InterfaceAdvHopLimit=alaIPv6InterfaceAdvHopLimit, alaIPv6InterfaceMinRtrAdvInterval=alaIPv6InterfaceMinRtrAdvInterval, alaIPv6LocalUnicastInterfaceID=alaIPv6LocalUnicastInterfaceID, alaIPv6StaticRouteIfIndex=alaIPv6StaticRouteIfIndex)
