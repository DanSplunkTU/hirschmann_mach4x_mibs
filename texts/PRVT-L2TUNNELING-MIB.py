#
# PySNMP MIB module PRVT-L2TUNNELING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-L2TUNNELING-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 21:19:51 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
sdpEntry, sapEntry = mibBuilder.importSymbols("PRVT-SERV-MIB", "sdpEntry", "sapEntry")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "serviceAccessSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, iso, TimeTicks, NotificationType, Integer32, Unsigned32, Bits, MibIdentifier, Gauge32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "iso", "TimeTicks", "NotificationType", "Integer32", "Unsigned32", "Bits", "MibIdentifier", "Gauge32", "ModuleIdentity", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
prvtL2TunnelingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 7, 3))
prvtL2TunnelingMIB.setRevisions(('2010-01-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtL2TunnelingMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setLastUpdated('201001290000Z')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setDescription('This document is the SNMP MIB module to manage the\n         layer two tunneling feature, designed for service providers.')
class PrvtL2TunnelProfileNameTC(TextualConvention, OctetString):
    description = 'The name of a tunneling profile.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtL2TunnelProfileNameOrNoneTC(TextualConvention, OctetString):
    description = 'Same as PrvtL2TunnelProfileNameTC except that a zero\n         length octet string represents no profile has been assigned.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

prvtL2TunnelingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1))
prvtL2TunnEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnEnable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnEnable.setDescription('Enable/Disable L2 Tunneling feature')
prvtL2TunnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 2), )
if mibBuilder.loadTexts: prvtL2TunnProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileTable.setDescription('A table that contains all predefined and defined profiles.')
prvtL2TunnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 2, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"))
if mibBuilder.loadTexts: prvtL2TunnProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileEntry.setDescription('An entry in this table contains a TLS tunneling profile')
prvtL2TunnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 2, 1, 1), PrvtL2TunnelProfileNameTC())
if mibBuilder.loadTexts: prvtL2TunnProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileName.setDescription('TLS profile name.\n         There are three predefined profiles:\n         - discard-all\n         - tunnel-bdpu\n         - tunnel-all')
prvtL2TunnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileRowStatus.setDescription('TLS profile rowStatus. It is not possible to\n         modify the predefined profiles.')
prvtL2ProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3), )
if mibBuilder.loadTexts: prvtL2ProtocolsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolsTable.setDescription('A table that contains all predefined and\n         custom defined L2 Protocols')
prvtL2ProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2ProtocolsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolsEntry.setDescription('An entry in prvtL2ProtocolsTable.')
prvtL2ProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: prvtL2ProtocolName.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolName.setDescription('L2 Protocol Name.\n         The following protocol names are pre-defined:\n         - stp\n         - lacp\n         - efm-oam\n         - dot1x\n         - e-lmi\n         - lldp\n         - other   (All other bridge block of protocols)\n         - all-brs (All Bridges)\n         - garp    (GARP Block of Protocols)\n         - pb-stp  (Provider Bridge STP)\n         - pvst    (Per-VLAN STP)')
prvtL2ProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolRowStatus.setDescription('RowStatus used to create/delete custom protocols.\n         It is not possible to modify the predefined protocols.')
prvtL2ProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolEthertype.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolEthertype.setDescription('The protocol Ethertype.')
prvtL2ProtocolMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolMAC.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolMAC.setDescription('The protocol multicast MAC address\n         used for PDU distribution.')
prvtL2ReplaceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ReplaceMAC.setStatus('current')
if mibBuilder.loadTexts: prvtL2ReplaceMAC.setDescription('The replacement multicast MAC address.')
prvtL2TunnProfMapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 4), )
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoTable.setDescription('A table that contain actions configured\n         for each L2 protocol per TLS tunneling profile.')
prvtL2TunnProfMapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 4, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoEntry.setDescription('An entry in this table contains the\n         action for the specified profile and L2 protocol')
prvtL2TunnProfMapProtoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoRowStatus.setDescription('Create/delete rows')
prvtL2TunnProfMapProtoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2), ("peer", 3), ("peerAndPass", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoAction.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoAction.setDescription('The action for this TLS tunneled protocol')
prvtL2TunnSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 5), )
if mibBuilder.loadTexts: prvtL2TunnSapTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSapTable.setDescription('A table that contains assignments of profiles to SAPs.')
prvtL2TunnSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 5, 1), )
sapEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSapEntry"))
prvtL2TunnSapEntry.setIndexNames(*sapEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSapEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSapEntry.setDescription('An entry in this table contains information\n         about the mapping between SAP and L2 Tunneling profiles.')
prvtL2TunnSapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 5, 1, 1), PrvtL2TunnelProfileNameOrNoneTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnSapProfile.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSapProfile.setDescription('The profile associated with a SAP point.\n         Setting this object with an empty string\n         will remove a profile from the SAP.')
prvtL2TunnSdpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 6), )
if mibBuilder.loadTexts: prvtL2TunnSdpTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSdpTable.setDescription('A table that contains assignments of profiles to SDPs.')
prvtL2TunnSdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 6, 1), )
sdpEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSdpEntry"))
prvtL2TunnSdpEntry.setIndexNames(*sdpEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSdpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSdpEntry.setDescription('An entry in this table contains information\n         about the mapping between SDP and L2 Tunneling profiles.')
prvtL2TunnSdpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 6, 1, 1), PrvtL2TunnelProfileNameOrNoneTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnSdpProfile.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSdpProfile.setDescription('The profile associated with an SDP point.\n         Setting this object with an empty string\n         will remove a profile from the SDP.')
prvtL2TunnStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8), )
if mibBuilder.loadTexts: prvtL2TunnStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnStatisticsTable.setDescription('A Table that provide statistics for each\n         tunneling point per protocol.')
prvtL2TunnStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnInterfaceName"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnStatisticsEntry.setDescription('An entry in this table contain the number of\n         tunneling RX and TX packets .')
prvtL2TunnInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtL2TunnInterfaceName.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnInterfaceName.setDescription('The interface name.\n         It is held in a string that is represented as follows:\n         SAP  - (U/S/P|ag1-14|ies)[:VlanId[:VlanID]][:igmp]\n         SDP  - (U/S/P:VlanId)|(ServiceId:A.B.C.D)\n         \n         e.g.:\t \n         SAP/SDP  -  1/1/1:22:, 10.1.1.1:10')
prvtL2TunnProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtL2TunnProtocolName.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProtocolName.setDescription('L2 Protocol Name')
prvtL2TunnRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtL2TunnRxPackets.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnRxPackets.setDescription('The number of Rx L2Tunneling packets')
prvtL2TunnTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtL2TunnTxPackets.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnTxPackets.setDescription('The number of Tx L2Tunneling packets')
prvtL2TunnClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnClearStatistics.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnClearStatistics.setDescription('Clear L2Tunneling statistics for each tunneling point')
mibBuilder.exportSymbols("PRVT-L2TUNNELING-MIB", prvtL2ProtocolsEntry=prvtL2ProtocolsEntry, PrvtL2TunnelProfileNameOrNoneTC=PrvtL2TunnelProfileNameOrNoneTC, PYSNMP_MODULE_ID=prvtL2TunnelingMIB, prvtL2TunnProfileRowStatus=prvtL2TunnProfileRowStatus, prvtL2ProtocolMAC=prvtL2ProtocolMAC, prvtL2ReplaceMAC=prvtL2ReplaceMAC, prvtL2TunnSapEntry=prvtL2TunnSapEntry, prvtL2TunnProfMapProtoAction=prvtL2TunnProfMapProtoAction, prvtL2TunnProfileTable=prvtL2TunnProfileTable, prvtL2TunnProfMapProtoEntry=prvtL2TunnProfMapProtoEntry, prvtL2TunnProfileEntry=prvtL2TunnProfileEntry, prvtL2TunnInterfaceName=prvtL2TunnInterfaceName, prvtL2TunnTxPackets=prvtL2TunnTxPackets, prvtL2TunnProfMapProtoRowStatus=prvtL2TunnProfMapProtoRowStatus, prvtL2TunnStatisticsEntry=prvtL2TunnStatisticsEntry, prvtL2TunnProfMapProtoTable=prvtL2TunnProfMapProtoTable, prvtL2TunnSapTable=prvtL2TunnSapTable, prvtL2ProtocolRowStatus=prvtL2ProtocolRowStatus, prvtL2TunnelingMIB=prvtL2TunnelingMIB, prvtL2TunnProtocolName=prvtL2TunnProtocolName, prvtL2TunnSdpEntry=prvtL2TunnSdpEntry, prvtL2ProtocolsTable=prvtL2ProtocolsTable, prvtL2TunnSapProfile=prvtL2TunnSapProfile, prvtL2TunnStatisticsTable=prvtL2TunnStatisticsTable, prvtL2ProtocolName=prvtL2ProtocolName, prvtL2TunnSdpTable=prvtL2TunnSdpTable, prvtL2TunnEnable=prvtL2TunnEnable, prvtL2TunnProfileName=prvtL2TunnProfileName, PrvtL2TunnelProfileNameTC=PrvtL2TunnelProfileNameTC, prvtL2TunnRxPackets=prvtL2TunnRxPackets, prvtL2TunnSdpProfile=prvtL2TunnSdpProfile, prvtL2TunnelingMIBObjects=prvtL2TunnelingMIBObjects, prvtL2ProtocolEthertype=prvtL2ProtocolEthertype, prvtL2TunnClearStatistics=prvtL2TunnClearStatistics)
