#
# PySNMP MIB module PRVT-L2TUNNELING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-L2TUNNELING-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:50:43 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-QOS-MIB", "serviceAccessSwitch")
svcId, sapBaseInfoEntry, sapEncapValue, sdpId, sdpInfoEntry, sapPortId = mibBuilder.importSymbols("PRVT-SERV-MIB", "svcId", "sapBaseInfoEntry", "sapEncapValue", "sdpId", "sdpInfoEntry", "sapPortId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, MibIdentifier, Counter32, NotificationType, TimeTicks, ModuleIdentity, Integer32, Gauge32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Counter32", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "IpAddress")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
prvtL2TunnelingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 3))
prvtL2TunnelingMIB.setRevisions(('2009-10-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtL2TunnelingMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setLastUpdated('200910200000Z')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setContactInfo(' BATM/Telco Systems Support team\nEmail: \nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtL2TunnelingMIB.setDescription('This document is the SNMP MIB module to manage tunneling feature,\n designed for service providers.')
prvtL2TunnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 0))
prvtL2TunnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1))
prvtL2TunnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2))
prvtL2TunnEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnEnable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnEnable.setDescription('Enable/Disable L2Tunneling feature')
prvtL2TunnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2), )
if mibBuilder.loadTexts: prvtL2TunnProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileTable.setDescription('A Table that contain all predefined and defined profiles.')
prvtL2TunnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"))
if mibBuilder.loadTexts: prvtL2TunnProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileEntry.setDescription('An entry in this table contains a TLS tunneling profile')
prvtL2TunnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileName.setDescription('TLS profile name. There will be three special profiles that will represent predefined policies:\n - Discard-All, \n - Tunnel-BPDUs-only \n - Tunnel-All.  ')
prvtL2TunnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2TunnProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileRowStatus.setDescription('TLS profile rowStatus. It is not possible to modify the predefined profiles.')
prvtL2ProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3), )
if mibBuilder.loadTexts: prvtL2ProtocolsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolsTable.setDescription('A table that contain all predefine and custom defined L2Protocols')
prvtL2ProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2ProtocolsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolsEntry.setDescription('An entry is a L2 protocol with the  replacement multicast MAC addresses. ')
prvtL2ProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolName.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolName.setDescription('L2 Protocol Name. There will the follow default protocol:\n - xSTP\n - LACP/LAMP\n - Link OAM (802.3ah)\n - Port Authentication (802.1x)\n - E-LMI\n - LLDP\n - All other bridge block of protocols\n - All Bridges\n - GARP Block of Protocols\n - Provider Bridge STP.')
prvtL2ProtocolEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolEthertype.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolEthertype.setDescription('Protocol Ethertype.')
prvtL2ProtocolMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolMAC.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolMAC.setDescription('The protocol Multicast MAC address used for PDU distribution. ')
prvtL2ReplaceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ReplaceMAC.setStatus('current')
if mibBuilder.loadTexts: prvtL2ReplaceMAC.setDescription('Replacement multicast MAC addresses.')
prvtL2ProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtL2ProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtL2ProtocolRowStatus.setDescription('prvtL2CustomProtocols RowStatus used for CREATE/DELETE the custom protocols.\n It is not possible to modify the predefined protocols.')
prvtL2TunnProfMapProtoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4), )
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoTable.setDescription('A Table that contain actions configured for each L2 protcol per TLS tunneling profile.')
prvtL2TunnProfMapProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4, 1), ).setIndexNames((0, "PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfMapProtoEntry.setDescription('An entry in this table contain th action for specified profile and L2 protocol')
prvtL2TunnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("discard", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnAction.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnAction.setDescription('Define action discard/tunnel per TLS tunneled protocol ')
prvtL2TunnSAPPointsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5), )
if mibBuilder.loadTexts: prvtL2TunnSAPPointsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSAPPointsTable.setDescription('A Table that contain an assigment of a profile to a SAP.')
prvtL2TunnSAPPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5, 1), )
sapBaseInfoEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSAPPointsEntry"))
prvtL2TunnSAPPointsEntry.setIndexNames(*sapBaseInfoEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSAPPointsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSAPPointsEntry.setDescription('An entry in this table contain information about the map between SAP and L2Tunneling profile.')
profileSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileSAP.setStatus('current')
if mibBuilder.loadTexts: profileSAP.setDescription('Profile Id associated to a SAP point. \n Setting this object with an empty string will disable the profile.')
prvtL2TunnSDPPointsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6), )
if mibBuilder.loadTexts: prvtL2TunnSDPPointsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSDPPointsTable.setDescription('A Table that contain an assigment of a profile to a SDP.')
prvtL2TunnSDPPointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6, 1), )
sdpInfoEntry.registerAugmentions(("PRVT-L2TUNNELING-MIB", "prvtL2TunnSDPPointsEntry"))
prvtL2TunnSDPPointsEntry.setIndexNames(*sdpInfoEntry.getIndexNames())
if mibBuilder.loadTexts: prvtL2TunnSDPPointsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSDPPointsEntry.setDescription('An entry in this table contain information about the map between SDP and L2Tunneling profile.')
profileSDP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileSDP.setStatus('current')
if mibBuilder.loadTexts: profileSDP.setDescription('Profile Id associated to an SDP point.\n Setting this object with an empty string will disable the profile.')
prvtL2TunnClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtL2TunnClearStatistics.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnClearStatistics.setDescription('Clear L2Tunneling statistics for each tunneling point')
prvtL2TunnSapStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8), )
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsTable.setDescription('A Table that provide statistics  for each tunneling point per protocol.')
prvtL2TunnSapStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSapStatisticsEntry.setDescription('An entry in this table contain the number of SAP tunneling RX and TX packets .')
l2TunnSapRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSapRxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TunnSapRxPackets.setDescription('The number of SAP Rx L2Tunneling packets')
l2TunnSapTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSapTxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TunnSapTxPackets.setDescription('The number of SAP Tx L2Tunneling packets')
prvtL2TunnSdpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9), )
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsTable.setDescription('A Table that provide statistics  for each tunneling point per protocol.')
prvtL2TunnSdpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sdpId"), (0, "PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"))
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnSdpStatisticsEntry.setDescription('An entry in this table contain the number of SDP tunneling RX and TX packets .')
l2TunnSdpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSdpRxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TunnSdpRxPackets.setDescription('The number of SDP Rx L2Tunneling packets')
l2TunnSdpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2TunnSdpTxPackets.setStatus('current')
if mibBuilder.loadTexts: l2TunnSdpTxPackets.setDescription('The number of SDP Tx L2Tunneling packets')
prvtL2TunnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 1))
prvtL2TunnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2))
prvtL2TunnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 1, 1)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnProtocolGroup"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileGroup"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnPointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnCompliance = prvtL2TunnCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnCompliance.setDescription('The compliance statement for L2Tunneling.')
prvtL2TunnProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 1)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolName"), ("PRVT-L2TUNNELING-MIB", "prvtL2ReplaceMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolEthertype"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ReplaceMAC"), ("PRVT-L2TUNNELING-MIB", "prvtL2ProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnProtocolGroup = prvtL2TunnProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProtocolGroup.setDescription('The group of objects regarding Layer 2 protocol  with a special MAC address .')
prvtL2TunnProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 2)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnEnable"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileName"), ("PRVT-L2TUNNELING-MIB", "prvtL2TunnProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnProfileGroup = prvtL2TunnProfileGroup.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnProfileGroup.setDescription('The group of objects used to configure a L2Tunneling profile .')
prvtL2TunnPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 3, 2, 2, 3)).setObjects(("PRVT-L2TUNNELING-MIB", "prvtL2TunnAction"), ("PRVT-L2TUNNELING-MIB", "profileSDP"), ("PRVT-L2TUNNELING-MIB", "profileSAP"), ("PRVT-L2TUNNELING-MIB", "l2TunnSapRxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSapTxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSdpRxPackets"), ("PRVT-L2TUNNELING-MIB", "l2TunnSdpTxPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtL2TunnPointGroup = prvtL2TunnPointGroup.setStatus('current')
if mibBuilder.loadTexts: prvtL2TunnPointGroup.setDescription('The group of objects used L2Tunneling point .')
mibBuilder.exportSymbols("PRVT-L2TUNNELING-MIB", prvtL2TunnSapStatisticsTable=prvtL2TunnSapStatisticsTable, prvtL2TunnConformance=prvtL2TunnConformance, prvtL2ProtocolRowStatus=prvtL2ProtocolRowStatus, l2TunnSapTxPackets=l2TunnSapTxPackets, prvtL2TunnSAPPointsEntry=prvtL2TunnSAPPointsEntry, l2TunnSapRxPackets=l2TunnSapRxPackets, prvtL2TunnCompliances=prvtL2TunnCompliances, prvtL2TunnSDPPointsTable=prvtL2TunnSDPPointsTable, prvtL2TunnProfileGroup=prvtL2TunnProfileGroup, l2TunnSdpRxPackets=l2TunnSdpRxPackets, profileSAP=profileSAP, prvtL2TunnClearStatistics=prvtL2TunnClearStatistics, prvtL2TunnProfMapProtoEntry=prvtL2TunnProfMapProtoEntry, prvtL2ProtocolEthertype=prvtL2ProtocolEthertype, prvtL2TunnSdpStatisticsEntry=prvtL2TunnSdpStatisticsEntry, prvtL2TunnProfileName=prvtL2TunnProfileName, prvtL2TunnProtocolGroup=prvtL2TunnProtocolGroup, prvtL2TunnSDPPointsEntry=prvtL2TunnSDPPointsEntry, prvtL2TunnNotifications=prvtL2TunnNotifications, prvtL2TunnSAPPointsTable=prvtL2TunnSAPPointsTable, prvtL2TunnSdpStatisticsTable=prvtL2TunnSdpStatisticsTable, prvtL2TunnProfileEntry=prvtL2TunnProfileEntry, l2TunnSdpTxPackets=l2TunnSdpTxPackets, prvtL2TunnObjects=prvtL2TunnObjects, profileSDP=profileSDP, prvtL2ProtocolName=prvtL2ProtocolName, prvtL2TunnPointGroup=prvtL2TunnPointGroup, prvtL2TunnProfileRowStatus=prvtL2TunnProfileRowStatus, prvtL2ReplaceMAC=prvtL2ReplaceMAC, prvtL2TunnGroups=prvtL2TunnGroups, prvtL2TunnCompliance=prvtL2TunnCompliance, prvtL2TunnEnable=prvtL2TunnEnable, prvtL2ProtocolMAC=prvtL2ProtocolMAC, prvtL2ProtocolsTable=prvtL2ProtocolsTable, prvtL2TunnProfileTable=prvtL2TunnProfileTable, PYSNMP_MODULE_ID=prvtL2TunnelingMIB, prvtL2ProtocolsEntry=prvtL2ProtocolsEntry, prvtL2TunnelingMIB=prvtL2TunnelingMIB, prvtL2TunnSapStatisticsEntry=prvtL2TunnSapStatisticsEntry, prvtL2TunnAction=prvtL2TunnAction, prvtL2TunnProfMapProtoTable=prvtL2TunnProfMapProtoTable)
