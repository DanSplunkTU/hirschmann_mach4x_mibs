#
# PySNMP MIB module NSCRTV-EXTENSION-GY (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-EXTENSION-GY
# Produced by pysmi-1.1.3 at Wed Dec  1 16:53:00 2021
# On host fv-az36-754 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysObjectID, sysLocation, sysName, system = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID", "sysLocation", "sysName", "system")
Unsigned32, MibIdentifier, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ModuleIdentity, Integer32, TimeTicks, Gauge32, NotificationType, ObjectIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks", "Gauge32", "NotificationType", "ObjectIdentity", "iso", "Bits")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
gyEntry = MibIdentifier((1, 3, 6, 1, 2, 1, 1, 1000))
gyCommon = MibIdentifier((1, 3, 6, 1, 2, 1, 1, 1000, 1))
gyTrapVersion = MibScalar((1, 3, 6, 1, 2, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("TRAPv1", 0), ("TRAPv2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gyTrapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gyTrapVersion.setDescription('лSNMPTRAP汾')
gyAgentStpVersion = MibScalar((1, 3, 6, 1, 2, 1, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gyAgentStpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: gyAgentStpVersion.setDescription('STPЭ汾š')
gyUpdateIdentifier = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gyUpdateIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: gyUpdateIdentifier.setDescription('ʶ')
gyTrapVariables = MibIdentifier((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99))
gyhbMacAddress = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 1), PhysAddress())
if mibBuilder.loadTexts: gyhbMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbMacAddress.setDescription('豸ַӳ䵽commonPhysAddressڵ㡣')
gyhbIpAddress = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 2), IpAddress())
if mibBuilder.loadTexts: gyhbIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbIpAddress.setDescription('豸IPַӳ䵽commonNetworkAddressڵ㡣')
gyhbLogicalID = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 3), DisplayString())
if mibBuilder.loadTexts: gyhbLogicalID.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbLogicalID.setDescription('豸ıʶӳ䵽commonNELogicalIDڵ㡣')
gyhbModelNumber = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 4), DisplayString())
if mibBuilder.loadTexts: gyhbModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbModelNumber.setDescription('豸ĲƷͺţӳ䵽commonNEModelNumberڵ㡣')
gyhbSerialNumber = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 5), DisplayString())
if mibBuilder.loadTexts: gyhbSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbSerialNumber.setDescription('豸ĲƷкţӳ䵽commonNESerialNumberڵ㡣')
gyhbROCommunity = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 6), DisplayString())
if mibBuilder.loadTexts: gyhbROCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbROCommunity.setDescription('豸ֻ')
gyhbRWCommunity = MibScalar((1, 3, 6, 1, 2, 1, 1, 1000, 1, 99, 7), DisplayString())
if mibBuilder.loadTexts: gyhbRWCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: gyhbRWCommunity.setDescription('豸Ķд')
gyHeartBeat = NotificationType((1, 3, 6, 1, 2, 1, 1, 1000) + (0,0)).setObjects(("NSCRTV-EXTENSION-GY", "gyhbMacAddress"), ("NSCRTV-EXTENSION-GY", "gyhbIpAddress"), ("NSCRTV-EXTENSION-GY", "gyhbLogicalID"), ("NSCRTV-EXTENSION-GY", "gyhbModelNumber"), ("NSCRTV-EXTENSION-GY", "gyhbSerialNumber"), ("NSCRTV-EXTENSION-GY", "gyhbROCommunity"), ("NSCRTV-EXTENSION-GY", "gyhbRWCommunity"), ("SNMPv2-MIB", "sysObjectID"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: gyHeartBeat.setDescription('ӦЯӦı')
mibBuilder.exportSymbols("NSCRTV-EXTENSION-GY", gyhbSerialNumber=gyhbSerialNumber, gyhbMacAddress=gyhbMacAddress, gyhbRWCommunity=gyhbRWCommunity, gyTrapVersion=gyTrapVersion, gyCommon=gyCommon, gyhbIpAddress=gyhbIpAddress, gyUpdateIdentifier=gyUpdateIdentifier, gyhbLogicalID=gyhbLogicalID, gyhbModelNumber=gyhbModelNumber, gyhbROCommunity=gyhbROCommunity, gyTrapVariables=gyTrapVariables, gyHeartBeat=gyHeartBeat, gyAgentStpVersion=gyAgentStpVersion, gyEntry=gyEntry)
