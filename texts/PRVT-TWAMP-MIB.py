#
# PySNMP MIB module PRVT-TWAMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-TWAMP-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 17:46:33 2021
# On host fv-az36-855 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, TimeTicks, Integer32, IpAddress, iso, Gauge32, Counter64, Counter32, ModuleIdentity, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "TimeTicks", "Integer32", "IpAddress", "iso", "Gauge32", "Counter64", "Counter32", "ModuleIdentity", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TruthValue, RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
prvtTwampMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 240))
prvtTwampMIB.setRevisions(('2010-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtTwampMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtTwampMIB.setLastUpdated('201405160000Z')
if mibBuilder.loadTexts: prvtTwampMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtTwampMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtTwampMIB.setDescription('This MIB provides the extended capability of controlling and\n         provisioning of TWAMP tests.')
class PrvtTwampTestNameType(TextualConvention, OctetString):
    description = 'TWAMP test name type (1..32 characters).'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtTwampDecimalPercent(TextualConvention, OctetString):
    description = 'A percentage value in decimal format.'
    status = 'current'
    displayHint = '3d.2d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 10)

prvtTwampNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 0))
prvtTwampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1))
prvtTwampTest = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1))
prvtTwampTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1), )
if mibBuilder.loadTexts: prvtTwampTestTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestTable.setDescription('Table contains TWAMP tests.')
prvtTwampTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampTestName"))
if mibBuilder.loadTexts: prvtTwampTestEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestEntry.setDescription('Entry in prvtTwampTestTable')
prvtTwampTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 1), PrvtTwampTestNameType())
if mibBuilder.loadTexts: prvtTwampTestName.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestName.setDescription('TWAMP test name.')
prvtTwampTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestRowStatus.setDescription('Create/delete entry in prvtTwampTestTable.')
prvtTwampTestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestServer.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestServer.setDescription('TWAMP test server ip-address.')
prvtTwampTestSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestSessionsCount.setDescription('The number of parallel test sessions.')
prvtTwampTestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestPackets.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPackets.setDescription('The number of packets in parallel sessions.')
prvtTwampTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestTimeout.setDescription('The timout interval of test packets (in milliseconds).')
prvtTwampTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestDelay.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestDelay.setDescription('The delay interval between test packets (in milliseconds)')
prvtTwampTestExecuteNow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestExecuteNow.setDescription("When this object is set to '1', command\n         self-test execute-now.  When this object is set to '2' \n         the self-test is stopped. Setting the variable to '0'\n         results in an 'inconsistentValue' error.\n         Setting it to any other value has no effect.\n         \n         When this object is read, the value '0' is returned.")
prvtTwampServer = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2))
prvtTwampServerInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerInnactivity.setDescription('The server innactivity timeout interval of the TWAMP server (in seconds).')
prvtTwampServerSessionInnactivity = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerSessionInnactivity.setDescription('The session innactivity timeout interval of the TWAMP server (in seconds).')
prvtTwampServerMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerMaxSessions.setDescription('The maximum number of controll sessions supported by the TWAMP server.')
prvtTwampServerMaxParallelSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerMaxParallelSessions.setDescription('The maximum number of parallel test sessions for each client supperted by the TWAMP server.')
prvtTwampServerShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtTwampServerShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerShutdown.setDescription('The administrative state of the TWAMP server.')
prvtTwampClientTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7), )
if mibBuilder.loadTexts: prvtTwampClientTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientTable.setDescription('Table contains the allowed clients for the TWAMP server.')
prvtTwampClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampClientIp"))
if mibBuilder.loadTexts: prvtTwampClientEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientEntry.setDescription('Entry in twampClientTable.')
prvtTwampClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtTwampClientIp.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientIp.setDescription('The ip-address of the client.')
prvtTwampClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtTwampClientRowStatus.setDescription('create/delete entry in prvtTwampClientTable')
prvtTwampServerControlSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerControlSessions.setDescription('The number of current control sessions established on the TWAMP server.')
prvtTwampServerTestSessions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampServerTestSessions.setDescription('The number of current test sessions established on the TWAMP server.')
prvtTwampTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3))
prvtTwampTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1), )
if mibBuilder.loadTexts: prvtTwampTestResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultTable.setDescription('Table contains statistics of the executed TWAMP tests.')
prvtTwampTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-TWAMP-MIB", "prvtTwampTestId"), (0, "PRVT-TWAMP-MIB", "prvtTwampTestResultName"))
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultEntry.setDescription('Entry in twampTestResultTable')
prvtTwampTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestId.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestId.setDescription('The internal ID of the TWAMP test instance.')
prvtTwampTestResultName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 2), PrvtTwampTestNameType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestResultName.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestResultName.setDescription('TWAMP test name.')
prvtTwampTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestStartTime.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestStartTime.setDescription('The start time of the TWAMP test instance.')
prvtTwampTestServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestServerAddress.setDescription('The server ip-address of the TWAMP test instance.')
prvtTwampTestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestSessions.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestSessions.setDescription('The number of parallel test sessions of the TWAMP test instance.')
prvtTwampTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 1), ("running", 2), ("stopped", 3), ("finished", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestState.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestState.setDescription('The status of the executed TWAMP test instance.')
prvtTwampTestRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestRtt.setDescription('The average round-trip time of the TWAMP test sample.')
prvtTwampTestMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestMinRtt.setDescription('The minimum round-trip time of the TWAMP test sample.')
prvtTwampTestMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestMaxRtt.setDescription('The maximum round-trip time of the TWAMP test sample.')
prvtTwampTestPcktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktSent.setDescription('The number of test packets sent for the TWAMP test instance.')
prvtTwampTestPcktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktLost.setDescription('The number of lost test packets.')
prvtTwampTestPcktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestPcktDrop.setDescription('The number of dropped test packets.')
prvtTwampTestVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariation.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariation.setDescription('The maximum module variation of the TWAMP test sample')
prvtTwampTestVariationLow = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 14), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationLow.setDescription('The percent of singletons whose variation is less than 10% of the negated maximum module variation of the sample.')
prvtTwampTestVariationMiddle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 15), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationMiddle.setDescription('The percent of singletons whose variation by module is less than 10% of the maximum module variation of the sample.')
prvtTwampTestVariationHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 240, 1, 3, 1, 1, 16), PrvtTwampDecimalPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setStatus('current')
if mibBuilder.loadTexts: prvtTwampTestVariationHigh.setDescription('The percent of singletons whose variation is greater than 10% of the maximum module variation of the sample.')
mibBuilder.exportSymbols("PRVT-TWAMP-MIB", prvtTwampTestTimeout=prvtTwampTestTimeout, prvtTwampClientEntry=prvtTwampClientEntry, prvtTwampTestServerAddress=prvtTwampTestServerAddress, prvtTwampTestPcktLost=prvtTwampTestPcktLost, prvtTwampClientIp=prvtTwampClientIp, prvtTwampTestResult=prvtTwampTestResult, prvtTwampTestEntry=prvtTwampTestEntry, prvtTwampTestState=prvtTwampTestState, prvtTwampNotifications=prvtTwampNotifications, prvtTwampTestPcktSent=prvtTwampTestPcktSent, prvtTwampTestServer=prvtTwampTestServer, prvtTwampClientTable=prvtTwampClientTable, prvtTwampTestResultTable=prvtTwampTestResultTable, prvtTwampTestSessions=prvtTwampTestSessions, prvtTwampTest=prvtTwampTest, prvtTwampTestPackets=prvtTwampTestPackets, prvtTwampServerInnactivity=prvtTwampServerInnactivity, PYSNMP_MODULE_ID=prvtTwampMIB, prvtTwampServerShutdown=prvtTwampServerShutdown, prvtTwampTestDelay=prvtTwampTestDelay, prvtTwampTestMinRtt=prvtTwampTestMinRtt, prvtTwampTestSessionsCount=prvtTwampTestSessionsCount, prvtTwampTestName=prvtTwampTestName, prvtTwampTestVariation=prvtTwampTestVariation, prvtTwampTestVariationHigh=prvtTwampTestVariationHigh, prvtTwampTestTable=prvtTwampTestTable, PrvtTwampTestNameType=PrvtTwampTestNameType, prvtTwampTestRowStatus=prvtTwampTestRowStatus, prvtTwampTestPcktDrop=prvtTwampTestPcktDrop, prvtTwampMIB=prvtTwampMIB, prvtTwampServerMaxSessions=prvtTwampServerMaxSessions, prvtTwampServerMaxParallelSessions=prvtTwampServerMaxParallelSessions, prvtTwampTestId=prvtTwampTestId, PrvtTwampDecimalPercent=PrvtTwampDecimalPercent, prvtTwampServerSessionInnactivity=prvtTwampServerSessionInnactivity, prvtTwampTestResultName=prvtTwampTestResultName, prvtTwampTestVariationLow=prvtTwampTestVariationLow, prvtTwampTestResultEntry=prvtTwampTestResultEntry, prvtTwampTestMaxRtt=prvtTwampTestMaxRtt, prvtTwampClientRowStatus=prvtTwampClientRowStatus, prvtTwampServerTestSessions=prvtTwampServerTestSessions, prvtTwampTestStartTime=prvtTwampTestStartTime, prvtTwampObjects=prvtTwampObjects, prvtTwampTestVariationMiddle=prvtTwampTestVariationMiddle, prvtTwampServer=prvtTwampServer, prvtTwampServerControlSessions=prvtTwampServerControlSessions, prvtTwampTestExecuteNow=prvtTwampTestExecuteNow, prvtTwampTestRtt=prvtTwampTestRtt)
