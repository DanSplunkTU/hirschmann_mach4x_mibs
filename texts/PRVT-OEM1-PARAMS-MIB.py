#
# PySNMP MIB module PRVT-OEM1-PARAMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-OEM1-PARAMS-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 19:30:33 2021
# On host fv-az83-233 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Counter32, Integer32, iso, Gauge32, ModuleIdentity, TimeTicks, ObjectIdentity, MibIdentifier, NotificationType, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Counter32", "Integer32", "iso", "Gauge32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibIdentifier", "NotificationType", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
prvtOem1ParamsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110))
prvtOem1ParamsMIB.setRevisions(('2006-12-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtOem1ParamsMIB.setRevisionsDescriptions(('Initial revision history',))
if mibBuilder.loadTexts: prvtOem1ParamsMIB.setLastUpdated('200612270000Z')
if mibBuilder.loadTexts: prvtOem1ParamsMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtOem1ParamsMIB.setContactInfo('BATM/Telco Systems Support team\n\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtOem1ParamsMIB.setDescription('Initial version. This MIB will provied a way to read \n        specific device parameters')
prvtOem1ParamsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1))
prvtOem1ParamsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 2))
prvtOem1ParamsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 3))
prvtSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSerialNumber.setStatus('current')
if mibBuilder.loadTexts: prvtSerialNumber.setDescription('Device serial number')
prvtAssemblyNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtAssemblyNumber.setStatus('current')
if mibBuilder.loadTexts: prvtAssemblyNumber.setDescription('Device assembly number')
prvtHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: prvtHardwareRevision.setDescription('Device hardware revision')
prvtSwitchRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwitchRevision.setStatus('current')
if mibBuilder.loadTexts: prvtSwitchRevision.setDescription('Switch revision')
prvtSwitchVersion = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwitchVersion.setStatus('current')
if mibBuilder.loadTexts: prvtSwitchVersion.setDescription('Switch version')
prvtSwitchEdition = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwitchEdition.setStatus('current')
if mibBuilder.loadTexts: prvtSwitchEdition.setDescription('Switch edition')
prvtSwitchRepair = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSwitchRepair.setStatus('current')
if mibBuilder.loadTexts: prvtSwitchRepair.setDescription('Switch repair')
prvtHardwareAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: prvtHardwareAddress.setDescription('Switch hardware address')
prvtCabinetRow = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCabinetRow.setStatus('current')
if mibBuilder.loadTexts: prvtCabinetRow.setDescription('Cabinet row location')
prvtCabinetColumn = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCabinetColumn.setStatus('current')
if mibBuilder.loadTexts: prvtCabinetColumn.setDescription('Cabinet column location')
prvtChassisVerticalDeviation = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtChassisVerticalDeviation.setStatus('current')
if mibBuilder.loadTexts: prvtChassisVerticalDeviation.setDescription('Chassis vertical deviation location')
prvtChassisHorizontalDeviatioin = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtChassisHorizontalDeviatioin.setStatus('current')
if mibBuilder.loadTexts: prvtChassisHorizontalDeviatioin.setDescription('Chassis horizontal deviation location')
prvtCabinetHMSNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCabinetHMSNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCabinetHMSNumber.setDescription('Cabinet HMS number')
prvtSubrackHMSNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSubrackHMSNumber.setStatus('current')
if mibBuilder.loadTexts: prvtSubrackHMSNumber.setDescription('Subrack HMS number')
prvtModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtModelNumber.setStatus('current')
if mibBuilder.loadTexts: prvtModelNumber.setDescription('Model number')
prvtPluginUID = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 2110, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPluginUID.setStatus('current')
if mibBuilder.loadTexts: prvtPluginUID.setDescription('Plugin UID')
mibBuilder.exportSymbols("PRVT-OEM1-PARAMS-MIB", prvtHardwareAddress=prvtHardwareAddress, prvtSwitchVersion=prvtSwitchVersion, prvtSubrackHMSNumber=prvtSubrackHMSNumber, prvtOem1ParamsMIB=prvtOem1ParamsMIB, prvtOem1ParamsObjects=prvtOem1ParamsObjects, prvtPluginUID=prvtPluginUID, prvtSwitchRepair=prvtSwitchRepair, prvtAssemblyNumber=prvtAssemblyNumber, prvtModelNumber=prvtModelNumber, prvtOem1ParamsNotifications=prvtOem1ParamsNotifications, prvtCabinetColumn=prvtCabinetColumn, prvtSerialNumber=prvtSerialNumber, prvtSwitchEdition=prvtSwitchEdition, prvtChassisVerticalDeviation=prvtChassisVerticalDeviation, prvtSwitchRevision=prvtSwitchRevision, prvtOem1ParamsConformance=prvtOem1ParamsConformance, prvtChassisHorizontalDeviatioin=prvtChassisHorizontalDeviatioin, PYSNMP_MODULE_ID=prvtOem1ParamsMIB, prvtHardwareRevision=prvtHardwareRevision, prvtCabinetHMSNumber=prvtCabinetHMSNumber, prvtCabinetRow=prvtCabinetRow)
