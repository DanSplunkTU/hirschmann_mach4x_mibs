#
# PySNMP MIB module ALCATEL-IND1-UDP-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-UDP-RELAY-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:56:00 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
routingIND1UdpRelay, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1UdpRelay")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, iso, Integer32, ModuleIdentity, Counter64, NotificationType, Unsigned32, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
alcatelIND1UDPRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1))
alcatelIND1UDPRelayMIB.setRevisions(('2013-07-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setLastUpdated('201307150000Z')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setOrganization('Alcatel -Architects Of An Internet World ')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                version of this document  is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                        (Formerly Alcatel Internetworking, Incorporated)\n                                26801 West Agoura Road\n                            Agoura Hills, CA 91301-5122\n                              United States Of America\n\n                Telephone:              North America  +1 800 995 2696\n                                        Latin America  +1 877 919 9526\n                                        Europe         +31 23 556 0100\n                                        Asia           +65 394 7933\n                                        All Other      +1 818 878 4507\n\n                Electronic Mail:        support@ind.alcatel.com\n                World Wide Web:         http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             For the Birds Of Prey Product Line\n             UDP Relay to forward BOOTP/DHCP requests across VLANs\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2013 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1UDPRelayNotificationObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0))
if mibBuilder.loadTexts: alcatelIND1UDPRelayNotificationObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayNotificationObjects.setDescription('Branch For UDP Relay Notification Objects.')
alcatelIND1UDPRelayMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBObjects.setDescription('Branch For UDP Relay\n            Subsystem Managed Objects.')
alcatelIND1UDPRelayMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBConformance.setDescription('Branch For UDP Relay\n            Subsystem Conformance Information.')
alcatelIND1UDPRelayMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBGroups.setDescription('Branch For UDP Relay\n             Subsystem Units Of Conformance.')
alcatelIND1UDPRelayMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliances.setDescription('Branch For UDP Relay\n            Subsystem Compliance Statements.')
class IphelpereOption82ASCIIFieldType(TextualConvention, Integer32):
    description = 'Ip helper Option 82 Format ASCII field type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("vlan", 5), ("interface", 6))

class DhcpSnoopingOption82ASCIIFieldType(TextualConvention, Integer32):
    description = 'DHCP Snooping Option 82 Format ASCII field type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("vlan", 5), ("interface", 6))

class DhcpSnoopingOption82CircuitOrRemoteId(TextualConvention, Integer32):
    description = 'Circuit Id or Remote Id for Option 82 Format ASCII field.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("circuitid", 1), ("remoteid", 2))

iphelperMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1))
genericUdpServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2))
alaDhcpClientTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3))
dhcpSnoopingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4))
dhcpOption82MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 5))
iphelperTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: iphelperTable.setStatus('current')
if mibBuilder.loadTexts: iphelperTable.setDescription('A list of next hop IP Address for the DHCP Relay Agent.')
iphelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperNextHopIpAddress"))
if mibBuilder.loadTexts: iphelperEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperEntry.setDescription(' An entry in the ip helper table')
iphelperVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperVlan.setStatus('current')
if mibBuilder.loadTexts: iphelperVlan.setDescription('This object is applicable when iphelperForwardOption is\n                 equal to perVlan (2).  On Per VLAN mod the next hop\n                 IP Address corresponds to specific source VLAN.  Based on\n                 the VLAN that the DHCP packet comes to the DHCP Relay\n                 Agent the packet is forwarded to the next hop defined\n                 for that VLAN.  When iphelperForwardOption is standard (1),\n                 this field will be zero (0).')
iphelperNextHopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperNextHopIpAddress.setStatus('current')
if mibBuilder.loadTexts: iphelperNextHopIpAddress.setDescription('This specifies the next hop IP Address of the\n                 DHCP Relay Agent is to forward the DHCP packet.')
iphelperResetSrvStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperResetSrvStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetSrvStats.setDescription('When set to 1, will reset all the statistic for this\n             server.  On standard mode vlan will be zero.  After the\n             reset operation, system will change this back to a zero (0).\n             Subsystem will always return zero (0).')
iphelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperRowStatus.setStatus('current')
if mibBuilder.loadTexts: iphelperRowStatus.setDescription('Row Status for creating/deleting')
iphelperStatTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2), )
if mibBuilder.loadTexts: iphelperStatTable.setStatus('current')
if mibBuilder.loadTexts: iphelperStatTable.setDescription('This keeps statistics for each next hop IP Address.')
iphelperStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsNextHopIpAddr"))
if mibBuilder.loadTexts: iphelperStatEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperStatEntry.setDescription('An entry in the stat table.')
iphelperStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperStatsVlan.setStatus('current')
if mibBuilder.loadTexts: iphelperStatsVlan.setDescription('This object is zero (0) when iphelperForwardOption is\n                 equal to standard (1).  On Per VLAN mod the next hop\n                 IP Address corresponds to specific source VLAN.  Based on\n                 the VLAN that the DHCP packet comes to the DHCP Relay\n                 Agent the packet is forwarded to the next hop defined\n                 for that VLAN.  When iphelperForwardOption is standard (1),\n                 this field will be zero (0).')
iphelperStatsNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperStatsNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: iphelperStatsNextHopIpAddr.setDescription('This specifies the unique server address.')
iphelperTxToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperTxToNextHop.setStatus('current')
if mibBuilder.loadTexts: iphelperTxToNextHop.setDescription(' This keeps track of the number of packets transmitted  to the server.')
iphelperInvalidAgentInfoOptFrmSrver = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidAgentInfoOptFrmSrver.setStatus('current')
if mibBuilder.loadTexts: iphelperInvalidAgentInfoOptFrmSrver.setDescription('This keeps track of the number of packets dropped due to\n               invalid from DHCP server with Relay Agent Information option\n               in the DHCP packet.')
iphelperRxFromClient = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperRxFromClient.setStatus('current')
if mibBuilder.loadTexts: iphelperRxFromClient.setDescription('This keeps track of the number of packets recieved from the client.')
iphelperMaxHopsViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperMaxHopsViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperMaxHopsViolation.setDescription('This keeps track of the number of packets dropped due to\n               max hops violation.')
iphelperForwDelayViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperForwDelayViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperForwDelayViolation.setDescription('This keeps track of the number of packets dropped due to\n               forward delay violation.')
iphelperAgentInfoViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperAgentInfoViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInfoViolation.setDescription('This keeps track of the number of packets dropped due to\n               DHCP packet with giaddr field not equal to zero and\n               Relay Agent Information option is present and also the\n               Relay Agent Information Policy is set to DROP.')
iphelperInvalidGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidGatewayIP.setStatus('current')
if mibBuilder.loadTexts: iphelperInvalidGatewayIP.setDescription('This keeps track of the number of packets dropped due to\n               giaddr matching a local subnet and Relay Agent Information\n               option is present in the DHCP packet.')
iphelperForwDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwDelay.setStatus('current')
if mibBuilder.loadTexts: iphelperForwDelay.setDescription("This sets the BOOTP/DHCP relay's forwarding delay and\n                is only used by the BOOTP/DHCP service. It is typically\n                set as seconds, but the value is totally client dependent.\n                This relay will not forward frames until client frames\n                have 'secs' field set to atleast the value iphelperForwDelay.")
iphelperMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperMaxHops.setStatus('current')
if mibBuilder.loadTexts: iphelperMaxHops.setDescription("This sets the BOOTP/DHCP relay's maximum hops\n                 forwarding limit and is only used by the BOOTP/DHCP service.\n                 If a frame arrives with hopcount greater than or equal\n                 to iphelperMaxHops, it will be dropped.")
iphelperForwardOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("perVlan", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwardOption.setStatus('current')
if mibBuilder.loadTexts: iphelperForwardOption.setDescription('This is the forwarding option for the BOOTP/DHCP Relay Agent.\n                 Default value is standard (1).')
iphelperResetAllStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1), ("resetAllGlbStats", 2), ("resetAllSrvStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetAllStats.setDescription('This parameter resets all the ip helper statistics.\n             1 - reset all stats.  Both Global and server stats.\n             2 - reset all global statistics.\n             3 - reset all server statistics.\n             When the reset operation is done, subsystem will\n             change the value to zero (0).\n             Subsystem will always return zero (0).')
iphelperBootupOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupOption.setStatus('deprecated')
if mibBuilder.loadTexts: iphelperBootupOption.setDescription('This object allows the user to enable or disable the\n                 functionality of the relay to get an IP address at the\n                 time of system boot-up and assign that IP address for\n                 the ip interface of the default VLAN.  When this is diabled\n                 and then enable, the object iphelperBootupPacketOption is\n                 reset to its default value.\n                 Default of this option is Disable (2).')
iphelperBootupPacketOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootp", 1), ("dhcp", 2))).clone('dhcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupPacketOption.setStatus('deprecated')
if mibBuilder.loadTexts: iphelperBootupPacketOption.setDescription('This object is used in conjunction with iphelperBootupOption.\n                 This specify the packet format with the choices of BOOTP or DHCP\n                 to be used to get an IP address at the time of system boot-up.\n                 Default option is DHCP')
iphelperAgentInformation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformation.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInformation.setDescription('This object allows user to enable or disable the functionality\n                 of inserting the relay agent information option to the DHCP\n                 option field according to RFC 3046.  When is is disbled and then\n                 enabled, the iphelperAgentInformationPolicy will be reset to its\n                 default value.')
iphelperAgentInformationPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformationPolicy.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInformationPolicy.setDescription('This object allows the user to select the policy of either\n                 drop, keep or replace the relay agent information option if\n                 this option is already present in the DHCP packet.')
iphelperPXESupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperPXESupport.setStatus('current')
if mibBuilder.loadTexts: iphelperPXESupport.setDescription('When enabled the relay agent will replace the source IP address\n                 of the packet with the gateway IP address from the DHCP packet.\n                 The default value is disabled.')
iphelperDhcpOption82FormatType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("autoInterfaceAlias", 5), ("ascii", 6))).clone('macAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatType.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatType.setDescription('DHCP option-82 defines the type of information carried in circuit id \n        and remote id sub option fields. If the type selected is string the actual\n        value of the string can be found in iphelperDhcpOption82StringValue.\n        Format type ASCII will insert the configured fields in ASCII format.')
iphelperDhcpOption82StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82StringValue.setDescription('The value of the string that will be used in the circuit id and remote id\n        sub options.')
iphelperDhcpOption82FormatASCIIField1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 19), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1.setDescription('The type of the first field in the Option 82 string in ASCII format,\n                 which will be copied to Option-82 circuit id of the DHCP packet.\n            This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField1StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1StringValue.setDescription('The string value of the first field in the Option 82 string in ASCII \n                 format, which will be copied to Option-82 circuit id of the DHCP packet.\n                 This Field is applicable only, if the option 82 format type is ASCII.\n                 If the option 82 format type is not ASCII or if this field is not used or \n                 if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 21), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2.setDescription('The type of the second field in the Option 82 string in ASCII format,\n                 which will be copied to Option-82 circuit id of the DHCP packet.\n            This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField2StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2StringValue.setDescription('The string value of the second field in the Option 82 string in ASCII \n                 format, which will be copied to Option-82 circuit id of the DHCP packet.\n                 This Field is applicable only, if the option 82 format type is ASCII.\n                 If the option 82 format type is not ASCII or if this field is not used or \n                 if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 23), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3.setDescription('The type of the third field in the Option 82 string in ASCII format,\n                 which will be copied to Option-82 circuit id of the DHCP packet.\n            This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField3StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3StringValue.setDescription('The string value of the third field in the Option 82 string in ASCII \n                 format, which will be copied to Option-82 circuit id of the DHCP packet.\n                 This Field is applicable only, if the option 82 format type is ASCII.\n                 If the option 82 format type is not ASCII or if this field is not used or \n                 if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 25), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4.setDescription('The type of the fourth field in the Option 82 string in ASCII format,\n                 which will be copied to Option-82 circuit id of the DHCP packet.\n            This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField4StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4StringValue.setDescription('The string value of the fourth field in the Option 82 string in ASCII \n                 format, which will be copied to Option-82 circuit id of the DHCP packet.\n                 This Field is applicable only, if the option 82 format type is ASCII.\n                 If the option 82 format type is not ASCII or if this field is not used or \n                 if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 27), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5.setDescription('The type of the fifth field in the Option 82 string in ASCII format,\n                 which will be copied to Option-82 circuit id of the DHCP packet.\n            This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField5StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5StringValue.setDescription('The string value of the fifth field in the Option 82 string in ASCII \n                 format, which will be copied to Option-82 circuit id of the DHCP packet.\n                 This Field is applicable only, if the option 82 format type is ASCII.\n                 If the option 82 format type is not ASCII or if this field is not used or \n                 if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIDelimiter.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIDelimiter.setDescription('The value of the delimiter that is inserted between the fields in the  \n                 Option 82 string in ASCII format, which will be copied to Option-82 \n            circuit id of the DHCP packet. This value is applicable only, if the  \n            option 82 format type is ASCII')
iphelperResetAllOpt82ErrStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllOpt82ErrStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetAllOpt82ErrStats.setDescription('This parameter resets all the ip helper Option 82 error statistics.\n             When the reset operation is done, subsystem will\n             change the value to zero (0).\n             Subsystem will always return zero (0).')
iphelperOption82ErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31), )
if mibBuilder.loadTexts: iphelperOption82ErrStatsTable.setStatus('current')
if mibBuilder.loadTexts: iphelperOption82ErrStatsTable.setDescription('A list of Option 82 related error statistic count per port and per vlan.')
iphelperOption82ErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82ifIndex"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82vlan"))
if mibBuilder.loadTexts: iphelperOption82ErrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperOption82ErrStatsEntry.setDescription(' An entry in the ip helper Option 82 error statistics table')
iphelperOpt82ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: iphelperOpt82ifIndex.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82ifIndex.setDescription('The interface where the DHCP packet ingress the switch that  \n                 caused the Agent Info Violation or the Invalid Gateway \n                 IP Address error.')
iphelperOpt82vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: iphelperOpt82vlan.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82vlan.setDescription('The vlan where the DHCP packet ingress the switch that  \n                 caused the Agent Info Violation or the Invalid Gateway \n                 IP Address error.')
iphelperOpt82agentInfoViolationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82agentInfoViolationCnt.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82agentInfoViolationCnt.setDescription('The number of Agent Info Violation seen on this interface and vlan.')
iphelperOpt82invalidGatewayIPAddrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82invalidGatewayIPAddrCnt.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82invalidGatewayIPAddrCnt.setDescription('The number of Invalid Gateway IP Address seen on this interface and vlan.')
iphelperOpt82resetErrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetErrStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperOpt82resetErrStats.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82resetErrStats.setDescription('This parameter resets the ip helper Option 82 error statistics\n             on this interface and vlan.  When the reset operation is done, \n             subsystem will change the value to zero (0).  Subsystem will always return\n             zero (0).')
dhcpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanTable.setDescription('A list of vlans that have DHCP Snooping enabled.')
dhcpSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanNumber"))
if mibBuilder.loadTexts: dhcpSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanEntry.setDescription('A DHCP Snooping VLAN entry.')
dhcpSnoopingVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dhcpSnoopingVlanNumber.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanNumber.setDescription('The VLAN number identifying this instance. Valid\n            range from 1 to 4094.')
dhcpSnoopingVlanOpt82DataInsertionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanOpt82DataInsertionStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanOpt82DataInsertionStatus.setDescription('The DHCP Option-82 data insertion status. Default value is enabled,\n            which means once the VLAN is enabled for DHCP snooping, the\n            Option-82 field will be inserted in the DHCP packets between the\n            Relay Agent and the DHCP Server, on all the ports belong to the\n            VLAN.')
dhcpSnoopingVlanMacAddrVerificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanMacAddrVerificationStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanMacAddrVerificationStatus.setDescription('The DHCP Snooping MAC Address verification status. Default value is\n            enabled. Once enabled, for all the incoming DHCP traffic to those\n            DHCP Snooping enabled vlan port, it compares the source MAC address\n            and the client Hardware Address in the DHCP packet. If mismatch, the\n            packet will be dropped.')
dhcpSnoopingVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingVlanStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingVlanStatus.setDescription('Row Status for creating/deleting')
dhcpSnoopingPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2), )
if mibBuilder.loadTexts: dhcpSnoopingPortTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortTable.setDescription('A list of ports that have DHCP Snooping trust status.')
dhcpSnoopingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopingPortEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortEntry.setDescription('A DHCP Snooping Port entry.')
dhcpSnoopingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopingPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortIfIndex.setDescription('The ifIndex subindex identifying this instance.')
dhcpSnoopingPortTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("clientOnly", 2), ("trusted", 3))).clone('clientOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortTrustMode.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortTrustMode.setDescription("The DHCP Snooping's VLAN port's trust mode. Default value\n            is client-only, which means once the VLAN is enabled for DHCP\n            snooping, the vlan ports only allow DHCP client packets. Blocked\n            means all DHCP traffic is block on the port. Trusted means all\n            DHCP traffic is allowed on the port")
dhcpSnoopingPortMacAddrViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortMacAddrViolation.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortMacAddrViolation.setDescription('This keeps track of the number of packets dropped due to DHCPi\n            packet with the source MAC Address not equal the client DHCP\n            Hardware address in the DHCP packet.')
dhcpSnoopingPortDhcpServerViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortDhcpServerViolation.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortDhcpServerViolation.setDescription('This keeps track of the number of packets dropped due to receiving\n            an DHCP server packet on a DHCP Snooping enabled port.')
dhcpSnoopingPortOption82Violation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortOption82Violation.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortOption82Violation.setDescription('This keeps track of the number of packets dropped due to a relay\n            agent forards a packet that includes option 82 info to an untrusted\n            port.')
dhcpSnoopingPortRelayAgentViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortRelayAgentViolation.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortRelayAgentViolation.setDescription('This keeps track of the number of packets dropped due to an DHCP\n            relay agent forwards a DHCP packate includes an relay agent ip\n            address that is not 0.0.0.0.')
dhcpSnoopingPortBindingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingPortBindingViolation.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortBindingViolation.setDescription('This keeps track of the number of packets dropped due to receiving\n            an DHCP Relase or DHCP Decline message that contains a MAC address\n            in the DHCP snooping binding table, but the interface information in\n            the binding table does not match the interface on which the message\n            was received.')
dhcpSnoopingPortIpSourceFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingPortIpSourceFiltering.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingPortIpSourceFiltering.setDescription('The DHCP Snooping IP Source filtering  status. Default value\n            is disabled. Once enabled, only the incoming traffic with the proper\n            client IP address, MAC address and port will be allowed.')
dhcpSnoopingBindingTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3), )
if mibBuilder.loadTexts: dhcpSnoopingBindingTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingTable.setDescription('DHCP Snooping binding table.')
dhcpSnoopingBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopingBindingEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingEntry.setDescription('A DHCP Snooping binding entry.')
dhcpSnoopingBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpSnoopingBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingMacAddress.setDescription('The MAC Address subindex identifying this instance.')
dhcpSnoopingBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpSnoopingBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingIfIndex.setDescription('The IfIndex subindex identifying this instance. It is the\n            the interface where the DHCP request is coming in from.')
dhcpSnoopingBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingIpAddress.setDescription('The Ip Address offered by the DHCP Server to the Client.')
dhcpSnoopingBindingVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingVlan.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingVlan.setDescription('It is the VLAN Id where the DHCP client belongs to.')
dhcpSnoopingBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingLeaseTime.setDescription("The lease time of the client's IP Address.")
dhcpSnoopingBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingType.setDescription('The learning/configuration nature of the binding entry.\n            Normally, the entries are learned dynamically, while it\n            also can be statically/manually configured.')
dhcpSnoopingBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingRowStatus.setDescription('Row Status for creating/deleting')
dhcpSnoopingMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchLevel", 1), ("disabled", 2), ("vlanLevel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingMode.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingMode.setDescription("Enabling DHCP Snooping at the switch level. For the vlan level,\n            it is enabled implicitly when an individual vlan's DHCP Snooping\n            is enabled; and, mode is implicitly disabled until all vlan's \n            DHCP Snooping are disabled. If mode is set to vlan level, the\n            operation will be of no effect.")
dhcpSnoopingOpt82DataInsertionStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOpt82DataInsertionStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOpt82DataInsertionStatus.setDescription('The DHCP Option-82 data insertion status at switch level.  Default\n            value is enabled, the Option-82 field will be inserted in the DHCP\n            packets between the Relay Agent and the DHCP Server, on all the\n            ports belong to the switch.')
dhcpSnoopingMacAddrVerificationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingMacAddrVerificationStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingMacAddrVerificationStatus.setDescription('The DHCP Snooping MAC Address verification status at switch level.\n            Default value is enabled. Once enabled, for all the incoming DHCP\n            traffic to the port, it compares the source MAC address and the\n            client Hardware Address in the DHCP packet. If mismatch, the packet\n            will be dropped.')
dhcpSnoopingBindingStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingStatus.setDescription('This object specifies if the capability of building the DHCP\n            Snooping Binding Table/Database is enable or not. By default, it is\n            enabled.  It is applicable for both switch-level or vlan-level DHCP\n            Snooping.')
dhcpSnoopingBindingDatabaseSyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseSyncTimeout.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseSyncTimeout.setDescription('The DHCP Snooping Binding Database synchronization timeout value.\n            It is used to specify the synchronization frequency, in seconds,\n            between the binding table in memory and the binding file in flash.')
dhcpSnoopingBindingDatabaseLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseLastSyncTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseLastSyncTime.setDescription('The time stamp of the last successuful DHCP Snooping Binding\n            Database synchronization.')
dhcpSnoopingBindingDatabaseAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noaction", 0), ("purge", 1), ("renew", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseAction.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingDatabaseAction.setDescription('This object identifies the action to be performed. Purge:\n            means to clear the binding table entries in the memory.\n            Renew: means to populate the binding table entries from the\n            flash file.')
dhcpSnoopingBypassOpt82CheckStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBypassOpt82CheckStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBypassOpt82CheckStatus.setDescription('DHCP bypass option-82 check status. By default, it is disabled.\n            Once enabled, it will no longer enforce the check of option-82 field\n            in the incoming DHCP Packets on those untrusted ports.')
dhcpSnoopingBindingPersistencyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingBindingPersistencyStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingBindingPersistencyStatus.setDescription('DHCP Snooping binding table persistency check status. By default,\n            it is disabled.  Once enabled, the binding entries expiry will be\n            solely depend on Lease time')
dhcpSnoopingSourceFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13), )
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanTable.setDescription('A list of vlans that have ip-source-filtering enabled.')
dhcpSnoopingSourceFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingSourceFilterVlanNumber"))
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanEntry.setDescription('A Source Filtering enabled VLAN entry.')
dhcpSnoopingSourceFilterVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanNumber.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanNumber.setDescription('The VLAN number identifying this instance. Valid\n            range from 1 to 4094.')
dhcpSnoopingSourceFilterVlanFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 4, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingSourceFilterVlanFilteringStatus.setDescription('The DHCP Snooping IP Source filtering row status. Default value\n            is disabled. Once enabled, only the incoming traffic with the proper\n            client IP address, MAC address , port and vlan will be allowed.')
dhcpSnoopingOption82FormatType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("autoInterfaceAlias", 5), ("ascii", 6))).clone('macAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatType.setDescription('DHCP option-82 defines the type of information carried in circuit id\n                 and remote id sub option fields. If the type selected is string the actual\n                 value of the string can be found in iphelperDhcpOption82StringValue.\n                 Format type ASCII will insert the configured fields in ASCII format.')
dhcpSnoopingOption82StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 46), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopingOption82StringValue.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82StringValue.setDescription('The value of the string that will be used in the circuit id and remote id\n                 sub options.')
dhcpSnoopingOption82FormatASCIIConfigurableTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47), )
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableTable.setDescription('A list of ascii fields used for Circuit ID or Remote ID.')
dhcpSnoopingOption82FormatASCIIConfigurableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableIndex"))
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableEntry.setDescription('An ascii field entry for Circuit ID or Remote ID.')
dhcpSnoopingOption82FormatASCIIConfigurableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 1), DhcpSnoopingOption82CircuitOrRemoteId())
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableIndex.setDescription('This object specifies the either circuit id or remote id for option82.')
dhcpSnoopingOption82FormatASCIIConfigurableField1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 2), DhcpSnoopingOption82ASCIIFieldType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1.setDescription('The type of the first field in the Option 82 string in ASCII\n            format, which will be copied to Option-82 circuit id or remote id of\n            the DHCP packet.  This Field is applicable only, if the option 82\n            format type is ASCII.')
dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal.setDescription('The string value of the first field in the Option 82 string in\n            ASCII format, which will be copied to Option-82 circuit id or remote\n            id of the DHCP packet.  This Field is applicable only, if the option\n            82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 4), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2.setDescription('The type of the second field in the Option 82 string in ASCII\n            format, which will be copied to Option-82 circuit id or remote id of\n            the DHCP packet.  This Field is applicable only, if the option 82\n            format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal.setDescription('The string value of the second field in the Option 82 string in\n            ASCII format, which will be copied to Option-82 circuit id or remote\n            id of the DHCP packet.  This Field is applicable only, if the option\n            82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 6), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3.setDescription('The type of the third field in the Option 82 string in ASCII\n            format, which will be copied to Option-82 circuit id or remote id of\n            the DHCP packet.  This Field is applicable only, if the option 82\n            format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal.setDescription('The string value of the third field in the Option 82 string in\n            ASCII format, which will be copied to Option-82 circuit id or remote\n            id of the DHCP packet.  This Field is applicable only, if the option\n            82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 8), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4.setDescription('The type of the fourth  field in the Option 82 string in ASCII\n            format, which will be copied to Option-82 circuit id or remote id of\n            the DHCP packet.  This Field is applicable only, if the option 82\n            format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal.setDescription('The string value of the fourth field in the Option 82 string in\n            ASCII format, which will be copied to Option-82 circuit id or remote\n            id of the DHCP packet.  This Field is applicable only, if the option\n            82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 10), DhcpSnoopingOption82ASCIIFieldType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5.setDescription('The type of the fifth field in the Option 82 string in ASCII\n            format, which will be copied to Option-82 circuit id or remote id of\n            the DHCP packet.  This Field is applicable only, if the option 82\n            format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(' - ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal.setDescription('The string value of the fifth field in the Option 82 string in\n            ASCII format, which will be copied to Option-82 circuit id or remote\n            id of the DHCP packet.  This Field is applicable only, if the option\n            82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableDelimiter.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableDelimiter.setDescription('The value of the delimiter that is inserted between the fields in\n            the Option 82 string in ASCII format, which will be copied to\n            Option-82 circuit id or remote id of the DHCP packet. This value is\n            applicable only, if the option 82 format type is ASCII')
dhcpSnoopingOption82FormatASCIIConfigurableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 47, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingOption82FormatASCIIConfigurableStatus.setDescription('This object specifies the status of the entry.')
alaMdnsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMdnsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaMdnsAdminStatus.setDescription('MDNS global admin status.')
alaMdnsGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 49), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMdnsGreTunnelName.setStatus('current')
if mibBuilder.loadTexts: alaMdnsGreTunnelName.setDescription('Specifies the tunnel name for the MDNS feature.')
alaMdnsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMdnsOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaMdnsOperStatus.setDescription('MDNS operational status')
alaSsdpGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSsdpGreTunnelName.setStatus('current')
if mibBuilder.loadTexts: alaSsdpGreTunnelName.setDescription('Specifies the GRE tunnel IP interface name associated with the SSDP Relay feature.')
alaSsdpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSsdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSsdpAdminStatus.setDescription('SSDP Relay global status')
alaSsdpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSsdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaSsdpOperStatus.setDescription('SSDP operational status')
genericUdpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: genericUdpServiceTable.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceTable.setDescription('This table defines the Generic UDP Relay Service.')
genericUdpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceUdpPort"))
if mibBuilder.loadTexts: genericUdpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceEntry.setDescription('An entry in Generic UDP Relay table')
genericUdpServiceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServiceUdpPort.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceUdpPort.setDescription('UDP port for the service.')
genericUdpServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDescription.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDescription.setDescription('The name and/or description of the service. If null string is passed\n        the default name will be used.')
genericUdpServiceStatRxFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatRxFromClient.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatRxFromClient.setDescription('This keeps track of the number of packets received from the\n                 client with UDP destination port matching genericUdpServiceUdpPort.')
genericUdpServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceRowStatus.setDescription('Row Status for creating/deleting')
genericUdpServiceDstTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2), )
if mibBuilder.loadTexts: genericUdpServiceDstTable.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstTable.setDescription('This table defines the destination VLAN for the\n                 Generic UDP Relay Service.  UDP packet with destination port\n                 genericUdpServiceUdpPort are forwarded to VLAN defined in\n                 genericUdpServiceDstVlan.')
genericUdpServiceDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServicePort"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstVlan"))
if mibBuilder.loadTexts: genericUdpServiceDstEntry.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstEntry.setDescription('An entry in Generic UDP Relay table')
genericUdpServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServicePort.setStatus('current')
if mibBuilder.loadTexts: genericUdpServicePort.setDescription('UDP port for the service.')
genericUdpServiceDstVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: genericUdpServiceDstVlan.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstVlan.setDescription('Destination VLAN that the UPD port is to be forwarded to.')
genericUdpServiceStatTxToVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatTxToVlan.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatTxToVlan.setDescription('This keeps track of the number of packets transmitted to the\n                     destination VLAN with UDP destination port matching\n                     genericUdpServicePort.')
genericUdpServiceDstTblRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDstTblRowStatus.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstTblRowStatus.setDescription('Row Status for creating/deleting the Generic Service Destination Table')
genericUdpServiceStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericUdpServiceStatReset.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatReset.setDescription('This parameter resets all the Generic UDP Relay related\n             statistics.  Subsystem always returns zero (0).')
alaGenericUdpServiceDstIpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpTable.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpTable.setDescription('This table defines the destination IP for the\n                 Generic UDP Relay Service.  UDP packet with destination port\n                 alaGenericUdpServiceDstUdpPort are forwarded to IP defined in\n                 alaGenericUdpServiceDstIpAddress.')
alaGenericUdpServiceDstIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstUdpPort"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpType"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpAddress"))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpEntry.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpEntry.setDescription('An entry in Generic UDP Relay destination Ip table.')
alaGenericUdpServiceDstUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: alaGenericUdpServiceDstUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstUdpPort.setDescription('UDP port for the service.')
alaGenericUdpServiceDstIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpType.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpType.setDescription('This specifies the IP Address type of the\n           UDP Relay Server to forward the UDP packet.')
alaGenericUdpServiceDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpAddress.setDescription('This specifies the IP Address of the\n           UDP Relay Server to forward the UDP packet.')
alaGenericUdpServiceDstStatTxToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGenericUdpServiceDstStatTxToIp.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstStatTxToIp.setDescription('This keeps track of the number of packets transmitted to the\n           destination IP with UDP destination port matching\n           alaGenericUdpServiceDstUdpPort.')
alaGenericUdpServiceDstIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpRowStatus.setDescription('Row Status for creating/deleting the Generic Service Destination IP Table')
alaDhcpClientAddressAddTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressAddTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressAddTrap.setDescription('When  new IP address is assigned to DHCP Client interface.')
alaDhcpClientAddressExpiryTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressExpiryTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressExpiryTrap.setDescription('When the lease time expires or when DHCP client not\n                 able to renew/rebind an IP address.')
alaDhcpClientAddressModifyTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressModifyTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressModifyTrap.setDescription('When the dhcp client not able to obtain the existing\n                IP address and new IP address is assigned to the DHCP client.')
alaDhcpBindingDuplicateEntry = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 4)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"))
if mibBuilder.loadTexts: alaDhcpBindingDuplicateEntry.setStatus('current')
if mibBuilder.loadTexts: alaDhcpBindingDuplicateEntry.setDescription('Trap to notify MAC Movement in DHCP-Binding Table\n                 Mac Address, Vlan, Previous ifIndex, Current ifIndex')
alaDhcpClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientAddress.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddress.setDescription('This object specifies the current IP address of the DHCP client.')
alaDhcpClientNewAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientNewAddress.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientNewAddress.setDescription('This object specifies the new IP address assigned for the DHCP client.')
alcatelIND1UDPRelayMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientTrapsGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingGroup2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1UDPRelayMIBCompliance = alcatelIND1UDPRelayMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliance.setDescription('Compliance statement for UDP Relay')
iphelperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetSrvStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperGroup = iphelperGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperGroup.setDescription(' Collection of objects for the management of parameters of UDP Relay.')
iphelperStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperTxToNextHop"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidAgentInfoOptFrmSrver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperStatGroup = iphelperStatGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperStatGroup.setDescription(' Collection of objects for management of statistics for DHCP Relay Agent.')
iphelperMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHopsViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelayViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInfoViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidGatewayIP"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelay"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHops"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwardOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupPacketOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformationPolicy"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperPXESupport"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIDelimiter"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllOpt82ErrStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsAdminStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsGreTunnelName"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaMdnsOperStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpGreTunnelName"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpAdminStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaSsdpOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperMiscGroup = iphelperMiscGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperMiscGroup.setDescription(' Other independent objects of UDP Relay.')
genericUdpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDescription"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceGroup = genericUdpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceGroup.setDescription('Objects for Generic UDP Service table')
genericUdpServiceDstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatTxToVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstTblRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceDstGroup = genericUdpServiceDstGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstGroup.setDescription('Objects for Generic UDP Service Destination table')
genericUdpServiceMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceMiscGroup = genericUdpServiceMiscGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceMiscGroup.setDescription('Objects for Generic UDP Service Misc Group.')
alaDhcpClientTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressAddTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressExpiryTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressModifyTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpBindingDuplicateEntry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsGroup = alaDhcpClientTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientTrapsGroup.setDescription('Collection of traps for management of DHCP Client ')
alaDhcpClientTrapsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsObjectGroup = alaDhcpClientTrapsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientTrapsObjectGroup.setDescription('Collection of trap objects for management of DHCP Client ')
iphelperOpt82ErrorStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82agentInfoViolationCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82invalidGatewayIPAddrCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82resetErrStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperOpt82ErrorStatGroup = iphelperOpt82ErrorStatGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82ErrorStatGroup.setDescription(' Collection of objects for Option 82 error statistics.')
dhcpSnoopingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseAction"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseLastSyncTime"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingDatabaseSyncTimeout"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIfIndex"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingIpAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingLeaseTime"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingMacAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingPersistencyStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingRowStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBindingVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingBypassOpt82CheckStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingMacAddrVerificationStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingMode"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOpt82DataInsertionStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableDelimiter"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField1"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField3"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField4"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField5"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatASCIIConfigurableStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82FormatType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortIpSourceFiltering"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortMacAddrViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingOption82StringValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dhcpSnoopingGroup = dhcpSnoopingGroup.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingGroup.setDescription(' Collection of objects for DHCP Snooping.')
dhcpSnoopingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortBindingViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortOption82Violation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortRelayAgentViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortTrustMode"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingSourceFilterVlanFilteringStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanMacAddrVerificationStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingPortDhcpServerViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanOpt82DataInsertionStatus"), ("ALCATEL-IND1-UDP-RELAY-MIB", "dhcpSnoopingVlanStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dhcpSnoopingGroup2 = dhcpSnoopingGroup2.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingGroup2.setDescription(' Collection of objects for DHCP Snooping.')
alaGenericUdpServiceDstIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstStatTxToIp"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaGenericUdpServiceDstIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaGenericUdpServiceDstIpGroup = alaGenericUdpServiceDstIpGroup.setStatus('current')
if mibBuilder.loadTexts: alaGenericUdpServiceDstIpGroup.setDescription('Objects for Generic UDP Service Destination IP table')
mibBuilder.exportSymbols("ALCATEL-IND1-UDP-RELAY-MIB", dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField2StrVal, iphelperOpt82resetErrStats=iphelperOpt82resetErrStats, iphelperMiscGroup=iphelperMiscGroup, dhcpSnoopingMacAddrVerificationStatus=dhcpSnoopingMacAddrVerificationStatus, dhcpSnoopingBindingRowStatus=dhcpSnoopingBindingRowStatus, genericUdpServiceDescription=genericUdpServiceDescription, dhcpSnoopingPortTable=dhcpSnoopingPortTable, genericUdpServiceDstEntry=genericUdpServiceDstEntry, iphelperOpt82ErrorStatGroup=iphelperOpt82ErrorStatGroup, dhcpSnoopingOption82FormatType=dhcpSnoopingOption82FormatType, iphelperDhcpOption82FormatASCIIField4=iphelperDhcpOption82FormatASCIIField4, iphelperOpt82ifIndex=iphelperOpt82ifIndex, dhcpSnoopingVlanOpt82DataInsertionStatus=dhcpSnoopingVlanOpt82DataInsertionStatus, dhcpSnoopingPortIfIndex=dhcpSnoopingPortIfIndex, iphelperInvalidGatewayIP=iphelperInvalidGatewayIP, alcatelIND1UDPRelayMIB=alcatelIND1UDPRelayMIB, iphelperDhcpOption82FormatASCIIField3=iphelperDhcpOption82FormatASCIIField3, dhcpSnoopingOption82FormatASCIIConfigurableField4=dhcpSnoopingOption82FormatASCIIConfigurableField4, iphelperDhcpOption82FormatASCIIField2StringValue=iphelperDhcpOption82FormatASCIIField2StringValue, alcatelIND1UDPRelayMIBCompliances=alcatelIND1UDPRelayMIBCompliances, iphelperOption82ErrStatsTable=iphelperOption82ErrStatsTable, alcatelIND1UDPRelayMIBGroups=alcatelIND1UDPRelayMIBGroups, dhcpSnoopingOption82FormatASCIIConfigurableField2=dhcpSnoopingOption82FormatASCIIConfigurableField2, dhcpSnoopingVlanStatus=dhcpSnoopingVlanStatus, DhcpSnoopingOption82CircuitOrRemoteId=DhcpSnoopingOption82CircuitOrRemoteId, dhcpSnoopingMode=dhcpSnoopingMode, iphelperDhcpOption82FormatASCIIDelimiter=iphelperDhcpOption82FormatASCIIDelimiter, dhcpSnoopingPortIpSourceFiltering=dhcpSnoopingPortIpSourceFiltering, alaDhcpClientAddressAddTrap=alaDhcpClientAddressAddTrap, iphelperOpt82invalidGatewayIPAddrCnt=iphelperOpt82invalidGatewayIPAddrCnt, genericUdpServicePort=genericUdpServicePort, iphelperTxToNextHop=iphelperTxToNextHop, dhcpOption82MIB=dhcpOption82MIB, iphelperRowStatus=iphelperRowStatus, genericUdpServiceDstVlan=genericUdpServiceDstVlan, alaGenericUdpServiceDstIpType=alaGenericUdpServiceDstIpType, dhcpSnoopingVlanNumber=dhcpSnoopingVlanNumber, dhcpSnoopingOption82FormatASCIIConfigurableField5=dhcpSnoopingOption82FormatASCIIConfigurableField5, iphelperAgentInformation=iphelperAgentInformation, iphelperRxFromClient=iphelperRxFromClient, alaDhcpClientAddress=alaDhcpClientAddress, dhcpSnoopingPortDhcpServerViolation=dhcpSnoopingPortDhcpServerViolation, dhcpSnoopingPortBindingViolation=dhcpSnoopingPortBindingViolation, dhcpSnoopingVlanMacAddrVerificationStatus=dhcpSnoopingVlanMacAddrVerificationStatus, dhcpSnoopingBindingVlan=dhcpSnoopingBindingVlan, dhcpSnoopingOption82FormatASCIIConfigurableDelimiter=dhcpSnoopingOption82FormatASCIIConfigurableDelimiter, dhcpSnoopingOption82FormatASCIIConfigurableField1=dhcpSnoopingOption82FormatASCIIConfigurableField1, dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField1StrVal, genericUdpServiceStatReset=genericUdpServiceStatReset, iphelperDhcpOption82FormatASCIIField3StringValue=iphelperDhcpOption82FormatASCIIField3StringValue, iphelperStatEntry=iphelperStatEntry, dhcpSnoopingPortOption82Violation=dhcpSnoopingPortOption82Violation, alaSsdpGreTunnelName=alaSsdpGreTunnelName, iphelperMIB=iphelperMIB, iphelperDhcpOption82FormatType=iphelperDhcpOption82FormatType, alaGenericUdpServiceDstStatTxToIp=alaGenericUdpServiceDstStatTxToIp, alaGenericUdpServiceDstIpRowStatus=alaGenericUdpServiceDstIpRowStatus, dhcpSnoopingPortRelayAgentViolation=dhcpSnoopingPortRelayAgentViolation, dhcpSnoopingOption82FormatASCIIConfigurableTable=dhcpSnoopingOption82FormatASCIIConfigurableTable, iphelperResetSrvStats=iphelperResetSrvStats, genericUdpServiceGroup=genericUdpServiceGroup, dhcpSnoopingBypassOpt82CheckStatus=dhcpSnoopingBypassOpt82CheckStatus, iphelperTable=iphelperTable, dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField4StrVal, dhcpSnoopingOption82StringValue=dhcpSnoopingOption82StringValue, alaSsdpOperStatus=alaSsdpOperStatus, alaDhcpClientAddressModifyTrap=alaDhcpClientAddressModifyTrap, alaDhcpClientTrapsGroup=alaDhcpClientTrapsGroup, dhcpSnoopingSourceFilterVlanEntry=dhcpSnoopingSourceFilterVlanEntry, alcatelIND1UDPRelayMIBCompliance=alcatelIND1UDPRelayMIBCompliance, dhcpSnoopingVlanTable=dhcpSnoopingVlanTable, dhcpSnoopingOption82FormatASCIIConfigurableField3=dhcpSnoopingOption82FormatASCIIConfigurableField3, iphelperNextHopIpAddress=iphelperNextHopIpAddress, genericUdpServiceTable=genericUdpServiceTable, iphelperDhcpOption82FormatASCIIField1StringValue=iphelperDhcpOption82FormatASCIIField1StringValue, iphelperForwDelay=iphelperForwDelay, alaDhcpBindingDuplicateEntry=alaDhcpBindingDuplicateEntry, iphelperVlan=iphelperVlan, dhcpSnoopingBindingLeaseTime=dhcpSnoopingBindingLeaseTime, alaGenericUdpServiceDstUdpPort=alaGenericUdpServiceDstUdpPort, alaMdnsOperStatus=alaMdnsOperStatus, alaDhcpClientNewAddress=alaDhcpClientNewAddress, iphelperInvalidAgentInfoOptFrmSrver=iphelperInvalidAgentInfoOptFrmSrver, iphelperMaxHops=iphelperMaxHops, alaSsdpAdminStatus=alaSsdpAdminStatus, alcatelIND1UDPRelayMIBConformance=alcatelIND1UDPRelayMIBConformance, iphelperStatsVlan=iphelperStatsVlan, dhcpSnoopingOption82FormatASCIIConfigurableEntry=dhcpSnoopingOption82FormatASCIIConfigurableEntry, alaGenericUdpServiceDstIpGroup=alaGenericUdpServiceDstIpGroup, genericUdpServiceUdpPort=genericUdpServiceUdpPort, dhcpSnoopingPortMacAddrViolation=dhcpSnoopingPortMacAddrViolation, iphelperGroup=iphelperGroup, alcatelIND1UDPRelayNotificationObjects=alcatelIND1UDPRelayNotificationObjects, alaGenericUdpServiceDstIpAddress=alaGenericUdpServiceDstIpAddress, genericUdpServiceMiscGroup=genericUdpServiceMiscGroup, alaGenericUdpServiceDstIpTable=alaGenericUdpServiceDstIpTable, iphelperDhcpOption82FormatASCIIField4StringValue=iphelperDhcpOption82FormatASCIIField4StringValue, iphelperMaxHopsViolation=iphelperMaxHopsViolation, dhcpSnoopingSourceFilterVlanTable=dhcpSnoopingSourceFilterVlanTable, iphelperAgentInfoViolation=iphelperAgentInfoViolation, dhcpSnoopingPortEntry=dhcpSnoopingPortEntry, dhcpSnoopingBindingTable=dhcpSnoopingBindingTable, dhcpSnoopingBindingType=dhcpSnoopingBindingType, dhcpSnoopingVlanEntry=dhcpSnoopingVlanEntry, iphelperDhcpOption82FormatASCIIField2=iphelperDhcpOption82FormatASCIIField2, dhcpSnoopingBindingIpAddress=dhcpSnoopingBindingIpAddress, iphelperOption82ErrStatsEntry=iphelperOption82ErrStatsEntry, DhcpSnoopingOption82ASCIIFieldType=DhcpSnoopingOption82ASCIIFieldType, iphelperOpt82vlan=iphelperOpt82vlan, genericUdpServiceStatRxFromClient=genericUdpServiceStatRxFromClient, genericUdpServiceDstTable=genericUdpServiceDstTable, PYSNMP_MODULE_ID=alcatelIND1UDPRelayMIB, iphelperResetAllOpt82ErrStats=iphelperResetAllOpt82ErrStats, dhcpSnoopingBindingDatabaseAction=dhcpSnoopingBindingDatabaseAction, iphelperStatGroup=iphelperStatGroup, iphelperBootupOption=iphelperBootupOption, alaGenericUdpServiceDstIpEntry=alaGenericUdpServiceDstIpEntry, IphelpereOption82ASCIIFieldType=IphelpereOption82ASCIIFieldType, alaDhcpClientTrapsObj=alaDhcpClientTrapsObj, genericUdpServiceStatTxToVlan=genericUdpServiceStatTxToVlan, dhcpSnoopingBindingDatabaseSyncTimeout=dhcpSnoopingBindingDatabaseSyncTimeout, genericUdpServiceDstGroup=genericUdpServiceDstGroup, iphelperForwDelayViolation=iphelperForwDelayViolation, iphelperDhcpOption82StringValue=iphelperDhcpOption82StringValue, iphelperOpt82agentInfoViolationCnt=iphelperOpt82agentInfoViolationCnt, dhcpSnoopingGroup=dhcpSnoopingGroup, genericUdpServiceMIB=genericUdpServiceMIB, iphelperDhcpOption82FormatASCIIField1=iphelperDhcpOption82FormatASCIIField1, iphelperPXESupport=iphelperPXESupport, iphelperResetAllStats=iphelperResetAllStats, dhcpSnoopingOption82FormatASCIIConfigurableIndex=dhcpSnoopingOption82FormatASCIIConfigurableIndex, iphelperStatTable=iphelperStatTable, alaDhcpClientAddressExpiryTrap=alaDhcpClientAddressExpiryTrap, iphelperStatsNextHopIpAddr=iphelperStatsNextHopIpAddr, dhcpSnoopingBindingEntry=dhcpSnoopingBindingEntry, dhcpSnoopingBindingStatus=dhcpSnoopingBindingStatus, dhcpSnoopingSourceFilterVlanFilteringStatus=dhcpSnoopingSourceFilterVlanFilteringStatus, dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField5StrVal, genericUdpServiceRowStatus=genericUdpServiceRowStatus, alaDhcpClientTrapsObjectGroup=alaDhcpClientTrapsObjectGroup, alcatelIND1UDPRelayMIBObjects=alcatelIND1UDPRelayMIBObjects, dhcpSnoopingPortTrustMode=dhcpSnoopingPortTrustMode, alaMdnsAdminStatus=alaMdnsAdminStatus, dhcpSnoopingGroup2=dhcpSnoopingGroup2, dhcpSnoopingSourceFilterVlanNumber=dhcpSnoopingSourceFilterVlanNumber, iphelperEntry=iphelperEntry, dhcpSnoopingMIB=dhcpSnoopingMIB, genericUdpServiceEntry=genericUdpServiceEntry, dhcpSnoopingBindingPersistencyStatus=dhcpSnoopingBindingPersistencyStatus, alaMdnsGreTunnelName=alaMdnsGreTunnelName, dhcpSnoopingBindingDatabaseLastSyncTime=dhcpSnoopingBindingDatabaseLastSyncTime, iphelperForwardOption=iphelperForwardOption, dhcpSnoopingOpt82DataInsertionStatus=dhcpSnoopingOpt82DataInsertionStatus, iphelperDhcpOption82FormatASCIIField5StringValue=iphelperDhcpOption82FormatASCIIField5StringValue, dhcpSnoopingBindingIfIndex=dhcpSnoopingBindingIfIndex, dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal=dhcpSnoopingOption82FormatASCIIConfigurableField3StrVal, dhcpSnoopingBindingMacAddress=dhcpSnoopingBindingMacAddress, iphelperAgentInformationPolicy=iphelperAgentInformationPolicy, genericUdpServiceDstTblRowStatus=genericUdpServiceDstTblRowStatus, iphelperBootupPacketOption=iphelperBootupPacketOption, dhcpSnoopingOption82FormatASCIIConfigurableStatus=dhcpSnoopingOption82FormatASCIIConfigurableStatus, iphelperDhcpOption82FormatASCIIField5=iphelperDhcpOption82FormatASCIIField5)
