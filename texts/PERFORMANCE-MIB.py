#
# PySNMP MIB module PERFORMANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/PERFORMANCE-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 21:14:09 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
IntDateTime, = mibBuilder.importSymbols("EQUIPMENT-MIB", "IntDateTime")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, MibIdentifier, Unsigned32, iso, NotificationType, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibIdentifier", "Unsigned32", "iso", "NotificationType", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
performance = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 102))
if mibBuilder.loadTexts: performance.setLastUpdated('0211150000Z')
if mibBuilder.loadTexts: performance.setOrganization('SAGEM/DR Tolbiac Centre')
if mibBuilder.loadTexts: performance.setContactInfo(' ')
if mibBuilder.loadTexts: performance.setDescription('     \n\tModification: \n\t\t\tDate: 15 11 2002\n\t\t\tDescription: \n\t\t\tsagemDr replace sagem-dr\n\t\t\tNOTIFICATION-TYPE replace TRAP-TYPE\n\t\n\tModification: \n\t\t\tDate: 20 12 1999\t \n\t\t\tDescription: modification of comments\n\tModification: \n\t\t\tDate: 25 11 1999\t \n\t\t\tName: thresholdUas,thresholdSes,thresholdEs,thresholdBbe\n\t\t\tDescription: read-write instead of read-only\n\tModification:\n\t\t\tDate: 19 11 1999\n\t\t\tName: \n\t\t\tDescription: modification of comments\t\t \n\tCreation: \n\t\t\tDate: 25 10 1999 \n\t\t\tDescription: \n\t\t\tThe MIB module describes performance records.\n\t\t\tIt also describes the traps that could be sent \n\t\t\teither to notify a threshold or a non null quality \n\t\t\trecord, for the devices that support that feature.\n\t')
class NearFar(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("near", 1), ("far", 2))

perfClear = MibScalar((1, 3, 6, 1, 4, 1, 1038, 102, 1), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfClear.setStatus('current')
if mibBuilder.loadTexts: perfClear.setDescription('When a set command is issued on this variable, this clears a \n\tpart of the performance record depending on the value of the oid:\n\tperformance\t: all the performance records\n\tcptTable\t: all the counter table\n\tuasTable\t: all the unavailable periods table\n\toid\t\t: the counter and uas records of this object\n\tAn equipment may implement only a subset of these commands.')
cptNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 102, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptNumber.setStatus('current')
if mibBuilder.loadTexts: cptNumber.setDescription("Number of used records (rows) in 'cptTable'.")
cptTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 102, 3), )
if mibBuilder.loadTexts: cptTable.setStatus('current')
if mibBuilder.loadTexts: cptTable.setDescription('List of cpt in equipment.')
cptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1), ).setIndexNames((0, "PERFORMANCE-MIB", "cptObject"), (0, "PERFORMANCE-MIB", "cptNearFar"), (0, "PERFORMANCE-MIB", "cptDuration"), (0, "PERFORMANCE-MIB", "cptDate"))
if mibBuilder.loadTexts: cptEntry.setStatus('current')
if mibBuilder.loadTexts: cptEntry.setDescription('A particular cpt of the equipment.')
cptObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptObject.setStatus('current')
if mibBuilder.loadTexts: cptObject.setDescription('A reference to the function/interface from which this reccord\n\twas taken')
cptName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptName.setStatus('current')
if mibBuilder.loadTexts: cptName.setDescription("A text string which identifies the object localisation. For the \n\tstructure of this string, see 'logName' in the log MIB ")
cptNearFar = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 3), NearFar()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptNearFar.setStatus('current')
if mibBuilder.loadTexts: cptNearFar.setDescription('Indicates near or far performance record')
cptDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptDuration.setStatus('current')
if mibBuilder.loadTexts: cptDuration.setDescription("The full duration of measurement for the record.\n\tThis table contains either logged entries and current ones.\n\tFor curent performance counters, it is not the actual mesured\n\tduration, but the duration from start to normal end.\n\tThe standard durations are 15 minutes and 24 hours; the value \n\tcan be coded in TimeTicks or  in minute (see the variable\n\t'perfDurationUnit')")
cptDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 5), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptDate.setStatus('current')
if mibBuilder.loadTexts: cptDate.setDescription('When the record had started.')
cptUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptUAS.setStatus('current')
if mibBuilder.loadTexts: cptUAS.setDescription('Number of UnAvailable Seconds mesured.')
cptSES = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptSES.setStatus('current')
if mibBuilder.loadTexts: cptSES.setDescription('Number of Severely Errored Seconds mesured.')
cptES = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptES.setStatus('current')
if mibBuilder.loadTexts: cptES.setDescription('Number of Errored Seconds mesured.')
cptBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptBBE.setStatus('current')
if mibBuilder.loadTexts: cptBBE.setDescription('Number of Background Errors Blocks mesured.')
uapNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 102, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapNumber.setStatus('current')
if mibBuilder.loadTexts: uapNumber.setDescription("Number of unavailable period records stored in the 'uapTable'.")
uapTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 102, 5), )
if mibBuilder.loadTexts: uapTable.setStatus('current')
if mibBuilder.loadTexts: uapTable.setDescription('List of unavailable period records in equipment.')
uapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1), ).setIndexNames((0, "PERFORMANCE-MIB", "uapObject"), (0, "PERFORMANCE-MIB", "uapNearFar"), (0, "PERFORMANCE-MIB", "uapBegin"))
if mibBuilder.loadTexts: uapEntry.setStatus('current')
if mibBuilder.loadTexts: uapEntry.setDescription('A particular unavailable period of the equipment.')
uapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapObject.setStatus('current')
if mibBuilder.loadTexts: uapObject.setDescription('A reference to the function/interface from witch this reccord\n\twas taken.')
uapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapName.setStatus('current')
if mibBuilder.loadTexts: uapName.setDescription("A text string which identifies the object localisation. For the \n\tstructure of this string, see 'logName' in the log MIB ")
uapNearFar = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1, 3), NearFar()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapNearFar.setStatus('current')
if mibBuilder.loadTexts: uapNearFar.setDescription('Indicates near or far performance record')
uapBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1, 4), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapBegin.setStatus('current')
if mibBuilder.loadTexts: uapBegin.setDescription('When the unavailable period has started.')
uapEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 5, 1, 5), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uapEnd.setStatus('current')
if mibBuilder.loadTexts: uapEnd.setDescription('When the unavailable period has finished.')
thresholdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 102, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdNumber.setStatus('current')
if mibBuilder.loadTexts: thresholdNumber.setDescription('Number of threshold in equipment.')
thresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 102, 7), )
if mibBuilder.loadTexts: thresholdTable.setStatus('current')
if mibBuilder.loadTexts: thresholdTable.setDescription('List of threshold in equipment.')
thresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1), ).setIndexNames((0, "PERFORMANCE-MIB", "thresholdObject"), (0, "PERFORMANCE-MIB", "thresholdNearFar"), (0, "PERFORMANCE-MIB", "thresholdDuration"), (0, "PERFORMANCE-MIB", "thresholdType"))
if mibBuilder.loadTexts: thresholdEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdEntry.setDescription('A particular threshold of the equipment.')
thresholdObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdObject.setStatus('current')
if mibBuilder.loadTexts: thresholdObject.setDescription('A reference to the interface or the interface type to which\n\tthese parameters apply.')
thresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdName.setStatus('current')
if mibBuilder.loadTexts: thresholdName.setDescription("A text string which identifies the interface localisation. \n\tFor the structure of this string, see 'logName' in the \n\tlog MIB ")
thresholdNearFar = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 3), NearFar()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdNearFar.setStatus('current')
if mibBuilder.loadTexts: thresholdNearFar.setDescription('Indicates near or far performance threshold.\n\tEquipment may or may not implement far threshold.')
thresholdDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdDuration.setStatus('current')
if mibBuilder.loadTexts: thresholdDuration.setDescription('The normal duration of the counter with which the threshold\n\tis associed. \n\tThe standard durations are 15 minutes and 24 hours; \n\t')
thresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdType.setStatus('current')
if mibBuilder.loadTexts: thresholdType.setDescription("When set to `raise' the event threshold exceded is generated \n\twhen one of the corresponding counter cross its theshold.\n\tWhen set to `clear', the event threshold exceded is cleared \n\twhen there is no counters above of its corresponding threshold.\n\tThe `clear'thresholds are optionnal(the standard value is zero)\n\t")
thresholdUas = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdUas.setStatus('current')
if mibBuilder.loadTexts: thresholdUas.setDescription('The number of unavailable seconds within a counting \n\tperiod above which a performance event is issued \n\tfor the interface/function')
thresholdSes = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdSes.setStatus('current')
if mibBuilder.loadTexts: thresholdSes.setDescription('The number of severely errored seconds within a \n\tcounting period above which a performance event \n\tis issued for the interface/function')
thresholdEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdEs.setStatus('current')
if mibBuilder.loadTexts: thresholdEs.setDescription('The number of errored seconds within a counting\n\t period above which a performance event is issued \n\tfor the interface/function')
thresholdBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 102, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdBbe.setStatus('current')
if mibBuilder.loadTexts: thresholdBbe.setDescription('The number of background block errors within a\n\tcounting period above which a performance event is\n\tissued for the interface/function')
perfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 102, 0))
qualityTrap = NotificationType((1, 3, 6, 1, 4, 1, 1038, 102, 0, 2)).setObjects(("PERFORMANCE-MIB", "cptObject"), ("PERFORMANCE-MIB", "cptName"), ("PERFORMANCE-MIB", "cptNearFar"), ("PERFORMANCE-MIB", "cptDuration"), ("PERFORMANCE-MIB", "cptDate"), ("PERFORMANCE-MIB", "cptUAS"), ("PERFORMANCE-MIB", "cptSES"), ("PERFORMANCE-MIB", "cptES"), ("PERFORMANCE-MIB", "cptBBE"))
if mibBuilder.loadTexts: qualityTrap.setStatus('current')
if mibBuilder.loadTexts: qualityTrap.setDescription('This trap allows the equipment to notify its quality records')
if mibBuilder.loadTexts: qualityTrap.setReference('')
mibBuilder.exportSymbols("PERFORMANCE-MIB", thresholdEs=thresholdEs, thresholdEntry=thresholdEntry, thresholdObject=thresholdObject, uapObject=uapObject, thresholdUas=thresholdUas, uapNearFar=uapNearFar, uapTable=uapTable, perfTraps=perfTraps, thresholdBbe=thresholdBbe, cptObject=cptObject, thresholdNumber=thresholdNumber, NearFar=NearFar, cptES=cptES, PYSNMP_MODULE_ID=performance, uapName=uapName, cptTable=cptTable, thresholdSes=thresholdSes, cptNearFar=cptNearFar, thresholdType=thresholdType, cptSES=cptSES, cptName=cptName, uapEnd=uapEnd, cptNumber=cptNumber, cptDate=cptDate, qualityTrap=qualityTrap, uapBegin=uapBegin, uapNumber=uapNumber, cptEntry=cptEntry, thresholdDuration=thresholdDuration, cptUAS=cptUAS, cptBBE=cptBBE, perfClear=perfClear, cptDuration=cptDuration, thresholdName=thresholdName, thresholdTable=thresholdTable, uapEntry=uapEntry, performance=performance, thresholdNearFar=thresholdNearFar)
