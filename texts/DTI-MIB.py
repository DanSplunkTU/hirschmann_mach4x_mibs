#
# PySNMP MIB module DTI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DTI-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 04:09:13 2022
# On host fv-az77-149 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, NotificationType, MibIdentifier, Gauge32, iso, ObjectIdentity, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Counter32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Counter32", "Integer32", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
dtiMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7))
dtiMib.setRevisions(('2006-06-28 00:00', '2005-08-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dtiMib.setRevisionsDescriptions(('Revised Version\n        includes ECN M-OSSI-N-06.0278-4', 'Initial version of the DTI MIB module.\n        This revision is published as part of the CableLabs \n        M-CMTS specification.\n        Copyright 2005 Cable Television Laboratories, Inc.\n        All rights reserved.',))
if mibBuilder.loadTexts: dtiMib.setLastUpdated('200606280000Z')
if mibBuilder.loadTexts: dtiMib.setOrganization('CableLabs Cable Television Laboratories, Inc')
if mibBuilder.loadTexts: dtiMib.setContactInfo('Postal: Cable Television Laboratories, Inc\n            858 Coal Creek Circle\n            Louisville, CO 80027\n            U.S.A.\n            Phone:  +1 303-661-9100\n            Fax:    +1 303-661-9199\n            E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: dtiMib.setDescription('This MIB module provides the management objects necessary\n        to configure and manage the DOCSIS Timing Interface \n        devices.')
class DtiCableAdvance(TextualConvention, OctetString):
    description = 'The early time adjustment the Client applies to the\n        DTI timing frame to mitigate the propagation delay \n        between the DTI server and client.  The cable advance\n        value is calculated by the DTI server and sent to the \n        DTI client.\n\n        The DTI cable Advance is a 24-bit field.  The first two \n        bytes represent the integer value of the 149.8 MHz sample \n        clock cycles that measure the Cable advance value; the \n        third octet represents the remaining fraction of the cable \n        advance value in units of the 256th of the 149.8 MHz \n        clock cycle.'
    status = 'current'
    displayHint = '2d-1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

dtiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 0))
dtiMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1))
dtiProtocolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1))
dtiServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2))
dtiClientObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 3))
dtiServerProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 1))
dtiServerGlobalParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2))
dtiProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1), )
if mibBuilder.loadTexts: dtiProtocolTable.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolTable.setDescription('This table describes the DTI protocol related information\n        contained in Server and Client Frames of a DTI \n        client-server pair.')
dtiProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dtiProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolEntry.setDescription('A conceptual row entry in the DTI Protocol table.\n        A DTI server has an entry for each client interface. \n        A DTI client has an entry for each server connection. \n        A DTI server (proxy) is a client of the root server DTI \n        input.')
dtiProtocolEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("root", 1), ("server", 2), ("client", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolEntityType.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolEntityType.setDescription("The type of DTI interface of this entry in the managed\n        entity. \n        'root' \n          indicates the interface generates DTI Server\n          Frames and processes DTI Client Frames from a proxy \n          server or a client. \n        'server' \n          indicates the interface generates DTI Server Frames\n          and processes DTI Client Frames from a DTI client.\n        'client' \n           indicates the interface processes DTI Server Frames and \n           generates DTI Client Frames.")
dtiProtocolClientClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ituI", 1), ("ituII", 2), ("ituIII", 3), ("st3", 4), ("dtiClock", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientClockType.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientClockType.setDescription('The clock Type of the client as reported in DTI client\n        Frames.')
dtiProtocolServerStatusFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("warmup", 1), ("freerun", 2), ("fastTrackingMode", 3), ("normalMode", 4), ("holdoverMode", 5), ("clientStable", 6), ("testMode", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerStatusFlag.setReference('DOCSIS Timing Interface Specification, DTI Server-Client\n            Protocol Interaction.')
if mibBuilder.loadTexts: dtiProtocolServerStatusFlag.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerStatusFlag.setDescription("The current Operational Status of the server side of the\n        DTI interface. This MIB object should be updated no more \n        than once per second. The Server reports the status of the\n        DTI interface associated to this entry as follows: \n\n        'warmup' \n              The server clock has not yet stabilized and has not \n              acquired a stable Time of Day.\n        'freerun'\n              The server has a stable clock and Time of Day but \n              is not locked to an external clock reference.\n        'fastTrackingMode'\n              The server is in the process of locking to the \n              timing reference.\n        'normalMode'\n              The server is locked to the timing reference.\n        'holdover'\n              The server has lost the timing reference and is in \n              holdover mode.\n        'clientStable'\n              The server has verified that the Client phase error\n              is acceptable for this DTI interface entry. This \n              value is deprecated as does not indicate the status\n              of the server side of the DTI interface. The performace \n              stable client is reported by \n              dtiProtocolServerClientStableFlag. \n\n        'testMode'\n              The server has entered in  Test Mode for this\n              DTI entry interface due a set to 'true' of \n              dtiProtocolControlTestMode or because is receiving \n              test mode frames from the DTI client remote end.")
dtiProtocolClientStatusFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("warmup", 1), ("freerun", 2), ("fastTrackingMode", 3), ("normalMode", 4), ("holdoverMode", 5), ("bridgingMode", 6), ("testMode", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientStatusFlag.setReference('DOCSIS Timing Interface Specification, DTI Client \n            Operation.')
if mibBuilder.loadTexts: dtiProtocolClientStatusFlag.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientStatusFlag.setDescription("The current Operational Status of the client side of the\n        DTI interface. This MIB object should be updated no more \n        than once per second.\n        The Client status values are:\n\n        'warmup' \n             The client clock has not stabilized yet.\n        'freerun'\n             The client has a stable clock but has not locked \n             to an external clock reference yet.\n        'fastTrackingMode'\n             The client is in the process of locking to the \n             timing reference.\n        'normalMode'\n             The client is locked to the timing reference.\n        'holdover'\n             The client has lost the timing reference and is in \n             holdover mode.\n        'bridgingMode'\n             The client has lost its timing reference but is under\n             acceptable operational conditions based on previous \n             data acquired in 'normalMode' state.\n        'testMode' (Rephrase this definition)\n             The client has entered in Test Mode for this DTI \n             interface entry due to a set to 'true' of \n             dtiProtocolControlTestMode or because is receiving \n             Test Signaling frames from the DTI Server remote end.")
dtiProtocolServerToDState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerToDState.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerToDState.setDescription("Indicates the validity of the Time of Day.\n        Possible values are 'valid' and 'invalid'.\n        When the object dtiProtocolControlToDValue\n        Corresponding to this Client-Server connection or the\n        global object dtiServerGlobalToDValue \n        is set by a manager rather than acquired via the protocol,\n        'valid'.\n        A ToD invalid state could be a consequence of an improper \n        configuration of dtiServerToDSources or connectivity \n        problems within the ToD protocol.")
dtiProtocolServerToDType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("userTime", 2), ("ntpv4", 3), ("gps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerToDType.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerToDType.setDescription("Indicates the current Time of Day source for DTI\n        Server-Client connection.\n        'default' indicates the ToD of the DTI server is used and \n            implies that this value is not updated via GPS or NTP.\n        'userTime' indicates the ToD value was configured by the \n            management interface. This object reports 'userTime'\n            when dtiProtocolServerToDValue is set by a manager\n            entity.\n        'ntpv4' indicates NTP, Network Time Protocol version 4.\n        'gps' indicates GPS ToD gpssec.")
dtiProtocolServerToDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(33, 33), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerToDValue.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerToDValue.setDescription('The value of the Time of Day sent by the server in the\n        format DDDDD.YYYY/MM/DD.HH:MM:SS.SHH:F.D independent of \n        being transmitted in short or verbose message format in\n        the DTI Server Frame. Reading this object returns the ToD\n        value for the specific DTI Client-Server connection.')
dtiProtocolServerCableAdvanceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerCableAdvanceFlag.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerCableAdvanceFlag.setDescription("This object indicates the cable advance status of the DTI\n        Server Frame. This object is not updated more than once per\n        second. If dtiProtocolServerCableAdvanceValue is set to a \n        valid value by a manager entity, this objects reports \n        'manual'.")
dtiProtocolServerCableAdvanceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 9), DtiCableAdvance()).setUnits('clockSamples').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolServerCableAdvanceValue.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerCableAdvanceValue.setDescription("A Set to zero-length string returns the control of the\n        Cable Advance Field and Cable Advance Flag Bit to the DTI\n        server.\n\n        Setting this object to a valid value sets the DTI Server \n        Frames Frame Cable Advance field to the specified value and\n        sets the Cable Advance Status Flag BIT to '1' (valid), and\n        sets the object dtiProtocolServerCableAdvanceFlag to \n        'manual' for this entry.")
dtiProtocolClientPhaseError = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientPhaseError.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientPhaseError.setDescription('The phase error measured at the client as reported to the\n        server in the DTI Client Frames. This object is quantified\n        in units of a 149.8MHz clock cycles. This object \n        represents the 16 MSB bits of the 3 octet Client Clock \n        Integrated Phase field.')
dtiProtocolClientVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientVersion.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientVersion.setDescription("This object reports the client DTI protocol version as\n        indicated in the 10-bit field 'CLIENT DTI VERSION'.")
dtiProtocolClientPathTraceability = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientPathTraceability.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientPathTraceability.setDescription('A reference to the index of dtiPathTraceabilityTable to\n        which this DTI Client-Server connection has associated its\n        traceable path. It is likely that many traceable paths of\n        DTI clients would have the same rootServer and proxy server\n        for multiple Client Server. A manager application can build\n        the Traceability Path, e.g., of a DTI client,\n        if reading this entry from a proxy DTI server as follows:\n\n        Client:\n           This entry DTI Client IP Address,\n           This entry ifIndex, (see below) \n           dtiProtocolClientVersion\n        Proxy Server:\n           dtiPathTraceabilityServerInetAddr,\n           dtiPathTraceabilityServerOutPhyIdx,\n           dtiPathTraceabilityServerProtVersion\n        RootServer:\n           dtiPathTraceabilityRootServerInetAddr,\n           dtiPathTraceabilityRootServerOutPhyIdx,\n           dtiPathTraceabilityRootServerProtVersion\n\n        For the DTI client the Physical port would correspond to:\n           PhysicalIndex where\n           entAliasMappingIdentifier.PhysicalIndex = ifIndex')
dtiProtocolServerClientStableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolServerClientStableFlag.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolServerClientStableFlag.setDescription('This object indicates the client performance stable status of the DTI\n        Server Frame. This object is not updated more than once per\n        second.')
dtiProtocolControlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: dtiProtocolControlTable.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlTable.setDescription('This table is an extension of dtiProtocolTable for the\n        control of individual DTI Client-Server connections.')
dtiProtocolControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dtiProtocolControlEntry.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlEntry.setDescription('A conceptual row entry of this table.')
dtiProtocolControlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolControlTimeInterval.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlTimeInterval.setDescription('The time interval used to calculate\n        dtiProtocolPerformanceDelay and \n        dtiProtocolPerformanceWanderTSeconds for this Client-Server\n        connection.\n        The value zero indicates the Wander for T Seconds and \n        Protocol Delay is not calculated.')
dtiProtocolControlErrorRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolControlErrorRateInterval.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlErrorRateInterval.setDescription('The time interval used to calculate the value of\n        dtiProtocolPerformanceFrameErrorRate for this Client-Server\n        connection. The value zero indicates no current FER \n        measurements are being taken.')
dtiProtocolControlJitterTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolControlJitterTimeInterval.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlJitterTimeInterval.setDescription('The time interval used to calculate\n        dtiProtocolPerformancePeakToPeakJitter for this \n        Client-Server connection.\n        The value zero indicates no Jitter measurements are being\n        taken.')
dtiProtocolControlTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolControlTestMode.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlTestMode.setDescription("If set to 'true' starts the sequence of Test Mode\n        on this DTI Client-Server connection.\n        The Test Mode consist in a sequence of all DTI frames\n        set to '1' before the Manchester line code is applied.")
dtiProtocolControlToDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(33, 33), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiProtocolControlToDValue.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolControlToDValue.setDescription('The control object to specify a particular ToD value to\n        a Client-Server connection. The format of this object is \n        DDDDD.YYYY/MM/DD.HH:MM:SS.SHH:F.D independent of being\n        transmitted in short or verbose message format in the DTI\n        Server Frame.\n\n        Setting this object to a zero length string resets the ToD\n        source of this DTI Client-Server connection to the current\n        Server ToD reference of dtiServerGlobalToDMethod and\n        dtiServerGlobalToDValue.\n\n        Reading this value returns the last set value of this \n        object or zero length string if a global ToD value and/or\n        method were lately performed.')
dtiProtocolPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3), )
if mibBuilder.loadTexts: dtiProtocolPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceTable.setDescription('The DTI protocol performance metrics of a DTI\n        Client-Server Connection. In the DTI server an entry\n        of this table registers the DTI Client frames performance.\n        In the DTI client the measurements \n        correspond to the DTI server frames performance.')
dtiProtocolPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dtiProtocolPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceEntry.setDescription("A conceptual row entry in the DTI performance table.\n        This table is an extension of dtiProtocolTable for \n        entries with dtiProtocolEntityType equals to 'root' \n        and 'server'.")
dtiProtocolPerformanceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1, 1), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolPerformanceDelay.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceDelay.setDescription('The roundtrip delay measured in nanoseconds.')
dtiProtocolPerformanceFrameErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1, 2), Unsigned32()).setUnits('FER').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolPerformanceFrameErrorRate.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceFrameErrorRate.setDescription('Frame Error Rate (FER) corresponds to the ratio of DTI\n        protocol frames in error and the total of frames received\n        during a period of time. \n        Frames in error and total frames correspond to the delta\n        of ifErrors and ifUcastPackets MIB objects respectively \n        during the period of time defined by \n        dtiFrameErrorRateInterval object. For the DTI server the \n        FER value is based on the DTI client interval frames and\n        for the DTI client, corresponds to the DTI \n        server interval frames.')
dtiProtocolPerformancePeakToPeakJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('picoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolPerformancePeakToPeakJitter.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformancePeakToPeakJitter.setDescription('The maximum phase variation (with frequency components\n        > 10 Hz) in the client frame with respect to the master \n        clock and reported in the DTI client frame for the time \n        interval specified in dtiProtocolControlJitterTimeInterval\n        object.')
dtiProtocolPerformanceWander35Second = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('picoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolPerformanceWander35Second.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceWander35Second.setDescription('The largest wander value observed by the server in a\n        35-second interval for the corresponding Client-Server\n        connection.')
dtiProtocolPerformanceWanderTSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('picoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolPerformanceWanderTSeconds.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolPerformanceWanderTSeconds.setDescription('The largest wander value observed by the server in a time\n        interval defined by dtiWanderTimeInterval for the \n        corresponding Client-Server connection.')
dtiProtocolClientFsmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6), )
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsTable.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsTable.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsTable.setDescription('Statistics associated to the DTI client state machine.\n        This table contains counters of the most significant\n        DTI finite State machine transitions and states as \n        reported in the DTI Client Frame.\n\n        Below is a description of the State Transition and \n        counters supported (not all State Transitions need \n        object definitions):\n\n        T1: Warmup to Free-run\n          Normally once after the clock warms up. \n          Rather than defining a counter for this \n          state transition, the managed system updates\n          the object ifDiscontinuity with the time when\n          the clock performs a transition to Free-run \n          State\n        T2: Free-run to Fast \n          Not defined counter. T2 = T3 + 1\n        T3: Fast to Free-run (dtiProtocolClientFsmStatsT3Count)\n        T4: Fast to Normal (dtiProtocolClientFsmStatsT4Count)\n          Counts the times the clock enters to the normal\n          mode of operation.\n        T5: Normal to Bridging\n          Not defined counter. T5 = T6 + T7\n        T6: Bridging to Normal (dtiProtocolClientFsmStatsT6Count)\n        T7: Bridging to Holdover (dtiProtocolClientFsmStatsT7Count)\n        T8: Holdover to Fast \n          No counter defined. \n          If DTI Client State is Holdover, T8 = T7 - 1 \n          other DTI Client State, T8 = T7\n\n        This table also includes the active time the DTI client is\n        in Normal state(dtiProtocolClientFsmStatsNormalActiveTime)\n        and Holdover state \n        (dtiProtocolClientFsmStatsHoldoverActiveTime).')
dtiProtocolClientFsmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsEntry.setDescription('A conceptual row entry in the DTI FSM Statistics table.\n        In the DTI Server (proxy) this table has an entry for \n        each DTI client interface as well as an entry for each \n        Server (proxy) interface to root server. In the DTI client\n        there is an entry for each client interface.')
dtiProtocolClientFsmStatsT3Count = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT3Count.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT3Count.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT3Count.setDescription('Counts the Transition from Fast to Free-run state (T3).\n        This transition occurs when the client aborts the clock\n        acquisition due to a high Frame Error Rate.')
dtiProtocolClientFsmStatsT4Count = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT4Count.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT4Count.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT4Count.setDescription('Counts the Transition from Fast to Normal state (T4).\n        This transition occurs when the client acquires for the \n        first time or recovers a stable clock reference.')
dtiProtocolClientFsmStatsT6Count = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT6Count.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT6Count.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT6Count.setDescription('Counts the Transition from Bridging to Normal state (T6).\n        This transition occurs when in Bridging mode the Frame \n        Error rate is reduced and the DTI client recovers the clock\n        reference before a bridging mode timeout.')
dtiProtocolClientFsmStatsT7Count = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT7Count.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT7Count.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsT7Count.setDescription('Counts the Transition from Bridging to Holdover state\n        (T7). This transition occurs when the client is in Bridging\n        mode, the bridging timeout expires and the DTI client \n        enters in Holdover mode.')
dtiProtocolClientFsmStatsNormalActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsNormalActiveTime.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsNormalActiveTime.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsNormalActiveTime.setDescription('The cumulative count in 10 KHz clock cycles the DTI client\n        is being in Normal Mode.\n        The percentage of time the DTI client is being operating in\n        Normal Mode is calculated as the ratio of this object and \n        sysUpTime within two consecutive measurements. Note that \n        the value sysUpTime is given in hundreds of seconds, \n        therefore it needs to be multiplied by 100.')
dtiProtocolClientFsmStatsHoldoverActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 6, 1, 6), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsHoldoverActiveTime.setReference('DOCSIS Timing Interface Specification, DTI Client Mode \n            Transition Diagram.')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsHoldoverActiveTime.setStatus('current')
if mibBuilder.loadTexts: dtiProtocolClientFsmStatsHoldoverActiveTime.setDescription('The cumulative count in 10 KHz clock cycles the DTI client\n        is being in Holdover Mode.\n        The percentage of time the DTI client is being operating in\n        Holdover Mode is calculated as the ratio of this object and\n        sysUpTime within two consecutive measurements. Note that \n        the value sysUpTime is given in hundreds of seconds; \n        therefore it needs to be multiplied by 100.')
dtiPathTraceabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4), )
if mibBuilder.loadTexts: dtiPathTraceabilityTable.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityTable.setDescription('The Traceable Path information sent from the DTI server\n        to the client. The traceability path includes node \n        information about DTI root server and DTI server (proxy).\n        The entries of this table are pointed by dtiProtocolTable\n        in both DTI Server and Client.\n        The DTI server may aggregate in a single entry all the \n        root-to-server traceable paths that are common across\n        multiple DTI clients.')
dtiPathTraceabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1), ).setIndexNames((0, "DTI-MIB", "dtiPathTraceabilityIndex"))
if mibBuilder.loadTexts: dtiPathTraceabilityEntry.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityEntry.setDescription("A conceptual row entry in the DTI Path Traceability table.\n        This table is an expansion of the dtiProtocolTable for \n        entries with dtiProtocolEntityType equal to 'server' \n        and 'client'.")
dtiPathTraceabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dtiPathTraceabilityIndex.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityIndex.setDescription('The index of this conceptual entry.')
dtiPathTraceabilityRootServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerInetAddrType.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerInetAddrType.setDescription('The type of internet address for\n        dtiPathTraceabilityRootServerInetAddr.')
dtiPathTraceabilityRootServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerInetAddr.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerInetAddr.setDescription("The IP address of the clock synchronization root server.\n        If this management entity has dtiServerExternalSource \n        'notExternal' this value returns an empty octet string and\n        dtiPathTraceabilityRootServerInetAddrType. \n        The type of this address is determined by the value of the\n        dtiPathTraceabilityRootServerInetAddrType object.")
dtiPathTraceabilityRootServerOutPhyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerOutPhyIdx.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerOutPhyIdx.setDescription('The physical port number of the clock synchronization\n        root server.')
dtiPathTraceabilityServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityServerInetAddrType.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityServerInetAddrType.setDescription('The type of internet address for\n        dtiPathTraceabilityServerInetAddr.')
dtiPathTraceabilityServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityServerInetAddr.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityServerInetAddr.setDescription('The IP address of the clock synchronization server\n        associated with this management entity. The type of this\n        address is determined by the value of the \n        dtiPathTraceabilityServerInetAddrType object.')
dtiPathTraceabilityServerOutPhyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 7), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityServerOutPhyIdx.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityServerOutPhyIdx.setDescription('The physical port number of the clock synchronization\n        server associated with this management entity.')
dtiPathTraceabilityRootServerProtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerProtVersion.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityRootServerProtVersion.setDescription('The DTI Protocol Version of the clock synchronization root\n        server.')
dtiPathTraceabilityServerProtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiPathTraceabilityServerProtVersion.setStatus('current')
if mibBuilder.loadTexts: dtiPathTraceabilityServerProtVersion.setDescription('The DTI Protocol Version of the clock synchronization\n        server associated with this management entity.')
dtiServerRootClockType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ituI", 1), ("ituII", 2), ("ituIII", 3), ("st3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiServerRootClockType.setStatus('current')
if mibBuilder.loadTexts: dtiServerRootClockType.setDescription("The clock type of the root server this server is\n        connected. If dtiServerHopCount is 'root' the clock type\n        is the self clock.\n        'ituI' corresponds to an ITU Type I clock. \n        'ituII' corresponds to an ITU Type II clock. \n        'ituIII' corresponds to an ITU Type III clock.\n        'st3' corresponds to an ANSI T1.101 ST3 clock.")
dtiServerHopCount = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("proxy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiServerHopCount.setStatus('current')
if mibBuilder.loadTexts: dtiServerHopCount.setDescription("This object indicates the type of the DTI server.\n        'root' indicates the server is the DTI root server. 'proxy'\n        indicates the DTI server is connected to a root DTI \n        server.")
dtiServerExternalTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noExternal", 1), ("gps", 2), ("network", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiServerExternalTimingSource.setStatus('current')
if mibBuilder.loadTexts: dtiServerExternalTimingSource.setDescription("The type of external clock that provides the reference\n        for this DTI server.\n        'none' indicates the DTI server has no timing reference \n           input.\n        'gps' indicates the timing source is GPS.\n        'network' indicates the timing is obtained from a network\n           such as a PDH, or SONET network.")
dtiServerToDSources = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("default", 0), ("userTime", 1), ("ntpv4", 2), ("gps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtiServerToDSources.setStatus('current')
if mibBuilder.loadTexts: dtiServerToDSources.setDescription("Indicates the DTI Server's registered Time of Day sources.\n        A bit set to '1' has the following meaning:\n\n        'default' the internal DTI Server ToD reference without \n                external updates.\n        'userTime' indicates the capability of ToD being set by a\n                manager entity either setting \n                dtiServerGlobalToDValue or \n                dtiProtocolControlToDValue. \n        'ntpv4' indicates support of NTP Network Time Protocol \n                version 4.\n        'gps' indicates support of GPS ToD gpssec.\n\n        The initialization or configuration of GPS or NTPv4 ToD \n        sources is not defined in this MIB module.")
dtiServerGlobalTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiServerGlobalTimeInterval.setStatus('current')
if mibBuilder.loadTexts: dtiServerGlobalTimeInterval.setDescription('The time interval used to calculate\n        dtiProtocolPerformanceDelay and \n        dtiProtocolPerformanceWanderTSeconds for all Client-Server\n        connections of the managed system.\n        A set to this object overrides all the entries of \n        dtiProtocolControlTimeInterval previously configured.\n        The value zero indicates the Wander for T Seconds and \n        Protocol Delay is not calculated.')
dtiServerGlobalErrorRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiServerGlobalErrorRateInterval.setStatus('current')
if mibBuilder.loadTexts: dtiServerGlobalErrorRateInterval.setDescription('The time interval used to calculate the value of\n        dtiProtocolPerformanceFrameErrorRate for all Client-Server\n        connections of the managed system.\n        A set to this object overrides all the entries of \n        dtiProtocolControlErrorRateInterval previously configured.\n        The value zero indicates no current FER measurements are \n        being taken.')
dtiServerGlobalJitterTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiServerGlobalJitterTimeInterval.setStatus('current')
if mibBuilder.loadTexts: dtiServerGlobalJitterTimeInterval.setDescription('The time interval used to calculate\n        dtiProtocolPerformancePeakToPeakJitter for all \n        Client-Server connections of the managed system.\n        A set to this object overrides all the entries of \n        dtiProtocolControlErrorRateInterval previously configured.\n        The value zero indicates no Jitter measurements are being \n        taken.')
dtiServerGlobalToDMethod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("userTime", 2), ("ntpv4", 3), ("gps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiServerGlobalToDMethod.setStatus('current')
if mibBuilder.loadTexts: dtiServerGlobalToDMethod.setDescription("Selects the type of ToD Source for the DTI server\n        operation. The set of this object to its enumerated\n        values is described below:\n\n        'default' instructs the DTI server to use the last ToD \n                reference as the value for its internal clock.\n        'userTime' instructs the DTI server to use the value of \n                dtiServerGlobalToDValue for the DTI server internal\n                time ticks clock. \n        'ntpv4' instructs the DTI server to use the NTP Network \n                Time Protocol version 4 as the ToD reference.\n        'gps' instructs the DTI server to use the GPS gpssec ToD\n                as the ToD reference.\n\n        It is recommended to reject an SNMP SET to a particular ToD\n        method if such ToD capability is not active or requires \n        other configuration steps.\n\n        A successful set of this object sets to a zero length \n        string all the DTI Client-Server connections that \n        previously were set via dtiProtocolControlToDValue to \n        particular ToD Values.")
dtiServerGlobalToDValue = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 1, 2, 2, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(33, 33), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiServerGlobalToDValue.setStatus('current')
if mibBuilder.loadTexts: dtiServerGlobalToDValue.setDescription("The control object to specify the ToD value for all DTI\n        server Client-Server connections. The format of this object\n        is DDDDD.YYYY/MM/DD.HH:MM:SS.SHH:F.D independent of being\n        transmitted in short or verbose message format in the DTI\n        Server Frame.\n\n        A set of this object to a valid value different of zero \n        length string automatically sets dtiServerGlobalToDMethod\n        to 'userTime'. Setting this object to zero re-establishes\n        the ToD source to the current Server ToD reference \n        dtiServerGlobalToDMethod 'default', 'ntpProtocol' \n        or 'gps'.")
dtiMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2))
dtiMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 1))
dtiMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 2))
dtiMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 1, 1)).setObjects(("DTI-MIB", "dtiBaseGroup"), ("DTI-MIB", "dtiServerGroup"), ("DTI-MIB", "dtiClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtiMibCompliance = dtiMibCompliance.setStatus('current')
if mibBuilder.loadTexts: dtiMibCompliance.setDescription('The compliance statement for DTI.')
dtiBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 2, 1)).setObjects(("DTI-MIB", "dtiProtocolServerToDState"), ("DTI-MIB", "dtiProtocolEntityType"), ("DTI-MIB", "dtiProtocolClientClockType"), ("DTI-MIB", "dtiProtocolServerStatusFlag"), ("DTI-MIB", "dtiProtocolClientStatusFlag"), ("DTI-MIB", "dtiProtocolServerToDType"), ("DTI-MIB", "dtiProtocolServerToDValue"), ("DTI-MIB", "dtiProtocolServerCableAdvanceFlag"), ("DTI-MIB", "dtiProtocolServerCableAdvanceValue"), ("DTI-MIB", "dtiProtocolClientPhaseError"), ("DTI-MIB", "dtiProtocolClientVersion"), ("DTI-MIB", "dtiProtocolClientPathTraceability"), ("DTI-MIB", "dtiPathTraceabilityRootServerInetAddrType"), ("DTI-MIB", "dtiPathTraceabilityRootServerInetAddr"), ("DTI-MIB", "dtiPathTraceabilityRootServerOutPhyIdx"), ("DTI-MIB", "dtiPathTraceabilityServerInetAddrType"), ("DTI-MIB", "dtiPathTraceabilityServerInetAddr"), ("DTI-MIB", "dtiPathTraceabilityServerOutPhyIdx"), ("DTI-MIB", "dtiPathTraceabilityRootServerProtVersion"), ("DTI-MIB", "dtiPathTraceabilityServerProtVersion"), ("DTI-MIB", "dtiProtocolPerformanceDelay"), ("DTI-MIB", "dtiProtocolPerformanceFrameErrorRate"), ("DTI-MIB", "dtiProtocolPerformancePeakToPeakJitter"), ("DTI-MIB", "dtiProtocolPerformanceWander35Second"), ("DTI-MIB", "dtiProtocolPerformanceWanderTSeconds"), ("DTI-MIB", "dtiProtocolServerClientStableFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtiBaseGroup = dtiBaseGroup.setStatus('current')
if mibBuilder.loadTexts: dtiBaseGroup.setDescription('Group of object applicable to DTI Server and DTI Client.')
dtiServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 2, 2)).setObjects(("DTI-MIB", "dtiProtocolControlTimeInterval"), ("DTI-MIB", "dtiProtocolControlErrorRateInterval"), ("DTI-MIB", "dtiProtocolControlJitterTimeInterval"), ("DTI-MIB", "dtiProtocolControlTestMode"), ("DTI-MIB", "dtiProtocolControlToDValue"), ("DTI-MIB", "dtiServerRootClockType"), ("DTI-MIB", "dtiServerHopCount"), ("DTI-MIB", "dtiServerExternalTimingSource"), ("DTI-MIB", "dtiServerToDSources"), ("DTI-MIB", "dtiServerGlobalTimeInterval"), ("DTI-MIB", "dtiServerGlobalErrorRateInterval"), ("DTI-MIB", "dtiServerGlobalJitterTimeInterval"), ("DTI-MIB", "dtiServerGlobalToDMethod"), ("DTI-MIB", "dtiServerGlobalToDValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtiServerGroup = dtiServerGroup.setStatus('current')
if mibBuilder.loadTexts: dtiServerGroup.setDescription('Group of objects applicable to DTI Server only.')
dtiClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 7, 2, 2, 3)).setObjects(("DTI-MIB", "dtiProtocolClientFsmStatsT3Count"), ("DTI-MIB", "dtiProtocolClientFsmStatsT4Count"), ("DTI-MIB", "dtiProtocolClientFsmStatsT6Count"), ("DTI-MIB", "dtiProtocolClientFsmStatsT7Count"), ("DTI-MIB", "dtiProtocolClientFsmStatsNormalActiveTime"), ("DTI-MIB", "dtiProtocolClientFsmStatsHoldoverActiveTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtiClientGroup = dtiClientGroup.setStatus('current')
if mibBuilder.loadTexts: dtiClientGroup.setDescription('Group of objects applicable to DTI Client.')
mibBuilder.exportSymbols("DTI-MIB", dtiServerProperties=dtiServerProperties, dtiServerHopCount=dtiServerHopCount, dtiMibCompliance=dtiMibCompliance, dtiMibCompliances=dtiMibCompliances, dtiPathTraceabilityRootServerInetAddrType=dtiPathTraceabilityRootServerInetAddrType, dtiMibConformance=dtiMibConformance, dtiProtocolControlJitterTimeInterval=dtiProtocolControlJitterTimeInterval, dtiProtocolClientFsmStatsHoldoverActiveTime=dtiProtocolClientFsmStatsHoldoverActiveTime, PYSNMP_MODULE_ID=dtiMib, dtiServerGlobalToDValue=dtiServerGlobalToDValue, dtiProtocolClientPhaseError=dtiProtocolClientPhaseError, dtiPathTraceabilityTable=dtiPathTraceabilityTable, dtiServerToDSources=dtiServerToDSources, dtiProtocolClientClockType=dtiProtocolClientClockType, dtiClientObjects=dtiClientObjects, dtiProtocolControlToDValue=dtiProtocolControlToDValue, dtiServerGlobalToDMethod=dtiServerGlobalToDMethod, dtiProtocolPerformanceFrameErrorRate=dtiProtocolPerformanceFrameErrorRate, dtiBaseGroup=dtiBaseGroup, dtiPathTraceabilityIndex=dtiPathTraceabilityIndex, dtiPathTraceabilityRootServerProtVersion=dtiPathTraceabilityRootServerProtVersion, dtiMib=dtiMib, dtiServerExternalTimingSource=dtiServerExternalTimingSource, dtiProtocolClientFsmStatsT7Count=dtiProtocolClientFsmStatsT7Count, dtiPathTraceabilityServerProtVersion=dtiPathTraceabilityServerProtVersion, dtiServerGlobalParameters=dtiServerGlobalParameters, dtiProtocolControlEntry=dtiProtocolControlEntry, dtiProtocolPerformanceEntry=dtiProtocolPerformanceEntry, dtiServerGlobalErrorRateInterval=dtiServerGlobalErrorRateInterval, dtiMibGroups=dtiMibGroups, dtiProtocolClientVersion=dtiProtocolClientVersion, dtiProtocolClientFsmStatsT6Count=dtiProtocolClientFsmStatsT6Count, dtiPathTraceabilityRootServerInetAddr=dtiPathTraceabilityRootServerInetAddr, dtiMibObjects=dtiMibObjects, dtiProtocolServerCableAdvanceFlag=dtiProtocolServerCableAdvanceFlag, dtiServerObjects=dtiServerObjects, dtiProtocolControlTestMode=dtiProtocolControlTestMode, dtiNotifications=dtiNotifications, dtiProtocolObjects=dtiProtocolObjects, dtiProtocolClientFsmStatsTable=dtiProtocolClientFsmStatsTable, dtiPathTraceabilityServerInetAddrType=dtiPathTraceabilityServerInetAddrType, dtiPathTraceabilityServerOutPhyIdx=dtiPathTraceabilityServerOutPhyIdx, DtiCableAdvance=DtiCableAdvance, dtiProtocolEntityType=dtiProtocolEntityType, dtiProtocolPerformanceWanderTSeconds=dtiProtocolPerformanceWanderTSeconds, dtiPathTraceabilityEntry=dtiPathTraceabilityEntry, dtiServerGlobalTimeInterval=dtiServerGlobalTimeInterval, dtiServerGroup=dtiServerGroup, dtiProtocolClientFsmStatsT4Count=dtiProtocolClientFsmStatsT4Count, dtiProtocolEntry=dtiProtocolEntry, dtiProtocolPerformanceWander35Second=dtiProtocolPerformanceWander35Second, dtiServerRootClockType=dtiServerRootClockType, dtiProtocolServerCableAdvanceValue=dtiProtocolServerCableAdvanceValue, dtiProtocolPerformanceTable=dtiProtocolPerformanceTable, dtiProtocolPerformanceDelay=dtiProtocolPerformanceDelay, dtiProtocolPerformancePeakToPeakJitter=dtiProtocolPerformancePeakToPeakJitter, dtiProtocolClientFsmStatsEntry=dtiProtocolClientFsmStatsEntry, dtiProtocolServerToDValue=dtiProtocolServerToDValue, dtiProtocolControlTimeInterval=dtiProtocolControlTimeInterval, dtiServerGlobalJitterTimeInterval=dtiServerGlobalJitterTimeInterval, dtiProtocolServerToDState=dtiProtocolServerToDState, dtiPathTraceabilityServerInetAddr=dtiPathTraceabilityServerInetAddr, dtiProtocolControlTable=dtiProtocolControlTable, dtiClientGroup=dtiClientGroup, dtiProtocolServerStatusFlag=dtiProtocolServerStatusFlag, dtiProtocolServerClientStableFlag=dtiProtocolServerClientStableFlag, dtiProtocolTable=dtiProtocolTable, dtiProtocolClientStatusFlag=dtiProtocolClientStatusFlag, dtiProtocolClientFsmStatsT3Count=dtiProtocolClientFsmStatsT3Count, dtiProtocolClientFsmStatsNormalActiveTime=dtiProtocolClientFsmStatsNormalActiveTime, dtiPathTraceabilityRootServerOutPhyIdx=dtiPathTraceabilityRootServerOutPhyIdx, dtiProtocolControlErrorRateInterval=dtiProtocolControlErrorRateInterval, dtiProtocolServerToDType=dtiProtocolServerToDType, dtiProtocolClientPathTraceability=dtiProtocolClientPathTraceability)
