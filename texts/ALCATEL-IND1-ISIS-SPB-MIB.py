#
# PySNMP MIB module ALCATEL-IND1-ISIS-SPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-ISIS-SPB-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:32:37 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1IsisSpb, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1IsisSpb")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
VlanIdOrNone, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "VlanIdOrNone")
IEEE8021BridgePortNumber, IEEE8021PbbServiceIdentifierOrUnassigned, IEEE8021PbbIngressEgress = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber", "IEEE8021PbbServiceIdentifierOrUnassigned", "IEEE8021PbbIngressEgress")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, Bits, TimeTicks, Gauge32, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "Bits", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "NotificationType")
RowStatus, TextualConvention, TruthValue, TimeStamp, TimeInterval, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "TimeStamp", "TimeInterval", "DisplayString", "MacAddress")
alcatelIND1IsisSpbMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1))
alcatelIND1IsisSpbMib.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IsisSpbMib.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IsisSpbMib.setLastUpdated('201311070000Z')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMib.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMib.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMib.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 Configuration Of Global OSPF Configuration Parameters.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
class AlcatelIND1IsisSpbAreaAddress(TextualConvention, OctetString):
    reference = '12.25.1.1.2 a), 12.25.1.2.2 a), 12.25.1.3.2 a), 12.25.1.2.2 a)'
    description = 'This identifier is the 3 Byte IS-IS Area Address.\n                Domain Specific part(DSP). Default is 00-00-00.'
    status = 'current'
    displayHint = '1x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class AlcatelIND1IsisSpbSystemName(TextualConvention, OctetString):
    reference = 'RFC 4945 12.25.1.3.3 d), 12.25.7.1.3 f), 12.25.8.1.3 e)'
    description = 'This is the System Name assigned to this Bridge.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class AlcatelIND1IsisSpbEctAlgorithm(TextualConvention, OctetString):
    reference = '12.3 q)'
    description = 'The 4 byte Equal Cost Multiple Tree Algorithm identifier.\n                This identifies the tree computation algorithm and tie breakers.'
    status = 'current'
    displayHint = '1x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AlcatelIND1IsisSpbMode(TextualConvention, Integer32):
    reference = '27.10'
    description = 'Auto allocation control for this instance\n                of SPB. For SPBV it controls SPVIDs and for SPBM it controls\n                SPSourceID.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("manual", 2))

class AlcatelIND1IsisSpbDigestConvention(TextualConvention, Integer32):
    reference = '28.4.3'
    description = 'The mode of the current Agreement Digest. This\n                determines the level of loop prevention.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("loopFreeBoth", 2), ("loopFreeMcastOnly", 3))

class AlcatelIND1IsisSpbLinkMetric(TextualConvention, Integer32):
    reference = '28.2'
    description = 'The 24 bit cost of an SPB link. A lower metric\n                value means better. Value 16777215 equals Infinity.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16777215)

class AlcatelIND1IsisSpbAdjState(TextualConvention, Integer32):
    reference = '12.25.6.1.3 d), 12.25.6.2.3 d), 12.25.7.1.3 (e'
    description = 'The current state of this SPB adjacency or port.\n                The values are up, down, and testing.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("up", 1), ("down", 2), ("testing", 3))

class AlcatelIND1IsisSpbmSPsourceId(TextualConvention, OctetString):
    reference = '27.15'
    description = 'The Shortest Path Source Identifier for this bridge.\n                It is the high order 3 bytes for multicast DA from this bridge.\n                Note that only the 20 bits not including the top 4 bits are the SPSourceID.'
    status = 'current'
    displayHint = '1x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class AlcatelIND1IsisSpbBridgePriority(TextualConvention, OctetString):
    reference = '13.26.3'
    description = 'The Bridge priority is the top 2 bytes of the Bridge Identifier.\n                Lower values represent a better priority.'
    status = 'current'
    displayHint = '1x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class AlcatelIND1IsisSpbMTID(TextualConvention, Unsigned32):
    reference = '3.23, 3.24'
    description = 'The IS-IS Multi Topology Identifier.'
    status = 'current'
    displayHint = 'd'

class AlcatelIND1IsisSpbmMulticastMode(TextualConvention, Integer32):
    reference = 'NONE'
    description = 'Multicast mode for tandem-multicast.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("sgmode", 0), ("gmode", 1))

class AlcatelIND1IsisSpbIfOperState(TextualConvention, Integer32):
    description = 'The AlcatelIND1IsisSpbIfOperState data type is an\n                 enumerated integer that describes the operational\n                 state of an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("transition", 4))

class AlcatelSpbServiceIdentifier(TextualConvention, Unsigned32):
    reference = 'NONE'
    description = 'The service instance identifier is used at the Customer Backbone\n                 port in SPBM to distinguish a service instance.\n                 The special value of 0xFFFFFF is used for wildcard.\n                 This range also includes the default I-SID.\n                 cf. IEEE8021SpbServiceIdentifierOrAny'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(255, 16777215)

class AlcatelIND1IsisSpbmIsidFlags(TextualConvention, Integer32):
    reference = 'NONE'
    description = 'Flags to indicate multicast source/sink or both.\n                cf. IEEE8021PbbIngressEgress'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("tx", 1), ("rx", 2), ("both", 3))

alcatelIND1IsisSpbMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1))
alcatelIND1IsisSpbSys = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1))
alcatelIND1IsisSpbProtocolConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2))
alcatelIND1IsisSpbSysControlBvlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 1), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysControlBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysControlBvlan.setDescription('The vlan tag applied to ISIS-SPB frames.')
alcatelIND1IsisSpbSysAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysAdminState.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysAdminState.setDescription('Controls the operational state of the ISIS-SPB protocol.\n                 Default value is disable(2).')
alcatelIND1IsisSpbSysAreaAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 3), AlcatelIND1IsisSpbAreaAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysAreaAddress.setReference('12.25.1.3.2, 12.25.1.3.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysAreaAddress.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysAreaAddress.setDescription('The three byte IS-IS Area Address to join. Normally\n                 SPB will use area 00-00-00 however if SPB is being\n                 used in conjunction with IPV4/V6 it may operate\n                 using the IS-IS area address already in use.\n                 This object is persistent.\n                 cf. ieee8021SpbSysAreaAddress')
alcatelIND1IsisSpbSysId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysId.setReference('12.25.1.3.3, 3.21')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysId.setDescription('SYS ID used for all SPB instances on this bridge.\n                 A six byte network wide unique identifier.\n                 cf. ieee8021SpbSysId')
alcatelIND1IsisSpbSysControlAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysControlAddr.setReference('12.25.1.3.3, 8.13.5.1')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysControlAddr.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysControlAddr.setDescription('Group MAC that the ISIS control plane will use. SPB may\n                 use a number of different addresses for SPB Hello and\n                 LSP exchange. Section 27.2, 8.13.1.5 and Table 8-13 covers\n                 the different choices. The choices are as follows:\n                 01-80-C2-00-00-14 = All Level 1 Intermediate Systems\n                 01-80-C2-00-00-15 = All Level 2 Intermediate Systems\n                 09-00-2B-00-00-05 = All Intermediate Systems.\n                 01-80-xx-xx-xx-xx = All Provider Bridge Intermediate Systems.\n                 01-80-yy-yy-yy-yy = All Customer Bridge Intermediate Systems.\n                 This object is persistent.\n                 cf. ieee8021SpbSysControlAddr')
alcatelIND1IsisSpbSysName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 6), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysName.setReference('12.25.1.3.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysName.setDescription('Name to be used to refer to this SPB bridge. This is advertised\n                 in IS-IS and used for management.\n                 cf. ieee8021SpbSysName')
alcatelIND1IsisSpbSysBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 7), AlcatelIND1IsisSpbBridgePriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysBridgePriority.setReference('12.25.1.3.3, 13.26.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysBridgePriority.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysBridgePriority.setDescription('This is a 16 bit quantity which ranks this SPB Bridge\n                 relative to others when breaking ties. This priority\n                 is the high 16 bits of the Bridge Identifier. Its impact\n                 depends on the tie breaking algorithm. Recommend\n                 values 0..15 be assigned to core switches to ensure\n                 diversity of the ECT algorithms.\n                 cf. ieee8021SpbSysBridgePriority')
alcatelIND1IsisSpbmSysSPSourceId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 8), AlcatelIND1IsisSpbmSPsourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysSPSourceId.setReference('12.25.1.3.3, 3.17, 27.15')
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysSPSourceId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysSPSourceId.setDescription('The Shortest Path Source Identifier.\n                 It is the high order 3 bytes for Group Address DA from this\n                 bridge.\n                 Note that only the 20 bits not including the top 4 bits are\n                 the SPSourceID.\n                 This object is persistent.\n                 cf. ieee8021SpbmSysSPSourceId')
alcatelIND1IsisSpbvSysMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 9), AlcatelIND1IsisSpbMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbvSysMode.setReference('12.25.1.3.3, 3.20')
if mibBuilder.loadTexts: alcatelIND1IsisSpbvSysMode.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbvSysMode.setDescription('Indication of supporting SPBV mode\n                 auto(=1)/manual(=2)\n                 auto => enable SPBV mode and auto allocate SPVIDs.\n                 manual => enable SPBV mode and manually assign SPVIDs.\n                 The default is auto.\n                 This object is persistent.\n                 cf. ieee8021SpbvSysMode')
alcatelIND1IsisSpbmSysMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 10), AlcatelIND1IsisSpbMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysMode.setReference('12.25.1.3.3, 3.19')
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysMode.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbmSysMode.setDescription('Indication of supporting SPBM mode\n                 auto(=1)/manual(=2)\n                 auto => enable SPBM mode and auto allocate SPsourceID.\n                 manual => enable SPBM mode and manually assign SPsourceID.\n                 The default is auto.\n                 This object is persistent.\n                 cf. ieee8021SpbmSysMode')
alcatelIND1IsisSpbSysDigestConvention = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 11), AlcatelIND1IsisSpbDigestConvention()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysDigestConvention.setReference('12.25.1.3.3, 28.4.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysDigestConvention.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysDigestConvention.setDescription('The Agreement Digest convention setting\n                 off(=1)/loopFreeBoth(=2)/loopFreeMcastOnly(=3)\n                 off => disable agreement digest checking in hellos\n                 loopFreeBoth => block unsafe group and individual\n                 traffic when digests disagree.\n                 loopFreeMcastOnly =>block group traffic when digests disagree.\n                 The default is loopFreeBoth.\n                 This object is persistent.\n                 cf. ieee8021SpbSysDigestConvention')
alcatelIND1IsisSpbSysSetOverload = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysSetOverload.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysSetOverload.setDescription('Administratively set the overload bit.\n                 The overload bit will continue to be set if the\n                 implementation runs out of memory, independent of\n                 this variable.')
alcatelIND1IsisSpbSysOverloadTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadTimeout.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadTimeout.setDescription('The value of alcatelIND1IsisSpbSysOverloadTimeout is\n                 the amount of time, in seconds, the router operates\n                 in the overload state before attempting to\n                 reestablish normal operations.  While in overload\n                 state, this IS-IS router will only be used if the\n                 destination is only reachable via this router; it is\n                 not used for other transit traffic.  Operationally\n                 placing the router into the overload state is often\n                 used as a precursor to shutting down the IS-IS\n                 protocol operation.\n                 The value of 0 means the router is in overload\n                 infinitely.')
alcatelIND1IsisSpbSysOverloadOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadOnBoot.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadOnBoot.setDescription("The value of alcatelIND1IsisSpbSysOverloadOnBoot\n                 specifies if the router should be in overload state\n                 right after the boot up process.  If the\n                 alcatelIND1IsisSpbSysOverloadOnBoot is set to\n                 'enabled' the overload timeout is maintained by\n                 alcatelIND1IsisSpbSysOverloadOnBootTimeout.")
alcatelIND1IsisSpbSysOverloadOnBootTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadOnBootTimeout.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadOnBootTimeout.setDescription('The value of\n                 alcatelIND1IsisSpbSysOverloadOnBootTimeout is the\n                 amount of time, in seconds for which the router\n                 operates in the overload state before attempting to\n                 reestablish normal operations when the system comes\n                 up after a fresh boot.\n                 While in overload state, this IS-IS router will only\n                 be used if the destination is only reachable via this\n                 router; it is not used for other transit traffic.\n                 The value of 0 means the router is in overload\n                 infinitely.')
alcatelIND1IsisSpbSysOverloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInOverload", 1), ("dynamic", 2), ("manual", 3), ("manualOnBoot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysOverloadStatus.setDescription("Indicates whether or not this isis-spb instance is in\n                 overload state.  When has the value 'notInOverload',\n                 the IS-IS level is normal state.  When the value is\n                 'dynamic', the level is in the overload state because\n                 of insufficient memeory to add additional entries to\n                 the IS-IS database for this level.  When the value is\n                 'manual', the level has been put into the overload\n                 state administratively as a result of the\n                 alcatelIND1IsisSpbSysSetOverload object having been\n                 set.")
alcatelIND1IsisSpbSysLastEnabledTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysLastEnabledTime.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysLastEnabledTime.setDescription('Contains the sysUpTime value when\n                 alcatelIND1IsisSpbSysAdminState was last set to\n                 enabled (1) to run the IS-IS protocol.')
alcatelIND1isisSpbSysLastSpfRun = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1isisSpbSysLastSpfRun.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1isisSpbSysLastSpfRun.setDescription('Contains the sysUpTime value when the last\n                 SPF run was performed for this instance of the IS-IS protocol.')
alcatelIND1IsisSpbSysNumLSPs = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysNumLSPs.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysNumLSPs.setDescription('Specifies the number of LSPs in the database.')
alcatelIND1IsisSpbSysLastEnabledTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysLastEnabledTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysLastEnabledTimeStamp.setDescription('Contains the sysUpTime value when\n                 alcatelIND1IsisSpbSysAdminState was last set to\n                 enabled (1) to run the IS-IS protocol.')
alcatelIND1isisSpbSysLastSpfRunTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1isisSpbSysLastSpfRunTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1isisSpbSysLastSpfRunTimeStamp.setDescription('Contains the sysUpTime value when the last\n                 SPF run was performed for this instance of the IS-IS protocol.')
alcatelIND1IsisSpbProtocolSpfMaxWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 120000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfMaxWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfMaxWait.setDescription('The value of alcatelIND1IsisSpbProtocolSpfMaxWait defines the Maximum interval\n            between two consecutive spf calculations in milliseconds.')
alcatelIND1IsisSpbProtocolSpfInitialWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100000)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfInitialWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfInitialWait.setDescription('The value of alcatelIND1IsisSpbProtocolSpfInitialWait defines the initial SPF\n            calculation delay (in milliseconds) after a topology change.')
alcatelIND1IsisSpbProtocolSpfSecondWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(300)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfSecondWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolSpfSecondWait.setDescription('The value of alcatelIND1IsisSpbProtocolSpfSecondWait defines the hold time\n            between the first and second SPF calculation (in milliseconds).\n\n            Subsequent SPF runs will occur at exponentially increasing\n            intervals of spf-second-wait i.e. if spf-second-wait is 1000,\n            then the next SPF will run after 2000 msec, the next one at\n            4000 msec etc until it is capped off at spf-wait value.\n\n            The SPF interval will stay at spf-wait value until there are no\n            more SPF runs scheduled in that interval. After a full interval\n            without any SPF runs, the SPF interval will drop back to\n            spf-initial-wait.')
alcatelIND1IsisSpbProtocolLspMaxWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 120000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspMaxWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspMaxWait.setDescription('The value of alcatelIND1IsisSpbProtocolLspWait defines the maximum interval\n            (in milliseconds) between two consecutive ocurrences of an LSP\n            being generated.')
alcatelIND1IsisSpbProtocolLspInitialWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspInitialWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspInitialWait.setDescription('The value of alcatelIND1IsisSpbProtocolLspInitialWait defines the initial LSP\n            generation delay (in milliseconds).')
alcatelIND1IsisSpbProtocolLspSecondWait = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000)).clone(300)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspSecondWait.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolLspSecondWait.setDescription('The value of alcatelIND1IsisSpbProtocolLspInitialWait defines the hold time\n            between the first and second LSP generation (in milliseconds).')
alcatelIND1IsisSpbProtocolGracefulRestart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolGracefulRestart.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolGracefulRestart.setDescription('The value of alcatelIND1IsisSpbProtocolGracefulRestart specifies whether the\n             graceful restart is enabled or disabled for this instance of IS-IS.')
alcatelIND1IsisSpbProtocolGRHelperMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 2, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolGRHelperMode.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolGRHelperMode.setDescription("The value of alcatelIND1IsisSpbProtocolGRHelperMode specifies whether the\n             graceful restart helper mode is enabled or disabled for this\n             instance of IS-IS.\n             alcatelIND1IsisSpbProtocolGRHelperMode is valid only if the value of\n             alcatelIND1IsisSpbProtocolGracefulRestart is 'true'.\n\n             When alcatelIND1IsisSpbProtocolGRHelperMode has a value of 'true' graceful\n             restart helper capabilities are enabled.  When it has a value\n             of 'false' the graceful restart helper capabilities are disabled.")
alcatelIND1IsisSpbAdjStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTable.setReference('12.25.6')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTable.setDescription('A table containing the SPB configuration data for a neighbor.\n                 cf. ieee8021SpbAdjStaticTable')
alcatelIND1IsisSpbAdjStaticTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryIfIndex"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTableEntry.setReference('12.25.6')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticTableEntry.setDescription('This table can be used to display the interfaces and metrics\n                 of a neighbor bridge. ')
alcatelIND1IsisSpbAdjStaticEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryTopIx.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbAdjStaticEntryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfIndex.setReference('12.25.6.1.2, 12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfIndex.setDescription('The System interface/index which defines this\n                 adjacency. A value of 0 is a wildcard for any\n                 interface on which SPB Operation is supported.')
alcatelIND1IsisSpbAdjStaticEntryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 3), AlcatelIND1IsisSpbLinkMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryMetric.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12.7')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryMetric.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryMetric.setDescription('The alcatelIND1IsisSpb metric (incremental cost) to this peer.\n                 The contribution of this link to total path cost.\n                 Recommended values are inversely proportional to link speed.\n                 Range is (1..16777215) where 16777215 (0xFFFFFF) is\n                 infinity; infinity signifies that the adjacency is\n                 UP, but is not to be used for traffic.\n                 This object is persistent.')
alcatelIND1IsisSpbAdjStaticEntryHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryHelloInterval.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryHelloInterval.setDescription('Maximum period, in seconds, between IIH PDUs.')
alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier.setDescription('This value is multiplied by the corresponding HelloInterval\n                 and the result in seconds (rounded up) is used as the\n                 holding time in transmitted hellos, to be used by receivers\n                 of hello packets from this IS')
alcatelIND1IsisSpbAdjStaticEntryIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 6), AlcatelIND1IsisSpbAdjState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfAdminState.setReference('12.25.6.1.2, 12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfAdminState.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfAdminState.setDescription('The administrative state of this interface/port.\n                 Up is the default.\n                 This object is persistent.')
alcatelIND1IsisSpbAdjStaticEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryRowStatus.setReference('12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryRowStatus.setDescription('The object indicates the status of an entry, and is used\n                 to create/delete entries.\n                 This object is persistent.')
alcatelIND1IsisSpbAdjStaticEntryCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryCircuitId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryCircuitId.setDescription('The local circuit id.')
alcatelIND1IsisSpbAdjStaticEntryIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 9), AlcatelIND1IsisSpbIfOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfOperState.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryIfOperState.setDescription('The current operational state of IS-IS protocol on this\n             interface.')
alcatelIND1IsisSpbAdjStaticEntryAFDConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryAFDConfig.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryAFDConfig.setDescription('Configuration is made by admin or auto-fabric on\n                 this interface')
alcatelIND1IsisSpbEctStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTable.setReference('12.25.4')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTable.setDescription('The Equal Cost Tree (ECT)  static configuration table.\n                 cf. ieee8021SpbEctStaticTable')
alcatelIND1IsisSpbEctStaticTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryBaseVid"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTableEntry.setReference('12.25.4')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticTableEntry.setDescription('The Equal Cost Tree static configuration Table defines the\n                 ECT ALGORITHM for the Base VID and if SPBV is used for the SPVID.  ')
alcatelIND1IsisSpbEctStaticEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryTopIx.setReference('12.25.4.2.2, 12.25.4.2.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbEctStaticEntryBaseVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 2), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryBaseVid.setReference('12.25.4.2.3, 3.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryBaseVid.setDescription('Base VID to use for this ECT-ALGORITHM.\n                 Traffic B-VID (SPBM) or Management VID (SPBV).\n                 A Base VID value of 4095 is a wildcard for any Base VID\n                 assigned to SPB operation.')
alcatelIND1IsisSpbEctStaticEntryEctAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 3), AlcatelIND1IsisSpbEctAlgorithm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryEctAlgorithm.setReference('12.25.4.2.3, 3.6')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryEctAlgorithm.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryEctAlgorithm.setDescription('This identifies the tie-breaking algorithms used in\n                 Shortest Path Tree computation.  Values range from\n                 00-80-c2-01 to 00-80-c2-16 for 802.1 for each\n                 the 16 ECT behaviors.\n                 This object is persistent.')
alcatelIND1IsisSpbvEctStaticEntrySpvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 4), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbvEctStaticEntrySpvid.setReference('12.25.4.2.3, 3.16')
if mibBuilder.loadTexts: alcatelIND1IsisSpbvEctStaticEntrySpvid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbvEctStaticEntrySpvid.setDescription('If SPBV mode this is the VID originating from this bridge.\n                 Must be set = 0 if SPVID Auto-allocation is required.\n                 Otherwise in SPBM this is empty, should be set = 0.\n                 This object is persistent.')
alcatelIND1IsisSpbEctStaticEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRowStatus.setReference('12.25.4.2.3')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRowStatus.setDescription('The object indicates the status of an entry, and is used\n                 to create/delete entries.\n                 This object is persistent.')
alcatelIND1IsisSpbEctStaticEntryMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 6), AlcatelIND1IsisSpbmMulticastMode().clone('sgmode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryMulticastMode.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryMulticastMode.setDescription('This identifies the tandem multicast-mode of this\n                 bvlan. A value of 0 indicates (S,G) mode, while\n                 a value of 1 indicates (*,G) mode.')
alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 7), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName.setDescription("Name of the root bridge.  This object's value\n                 has meaning only when the bvlan is in (*,G) mode\n                 (e.g. alcatelIND1IsisSpbEctStaticEntryMulticastMode\n                 is set to gmode).")
alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 4, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac.setDescription("Mac address of the root bridge.  This object's value\n                 has meaning only when the bvlan is in (*,G) mode\n                 (e.g. alcatelIND1IsisSpbEctStaticEntryMulticastMode\n                 is set to gmode).")
alcatelIND1IsisSpbAdjDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicTable.setDescription('The Adjacency table.\n                         cf. ieee8021SpbAdjDynamicTable\n                         cf. show ip isis adjacency')
alcatelIND1IsisSpbAdjDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryIfIndex"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryPeerSysId"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntry.setDescription('This table is used to determine operational\n                         values of digests and interfaces of neighbor\n                         bridges.')
alcatelIND1IsisSpbAdjDynamicEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryTopIx.setDescription('The ISIS Topology Index identifier to which\n                         this instance belongs. Each Topology Index\n                         defines logical topology and is used to\n                         enable multiple SPB instances within several\n                         ISIS instances.')
alcatelIND1IsisSpbAdjDynamicEntryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryIfIndex.setDescription('System interface/index which defines this\n                         adjacency A value of 0 is a wildcard for any\n                         interface on which SPB Operation is enabled.')
alcatelIND1IsisSpbAdjDynamicEntryPeerSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 3), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryPeerSysId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryPeerSysId.setDescription('The SPB System Identifier of this peer. This\n                         is used to identify a neighbor uniquely.')
alcatelIND1IsisSpbAdjDynamicEntryAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 4), AlcatelIND1IsisSpbAdjState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjState.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjState.setDescription('The state of the adjacency.')
alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime.setDescription('The time when the adjacency last entered the up state.')
alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining.setDescription('The remaining hold time in seconds.')
alcatelIND1IsisSpbAdjDynamicEntryHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryHoldTimer.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryHoldTimer.setDescription('The holding time in seconds for this\n                         adjacency updated from received IIH PDUs.')
alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId.setDescription('The extended circuit id advertised by the peer.')
alcatelIND1IsisSpbAdjDynamicEntryNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryNeighPriority.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryNeighPriority.setDescription('Priority of the neighboring Intermediate\n                         System for becoming the Designated\n                         Intermediate System.')
alcatelIND1IsisSpbAdjDynamicEntryPeerSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 10), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryPeerSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryPeerSysName.setDescription('IS-IS system name of peer. This is the ASCII\n                         name assigned to the bridge to aid\n                         management.')
alcatelIND1IsisSpbAdjDynamicEntryRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notHelping", 1), ("restarting", 2), ("restartComplete", 3), ("helping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartStatus.setDescription('The graceful restart status of the\n                         adjacency.')
alcatelIND1IsisSpbAdjDynamicEntryRestartSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartSupport.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartSupport.setDescription("Indicates whether adjacency supports ISIS\n                         graceful restart. If 'true', the adjacency\n                         supports graceful restart.")
alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed.setDescription("Indicates if the adjacency has requested this\n                         router to suppress advertisement of the\n                         adjacency in this router's LSPs.  If 'true'\n                         the adjacency has requested to suppress\n                         advertisement of the LSPs.")
alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 5, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp.setDescription('The sysUpTime value when the adjacency last entered the up state.')
alcatelIND1IsisSpbNodeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTable.setDescription('The Node table.\n                     cf. show ip isis nodes')
alcatelIND1IsisSpbNodeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeSysId"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTableEntry.setDescription('This table can be used to display information\n                 about known bridges.')
alcatelIND1IsisSpbNodeTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTopIx.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbNodeSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSysId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSysId.setDescription('SYS ID used for all SPB instances on the bridge.\n                 A six byte network wide unique identifier.')
alcatelIND1IsisSpbNodeSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1, 3), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSysName.setDescription('Name to be used to refer to the SPB bridge. This is advertised\n                 in IS-IS and used for management.')
alcatelIND1IsisSpbNodeSPSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1, 4), AlcatelIND1IsisSpbmSPsourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSPSourceId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeSPSourceId.setDescription('The Shortest Path Source Identifier.\n                 It is the high order 3 bytes for Group Address DA from the\n                 bridge.\n                 Note that only the 20 bits not including the top 4 bits are\n                 the SPSourceID.')
alcatelIND1IsisSpbNodeBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 6, 1, 5), AlcatelIND1IsisSpbBridgePriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeBridgePriority.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeBridgePriority.setDescription('This is a 16 bit quantity which ranks the SPB Bridge\n                 relative to others when breaking ties. This priority\n                 is the high 16 bits of the Bridge Identifier. Its impact\n                 depends on the tie breaking algorithm.')
alcatelIND1IsisSpbUnicastTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTable.setDescription('The unicast table.\n                     cf. show ip isis unicast-table')
alcatelIND1IsisSpbUnicastTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastSysMac"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTableEntry.setDescription('This table can be used to display information\n                 about unicast targets.')
alcatelIND1IsisSpbUnicastTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTopIx.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbUnicastBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastBvlan.setDescription('The bvlan associated with the unicast target.')
alcatelIND1IsisSpbUnicastSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1, 3), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastSysMac.setDescription('The mac address of the bridge associated with the unicast target.')
alcatelIND1IsisSpbUnicastSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1, 4), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastSysName.setDescription('Name of the bridge associated with the unicast target.')
alcatelIND1IsisSpbUnicastOutboundIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 7, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastOutboundIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastOutboundIfIndex.setDescription('Outbound interface used to reach the unicast target.')
alcatelIND1IsisSpbMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTable.setDescription('The multicast table.\n                     cf. show ip isis multicast-table')
alcatelIND1IsisSpbMulticastTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryMulticastMac"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntry.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntry.setDescription('This table can be used to display the\n                 multicast table for SPB ')
alcatelIND1IsisSpbMulticastTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryTopIx.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbMulticastTableEntryBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 2), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryBvlan.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryBvlan.setDescription('Bvlan of the multicast entry.')
alcatelIND1IsisSpbMulticastTableEntryMulticastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 3), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryMulticastMac.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryMulticastMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryMulticastMac.setDescription('Multicast destination MAC of the multicast entry.')
alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 4), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound.setDescription('Outbound interface index of the multicast entry, zero means local node is multicast receiver')
alcatelIND1IsisSpbMulticastTableEntrySrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySrcMac.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySrcMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySrcMac.setDescription('System MAC of the multicast source, all zero means any MAC.')
alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound.setDescription('Inbound interface index of the multicast source, zero means local node is multicast source')
alcatelIND1IsisSpbMulticastTableEntrySysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 7), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySysName.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntrySysName.setDescription('System name of multicast source')
alcatelIND1IsisSpbMulticastTableEntryIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 8, 1, 8), AlcatelSpbServiceIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIsid.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryIsid.setDescription('The service identifier, e.g. isid number of the multicast entry.')
alcatelIND1IsisSpbLSPTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPTable.setDescription('The LSP table (database).\n                     cf. show ip isis database')
alcatelIND1IsisSpbLSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPId"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPEntry.setDescription('Each row entry in the alcatelIND1IsisSpbLSPTable\n                 represents an LSP in the LSP database.')
alcatelIND1IsisSpbLSPTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPTopIx.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbLSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 2), OctetString())
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPId.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPId.setDescription('The LSP Id. The format is 6 octets of ajacency\n                 system-id followed by 1 octet LanId and 1 octet LSP\n                 Number.')
alcatelIND1IsisSpbLSPSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPSeq.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPSeq.setDescription('The sequence number of an LSP. The sequence number is\n                 a four byte quantity that represents the version of\n                 an LSP. The higher the sequence number, the more up\n                 to date the information. The sequence number is\n                 always incremented by the system that originated the\n                 LSP and ensures that there is only one version of\n                 that LSP in the entire network.')
alcatelIND1IsisSpbLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPChecksum.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPChecksum.setDescription('The checksum of contents of LSP from the SourceID\n                 field in the LSP till the end. The checksum is\n                 computed using the Fletcher checksum algorithm. ')
alcatelIND1IsisSpbLSPLifetimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPLifetimeRemain.setDescription('Remaining lifetime of this LSP. This is a\n                 decrementing counter that decrements in seconds.\n                 When the remaining lifetime becomes zero, the\n                 contents of the LSP should not be considered for SPF\n                 calculation.')
alcatelIND1IsisSpbLSPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPVersion.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPVersion.setDescription('The version of the ISIS protocol that generated the\n                 LSP.')
alcatelIND1IsisSpbLSPPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPPktType.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPPktType.setDescription('Packet type for instance Hello PDUs, LSPs, CSNPs or\n                 PSNPs.')
alcatelIND1IsisSpbLSPPktVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPPktVersion.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPPktVersion.setDescription('The version of the ISIS protocol that generated the\n                 Packet.')
alcatelIND1IsisSpbLSPMaxArea = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPMaxArea.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPMaxArea.setDescription('Maximum number of areas supported by the originator\n                 of the LSP. A value of 0 indicates a default of 3\n                 areas.')
alcatelIND1IsisSpbLSPSysIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPSysIdLen.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPSysIdLen.setDescription('The length of the system-id as used by the\n                 originator.')
alcatelIND1IsisSpbLSPAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPAttributes.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPAttributes.setDescription('Attributes associated with the LSP. These include the\n                 attached bit, overload bit, IS type of the system\n                 originating the LSP and the partition repair\n                 capability. The attached bit and the overload bit are\n                 of significance only when present in the LSP numbered\n                 zero and should be ignored on receipt in any other\n                 LSP.')
alcatelIND1IsisSpbLSPUsedLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPUsedLen.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPUsedLen.setDescription('The used length for the LSP. For an LSP that is not\n                 self originated, the used length is always equal to\n                 alloc len. For self originated LSPs, the used length\n                 is less than or equal to the alloc len.')
alcatelIND1IsisSpbLSPAllocLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPAllocLen.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPAllocLen.setDescription('The length allocated for the LSP to be stored.')
alcatelIND1IsisSpbLSPBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 9, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPBuff.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPBuff.setDescription('The LSP as it exists in the LSP database.')
alcatelIND1IsisSpbMulticastSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceTable.setDescription('The multicast source table.\n                 cf. show ip isis multicast-sources')
alcatelIND1IsisSpbMulticastSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSysMac"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceBvlan"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceEntry.setDescription('This table can be used to display information\n                 about multicast sources.')
alcatelIND1IsisSpbMulticastSourceTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbMulticastSourceSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1, 2), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSysMac.setDescription('The mac address of the bridge associated with the\n                 multicast source.')
alcatelIND1IsisSpbMulticastSourceBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1, 3), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceBvlan.setDescription('The bvlan associated with the multicast source.')
alcatelIND1IsisSpbMulticastSourceSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1, 4), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSysName.setDescription('Name of the bridge associated with the multicast\n                 source.')
alcatelIND1IsisSpbMulticastSourceReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceReachable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceReachable.setDescription('True if we have a path to the multicast source.')
alcatelIND1IsisSpbSpfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfTable.setDescription('The spf table.\n                         cf. show spb isis spf')
alcatelIND1IsisSpbSpfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfSysMac"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfTableEntry.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfTableEntry.setDescription('This table can be used to display reachability information\n                         about known bridges, calculated by the Spf algorithm.')
alcatelIND1IsisSpbSpfBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 1), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfBvlan.setDescription('The vlan to which this entry belongs.')
alcatelIND1IsisSpbSpfSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfSysMac.setDescription('The mac-address of the bridge identified by this entry.')
alcatelIND1IsisSpbSpfSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 3), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfSysName.setDescription('Name of the bridge identified by this entry.')
alcatelIND1IsisSpbSpfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfIfIndex.setDescription('The outgoing interface index for reaching the bridge identified by this entry.')
alcatelIND1IsisSpbSpfNextHopSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfNextHopSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfNextHopSysMac.setDescription('The mac-address of the next-hop for reaching the bridge identified by this entry')
alcatelIND1IsisSpbSpfNextHopSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 6), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfNextHopSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfNextHopSysName.setDescription('Name of the next-hop bridge for reaching the bridge identified by this entry')
alcatelIND1IsisSpbSpfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 7), AlcatelIND1IsisSpbLinkMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfMetric.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfMetric.setDescription('The metric/incremental cost to reach the bridge identified by this entry.')
alcatelIND1IsisSpbSpfHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfHopCount.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfHopCount.setDescription('The number of hops needed to reach the bridge identified by this entry.')
alcatelIND1IsisSpbMulticastSourceSpfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTable.setDescription('The multicast source spf table.\n                     cf. show ip isis multicast-sources-spf')
alcatelIND1IsisSpbMulticastSourceSpfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntry.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntry.setDescription('This table can be used to display the\n                 spf table of multicast sources in a SPB network. ')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 2), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac.setDescription('The mac address of the multicast source.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 3), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan.setDescription('The bvlan of the multicast source spf entry.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 4), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac.setDescription('The destination mac address of the multicast source spf entry')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex.setDescription('The outbound ifindex of the multicast source spf entry.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 6), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName.setDescription('The next hop system name of the multicast source spf entry.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac.setDescription('The next hop system mac of the multicast source spf entry.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 8), AlcatelIND1IsisSpbLinkMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric.setDescription('The path metric of the multicast source spf entry.')
alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 12, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount.setDescription('The hop count of the multicast source spf entry.')
alcatelIND1IsisSpbIngressMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacFilterTable.setDescription('The ingress mac filter table.\n                     cf. show ip isis ingress-mac-filter')
alcatelIND1IsisSpbIngressMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbIngressMacBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbIngressMacSysMac"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacFilterEntry.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacFilterEntry.setDescription('The ingress mac filter table.\n                     cf. show spb isis ingress-mac-filter')
alcatelIND1IsisSpbIngressMacBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13, 1, 1), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacBvlan.setDescription('The vlan to which this entry belongs.')
alcatelIND1IsisSpbIngressMacSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13, 1, 2), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacSysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacSysMac.setDescription('The mac-address that identifies this entry.')
alcatelIND1IsisSpbIngressMacSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13, 1, 3), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacSysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacSysName.setDescription('The name of the bridge identified by this entry.')
alcatelIND1IsisSpbIngressMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 13, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacIfIndex.setDescription('The ifindex of this entry.')
alcatelIND1IsisSpbServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14), )
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTable.setDescription('The services table.\n                     cf. show spb isis services')
alcatelIND1IsisSpbServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntryBvlan"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntryIsid"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntrySysMac"))
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntry.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntry.setDescription('This table can be used to display the\n                 local configured and dynamically learned services. ')
alcatelIND1IsisSpbServiceTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1IsisSpbServiceTableEntryBvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 2), VlanId())
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryBvlan.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryBvlan.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryBvlan.setDescription('Bvlan of the service.')
alcatelIND1IsisSpbServiceTableEntryIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 3), AlcatelSpbServiceIdentifier())
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsid.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsid.setDescription('The service identifier, e.g. isid number')
alcatelIND1IsisSpbServiceTableEntrySysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 4), MacAddress())
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysMac.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysMac.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysMac.setDescription('System MAC of the SPB node on which the service is configured')
alcatelIND1IsisSpbServiceTableEntrySysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 5), AlcatelIND1IsisSpbSystemName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysName.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntrySysName.setDescription('System name of SPB node on which the service is configured')
alcatelIND1IsisSpbServiceTableEntryIsidFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 14, 1, 6), AlcatelIND1IsisSpbmIsidFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsidFlags.setReference('NONE')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsidFlags.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryIsidFlags.setDescription('Service flags e.g. source or sink of multicast traffic')
alcatelIND1SpbIPVPNBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15), )
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTable.setDescription('The table binds vrf, ISID and IP gateway together to enable\n\t\t  route exchange between GRM and SPB-ISIS. The exchange is bidirectional.\n\t\t  route-map only applies to VRF routes imported to ISIS from GRM.\n\t\t  There is no filter from ISIS to GRM.\n                  cf. show spb ipvpn bind')
alcatelIND1SpbIPVPNBindTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindVrfName"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindIsid"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindGateway"))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTableEntry.setDescription('An Entry in the alcatelIND1SpbIPVPNBindTable')
alcatelIND1SpbIPVPNBindTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1SpbIPVPNBindVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindVrfName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindVrfName.setDescription('The VRF for which routes are being imported from GRM to ISIS-SPB.')
alcatelIND1SpbIPVPNBindIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindIsid.setDescription('The ISID to set for routes imported from GRM to ISIS-SPB.')
alcatelIND1SpbIPVPNBindGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 4), IpAddress())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindGateway.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindGateway.setDescription('The IP gateway to set for routes imported from GRM to ISIS-SPB.')
alcatelIND1SpbIPVPNBindImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindImportRouteMap.setDescription('The route-map name (or empty-string for all-routes) for routes imported from GRM to ISIS-SPB.')
alcatelIND1SpbIPVPNBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindRowStatus.setReference('12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNBindRowStatus.setDescription('The object indicates the status of an entry, and is used\n                 to create/delete entries.\n                 This object is persistent.')
alcatelIND1SpbIPVPNRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16), )
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTable.setDescription('The IP-VPN table of routes.\n                         cf. show spb ipvpn route-table')
alcatelIND1SpbIPVPNRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRouteTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRouteIsid"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRoutePrefix"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRoutePrefixLen"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRouteGateway"))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTableEntry.setDescription('An Entry in the alcatelIND1SpbIPVPNRouteTable')
alcatelIND1SpbIPVPNRouteTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1SpbIPVPNRouteIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteIsid.setDescription('The ISID of the IP-VPN route')
alcatelIND1SpbIPVPNRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 3), IpAddress())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRoutePrefix.setDescription('The destination prefix of the IP-VPN route')
alcatelIND1SpbIPVPNRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 4), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRoutePrefixLen.setDescription('The prefix length of the IP-VPN route')
alcatelIND1SpbIPVPNRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 5), IpAddress())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteGateway.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteGateway.setDescription('The next-hop/gateway of the IP-VPN route')
alcatelIND1SpbIPVPNRouteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteNodeName.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteNodeName.setDescription('The BEB name of the node that advertised the IP-VPN route')
alcatelIND1SpbIPVPNRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRouteMetric.setDescription('The route-metric of the IP-VPN route')
alcatelIND1SpbIPVPNRedistVrfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17), )
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTable.setDescription('The IP-VPN table of configured route-redistributions where the source entity is a VRF.\n                  cf. show spb ipvpn redist')
alcatelIND1SpbIPVPNRedistVrfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistVrfSourceVrf"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistVrfDestIsid"))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTableEntry.setDescription('An Entry in the alcatelIND1SpbIPVPNRedistVrfTable')
alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1SpbIPVPNRedistVrfSourceVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfSourceVrf.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfSourceVrf.setDescription('The source VRF from which routes are being redistributed.')
alcatelIND1SpbIPVPNRedistVrfDestIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfDestIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfDestIsid.setDescription('The destination ISID to which routes are being redistributed.')
alcatelIND1SpbIPVPNRedistVrfRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfRouteMap.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfRouteMap.setDescription('The route-map name (or empty-string for all-routes) for the filter to be applied to this route-redistribution.')
alcatelIND1SpbIPVPNRedistVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 17, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfRowStatus.setReference('12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistVrfRowStatus.setDescription('The object indicates the status of an entry, and is used\n                 to create/delete entries.\n                 This object is persistent.')
alcatelIND1SpbIPVPNRedistIsidTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18), )
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTable.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTable.setDescription('The IP-VPN table of configured route-redistributions where the source entity is an ISID.\n                  cf. show spb ipvpn redist')
alcatelIND1SpbIPVPNRedistIsidTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistIsidSourceIsid"), (0, "ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistIsidDestIsid"))
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTableEntry.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTableEntry.setDescription('An Entry in the alcatelIND1SpbIPVPNRedistIsidTable')
alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1, 1), AlcatelIND1IsisSpbMTID())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx.setDescription('The ISIS Topology Index identifier to which this\n                 instance belongs. Each Topology Index defines logical topology\n                 and is used to enable multiple SPB instances within several\n                 ISIS instances.')
alcatelIND1SpbIPVPNRedistIsidSourceIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidSourceIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidSourceIsid.setDescription('The source ISID from which routes are being redistributed.')
alcatelIND1SpbIPVPNRedistIsidDestIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidDestIsid.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidDestIsid.setDescription('The destination ISID to which routes are being redistributed.')
alcatelIND1SpbIPVPNRedistIsidRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidRouteMap.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidRouteMap.setDescription('The route-map name (or empty-string for all-routes) for the filter to be applied to this route-redistribution.')
alcatelIND1SpbIPVPNRedistIsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 1, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidRowStatus.setReference('12.25.6.1.3')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidRowStatus.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SpbIPVPNRedistIsidRowStatus.setDescription('The object indicates the status of an entry, and is used\n                 to create/delete entries.\n                 This object is persistent.')
alcatelIND1IsisSpbConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2))
alcatelIND1IsisSpbGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1))
alcatelIND1IsisSpbCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 2))
alcatelIND1IsisSpbSysGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysControlBvlan"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysAdminState"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysNumLSPs"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1isisSpbSysLastSpfRun"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysLastEnabledTime"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysOverloadStatus"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysOverloadOnBootTimeout"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysOverloadOnBoot"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysOverloadTimeout"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysSetOverload"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1isisSpbSysLastSpfRunTimeStamp"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysLastEnabledTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbSysGroupSPBM = alcatelIND1IsisSpbSysGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysGroupSPBM.setDescription('The collection of objects used to represent alcatelIND1IsisSpbSys')
alcatelIND1IsisSpbProtocolConfigGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolSpfMaxWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolSpfInitialWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolSpfSecondWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolLspMaxWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolLspInitialWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolLspSecondWait"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolGracefulRestart"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolGRHelperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbProtocolConfigGroupSPBM = alcatelIND1IsisSpbProtocolConfigGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbProtocolConfigGroupSPBM.setDescription('The collection of objects used to represent alcatelIND1IsisSpbProtocol')
alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryHelloInterval"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryIfAdminState"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryMetric"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryRowStatus"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryEctAlgorithm"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryRowStatus"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbvEctStaticEntrySpvid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM = alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM.setDescription('The collection of objects used to represent Isis Spb Adjacent Static information')
alcatelIND1IsisSpbSysConfigGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysAreaAddress"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysBridgePriority"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysControlAddr"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysDigestConvention"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysId"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbmSysMode"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbmSysSPSourceId"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbvSysMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbSysConfigGroupSPBM = alcatelIND1IsisSpbSysConfigGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSysConfigGroupSPBM.setDescription('The collection of objects to represent Isis Spb System information')
alcatelIND1IsisSpbAdjGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryAdjState"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryHoldTimer"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryNeighPriority"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryPeerSysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryRestartStatus"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryRestartSupport"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryCircuitId"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryIfOperState"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryMulticastMode"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjStaticEntryAFDConfig"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbAdjGroupSPBM = alcatelIND1IsisSpbAdjGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbAdjGroupSPBM.setDescription('The collection of objects to represent Isis Spb Adjacent Group SPBM information')
alcatelIND1IsisSpbIngressMacGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbIngressMacSysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbIngressMacIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbIngressMacGroupSPBM = alcatelIND1IsisSpbIngressMacGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbIngressMacGroupSPBM.setDescription('The collection of objects to represent Isis Spb Ingress Mac Group')
alcatelIND1IsisSpbLSPGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPAllocLen"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPAttributes"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPBuff"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPChecksum"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPLifetimeRemain"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPMaxArea"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPPktType"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPPktVersion"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPSeq"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPSysIdLen"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPUsedLen"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbLSPGroupSPBM = alcatelIND1IsisSpbLSPGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbLSPGroupSPBM.setDescription('The collection of objects to represent Isis Spb LSP Group SPBM information')
alcatelIND1IsisSpbMulticastSourceGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceReachable"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceSysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbMulticastSourceGroupSPBM = alcatelIND1IsisSpbMulticastSourceGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastSourceGroupSPBM.setDescription('The collection of objects to represent Isis Spb Multicast Source Group SPBM information')
alcatelIND1IsisSpbMulticastTableEntryGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryIsid"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntrySysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntrySrcMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbMulticastTableEntryGroupSPBM = alcatelIND1IsisSpbMulticastTableEntryGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbMulticastTableEntryGroupSPBM.setDescription('The collection of objects to represent Isis Spb Multicast Group SPBM information')
alcatelIND1IsisSpbServiceTableEntryGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntryIsidFlags"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntrySysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbServiceTableEntryGroupSPBM = alcatelIND1IsisSpbServiceTableEntryGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbServiceTableEntryGroupSPBM.setDescription('The collection of objects to represent Isis Spb Service Group SPBM information')
alcatelIND1IsisSpbSpfGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfHopCount"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfMetric"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfNextHopSysName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfNextHopSysMac"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfIfIndex"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfSysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbSpfGroupSPBM = alcatelIND1IsisSpbSpfGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbSpfGroupSPBM.setDescription('The collection of objects to represent Isis Spb Spf Group SPBM information')
alcatelIND1IsisSpbUnicastGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastOutboundIfIndex"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastSysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbUnicastGroupSPBM = alcatelIND1IsisSpbUnicastGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbUnicastGroupSPBM.setDescription('The collection of objects to represent Isis Spb Unicast Group SPBM information')
alcatelIND1IsisSpbNodeGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeBridgePriority"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeSPSourceId"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeSysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbNodeGroupSPBM = alcatelIND1IsisSpbNodeGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbNodeGroupSPBM.setDescription('The collection of objects to represent Isis Spb Node Group SPBM information')
alcatelIND1IsisSpbVPNBindTableGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindImportRouteMap"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbVPNBindTableGroupSPBM = alcatelIND1IsisSpbVPNBindTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbVPNBindTableGroupSPBM.setDescription('The collection of objects to represent Isis Spb Vpn Bind Table Group SPBM information')
alcatelIND1IsisSpbVPNRouteTableGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRouteNodeName"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRouteMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbVPNRouteTableGroupSPBM = alcatelIND1IsisSpbVPNRouteTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbVPNRouteTableGroupSPBM.setDescription('The collection of objects to represent Isis Spb Vpn Route Table Group SPBM information')
alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistVrfRouteMap"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistVrfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM = alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM.setDescription('The collection of objects to represent Isis Spb Vpn Redist Vrf Table Group SPBM information')
alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistIsidRouteMap"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1SpbIPVPNRedistIsidRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM = alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM.setDescription('The collection of objects to represent Isis Spb Vpn Redist Isid Table Group SPBM information')
alcatelIND1IsisSpbComplianceSPBM = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 17, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSysGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbAdjGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbIngressMacGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbLSPGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbProtocolConfigGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastSourceGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbMulticastTableEntryGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbServiceTableEntryGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbSpfGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbUnicastGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbNodeGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbVPNBindTableGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbVPNRouteTableGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM"), ("ALCATEL-IND1-ISIS-SPB-MIB", "alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IsisSpbComplianceSPBM = alcatelIND1IsisSpbComplianceSPBM.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IsisSpbComplianceSPBM.setDescription('Compliance to Alcatel IND1 ISIS SPBM mode')
mibBuilder.exportSymbols("ALCATEL-IND1-ISIS-SPB-MIB", alcatelIND1IsisSpbProtocolSpfSecondWait=alcatelIND1IsisSpbProtocolSpfSecondWait, alcatelIND1IsisSpbLSPBuff=alcatelIND1IsisSpbLSPBuff, alcatelIND1IsisSpbVPNBindTableGroupSPBM=alcatelIND1IsisSpbVPNBindTableGroupSPBM, alcatelIND1IsisSpbAdjStaticEntryHelloInterval=alcatelIND1IsisSpbAdjStaticEntryHelloInterval, alcatelIND1IsisSpbSys=alcatelIND1IsisSpbSys, alcatelIND1IsisSpbSysOverloadOnBootTimeout=alcatelIND1IsisSpbSysOverloadOnBootTimeout, alcatelIND1IsisSpbNodeTable=alcatelIND1IsisSpbNodeTable, alcatelIND1IsisSpbAdjDynamicEntryTopIx=alcatelIND1IsisSpbAdjDynamicEntryTopIx, alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex=alcatelIND1IsisSpbMulticastSourceSpfTableEntryIfIndex, alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac=alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopMac, alcatelIND1IsisSpbEctStaticTableEntry=alcatelIND1IsisSpbEctStaticTableEntry, alcatelIND1IsisSpbmSysMode=alcatelIND1IsisSpbmSysMode, alcatelIND1IsisSpbAdjStaticEntryRowStatus=alcatelIND1IsisSpbAdjStaticEntryRowStatus, alcatelIND1IsisSpbSpfIfIndex=alcatelIND1IsisSpbSpfIfIndex, alcatelIND1IsisSpbComplianceSPBM=alcatelIND1IsisSpbComplianceSPBM, alcatelIND1IsisSpbvSysMode=alcatelIND1IsisSpbvSysMode, alcatelIND1IsisSpbAdjGroupSPBM=alcatelIND1IsisSpbAdjGroupSPBM, alcatelIND1IsisSpbEctStaticEntryTopIx=alcatelIND1IsisSpbEctStaticEntryTopIx, alcatelIND1SpbIPVPNBindIsid=alcatelIND1SpbIPVPNBindIsid, alcatelIND1IsisSpbSysOverloadStatus=alcatelIND1IsisSpbSysOverloadStatus, alcatelIND1IsisSpbMulticastSourceSysName=alcatelIND1IsisSpbMulticastSourceSysName, alcatelIND1IsisSpbLSPPktType=alcatelIND1IsisSpbLSPPktType, alcatelIND1IsisSpbConformance=alcatelIND1IsisSpbConformance, alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM=alcatelIND1IsisSpbVPNRedistIsidTableGroupSPBM, AlcatelIND1IsisSpbLinkMetric=AlcatelIND1IsisSpbLinkMetric, alcatelIND1IsisSpbLSPTable=alcatelIND1IsisSpbLSPTable, alcatelIND1IsisSpbLSPChecksum=alcatelIND1IsisSpbLSPChecksum, AlcatelIND1IsisSpbMode=AlcatelIND1IsisSpbMode, alcatelIND1IsisSpbNodeGroupSPBM=alcatelIND1IsisSpbNodeGroupSPBM, alcatelIND1IsisSpbProtocolLspSecondWait=alcatelIND1IsisSpbProtocolLspSecondWait, AlcatelIND1IsisSpbmIsidFlags=AlcatelIND1IsisSpbmIsidFlags, alcatelIND1IsisSpbLSPPktVersion=alcatelIND1IsisSpbLSPPktVersion, alcatelIND1IsisSpbServiceTableEntrySysMac=alcatelIND1IsisSpbServiceTableEntrySysMac, alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound=alcatelIND1IsisSpbMulticastTableEntryIfIndexOutbound, AlcatelIND1IsisSpbMTID=AlcatelIND1IsisSpbMTID, alcatelIND1SpbIPVPNRedistVrfTableEntry=alcatelIND1SpbIPVPNRedistVrfTableEntry, alcatelIND1IsisSpbAdjDynamicEntryNeighPriority=alcatelIND1IsisSpbAdjDynamicEntryNeighPriority, alcatelIND1IsisSpbMulticastTableEntryTopIx=alcatelIND1IsisSpbMulticastTableEntryTopIx, alcatelIND1IsisSpbSysDigestConvention=alcatelIND1IsisSpbSysDigestConvention, alcatelIND1SpbIPVPNRedistIsidSourceIsid=alcatelIND1SpbIPVPNRedistIsidSourceIsid, alcatelIND1IsisSpbUnicastSysMac=alcatelIND1IsisSpbUnicastSysMac, alcatelIND1IsisSpbSysNumLSPs=alcatelIND1IsisSpbSysNumLSPs, alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric=alcatelIND1IsisSpbMulticastSourceSpfTableEntryMetric, alcatelIND1IsisSpbAdjDynamicEntryPeerSysName=alcatelIND1IsisSpbAdjDynamicEntryPeerSysName, alcatelIND1IsisSpbSpfHopCount=alcatelIND1IsisSpbSpfHopCount, alcatelIND1IsisSpbMulticastSourceSpfTable=alcatelIND1IsisSpbMulticastSourceSpfTable, alcatelIND1IsisSpbLSPAttributes=alcatelIND1IsisSpbLSPAttributes, alcatelIND1IsisSpbMulticastSourceTable=alcatelIND1IsisSpbMulticastSourceTable, alcatelIND1IsisSpbMulticastSourceReachable=alcatelIND1IsisSpbMulticastSourceReachable, alcatelIND1SpbIPVPNRedistIsidDestIsid=alcatelIND1SpbIPVPNRedistIsidDestIsid, alcatelIND1IsisSpbSpfTable=alcatelIND1IsisSpbSpfTable, alcatelIND1IsisSpbServiceTableEntryIsidFlags=alcatelIND1IsisSpbServiceTableEntryIsidFlags, alcatelIND1IsisSpbEctStaticTable=alcatelIND1IsisSpbEctStaticTable, alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound=alcatelIND1IsisSpbMulticastTableEntryIfIndexInbound, alcatelIND1IsisSpbEctStaticEntryRowStatus=alcatelIND1IsisSpbEctStaticEntryRowStatus, alcatelIND1IsisSpbSpfTableEntry=alcatelIND1IsisSpbSpfTableEntry, alcatelIND1IsisSpbAdjStaticEntryTopIx=alcatelIND1IsisSpbAdjStaticEntryTopIx, alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed=alcatelIND1IsisSpbAdjDynamicEntryRestartSuppressed, alcatelIND1IsisSpbSysLastEnabledTimeStamp=alcatelIND1IsisSpbSysLastEnabledTimeStamp, alcatelIND1IsisSpbProtocolLspInitialWait=alcatelIND1IsisSpbProtocolLspInitialWait, alcatelIND1IsisSpbLSPAllocLen=alcatelIND1IsisSpbLSPAllocLen, alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM=alcatelIND1IsisSpbVPNRedistVrfTableGroupSPBM, alcatelIND1IsisSpbAdjStaticEntryIfOperState=alcatelIND1IsisSpbAdjStaticEntryIfOperState, alcatelIND1IsisSpbIngressMacSysMac=alcatelIND1IsisSpbIngressMacSysMac, alcatelIND1IsisSpbProtocolGracefulRestart=alcatelIND1IsisSpbProtocolGracefulRestart, alcatelIND1SpbIPVPNRoutePrefixLen=alcatelIND1SpbIPVPNRoutePrefixLen, alcatelIND1SpbIPVPNRedistVrfSourceVrf=alcatelIND1SpbIPVPNRedistVrfSourceVrf, alcatelIND1IsisSpbServiceTable=alcatelIND1IsisSpbServiceTable, alcatelIND1IsisSpbUnicastGroupSPBM=alcatelIND1IsisSpbUnicastGroupSPBM, alcatelIND1IsisSpbMulticastTableEntrySysName=alcatelIND1IsisSpbMulticastTableEntrySysName, alcatelIND1IsisSpbServiceTableEntryBvlan=alcatelIND1IsisSpbServiceTableEntryBvlan, AlcatelIND1IsisSpbAreaAddress=AlcatelIND1IsisSpbAreaAddress, alcatelIND1SpbIPVPNBindImportRouteMap=alcatelIND1SpbIPVPNBindImportRouteMap, AlcatelSpbServiceIdentifier=AlcatelSpbServiceIdentifier, alcatelIND1IsisSpbSysName=alcatelIND1IsisSpbSysName, alcatelIND1IsisSpbSysBridgePriority=alcatelIND1IsisSpbSysBridgePriority, alcatelIND1IsisSpbSysConfigGroupSPBM=alcatelIND1IsisSpbSysConfigGroupSPBM, alcatelIND1IsisSpbNodeSysName=alcatelIND1IsisSpbNodeSysName, alcatelIND1IsisSpbGroups=alcatelIND1IsisSpbGroups, AlcatelIND1IsisSpbDigestConvention=AlcatelIND1IsisSpbDigestConvention, alcatelIND1SpbIPVPNRedistIsidTable=alcatelIND1SpbIPVPNRedistIsidTable, alcatelIND1IsisSpbServiceTableEntry=alcatelIND1IsisSpbServiceTableEntry, alcatelIND1IsisSpbUnicastTableEntry=alcatelIND1IsisSpbUnicastTableEntry, alcatelIND1IsisSpbIngressMacSysName=alcatelIND1IsisSpbIngressMacSysName, alcatelIND1IsisSpbNodeSysId=alcatelIND1IsisSpbNodeSysId, alcatelIND1SpbIPVPNRedistIsidRouteMap=alcatelIND1SpbIPVPNRedistIsidRouteMap, alcatelIND1IsisSpbLSPSeq=alcatelIND1IsisSpbLSPSeq, alcatelIND1SpbIPVPNRouteTableEntryTopIx=alcatelIND1SpbIPVPNRouteTableEntryTopIx, alcatelIND1IsisSpbMulticastSourceGroupSPBM=alcatelIND1IsisSpbMulticastSourceGroupSPBM, alcatelIND1IsisSpbMulticastSourceSysMac=alcatelIND1IsisSpbMulticastSourceSysMac, alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName=alcatelIND1IsisSpbEctStaticEntryRootBridgeSysName, alcatelIND1IsisSpbVPNRouteTableGroupSPBM=alcatelIND1IsisSpbVPNRouteTableGroupSPBM, alcatelIND1IsisSpbSysControlAddr=alcatelIND1IsisSpbSysControlAddr, alcatelIND1IsisSpbServiceTableEntryGroupSPBM=alcatelIND1IsisSpbServiceTableEntryGroupSPBM, AlcatelIND1IsisSpbSystemName=AlcatelIND1IsisSpbSystemName, alcatelIND1IsisSpbAdjDynamicEntryPeerSysId=alcatelIND1IsisSpbAdjDynamicEntryPeerSysId, alcatelIND1IsisSpbAdjStaticEntryIfAdminState=alcatelIND1IsisSpbAdjStaticEntryIfAdminState, alcatelIND1IsisSpbSpfGroupSPBM=alcatelIND1IsisSpbSpfGroupSPBM, alcatelIND1IsisSpbAdjDynamicTable=alcatelIND1IsisSpbAdjDynamicTable, alcatelIND1IsisSpbAdjDynamicEntryRestartStatus=alcatelIND1IsisSpbAdjDynamicEntryRestartStatus, alcatelIND1IsisSpbSysAreaAddress=alcatelIND1IsisSpbSysAreaAddress, alcatelIND1SpbIPVPNRouteGateway=alcatelIND1SpbIPVPNRouteGateway, AlcatelIND1IsisSpbmMulticastMode=AlcatelIND1IsisSpbmMulticastMode, alcatelIND1IsisSpbCompliances=alcatelIND1IsisSpbCompliances, alcatelIND1IsisSpbAdjDynamicEntry=alcatelIND1IsisSpbAdjDynamicEntry, alcatelIND1IsisSpbLSPVersion=alcatelIND1IsisSpbLSPVersion, alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx=alcatelIND1SpbIPVPNRedistVrfTableEntryTopIx, alcatelIND1SpbIPVPNBindTableEntryTopIx=alcatelIND1SpbIPVPNBindTableEntryTopIx, alcatelIND1IsisSpbIngressMacFilterTable=alcatelIND1IsisSpbIngressMacFilterTable, alcatelIND1IsisSpbvEctStaticEntrySpvid=alcatelIND1IsisSpbvEctStaticEntrySpvid, alcatelIND1SpbIPVPNBindGateway=alcatelIND1SpbIPVPNBindGateway, alcatelIND1IsisSpbLSPGroupSPBM=alcatelIND1IsisSpbLSPGroupSPBM, alcatelIND1IsisSpbServiceTableEntryTopIx=alcatelIND1IsisSpbServiceTableEntryTopIx, alcatelIND1IsisSpbMulticastSourceEntry=alcatelIND1IsisSpbMulticastSourceEntry, alcatelIND1IsisSpbLSPId=alcatelIND1IsisSpbLSPId, alcatelIND1IsisSpbSysLastEnabledTime=alcatelIND1IsisSpbSysLastEnabledTime, alcatelIND1IsisSpbAdjStaticEntryMetric=alcatelIND1IsisSpbAdjStaticEntryMetric, alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId=alcatelIND1IsisSpbAdjDynamicEntryNbrExtLocalCircuitId, alcatelIND1IsisSpbProtocolConfigGroupSPBM=alcatelIND1IsisSpbProtocolConfigGroupSPBM, alcatelIND1IsisSpbMulticastSourceTopIx=alcatelIND1IsisSpbMulticastSourceTopIx, alcatelIND1IsisSpbAdjStaticEntryAFDConfig=alcatelIND1IsisSpbAdjStaticEntryAFDConfig, alcatelIND1IsisSpbServiceTableEntrySysName=alcatelIND1IsisSpbServiceTableEntrySysName, alcatelIND1SpbIPVPNBindRowStatus=alcatelIND1SpbIPVPNBindRowStatus, alcatelIND1IsisSpbMulticastTableEntryMulticastMac=alcatelIND1IsisSpbMulticastTableEntryMulticastMac, alcatelIND1IsisSpbSpfNextHopSysName=alcatelIND1IsisSpbSpfNextHopSysName, alcatelIND1IsisSpbAdjDynamicEntryAdjState=alcatelIND1IsisSpbAdjDynamicEntryAdjState, alcatelIND1SpbIPVPNRouteIsid=alcatelIND1SpbIPVPNRouteIsid, alcatelIND1IsisSpbMulticastTableEntryGroupSPBM=alcatelIND1IsisSpbMulticastTableEntryGroupSPBM, alcatelIND1IsisSpbSpfSysMac=alcatelIND1IsisSpbSpfSysMac, alcatelIND1IsisSpbIngressMacFilterEntry=alcatelIND1IsisSpbIngressMacFilterEntry, AlcatelIND1IsisSpbIfOperState=AlcatelIND1IsisSpbIfOperState, alcatelIND1IsisSpbSysOverloadTimeout=alcatelIND1IsisSpbSysOverloadTimeout, alcatelIND1IsisSpbEctStaticEntryMulticastMode=alcatelIND1IsisSpbEctStaticEntryMulticastMode, alcatelIND1IsisSpbProtocolSpfMaxWait=alcatelIND1IsisSpbProtocolSpfMaxWait, alcatelIND1IsisSpbSysControlBvlan=alcatelIND1IsisSpbSysControlBvlan, alcatelIND1IsisSpbmSysSPSourceId=alcatelIND1IsisSpbmSysSPSourceId, alcatelIND1IsisSpbSysOverloadOnBoot=alcatelIND1IsisSpbSysOverloadOnBoot, AlcatelIND1IsisSpbBridgePriority=AlcatelIND1IsisSpbBridgePriority, alcatelIND1IsisSpbProtocolGRHelperMode=alcatelIND1IsisSpbProtocolGRHelperMode, alcatelIND1IsisSpbEctStaticEntryBaseVid=alcatelIND1IsisSpbEctStaticEntryBaseVid, alcatelIND1IsisSpbEctStaticEntryEctAlgorithm=alcatelIND1IsisSpbEctStaticEntryEctAlgorithm, alcatelIND1IsisSpbAdjStaticEntryIfIndex=alcatelIND1IsisSpbAdjStaticEntryIfIndex, AlcatelIND1IsisSpbAdjState=AlcatelIND1IsisSpbAdjState, alcatelIND1IsisSpbLSPUsedLen=alcatelIND1IsisSpbLSPUsedLen, alcatelIND1IsisSpbSpfSysName=alcatelIND1IsisSpbSpfSysName, alcatelIND1IsisSpbSpfNextHopSysMac=alcatelIND1IsisSpbSpfNextHopSysMac, alcatelIND1IsisSpbSpfMetric=alcatelIND1IsisSpbSpfMetric, alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName=alcatelIND1IsisSpbMulticastSourceSpfTableEntryNHopName, alcatelIND1SpbIPVPNRouteMetric=alcatelIND1SpbIPVPNRouteMetric, alcatelIND1IsisSpbSysSetOverload=alcatelIND1IsisSpbSysSetOverload, alcatelIND1IsisSpbSysGroupSPBM=alcatelIND1IsisSpbSysGroupSPBM, alcatelIND1IsisSpbLSPTopIx=alcatelIND1IsisSpbLSPTopIx, alcatelIND1IsisSpbLSPSysIdLen=alcatelIND1IsisSpbLSPSysIdLen, alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount=alcatelIND1IsisSpbMulticastSourceSpfTableEntryHopCount, alcatelIND1IsisSpbMulticastTableEntryBvlan=alcatelIND1IsisSpbMulticastTableEntryBvlan, alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM=alcatelIND1IsisSpbAdjStaticEntryConfigGroupSPBM, alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp=alcatelIND1IsisSpbAdjDynamicEntryAdjUpTimeStamp, alcatelIND1SpbIPVPNRedistIsidTableEntry=alcatelIND1SpbIPVPNRedistIsidTableEntry, alcatelIND1SpbIPVPNRedistVrfDestIsid=alcatelIND1SpbIPVPNRedistVrfDestIsid, AlcatelIND1IsisSpbmSPsourceId=AlcatelIND1IsisSpbmSPsourceId, alcatelIND1IsisSpbIngressMacBvlan=alcatelIND1IsisSpbIngressMacBvlan, alcatelIND1IsisSpbMibObjects=alcatelIND1IsisSpbMibObjects, alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx=alcatelIND1IsisSpbMulticastSourceSpfTableEntryTopIx, alcatelIND1SpbIPVPNRouteNodeName=alcatelIND1SpbIPVPNRouteNodeName, alcatelIND1SpbIPVPNRedistVrfTable=alcatelIND1SpbIPVPNRedistVrfTable, alcatelIND1SpbIPVPNRedistVrfRowStatus=alcatelIND1SpbIPVPNRedistVrfRowStatus, alcatelIND1IsisSpbUnicastBvlan=alcatelIND1IsisSpbUnicastBvlan, alcatelIND1IsisSpbLSPMaxArea=alcatelIND1IsisSpbLSPMaxArea, alcatelIND1IsisSpbProtocolLspMaxWait=alcatelIND1IsisSpbProtocolLspMaxWait, alcatelIND1IsisSpbLSPEntry=alcatelIND1IsisSpbLSPEntry, alcatelIND1IsisSpbSysAdminState=alcatelIND1IsisSpbSysAdminState, alcatelIND1IsisSpbProtocolSpfInitialWait=alcatelIND1IsisSpbProtocolSpfInitialWait, alcatelIND1IsisSpbNodeTopIx=alcatelIND1IsisSpbNodeTopIx, alcatelIND1IsisSpbMulticastSourceSpfTableEntry=alcatelIND1IsisSpbMulticastSourceSpfTableEntry, alcatelIND1IsisSpbNodeBridgePriority=alcatelIND1IsisSpbNodeBridgePriority, alcatelIND1IsisSpbMulticastTableEntryIsid=alcatelIND1IsisSpbMulticastTableEntryIsid, alcatelIND1IsisSpbNodeSPSourceId=alcatelIND1IsisSpbNodeSPSourceId, alcatelIND1IsisSpbMulticastTableEntrySrcMac=alcatelIND1IsisSpbMulticastTableEntrySrcMac, alcatelIND1SpbIPVPNBindVrfName=alcatelIND1SpbIPVPNBindVrfName, alcatelIND1IsisSpbMulticastSourceBvlan=alcatelIND1IsisSpbMulticastSourceBvlan, alcatelIND1IsisSpbAdjStaticTable=alcatelIND1IsisSpbAdjStaticTable, alcatelIND1IsisSpbAdjStaticEntryCircuitId=alcatelIND1IsisSpbAdjStaticEntryCircuitId, alcatelIND1IsisSpbUnicastSysName=alcatelIND1IsisSpbUnicastSysName, alcatelIND1IsisSpbIngressMacIfIndex=alcatelIND1IsisSpbIngressMacIfIndex, alcatelIND1IsisSpbAdjDynamicEntryHoldTimer=alcatelIND1IsisSpbAdjDynamicEntryHoldTimer, alcatelIND1IsisSpbSysId=alcatelIND1IsisSpbSysId, alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac=alcatelIND1IsisSpbEctStaticEntryRootBridgeSysMac, alcatelIND1SpbIPVPNRouteTableEntry=alcatelIND1SpbIPVPNRouteTableEntry, alcatelIND1isisSpbSysLastSpfRun=alcatelIND1isisSpbSysLastSpfRun, alcatelIND1IsisSpbLSPLifetimeRemain=alcatelIND1IsisSpbLSPLifetimeRemain, alcatelIND1IsisSpbMib=alcatelIND1IsisSpbMib, alcatelIND1IsisSpbAdjDynamicEntryIfIndex=alcatelIND1IsisSpbAdjDynamicEntryIfIndex, AlcatelIND1IsisSpbEctAlgorithm=AlcatelIND1IsisSpbEctAlgorithm, alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime=alcatelIND1IsisSpbAdjDynamicEntryAdjUpTime, alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier=alcatelIND1IsisSpbAdjStaticEntryHelloMultiplier, alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan=alcatelIND1IsisSpbMulticastSourceSpfTableEntryBvlan, alcatelIND1IsisSpbUnicastTopIx=alcatelIND1IsisSpbUnicastTopIx, alcatelIND1IsisSpbServiceTableEntryIsid=alcatelIND1IsisSpbServiceTableEntryIsid, alcatelIND1IsisSpbAdjStaticTableEntry=alcatelIND1IsisSpbAdjStaticTableEntry, alcatelIND1IsisSpbNodeTableEntry=alcatelIND1IsisSpbNodeTableEntry, alcatelIND1IsisSpbSpfBvlan=alcatelIND1IsisSpbSpfBvlan, alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac=alcatelIND1IsisSpbMulticastSourceSpfTableEntryBMac, alcatelIND1SpbIPVPNBindTable=alcatelIND1SpbIPVPNBindTable, alcatelIND1SpbIPVPNRoutePrefix=alcatelIND1SpbIPVPNRoutePrefix, alcatelIND1SpbIPVPNRedistIsidRowStatus=alcatelIND1SpbIPVPNRedistIsidRowStatus, alcatelIND1SpbIPVPNRouteTable=alcatelIND1SpbIPVPNRouteTable, alcatelIND1IsisSpbMulticastTable=alcatelIND1IsisSpbMulticastTable, alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining=alcatelIND1IsisSpbAdjDynamicEntryHoldRemaining, PYSNMP_MODULE_ID=alcatelIND1IsisSpbMib, alcatelIND1SpbIPVPNBindTableEntry=alcatelIND1SpbIPVPNBindTableEntry, alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx=alcatelIND1SpbIPVPNRedistIsidTableEntryTopIx, alcatelIND1SpbIPVPNRedistVrfRouteMap=alcatelIND1SpbIPVPNRedistVrfRouteMap, alcatelIND1IsisSpbProtocolConfig=alcatelIND1IsisSpbProtocolConfig, alcatelIND1isisSpbSysLastSpfRunTimeStamp=alcatelIND1isisSpbSysLastSpfRunTimeStamp, alcatelIND1IsisSpbAdjDynamicEntryRestartSupport=alcatelIND1IsisSpbAdjDynamicEntryRestartSupport, alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac=alcatelIND1IsisSpbMulticastSourceSpfTableEntryDestMac, alcatelIND1IsisSpbUnicastOutboundIfIndex=alcatelIND1IsisSpbUnicastOutboundIfIndex, alcatelIND1IsisSpbUnicastTable=alcatelIND1IsisSpbUnicastTable, alcatelIND1IsisSpbMulticastTableEntry=alcatelIND1IsisSpbMulticastTableEntry, alcatelIND1IsisSpbIngressMacGroupSPBM=alcatelIND1IsisSpbIngressMacGroupSPBM)
