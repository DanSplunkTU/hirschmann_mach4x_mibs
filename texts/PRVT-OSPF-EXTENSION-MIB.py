#
# PySNMP MIB module PRVT-OSPF-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-OSPF-EXTENSION-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:44:27 2021
# On host fv-az135-680 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, NotificationType, Counter32, iso, TimeTicks, Counter64, MibIdentifier, Bits, ObjectIdentity, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "NotificationType", "Counter32", "iso", "TimeTicks", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "Unsigned32", "Gauge32")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
prvtOSPFExtensionMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2))
prvtOSPFExtensionMib.setRevisions(('2008-01-01 00:00', '2005-02-16 00:00', '2002-11-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtOSPFExtensionMib.setRevisionsDescriptions(('Removed redefined OIDs in private vendor extension definitions.', 'Fixed spelling errors and changed the contact info.', 'Initial version.',))
if mibBuilder.loadTexts: prvtOSPFExtensionMib.setLastUpdated('200801010000Z')
if mibBuilder.loadTexts: prvtOSPFExtensionMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtOSPFExtensionMib.setContactInfo('BATM/Telco Systems Support team\n\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtOSPFExtensionMib.setDescription('The OSPF extension MIB module contains additional information, needed to\n         control the OSPF protocol, that is not found in the standard RFC')
routingProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 4))
ospfExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1))
ospfEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfEnable.setStatus('current')
if mibBuilder.loadTexts: ospfEnable.setDescription('This object enables/disables the OSPF process in the switch')
ospfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2), )
if mibBuilder.loadTexts: ospfRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeTable.setDescription('The table represents the routing protocols, redistributed into the OSPF \n              routing domain.\n               \n              Creation of conceptual row in the table starts the redistribution of the \n              specified protocol, which would lead to the injection of routing information \n              from that protocol into the OSPF.\n              \n              Deletion of conceptual row would stop the redistribution of that protocol \n              into the OSPF.\n              \n              OSPF router, which redistributes routing information from other \n              protocols, is an ASBR router')
ospfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1), ).setIndexNames((0, "PRVT-OSPF-EXTENSION-MIB", "ospfRedistributeProtocol"))
if mibBuilder.loadTexts: ospfRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeEntry.setDescription('The conceptual row represents a routing protocol, redistributed into OSPF')
ospfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("kernel", 1), ("connected", 2), ("static", 3), ("rip", 4), ("bgp", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeProtocol.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeProtocol.setDescription('The specific routes redistributed into OSPF. For T4R model the valid values \n               are connected, rip and static.\n               For all the other models all of the above routes can be redistributed ')
ospfRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetric.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetric.setDescription('The metric, with which the external routes will be redistributed in the OSPF')
ospfRedistributeMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1", 1), ("e2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeMetricType.setDescription("The type of metric, with which the external routes are advertised into the OSPF \n        routing domain. OSPF supports two types of external metrics.  Type 1 external \n        metrics are expressed in the same units as the OSPF interface cost (i.e., in terms \n        of the link state metric).  Type 2 external metrics are an order of magnitude larger; \n        any Type 2 metric is considered greater than the cost of any path internal to the AS.  \n        Use of Type 2 external metrics assumes that routing between AS'es is the major \n        cost of routing a packet, and eliminates the need for conversion of external costs \n        to internal link state metrics.")
ospfRedistributeRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeRouteMap.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeRouteMap.setDescription('The route map that would filter the redistributed routing information')
ospfRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 6, 4, 2, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: ospfRedistributeRowStatus.setDescription('Indicates the status of the row. Setting of this field to active enables the \n        redistribution of the protocol.\n        \n        Setting this field to destroy disables the redistribution of the protocol.')
mibBuilder.exportSymbols("PRVT-OSPF-EXTENSION-MIB", prvtOSPFExtensionMib=prvtOSPFExtensionMib, routingProtocols=routingProtocols, ospfRedistributeMetric=ospfRedistributeMetric, ospfRedistributeEntry=ospfRedistributeEntry, ospfExtension=ospfExtension, ospfRedistributeRouteMap=ospfRedistributeRouteMap, ospfRedistributeTable=ospfRedistributeTable, ospfRedistributeMetricType=ospfRedistributeMetricType, ospfRedistributeRowStatus=ospfRedistributeRowStatus, PYSNMP_MODULE_ID=prvtOSPFExtensionMib, ospfRedistributeProtocol=ospfRedistributeProtocol, ospfEnable=ospfEnable)
