#
# PySNMP MIB module PRVT-SWITCH-EFM-OAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SWITCH-EFM-OAM-MIB
# Produced by pysmi-1.1.3 at Tue Nov 30 03:10:57 2021
# On host fv-az42-83 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot3OamMode, dot3OamLoopbackStatus, dot3OamAdminState = mibBuilder.importSymbols("DOT3-OAM-MIB", "dot3OamMode", "dot3OamLoopbackStatus", "dot3OamAdminState")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, Counter64, IpAddress, ModuleIdentity, iso, MibIdentifier, NotificationType, TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Counter64", "IpAddress", "ModuleIdentity", "iso", "MibIdentifier", "NotificationType", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
prvtSwitchEfmOamMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 133))
prvtSwitchEfmOamMIB.setRevisions(('2010-02-11 00:00', '2009-12-01 00:00', '2009-06-01 00:00', '2009-04-29 00:00', '2009-03-18 00:00', '2009-03-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSwitchEfmOamMIB.setRevisionsDescriptions(('Change oids for backward compatibility.', 'Added dying-gasp notification', 'Changed limits for prvtEfmOamPingTable leafs', 'Changed type for prvtEfmOamEventForwardStatus and\nprvtEfmOamEventForwardShutdown to PortList', 'Fixed range and measurment unit for prvtEfmOamKeepAlive scalar', 'Removed incorrect scalars\nRemoved certain leafs in prvtEfmOamPingTable and prvtEfmOamLoopbackTable\nModified prvtEfmOamPingResultTable and prvtEfmOamLoopbackResultTable',))
if mibBuilder.loadTexts: prvtSwitchEfmOamMIB.setLastUpdated('201002110000Z')
if mibBuilder.loadTexts: prvtSwitchEfmOamMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSwitchEfmOamMIB.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSwitchEfmOamMIB.setDescription('This MIB should provide general configuration and\nreports of this protocol that are not available in\nthe standard DOT3-OAM-MIB, such as Enabling and Timers,\nas well as the ability to control private\nextensions added to the EFM OAM.')
prvtEfmOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 0))
prvtEfmOamObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1))
prvtEfmOamConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 2))
prvtEfmOamEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamEnable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEnable.setDescription('Enable/disable the EFM OAM on the device')
prvtEfmOamMultiPduCount = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamMultiPduCount.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamMultiPduCount.setDescription('Number of OAM PDUs that will be sent when\nprotocol ask to send multiple subsequent\nmessages.')
prvtEfmOamRemoteEvent = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamRemoteEvent.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamRemoteEvent.setDescription('Enable or disable sending the local\nevent notifications to the remote device.')
prvtEfmOamLocalSysLog = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLocalSysLog.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLocalSysLog.setDescription('Disable/enable sending of Event Notification\nOAM PDU to the local Syslog daemon.')
prvtEfmOamPriority = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPriority.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPriority.setDescription('Priority of the sent OAM PDUs.\nPlease note that value 8 represents no-priority.')
prvtEfmOamKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamKeepAlive.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamKeepAlive.setDescription('Aging interval (in miliseconds)of the last heard\nneighbouring device.')
prvtEfmOamHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamHelloInterval.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamHelloInterval.setDescription('Maximal interval between a pair of PDUs in milliseconds.')
prvtEfmOamPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPktsSent.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPktsSent.setDescription('Sent packets.')
prvtEfmOamPktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPktsReceived.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPktsReceived.setDescription('Received packets.')
prvtEfmOamHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamHistorySize.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamHistorySize.setDescription('Number of entries in EFM_OAM history.')
prvtEfmOamTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10), )
if mibBuilder.loadTexts: prvtEfmOamTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamTable.setDescription('This table shall containg an entry per\nphysical interface, indexed by the corresponding\nifIndex from IF-MIB and each row in the\ntable shall contain a single column.')
prvtEfmOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEntry.setDescription('EFM Entry')
prvtEfmOamEnhanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("enhance", 2))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamEnhanceMode.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEnhanceMode.setDescription('Used to be used to enable or disable EFM-OAM\nVendor specific extensions on the\nspecific interface. Values are :\n- basic(1) - no Vendor specific OAM\nextensions are used.\n- enhance(2) - when the remote device is detected\nas Vendor device, enhanced mode is used.')
prvtEfmOamEventReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamEventReturn.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEventReturn.setDescription('0 - feature is disabled (default value)\n1-10 - feature is enabled. The number\nspecifies how many handshaking attempts\nwill be done before shutting down the port.')
prvtEfmOamForceLoopbackLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamForceLoopbackLocal.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamForceLoopbackLocal.setDescription('\nUsed to force permanent loopback configuration\non the local side.\nThis is used for loopback traffic\nanalysis for long term (for example,\n24 hours length infrastructure testing).\n')
prvtEfmOamForceLoopbackRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamForceLoopbackRemote.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamForceLoopbackRemote.setDescription('\nUsed to force permanent loopback configuration\non the remote side.\nThis is used for loopback traffic\nanalysis for long term (for example,\n24 hours length infrastructure testing).\n')
prvtEfmOamEventForwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamEventForwardStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEventForwardStatus.setDescription('\nForward a Link EventNotification on the specified target\ninterface. Note that the interface which will\nforward the EventNotification must have efm-oam mode enabled.\n')
prvtEfmOamEventForwardShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 10, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamEventForwardShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamEventForwardShutdown.setDescription('\nShutdown a specified target interface as a\nresult of the current interface status change.\n')
prvtEfmOamPing = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11))
prvtEfmOamPingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1), )
if mibBuilder.loadTexts: prvtEfmOamPingTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingTable.setDescription('This table let the EFM-OAM non-intrusive monitoring\non the specific interface by querying a number\nof time aFramesTransmittedOK parameter, ping requests,\nusing the variable retrieval EFM OAM PDU.')
prvtEfmOamPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamPingEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingEntry.setDescription('')
prvtEfmOamPingEchoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingEchoNumber.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingEchoNumber.setDescription('The number of echo packets to send.')
prvtEfmOamPingDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingDelayTime.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingDelayTime.setDescription('The delay in seconds between packets.')
prvtEfmOamPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingTimeOut.setDescription('The time in seconds which the ping\nshould wait for the response.')
prvtEfmOamPingCounterBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("branch", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingCounterBranch.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingCounterBranch.setDescription('Set/get the counter of ping-like operation.')
prvtEfmOamPingCounterLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 8, 14, 21, 22))).clone(namedValues=NamedValues(("framesTransmittedOK", 2), ("framesReceivedOK", 5), ("octetsTransmittedOK", 8), ("octetsReceivedOK", 14), ("multicastFramesReceivedOK", 21), ("broadcastFramesReceivedOK", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingCounterLeaf.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingCounterLeaf.setDescription('Set/get the counter of ping-like operation.')
prvtEfmOamPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEfmOamPingRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingRowStatus.setDescription('Creation/delete/edit of the ping test.')
prvtEfmOamPingResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2), )
if mibBuilder.loadTexts: prvtEfmOamPingResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultTable.setDescription('Ping results.')
prvtEfmOamPingResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamPingResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultEntry.setDescription('')
prvtEfmOamPingResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPing", 1), ("running", 2), ("terminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultStatus.setDescription('Current ping operation status.')
prvtEfmOamPingResultSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultSentPackets.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultSentPackets.setDescription('Sent packets')
prvtEfmOamPingResultReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultReceivedPackets.setDescription('Received packets')
prvtEfmOamPingResultRcvRateInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultRcvRateInteger.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultRcvRateInteger.setDescription('Ping receive rate - Integer part')
prvtEfmOamPingResultRcvRateFractional = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultRcvRateFractional.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultRcvRateFractional.setDescription('Ping receive rate - Fractional part')
prvtEfmOamPingResultTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultTimeMin.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultTimeMin.setDescription('Ping minimum time.')
prvtEfmOamPingResultTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultTimeMax.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultTimeMax.setDescription('Ping maximum time.')
prvtEfmOamPingResultAverageTimeInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultAverageTimeInteger.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultAverageTimeInteger.setDescription('Ping average time - Integer part.')
prvtEfmOamPingResultAverageTimeFractional = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPingResultAverageTimeFractional.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultAverageTimeFractional.setDescription('Ping average time - Fractional part.')
prvtEfmOamPingResultClear = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamPingResultClear.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPingResultClear.setDescription('Deleteper interface entries in prvtEfmOamPingResultTable.')
prvtEfmOamLoopback = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12))
prvtEfmOamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1), )
if mibBuilder.loadTexts: prvtEfmOamLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackTable.setDescription('This table should permit to perform EFM-OAM\nintrusive monitoring on the specific interface\nby setting the remote device into loopback state\nand generating test traffic.\nIt should support:\nStorm operation, an operation that sets\nremote loopback, stops local data flow to the\nremote box and generates a packet burst by CPU.\nWhen the burst is received back it is validated\nand statistics are displayed. Burst operation,\nan operation that sets remote loopback, stops\nlocal data flow to the remote box and generates\na packet test burst by the hardware (when available).\nIt means a single packet generated by CPU is\nrepetitively sent by the hardware. When the\nburst is received back it is ignored and only\ncounters are displayed.')
prvtEfmOamLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackEntry.setDescription('')
prvtEfmOamLoopbackOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("storm", 1), ("burst", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackOperation.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackOperation.setDescription('Represent the operation that the\nshould be performed on the interface.')
prvtEfmOamLoopbackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackDuration.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackDuration.setDescription('Represent the amount of time burst test should run in seconds.')
prvtEfmOamLoopbackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483646)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackCount.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackCount.setDescription('Represent the count of packets to send in storm operation.')
prvtEfmOamLoopbackPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1512)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackPacketSize.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackPacketSize.setDescription('Represent the size of the test packet to use.')
prvtEfmOamLoopbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackDelay.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackDelay.setDescription('Represent the delay between packets in seconds.\nThe default value is 0 and represents no delay.')
prvtEfmOamLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackTimeout.setDescription('Represent the wait for response in seconds.')
prvtEfmOamLoopbackNoRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackNoRemote.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackNoRemote.setDescription('Add or not remote to loopback.')
prvtEfmOamLoopbackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtEfmOamLoopbackRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackRowStatus.setDescription('')
prvtEfmOamLoopbackResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2), )
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultTable.setDescription('Loopback results.')
prvtEfmOamLoopbackResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultEntry.setDescription('')
prvtEfmOamLoopbackResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noLoopback", 1), ("startCmdSent", 2), ("startFail", 3), ("dataStarted", 4), ("stopCmdSent", 5), ("terminated", 6), ("remoteFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultStatus.setDescription('Loopback result status')
prvtEfmOamLoopbackResultFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultFlood.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultFlood.setDescription('Flood value')
prvtEfmOamLoopbackResultSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultSentPackets.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultSentPackets.setDescription('Sent packets')
prvtEfmOamLoopbackResultReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultReceivedPackets.setDescription('Received packets')
prvtEfmOamLoopbackResultClear = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultClear.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamLoopbackResultClear.setDescription('Delete per interface entries in prvtEfmOamLoopbackResultTable.')
prvtEfmOamPeerTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 13), )
if mibBuilder.loadTexts: prvtEfmOamPeerTable.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPeerTable.setDescription('This table holds the peer extended information\navailable only when local interface is set in\nenhanced mode (see prvtOamEnhanceMode) and the\nremote is detected as enhanced-mode device. This table\nshall containg an entry per physical interface,\nindexed by the corresponding ifIndex from IF-MIB.')
prvtEfmOamPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtEfmOamPeerEntry.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPeerEntry.setDescription('')
prvtEfmOamPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPeerPort.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPeerPort.setDescription('Holds the peer port name as string\nas it is sent by the peer (eg: 1/2/1).')
prvtEfmOamPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 1, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtEfmOamPeerName.setStatus('current')
if mibBuilder.loadTexts: prvtEfmOamPeerName.setDescription('Holds the peer hostname s string\nas it is sent by the peer.')
prvtOamLoopBackState = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("DOT3-OAM-MIB", "dot3OamAdminState"), ("DOT3-OAM-MIB", "dot3OamMode"), ("DOT3-OAM-MIB", "dot3OamLoopbackStatus"))
if mibBuilder.loadTexts: prvtOamLoopBackState.setStatus('current')
if mibBuilder.loadTexts: prvtOamLoopBackState.setDescription('This trap should be sent whenever the loopback\nstate has been change from Remote, when dot3OamMode\nis passive or dot3OamAdminState is disable the\ninterface cannot be on remoteLoopback state\nand should send this trap.')
prvtOamDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 133, 0, 2))
if mibBuilder.loadTexts: prvtOamDyingGasp.setStatus('current')
if mibBuilder.loadTexts: prvtOamDyingGasp.setDescription("The notification alarms for a failure due to loss of local power\n                ('Dying Gasp')")
mibBuilder.exportSymbols("PRVT-SWITCH-EFM-OAM-MIB", prvtEfmOamLoopbackTimeout=prvtEfmOamLoopbackTimeout, prvtEfmOamEventForwardShutdown=prvtEfmOamEventForwardShutdown, prvtEfmOamPingDelayTime=prvtEfmOamPingDelayTime, prvtEfmOamHistorySize=prvtEfmOamHistorySize, prvtEfmOamNotifications=prvtEfmOamNotifications, prvtEfmOamLoopbackOperation=prvtEfmOamLoopbackOperation, prvtEfmOamObjects=prvtEfmOamObjects, prvtEfmOamPingResultRcvRateFractional=prvtEfmOamPingResultRcvRateFractional, prvtEfmOamLoopbackDuration=prvtEfmOamLoopbackDuration, prvtEfmOamTable=prvtEfmOamTable, prvtEfmOamLoopbackCount=prvtEfmOamLoopbackCount, prvtEfmOamLoopbackResultStatus=prvtEfmOamLoopbackResultStatus, prvtEfmOamEventForwardStatus=prvtEfmOamEventForwardStatus, prvtEfmOamRemoteEvent=prvtEfmOamRemoteEvent, prvtEfmOamPingResultClear=prvtEfmOamPingResultClear, prvtEfmOamLoopback=prvtEfmOamLoopback, prvtEfmOamLoopbackResultSentPackets=prvtEfmOamLoopbackResultSentPackets, prvtEfmOamPingResultTimeMax=prvtEfmOamPingResultTimeMax, prvtEfmOamLoopbackEntry=prvtEfmOamLoopbackEntry, prvtEfmOamKeepAlive=prvtEfmOamKeepAlive, prvtEfmOamPktsSent=prvtEfmOamPktsSent, prvtEfmOamMultiPduCount=prvtEfmOamMultiPduCount, prvtEfmOamLoopbackPacketSize=prvtEfmOamLoopbackPacketSize, prvtEfmOamPingResultTable=prvtEfmOamPingResultTable, prvtEfmOamPeerName=prvtEfmOamPeerName, prvtEfmOamPingCounterLeaf=prvtEfmOamPingCounterLeaf, prvtEfmOamPingEntry=prvtEfmOamPingEntry, prvtEfmOamPingResultRcvRateInteger=prvtEfmOamPingResultRcvRateInteger, prvtEfmOamPingResultAverageTimeInteger=prvtEfmOamPingResultAverageTimeInteger, prvtEfmOamLoopbackResultEntry=prvtEfmOamLoopbackResultEntry, PYSNMP_MODULE_ID=prvtSwitchEfmOamMIB, prvtEfmOamEntry=prvtEfmOamEntry, prvtEfmOamEventReturn=prvtEfmOamEventReturn, prvtEfmOamPktsReceived=prvtEfmOamPktsReceived, prvtEfmOamPeerPort=prvtEfmOamPeerPort, prvtEfmOamForceLoopbackRemote=prvtEfmOamForceLoopbackRemote, prvtEfmOamLoopbackTable=prvtEfmOamLoopbackTable, prvtOamDyingGasp=prvtOamDyingGasp, prvtEfmOamEnable=prvtEfmOamEnable, prvtEfmOamPriority=prvtEfmOamPriority, prvtEfmOamPingResultReceivedPackets=prvtEfmOamPingResultReceivedPackets, prvtEfmOamLoopbackDelay=prvtEfmOamLoopbackDelay, prvtEfmOamPingEchoNumber=prvtEfmOamPingEchoNumber, prvtEfmOamPingResultSentPackets=prvtEfmOamPingResultSentPackets, prvtEfmOamLoopbackResultFlood=prvtEfmOamLoopbackResultFlood, prvtEfmOamPeerTable=prvtEfmOamPeerTable, prvtEfmOamPingTimeOut=prvtEfmOamPingTimeOut, prvtEfmOamConformance=prvtEfmOamConformance, prvtEfmOamLoopbackNoRemote=prvtEfmOamLoopbackNoRemote, prvtEfmOamPingResultEntry=prvtEfmOamPingResultEntry, prvtOamLoopBackState=prvtOamLoopBackState, prvtEfmOamPing=prvtEfmOamPing, prvtEfmOamPingRowStatus=prvtEfmOamPingRowStatus, prvtEfmOamPingTable=prvtEfmOamPingTable, prvtEfmOamPingResultAverageTimeFractional=prvtEfmOamPingResultAverageTimeFractional, prvtSwitchEfmOamMIB=prvtSwitchEfmOamMIB, prvtEfmOamLoopbackResultTable=prvtEfmOamLoopbackResultTable, prvtEfmOamLocalSysLog=prvtEfmOamLocalSysLog, prvtEfmOamPingResultTimeMin=prvtEfmOamPingResultTimeMin, prvtEfmOamPingCounterBranch=prvtEfmOamPingCounterBranch, prvtEfmOamLoopbackRowStatus=prvtEfmOamLoopbackRowStatus, prvtEfmOamEnhanceMode=prvtEfmOamEnhanceMode, prvtEfmOamForceLoopbackLocal=prvtEfmOamForceLoopbackLocal, prvtEfmOamPeerEntry=prvtEfmOamPeerEntry, prvtEfmOamLoopbackResultClear=prvtEfmOamLoopbackResultClear, prvtEfmOamPingResultStatus=prvtEfmOamPingResultStatus, prvtEfmOamLoopbackResultReceivedPackets=prvtEfmOamLoopbackResultReceivedPackets, prvtEfmOamHelloInterval=prvtEfmOamHelloInterval)
