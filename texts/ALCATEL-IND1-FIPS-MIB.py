#
# PySNMP MIB module ALCATEL-IND1-FIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-FIPS-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:48:01 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Fips, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Fips")
MultiChassisId, = mibBuilder.importSymbols("ALCATEL-IND1-MULTI-CHASSIS-MIB", "MultiChassisId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, NotificationType, Counter32, IpAddress, ModuleIdentity, ObjectIdentity, iso, Gauge32, Counter64, Bits, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "iso", "Gauge32", "Counter64", "Bits", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, TextualConvention, DisplayString, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "DateAndTime", "TimeStamp")
alcatelIND1FipsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1))
if mibBuilder.loadTexts: alcatelIND1FipsMIB.setLastUpdated('201210160000Z')
if mibBuilder.loadTexts: alcatelIND1FipsMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1FipsMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1FipsMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the MIB module for\n              address learning mac addresses entity.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
class FipsFCMAP(TextualConvention, OctetString):
    description = 'In a Fabric Provided MAC Address, the required value\n            for the upper 24 bits of a MAC address assigned to a\n            VN_Port. - FC-BB-5-09-056v5.pdf; Section 3.5.5'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class Fcid(TextualConvention, OctetString):
    description = 'A 3 byte N_PORT_ID obtained when a Fibre Channel port successfully login to a Fabric.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class Wwpn(TextualConvention, OctetString):
    description = 'An 8 byte name assigned to each Fibre Channel ports.  First 2 bytes are 1000H and remainng 6 bytes are MAC address of the port.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Wwnn(TextualConvention, OctetString):
    description = 'An 8 byte name assigned to the switch.  First 2 bytes are 1000H and remainng 6 bytes are switch MAC address of AOS.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

alcatelIND1FipsMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 0))
if mibBuilder.loadTexts: alcatelIND1FipsMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBNotifications.setDescription('Branch For FIP Snooping Module MIB Subsystem Notifications.')
alcatelIND1FipsMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1))
if mibBuilder.loadTexts: alcatelIND1FipsMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBObjects.setDescription('Branch For FIP Snooping Module MIB Subsystem Managed Objects.')
alcatelIND1FipsMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2))
if mibBuilder.loadTexts: alcatelIND1FipsMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBConformance.setDescription('Branch for FIP Snooping Module MIB Subsystem Conformance Information.')
alcatelIND1FipsMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1FipsMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBGroups.setDescription('Branch for FIP Snooping Module MIB Subsystem Units of Conformance.')
alcatelIND1FipsMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1FipsMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBCompliances.setDescription('Branch for FIP Snooping Module MIB Subsystem Compliance Statements.')
alaFipsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1))
alaFipsConfigFilterResourceLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigFilterResourceLimit.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigFilterResourceLimit.setDescription('Allowed maximum percentage of filter resources to be configured from the allocated FIPS resources.')
alaFipsConfigFIPSAdmin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigFIPSAdmin.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigFIPSAdmin.setDescription('Fips FIP Snooping Admin State, With the Value set as Enable FIP Snooping is enabled in the System ')
alaFipsConfigAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fpma", 1), ("spma", 2))).clone('fpma')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigAddressMode.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigAddressMode.setDescription('Fips Address Mode Supported on the Switch ')
alaFipsConfigPriorityOne = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigPriorityOne.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigPriorityOne.setDescription('First fips lossless Priority ')
alaFipsConfigPriorityTwo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigPriorityTwo.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigPriorityTwo.setDescription('Second fips lossless Priority.  Valid priorities are 0 - 7;  Lower numbers represent higher priority; 1 indicates that this object is not configured.')
alaFipsTotalNumFilterResource = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 6), Unsigned32().clone(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsTotalNumFilterResource.setStatus('current')
if mibBuilder.loadTexts: alaFipsTotalNumFilterResource.setDescription('Fips Total Num of Available Filter Resources ')
alaFipsUsedNumFilterResource = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsUsedNumFilterResource.setStatus('current')
if mibBuilder.loadTexts: alaFipsUsedNumFilterResource.setDescription('Fips Total Num of Used Filter Resources ')
alaFipsConfigStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigStatsClear.setDescription('Global Fips Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics in the VLAN as well as Port Level')
alaFipsConfigPrioProtection = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigPrioProtection.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigPrioProtection.setDescription("This enables/disables Fips priority protection globally, 'disable(0)' is Default Value.")
alaFipsConfigPriorityProtectionAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("remark", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigPriorityProtectionAction.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigPriorityProtectionAction.setDescription("When Fips priority protection is enabled, the action on non-protected priorities can be 'drop' or 'remark'. Selecting 'drop', discards\n         all frames with different priority and/or non-FCoE ethertype.  Selecting 'remark', changes the priority and forwards.")
alaFipsConfigPriorityProtectionRemarkVal = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigPriorityProtectionRemarkVal.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigPriorityProtectionRemarkVal.setDescription("When Fips priority protection is 'enabled' and configured as 'remark', this represents the remarked priority.\n        Valid priorities are 0 - 7; Lower numbers represent higher priority; -1 indicates that this object is not configured.")
alaFipsConfigHouseKeepingTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 12), Unsigned32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigHouseKeepingTimePeriod.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigHouseKeepingTimePeriod.setDescription('This sets the time peroid (in seconds) for FIP Snooping house keeping activity.')
alaFipsConfigSWReinsertStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigSWReinsertStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigSWReinsertStatus.setDescription('Fips FIP Snooping Software Reinsert Status ,With the Value set as Enable FIP Control Packet will be forwarded from software instead of hardware ')
alaFipsConfigSessClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("npiv", 2), ("reverseNpiv", 3), ("eTunnel", 4), ("fips", 5), ("npivPending", 6), ("none", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsConfigSessClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsConfigSessClear.setDescription('Clear sessions on FCoE ports; clear - ALL sessions / only NPIV sessions / only R-NPIV sessions / only E-TUNNEL sessions / FIPS sessions. ')
alaFipsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2))
alaFipsVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaFipsVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanTable.setDescription('This table has the Rows of Fips VLAN ')
alaFipsVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEntry.setDescription('Fips/FIPS global Entry.')
alaFipsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled ')
alaFipsVlanFCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1, 1, 2), FipsFCMAP().clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsVlanFCMap.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFCMap.setDescription('Fips FC-MAP on this VLAN.  Valid values are 0EFC00h to 0EFCFFh.  000000h is used to clear FC-MAP on this VLAN.')
alaFipsVlanStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsVlanStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanStatsClear.setDescription('FCoE VLAN Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics in the VLAN')
alaFipsVlanStatsFnreClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("fips", 2), ("npiv", 3), ("reverseNpiv", 4), ("eTunnel", 5), ("none", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsVlanStatsFnreClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanStatsFnreClear.setDescription('Global FCoE Statistics per feature Clear Object, 1 is Clear all the Fips Statistics at the VLAN Level')
alaFipsVlanEnodeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3))
alaFipsVlanEnodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsTable.setDescription('This table has the Rows of Fips VLAN Enode Statistics')
alaFipsVlanEnodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsEntry.setDescription('Fips per VLan/Enode Statistics Entry. All Counters starts from 0 when they rollover')
alaFipsVlanEnodeStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled ')
alaFipsVlanEnodeStatsSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsSessions.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsSessions.setDescription('Number of FCoE Sessions on this Vlan Id')
alaFipsVlanEnodeStatsMds = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsMds.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsMds.setDescription('Number of  Multicast Discovery Solicitation (MDS) Packets on this Vlan')
alaFipsVlanEnodeStatsUds = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsUds.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsUds.setDescription('Number of  Unicast Discovery Solicitation (MDS) Packets on this Vlan')
alaFipsVlanEnodeStatsFlogi = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsFlogi.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsFlogi.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Vlan')
alaFipsVlanEnodeStatsFdisc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsFdisc.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsFdisc.setDescription('Number of  Fabric Discovery (FDISC) Packets on this Vlan')
alaFipsVlanEnodeStatsLogo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsLogo.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsLogo.setDescription('Number of  Fabric Logouts (LOGO) Packets on this Vlan')
alaFipsVlanEnodeStatsEka = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsEka.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsEka.setDescription('Number of  Enode-keep-alive Packets on this Vlan')
alaFipsVlanEnodeStatsVnka = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsVnka.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsVnka.setDescription('Number of  VNPort-keep-alive Packets on this Vlan')
alaFipsVlanEnodeStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsClear.setDescription('FCoE VLAN Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics in the VLAN')
alaFipsVlanFcfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4))
alaFipsVlanFcfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaFipsVlanFcfStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsTable.setDescription('This table has the Rows of Fips VLAN FCF Statistics')
alaFipsVlanFcfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanFcfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsEntry.setDescription('Fips per VLan/FCF Statistics Entry. All Counters starts from 0 when they rollover')
alaFipsVlanFcfStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanFcfStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled ')
alaFipsVlanFcfStatsSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsSessions.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsSessions.setDescription('Number of FCoE Sessions on this Vlan Id')
alaFipsVlanFcfStatsMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsMda.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsMda.setDescription('Number of  Multicast Discovery Advertisement (MDA) Packets on this Vlan')
alaFipsVlanFcfStatsUda = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsUda.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsUda.setDescription('Number of  Unicast Discovery Advertisement (UDA) Packets on this Vlan')
alaFipsVlanFcfStatsFlogiAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFlogiAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFlogiAcc.setDescription('Number of  Fabric Login Accept (FLOGI_ACC) Packets on this Vlan')
alaFipsVlanFcfStatsFlogiRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFlogiRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFlogiRjt.setDescription('Number of  Fabric Login Reject (FLOGI_RJT) Packets on this Vlan')
alaFipsVlanFcfStatsFdiscRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFdiscRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFdiscRjt.setDescription('Number of  Fabric Login Reject (FDISC_RJT) Packets on this Vlan')
alaFipsVlanFcfStatsLogoAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsLogoAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsLogoAcc.setDescription('Number of  Fabric Logout Accept (LOGO_ACC) Packets on this Vlan')
alaFipsVlanFcfStatsLogoRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsLogoRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsLogoRjt.setDescription('Number of  Fabric Logout Reject (LOGO_RJT) Packets on this Vlan')
alaFipsVlanFcfStatsCvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsCvl.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsCvl.setDescription('Number of  Clear Virtual Link (CVL)  Packets on this Vlan')
alaFipsVlanFcfStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsClear.setDescription('FCoE VLAN Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics in the VLAN')
alaFipsVlanFcfStatsFdiscAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFdiscAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsFdiscAcc.setDescription('Number of Fabric Disc Acc (FDISC_ACC)  Packets on this Vlan')
alaFipsIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5))
alaFipsIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaFipsIntfTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfTable.setDescription('This table has the Rows of Fips Interfaces ')
alaFipsIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEntry.setDescription('List of Fips Interfaces.')
alaFipsIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFipsIntfIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfIfIndex.setDescription(' Interface where Fips is enabled, it can be indivisual Port /Linkagg  ')
alaFipsIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfOperStatus.setDescription(' Interface oper statusof  individual Port /Linkagg  ')
alaFipsIntfPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("edge", 1), ("enode", 2), ("fcf", 3), ("mixed", 4), ("trusted", 5), ("ve", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsIntfPortRole.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfPortRole.setDescription(' Fips Port roles are assigned.\n          VE stands for Virtual Expansion.  A VE port on one FCF is\n          connected to a VE port on another FCF.  This link carries\n          ISL (inter-switch link) traffic (includes Fabric control\n          traffic and data traffic) between connected devices.\n          FIP ELP Exchanges are allowed on ports whose role declared\n          as VE.')
alaFipsIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 4), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table Fips alaFipsIntfTable')
alaFipsIntfStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsIntfStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfStatsClear.setDescription('Fips Interface Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics on the Interface')
alaFipsIntfStatsFnreClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("fips", 2), ("npiv", 3), ("reverseNpiv", 4), ("eTunnel", 5), ("none", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsIntfStatsFnreClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfStatsFnreClear.setDescription('Global FCoE Statistics per feature Clear Object, 1 is Clear all the Fips Statistics at the Port Level')
alaFipsIntfEnodeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6))
alaFipsIntfEnodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsTable.setDescription('This table has the Rows of Fips Interfaces ')
alaFipsIntfEnodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsEntry.setDescription('Fips per Intf/Enode Statistics Entry. All Counters starts from 0 when they rollover')
alaFipsIntfEnodeStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsIfIndex.setDescription(' Interface where Fips is enabled, it can be indivisual Port /Linkagg  ')
alaFipsIntfEnodeStatsSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsSessions.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsSessions.setDescription('Number of FCoE Sessions on this Intf')
alaFipsIntfEnodeStatsMds = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsMds.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsMds.setDescription('Number of  Multicast Discovery Solicitation (MDS) Packets on this Intf')
alaFipsIntfEnodeStatsUds = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsUds.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsUds.setDescription('Number of  Unicast Discovery Solicitation (MDS) Packets on this Intf')
alaFipsIntfEnodeStatsFlogi = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsFlogi.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsFlogi.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Intf')
alaFipsIntfEnodeStatsFdisc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsFdisc.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsFdisc.setDescription('Number of  Fabric Discovery (FDISC) Packets on this Intf')
alaFipsIntfEnodeStatsLogo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsLogo.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsLogo.setDescription('Number of  Fabric Logouts (LOGO) Packets on this Intf')
alaFipsIntfEnodeStatsEka = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsEka.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsEka.setDescription('Number of  Enode-keep-alive  Packets on this Intf')
alaFipsIntfEnodeStatsVnka = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsVnka.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsVnka.setDescription('Number of  VNPort-keep-alive   Packets on this Intf')
alaFipsIntfEnodeStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 6, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsClear.setDescription('Fips Interface Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics on the Interface')
alaFipsIntfFcfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7))
alaFipsIntfFcfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaFipsIntfFcfStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsTable.setDescription('This table has the Rows of Fips Interfaces ')
alaFipsIntfFcfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfFcfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsEntry.setDescription('Fips per Intf/FCF Statistics Entry. All Counters starts from 0 when they rollover')
alaFipsIntfFcfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFipsIntfFcfStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsIfIndex.setDescription(' Interface where Fips is enabled, it can be indivisual Port /Linkagg  ')
alaFipsIntfFcfStatsSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsSessions.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsSessions.setDescription('Number of FCoE Sessions on this Intf')
alaFipsIntfFcfStatsMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsMda.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsMda.setDescription('Number of  Multicast Discovery Advertisement (MDA)   Packets on this Intf')
alaFipsIntfFcfStatsUda = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsUda.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsUda.setDescription('Number of  Unicast Discovery Advertisement (UDA)   Packets on this Intf')
alaFipsIntfFcfStatsFlogiAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFlogiAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFlogiAcc.setDescription('Number of  Fabric Login Accept (FLOGI_ACC) Packets on this Intf')
alaFipsIntfFcfStatsFdiscRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFdiscRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFdiscRjt.setDescription('Number of  Fabric Discovery (FDISC-RJT) Packets on this Intf')
alaFipsIntfFcfStatsFlogiRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFlogiRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFlogiRjt.setDescription('Number of  Fabric Login Reject (FLOGI_RJT) Packets on this Intf')
alaFipsIntfFcfStatsLogoAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsLogoAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsLogoAcc.setDescription('Number of  Fabric Logout Accept (LOGO_ACC) Packets on this Intf')
alaFipsIntfFcfStatsLogoRjt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsLogoRjt.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsLogoRjt.setDescription('Number of  Fabric Logout Reject (LOGO_RJT) Packets on this Intf')
alaFipsIntfFcfStatsCvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsCvl.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsCvl.setDescription('Number of  Clear Virtual Link (CVL)  Packets on this Intf')
alaFipsIntfFcfStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsClear.setDescription('Fips Interface Statistics Clear Object, 0 is Default Value 1 is is Clear all the Fips Statistics on the Interface')
alaFipsIntfFcfStatsFdiscAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFdiscAcc.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsFdiscAcc.setDescription('Number of Fabric Disc Acc (FDISC_ACC)  Packets on this Vlan')
alaFipsFcf = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8))
alaFipsFcfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaFipsFcfTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfTable.setDescription('This table has the Rows of FCoE Interfaces ')
alaFipsFcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsFcfMAC"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsFcfVlan"))
if mibBuilder.loadTexts: alaFipsFcfEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfEntry.setDescription('List of Fips FCFs.')
alaFipsFcfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaFipsFcfMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfMAC.setDescription(' FCF MAC configured/Learned in the System')
alaFipsFcfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsFcfVlan.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfVlan.setDescription(' Vlan on which the ')
alaFipsFcfIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfIntf.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfIntf.setDescription(' Interface Fips session exists, it can be indivisual Port /Linkagg.')
alaFipsFcfSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfSessions.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfSessions.setDescription(' Number of Fips Sessions on this FCF MAC in the given VLAN')
alaFipsFcfConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fpma", 1), ("spma", 2))).clone('fpma')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsFcfConfigType.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfConfigType.setDescription(' The FCF MAC is SPMA or FPMA')
alaFipsFcfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 6), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsFcfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table Fips alaFipsFcfTable')
alaFipsFcfAvailForLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfAvailForLogin.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfAvailForLogin.setDescription(" The FCF's availability for login-in")
alaFipsFcfMaxFcoeFrmSizeVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfMaxFcoeFrmSizeVerified.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfMaxFcoeFrmSizeVerified.setDescription(" The FCF's max frame size verified")
alaFipsFcfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfPriority.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfPriority.setDescription('Value of priority in FIP Discovery Advertisement packets received/generated on this VLAN for the FCF.')
alaFipsFcfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2), ("npiv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsFcfType.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfType.setDescription(' The FCF MAC is learned from FIP Snooping or Administrator Configuration or NPIV serviced')
alaFipsSession = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9))
alaFipsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaFipsSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionTable.setDescription('This table has the list of Session in the system ')
alaFipsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsSessionEnodeMAC"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsSessionVNMAC"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsSessionVlanId"))
if mibBuilder.loadTexts: alaFipsSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionEntry.setDescription('List of Fips Session.')
alaFipsSessionEnodeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaFipsSessionEnodeMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionEnodeMAC.setDescription(' Enode MAC where for which this session exists')
alaFipsSessionVNMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaFipsSessionVNMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionVNMAC.setDescription(' VN MAC address of the Session')
alaFipsSessionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsSessionVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionVlanId.setDescription(' FCF VLAN ID of the Session')
alaFipsSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionIfIndex.setDescription(' Interface Fips session exists, it can be indivisual Port /Linkagg.')
alaFipsSessionFCFMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsSessionFCFMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionFCFMAC.setDescription(' FCF MAC address of the Session')
alaFipsSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pending", 1), ("created", 2))).clone('pending')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsSessionStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionStatus.setDescription(' FCF Session Pending or Active')
alaFipsSessionLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsSessionLoginTime.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionLoginTime.setDescription("This is the value of the 'sysUpTime' object when this\n        FCoE session established")
alaFipsSessionLoginTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 9, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsSessionLoginTimeDate.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionLoginTimeDate.setDescription('Date and time of this session login')
alaFipsResourceThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 0, 1)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsFilterResourceUsage"))
if mibBuilder.loadTexts: alaFipsResourceThresholdReached.setStatus('current')
if mibBuilder.loadTexts: alaFipsResourceThresholdReached.setDescription('The trap shall be raised when FIPS configuration results in utilization of more filter resources than configured % of resources for FIPS.')
alaFipsNotificationObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 10))
alaFipsFilterResourceUsage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaFipsFilterResourceUsage.setStatus('current')
if mibBuilder.loadTexts: alaFipsFilterResourceUsage.setDescription('The % of allocated filter resources used by current FIP Snooping configuration.')
alaFcVsan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11))
alaFcVsanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaFcVsanTable.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanTable.setDescription('A list of Virtual SAN instances in this device.')
alaFcVsanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcVsanNumber"))
if mibBuilder.loadTexts: alaFcVsanEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanEntry.setDescription('A VSAN entry.')
alaFcVsanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFcVsanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNumber.setDescription('The VSAN number identifying this instance. Valid\n         range from 1 to 4094.')
alaFcVsanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcVsanDescription.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanDescription.setDescription('Textual description of the VSAN instance.')
alaFcVsanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcVsanAdmStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanAdmStatus.setDescription('The administrative status which can be set by\n         configuration. Disable(1) will disable ALL FC ports\n         that are connected to this VSAN, enable(2) will enable\n         ALL ports on this VSAN.')
alaFcVsanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanOperStatus.setDescription('Provide operating status of a particular VSAN environment.')
alaFcVsanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 11, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcVsanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRowStatus.setDescription('Row status to control creation/deletion of Vsans.')
alaFcVfpa = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12))
alaFcVfpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1), )
if mibBuilder.loadTexts: alaFcVfpaTable.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaTable.setDescription('A list of Virtual SAN instances in this device.')
alaFcVfpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcVfpaVsanNumber"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFcVfpaIfIndex"))
if mibBuilder.loadTexts: alaFcVfpaEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaEntry.setDescription('A VSAN-FC Port Association (VPA) entry.')
alaFcVfpaVsanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFcVfpaVsanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaVsanNumber.setDescription('The VSAN number component of this instance. Valid\n         range from 1 to 4094.')
alaFcVfpaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1001, 4294967295)))
if mibBuilder.loadTexts: alaFcVfpaIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaIfIndex.setDescription('The ifIndex component of this instance.')
alaFcVfpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVfpaState.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaState.setDescription('The state of this vfpa')
alaFcVfpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 12, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcVfpaRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaRowStatus.setDescription('This is used to create or delete staticPrimary VFPAs (default vsans\n         on a fibre port ).  Creation replaces the existing staticPrimary VPA\n         while deletion replaces the existing VFPA so that the vsan number\n         is 1 for the given fibre port.  Of course the corresponding vsan and\n         fiber port must exist.')
alaFcIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13))
alaFcIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1), )
if mibBuilder.loadTexts: alaFcIntfTable.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfTable.setDescription('This table has the Rows of FC Interfaces ')
alaFcIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcIntfIfIndex"))
if mibBuilder.loadTexts: alaFcIntfEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEntry.setDescription('List of FC Interfaces.')
alaFcIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFcIntfIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfIfIndex.setDescription(' Interface where ports are configured in Fibre Channel mode.')
alaFcIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfOperStatus.setDescription(' Interface oper status of  FC Port.')
alaFcIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("np", 1), ("f", 2), ("te", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcIntfMode.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfMode.setDescription(' FC Port mode of operation\n            1. np - Proxy N_Port\n            2. f - Fabric Port connected to N_port\n            3. te - Tunnel E-Port')
alaFcIntfBbScN = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcIntfBbScN.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfBbScN.setDescription(' Buffer-to-Buffer State Change Number - Fibre Channels ports exchange Buffer-to-Buffer State Change (BB_SC)\n          primitives after 2^BB_SC_N frames.  BB_SC primities are used to re-calculate buffer crdits.')
alaFcIntfClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class2", 1), ("class3", 2), ("classF", 3), ("class3andF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfClassOfService.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfClassOfService.setDescription(' Classes of service are distinguished primarily by the level of delivery integrity required for an application.  Section 4.7 of FC-FC-4.\n          1. class-2 - Class 2 is a frame delivery service multiplexing frames at frame boundaries with frame acknowledgement\n          2. class-3 - Class 3 is a frame delivery service with the Fabric multiplexing frames at frame boundaries without frame acknowledgement\n          3. class-f - Class F is a frame delivery service used only for communication between switches in a Fabric')
alaFcIntfFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 6), Fcid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfFcid.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfFcid.setDescription(' FC Port ID received after succesful intial Fabric login.  It is a 3 byte value.')
alaFcIntfWwpn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 7), Wwpn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfWwpn.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfWwpn.setDescription(' FC Port name assigned to ports that are in FC mode by AOS.  It is an 8 byte value whose first 2 bytes are 1000h and remaing bytes  of operation.')
alaFcIntfLoginState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("flogiSent", 2), ("elpSent", 3), ("sessionClearing", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfLoginState.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfLoginState.setDescription(' Interface FLOGI status of  FC Port.')
alaFcIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 9), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table FC alaFcIntfTable.')
alaFcIntfStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcIntfStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfStatsClear.setDescription('FC Interface Statistics Clear Objectr; Clears all the FC Statistics on the Interface')
alaFcNpivStaticLoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14))
alaFcNpivStaticLoadBalanceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14, 1), )
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceTable.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceTable.setDescription('This table has the Rows of FC Interfaces and FCoE interface mapping for static loadbalancing.\n             Load balancing algorithm is for the creation of FC sessions when there is more than\n             one FC port is connected within a VSAN.  Default is - new session is created on the\n             port which has least number of sessions.\n             dynamic-reorder - When new FC ports become active within the VSAN, some of the sessions are\n                       logged out and relogged in to load balace the sessions across the FC ports.\n             enode-based - FC port on which new session is established is chosen based on ENODE MAC.\n             static - This algorithm allows administrator to map sessions on specific FCoE port to a\n                      specific FC port(s).')
alaFcNpivStaticLoadBalanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcNpivStaticLoadBalanceFcIfIndex"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFcNpivStaticLoadBalanceEthIfIndex"))
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceEntry.setDescription('List of FC Interface FCoE interface mappings.')
alaFcNpivStaticLoadBalanceFcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceFcIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceFcIfIndex.setDescription(' Fibre Channel Interface of the mapping.')
alaFcNpivStaticLoadBalanceEthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14, 1, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceEthIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceEthIfIndex.setDescription(' Ethernet Interface of the mapping.  It can be a linkagg.')
alaFcNpivStaticLoadBalanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 14, 1, 1, 3), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table FC alaFcNpivStaticLoadBalanceTable.')
alaFcNode = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15))
alaFcNodeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1), )
if mibBuilder.loadTexts: alaFcNodeTable.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeTable.setDescription('This table has the Rows of FC Interfaces ')
alaFcNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcNodeIfIndex"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFcNodeWwpn"))
if mibBuilder.loadTexts: alaFcNodeEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeEntry.setDescription('List of FC nodes.')
alaFcNodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcNodeIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeIfIndex.setDescription(' Interface where FC node is connected.')
alaFcNodeWwpn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 2), Wwpn())
if mibBuilder.loadTexts: alaFcNodeWwpn.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeWwpn.setDescription(' FC Port port name.  It is a 8 byte value.')
alaFcNodeVsanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcNodeVsanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeVsanNumber.setDescription('The VSAN number on which FC node is connected.')
alaFcNodeVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcNodeVlanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeVlanNumber.setDescription('The VLAN number on which this FC node services are provided/used.')
alaFcNodeFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 5), Fcid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcNodeFcid.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeFcid.setDescription(' FC Port ID optained for F Node after succesful Node login.  It is a 3 byte value.')
alaFcNodeWwnn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 15, 1, 1, 6), Wwnn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcNodeWwnn.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeWwnn.setDescription(' FC Node (AOS) name.  It is a 8 byte value.')
alaFcSess = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16))
alaFcSessTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1), )
if mibBuilder.loadTexts: alaFcSessTable.setStatus('current')
if mibBuilder.loadTexts: alaFcSessTable.setDescription('This table has the Rows of FC Interfaces ')
alaFcSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcSessIfIndex"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFcSessWwpn"))
if mibBuilder.loadTexts: alaFcSessEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcSessEntry.setDescription('List of FC Interfaces.')
alaFcSessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcSessIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcSessIfIndex.setDescription(' Interface where FC node is connected.')
alaFcSessWwpn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 2), Wwpn())
if mibBuilder.loadTexts: alaFcSessWwpn.setStatus('current')
if mibBuilder.loadTexts: alaFcSessWwpn.setDescription(' FC Port port name.  It is a 8 byte value.')
alaFcSessVsanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessVsanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFcSessVsanNumber.setDescription('The VSAN number on which FC node is connected.')
alaFcSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pending", 1), ("success", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessStatus.setStatus('current')
if mibBuilder.loadTexts: alaFcSessStatus.setDescription(' FC Port session status')
alaFcSessIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("np", 1), ("f", 2), ("te", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessIntfMode.setStatus('current')
if mibBuilder.loadTexts: alaFcSessIntfMode.setDescription(' FC Port mode of operation\n            1. np - Proxy N_Port\n            2. f - Fabric Port connected to N_port\n            3. te - Tunnel E-Port')
alaFcSessFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 6), Fcid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessFcid.setStatus('current')
if mibBuilder.loadTexts: alaFcSessFcid.setDescription(' FC Port ID received after succesful Fabric login.  It is a 3 byte value.')
alaFcSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdisc", 1), ("flogi", 2), ("elp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessType.setStatus('current')
if mibBuilder.loadTexts: alaFcSessType.setDescription(' FC Port session login type.')
alaFcSessTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 16, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcSessTunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFcSessTunnelId.setDescription('The tunnel Id associated with the FC session, if applicable (E-Tunnels).')
alaFcIntfNpivStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17))
alaFcIntfNpivStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1), )
if mibBuilder.loadTexts: alaFcIntfNpivStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsTable.setDescription('This table has the Rows of FC Interfaces for statistics of NPIV. ')
alaFcIntfNpivStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsIfIndex"))
if mibBuilder.loadTexts: alaFcIntfNpivStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsEntry.setDescription('NPIV per Intf Statistics Entry. All Counters starts from 0 when they rollover')
alaFcIntfNpivStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcIntfNpivStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsIfIndex.setDescription(' NPIV statistics on this FC port. ')
alaFcIntfNpivStatsTxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFlogis.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfNpivStatsTxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFdiscs.setDescription('Number of  Fabric Logins (FDISC) Packets on this Intf')
alaFcIntfNpivStatsRxLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxLsAccs.setDescription('Number of LS_ACC Packets on this Intf')
alaFcIntfNpivStatsRxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Rx Packets on this Intf')
alaFcIntfNpivStatsRxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFlogiLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfNpivStatsRxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsRxFdiscLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfNpivStatsTxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsTxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Tx Packets on this Intf')
alaFcIntfNpivStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcIntfNpivStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsClear.setDescription('Clear Npiv statistics on  this Intf')
alaFcVsanNpivStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18))
alaFcVsanNpivStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1), )
if mibBuilder.loadTexts: alaFcVsanNpivStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsTable.setDescription('This table has the Rows of VSANS for statistics of NPIV. ')
alaFcVsanNpivStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsVsan"))
if mibBuilder.loadTexts: alaFcVsanNpivStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsEntry.setDescription('NPIV per Vsan Statistics Entry. All Counters starts from 0 when they rollover')
alaFcVsanNpivStatsVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFcVsanNpivStatsVsan.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsVsan.setDescription('NPIV statistics on this VSAN number.')
alaFcVsanNpivStatsTxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFlogis.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanNpivStatsTxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFdiscs.setDescription('Number of  Fabric Logins (FDISC) Packets on this Vsan')
alaFcVsanNpivStatsRxLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxLsAccs.setDescription('Number of LS_ACC Packets on this Vsan')
alaFcVsanNpivStatsRxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Rx Packets on this Vsan')
alaFcVsanNpivStatsRxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFlogiLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanNpivStatsRxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsRxFdiscLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanNpivStatsTxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 18, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsTxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Tx Packets on this Vsan')
alaFcIntfRnpivStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19))
alaFcIntfRnpivStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1), )
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTable.setDescription('This table has the Rows of FC Interfaces for statistics of R-NPIV. ')
alaFcIntfRnpivStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsIfIndex"))
if mibBuilder.loadTexts: alaFcIntfRnpivStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsEntry.setDescription('R-NPIV per Intf Statistics Entry. All Counters starts from 0 when they rollover')
alaFcIntfRnpivStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcIntfRnpivStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsIfIndex.setDescription(' NPIV statistics on this FC port. ')
alaFcIntfRnpivStatsRxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFlogis.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfRnpivStatsRxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFdiscs.setDescription('Number of  Fabric Logins (FDISC) Packets on this Intf')
alaFcIntfRnpivStatsTxFlogiLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogiLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogiLsAccs.setDescription('Number of LS_ACCs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfRnpivStatsTxFdiscLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFdiscLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFdiscLsAccs.setDescription('Number of LS_ACCs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfRnpivStatsTxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Tx Packets on this Intf')
alaFcIntfRnpivStatsTxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFlogiLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfRnpivStatsTxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsTxFdiscLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Intf')
alaFcIntfRnpivStatsRxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsRxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Rx Packets on this Intf')
alaFcIntfRnpivStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcIntfRnpivStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsClear.setDescription('Clear Rnpiv statistics on  this Intf')
alaFcVsanRnpivStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20))
alaFcVsanRnpivStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1), )
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTable.setDescription('This table has the Rows of VSANS for statistics of R-NPIV. ')
alaFcVsanRnpivStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsVsan"))
if mibBuilder.loadTexts: alaFcVsanRnpivStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsEntry.setDescription('R-NPIV per Vsan Statistics Entry. All Counters starts from 0 when they rollover')
alaFcVsanRnpivStatsVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFcVsanRnpivStatsVsan.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsVsan.setDescription('R-NPIV statistics on this VSAN number.')
alaFcVsanRnpivStatsRxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFlogis.setDescription('Number of  Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanRnpivStatsRxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFdiscs.setDescription('Number of  Fabric Logins (FDISC) Packets on this Vsan')
alaFcVsanRnpivStatsTxFlogiLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogiLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogiLsAccs.setDescription('Number of LS_ACCs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanRnpivStatsTxFdiscLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFdiscLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFdiscLsAccs.setDescription('Number of LS_ACCs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanRnpivStatsTxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Tx Packets on this Vsan')
alaFcVsanRnpivStatsTxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFlogiLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanRnpivStatsTxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsTxFdiscLsRjts.setDescription('Number of LS_RJTs for Fabric Logins (FLOGI) Packets on this Vsan')
alaFcVsanRnpivStatsRxFlogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 20, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFlogos.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsRxFlogos.setDescription('Number of FLOGOs for Fabric Logins (FLOGI) Rx Packets on this Vsan')
alaFcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 21))
alaFcConfigSessClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("npiv", 2), ("reverseNpiv", 3), ("eTunnel", 4), ("none", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcConfigSessClear.setStatus('current')
if mibBuilder.loadTexts: alaFcConfigSessClear.setDescription('Clear sessions on Fibre Channel ports; clear - ALL sessions / only NPIV sessions / only R-NPIV sessions / only E-TUNNEL sessions.')
alaFcConfigStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("npiv", 2), ("reverseNpiv", 3), ("eTunnel", 4), ("none", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcConfigStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFcConfigStatsClear.setDescription('Global FC Statistics Clear Object, Value 1 to Clear all the FC Statistics, 2 for NPIV, 3 for Reverse-NPIV, 4 for E-Tunnel in the VSAN/Tunnel as well as Port Level')
alaFcConfigNpivLoadBalance = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("dynamicReorder", 2), ("enodeBased", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcConfigNpivLoadBalance.setStatus('current')
if mibBuilder.loadTexts: alaFcConfigNpivLoadBalance.setDescription("Load balancing algorithm is for the creation of FC sessions when there is more than\n             one FC port is connected within a VSAN.  The value configured here takes effect when\n             'static load balancing' is not configured on a pair of ports.\n             Default is - new session is created on the port (within the VSAN) which has least number of sessions.\n             dynamic-reorder - When new FC ports become active within the VSAN, some of the sessions are\n                               logged out and relogged in to load balace the sessions across the FC ports.\n             enode-based - FC port on which new session is established is chosen based on ENODE MAC.")
alaFcConfigWwnn = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 21, 4), Wwnn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcConfigWwnn.setStatus('current')
if mibBuilder.loadTexts: alaFcConfigWwnn.setDescription('World Wide Node Name of this device')
alaFipsVlanNpivDiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22))
alaFipsVlanNpivDiscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1), )
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTable.setDescription('This table has the Rows of FCoE VLAN NPIV ENODE Discovery Statistics.')
alaFipsVlanNpivDiscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsEntry.setDescription('Fips per VLan/NPIV ENODE Discovery Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsVlanNpivDiscStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsVlanNpivDiscStatsRxVlanDiscRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxVlanDiscRqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxVlanDiscRqs.setDescription('Number of VLAN discovery requests on this Vlan.')
alaFipsVlanNpivDiscStatsTxVlanDiscResps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxVlanDiscResps.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxVlanDiscResps.setDescription('Number of responses to VLAN discovery requests on this Vlan.')
alaFipsVlanNpivDiscStatsRxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxMdss.setDescription('Number of unicast discovery solicitations of NPIV proxy on this Vlan.')
alaFipsVlanNpivDiscStatsRxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsRxUdss.setDescription('Number of multicast discovery solicitations of NPIV proxy on this Vlan.')
alaFipsVlanNpivDiscStatsTxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxMdas.setDescription('Number of unicast discovery advertisements of NPIV proxy on this Vlan.')
alaFipsVlanNpivDiscStatsTxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 22, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsTxUdas.setDescription('Number of Multicast discovery advertisements of NPIV proxy on this Vlan.')
alaFipsIntfNpivDiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23))
alaFipsIntfNpivDiscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1), )
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTable.setDescription('This table has the Rows of FCoE Port NPIV ENODE Discovery Statistics.')
alaFipsIntfNpivDiscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsEntry.setDescription('Fips per Port/NPIV ENODE Discovery Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsIntfNpivDiscStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsIfIndex.setDescription('FCoE Port Id, the Port on which FCoE is enabled.')
alaFipsIntfNpivDiscStatsRxVlanDiscRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxVlanDiscRqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxVlanDiscRqs.setDescription('Number of VLAN discovery requests on this Port.')
alaFipsIntfNpivDiscStatsTxVlanDiscResps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxVlanDiscResps.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxVlanDiscResps.setDescription('Number of responses to VLAN discovery requests on this Port.')
alaFipsIntfNpivDiscStatsRxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxMdss.setDescription('Number of unicast discovery solicitations of NPIV proxy on this Port.')
alaFipsIntfNpivDiscStatsRxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsRxUdss.setDescription('Number of multicast discovery solicitations of NPIV proxy on this Port.')
alaFipsIntfNpivDiscStatsTxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxMdas.setDescription('Number of unicast discovery advertisements of NPIV proxy on this Port.')
alaFipsIntfNpivDiscStatsTxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 23, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsTxUdas.setDescription('Number of Multicast discovery advertisements of NPIV proxy on this Port.')
alaFipsVlanNpivLoginStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24))
alaFipsVlanNpivLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1), )
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTable.setDescription('This table has the Rows of FCoE VLAN NPIV Login Statistics.')
alaFipsVlanNpivLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsEntry.setDescription('Fips per VLan/NPIV Login Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsVlanNpivLoginStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsVlanNpivLoginStatsRxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxFlogis.setDescription('Number of  Fabric Login (FDISC) Packets on this VLAN.')
alaFipsVlanNpivLoginStatsRxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxFdiscs.setDescription('Number of  FLOGI Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFlogiAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogiAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogiAccs.setDescription('Number of  FLOGI ACC Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogiLsRjts.setDescription('Number of  LS RJT Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFdiscLsRjts.setDescription('Number of  FDISC RJT Packets on this VLAN.')
alaFipsVlanNpivLoginStatsRxLogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxLogos.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxLogos.setDescription('Number of  FLOGO Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxCvls.setDescription('Number of  Clear Virtual Link Packets on this VLAN.')
alaFipsVlanNpivLoginStatsRxEkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxEkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxEkas.setDescription('Number of  ENODE Keep Alive Packets on this VLAN.')
alaFipsVlanNpivLoginStatsRxVnkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxVnkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsRxVnkas.setDescription('Number of  VN Keep Alive Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFDiscAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFDiscAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFDiscAccs.setDescription('Number of  FDISC ACC Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFlogoAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogoAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFlogoAccs.setDescription('Number of  FLOGO ACC Packets on this VLAN.')
alaFipsVlanNpivLoginStatsTxFLogoLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 24, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFLogoLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsTxFLogoLsRjts.setDescription('Number of  FLOGO RJT Packets on this VLAN.')
alaFipsIntfNpivLoginStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25))
alaFipsIntfNpivLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1), )
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTable.setDescription('This table has the Rows of FCoE Port NPIV Login Statistics.')
alaFipsIntfNpivLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsEntry.setDescription('Fips per Port/NPIV Login Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsIntfNpivLoginStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsIfIndex.setDescription('FCoE Port Id, the Port on which FCoE is enabled.')
alaFipsIntfNpivLoginStatsRxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxFlogis.setDescription('Number of  Fabric Login (FDISC) Packets on this Port.')
alaFipsIntfNpivLoginStatsRxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxFdiscs.setDescription('Number of  FLOGI Packets on this Port.')
alaFipsIntfNpivLoginStatsTxFlogiAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogiAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogiAccs.setDescription('Number of FLOGI LS ACC Packets on this Port.')
alaFipsIntfNpivLoginStatsTxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogiLsRjts.setDescription('Number of  LS RJT Packets on this Port.')
alaFipsIntfNpivLoginStatsTxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFdiscLsRjts.setDescription('Number of  FDISC RJT Packets on this Port.')
alaFipsIntfNpivLoginStatsRxLogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxLogos.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxLogos.setDescription('Number of  FLOGO Packets on this Port.')
alaFipsIntfNpivLoginStatsTxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxCvls.setDescription('Number of  Clear Virtual Link Packets on this Port.')
alaFipsIntfNpivLoginStatsRxEkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxEkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxEkas.setDescription('Number of  ENODE Keep Alive Packets on this Port.')
alaFipsIntfNpivLoginStatsRxVnkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxVnkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsRxVnkas.setDescription('Number of  VN Keep Alive Packets on this Port.')
alaFipsIntfNpivLoginStatsTxFDiscAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFDiscAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFDiscAccs.setDescription('Number of  FDISC ACC Packets on this VLAN.')
alaFipsIntfNpivLoginStatsTxFlogoAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogoAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFlogoAccs.setDescription('Number of  FLOGO ACC Packets on this VLAN.')
alaFipsIntfNpivLoginStatsTxFLogoLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 25, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFLogoLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsTxFLogoLsRjts.setDescription('Number of  FLOGO RJT Packets on this VLAN.')
alaFipsVlanRnpivDiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26))
alaFipsVlanRnpivDiscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1), )
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTable.setDescription('This table has the Rows of FCoE VLAN R-NPIV FCF Discovery Statistics.')
alaFipsVlanRnpivDiscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsEntry.setDescription('Fips per VLan/R-NPIV FCF Discovery Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsVlanRnpivDiscStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsVlanRnpivDiscStatsRxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsRxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsRxMdas.setDescription('Number of  Multicast Discovery Advertisement Packets on this VLAN.')
alaFipsVlanRnpivDiscStatsRxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsRxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsRxUdas.setDescription('Number of  Unicast Discovery Advertisement Packets on this VLAN.')
alaFipsVlanRnpivDiscStatsTxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTxMdss.setDescription('Number of  Multicast Discovery Solicitation Packets on this VLAN.')
alaFipsVlanRnpivDiscStatsTxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 26, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsTxUdss.setDescription('Number of  Unicast Discovery Solicitation Packets on this VLAN.')
alaFipsIntfRnpivDiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27))
alaFipsIntfRnpivDiscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1), )
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTable.setDescription('This table has the Rows of FCoE Port R-NPIV FCF Discovery Statistics.')
alaFipsIntfRnpivDiscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsEntry.setDescription('Fips per Port/R-NPIV FCF Discovery Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsIntfRnpivDiscStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsIfIndex.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsIntfRnpivDiscStatsRxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsRxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsRxMdas.setDescription('Number of  Multicast Discovery Advertisement Packets on this Port.')
alaFipsIntfRnpivDiscStatsRxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsRxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsRxUdas.setDescription('Number of  Unicast Discovery Advertisement Packets on this Port.')
alaFipsIntfRnpivDiscStatsTxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTxMdss.setDescription('Number of  Multicast Discovery Solicitation Packets on this Port.')
alaFipsIntfRnpivDiscStatsTxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 27, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsTxUdss.setDescription('Number of  Unicast Discovery Solicitation Packets on this Port.')
alaFipsVlanRnpivLoginStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28))
alaFipsVlanRnpivLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1), )
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTable.setDescription('This table has the Rows of FCoE VLAN R-NPIV Node Login Statistics.')
alaFipsVlanRnpivLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsVlanId"))
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsEntry.setDescription('Fips per VLan/R-NPIV Node Login Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsVlanRnpivLoginStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsVlanRnpivLoginStatsTxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxFlogis.setDescription('Number of FLOGI Packets on this VLAN.')
alaFipsVlanRnpivLoginStatsTxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxFdiscs.setDescription('Number of  FDISC Packets on this VLAN.')
alaFipsVlanRnpivLoginStatsRxLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxLsAccs.setDescription('Number of  LS ACC Packets on this VLAN.')
alaFipsVlanRnpivLoginStatsRxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxFlogiLsRjts.setDescription('Number of  LS Rejects Packets for FLOGI on this VLAN.')
alaFipsVlanRnpivLoginStatsRxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxFdiscLsRjts.setDescription('Number of  LS Rejects Packets for FDISC on this VLAN.')
alaFipsVlanRnpivLoginStatsRxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsRxCvls.setDescription('Number of  Clear Virtual Link packets on this VLAN.')
alaFipsVlanRnpivLoginStatsTxLogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxLogos.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxLogos.setDescription('Number of  Clear Virtual Link packets on this VLAN.')
alaFipsVlanRnpivLoginStatsTxVnkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxVnkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxVnkas.setDescription('Number of  VN Keep Alive Packets on this VLAN.')
alaFipsVlanRnpivLoginStatsTxEkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 28, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxEkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsTxEkas.setDescription('Number of  ENODE Keep Alive Packets on this VLAN.')
alaFipsIntfRnpivLoginStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29))
alaFipsIntfRnpivLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1), )
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTable.setDescription('This table has the Rows of FCoE Port R-NPIV Node Login Statistics.')
alaFipsIntfRnpivLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsIfIndex"))
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsEntry.setDescription('Fips per Port/R-NPIV Node Login Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsIntfRnpivLoginStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsIfIndex.setDescription('FCoE Port Id, the Port on which FCoE is enabled.')
alaFipsIntfRnpivLoginStatsTxFlogis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxFlogis.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxFlogis.setDescription('Number of FLOGI Packets on this Port.')
alaFipsIntfRnpivLoginStatsTxFdiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxFdiscs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxFdiscs.setDescription('Number of  FDISC Packets on this Port.')
alaFipsIntfRnpivLoginStatsRxLsAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxLsAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxLsAccs.setDescription('Number of  LS ACC Packets on this Port.')
alaFipsIntfRnpivLoginStatsRxFlogiLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxFlogiLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxFlogiLsRjts.setDescription('Number of  LS Rejects Packets for FLOGI on this Port.')
alaFipsIntfRnpivLoginStatsRxFdiscLsRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxFdiscLsRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxFdiscLsRjts.setDescription('Number of  LS Rejects Packets for FDISC on this Port.')
alaFipsIntfRnpivLoginStatsRxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsRxCvls.setDescription('Number of  Clear Virtual Link packets on this Port.')
alaFipsIntfRnpivLoginStatsTxLogos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxLogos.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxLogos.setDescription('Number of  Clear Virtual Link packets on this Port.')
alaFipsIntfRnpivLoginStatsTxVnkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxVnkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxVnkas.setDescription('Number of  VN Keep Alive Packets on this Port.')
alaFipsIntfRnpivLoginStatsTxEkas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 29, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxEkas.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsTxEkas.setDescription('Number of  ENODE Keep Alive Packets on this Port.')
alaFipsEtunnelVePortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30))
alaFipsEtunnelVePortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1), )
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTable.setDescription('This table has the Rows of FCoE E-Tunnel E-Port Statistics.')
alaFipsEtunnelVePortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTunnelId"))
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsEntry.setDescription('Fips per E-Tunnel E-Port Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsEtunnelVePortStatsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTunnelId.setDescription('FCoE E-Tunnel Id.')
alaFipsEtunnelVePortStatsRxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxMdss.setDescription('Number of Multicast Discovery Solicitation Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxUdss.setDescription('Number of Unicast Discovery Solicitation Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxMdas.setDescription('Number of Multicast Discovery Advertisements Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxUdas.setDescription('Number of Unicast Discovery Advertisement Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxElpReqs.setDescription('Number of ELP Request Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxSwAccs.setDescription('Number of SW Accept Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxSwRjts.setDescription('Number of SW Reject Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsRxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsRxCvls.setDescription('Number of Clear Virtual Link Rx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxMdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxMdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxMdss.setDescription('Number of Multicast Discovery Solicitation Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxUdss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxUdss.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxUdss.setDescription('Number of Unicast Discovery Solicitation Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxMdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxMdas.setDescription('Number of Multicast Discovery Advertisements Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxUdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxUdas.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxUdas.setDescription('Number of Unicast Discovery Advertisement Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxElpReqs.setDescription('Number of ELP Request Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxSwAccs.setDescription('Number of SW Accept Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxSwRjts.setDescription('Number of SW Reject Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsTxCvls = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxCvls.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsTxCvls.setDescription('Number of Clear Virtual Link Tx Packets on this E-Tunnel.')
alaFipsEtunnelVePortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 30, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsClear.setDescription('Clear VE-Port statistics of this E-Tunnel.')
alaFipsEtunnelTePortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31))
alaFipsEtunnelTePortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1), )
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTable.setDescription('This table has the Rows of FCoE E-Tunnel E-Port Statistics.')
alaFipsEtunnelTePortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsTunnelId"))
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsEntry.setDescription('Fips per E-Tunnel E-Port Statistics Entry. All Counters starts from 0 when they rollover.')
alaFipsEtunnelTePortStatsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTunnelId.setDescription('FCoE E-Tunnel Id.')
alaFipsEtunnelTePortStatsRxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxElpReqs.setDescription('Number of ELP Request Rx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsRxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxSwAccs.setDescription('Number of SW Accept Rx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsRxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsRxSwRjts.setDescription('Number of Clear Virtual Link Rx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsTxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxElpReqs.setDescription('Number of ELP Request Tx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsTxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxSwAccs.setDescription('Number of SW Accept Tx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsTxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsTxSwRjts.setDescription('Number of Clear Virtual Link Tx Packets on this E-Tunnel.')
alaFipsEtunnelTePortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 31, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsClear.setDescription('Clear TE-Port statistics of this E-Tunnel.')
alaFipsVsanVlanMap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32))
alaFipsVsanVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32, 1), )
if mibBuilder.loadTexts: alaFipsVsanVlanMapTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapTable.setDescription('This table has the Rows of VSAN and FCoE VLAN mapping.')
alaFipsVsanVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsVsanVlanMapVsanNumber"))
if mibBuilder.loadTexts: alaFipsVsanVlanMapEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapEntry.setDescription('List of VSAN and FCoE VLAN mappings.')
alaFipsVsanVlanMapVsanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFipsVsanVlanMapVsanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapVsanNumber.setDescription('The VSAN number identifying this instance. Valid\n         range from 1 to 4094.')
alaFipsVsanVlanMapVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsVsanVlanMapVlanNumber.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapVlanNumber.setDescription('The VLAN number.')
alaFipsVsanVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 32, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsVsanVlanMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table FC alaFipsVsanVlanMapTable.')
alaFipsDiscAdvt = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33))
alaFipsDiscAdvtTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1), )
if mibBuilder.loadTexts: alaFipsDiscAdvtTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtTable.setDescription('This table has the Rows of Discovery Advertisement configuration per VLAN.')
alaFipsDiscAdvtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtVlanId"))
if mibBuilder.loadTexts: alaFipsDiscAdvtEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtEntry.setDescription('FCoE Discovery Advertisement configuration Entry.')
alaFipsDiscAdvtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsDiscAdvtVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE is enabled.')
alaFipsDiscAdvtAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsDiscAdvtAbit.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtAbit.setDescription('A-Bit value of FIP Discovery Advertisement packets transmitted on this VLAN.')
alaFipsDiscAdvtFkaAdvPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsDiscAdvtFkaAdvPeriod.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtFkaAdvPeriod.setDescription('Period (in seconds) of FIP Discovery Advertisement packets transmitted and FIP ENODE Keep Alive\n        packes expected on this VLAN.')
alaFipsDiscAdvtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsDiscAdvtPriority.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtPriority.setDescription('Value of priority in FIP Discovery Advertisement packets transmitted on this VLAN.')
alaFipsDiscAdvtUdsRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsDiscAdvtUdsRetries.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtUdsRetries.setDescription('Number of times an unicast discovery solicitation is transmitted after\n        a port, on which an FCF MAC is learnt, goes down.  This helps to\n        find, if the same FCF is reachable on some other port of the same vlan.')
alaFipsDiscAdvtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 33, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsDiscAdvtRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table Fips alaFipsDiscAdvtTable')
alaFipsEtunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34))
alaFipsEtunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1), )
if mibBuilder.loadTexts: alaFipsEtunnelTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTable.setDescription('This table has the Rows of E-Tunnels.')
alaFipsEtunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelId"))
if mibBuilder.loadTexts: alaFipsEtunnelEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelEntry.setDescription('FCoE E-Tunnel configuration Entry.')
alaFipsEtunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaFipsEtunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelId.setDescription('FCoE E-Tunnel Id.')
alaFipsEtunnelVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVlanId.setDescription('FCoE Vlan Id, the Vlan on which FCoE E-Tunnel is defined.')
alaFipsEtunnelIfIndexOne = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelIfIndexOne.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelIfIndexOne.setDescription('IfIndex of the one of the end points of the E-Tunnel.')
alaFipsEtunnelIfIndexTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelIfIndexTwo.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelIfIndexTwo.setDescription('IfIndex of the one of the end points of the E-Tunnel.')
alaFipsEtunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelRowStatus.setDescription(' Row status controls the creation and deletion of rows in the table alaFipsEtunnelTable.')
alaFipsEtunnelStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 34, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelStatsClear.setDescription('FCoE E-Tunnel Statistics Clear Object.')
alaFipsNpivSession = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35))
alaFipsNpivSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1), )
if mibBuilder.loadTexts: alaFipsNpivSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionTable.setDescription('This table has the list of Session in the system.')
alaFipsNpivSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionEnodeMAC"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionVNMAC"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionVlanId"))
if mibBuilder.loadTexts: alaFipsNpivSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionEntry.setDescription('List of FCoE NPIV Sessions.')
alaFipsNpivSessionEnodeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaFipsNpivSessionEnodeMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionEnodeMAC.setDescription(' Enode MAC where this NPIV session exists.')
alaFipsNpivSessionVNMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaFipsNpivSessionVNMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionVNMAC.setDescription(' VN MAC address of the Session.')
alaFipsNpivSessionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaFipsNpivSessionVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionVlanId.setDescription(' FCF VLAN ID of the Session.')
alaFipsNpivSessionInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsNpivSessionInIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionInIfIndex.setDescription(' FCoE interface on which FCoE NPIV session exists, it can be indivisual Port /Linkagg.')
alaFipsNpivSessionOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsNpivSessionOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionOutIfIndex.setDescription(' FC Interface on which FCoE NPIV session exists.')
alaFipsNpivSessionFCFMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 6), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsNpivSessionFCFMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionFCFMAC.setDescription(' FCF MAC address of the Session.')
alaFipsNpivSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pending", 1), ("created", 2))).clone('pending')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsNpivSessionStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionStatus.setDescription(' FCoE NPIV Session Pending or Active.')
alaFipsNpivSessionLoginTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 35, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsNpivSessionLoginTimeDate.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionLoginTimeDate.setDescription('Date and time of this session login')
alaFipsRnpivSession = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36))
alaFipsRnpivSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1), )
if mibBuilder.loadTexts: alaFipsRnpivSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionTable.setDescription('This table has the list of Session in the system.')
alaFipsRnpivSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionFcid"), (0, "ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionVsanId"))
if mibBuilder.loadTexts: alaFipsRnpivSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionEntry.setDescription('List of FCoE R-NPIV Sessions.')
alaFipsRnpivSessionFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 1), Fcid())
if mibBuilder.loadTexts: alaFipsRnpivSessionFcid.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionFcid.setDescription(' FC Port ID received after succesful Fabric login.  It is a 3 byte value.')
alaFipsRnpivSessionVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaFipsRnpivSessionVsanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionVsanId.setDescription('The VSAN number identifying this instance. Valid\n         range from 1 to 4094.')
alaFipsRnpivSessionVNMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionVNMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionVNMAC.setDescription(' VN MAC address of the Session.')
alaFipsRnpivSessionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionVlanId.setDescription(' FCF VLAN ID of the Session.')
alaFipsRnpivSessionInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionInIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionInIfIndex.setDescription(' FCoE interface on which FCoE R-NPIV session exists, it can be indivisual Port /Linkagg.  This\n          port can be a Fibre port when the FC Switch is dirctly conected to the AOS.')
alaFipsRnpivSessionOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionOutIfIndex.setDescription(' FC Interface on which FCoE R-NPIV session exists.')
alaFipsRnpivSessionFCFMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 7), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionFCFMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionFCFMAC.setDescription(' FCF MAC address of the Session.')
alaFipsRnpivSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pending", 1), ("created", 2))).clone('pending')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionStatus.setDescription(' FCoE R-NPIV Session Pending or Active.')
alaFipsRnpivSessionLoginTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 36, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsRnpivSessionLoginTimeDate.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionLoginTimeDate.setDescription('Date and time of this session login')
alaFipsEtunnelSession = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37))
alaFipsEtunnelSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1), )
if mibBuilder.loadTexts: alaFipsEtunnelSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionTable.setDescription('This table has the list of FCoE E-Tunnel Session in the system.')
alaFipsEtunnelSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionTunnelId"))
if mibBuilder.loadTexts: alaFipsEtunnelSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionEntry.setDescription('List of FCoE E-Tunnel Sessions.')
alaFipsEtunnelSessionTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaFipsEtunnelSessionTunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionTunnelId.setDescription(' FCoE E-Tunnel ID of the Session.')
alaFipsEtunnelSessionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionVlanId.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionVlanId.setDescription(' FCF VLAN ID of the Session.')
alaFipsEtunnelSessionInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionInIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionInIfIndex.setDescription(' FCoE interface on which FCoE E-Tunnel session exists, it can be indivisual Port /Linkagg.  This\n          port can be a Fibre port when the FC Switch is dirctly conected to the AOS.')
alaFipsEtunnelSessionOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionOutIfIndex.setDescription(' FC Interface on which FCoE E-Tunnel session exists.')
alaFipsEtunnelSessionFCFMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaFipsEtunnelSessionFCFMAC.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionFCFMAC.setDescription(' FCF MAC address of the Session.')
alaFipsEtunnelSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pending", 1), ("created", 2))).clone('pending')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionStatus.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionStatus.setDescription(' FCoE E-Tunnel Session Pending or Active.')
alaFipsEtunnelSessionLoginTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionLoginTimeDate.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionLoginTimeDate.setDescription('Date and time of this session login')
alaFipsEtunnelSessionPairMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("teToVe", 1), ("te-to-te", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFipsEtunnelSessionPairMode.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionPairMode.setDescription('Type of the E-Tunnel.')
alaFcNpivLoadBalSess = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 38))
alaFcNpivLoadBalSessTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 38, 1), )
if mibBuilder.loadTexts: alaFcNpivLoadBalSessTable.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivLoadBalSessTable.setDescription("This table maintains count of sessions opened on each FC port of type 'NP'.")
alaFcNpivLoadBalSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 38, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcNpivLoadBalSessIfIndex"))
if mibBuilder.loadTexts: alaFcNpivLoadBalSessEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivLoadBalSessEntry.setDescription('List of FC Interface FCoE interface mappings.')
alaFcNpivLoadBalSessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 38, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcNpivLoadBalSessIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivLoadBalSessIfIndex.setDescription(' FC interface of type NP type.')
alaFcNpivLoadBalSessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 38, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcNpivLoadBalSessCount.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivLoadBalSessCount.setDescription(' Number of sessions per FC interface of type NP type.')
alaFcIntfEtunnelStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39))
alaFcIntfEtunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1), )
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTable.setDescription('This table maintains statistics of E-Tunnel per port Id on FC side.')
alaFcIntfEtunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsIfIndex"))
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsEntry.setDescription('List of objects of FC side E-Tunnel statistics per port.')
alaFcIntfEtunnelStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsIfIndex.setDescription(' FC Port.')
alaFcIntfEtunnelStatsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTunnelId.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTunnelId.setDescription(' E-Tunnel ID.')
alaFcIntfEtunnelStatsRxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxElpReqs.setDescription('Number of ELP Request Rx Packets on this port.')
alaFcIntfEtunnelStatsRxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxSwAccs.setDescription('Number of SW Accept Rx Packets on this port.')
alaFcIntfEtunnelStatsRxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsRxSwRjts.setDescription('Number of SW Reject Rx Packets on this port.')
alaFcIntfEtunnelStatsTxElpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxElpReqs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxElpReqs.setDescription('Number of ELP Request Tx Packets on this port.')
alaFcIntfEtunnelStatsTxSwAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxSwAccs.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxSwAccs.setDescription('Number of SW Accept Tx Packets on this port.')
alaFcIntfEtunnelStatsTxSwRjts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxSwRjts.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsTxSwRjts.setDescription('Number of SW Reject Tx Packets on this port.')
alaFcIntfEtunnelStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 1, 39, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsClear.setDescription('Clear ETunnel statistics on  this Intf')
alcatelIND1FipsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsInfoGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNotificationGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNotificationObjectGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVfpaGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNpivStaticLoadBalanceGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNodeGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcInfoGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVsanVlanMapGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNpivLoadBalSessGroup"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1FipsMIBCompliance = alcatelIND1FipsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1FipsMIBCompliance.setDescription('Compliance statement for FIP Snooping.')
alaFipsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigFilterResourceLimit"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigFIPSAdmin"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigAddressMode"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigPriorityOne"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigPriorityTwo"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsTotalNumFilterResource"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsUsedNumFilterResource"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigPrioProtection"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigPriorityProtectionAction"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigPriorityProtectionRemarkVal"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigHouseKeepingTimePeriod"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigSWReinsertStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsConfigSessClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsInfoGroup = alaFipsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsInfoGroup.setDescription('Collection of objects for management of FIP Snooping Global setup.')
alaFipsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFCMap"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanStatsFnreClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanGroup = alaFipsVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanGroup.setDescription('Collection of objects for management of FIP Snooping VLANs.')
alaFipsVlanEnodeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsSessions"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsMds"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsUds"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsFlogi"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsFdisc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsLogo"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsEka"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsVnka"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanEnodeStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanEnodeStatsGroup = alaFipsVlanEnodeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanEnodeStatsGroup.setDescription('Collection of objects for management of FIP Snooping VLANs Enode statistics.')
alaFipsVlanFcfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsSessions"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsMda"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsUda"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsFlogiAcc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsFlogiRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsFdiscRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsLogoAcc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsLogoRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsCvl"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanFcfStatsFdiscAcc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanFcfStatsGroup = alaFipsVlanFcfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanFcfStatsGroup.setDescription('Collection of objects for management of FIP Snooping VLANs FCF statistics.')
alaFipsIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfOperStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfPortRole"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRowStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfStatsFnreClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfGroup = alaFipsIntfGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfGroup.setDescription('Collection of objects for management of FIP Snooping interfaces.')
alaFipsIntfEnodeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsSessions"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsMds"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsUds"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsFlogi"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsFdisc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsLogo"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsEka"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsVnka"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfEnodeStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfEnodeStatsGroup = alaFipsIntfEnodeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfEnodeStatsGroup.setDescription('Collection of objects for management of FIP Snooping interfaces for Enode statistics.')
alaFipsIntfFcfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsSessions"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsMda"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsUda"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsFlogiAcc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsFlogiRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsFdiscRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsLogoAcc"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsLogoRjt"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsCvl"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfFcfStatsFdiscAcc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfFcfStatsGroup = alaFipsIntfFcfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfFcfStatsGroup.setDescription('Collection of objects for management of FIP Snooping interfaces for FCF statistics.')
alaFipsFcfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfIntf"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfSessions"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfConfigType"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfRowStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfAvailForLogin"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfMaxFcoeFrmSizeVerified"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfPriority"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsFcfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsFcfGroup = alaFipsFcfGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsFcfGroup.setDescription('Collection of objects for management of FIP Snooping FCF information.')
alaFipsSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionFCFMAC"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionLoginTime"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsSessionLoginTimeDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsSessionGroup = alaFipsSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsSessionGroup.setDescription('Collection of objects for management of FIP Snooping session.')
alaFipsNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsFilterResourceUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsNotificationObjectGroup = alaFipsNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsNotificationObjectGroup.setDescription('Collection of trap objects for management of FIP Snooping.')
alaFipsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsResourceThresholdReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsNotificationGroup = alaFipsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsNotificationGroup.setDescription('Collection of notifications for FIP Snooping.')
alaFcVsanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcVsanDescription"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanAdmStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanOperStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcVsanGroup = alaFcVsanGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanGroup.setDescription('Collection of objects for management of VSANs.')
alaFcVfpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcVfpaState"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVfpaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcVfpaGroup = alaFcVfpaGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcVfpaGroup.setDescription('Collection of objects for management of VSAN VFPAs.')
alaFcIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcIntfOperStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfMode"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfBbScN"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfClassOfService"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfFcid"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfWwpn"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfLoginState"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRowStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcIntfGroup = alaFcIntfGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfGroup.setDescription('Collection of objects for management of Fibre Channel ports.')
alaFcNpivStaticLoadBalanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcNpivStaticLoadBalanceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcNpivStaticLoadBalanceGroup = alaFcNpivStaticLoadBalanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivStaticLoadBalanceGroup.setDescription('Collection of objects for management of Fibre Channel ports.')
alaFcNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcNodeVsanNumber"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNodeVlanNumber"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNodeFcid"), ("ALCATEL-IND1-FIPS-MIB", "alaFcNodeWwnn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcNodeGroup = alaFcNodeGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcNodeGroup.setDescription('Collection of objects for management of connected Fibre Channel nodes.')
alaFcSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcSessVsanNumber"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessIntfMode"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessFcid"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessType"), ("ALCATEL-IND1-FIPS-MIB", "alaFcSessTunnelId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcSessGroup = alaFcSessGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcSessGroup.setDescription('Collection of objects for management of connected Fibre Channel nodes.')
alaFcIntfNpivStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsTxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsTxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsRxLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsRxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsRxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsRxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsTxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfNpivStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcIntfNpivStatsGroup = alaFcIntfNpivStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfNpivStatsGroup.setDescription('Collection of objects for management of FC NPIV statistics on FC Ports.')
alaFcVsanNpivStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsTxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsTxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsRxLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsRxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsRxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsRxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanNpivStatsTxFlogos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcVsanNpivStatsGroup = alaFcVsanNpivStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanNpivStatsGroup.setDescription('Collection of objects for management of FC NPIV statistics on VSANS.')
alaFcIntfRnpivStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsRxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsRxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsTxFlogiLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsTxFdiscLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsTxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsTxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsTxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsRxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfRnpivStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcIntfRnpivStatsGroup = alaFcIntfRnpivStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfRnpivStatsGroup.setDescription('Collection of objects for management of FC R-NPIV statistics on FC Ports.')
alaFcVsanRnpivStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 21)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsRxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsRxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsTxFlogiLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsTxFdiscLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsTxFlogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsTxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsTxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcVsanRnpivStatsRxFlogos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcVsanRnpivStatsGroup = alaFcVsanRnpivStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcVsanRnpivStatsGroup.setDescription('Collection of objects for management of FC R-NPIV statistics on VSANS.')
alaFcInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 22)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcConfigSessClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFcConfigStatsClear"), ("ALCATEL-IND1-FIPS-MIB", "alaFcConfigNpivLoadBalance"), ("ALCATEL-IND1-FIPS-MIB", "alaFcConfigWwnn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcInfoGroup = alaFcInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcInfoGroup.setDescription("Collection of objects for management of Fibre Channel features' Global setup.")
alaFipsVlanNpivDiscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 23)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsRxVlanDiscRqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsTxVlanDiscResps"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsRxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsRxUdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsTxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivDiscStatsTxUdas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanNpivDiscStatsGroup = alaFipsVlanNpivDiscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivDiscStatsGroup.setDescription('Collection of objects for management of FCoE NPIV ENODE Discovery statistics on FCoE VLANS.')
alaFipsIntfNpivDiscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 24)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsRxVlanDiscRqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsTxVlanDiscResps"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsRxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsRxUdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsTxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivDiscStatsTxUdas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfNpivDiscStatsGroup = alaFipsIntfNpivDiscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivDiscStatsGroup.setDescription('Collection of objects for management of FCoE NPIV ENODE Discovery statistics on FCoE Ports.')
alaFipsVlanNpivLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 25)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsRxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsRxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFlogiAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsRxLogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsRxEkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsRxVnkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFDiscAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFlogoAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanNpivLoginStatsTxFLogoLsRjts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanNpivLoginStatsGroup = alaFipsVlanNpivLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanNpivLoginStatsGroup.setDescription('Collection of objects for management of FCoE NPIV ENODE Login statistics on FCoE VLANs.')
alaFipsIntfNpivLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 26)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsRxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsRxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFlogiAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsRxLogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsRxEkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsRxVnkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFDiscAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFlogoAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfNpivLoginStatsTxFLogoLsRjts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfNpivLoginStatsGroup = alaFipsIntfNpivLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfNpivLoginStatsGroup.setDescription('Collection of objects for management of FCoE NPIV ENODE Login statistics on FCoE VLANs.')
alaFipsVlanRnpivDiscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 27)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsRxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsRxUdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsTxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivDiscStatsTxUdss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanRnpivDiscStatsGroup = alaFipsVlanRnpivDiscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivDiscStatsGroup.setDescription('Collection of objects for management of FCoE R-NPIV FCF Discovery statistics on FCoE VLANs.')
alaFipsIntfRnpivDiscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 28)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsRxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsRxUdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsTxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivDiscStatsTxUdss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfRnpivDiscStatsGroup = alaFipsIntfRnpivDiscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivDiscStatsGroup.setDescription('Collection of objects for management of FCoE R-NPIV FCF Discovery statistics on FCoE Ports.')
alaFipsVlanRnpivLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 29)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsTxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsTxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsRxLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsRxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsRxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsRxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsTxLogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsTxVnkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVlanRnpivLoginStatsTxEkas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVlanRnpivLoginStatsGroup = alaFipsVlanRnpivLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVlanRnpivLoginStatsGroup.setDescription('Collection of objects for management of FCoE R-NPIV Node Login statistics on FCoE VLANs.')
alaFipsIntfRnpivLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 30)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsTxFlogis"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsTxFdiscs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsRxLsAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsRxFlogiLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsRxFdiscLsRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsRxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsTxLogos"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsTxVnkas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsIntfRnpivLoginStatsTxEkas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsIntfRnpivLoginStatsGroup = alaFipsIntfRnpivLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsIntfRnpivLoginStatsGroup.setDescription('Collection of objects for management of FCoE R-NPIV Node Login statistics on FCoE Ports.')
alaFipsEtunnelVePortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 31)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxUdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxUdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsRxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxMdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxUdss"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxMdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxUdas"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsTxCvls"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVePortStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsEtunnelVePortStatsGroup = alaFipsEtunnelVePortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelVePortStatsGroup.setDescription('Collection of objects for management of FCoE VE-Port statistics on E-Tunnels.')
alaFipsEtunnelTePortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 32)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsRxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsRxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsRxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsTxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsTxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsTxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelTePortStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsEtunnelTePortStatsGroup = alaFipsEtunnelTePortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelTePortStatsGroup.setDescription('Collection of objects for management of FCoE TE-Port statistics on E-Tunnels.')
alaFipsVsanVlanMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 33)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsVsanVlanMapVlanNumber"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsVsanVlanMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsVsanVlanMapGroup = alaFipsVsanVlanMapGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsVsanVlanMapGroup.setDescription('Collection of objects for management of VSAN and VLAN mapping.')
alaFipsDiscAdvtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 34)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtAbit"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtFkaAdvPeriod"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtPriority"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtUdsRetries"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsDiscAdvtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsDiscAdvtGroup = alaFipsDiscAdvtGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsDiscAdvtGroup.setDescription('Collection of objects for management of Discovery Advertisement Configuration.')
alaFipsEtunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 35)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelVlanId"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelIfIndexOne"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelIfIndexTwo"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelRowStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsEtunnelGroup = alaFipsEtunnelGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelGroup.setDescription('Collection of objects for management of E-Tunnel Configuration.')
alaFipsNpivSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 36)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionInIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionOutIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionFCFMAC"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsNpivSessionLoginTimeDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsNpivSessionGroup = alaFipsNpivSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsNpivSessionGroup.setDescription('Collection of objects for management of FCoE NPIV session statistics.')
alaFipsRnpivSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 37)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionVNMAC"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionVlanId"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionInIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionOutIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionFCFMAC"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsRnpivSessionLoginTimeDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsRnpivSessionGroup = alaFipsRnpivSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsRnpivSessionGroup.setDescription('Collection of objects for management of FCoE R-NPIV session statistics.')
alaFipsEtunnelSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 38)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionVlanId"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionInIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionOutIfIndex"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionFCFMAC"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionStatus"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionLoginTimeDate"), ("ALCATEL-IND1-FIPS-MIB", "alaFipsEtunnelSessionPairMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFipsEtunnelSessionGroup = alaFipsEtunnelSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaFipsEtunnelSessionGroup.setDescription('Collection of objects for management of FCoE E-Tunnel session statistics.')
alaFcNpivLoadBalSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 39)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcNpivLoadBalSessCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcNpivLoadBalSessGroup = alaFcNpivLoadBalSessGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcNpivLoadBalSessGroup.setDescription('Collection of objects for management of session created on FC port for NPIV feature.')
alaFcIntfEtunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 74, 1, 2, 1, 40)).setObjects(("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsTunnelId"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsRxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsRxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsRxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsTxElpReqs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsTxSwAccs"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsTxSwRjts"), ("ALCATEL-IND1-FIPS-MIB", "alaFcIntfEtunnelStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaFcIntfEtunnelStatsGroup = alaFcIntfEtunnelStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaFcIntfEtunnelStatsGroup.setDescription('Collection of objects for management of FC E-Tunnel statistics per port.')
mibBuilder.exportSymbols("ALCATEL-IND1-FIPS-MIB", alaFcSessIfIndex=alaFcSessIfIndex, alaFcSessWwpn=alaFcSessWwpn, alaFcVsanRnpivStatsTxFdiscLsRjts=alaFcVsanRnpivStatsTxFdiscLsRjts, alaFcIntfEtunnelStatsTxElpReqs=alaFcIntfEtunnelStatsTxElpReqs, alaFipsEtunnel=alaFipsEtunnel, alaFipsVlanNpivLoginStatsTable=alaFipsVlanNpivLoginStatsTable, alaFcConfigNpivLoadBalance=alaFcConfigNpivLoadBalance, alaFipsSessionTable=alaFipsSessionTable, alaFipsEtunnelVePortStatsRxMdas=alaFipsEtunnelVePortStatsRxMdas, alaFcConfigStatsClear=alaFcConfigStatsClear, alaFipsVlanNpivLoginStatsRxEkas=alaFipsVlanNpivLoginStatsRxEkas, alaFipsIntfRnpivDiscStatsTxUdss=alaFipsIntfRnpivDiscStatsTxUdss, alaFipsVlanRnpivLoginStatsTxFdiscs=alaFipsVlanRnpivLoginStatsTxFdiscs, alaFipsVlanFcfStatsUda=alaFipsVlanFcfStatsUda, alaFcVsanNpivStatsRxFdiscLsRjts=alaFcVsanNpivStatsRxFdiscLsRjts, alaFcIntfEtunnelStats=alaFcIntfEtunnelStats, alaFipsVlanFcfStatsTable=alaFipsVlanFcfStatsTable, alaFipsNpivSessionOutIfIndex=alaFipsNpivSessionOutIfIndex, alaFipsEtunnelVlanId=alaFipsEtunnelVlanId, alaFipsIntfFcfStatsLogoAcc=alaFipsIntfFcfStatsLogoAcc, alaFcVfpaRowStatus=alaFcVfpaRowStatus, alaFipsRnpivSessionVsanId=alaFipsRnpivSessionVsanId, alaFcNodeTable=alaFcNodeTable, alaFipsIntfRnpivLoginStatsRxFlogiLsRjts=alaFipsIntfRnpivLoginStatsRxFlogiLsRjts, alaFcVsanOperStatus=alaFcVsanOperStatus, alaFipsVsanVlanMapTable=alaFipsVsanVlanMapTable, alaFipsEtunnelSessionOutIfIndex=alaFipsEtunnelSessionOutIfIndex, alaFcIntfRnpivStatsRxFlogos=alaFcIntfRnpivStatsRxFlogos, alaFipsEtunnelVePortStatsTxUdss=alaFipsEtunnelVePortStatsTxUdss, alaFipsFcf=alaFipsFcf, alaFipsVlanFcfStatsVlanId=alaFipsVlanFcfStatsVlanId, alaFipsEtunnelVePortStatsTxSwAccs=alaFipsEtunnelVePortStatsTxSwAccs, alaFipsIntfNpivLoginStatsTxFdiscLsRjts=alaFipsIntfNpivLoginStatsTxFdiscLsRjts, alaFcVfpaEntry=alaFcVfpaEntry, alaFipsIntfRnpivDiscStatsTable=alaFipsIntfRnpivDiscStatsTable, alaFipsIntfRnpivLoginStatsRxCvls=alaFipsIntfRnpivLoginStatsRxCvls, alaFipsEtunnelSession=alaFipsEtunnelSession, alaFcIntfEtunnelStatsTxSwAccs=alaFcIntfEtunnelStatsTxSwAccs, alaFipsEtunnelTePortStatsEntry=alaFipsEtunnelTePortStatsEntry, alaFipsConfigPriorityTwo=alaFipsConfigPriorityTwo, alaFipsIntfStatsClear=alaFipsIntfStatsClear, alaFipsNpivSessionVlanId=alaFipsNpivSessionVlanId, alaFipsEtunnelSessionFCFMAC=alaFipsEtunnelSessionFCFMAC, alaFipsNotificationObj=alaFipsNotificationObj, alaFipsFcfPriority=alaFipsFcfPriority, alaFipsDiscAdvtPriority=alaFipsDiscAdvtPriority, alaFipsVlanEnodeStatsEntry=alaFipsVlanEnodeStatsEntry, alaFipsNpivSessionStatus=alaFipsNpivSessionStatus, alaFipsIntfFcfStatsMda=alaFipsIntfFcfStatsMda, alaFipsVlanEnodeStatsGroup=alaFipsVlanEnodeStatsGroup, alaFipsVlanNpivDiscStatsTxVlanDiscResps=alaFipsVlanNpivDiscStatsTxVlanDiscResps, alaFipsIntfIfIndex=alaFipsIntfIfIndex, alaFipsIntfEnodeStatsFlogi=alaFipsIntfEnodeStatsFlogi, alaFipsEtunnelSessionTable=alaFipsEtunnelSessionTable, alaFipsIntfNpivLoginStatsIfIndex=alaFipsIntfNpivLoginStatsIfIndex, alaFcNodeWwpn=alaFcNodeWwpn, alaFcNpivLoadBalSessCount=alaFcNpivLoadBalSessCount, alaFipsVlanRnpivLoginStatsTxVnkas=alaFipsVlanRnpivLoginStatsTxVnkas, alcatelIND1FipsMIB=alcatelIND1FipsMIB, alaFipsEtunnelTePortStatsTxElpReqs=alaFipsEtunnelTePortStatsTxElpReqs, alaFipsNpivSessionFCFMAC=alaFipsNpivSessionFCFMAC, alaFcVsanNpivStatsRxFlogos=alaFcVsanNpivStatsRxFlogos, alaFipsVlanRnpivLoginStatsGroup=alaFipsVlanRnpivLoginStatsGroup, alaFipsVlanNpivDiscStatsRxVlanDiscRqs=alaFipsVlanNpivDiscStatsRxVlanDiscRqs, alaFipsEtunnelSessionEntry=alaFipsEtunnelSessionEntry, alaFipsVlanNpivDiscStatsTable=alaFipsVlanNpivDiscStatsTable, alaFipsInfo=alaFipsInfo, alaFipsIntfFcfStatsUda=alaFipsIntfFcfStatsUda, alaFipsConfigHouseKeepingTimePeriod=alaFipsConfigHouseKeepingTimePeriod, alaFcVsanNpivStatsRxLsAccs=alaFcVsanNpivStatsRxLsAccs, alaFipsDiscAdvtFkaAdvPeriod=alaFipsDiscAdvtFkaAdvPeriod, alaFipsIntfRnpivLoginStatsIfIndex=alaFipsIntfRnpivLoginStatsIfIndex, alaFipsEtunnelIfIndexTwo=alaFipsEtunnelIfIndexTwo, alaFipsIntfNpivLoginStatsTxFLogoLsRjts=alaFipsIntfNpivLoginStatsTxFLogoLsRjts, alaFipsIntfNpivLoginStatsTxFlogiLsRjts=alaFipsIntfNpivLoginStatsTxFlogiLsRjts, alaFipsIntfNpivLoginStatsTxFlogoAccs=alaFipsIntfNpivLoginStatsTxFlogoAccs, alaFipsIntfFcfStatsIfIndex=alaFipsIntfFcfStatsIfIndex, alaFipsEtunnelGroup=alaFipsEtunnelGroup, alaFcIntfRnpivStatsTable=alaFcIntfRnpivStatsTable, alaFipsVlanRnpivDiscStatsTable=alaFipsVlanRnpivDiscStatsTable, alaFipsSessionVNMAC=alaFipsSessionVNMAC, alaFcVsanNpivStatsTable=alaFcVsanNpivStatsTable, alaFipsEtunnelVePortStatsTxElpReqs=alaFipsEtunnelVePortStatsTxElpReqs, alaFipsEtunnelVePortStatsTable=alaFipsEtunnelVePortStatsTable, alaFipsIntfFcfStatsFdiscAcc=alaFipsIntfFcfStatsFdiscAcc, alaFipsEtunnelVePortStatsRxUdas=alaFipsEtunnelVePortStatsRxUdas, alaFcConfigWwnn=alaFcConfigWwnn, alaFipsRnpivSession=alaFipsRnpivSession, alaFipsIntfEnodeStatsMds=alaFipsIntfEnodeStatsMds, alaFcVfpa=alaFcVfpa, alaFipsSessionFCFMAC=alaFipsSessionFCFMAC, alaFipsIntfEnodeStatsEka=alaFipsIntfEnodeStatsEka, alaFcVsanRnpivStatsTxFlogiLsRjts=alaFcVsanRnpivStatsTxFlogiLsRjts, alaFipsVlanNpivLoginStatsEntry=alaFipsVlanNpivLoginStatsEntry, alaFcIntfTable=alaFcIntfTable, alaFipsVlanEntry=alaFipsVlanEntry, alaFipsVlanFcfStatsSessions=alaFipsVlanFcfStatsSessions, alaFipsIntfRnpivLoginStatsRxLsAccs=alaFipsIntfRnpivLoginStatsRxLsAccs, alaFcNodeIfIndex=alaFcNodeIfIndex, alaFipsIntfEnodeStatsGroup=alaFipsIntfEnodeStatsGroup, alaFcVsanNpivStats=alaFcVsanNpivStats, alaFipsFilterResourceUsage=alaFipsFilterResourceUsage, alaFipsFcfType=alaFipsFcfType, alaFipsIntfRnpivLoginStatsEntry=alaFipsIntfRnpivLoginStatsEntry, alaFcConfigSessClear=alaFcConfigSessClear, alaFcIntfNpivStatsTxFlogos=alaFcIntfNpivStatsTxFlogos, Fcid=Fcid, alaFcIntfEtunnelStatsGroup=alaFcIntfEtunnelStatsGroup, alaFipsVlanNpivLoginStatsGroup=alaFipsVlanNpivLoginStatsGroup, alcatelIND1FipsMIBObjects=alcatelIND1FipsMIBObjects, alaFipsEtunnelVePortStatsTunnelId=alaFipsEtunnelVePortStatsTunnelId, alaFipsNotificationObjectGroup=alaFipsNotificationObjectGroup, alaFcNpivStaticLoadBalanceFcIfIndex=alaFcNpivStaticLoadBalanceFcIfIndex, alaFipsVlanNpivDiscStatsRxUdss=alaFipsVlanNpivDiscStatsRxUdss, alaFcIntfNpivStatsIfIndex=alaFcIntfNpivStatsIfIndex, alaFipsConfigPriorityProtectionAction=alaFipsConfigPriorityProtectionAction, alaFipsVlanNpivDiscStats=alaFipsVlanNpivDiscStats, alaFipsEtunnelVePortStatsClear=alaFipsEtunnelVePortStatsClear, alaFcNpivLoadBalSessIfIndex=alaFcNpivLoadBalSessIfIndex, alaFipsVlanEnodeStatsFlogi=alaFipsVlanEnodeStatsFlogi, alaFipsVlanGroup=alaFipsVlanGroup, alaFipsIntfFcfStatsTable=alaFipsIntfFcfStatsTable, alaFipsIntfFcfStatsSessions=alaFipsIntfFcfStatsSessions, alaFipsVlanNpivLoginStatsVlanId=alaFipsVlanNpivLoginStatsVlanId, alaFipsEtunnelTePortStats=alaFipsEtunnelTePortStats, alaFcIntfNpivStatsTable=alaFcIntfNpivStatsTable, alaFipsEtunnelTePortStatsTxSwRjts=alaFipsEtunnelTePortStatsTxSwRjts, alaFipsEtunnelVePortStatsRxSwAccs=alaFipsEtunnelVePortStatsRxSwAccs, alcatelIND1FipsMIBNotifications=alcatelIND1FipsMIBNotifications, alaFipsEtunnelVePortStatsRxCvls=alaFipsEtunnelVePortStatsRxCvls, alaFipsVsanVlanMapVsanNumber=alaFipsVsanVlanMapVsanNumber, alaFipsIntfNpivDiscStatsRxMdss=alaFipsIntfNpivDiscStatsRxMdss, alaFipsVlanNpivDiscStatsEntry=alaFipsVlanNpivDiscStatsEntry, alaFcIntfEtunnelStatsTunnelId=alaFcIntfEtunnelStatsTunnelId, alaFcVsanRnpivStatsVsan=alaFcVsanRnpivStatsVsan, alaFipsVlanNpivLoginStatsTxCvls=alaFipsVlanNpivLoginStatsTxCvls, alaFipsVlanFcfStatsCvl=alaFipsVlanFcfStatsCvl, alaFipsFcfMAC=alaFipsFcfMAC, alaFcIntfEtunnelStatsRxSwAccs=alaFcIntfEtunnelStatsRxSwAccs, alaFipsIntfNpivLoginStatsTable=alaFipsIntfNpivLoginStatsTable, alaFcIntfEntry=alaFcIntfEntry, alaFipsIntfStatsFnreClear=alaFipsIntfStatsFnreClear, alaFipsIntfPortRole=alaFipsIntfPortRole, alaFipsVlanNpivDiscStatsRxMdss=alaFipsVlanNpivDiscStatsRxMdss, alaFipsIntfRnpivLoginStatsRxFdiscLsRjts=alaFipsIntfRnpivLoginStatsRxFdiscLsRjts, alaFipsVlanRnpivLoginStatsRxLsAccs=alaFipsVlanRnpivLoginStatsRxLsAccs, alaFipsInfoGroup=alaFipsInfoGroup, alaFcVsanRnpivStatsTxFlogiLsAccs=alaFcVsanRnpivStatsTxFlogiLsAccs, alaFipsVlanNpivDiscStatsGroup=alaFipsVlanNpivDiscStatsGroup, alaFipsVlanEnodeStatsTable=alaFipsVlanEnodeStatsTable, alaFcVsanRnpivStatsTxFdiscLsAccs=alaFcVsanRnpivStatsTxFdiscLsAccs, alaFipsVlanRnpivLoginStatsTxFlogis=alaFipsVlanRnpivLoginStatsTxFlogis, alaFipsNpivSessionInIfIndex=alaFipsNpivSessionInIfIndex, alaFipsConfigPriorityProtectionRemarkVal=alaFipsConfigPriorityProtectionRemarkVal, alaFipsVlanEnodeStatsEka=alaFipsVlanEnodeStatsEka, alaFipsIntfEnodeStatsFdisc=alaFipsIntfEnodeStatsFdisc, alaFcIntfEtunnelStatsIfIndex=alaFcIntfEtunnelStatsIfIndex, alaFipsVlanRnpivLoginStatsEntry=alaFipsVlanRnpivLoginStatsEntry, alaFcSessVsanNumber=alaFcSessVsanNumber, alaFipsIntfEnodeStatsLogo=alaFipsIntfEnodeStatsLogo, alaFipsVlanFcfStatsEntry=alaFipsVlanFcfStatsEntry, alaFipsEtunnelSessionLoginTimeDate=alaFipsEtunnelSessionLoginTimeDate, alaFipsIntfFcfStatsLogoRjt=alaFipsIntfFcfStatsLogoRjt, alaFipsVlanFcfStatsFdiscRjt=alaFipsVlanFcfStatsFdiscRjt, alaFcIntfEtunnelStatsRxElpReqs=alaFcIntfEtunnelStatsRxElpReqs, alaFcNodeVsanNumber=alaFcNodeVsanNumber, alaFipsEtunnelTePortStatsRxElpReqs=alaFipsEtunnelTePortStatsRxElpReqs, alaFcNpivLoadBalSessTable=alaFcNpivLoadBalSessTable, alaFipsIntfFcfStatsGroup=alaFipsIntfFcfStatsGroup, alaFipsFcfGroup=alaFipsFcfGroup, alaFcVsanNpivStatsTxFlogos=alaFcVsanNpivStatsTxFlogos, alaFcNode=alaFcNode, alaFcVsanTable=alaFcVsanTable, alaFipsConfigFIPSAdmin=alaFipsConfigFIPSAdmin, alaFipsEtunnelSessionVlanId=alaFipsEtunnelSessionVlanId, alaFipsIntfFcfStatsFlogiRjt=alaFipsIntfFcfStatsFlogiRjt, alaFipsIntfFcfStatsEntry=alaFipsIntfFcfStatsEntry, alaFipsEtunnelVePortStatsTxMdas=alaFipsEtunnelVePortStatsTxMdas, alaFcNodeGroup=alaFcNodeGroup, alaFipsVlanEnodeStatsUds=alaFipsVlanEnodeStatsUds, alaFcNpivStaticLoadBalanceTable=alaFcNpivStaticLoadBalanceTable, alaFcIntfRnpivStatsTxFlogos=alaFcIntfRnpivStatsTxFlogos, alaFipsVlanNpivLoginStatsTxFLogoLsRjts=alaFipsVlanNpivLoginStatsTxFLogoLsRjts, alaFipsIntfEnodeStats=alaFipsIntfEnodeStats, alaFcVsanNpivStatsVsan=alaFcVsanNpivStatsVsan, alaFipsIntfEnodeStatsTable=alaFipsIntfEnodeStatsTable, alaFipsNpivSessionTable=alaFipsNpivSessionTable, alaFipsDiscAdvtAbit=alaFipsDiscAdvtAbit, alaFipsEtunnelId=alaFipsEtunnelId, alaFipsNpivSessionLoginTimeDate=alaFipsNpivSessionLoginTimeDate, alaFipsEtunnelVePortStatsGroup=alaFipsEtunnelVePortStatsGroup, alaFipsIntfRnpivLoginStats=alaFipsIntfRnpivLoginStats, alaFipsVlanStatsClear=alaFipsVlanStatsClear, alaFipsFcfIntf=alaFipsFcfIntf, alaFcVsanNpivStatsGroup=alaFcVsanNpivStatsGroup, alaFcVsanDescription=alaFcVsanDescription, alaFipsIntfNpivLoginStatsRxVnkas=alaFipsIntfNpivLoginStatsRxVnkas, alaFipsEtunnelSessionStatus=alaFipsEtunnelSessionStatus, alaFcVsanRnpivStatsTxFlogos=alaFcVsanRnpivStatsTxFlogos, alaFipsIntfNpivDiscStatsRxUdss=alaFipsIntfNpivDiscStatsRxUdss, alaFcSessTable=alaFcSessTable, alaFipsNpivSessionEnodeMAC=alaFipsNpivSessionEnodeMAC, alaFcVsanRnpivStatsRxFdiscs=alaFcVsanRnpivStatsRxFdiscs, alcatelIND1FipsMIBConformance=alcatelIND1FipsMIBConformance, alaFipsIntfRnpivDiscStats=alaFipsIntfRnpivDiscStats, alaFipsIntfNpivLoginStatsRxFdiscs=alaFipsIntfNpivLoginStatsRxFdiscs, alaFipsEtunnelTable=alaFipsEtunnelTable, alaFipsIntfEnodeStatsEntry=alaFipsIntfEnodeStatsEntry, alaFipsIntfNpivLoginStatsTxCvls=alaFipsIntfNpivLoginStatsTxCvls, alaFcIntfNpivStatsTxFlogis=alaFcIntfNpivStatsTxFlogis, alaFipsSessionGroup=alaFipsSessionGroup, alaFipsRnpivSessionTable=alaFipsRnpivSessionTable, alaFipsVlanNpivLoginStatsTxFlogiAccs=alaFipsVlanNpivLoginStatsTxFlogiAccs, alaFcNpivStaticLoadBalance=alaFcNpivStaticLoadBalance, alaFipsVlanNpivLoginStatsTxFlogiLsRjts=alaFipsVlanNpivLoginStatsTxFlogiLsRjts, alaFipsIntfEnodeStatsSessions=alaFipsIntfEnodeStatsSessions, alcatelIND1FipsMIBCompliance=alcatelIND1FipsMIBCompliance, alaFipsDiscAdvtEntry=alaFipsDiscAdvtEntry, alaFipsVlanFcfStatsFlogiAcc=alaFipsVlanFcfStatsFlogiAcc, alaFcVfpaIfIndex=alaFcVfpaIfIndex, alaFipsEtunnelTePortStatsTable=alaFipsEtunnelTePortStatsTable, alaFipsEtunnelTePortStatsTunnelId=alaFipsEtunnelTePortStatsTunnelId, alaFcIntfBbScN=alaFcIntfBbScN, alaFipsUsedNumFilterResource=alaFipsUsedNumFilterResource, alaFcIntfRnpivStatsRxFdiscs=alaFcIntfRnpivStatsRxFdiscs, alaFcNodeWwnn=alaFcNodeWwnn, alaFcIntfNpivStats=alaFcIntfNpivStats, alaFipsIntfRowStatus=alaFipsIntfRowStatus, alaFcIntfRowStatus=alaFcIntfRowStatus, alaFcIntfWwpn=alaFcIntfWwpn, alaFcSessType=alaFcSessType, alaFipsVlanNpivLoginStatsTxFdiscLsRjts=alaFipsVlanNpivLoginStatsTxFdiscLsRjts, alaFipsIntfRnpivLoginStatsTxFdiscs=alaFipsIntfRnpivLoginStatsTxFdiscs, alaFipsIntfEnodeStatsUds=alaFipsIntfEnodeStatsUds, alaFipsEtunnelTePortStatsGroup=alaFipsEtunnelTePortStatsGroup, alaFcIntfMode=alaFcIntfMode, alaFipsEtunnelVePortStatsTxSwRjts=alaFipsEtunnelVePortStatsTxSwRjts, PYSNMP_MODULE_ID=alcatelIND1FipsMIB, alaFipsEtunnelRowStatus=alaFipsEtunnelRowStatus, alaFipsVlanTable=alaFipsVlanTable, alaFcVsanRnpivStatsEntry=alaFcVsanRnpivStatsEntry, alaFipsNpivSessionGroup=alaFipsNpivSessionGroup, alaFipsVsanVlanMap=alaFipsVsanVlanMap, alaFipsIntfNpivDiscStatsIfIndex=alaFipsIntfNpivDiscStatsIfIndex, alaFipsVsanVlanMapGroup=alaFipsVsanVlanMapGroup, alaFipsEtunnelSessionTunnelId=alaFipsEtunnelSessionTunnelId, alaFipsIntfEnodeStatsVnka=alaFipsIntfEnodeStatsVnka, alaFipsIntfNpivDiscStatsTable=alaFipsIntfNpivDiscStatsTable, alaFipsConfigSWReinsertStatus=alaFipsConfigSWReinsertStatus, alaFcVfpaGroup=alaFcVfpaGroup, alaFipsFcfAvailForLogin=alaFipsFcfAvailForLogin, alaFcNpivLoadBalSessEntry=alaFcNpivLoadBalSessEntry, alaFcIntfEtunnelStatsTxSwRjts=alaFcIntfEtunnelStatsTxSwRjts, alaFcIntfFcid=alaFcIntfFcid)
mibBuilder.exportSymbols("ALCATEL-IND1-FIPS-MIB", alaFipsEtunnelVePortStatsRxElpReqs=alaFipsEtunnelVePortStatsRxElpReqs, alaFipsRnpivSessionLoginTimeDate=alaFipsRnpivSessionLoginTimeDate, alcatelIND1FipsMIBGroups=alcatelIND1FipsMIBGroups, alaFipsIntfRnpivDiscStatsGroup=alaFipsIntfRnpivDiscStatsGroup, alaFcVsanNpivStatsTxFlogis=alaFcVsanNpivStatsTxFlogis, alaFcIntfRnpivStatsTxFlogiLsAccs=alaFcIntfRnpivStatsTxFlogiLsAccs, Wwnn=Wwnn, alaFipsVlanNpivLoginStatsRxFlogis=alaFipsVlanNpivLoginStatsRxFlogis, alaFipsVsanVlanMapVlanNumber=alaFipsVsanVlanMapVlanNumber, alaFcNodeFcid=alaFcNodeFcid, alaFipsVlanRnpivLoginStatsTxLogos=alaFipsVlanRnpivLoginStatsTxLogos, alaFipsEtunnelSessionGroup=alaFipsEtunnelSessionGroup, alaFcIntfEtunnelStatsClear=alaFcIntfEtunnelStatsClear, alaFcIntf=alaFcIntf, alaFipsNpivSessionVNMAC=alaFipsNpivSessionVNMAC, alaFcNpivStaticLoadBalanceGroup=alaFcNpivStaticLoadBalanceGroup, alaFipsVlanEnodeStatsMds=alaFipsVlanEnodeStatsMds, alaFcVsanNpivStatsRxFlogiLsRjts=alaFcVsanNpivStatsRxFlogiLsRjts, alaFipsIntfEntry=alaFipsIntfEntry, alaFipsEtunnelVePortStatsRxSwRjts=alaFipsEtunnelVePortStatsRxSwRjts, alaFipsRnpivSessionVNMAC=alaFipsRnpivSessionVNMAC, alaFipsEtunnelVePortStatsTxCvls=alaFipsEtunnelVePortStatsTxCvls, alaFipsVlanNpivDiscStatsTxUdas=alaFipsVlanNpivDiscStatsTxUdas, alaFipsVsanVlanMapRowStatus=alaFipsVsanVlanMapRowStatus, alaFipsEtunnelVePortStatsEntry=alaFipsEtunnelVePortStatsEntry, alaFipsEtunnelVePortStatsRxMdss=alaFipsEtunnelVePortStatsRxMdss, alaFcVsanRowStatus=alaFcVsanRowStatus, alaFipsVlanEnodeStatsClear=alaFipsVlanEnodeStatsClear, alaFipsVlanFcfStatsLogoRjt=alaFipsVlanFcfStatsLogoRjt, alaFipsSessionIfIndex=alaFipsSessionIfIndex, alaFipsConfigPrioProtection=alaFipsConfigPrioProtection, alaFipsVsanVlanMapEntry=alaFipsVsanVlanMapEntry, alaFipsConfigAddressMode=alaFipsConfigAddressMode, alaFipsVlanRnpivDiscStatsRxMdas=alaFipsVlanRnpivDiscStatsRxMdas, alaFipsIntfNpivDiscStatsGroup=alaFipsIntfNpivDiscStatsGroup, alaFipsIntfEnodeStatsClear=alaFipsIntfEnodeStatsClear, alaFipsFcfRowStatus=alaFipsFcfRowStatus, alaFcIntfGroup=alaFcIntfGroup, alaFcIntfIfIndex=alaFcIntfIfIndex, alaFipsVlanNpivLoginStatsRxLogos=alaFipsVlanNpivLoginStatsRxLogos, alaFipsIntfNpivLoginStatsTxFDiscAccs=alaFipsIntfNpivLoginStatsTxFDiscAccs, alaFipsVlanRnpivLoginStatsRxFdiscLsRjts=alaFipsVlanRnpivLoginStatsRxFdiscLsRjts, alaFipsDiscAdvtVlanId=alaFipsDiscAdvtVlanId, alaFipsVlanFcfStatsGroup=alaFipsVlanFcfStatsGroup, alaFipsSession=alaFipsSession, alaFipsVlanRnpivLoginStatsTable=alaFipsVlanRnpivLoginStatsTable, alaFipsIntfEnodeStatsIfIndex=alaFipsIntfEnodeStatsIfIndex, alaFipsVlanFcfStatsMda=alaFipsVlanFcfStatsMda, alaFipsVlanRnpivDiscStatsGroup=alaFipsVlanRnpivDiscStatsGroup, alaFipsIntfRnpivLoginStatsTxLogos=alaFipsIntfRnpivLoginStatsTxLogos, alaFcIntfNpivStatsClear=alaFcIntfNpivStatsClear, alaFipsIntfFcfStats=alaFipsIntfFcfStats, alaFipsDiscAdvtTable=alaFipsDiscAdvtTable, alaFcVsan=alaFcVsan, alaFipsVlanRnpivLoginStatsTxEkas=alaFipsVlanRnpivLoginStatsTxEkas, alaFipsTotalNumFilterResource=alaFipsTotalNumFilterResource, alaFipsRnpivSessionStatus=alaFipsRnpivSessionStatus, alaFipsIntfRnpivLoginStatsTxEkas=alaFipsIntfRnpivLoginStatsTxEkas, alaFipsEtunnelTePortStatsTxSwAccs=alaFipsEtunnelTePortStatsTxSwAccs, alaFipsIntfRnpivDiscStatsEntry=alaFipsIntfRnpivDiscStatsEntry, alaFcIntfRnpivStatsGroup=alaFcIntfRnpivStatsGroup, alaFipsVlanId=alaFipsVlanId, alaFcSess=alaFcSess, alaFipsEtunnelVePortStatsTxMdss=alaFipsEtunnelVePortStatsTxMdss, alaFipsEtunnelSessionInIfIndex=alaFipsEtunnelSessionInIfIndex, alaFipsVlanEnodeStatsVlanId=alaFipsVlanEnodeStatsVlanId, alaFipsSessionVlanId=alaFipsSessionVlanId, FipsFCMAP=FipsFCMAP, alaFipsVlanEnodeStatsSessions=alaFipsVlanEnodeStatsSessions, alaFcVsanRnpivStatsRxFlogis=alaFcVsanRnpivStatsRxFlogis, alaFcIntfRnpivStats=alaFcIntfRnpivStats, alaFcVsanRnpivStats=alaFcVsanRnpivStats, alaFipsDiscAdvt=alaFipsDiscAdvt, alaFipsResourceThresholdReached=alaFipsResourceThresholdReached, alaFipsIntfNpivLoginStatsRxEkas=alaFipsIntfNpivLoginStatsRxEkas, alaFcIntfRnpivStatsEntry=alaFcIntfRnpivStatsEntry, alaFipsVlanRnpivDiscStats=alaFipsVlanRnpivDiscStats, alaFipsEtunnelTePortStatsClear=alaFipsEtunnelTePortStatsClear, alaFipsNotificationGroup=alaFipsNotificationGroup, alaFcSessGroup=alaFcSessGroup, alaFipsVlanFCMap=alaFipsVlanFCMap, alaFipsFcfSessions=alaFipsFcfSessions, alaFcVsanAdmStatus=alaFcVsanAdmStatus, alaFipsIntfNpivDiscStatsTxVlanDiscResps=alaFipsIntfNpivDiscStatsTxVlanDiscResps, alaFipsIntfNpivDiscStatsTxMdas=alaFipsIntfNpivDiscStatsTxMdas, alaFipsSessionLoginTime=alaFipsSessionLoginTime, alaFipsIntfNpivLoginStatsEntry=alaFipsIntfNpivLoginStatsEntry, alaFipsIntfRnpivDiscStatsRxUdas=alaFipsIntfRnpivDiscStatsRxUdas, alaFcVsanNpivStatsEntry=alaFcVsanNpivStatsEntry, alaFcNodeEntry=alaFcNodeEntry, alaFipsIntfRnpivLoginStatsTable=alaFipsIntfRnpivLoginStatsTable, alaFipsVlanFcfStatsFdiscAcc=alaFipsVlanFcfStatsFdiscAcc, alaFipsNpivSession=alaFipsNpivSession, alaFipsVlanRnpivDiscStatsRxUdas=alaFipsVlanRnpivDiscStatsRxUdas, alaFipsRnpivSessionEntry=alaFipsRnpivSessionEntry, alaFipsVlanEnodeStatsFdisc=alaFipsVlanEnodeStatsFdisc, alaFcIntfRnpivStatsTxFdiscLsRjts=alaFcIntfRnpivStatsTxFdiscLsRjts, alaFipsVlanEnodeStatsVnka=alaFipsVlanEnodeStatsVnka, alaFipsConfigFilterResourceLimit=alaFipsConfigFilterResourceLimit, alaFipsVlanFcfStatsFlogiRjt=alaFipsVlanFcfStatsFlogiRjt, alaFipsConfigSessClear=alaFipsConfigSessClear, alaFipsIntfFcfStatsFlogiAcc=alaFipsIntfFcfStatsFlogiAcc, alaFipsRnpivSessionGroup=alaFipsRnpivSessionGroup, alaFipsEtunnelTePortStatsRxSwRjts=alaFipsEtunnelTePortStatsRxSwRjts, alaFipsFcfEntry=alaFipsFcfEntry, alaFipsDiscAdvtGroup=alaFipsDiscAdvtGroup, alaFipsIntfRnpivDiscStatsIfIndex=alaFipsIntfRnpivDiscStatsIfIndex, alaFipsIntfNpivDiscStats=alaFipsIntfNpivDiscStats, alaFipsVlanRnpivDiscStatsEntry=alaFipsVlanRnpivDiscStatsEntry, alaFcIntfNpivStatsGroup=alaFcIntfNpivStatsGroup, alaFcNpivLoadBalSessGroup=alaFcNpivLoadBalSessGroup, alaFcNpivLoadBalSess=alaFcNpivLoadBalSess, alaFipsIntfRnpivLoginStatsTxFlogis=alaFipsIntfRnpivLoginStatsTxFlogis, alaFipsIntfRnpivDiscStatsRxMdas=alaFipsIntfRnpivDiscStatsRxMdas, alaFipsIntfTable=alaFipsIntfTable, alaFipsIntfRnpivLoginStatsGroup=alaFipsIntfRnpivLoginStatsGroup, alaFcIntfRnpivStatsIfIndex=alaFcIntfRnpivStatsIfIndex, alaFipsNpivSessionEntry=alaFipsNpivSessionEntry, alaFcIntfNpivStatsTxFdiscs=alaFcIntfNpivStatsTxFdiscs, alaFcSessIntfMode=alaFcSessIntfMode, alaFcIntfEtunnelStatsEntry=alaFcIntfEtunnelStatsEntry, alaFcIntfRnpivStatsTxFdiscLsAccs=alaFcIntfRnpivStatsTxFdiscLsAccs, alaFipsSessionEnodeMAC=alaFipsSessionEnodeMAC, alaFcIntfLoginState=alaFcIntfLoginState, alaFipsVlanNpivLoginStats=alaFipsVlanNpivLoginStats, alaFipsVlanEnodeStatsLogo=alaFipsVlanEnodeStatsLogo, alaFipsIntfNpivDiscStatsTxUdas=alaFipsIntfNpivDiscStatsTxUdas, alaFipsVlanEnodeStats=alaFipsVlanEnodeStats, alaFipsFcfTable=alaFipsFcfTable, alaFcVsanNumber=alaFcVsanNumber, alaFipsDiscAdvtUdsRetries=alaFipsDiscAdvtUdsRetries, alaFcVsanNpivStatsTxFdiscs=alaFcVsanNpivStatsTxFdiscs, alaFipsVlanStatsFnreClear=alaFipsVlanStatsFnreClear, alaFcIntfEtunnelStatsRxSwRjts=alaFcIntfEtunnelStatsRxSwRjts, alaFcSessStatus=alaFcSessStatus, alaFcIntfNpivStatsRxFlogos=alaFcIntfNpivStatsRxFlogos, alaFipsSessionEntry=alaFipsSessionEntry, alaFipsEtunnelTePortStatsRxSwAccs=alaFipsEtunnelTePortStatsRxSwAccs, alaFipsVlanNpivLoginStatsTxFlogoAccs=alaFipsVlanNpivLoginStatsTxFlogoAccs, alaFcVfpaTable=alaFcVfpaTable, alaFipsEtunnelStatsClear=alaFipsEtunnelStatsClear, alaFipsIntfNpivLoginStatsGroup=alaFipsIntfNpivLoginStatsGroup, alaFipsSessionStatus=alaFipsSessionStatus, alaFcNpivStaticLoadBalanceRowStatus=alaFcNpivStaticLoadBalanceRowStatus, alaFcNpivStaticLoadBalanceEntry=alaFcNpivStaticLoadBalanceEntry, alaFcVfpaVsanNumber=alaFcVfpaVsanNumber, alaFipsIntfNpivLoginStatsRxLogos=alaFipsIntfNpivLoginStatsRxLogos, alaFipsVlanRnpivLoginStatsRxFlogiLsRjts=alaFipsVlanRnpivLoginStatsRxFlogiLsRjts, alaFcSessEntry=alaFcSessEntry, alaFcVsanGroup=alaFcVsanGroup, alaFipsIntfFcfStatsCvl=alaFipsIntfFcfStatsCvl, alaFcSessTunnelId=alaFcSessTunnelId, alaFipsVlanNpivLoginStatsRxFdiscs=alaFipsVlanNpivLoginStatsRxFdiscs, alaFipsFcfConfigType=alaFipsFcfConfigType, alaFipsVlanRnpivDiscStatsTxMdss=alaFipsVlanRnpivDiscStatsTxMdss, alaFipsRnpivSessionVlanId=alaFipsRnpivSessionVlanId, alaFcIntfClassOfService=alaFcIntfClassOfService, alaFipsEtunnelVePortStatsRxUdss=alaFipsEtunnelVePortStatsRxUdss, alaFipsVlanFcfStatsClear=alaFipsVlanFcfStatsClear, alaFipsVlanNpivDiscStatsTxMdas=alaFipsVlanNpivDiscStatsTxMdas, alaFipsVlanRnpivLoginStats=alaFipsVlanRnpivLoginStats, alaFipsRnpivSessionOutIfIndex=alaFipsRnpivSessionOutIfIndex, alaFcIntfNpivStatsRxFlogiLsRjts=alaFcIntfNpivStatsRxFlogiLsRjts, alaFcIntfNpivStatsRxLsAccs=alaFcIntfNpivStatsRxLsAccs, alaFipsIntfRnpivDiscStatsTxMdss=alaFipsIntfRnpivDiscStatsTxMdss, alaFipsVlanFcfStatsLogoAcc=alaFipsVlanFcfStatsLogoAcc, alaFipsConfigStatsClear=alaFipsConfigStatsClear, alaFcIntfRnpivStatsClear=alaFcIntfRnpivStatsClear, alaFcIntfEtunnelStatsTable=alaFcIntfEtunnelStatsTable, alaFipsVlanNpivLoginStatsTxFDiscAccs=alaFipsVlanNpivLoginStatsTxFDiscAccs, alaFipsEtunnelVePortStats=alaFipsEtunnelVePortStats, alaFipsIntfNpivLoginStatsRxFlogis=alaFipsIntfNpivLoginStatsRxFlogis, alaFipsFcfMaxFcoeFrmSizeVerified=alaFipsFcfMaxFcoeFrmSizeVerified, alaFipsVlanRnpivLoginStatsVlanId=alaFipsVlanRnpivLoginStatsVlanId, alaFcVsanEntry=alaFcVsanEntry, alaFipsFcfVlan=alaFipsFcfVlan, alaFipsIntfRnpivLoginStatsTxVnkas=alaFipsIntfRnpivLoginStatsTxVnkas, alaFipsEtunnelVePortStatsTxUdas=alaFipsEtunnelVePortStatsTxUdas, alaFipsIntfOperStatus=alaFipsIntfOperStatus, alaFipsVlanRnpivDiscStatsTxUdss=alaFipsVlanRnpivDiscStatsTxUdss, alaFipsRnpivSessionFcid=alaFipsRnpivSessionFcid, alaFcIntfNpivStatsRxFdiscLsRjts=alaFcIntfNpivStatsRxFdiscLsRjts, alaFcIntfRnpivStatsRxFlogis=alaFcIntfRnpivStatsRxFlogis, alaFipsIntfNpivDiscStatsEntry=alaFipsIntfNpivDiscStatsEntry, alaFcIntfRnpivStatsTxFlogiLsRjts=alaFcIntfRnpivStatsTxFlogiLsRjts, alaFipsVlanRnpivLoginStatsRxCvls=alaFipsVlanRnpivLoginStatsRxCvls, alaFipsIntfGroup=alaFipsIntfGroup, alaFcVsanRnpivStatsRxFlogos=alaFcVsanRnpivStatsRxFlogos, alaFipsIntf=alaFipsIntf, alaFipsIntfNpivLoginStats=alaFipsIntfNpivLoginStats, alaFipsRnpivSessionInIfIndex=alaFipsRnpivSessionInIfIndex, alaFipsIntfNpivDiscStatsRxVlanDiscRqs=alaFipsIntfNpivDiscStatsRxVlanDiscRqs, alaFipsIntfFcfStatsFdiscRjt=alaFipsIntfFcfStatsFdiscRjt, alaFipsEtunnelIfIndexOne=alaFipsEtunnelIfIndexOne, alaFcSessFcid=alaFcSessFcid, alaFipsVlanFcfStats=alaFipsVlanFcfStats, alaFipsVlanNpivLoginStatsRxVnkas=alaFipsVlanNpivLoginStatsRxVnkas, alaFipsRnpivSessionFCFMAC=alaFipsRnpivSessionFCFMAC, Wwpn=Wwpn, alaFcIntfNpivStatsEntry=alaFcIntfNpivStatsEntry, alcatelIND1FipsMIBCompliances=alcatelIND1FipsMIBCompliances, alaFipsEtunnelSessionPairMode=alaFipsEtunnelSessionPairMode, alaFipsEtunnelEntry=alaFipsEtunnelEntry, alaFipsIntfFcfStatsClear=alaFipsIntfFcfStatsClear, alaFcVsanRnpivStatsTable=alaFcVsanRnpivStatsTable, alaFipsDiscAdvtRowStatus=alaFipsDiscAdvtRowStatus, alaFcNodeVlanNumber=alaFcNodeVlanNumber, alaFipsSessionLoginTimeDate=alaFipsSessionLoginTimeDate, alaFcVfpaState=alaFcVfpaState, alaFipsIntfNpivLoginStatsTxFlogiAccs=alaFipsIntfNpivLoginStatsTxFlogiAccs, alaFcInfoGroup=alaFcInfoGroup, alaFipsConfigPriorityOne=alaFipsConfigPriorityOne, alaFcIntfStatsClear=alaFcIntfStatsClear, alaFcVsanRnpivStatsGroup=alaFcVsanRnpivStatsGroup, alaFipsVlan=alaFipsVlan, alaFipsVlanNpivDiscStatsVlanId=alaFipsVlanNpivDiscStatsVlanId, alaFipsVlanRnpivDiscStatsVlanId=alaFipsVlanRnpivDiscStatsVlanId, alaFcIntfOperStatus=alaFcIntfOperStatus, alaFcNpivStaticLoadBalanceEthIfIndex=alaFcNpivStaticLoadBalanceEthIfIndex, alaFcInfo=alaFcInfo)
