#
# PySNMP MIB module PRVT-INTERWORKING-OS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-INTERWORKING-OS-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 19:07:16 2021
# On host fv-az39-899 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
software, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "software")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, NotificationType, MibIdentifier, Bits, ModuleIdentity, Integer32, IpAddress, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "Integer32", "IpAddress", "Unsigned32", "TimeTicks")
DisplayString, TestAndIncr, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TestAndIncr", "TextualConvention", "DateAndTime")
prvtInterworkingOSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 111, 1))
prvtInterworkingOSMIB.setRevisions(('2011-05-12 00:00', '2010-10-14 00:00', '2009-08-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtInterworkingOSMIB.setRevisionsDescriptions(('Clarified behavior of prvtBootConfigUpgrade objects.', 'Added prvtConfigFiles.', 'Initial version.',))
if mibBuilder.loadTexts: prvtInterworkingOSMIB.setLastUpdated('201105120000Z')
if mibBuilder.loadTexts: prvtInterworkingOSMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtInterworkingOSMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtInterworkingOSMIB.setDescription('The MIB enables display configuration of the device OS features.')
class PrvtFileLocationType(TextualConvention, Integer32):
    description = 'A value that represents a type of a file location interface.\n         fileSystem(1)    -- The local file system.\n         runningBinary(2) -- The running configuration on RAM, as a binary file interface\n         runningScript(3) -- The running configuration on RAM, as a CLI-script file interface\n         techSupport(4)   -- The CLI show command output\n         tftp(5)          -- A remote file system reached by the TFTP protocol\n         ftp(6)           -- A remote file system reached by the FTP protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("fileSystem", 1), ("runningBinary", 2), ("runningScript", 3), ("techSupport", 4), ("tftp", 5), ("ftp", 6))

prvtInterworkingOSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1))
version = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 1))
oSversionNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oSversionNumber.setStatus('current')
if mibBuilder.loadTexts: oSversionNumber.setDescription('This object identifies version number of the OS')
oSversionDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oSversionDate.setStatus('current')
if mibBuilder.loadTexts: oSversionDate.setDescription('This object identifies version date of the OS')
bootVersionDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersionDate.setStatus('current')
if mibBuilder.loadTexts: bootVersionDate.setDescription('This object identifies boot version date of the OS')
management = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2))
managementMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 1))
managementMiscReset = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2), ("resetToDefaults", 3), ("saveAndReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReset.setStatus('current')
if mibBuilder.loadTexts: managementMiscReset.setDescription('Physically performs a hardware reset of the unit.\n         Use with care. A reset (2) resets the unit, the\n         resetToDefaults (3) resets the configuration file\n         to factory defaults and then resets the unit, the value of\n         saveAndReset (4) saves the config and then resets the unit and\n         noop (1) does nothing.\n         A value of noop (1) is always returned\n         for a GET operation.')
managementMiscReload = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("saveAndReload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReload.setStatus('current')
if mibBuilder.loadTexts: managementMiscReload.setDescription('Reload the unit software, the unit hardware will not\n         be affected. A value of noop (1) is always returned for a\n         GET operation.')
managementMiscReloadInTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadInTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadInTime.setDescription('Indicates time for scheduled reload without save in hour:min.\n         octets contents range\n         1 day 0x01..0x1f (1-31)\n         2 month 0x01..0x0C (1..12)\n         where january = 1 december = 12\n         3 hour 0x01..0x17 (0..23)\n         4 min 0x01..3B (0..59)\n         For example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\n         To stop scheduled reload set it to 0x00 0x00 0x00 0x00')
managementMiscReloadAtTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadAtTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadAtTime.setDescription('Indicates time for scheduled reload without save at day:month:hour:min.\n         octets contents range\n         1 day 0x01..0x1f (1-31)\n         2 month 0x01..0x0C (1..12)\n         where january = 1 december = 12\n         3 hour 0x01..0x17 (0..23)\n         4 min 0x01..3B (0..59)\n         For example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\n         To stop scheduled reload set it to 0x00 0x00 0x00 0x00')
prvtBootConfigUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2))
prvtBootUpgradeSrcURI = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setReference('See rfc3986')
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setStatus('current')
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setDescription('The object represents an address from where the application\n         will be copied during an upgrade process initiated using the\n         object prvtBootUpgradeCmd.\n         The address must be given in a valid URI format.\n         \n         Examples:\n         ftp://myuser:mypass@netaddress/MyApps/Imagev1.5.Z\n         tftp://netaddress/MyApps/Imagev1.5.Z')
prvtBootApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootApplicationName.setStatus('current')
if mibBuilder.loadTexts: prvtBootApplicationName.setDescription('This object contains the file name of the application that will\n         be loaded upon the next restart.\n         Sets to this object must be the file name of an existing OS image.\n         A list of existing OS images can be obtained by performing a walk\n         of prvtFileSystemFileName.osImage.\n         Sets with the name of a non-existing OS image will result in an\n         error response.\n         Note that no validation of the image is performed when a new image\n         is selected by writing to this object.')
prvtBootUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ready", 1), ("apply", 2), ("applyExec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: prvtBootUpgradeCmd.setDescription('This field is used to initiate an upgrade process.\n         The object prvtBootUpgradeSrcURI is to contain the source URI of where\n         to obtain the new image.\n         When a get request is executed, the returned value will be always ready.\n         When a set with the value applyExec is made to this object, the upgrade\n         process is started.')
prvtBootOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ready", 1), ("notReady", 2), ("upgradeInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtBootOperStatus.setStatus('current')
if mibBuilder.loadTexts: prvtBootOperStatus.setDescription('The object is used to show the current status of the upgrading process. The\n         default value is ready(1), indicating that the process is idle.\n         upgradeInProgress(3) indicates an upgrade process has started and has not finished\n         yet.')
prvtBootErrorCondition = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("noError", 0), ("genericError", 1), ("copyFailed", 2), ("downloadFailed", 3), ("freeSpaceError", 4), ("validationFailed", 5), ("backupFailed", 6), ("inProgressError", 7), ("consistencyError", 8), ("fileSystemError", 9), ("profileNameError", 10), ("profileError", 11), ("fileNameError", 12), ("pathError", 13), ("zFileError", 14), ("cannotFindFile", 15), ("defApplicationProfileError", 16), ("configProfileError", 17), ("bootDevProfileError", 18), ("ftpServerProfileError", 19), ("ftpUserProfileError", 20), ("ftpPassProfileError", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtBootErrorCondition.setStatus('current')
if mibBuilder.loadTexts: prvtBootErrorCondition.setDescription('This object gives the error condition of the most recent upgrade process initiated\n         using the object prvtBootUpgradeCmd.')
prvtConfigFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3))
prvtConfigFileAction = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1))
prvtConfigFileSource = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 1))
prvtConfigSourceType = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 1, 1), PrvtFileLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigSourceType.setStatus('current')
if mibBuilder.loadTexts: prvtConfigSourceType.setDescription('The type of the location of the source file used by prvtConfigAction.')
prvtConfigSourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigSourceFileName.setStatus('current')
if mibBuilder.loadTexts: prvtConfigSourceFileName.setDescription("The name of the file intended to be copied if prvtConfigAction='copy';\n         or the file whose name is to be changed if prvtConfigFileAction='rename';\n         or the file to be merged to running configuration if prvtConfigAction='merge'.\n         Otherwise, has no significance.")
prvtConfigFileTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 2))
prvtConfigTargetType = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 2, 1), PrvtFileLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigTargetType.setStatus('current')
if mibBuilder.loadTexts: prvtConfigTargetType.setDescription('The type of the location of the destination file used by prvtConfigAction.')
prvtConfigTargetFileName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigTargetFileName.setStatus('current')
if mibBuilder.loadTexts: prvtConfigTargetFileName.setDescription("The name of the file intended to be copied to if prvtConfigAction='copy';\n         or the new file name if prvtConfigFileAction='rename'. Otherwise, has no significance.")
prvtConfigFileRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3))
prvtConfigRemoteAddressType = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigRemoteAddressType.setReference('prvtConfigAction')
if mibBuilder.loadTexts: prvtConfigRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: prvtConfigRemoteAddressType.setDescription('The address type of prvtConfigRemoteAddress.\n         Note that prvtConfigAction currently only support actions that use IPv4 address types.')
prvtConfigRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigRemoteAddress.setReference('prvtConfigAction')
if mibBuilder.loadTexts: prvtConfigRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: prvtConfigRemoteAddress.setDescription('The IP address of the remote file server to use for the upload or download request.')
prvtConfigRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigRemotePort.setReference('prvtConfigAction')
if mibBuilder.loadTexts: prvtConfigRemotePort.setStatus('current')
if mibBuilder.loadTexts: prvtConfigRemotePort.setDescription("The transport protocol port to use for the upload or download request.\n         The value '0' indicates to use the IANA default port number for the selected protocol.")
prvtConfigRemoteUser = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigRemoteUser.setReference('prvtConfigAction')
if mibBuilder.loadTexts: prvtConfigRemoteUser.setStatus('current')
if mibBuilder.loadTexts: prvtConfigRemoteUser.setDescription('The user name to use for the upload or download request.')
prvtConfigRemotePassword = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigRemotePassword.setReference('prvtConfigAction')
if mibBuilder.loadTexts: prvtConfigRemotePassword.setStatus('current')
if mibBuilder.loadTexts: prvtConfigRemotePassword.setDescription('The user password to use for the upload or download request.')
prvtConfigActionSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 4), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigActionSpinLock.setStatus('current')
if mibBuilder.loadTexts: prvtConfigActionSpinLock.setDescription("This object is used to facilitate prvtConfigAction\n         sets by multiple managers, specifically sets that transitions\n         prvtConfigAction from 'idle' to 'prepare'.\n         \n         The procedure for performing this transition is as follows:\n           1. Retrieve the value of prvtConfigAction. If value is not 'idle',\n              then wait until prvtConfigAction returns to 'idle'.\n           2. Retrieve the value of prvtConfigActionSpinLock.\n           3. Within a single set request packet, set the value of prvtConfigActionSpinLock\n              to the retrieved value, and the value of prvtConfigAction to 'prepare'.\n              If the set fails for the prvtConfigActionSpinLock object, go back to step 1.\n         \n         Note that the use of the prvtConfigActionSpinLock object is optional\n         (prvtConfigAction can be set without using prvtConfigActionSpinLock).")
prvtConfigAction = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("prepare", 2), ("copy", 3), ("rename", 4), ("merge", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtConfigAction.setStatus('current')
if mibBuilder.loadTexts: prvtConfigAction.setDescription("Represents a file action request to be committed immediately (with set request) or that\n         is being commited (with get request).\n         \n         idle = there is no action being performed or prepared\n         prepare = parameters of an action are being edited. This is used by the manager to\n           willingly avoid editing parameters while another manager does so.\n         copy = copy a file from source to target, where source and target have a broad meaning\n          (local/remote file system or running configuration). See details below.\n         rename = rename a local file (see details below)\n         merge = merge a local file to running configuration\n         \n         Allowed Transitions:\n         * idle to prepare\n         * prepare to any other\n         \n         Automatic Transitions:\n         * copy to idle, when action is done\n         * rename to idle, when action is done\n         * merge to idle, when action is done\n         \n         ******************************\n         *       Action = copy        *\n         ******************************\n         The following table gives the corresponding CLI command for each combination of source and target type.\n         \n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |      \\ Target|fileSystem            |runningBinary         |runningScript  |ftp                   |\n         |Source \\      |                      |                      |               |                      |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |fileSystem    |file cp from          |file restore          |file replace   |file cp from          |\n         |              |SRC                   |binary-running-config |SRC            |SRC                   |\n         |              |TRG                   |flash                 |               |FTP_TRG               |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |techSupport   |file cp               |-- not legal --       |-- not legal --|file cp               |\n         |              |technical-support     |                      |               |technical-support     |\n         |              |TRG                   |                      |               |FTP_TRG               |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |runningBinary |file backup           |-- not legal --       |-- not legal --|file backup           |\n         |              |binary-running-config |                      |               |binary-running-config |\n         |              |flash                 |                      |               |FTP_TRG               |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |runningScript |file cp               |-- not legal --       |-- not legal --|file cp               |\n         |              |running-configuration |                      |               |running-configuration |\n         |              |TRG                   |                      |               |FTP_TRG               |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         |ftp           |file cp from          |file restore          |-- not legal --|-- not legal --       |\n         |              |FTP_SRC               |binary-running-config |               |                      |\n         |              |TRG                   |FTP_SRC               |               |                      |\n         +--------------+----------------------+----------------------+---------------+----------------------+\n         Comments:\n         (a) FTP_SRC denotes ftp://[USER[:PSW]@]ADR[:PORT]/SRC\n            FTP_TRG denotes ftp://[USER[:PSW]@]ADR[:PORT]/TRG\n         (b) SRC, TRG, USER, PSW, ADR and PORT are respectively the values of prvtConfigSourceFileName,\n            prvtConfigTargetFileName, prvtConfigRemoteUser, prvtConfigRemotePassword,\n            prvtConfigRemoteAddress and prvtConfigRemotePort.\n            When any of these are not mentioned in the command, then the value is not relevant.\n         (c) tftp is the same as ftp, except that USER, PSW are not used\n         (d) the error 'inconsistentValue' is returned for any combination marked 'not legal'\n         (e) a successful execution of a copy action when target type is 'runningBinary' (equivalent CLI\n            command is 'file restore binary-running config ...') results in a system reload\n         (f) The above comments are also applicable to the other actions explained below.\n         \n         ******************************\n         *       Action = rename      *\n         ******************************\n         equivalent to CLI command: file mv SRC TRG\n         prvtConfigTargetType and prvtConfigSourceType must equal to 'fileSystem'\n         \n         ******************************\n         *       Action = merge       *\n         ******************************\n         equivalent to CLI command: file merge SRC\n         prvtConfigSourceType must equal 'fileSystem'\n         prvtConfigTargetType must equal 'runningScript'\n         \n         ******************************\n         *       Examples             *\n         ******************************\n         [1] To save the binary of the running configuration to a remote ftp server, with default username,\n            default password, default port, IP = 10.2.144.20, and target file name 'example.bin', the\n            procedure would be (assuming that prvtConfigAction is initially in 'idle' state):\n         set prvtConfigAction <- 'prepare'\n         set prvtConfigSourceType <- 'runningBinary'\n         set prvtConfigTargetType <- 'ftp'\n         set prvtConfigTargetFileName <- 'example.bin'\n         set prvtConfigRemoteAddress  <- '10.2.144.20'\n         set prvtConfigAction <- 'copy'\n         \n         [2] To rename a file named 'first.txt' to 'second.txt', the procedure would be\n            (assuming that prvtConfigAction is initially in 'idle' state):\n         set prvtConfigAction <- 'prepare'\n         set prvtConfigSourceType <- 'fileSystem'\n         set prvtConfigTargetType <- 'fileSystem'\n         set prvtConfigSourceFileName <- 'first.txt'\n         set prvtConfigTargetFileName <- 'second.txt'\n         set prvtConfigAction <- 'rename'")
prvtFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4))
prvtFileSystemSize = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 1), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemSize.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemSize.setDescription('The size of the file system flash.')
prvtFileSystemUsedSize = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 2), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemUsedSize.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemUsedSize.setDescription('The size of the currently used part of the file system flash.')
prvtFileSystemFreeSize = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 3), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemFreeSize.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFreeSize.setDescription('The size of the currently free to use part of the file system flash.')
prvtFileSystemFileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4), )
if mibBuilder.loadTexts: prvtFileSystemFileTable.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileTable.setDescription("A table of files existing in the device's file system.")
prvtFileSystemFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1), ).setIndexNames((0, "PRVT-INTERWORKING-OS-MIB", "prvtFileSystemFileType"), (0, "PRVT-INTERWORKING-OS-MIB", "prvtFileSystemFileIndex"))
if mibBuilder.loadTexts: prvtFileSystemFileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileEntry.setDescription('An entry of prvtFileSystemFileTable.')
prvtFileSystemFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("osImage", 2))))
if mibBuilder.loadTexts: prvtFileSystemFileType.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileType.setDescription("The file type.\n         The value 'osImage' signals that this file is a software image\n         file for possible use by the device.")
prvtFileSystemFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: prvtFileSystemFileIndex.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileIndex.setDescription('An index uniquely identifying a file.\n         This value does not change through-out the lifetime of a file,\n         but may change after system restarts.\n         Note that after a file has been deleted, this value may be re-used\n         by a newly created file with the same or a different file name.')
prvtFileSystemFileCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemFileCreated.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileCreated.setDescription('Represents the date and time this file was created.')
prvtFileSystemFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 4), Unsigned32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemFileSize.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileSize.setDescription('Represents the size of this file.')
prvtFileSystemFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFileSystemFileName.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileName.setDescription('Represents the name of this file.')
prvtFileSystemFileDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 2, 4, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtFileSystemFileDelete.setStatus('current')
if mibBuilder.loadTexts: prvtFileSystemFileDelete.setDescription('May be used to delete a file.\n         To delete a file, this object must be set equal to the value of\n         prvtFileSystemFileName of the same row.\n         Note that some files are protected from being deleted.\n         Reads of this object always return a zero-length string.')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 3))
cpuMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 3, 1))
cpuMonitoringUtilization = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 111, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuMonitoringUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuMonitoringUtilization.setDescription('The object shows the current CPU utilization')
mibBuilder.exportSymbols("PRVT-INTERWORKING-OS-MIB", prvtFileSystemFreeSize=prvtFileSystemFreeSize, managementMiscReset=managementMiscReset, prvtConfigFileRemote=prvtConfigFileRemote, prvtInterworkingOSMIB=prvtInterworkingOSMIB, prvtFileSystemFileEntry=prvtFileSystemFileEntry, prvtConfigActionSpinLock=prvtConfigActionSpinLock, bootVersionDate=bootVersionDate, prvtBootErrorCondition=prvtBootErrorCondition, prvtConfigSourceType=prvtConfigSourceType, prvtBootUpgradeSrcURI=prvtBootUpgradeSrcURI, cpuMonitoringUtilization=cpuMonitoringUtilization, managementMiscReloadAtTime=managementMiscReloadAtTime, prvtBootOperStatus=prvtBootOperStatus, prvtConfigFileAction=prvtConfigFileAction, PYSNMP_MODULE_ID=prvtInterworkingOSMIB, prvtBootUpgradeCmd=prvtBootUpgradeCmd, prvtFileSystem=prvtFileSystem, prvtConfigFileTarget=prvtConfigFileTarget, prvtConfigRemotePort=prvtConfigRemotePort, PrvtFileLocationType=PrvtFileLocationType, prvtBootApplicationName=prvtBootApplicationName, prvtConfigFileSource=prvtConfigFileSource, prvtFileSystemFileIndex=prvtFileSystemFileIndex, cpuMonitoring=cpuMonitoring, prvtConfigRemoteAddressType=prvtConfigRemoteAddressType, prvtFileSystemFileDelete=prvtFileSystemFileDelete, managementMisc=managementMisc, management=management, prvtFileSystemFileTable=prvtFileSystemFileTable, prvtConfigRemoteUser=prvtConfigRemoteUser, cpu=cpu, managementMiscReload=managementMiscReload, prvtConfigRemoteAddress=prvtConfigRemoteAddress, prvtFileSystemFileSize=prvtFileSystemFileSize, prvtFileSystemSize=prvtFileSystemSize, managementMiscReloadInTime=managementMiscReloadInTime, prvtConfigSourceFileName=prvtConfigSourceFileName, prvtConfigTargetFileName=prvtConfigTargetFileName, prvtFileSystemUsedSize=prvtFileSystemUsedSize, prvtFileSystemFileType=prvtFileSystemFileType, oSversionNumber=oSversionNumber, prvtConfigTargetType=prvtConfigTargetType, prvtBootConfigUpgrade=prvtBootConfigUpgrade, prvtConfigAction=prvtConfigAction, oSversionDate=oSversionDate, prvtConfigRemotePassword=prvtConfigRemotePassword, prvtInterworkingOSMIBObjects=prvtInterworkingOSMIBObjects, version=version, prvtFileSystemFileName=prvtFileSystemFileName, prvtConfigFiles=prvtConfigFiles, prvtFileSystemFileCreated=prvtFileSystemFileCreated)
