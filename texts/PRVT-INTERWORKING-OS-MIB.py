#
# PySNMP MIB module PRVT-INTERWORKING-OS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-INTERWORKING-OS-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:46:28 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
prvt_products, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "prvt-products")
usmUserSecurityName, = mibBuilder.importSymbols("SNMP-USER-BASED-SM-MIB", "usmUserSecurityName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, iso, Integer32, ObjectIdentity, TimeTicks, Unsigned32, NotificationType, MibIdentifier, Counter64, Bits, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity", "TimeTicks", "Unsigned32", "NotificationType", "MibIdentifier", "Counter64", "Bits", "Gauge32", "Counter32")
DisplayString, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")
prvtInterworkOsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 111, 1))
prvtInterworkOsMib.setRevisions(('2008-04-09 00:00', '2008-03-31 00:00', '2008-01-01 00:00', '2005-02-16 00:00', '2004-12-20 00:00', '2004-03-10 00:00', '2003-05-08 00:00', '2002-12-12 00:00', '2002-11-26 00:00', '2002-11-17 00:00', '2001-04-19 00:00', '2001-03-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtInterworkOsMib.setRevisionsDescriptions(('setExecutetrap varbind change', 'Removed configurationChanged, see PrvtConfigChange.mib.', 'Removed redefined OIDs in private vendor extension definitions.', 'Fixed spelling errors and changed the contact info.', 'Added the configurationChanged and snmpSetExecuted notifications.', 'Modified the description of the managementLoadExecute object \nto clarify that the startup-config is replaced at \nconfiguration download.', 'Move to SMI-V2.', 'Add detection for CPU RAM size.', 'Add CPU group.', 'Enable loading VDSL E2 firmware. \nAdd support for reload.', 'Add management group.', 'Initial version.',))
if mibBuilder.loadTexts: prvtInterworkOsMib.setLastUpdated('200804090000Z')
if mibBuilder.loadTexts: prvtInterworkOsMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtInterworkOsMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtInterworkOsMib.setDescription('The MIB enables display configuration of the device OS features.')
software = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111))
prvtInterworkOsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0))
version = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1))
option = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 2))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3))
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4))
prvtInterworkOsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 5))
bootVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersionNumber.setStatus('current')
if mibBuilder.loadTexts: bootVersionNumber.setDescription('This object identifies version number of the Boot program')
bootVersionDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersionDate.setStatus('current')
if mibBuilder.loadTexts: bootVersionDate.setDescription('This object identifies creation date/time of the Boot program')
bootVersionString = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersionString.setStatus('current')
if mibBuilder.loadTexts: bootVersionString.setDescription('This object contains text for the current version of the Boot program')
oSversionNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oSversionNumber.setStatus('current')
if mibBuilder.loadTexts: oSversionNumber.setDescription('This object identifies version number of the OS')
oSversionDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oSversionDate.setStatus('current')
if mibBuilder.loadTexts: oSversionDate.setDescription('This object identifies creation date/time of the OS')
oSversionString = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oSversionString.setStatus('current')
if mibBuilder.loadTexts: oSversionString.setDescription('This object contains text for the current version of the OS')
appletVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appletVersionNumber.setStatus('current')
if mibBuilder.loadTexts: appletVersionNumber.setDescription('This object contains text for the current version of the embedded \napplet')
appletVersionDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appletVersionDate.setStatus('current')
if mibBuilder.loadTexts: appletVersionDate.setDescription('This object contains text for the creation date of the current embedded \napplet version')
optionInstalled = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optionInstalled.setStatus('current')
if mibBuilder.loadTexts: optionInstalled.setDescription('This object identifies creation date/time of the OS')
managementConnectivity = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1))
managementConnectivityMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementConnectivityMACAddr.setStatus('current')
if mibBuilder.loadTexts: managementConnectivityMACAddr.setDescription('Get the agent MAC address.')
managementConnectivityIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementConnectivityIpAddress.setStatus('current')
if mibBuilder.loadTexts: managementConnectivityIpAddress.setDescription('Set IP Address for the device.')
managementConnectivityIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementConnectivityIPNetMask.setStatus('current')
if mibBuilder.loadTexts: managementConnectivityIPNetMask.setDescription('Set IP NetMask for the device.')
managementIPGateAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementIPGateAddress.setStatus('current')
if mibBuilder.loadTexts: managementIPGateAddress.setDescription('Set Gateway Address for the device - only applies for devices without\nL3 capabilities.')
managementSerialBaud = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud2400", 1), ("baud9600", 2), ("baud19200", 3), ("baud38400", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementSerialBaud.setStatus('current')
if mibBuilder.loadTexts: managementSerialBaud.setDescription('The Serial port BAUD Rate. Attributes are 8 Start Bits,\nno parity, and 1 stop bits (8N1) and Hardware Flow Control.\nValid values are 2400, 9600, 19200, and 38400.')
managementLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2))
managementLoadTftpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementLoadTftpServerAddress.setStatus('current')
if mibBuilder.loadTexts: managementLoadTftpServerAddress.setDescription('Set IP Address for the TFTP server used for downloading\nand uploading files.')
managementLoadFileName = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementLoadFileName.setStatus('current')
if mibBuilder.loadTexts: managementLoadFileName.setDescription('Set TFTP file path and name.')
managementLoadType = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("application", 1), ("boot", 2), ("configuration", 3), ("java", 4), ("vdsl-E2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementLoadType.setStatus('current')
if mibBuilder.loadTexts: managementLoadType.setDescription('The type of file to download or upload \nupon a managementLoadExecute.')
managementLoadExecute = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("download", 2), ("upload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementLoadExecute.setStatus('current')
if mibBuilder.loadTexts: managementLoadExecute.setDescription('Execute file download or upload procedure. A SET of this\nobject starts the load procedure. Note that the Application\nand Boot images can only be downloaded. The Configuration\nfile can be uploaded and downloaded. When a Configuration file\nis downloaded, it replaces the startup-config file in NVRAM. \n\nA GET of this object will return a noop (1). Also, when the user chooses to \nupload the configuration, it is the startup-config that is copied to the remote host.\nUse managementLoadExecuteStatus to determine the status of the executed load.')
managementLoadExecuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-started", 1), ("in-progress", 2), ("success", 3), ("error-connection", 4), ("error-filename", 5), ("error-fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementLoadExecuteStatus.setStatus('current')
if mibBuilder.loadTexts: managementLoadExecuteStatus.setDescription('Provides status on the execute file load procedure.\nThe status return is given by one of the enumerated codes\nnot-started (download has not yet started)\nin-progress (download has not yet finished)\nsuccess (download has finished successfully)\nerror-connection (download cannot connect)\nerror-filename (download has bad image path/filename)\nerror-fault (download has fault condition on device).')
managementMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3))
managementMiscSaveToNvm = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscSaveToNvm.setStatus('current')
if mibBuilder.loadTexts: managementMiscSaveToNvm.setDescription('When set to save (2), all nonvolatile configuration\nparameters are saved to NVM (Nonvolatile Memory). NVM save\noperations may be slow (e.g., erasing/writing Flash device).\nConsequently, all (or many) updates should be made before\nsaving to NVM. A get operation always returns noop (1)')
managementMiscReset = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2), ("reset-to-defaults", 3), ("save-and-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReset.setStatus('current')
if mibBuilder.loadTexts: managementMiscReset.setDescription('Physically performs a hardware reset of the unit.\nUse with care. A reset (2) resets the unit, the\nreset-to-defaults (3) resets the configuration file\nto factory defaults and then resets the unit, the value of\nsave-and-reset (4) saves the config and then resets the unit and \nnoop (1) does nothing. \nA value of noop (1) is always returned \nfor a GET operation.')
managementMiscReload = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save-and-reload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReload.setStatus('current')
if mibBuilder.loadTexts: managementMiscReload.setDescription('Reload the unit software, the unit hardware will not \nbe affected. A value of noop (1) is always returned for a \nGET operation.')
managementMiscReloadInTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadInTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadInTime.setDescription('Indicates time for scheduled reload without save in hour:min.\noctets contents range\n1 day 0x01..0x1f (1-31)\n2 month 0x01..0x0C (1..12)\nwhere january = 1 december = 12\n3 hour 0x01..0x17 (0..23)\n4 min 0x01..3B (0..59)\nFor example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\nTo stop scheduled reload set it to 0x00 0x00 0x00 0x00')
managementMiscReloadAtTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadAtTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadAtTime.setDescription('Indicates time for scheduled reload without save at day:month:hour:min.\noctets contents range\n1 day 0x01..0x1f (1-31)\n2 month 0x01..0x0C (1..12)\nwhere january = 1 december = 12\n3 hour 0x01..0x17 (0..23)\n4 min 0x01..3B (0..59)\nFor example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\nTo stop scheduled reload set it to 0x00 0x00 0x00 0x00')
managementMiscReloadSaveInTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadSaveInTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadSaveInTime.setDescription('Indicates time for scheduled reload with save in hour:min.\noctets contents range\n1 day 0x01..0x1f (1-31)\n2 month 0x01..0x0C (1..12)\nwhere january = 1 december = 12\n3 hour 0x01..0x17 (0..23)\n4 min 0x01..3B (0..59)\nFor example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\nTo stop scheduled reload set it to 0x00 0x00 0x00 0x00')
managementMiscReloadSaveAtTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementMiscReloadSaveAtTime.setStatus('current')
if mibBuilder.loadTexts: managementMiscReloadSaveAtTime.setDescription('Indicates time for scheduled reload with save at day:month:hour:min.\noctets contents range\n1 day 0x01..0x1f (1-31)\n2 month 0x01..0x0C (1..12)\nwhere january = 1 december = 12\n3 hour 0x01..0x17 (0..23)\n4 min 0x01..3B (0..59)\nFor example: 0x01 0x01 0x01 0x01 means 1 January 01:01.\nTo stop scheduled reload set it to 0x00 0x00 0x00 0x00')
managementLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 4))
managementOptionSupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved2", 2), ("reserved3", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("licNotSpecified", 10), ("licBasic", 11), ("licML", 12), ("licAdvML", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("reserved29", 29), ("reserved30", 30), ("reserved31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementOptionSupportStatus.setStatus('current')
if mibBuilder.loadTexts: managementOptionSupportStatus.setDescription('Indicates active software support options (license).')
managementOptionSupportKey = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementOptionSupportKey.setStatus('current')
if mibBuilder.loadTexts: managementOptionSupportKey.setDescription('Specify the software support option key (license). After set, device must be reloaded the new option to take affect.')
managementOptionSupportAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 4, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: managementOptionSupportAddress.setStatus('current')
if mibBuilder.loadTexts: managementOptionSupportAddress.setDescription('Shows the address of SNMP NMS that has configured last the option.')
managementOptionSupportL3Capable = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 4, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementOptionSupportL3Capable.setStatus('current')
if mibBuilder.loadTexts: managementOptionSupportL3Capable.setDescription('Indicates if the swicth is capable for L3 features\n- true The switch is capable for L3 features \n- false The switch is not capable for L3 features\n')
prvtBootConfigUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5))
prvtBootUpgradeSrcURI = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setReference('See rfc3986')
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setStatus('current')
if mibBuilder.loadTexts: prvtBootUpgradeSrcURI.setDescription('The object represents an address from where the application\nwill be copied and used by the device. The address \nmust be given in a valid URI format. It will be used by all \nbooting mechnisms as a source from where to find the application.\nSo it can point to either local folder or remote device. \n\nExample:\ntftp://10.3.71.45/MyApps/Imagev1.5.Z\nlocal://Usr/Imagev1.5.Z \n\nIf there is no value set, the device will boot with local application\ngiven in prvtBootApplicationNameURI object')
prvtBootApplicationNameURI = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootApplicationNameURI.setReference('See rfc3986')
if mibBuilder.loadTexts: prvtBootApplicationNameURI.setStatus('current')
if mibBuilder.loadTexts: prvtBootApplicationNameURI.setDescription('This object represents the name of the application to be used by \nthe network device to boot. The name of the application is given \nin URI format to indicate the storage device. Every network device \ncan have few localy saved application files copied in different \nstorage devices: local file system, flash etc. The user can choose \none of them by setting the starage device and the application name.\n\nExample: \nlocal://Imagev1.5.Z, \nflash://Imagev1.5.Z \n\nIf this object is empty, the device will boot from the network using \nthe remote application given in prvtBootUpgradeSrcURI')
prvtBootConfigURI = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootConfigURI.setReference('See rfc3986')
if mibBuilder.loadTexts: prvtBootConfigURI.setStatus('current')
if mibBuilder.loadTexts: prvtBootConfigURI.setDescription("This object represents the configuration file's name of a network device. \nThe value must be set in URI format. It can point to either local or remote \nconfiguration file.\n\nExample:\nlocal://Usr/my_startup.cfg, \nftp://myuser:mypass@netaddress/MyCfgs/startup.cfg\n\nThis field is optional. If it is empty, the standart startup config will be used.")
prvtBootUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ready", 1), ("apply", 2), ("applyExec", 3))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtBootUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: prvtBootUpgradeCmd.setDescription('This field is used to apply the configuration. When a get request is \nexecuted, the returned value should be always ready. When apply(2)\ncommand is executed, the upgrade settings are applied. Alternative, \nwhen applyExec(3) command is executed, the upgrade process is started.\n')
prvtBootOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ready", 1), ("notReady", 2), ("upgradeInProgress", 3))).clone('ready')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtBootOperStatus.setStatus('current')
if mibBuilder.loadTexts: prvtBootOperStatus.setDescription("The object is used to show the current status of the upgrating process. The\ndefault value is ready(1), indicating that the process is idle. when the value \nis set to notReady(2), the device upgrading mechanism is not correctly configured. \nupgradeInProgress(3) indicates upgrading process have started and haven't finished\nyet.")
prvtBootErrorCondition = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("noError", 0), ("genericError", 1), ("copyFailed", 2), ("downloadFailed", 3), ("freeSpaceError", 4), ("validationFailed", 5), ("backupFailed", 6), ("inProgressError", 7), ("consistencyError", 8), ("fileSystemError", 9), ("profileNameError", 10), ("profileError", 11), ("fileNameError", 12), ("pathError", 13), ("zFileError", 14), ("cannotFindFile", 15), ("defApplicationProfileError", 16), ("configProfileError", 17), ("bootDevProfileError", 18), ("ftpServerProfileError", 19), ("ftpUserProfileError", 20), ("ftpPassProfileError", 21))).clone('noError')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtBootErrorCondition.setStatus('current')
if mibBuilder.loadTexts: prvtBootErrorCondition.setDescription('The object can be used for feedback. How the upgrading process have finished')
cpuMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 1))
cpuMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuMonitoringStatus.setStatus('current')
if mibBuilder.loadTexts: cpuMonitoringStatus.setDescription('The object shows the status of the CPU monitor')
cpuMonitoringUtilization = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuMonitoringUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuMonitoringUtilization.setDescription('The object shows the current CPU utilization')
cpuRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2))
cpuHwRedundancySupport = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuHwRedundancySupport.setStatus('current')
if mibBuilder.loadTexts: cpuHwRedundancySupport.setDescription('This object shows if the backplan of this unit support CPU redundancy.')
cpuRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2), )
if mibBuilder.loadTexts: cpuRedundancyTable.setStatus('current')
if mibBuilder.loadTexts: cpuRedundancyTable.setDescription('This table contains the CPU redundancy information.')
cpuRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1), ).setIndexNames((0, "PRVT-INTERWORKING-OS-MIB", "cpuId"))
if mibBuilder.loadTexts: cpuRedundancyEntry.setStatus('current')
if mibBuilder.loadTexts: cpuRedundancyEntry.setDescription('Information about one CPU')
cpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: cpuId.setStatus('current')
if mibBuilder.loadTexts: cpuId.setDescription('The ID of the CPU in the system')
cpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuName.setStatus('current')
if mibBuilder.loadTexts: cpuName.setDescription('Textual representation of the CPU')
cpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatus.setStatus('current')
if mibBuilder.loadTexts: cpuStatus.setDescription('The CPU status')
cpuRedundancySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuRedundancySupport.setStatus('current')
if mibBuilder.loadTexts: cpuRedundancySupport.setDescription('This object shows if the CPU card supports redundancy.')
cpuSWVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSWVersionString.setStatus('current')
if mibBuilder.loadTexts: cpuSWVersionString.setDescription('The OS version currently running on the CPU')
cpuHW = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 3))
cpuRAMsize = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuRAMsize.setStatus('current')
if mibBuilder.loadTexts: cpuRAMsize.setDescription('This object returns the CPU card RAM size')
imageCrcCheckFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0, 1)).setObjects(("PRVT-INTERWORKING-OS-MIB", "managementLoadTftpServerAddress"), ("PRVT-INTERWORKING-OS-MIB", "managementLoadFileName"))
if mibBuilder.loadTexts: imageCrcCheckFailed.setStatus('current')
if mibBuilder.loadTexts: imageCrcCheckFailed.setDescription('The imageCrcCheckFailed notification indicates that the \nimage loaded via TFTP has not passed the CRC check \nand has been discarded.')
configurationLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0, 2)).setObjects(("PRVT-INTERWORKING-OS-MIB", "managementLoadTftpServerAddress"), ("PRVT-INTERWORKING-OS-MIB", "managementLoadFileName"))
if mibBuilder.loadTexts: configurationLoadFailed.setStatus('current')
if mibBuilder.loadTexts: configurationLoadFailed.setDescription('The configurationLoadFailed notification indicates that\nthe sending agent did not succeed to upload or download\nthe configuration file.')
unauthorizedAccessViaCLI = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0, 3))
if mibBuilder.loadTexts: unauthorizedAccessViaCLI.setStatus('current')
if mibBuilder.loadTexts: unauthorizedAccessViaCLI.setDescription('The unauthorizedAccessViaCLI notification indicates that \nthe last attempt to login to the device via CLI cannot \nbe authorized.')
snmpSetExecuted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0, 4)).setObjects(("SNMP-USER-BASED-SM-MIB", "usmUserSecurityName"))
if mibBuilder.loadTexts: snmpSetExecuted.setStatus('current')
if mibBuilder.loadTexts: snmpSetExecuted.setDescription('This notification indicates that a successful set request has been performed.')
managementOptionSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 111, 1, 0, 5)).setObjects(("PRVT-INTERWORKING-OS-MIB", "managementOptionSupportStatus"), ("PRVT-INTERWORKING-OS-MIB", "managementOptionSupportAddress"))
if mibBuilder.loadTexts: managementOptionSupportChanged.setStatus('current')
if mibBuilder.loadTexts: managementOptionSupportChanged.setDescription('This notification indicates that a management option license has been changed.')
mibBuilder.exportSymbols("PRVT-INTERWORKING-OS-MIB", prvtBootConfigUpgrade=prvtBootConfigUpgrade, prvtInterworkOsNotifications=prvtInterworkOsNotifications, unauthorizedAccessViaCLI=unauthorizedAccessViaCLI, oSversionDate=oSversionDate, cpuMonitoring=cpuMonitoring, prvtBootConfigURI=prvtBootConfigURI, imageCrcCheckFailed=imageCrcCheckFailed, cpuSWVersionString=cpuSWVersionString, cpu=cpu, managementMisc=managementMisc, cpuName=cpuName, managementMiscReloadSaveAtTime=managementMiscReloadSaveAtTime, managementLoadFileName=managementLoadFileName, prvtBootApplicationNameURI=prvtBootApplicationNameURI, managementLicense=managementLicense, cpuRedundancySupport=cpuRedundancySupport, configurationLoadFailed=configurationLoadFailed, bootVersionNumber=bootVersionNumber, cpuId=cpuId, managementConnectivity=managementConnectivity, cpuMonitoringUtilization=cpuMonitoringUtilization, managementOptionSupportAddress=managementOptionSupportAddress, option=option, PYSNMP_MODULE_ID=prvtInterworkOsMib, managementMiscReload=managementMiscReload, cpuRedundancyEntry=cpuRedundancyEntry, managementOptionSupportChanged=managementOptionSupportChanged, cpuMonitoringStatus=cpuMonitoringStatus, managementLoad=managementLoad, managementConnectivityIPNetMask=managementConnectivityIPNetMask, managementMiscReloadInTime=managementMiscReloadInTime, prvtBootOperStatus=prvtBootOperStatus, cpuHwRedundancySupport=cpuHwRedundancySupport, managementMiscSaveToNvm=managementMiscSaveToNvm, managementLoadExecuteStatus=managementLoadExecuteStatus, bootVersionString=bootVersionString, managementConnectivityMACAddr=managementConnectivityMACAddr, managementMiscReloadSaveInTime=managementMiscReloadSaveInTime, oSversionString=oSversionString, optionInstalled=optionInstalled, managementLoadTftpServerAddress=managementLoadTftpServerAddress, managementOptionSupportStatus=managementOptionSupportStatus, software=software, managementSerialBaud=managementSerialBaud, cpuRedundancy=cpuRedundancy, cpuHW=cpuHW, bootVersionDate=bootVersionDate, managementLoadExecute=managementLoadExecute, prvtBootUpgradeSrcURI=prvtBootUpgradeSrcURI, appletVersionDate=appletVersionDate, oSversionNumber=oSversionNumber, managementOptionSupportKey=managementOptionSupportKey, management=management, prvtBootUpgradeCmd=prvtBootUpgradeCmd, cpuRedundancyTable=cpuRedundancyTable, cpuRAMsize=cpuRAMsize, prvtInterworkOsMib=prvtInterworkOsMib, managementMiscReloadAtTime=managementMiscReloadAtTime, version=version, cpuStatus=cpuStatus, snmpSetExecuted=snmpSetExecuted, managementLoadType=managementLoadType, managementIPGateAddress=managementIPGateAddress, managementMiscReset=managementMiscReset, prvtInterworkOsConformance=prvtInterworkOsConformance, managementOptionSupportL3Capable=managementOptionSupportL3Capable, prvtBootErrorCondition=prvtBootErrorCondition, managementConnectivityIpAddress=managementConnectivityIpAddress, appletVersionNumber=appletVersionNumber)
