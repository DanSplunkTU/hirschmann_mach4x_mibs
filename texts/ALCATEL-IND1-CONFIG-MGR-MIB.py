#
# PySNMP MIB module ALCATEL-IND1-CONFIG-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-CONFIG-MGR-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:48:02 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Confmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Confmgr")
VirtualOperChassisId, = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "VirtualOperChassisId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, NotificationType, Counter32, IpAddress, ModuleIdentity, Unsigned32, ObjectIdentity, iso, Gauge32, Counter64, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "iso", "Gauge32", "Counter64", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alcatelIND1ConfigMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1))
alcatelIND1ConfigMgrMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                         version of this document is used with the products in question:\n\n                         Alcatel-Lucent, Enterprise Solutions Division\n                         (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                              Agoura Hills, CA  91301-5122\n                              United States Of America\n\n                         Telephone:        North America  +1 800 995 2696\n                                           Latin America  +1 877 919 9526\n                                           Europe         +31 23 556 0100\n                                           Asia           +65 394 7933\n                                           All Other      +1 818 878 4507\n\n                         Electronic Mail:         support@ind.alcatel.com\n                         World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                         File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Configuration Manager Subsystem.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1ConfigMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBObjects.setDescription('Branch For Configuration Manager Subsystem Managed Objects.')
alcatelIND1ConfigMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBConformance.setDescription('Branch For Configuration Manager Subsystem Conformance Information.')
alcatelIND1ConfigMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBGroups.setDescription('Branch For Configuration Manager Subsystem Units Of Conformance.')
alcatelIND1ConfigMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliances.setDescription('Branch For Configuration Manager Subsystem Compliance Statements.')
configManager = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1))
configFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileName.setStatus('current')
if mibBuilder.loadTexts: configFileName.setDescription('The name of the configuration file to be\n                         read by the device. The file specified\n                         should be present on the device.')
configFileAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("checkSyntaxOnly", 2), ("apply", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileAction.setStatus('current')
if mibBuilder.loadTexts: configFileAction.setDescription('Triggers application of the configuration\n                         file specified by the configInputFileName.\n                         A value of checkSyntax causes configInputFile\n                         to be checked for syntax, with no changes to\n                         device configuration. A value of\n                         checkSyntaxAndApply causes the configInputFile\n                         to be applied to the device configuration.A value\n                         of none indicates no action has been triggered.')
configErrorFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configErrorFileName.setStatus('current')
if mibBuilder.loadTexts: configErrorFileName.setDescription('The name of the file containing the error\n                         messages generated by the device during file\n                         configuration.')
configFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileStatus.setStatus('current')
if mibBuilder.loadTexts: configFileStatus.setDescription('Status of most recent application of configuration\n                         file to the device.')
configFileMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("verbose", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileMode.setStatus('current')
if mibBuilder.loadTexts: configFileMode.setDescription('The verbose mode displays all configuration commands\n                         and errors when the file is applied on the console\n                         screen.  Ignored unless set from command line interface.')
configTimerFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileName.setStatus('current')
if mibBuilder.loadTexts: configTimerFileName.setDescription('The name of the configuration file to be read later\n                         by the device.')
configTimerFileTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileTime.setStatus('current')
if mibBuilder.loadTexts: configTimerFileTime.setDescription("The local time when the configuration file\n                         will be read by the device. This object is\n                         only set if the configInputFile must be applied\n                         at a later time.\n                         The following formats are valid:\n\n                          MM/DD/YYYY hh:mm\n\n                          MM/DD/YY hh:mm\n\n                          MM/DD hh:mm -  uses current year if\n                                         after current date and time,\n                                         next year otherwise.\n\n                          hh:mm -  uses today's date if later\n                                   than current time,\n                                   tommorow's date otherwise.\n                      where\n                        YY - year   (0-38,99)\n                        MM - month  (1-12)\n                        DD - day    (1-31)\n                        hh - hour   (0-23)\n                        mm - minute (0-59)")
configTimerFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2), ("inProgress", 3))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTimerFileStatus.setStatus('current')
if mibBuilder.loadTexts: configTimerFileStatus.setDescription('The current status of the ASCII configuration\n                         timer.')
configTimerClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerClear.setStatus('current')
if mibBuilder.loadTexts: configTimerClear.setDescription('A set of this object causes the ASCII\n                         configuration timer to be cleared.')
configSnapshotFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotFileName.setStatus('current')
if mibBuilder.loadTexts: configSnapshotFileName.setDescription('The name of the configuration snap-shot file\n                         to be generated by the device.')
configSnapshotAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAction.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAction.setDescription('A set of this object causes the configuration\n                         snap-shot to be generated by the device.')
configSnapshotAllSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAllSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAllSelect.setDescription('A set of this object causes\n                         all application configuration data to be\n                         included in the snap-shot file generated by\n                         the device.')
configSnapshotVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVlanSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVlanSelect.setDescription('A set of this object causes\n                         Vlan configuration data to be\n                         included in the snap-shot file generated by\n                         the device.')
configSnapshotSpanningTreeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSpanningTreeSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSpanningTreeSelect.setDescription('A set of this object causes\n                         Spanning Tree configuration data to be\n                         included in the snap-shot file generated by\n                         the device.')
configSnapshotQOSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotQOSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotQOSSelect.setDescription('A set of this object causes\n                         QOS configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPSelect.setDescription('A set of this object causes\n                         IP configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotIPXSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPXSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPXSelect.setDescription('A set of this object causes\n                         IPX configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotIPMSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPMSSelect.setDescription('A set of this object causes\n                         IPMS configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotAAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAAASelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAAASelect.setDescription('A set of this object causes\n                         AAA configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotSNMPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSNMPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSNMPSelect.setDescription('A set of this object causes\n                         SNMP configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshot8021QSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshot8021QSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshot8021QSelect.setDescription('A set of this object causes\n                         802.1Q configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotLinkAggregateSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLinkAggregateSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLinkAggregateSelect.setDescription('A set of this object causes\n                         link aggregation configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPortMirrorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMirrorSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPortMirrorSelect.setDescription('A set of this object causes\n                         port mirroring configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotXIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotXIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotXIPSelect.setDescription('A set of this object causes\n                         proprietary inter-switch protocol configuration\n                         data to be included in the snap-shot file generated\n                         by the device.')
configSnapshotHealthMonitorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotHealthMonitorSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotHealthMonitorSelect.setDescription('A set of this object causes\n                         health monitoring configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotBootPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBootPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBootPSelect.setDescription('A set of this object causes\n                         bootp configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotBridgeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBridgeSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBridgeSelect.setDescription('A set of this object causes\n                         source-learning configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotChassisSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotChassisSelect.setDescription('A set of this object causes\n                         the chassis configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotInterfaceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotInterfaceSelect.setDescription('A set of this object causes\n                         ethernet interface configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPolicySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPolicySelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPolicySelect.setDescription('A set of this object causes\n                         policy manager configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSessionSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSessionSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSessionSelect.setDescription('A set of this object causes\n                         the user-session configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotServerLoadBalanceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotServerLoadBalanceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotServerLoadBalanceSelect.setDescription('A set of this object causes\n                         server load balancing configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSystemServiceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSystemServiceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSystemServiceSelect.setDescription('A set of this object causes\n                         system services configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotVRRPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVRRPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVRRPSelect.setDescription('A set of this object causes\n                         VRRP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotWebSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWebSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotWebSelect.setDescription('A set of this object causes\n                         web manager configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotRIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRIPSelect.setDescription('A set of this object causes\n                         RIP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotOSPFSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPFSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotOSPFSelect.setDescription('A set of this object causes\n                         OSPF configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotBGPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBGPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBGPSelect.setDescription('A set of this object causes\n                         BGP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotIPRMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPRMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPRMSelect.setDescription('A set of this object causes\n                         IPRM routing configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotIPMRSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMRSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPMRSelect.setDescription('A set of this object causes\n                         IP multicast routing configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotModuleSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotModuleSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotModuleSelect.setDescription('A set of this object causes\n                         module configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configTechSupportLogAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("notSignificant", 0), ("techSupportBasic", 1), ("techSupportL2", 2), ("techSupportL3", 3), ("techSupportL3Rip", 4), ("techSupportL3Ipx", 5), ("techSupportL3Ospf", 6), ("techSupportL3Bgp", 7), ("techSupportL3Pimsm", 8), ("techSupportL3Mroute", 9), ("techSupportL3Dvmrp", 10), ("techSupportL3IPv6", 11), ("techSupportL3RIPng", 12), ("techSupportL3OSPF3", 13), ("techSupportL3Isis", 14), ("techSupportL3Pim6", 15), ("techSupportL3IPsec", 16), ("techSupportL3Bfd", 17))).clone('techSupportBasic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTechSupportLogAction.setStatus('current')
if mibBuilder.loadTexts: configTechSupportLogAction.setDescription('A set of this object causes\n                         a tech_support.log file to be created\n                         containing switch information useful to\n                         a technical support group.')
configWriteMemory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configWriteMemory.setStatus('current')
if mibBuilder.loadTexts: configWriteMemory.setDescription('A set of this object causes\n                         the entire switch snap-shot configuration to\n                         be stored in the boot.cfg file in the\n                         current running directory.')
configErrorFileMaximum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configErrorFileMaximum.setStatus('current')
if mibBuilder.loadTexts: configErrorFileMaximum.setDescription('The maximum number of error files which may be\n                         present on a switch.  Each time a new error file\n                         is created, all but the newest configErrorFileMaxNum\n                         error files are deleted.')
configChangeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("identical", 1), ("different", 2))).clone('identical')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configChangeStatus.setStatus('current')
if mibBuilder.loadTexts: configChangeStatus.setDescription('The current state of the running configuration with respect\n                         to the saved configuration.')
configSnapshotRDPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRDPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRDPSelect.setDescription('A set of this object causes\n                         RDP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotIPv6Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPv6Select.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPv6Select.setDescription('A set of this object causes\n                         IPv6 configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotRIPngSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPngSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRIPngSelect.setDescription('A set of this object causes\n                         RIPng configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotAtmSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAtmSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAtmSelect.setDescription('A set of this object causes\n                         ATM configuration data to\n                         be included in the snap-shot file generated\n                         by the device. NOT SUPPORTED.')
configSnapshotSonetSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSonetSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSonetSelect.setDescription('A set of this object causes\n                         Sonet configuration data to\n                         be included in the snap-shot file generated\n                         by the device. NOT SUPPORTED.')
configSnapshotNTPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNTPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotNTPSelect.setDescription('A set of this object causes\n                         NTP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPortMappingSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMappingSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPortMappingSelect.setDescription('A set of this object causes\n                         Port Mapping configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotOSPF3Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPF3Select.setStatus('current')
if mibBuilder.loadTexts: configSnapshotOSPF3Select.setDescription('A set of this object causes\n                         OSPF3 configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configWriteMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configWriteMemoryStatus.setStatus('current')
if mibBuilder.loadTexts: configWriteMemoryStatus.setDescription('Status of most recent wwrite memory action.')
configSnapshotStackSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotStackSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotStackSelect.setDescription('A set of this object causes\n                         STack Manager configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotISISSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotISISSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotISISSelect.setDescription('A set of this object causes\n                         ISIS configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotEOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEOAMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotEOAMSelect.setDescription('A set of this object causes\n                         Ethernet OAM configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotUDLDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotUDLDSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotUDLDSelect.setDescription('A set of this object causes\n                         UDLD configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotNETSECSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNETSECSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotNETSECSelect.setDescription('A set of this object causes\n                         NETSEC configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotIPsecSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPsecSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPsecSelect.setDescription('A set of this object causes\n                         IP Security configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotBFDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBFDSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBFDSelect.setDescription('A set of this object causes\n                         BFD configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotMultiChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMultiChassisSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMultiChassisSelect.setDescription('A set of this object causes\n                         MCM configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotErpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotErpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotErpSelect.setDescription('A set of this object causes\n                         ERP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotMPLSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMPLSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMPLSSelect.setDescription('A set of this object causes\n                         MPLS configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotEFMOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEFMOAMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotEFMOAMSelect.setDescription('A set of this object causes\n                         EFMOAM configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotCapabilitySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotCapabilitySelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotCapabilitySelect.setDescription('A set of this object causes\n                         capability manager configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotVfcSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVfcSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVfcSelect.setDescription('A set of this object causes\n                         VFC configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotHaVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotHaVlanSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotHaVlanSelect.setDescription('A set of this object causes\n                         HA VLAN configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDaUnpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDaUnpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDaUnpSelect.setDescription('A set of this object causes\n                         DA UNP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDHLSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDHLSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDHLSelect.setDescription('A set of this object causes\n                         DHL configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotMVRPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMVRPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMVRPSelect.setDescription('A set of this object causes\n                         MVRP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSAASelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSAASelect.setDescription('A set of this object causes\n                         SAA configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSPBSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSPBSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSPBSelect.setDescription('A set of this object causes\n                         SPB configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSPBIsisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSPBIsisSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSPBIsisSelect.setDescription('A set of this object causes\n                         SPB ISIS configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotVirtualChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVirtualChassisSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVirtualChassisSelect.setDescription('A set of this object causes VCM configuration\n                         data to be included in the snap-shot file\n                         generated by the device.  A set of this object\n                         is only valid in standalone mode')
configSnapshotMplsLdpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMplsLdpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMplsLdpSelect.setDescription('A set of this object causes\n                         MPLS LDP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotVCMSpecific = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVCMSpecific.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVCMSpecific.setDescription('A set of this object causes\n                         VCM configuration data for the chassis \n                         specified by configSnapshotChassisId to\n                         be included in the snap-shot file generated\n                         by the device  A set of this object is only\n                         valid in virtual chassis mode.')
configSnapshotChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 78), VirtualOperChassisId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotChassisId.setStatus('current')
if mibBuilder.loadTexts: configSnapshotChassisId.setDescription('A set of this object in combination with\n                         configSnapshotVCMSpecific causes\n                         VCM configuration data for the specified\n                         chassis to be included in the snap-shot\n                         file generated by the device.  A set of\n                         this object is only valid in virtual\n                         chassis mode.')
configSnapshotEvbSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEvbSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotEvbSelect.setDescription('A set of this object causes\n                           EVB configuration data to\n                           be included in the snap-shot file generated\n                           by the device.')
configConvertConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSignificant", 0), ("virtualChassis", 1))).clone('notSignificant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertConfiguration.setStatus('current')
if mibBuilder.loadTexts: configConvertConfiguration.setDescription('A set of this object to virtualChassis is only valid in\n                         standalone mode and causes a virtual chassis snapshot to be\n                         generated from the running configuration.  The resulting\n                         vcsetup.cfg and vcboot.cfg files are stored in the directory\n                         specified by configConvertDestinationDirectory. If no directory\n                         is specified the running directory will be used provided the\n                         running directory is not the certified directory.')
configConvertConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configConvertConfigurationStatus.setStatus('current')
if mibBuilder.loadTexts: configConvertConfigurationStatus.setDescription('Status of most recent convert configuration action.')
configConvertDestinationDirectory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 82), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertDestinationDirectory.setStatus('current')
if mibBuilder.loadTexts: configConvertDestinationDirectory.setDescription('The destination directory for the files created by the action  \n                         of setting the configConvertConfiguration object.')
configConvertReload = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configConvertReload.setStatus('current')
if mibBuilder.loadTexts: configConvertReload.setDescription('A set of this object will initiate a reboot of the\n                           switch as part of the configConvertConfiguration\n                           action.')
configSnapshotAppfpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAppfpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAppfpSelect.setDescription('A set of this object causes\n                           Application Finger Print configuration data to\n                           be included in the snap-shot file generated\n                           by the device.')
configSnapshotFipsSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotFipsSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotFipsSelect.setDescription('A set of this object causes\n                         FIP Snooping configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotLFPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLFPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLFPSelect.setDescription('A set of this object causes\n                         LFP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPmInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPmInterfaceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPmInterfaceSelect.setDescription('A set of this object causes\n                         Port Manager  Interfaceconfiguration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotAutofabricSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAutofabricSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAutofabricSelect.setDescription('A set of this object causes\n                         Autofabric configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDhcpv6RelaySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpv6RelaySelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDhcpv6RelaySelect.setDescription('A set of this object causes\n                         DHCPv6 Relay configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotSIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSIPSelect.setDescription('A set of this object causes\n                         Autofabric configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotOpenflowSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOpenflowSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotOpenflowSelect.setDescription('A set of this object causes\n                         Openflow configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotWlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWlanSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotWlanSelect.setDescription('A set of this object causes\n                         Wlan configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDhcpSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpSrvSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDhcpSrvSelect.setDescription('A set of this object causes\n                         DhcpSrv configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDPISelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDPISelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDPISelect.setDescription('A set of this object causes\n                         Dpi configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotMsgSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMsgSrvSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMsgSrvSelect.setDescription('A set of this object causes\n                         MsgSrv configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotAlSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAlSrvSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAlSrvSelect.setDescription('A set of this object causes\n                         ActiveLeaseSrv configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDhcpv6SrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpv6SrvSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDhcpv6SrvSelect.setDescription('A set of this object causes\n                         Dhcp6Srv configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotAGSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAGSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAGSelect.setDescription('A set of this object causes\n                         AG configuration data to be included\n                         in the snap-shot file generated by the\n                         the device.')
configSnapshotQMRSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotQMRSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotQMRSelect.setDescription('A set of this object causes \n\t                QMR configuration data to be included    \n\t                in the snap-shot file generated by the    \n\t                the device.')
configSnapshotVCSPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVCSPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVCSPSelect.setDescription('A set of this object causes\n                         VCSP configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotDhcpSnoopingSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpSnoopingSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDhcpSnoopingSelect.setDescription('A set of this object causes\n                         DHCP SNOOPING configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotAppMonSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAppMonSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAppMonSelect.setDescription('A set of this object causes\n                         Application Monitoring configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotLbdSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLbdSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLbdSelect.setDescription('A set of this object causes\n                         Loopback Detection configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotVMSnoopSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVMSnoopSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVMSnoopSelect.setDescription('A set of this object causes\n                         VM Snooping configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPppoeIaSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPppoeIaSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPppoeIaSelect.setDescription('A set of this object causes\n                         PPPoE-IA configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPmPortViolationSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPmPortViolationSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPmPortViolationSelect.setDescription('A set of this object causes\n                         Port Violation configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotLanPowerSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLanPowerSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLanPowerSelect.setDescription('A set of this object causes\n                         Lan Power configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
configSnapshotPVLANSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPVLANSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPVLANSelect.setDescription('A set of this object causes\n                         Private VLAN(PVLAN) configuration data to\n                         be included in the snap-shot file generated\n                         by the device.')
alcatelIND1ConfigMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ConfigMgrMIBCompliance = alcatelIND1ConfigMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliance.setDescription('Compliance statement for Configuration Manager Subsystem.')
configFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileMode"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileMaximum"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configChangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configFileGroup = configFileGroup.setStatus('current')
if mibBuilder.loadTexts: configFileGroup.setDescription('Collection of objects for file configuration.')
configTimerFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileTime"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerClear"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTimerFileGroup = configTimerFileGroup.setStatus('current')
if mibBuilder.loadTexts: configTimerFileGroup.setDescription('Collection of objects for timer file configuration.')
configSnapshotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAllSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVCMSpecific"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotChassisId"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSpanningTreeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotQOSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPXSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSNMPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshot8021QSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLinkAggregateSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMirrorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotXIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotHealthMonitorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBootPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBridgeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotInterfaceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPolicySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSessionSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotServerLoadBalanceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSystemServiceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVRRPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWebSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPFSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBGPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPRMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMRSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotModuleSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRDPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPv6Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPngSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAtmSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSonetSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNTPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMappingSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPF3Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotStackSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotISISSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotUDLDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNETSECSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPsecSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBFDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMultiChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEFMOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMPLSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotErpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotCapabilitySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVfcSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotHaVlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDaUnpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDHLSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMVRPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSPBSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSPBIsisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVirtualChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMplsLdpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEvbSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAppfpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotFipsSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLFPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPmInterfaceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAutofabricSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpv6RelaySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOpenflowSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDPISelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMsgSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAlSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpv6SrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAGSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotQMRSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVCSPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpSnoopingSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAppMonSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVMSnoopSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLbdSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPppoeIaSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPmPortViolationSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLanPowerSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPVLANSelect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configSnapshotGroup = configSnapshotGroup.setStatus('current')
if mibBuilder.loadTexts: configSnapshotGroup.setDescription('Collection of objects for snapshot configuration.')
configTechSupportLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTechSupportLogGroup = configTechSupportLogGroup.setStatus('current')
if mibBuilder.loadTexts: configTechSupportLogGroup.setDescription('Collection of objects for technical support log file.')
configWriteMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configWriteMemoryGroup = configWriteMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: configWriteMemoryGroup.setDescription('Collection of objects for write memory.')
configConvertConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfiguration"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertConfigurationStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertDestinationDirectory"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configConvertReload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configConvertConfigurationGroup = configConvertConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: configConvertConfigurationGroup.setDescription('Collection of objects for write memory.')
mibBuilder.exportSymbols("ALCATEL-IND1-CONFIG-MGR-MIB", configSnapshotFipsSelect=configSnapshotFipsSelect, configConvertConfigurationStatus=configConvertConfigurationStatus, configSnapshotISISSelect=configSnapshotISISSelect, configConvertReload=configConvertReload, configSnapshotAction=configSnapshotAction, configSnapshotLinkAggregateSelect=configSnapshotLinkAggregateSelect, configWriteMemory=configWriteMemory, configSnapshotBridgeSelect=configSnapshotBridgeSelect, configSnapshotDaUnpSelect=configSnapshotDaUnpSelect, alcatelIND1ConfigMgrMIBObjects=alcatelIND1ConfigMgrMIBObjects, configSnapshotQMRSelect=configSnapshotQMRSelect, configSnapshotDHLSelect=configSnapshotDHLSelect, configSnapshotWlanSelect=configSnapshotWlanSelect, configSnapshotPmPortViolationSelect=configSnapshotPmPortViolationSelect, configSnapshotAGSelect=configSnapshotAGSelect, alcatelIND1ConfigMgrMIBConformance=alcatelIND1ConfigMgrMIBConformance, configFileName=configFileName, configFileGroup=configFileGroup, configSnapshotPolicySelect=configSnapshotPolicySelect, configSnapshotHealthMonitorSelect=configSnapshotHealthMonitorSelect, configSnapshotSAASelect=configSnapshotSAASelect, configErrorFileName=configErrorFileName, configSnapshotLFPSelect=configSnapshotLFPSelect, configSnapshotSpanningTreeSelect=configSnapshotSpanningTreeSelect, configSnapshotMPLSSelect=configSnapshotMPLSSelect, configSnapshotUDLDSelect=configSnapshotUDLDSelect, alcatelIND1ConfigMgrMIBCompliance=alcatelIND1ConfigMgrMIBCompliance, configSnapshotAlSrvSelect=configSnapshotAlSrvSelect, configSnapshotHaVlanSelect=configSnapshotHaVlanSelect, configSnapshotServerLoadBalanceSelect=configSnapshotServerLoadBalanceSelect, configConvertConfiguration=configConvertConfiguration, configWriteMemoryGroup=configWriteMemoryGroup, configSnapshotAAASelect=configSnapshotAAASelect, configConvertDestinationDirectory=configConvertDestinationDirectory, configSnapshot8021QSelect=configSnapshot8021QSelect, configTimerClear=configTimerClear, configSnapshotMVRPSelect=configSnapshotMVRPSelect, configSnapshotPVLANSelect=configSnapshotPVLANSelect, configTechSupportLogGroup=configTechSupportLogGroup, configSnapshotVMSnoopSelect=configSnapshotVMSnoopSelect, configSnapshotPortMirrorSelect=configSnapshotPortMirrorSelect, configSnapshotInterfaceSelect=configSnapshotInterfaceSelect, configSnapshotSPBSelect=configSnapshotSPBSelect, configSnapshotRDPSelect=configSnapshotRDPSelect, configSnapshotOSPF3Select=configSnapshotOSPF3Select, alcatelIND1ConfigMgrMIBGroups=alcatelIND1ConfigMgrMIBGroups, configSnapshotDPISelect=configSnapshotDPISelect, configSnapshotBootPSelect=configSnapshotBootPSelect, configTimerFileStatus=configTimerFileStatus, configSnapshotAppfpSelect=configSnapshotAppfpSelect, alcatelIND1ConfigMgrMIB=alcatelIND1ConfigMgrMIB, configFileMode=configFileMode, configSnapshotIPXSelect=configSnapshotIPXSelect, configSnapshotPortMappingSelect=configSnapshotPortMappingSelect, configSnapshotAutofabricSelect=configSnapshotAutofabricSelect, configSnapshotChassisSelect=configSnapshotChassisSelect, configSnapshotVRRPSelect=configSnapshotVRRPSelect, configSnapshotQOSSelect=configSnapshotQOSSelect, configSnapshotSessionSelect=configSnapshotSessionSelect, configSnapshotSonetSelect=configSnapshotSonetSelect, configSnapshotIPsecSelect=configSnapshotIPsecSelect, configSnapshotMsgSrvSelect=configSnapshotMsgSrvSelect, configSnapshotAllSelect=configSnapshotAllSelect, configSnapshotPmInterfaceSelect=configSnapshotPmInterfaceSelect, configSnapshotDhcpSrvSelect=configSnapshotDhcpSrvSelect, configSnapshotVlanSelect=configSnapshotVlanSelect, configWriteMemoryStatus=configWriteMemoryStatus, configSnapshotIPMSSelect=configSnapshotIPMSSelect, configTimerFileName=configTimerFileName, configSnapshotNTPSelect=configSnapshotNTPSelect, PYSNMP_MODULE_ID=alcatelIND1ConfigMgrMIB, configChangeStatus=configChangeStatus, configSnapshotOSPFSelect=configSnapshotOSPFSelect, configSnapshotEvbSelect=configSnapshotEvbSelect, configSnapshotVirtualChassisSelect=configSnapshotVirtualChassisSelect, configSnapshotBGPSelect=configSnapshotBGPSelect, configSnapshotVCMSpecific=configSnapshotVCMSpecific, configSnapshotDhcpv6SrvSelect=configSnapshotDhcpv6SrvSelect, configSnapshotIPRMSelect=configSnapshotIPRMSelect, configSnapshotRIPSelect=configSnapshotRIPSelect, configSnapshotIPSelect=configSnapshotIPSelect, configSnapshotAtmSelect=configSnapshotAtmSelect, configErrorFileMaximum=configErrorFileMaximum, configSnapshotRIPngSelect=configSnapshotRIPngSelect, configSnapshotVfcSelect=configSnapshotVfcSelect, configSnapshotSPBIsisSelect=configSnapshotSPBIsisSelect, configSnapshotSIPSelect=configSnapshotSIPSelect, configTechSupportLogAction=configTechSupportLogAction, configManager=configManager, configSnapshotFileName=configSnapshotFileName, configSnapshotXIPSelect=configSnapshotXIPSelect, configSnapshotMplsLdpSelect=configSnapshotMplsLdpSelect, configSnapshotMultiChassisSelect=configSnapshotMultiChassisSelect, configSnapshotModuleSelect=configSnapshotModuleSelect, alcatelIND1ConfigMgrMIBCompliances=alcatelIND1ConfigMgrMIBCompliances, configSnapshotNETSECSelect=configSnapshotNETSECSelect, configSnapshotIPMRSelect=configSnapshotIPMRSelect, configSnapshotVCSPSelect=configSnapshotVCSPSelect, configTimerFileTime=configTimerFileTime, configSnapshotGroup=configSnapshotGroup, configSnapshotErpSelect=configSnapshotErpSelect, configSnapshotAppMonSelect=configSnapshotAppMonSelect, configSnapshotPppoeIaSelect=configSnapshotPppoeIaSelect, configFileAction=configFileAction, configTimerFileGroup=configTimerFileGroup, configSnapshotBFDSelect=configSnapshotBFDSelect, configSnapshotLanPowerSelect=configSnapshotLanPowerSelect, configSnapshotDhcpv6RelaySelect=configSnapshotDhcpv6RelaySelect, configConvertConfigurationGroup=configConvertConfigurationGroup, configSnapshotEFMOAMSelect=configSnapshotEFMOAMSelect, configSnapshotOpenflowSelect=configSnapshotOpenflowSelect, configFileStatus=configFileStatus, configSnapshotWebSelect=configSnapshotWebSelect, configSnapshotLbdSelect=configSnapshotLbdSelect, configSnapshotIPv6Select=configSnapshotIPv6Select, configSnapshotCapabilitySelect=configSnapshotCapabilitySelect, configSnapshotSystemServiceSelect=configSnapshotSystemServiceSelect, configSnapshotEOAMSelect=configSnapshotEOAMSelect, configSnapshotDhcpSnoopingSelect=configSnapshotDhcpSnoopingSelect, configSnapshotChassisId=configSnapshotChassisId, configSnapshotStackSelect=configSnapshotStackSelect, configSnapshotSNMPSelect=configSnapshotSNMPSelect)
