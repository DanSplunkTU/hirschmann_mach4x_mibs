#
# PySNMP MIB module PRVT-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-ISIS-MIB
# Produced by pysmi-1.1.3 at Sat Nov 20 22:41:11 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength")
routingProtocols, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "routingProtocols")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, iso, NotificationType, Integer32, Gauge32, IpAddress, ObjectIdentity, Unsigned32, ModuleIdentity, Bits, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "iso", "NotificationType", "Integer32", "Gauge32", "IpAddress", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Bits", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
prvtIsisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4))
prvtIsisMIB.setRevisions(('2010-02-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtIsisMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtIsisMIB.setLastUpdated('201002120000Z')
if mibBuilder.loadTexts: prvtIsisMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtIsisMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtIsisMIB.setDescription('The MIB module for management of the IS-IS protocol.')
class PrvtIsisInetAddressType(TextualConvention, Integer32):
    description = 'A value that represents a type of Internet address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("ipv4z", 3), ("ipv6z", 4), ("dns", 5))

class PrvtIsisInetAddress(TextualConvention, OctetString):
    description = 'An IPv4 IPv6 address depending upon the value of a\n         matching InetAddressType object.\n         An IPv4 address consiats of 4 octets in network-byte order.\n         An IPv6 address consiats of 16 octets in network-byte order'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
class PrvtIsisIPv4Address(TextualConvention, OctetString):
    description = 'An IPv4 address consisting of 4 octets in network-byte order.\n         A length of zero octets represents no IP address has been\n         assigned.'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )
class PrvtIsisIPv6Address(TextualConvention, OctetString):
    description = 'An IPv4 address consisting of 16 octets in network-byte order.\n         A length of zero octets represents no IP address has been\n         assigned.'
    status = 'current'
    displayHint = '2x:2x:2x:2x:2x:2x:2x:2x'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
class PrvtIsisHostName(TextualConvention, OctetString):
    description = 'A valid host name.'
    status = 'current'
    displayHint = '255t'

class PrvtIsisAuthUserDataString(TextualConvention, OctetString):
    description = 'Authentication user data.'
    status = 'current'
    displayHint = '1x:'

class PrvtIsisOSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, SNPA, or Network\n         Entity Title'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 20)

class PrvtIsisSystemID(TextualConvention, OctetString):
    description = 'A ID for an Intermediate System. This should\n         be unique within a network, and is included\n         in all PDUs originated by an Intermediate System.\n         The protocol does not place any meanings upon\n         the bits, other than using ordering to break\n         ties in electing a Designated IS on a LAN.'
    status = 'current'
    displayHint = '1x:'

class PrvtIsisLinkStatePDUID(TextualConvention, OctetString):
    description = 'A Link State PDU Identifier.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PrvtIsisAdminState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class PrvtIsisLSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for maximum LSP size.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 16000)

class PrvtIsisLevelState(TextualConvention, Integer32):
    description = 'States of the IS-IS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3), ("overloaded", 4))

class PrvtIsisDefaultMetric(TextualConvention, Integer32):
    description = "Integer sub-range for default metric for single hop.\n         ISO 10589 provides for 4 types of metric. Only the\n         'default' metric is used in practice."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class PrvtIsisWideMetric(TextualConvention, Unsigned32):
    description = 'Wide Metric for IS Neighbors. ISO 10589 provides a\n         6 bit metric. Traffic Engineering extensions provide\n         24 bit metrics.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class PrvtIsisFullMetric(TextualConvention, Unsigned32):
    description = 'Full Metric for IP Routes. Traffic Engineering extensions\n         provide 32 bit metrics.'
    status = 'current'
    displayHint = 'd'

class PrvtIsisMetricType(TextualConvention, Integer32):
    description = 'Is this an Internal or External Metric?'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class PrvtIsisMetricStyle(TextualConvention, Integer32):
    description = 'Do we use 1195 style Metrics or wide metrics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("narrow", 1), ("wide", 2), ("both", 3))

class PrvtIsisISLevel(TextualConvention, Integer32):
    description = 'Identifies a level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("area", 1), ("domain", 2))

class PrvtIsisCircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    displayHint = '1x:'

class PrvtIsisISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for IS-IS priority.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class PrvtIsisUnsigned16TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 16 Bits. Note that\n         the ASN.1 BER encoding may still require 24 Bits for\n         some values.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PrvtIsisUnsigned16NoZeroTC(TextualConvention, Unsigned32):
    description = 'Same as Unsigned16TC, except that 0 is not permitted.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class PrvtIsisMaxAgeTC(TextualConvention, Unsigned32):
    description = 'TC for prvtIsisSysMaxAge.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(350, 65535)

class PrvtIsisReceiveLSPBufferSizeTC(TextualConvention, Unsigned32):
    description = 'TC for prvtIsisSysReceiveLSPBufferSize'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1492, 16000)

class PrvtIsisUnsigned8TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 8 Bits. Note that\n         the ASN.1 BER encoding may still require 16 Bits for\n         some values.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrvtIsisOperStatus(TextualConvention, Integer32):
    description = 'The current operational state of an IS-IS entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operStatusUp", 1), ("operStatusDown", 2), ("operStatusGoingUp", 3), ("operStatusGoingDown", 4), ("operStatusActFailed", 5))

class PrvtIsisSysRestartType(TextualConvention, Integer32):
    description = 'The type of restart procedures to follow\n         when IS-IS activates.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("start", 1), ("restart", 2))

prvtIsisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1))
prvtIsisSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1))
prvtIsisSysTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1), )
if mibBuilder.loadTexts: prvtIsisSysTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysTable.setDescription('The set of instances of the Integrated IS-IS\n         protocol existing on the system.')
prvtIsisSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"))
if mibBuilder.loadTexts: prvtIsisSysEntry.setReference('{ISIS.poi cLNSISISBasic-P (1)}')
if mibBuilder.loadTexts: prvtIsisSysEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysEntry.setDescription('Each row defines information specific to a single\n         instance of the IS-IS protocol existing on the system.')
prvtIsisSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: prvtIsisSysInstance.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysInstance.setDescription('The unique identifier of the Integrated IS-IS\n         instance to which this row corresponds.')
prvtIsisSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysExistState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysExistState.setDescription("The existence state (RowStatus) of the IS-IS router.\n         Setting this to state 'destroy' forces the router to\n         forget all the current configuration. Setting the\n         state to 'notInService' stops protocol processing, but\n         retains the configuration.")
prvtIsisSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("one", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysVersion.setReference('{ISIS.aoi version (1)}')
if mibBuilder.loadTexts: prvtIsisSysVersion.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysVersion.setDescription('The version number of the IS-IS protocol that\n         is implemented.')
prvtIsisSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1L2IS", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysType.setReference('{ISIS.aoi iSType (2)}')
if mibBuilder.loadTexts: prvtIsisSysType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysType.setDescription('At which levels is the Intermediate System\n         running? This object follows the\n         ReplaceOnlyWhileDisabled behavior.')
prvtIsisSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 5), PrvtIsisSystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysID.setReference('{ISIS.aoi systemId (119)}')
if mibBuilder.loadTexts: prvtIsisSysID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysID.setDescription('The ID for this instance of the Integrated IS-IS\n         protocol. This value is appended to each of the\n         area addresses to form the Network Entity Titles.\n         This value is a 6 byte MAC address.\n         \n         This object follows the ReplaceOnlyWhileDisabled\n         behavior.')
prvtIsisSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxPathSplits.setReference('{ISIS.aoi maximumPathSplits (3)}')
if mibBuilder.loadTexts: prvtIsisSysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value\n         which it is permitted to split between. This object\n         follows the ReplaceOnlyWhileDisabled behavior.')
prvtIsisSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65235))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxLSPGenInt.setReference('{ISIS.aoi maximumLSPGenerationInterval (6)}')
if mibBuilder.loadTexts: prvtIsisSysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs\n         by this instance of the protocol. This object follows\n         the ResettingTimer behavior. The value must be\n         greater than any value configured for\n         prvtIsisSysLevelxMinLSPGenInt, and should be at least 300\n         seconds less than prvtIsisSysMaxAge.')
prvtIsisSysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 8), PrvtIsisUnsigned16NoZeroTC()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysPollESHelloRate.setReference('{ISIS.aoi pollESHelloRate (13)}')
if mibBuilder.loadTexts: prvtIsisSysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES\n         configuration timer in ISH PDUs when soliciting the ES\n         configuration.')
prvtIsisSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 9), PrvtIsisUnsigned16NoZeroTC()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysWaitTime.setReference('{ISIS.aoi waitingTime (15)}')
if mibBuilder.loadTexts: prvtIsisSysWaitTime.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysWaitTime.setDescription("Number of seconds to delay in state 'waiting' before\n         entering the state 'on'. This object follows the ResettingTimer\n         behavior.")
prvtIsisSysShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysShutdown.setDescription("The administrative state of this instance of the\n         Integrated IS-IS protocol. Setting this object to the\n         value 'false' when its current value is 'true' enables operation\n         of this instance of the Integrated IS-IS protocol.")
prvtIsisSysL2toL1Leaking = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysL2toL1Leaking.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysL2toL1Leaking.setDescription('If true, allow the router to leak L2 routes into L1.')
prvtIsisSysMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 12), PrvtIsisMaxAgeTC()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxAge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxAge.setDescription('Value to place in RemainingLifeTime field of\n         the LSPs we generate.\n         This should be at least 300 seconds greater than\n         prvtIsisSysMaxLSPGenInt.')
prvtIsisSysReceiveLSPBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 13), PrvtIsisReceiveLSPBufferSizeTC()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysReceiveLSPBufferSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysReceiveLSPBufferSize.setDescription('Size of the largest buffer we are designed or\n         configured to store. This should be at least\n         as big as the maximum prvtIsisSysLevelxOrigLSPBuffSize\n         supported by the system.\n         \n         If resources allow, we will store and flood LSPs\n         larger than prvtIsisSysReceiveLSPBufferSize, as this\n         can help avoid problems in networks with different\n         values for prvtIsisSysLevelxOrigLSPBuffSize.')
prvtIsisSysOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 14), PrvtIsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysOperStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysOperStatus.setDescription('The current operational status of this instance of the\n         Protocol Manager component of IS-IS.\n         \n         Note that IS-IS can only activate if there is at least\n         one active entry in the prvtIsisManAreaAddrTable.')
prvtIsisSysAllowAutoI3Config = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysAllowAutoI3Config.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysAllowAutoI3Config.setDescription("If 'true' then add IP addresses received from the I3 stub\n         to the prvtIsisCircIPAddrTable with admin state 'on'. If\n         'false' then add them with admin state 'off'. This field\n         follows the ReplaceOnlyWhileDisabled behavior.")
prvtIsisSysCalcMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcMaxDelay.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcMaxDelay.setDescription('The maximum delay before the Routing Table is\n         recalculated following a change to the Link State\n         Database. (Recalculation is delayed to reduce the\n         frequency of recalculations of the Routing Table).\n         \n         This parameter has units of milliseconds. A value of\n         0 indicates that a routing calculation will\n         immediately follow an update to the database.')
prvtIsisSysCalcThrshUpdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcThrshUpdStart.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcThrshUpdStart.setDescription('This parameter can be used to override the routing\n         calculation delay indicated by the prvtIsisSysCalcMaxDelay\n         parameter when the number of updates to the Link State\n         Database reaches a threshold value.\n         \n         This parameter specifies the threshold number of updates\n         that can be made to the Link State Database such that any\n         subsequent update to the database causes a full routing\n         calculation to start immediately.\n         \n         - 0 indicates that a routing calculation will immediately\n         follow an update to the database.\n         \n         - 0xFFFFFFFF indicates that this threshold is infinite, and\n         hence the timing of a routing calculation is determined\n         solely by the configured calculation delay.')
prvtIsisSysCalcThrshUpdRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcThrshUpdRestart.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcThrshUpdRestart.setDescription('This parameter can be used to interrupt a full routing\n         calculation when the number of pending updates to the Link\n         State Database has reached a threshold value.\n         \n         This parameter specifies the threshold number of updates\n         that can be made to the Link State Database such that any\n         subsequent update to the database causes the current\n         routing calculation to be interrupted, and a new\n         calculation to start using an up to date Link State\n         Database.\n         \n         - 0 indicates that an update to the Link State Database\n         will cause any current routing calculation to be\n         interrupted and a new one to start.\n         \n         - 0xFFFFFFFF indicates that this threshold is infinite, and\n         hence no number of pending updates to the database will\n         cause a routing calculation to be interrupted.')
prvtIsisSysCalcThrshRestartLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcThrshRestartLimit.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcThrshRestartLimit.setDescription('This parameter limits the number of consecutive times a\n         routing calculation can be interrupted by new updates.\n         This guarantees that the routing calculation will actually\n         complete.\n         \n         - 1 indicates that once a calculation has been interrupted\n         once, it will not be interrupted again.\n         \n         - 0xFFFFFFFF indicates that the calculation can always be\n         interrupted.')
prvtIsisSysCalcPauseFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcPauseFreq.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcPauseFreq.setDescription('This value determines how regularly a Routing Calculation\n         is paused. It is measured in points.  The points scale\n         roughly maps to a time scale, so that the larger this value\n         is, the longer the Routing Calculation runs before pausing.\n         \n         - 0 indicates that the routing calculation is paused after\n         every calculation step.\n         \n         - 0xFFFFFFFF indicates that the Routing Calculation is\n         never paused.')
prvtIsisSysCheckChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 21), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCheckChecksums.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCheckChecksums.setDescription('This value determines how often the checksums of LSPs in\n         the Link State Database are checked. If 0, no checksums\n         in the database are checked.')
prvtIsisSysZeroAgeLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 22), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysZeroAgeLifetime.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysZeroAgeLifetime.setDescription('This is the minimum amount of time in seconds for which the\n         header of an expired LSP shall be retained after it has\n         been flooded with zero Remaining Lifetime. All that is\n         required is that the header be retained until the zero\n         Remaining Lifetime LSP has been safely propagated to all\n         the neighbors.')
prvtIsisSysNumUpdPending = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysNumUpdPending.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysNumUpdPending.setDescription('The number of updates that are pending addition to the Link\n         State Database.')
prvtIsisSysNumUpdMerged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysNumUpdMerged.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysNumUpdMerged.setDescription('The number of updates that have been merged into the Link\n         State Database since the last routing calculation.')
prvtIsisSysNumCksumsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysNumCksumsPending.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysNumCksumsPending.setDescription('The number of LSPs in the Link State Database which are now\n         due to have their checksum checked.')
prvtIsisSysTEMetricPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysTEMetricPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysTEMetricPcntge.setDescription('The Traffic Engineering metric is updated in real-time by\n         the I3 Stub. In order to increase performance and reduce\n         network traffic, this parameter determines the minimal\n         percentage change of the TE metric that causes a new LSP\n         to be originated.')
prvtIsisSysMaxBwidthPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxBwidthPcntge.setDescription('The maximum bandwidth on an interface is updated in\n         real-time by the I3 Stub. In order to increase performance\n         and reduce network traffic, this parameter determines the\n         minimal percentage change of maximum bandwidth that causes\n         a new LSP to be originated.')
prvtIsisSysMaxResBwidthPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxResBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxResBwidthPcntge.setDescription('The maximum reservable bandwidth on an interface is updated\n         in real-time by the I3 Stub. In order to increase\n         performance and reduce network traffic, this parameter\n         determines the minimal percentage change of maximum\n         reservable bandwidth that causes a new LSP to be\n         originated.')
prvtIsisSysUnresBwidthPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysUnresBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysUnresBwidthPcntge.setDescription('The unreserved bandwidth on an interface is updated in\n         real-time by the I3 Stub. In order to increase performance\n         and reduce network traffic, this parameter determines the\n         minimal percentage change of unreserved bandwidth that\n         causes a new LSP to be originated.')
prvtIsisSysMaxLSPBwidthPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxLSPBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxLSPBwidthPcntge.setDescription('The maximum LSP bandwidth for the various switching\n         descriptors on an interface is updated in real-time by the\n         I3 Stub. In order to increase performance and reduce\n         network traffic, this parameter determines the minimal\n         percentage change of maximum LSP bandwidth that causes a\n         new LSP to be originated.')
prvtIsisSysMinLSPBwidthPcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMinLSPBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMinLSPBwidthPcntge.setDescription('The minimum LSP bandwidth for the various switching\n         descriptors on an interface is updated in real-time by the\n         I3 Stub. In order to increase performance and reduce\n         network traffic, this parameter determines the minimal\n         percentage change of minmimum LSP bandwidth that causes a\n         new LSP to be originated.')
prvtIsisSysMTUSizePcntge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMTUSizePcntge.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMTUSizePcntge.setDescription('The Maximum Transmission Unit size for the various\n         switching descriptors on an interface is updated in\n         real-time by the I3 Stub. In order to increase performance\n         and reduce network traffic, this parameter determines the\n         minimal percentage change of the Maximum Transmission Unit\n         that causes a new LSP to be originated.')
prvtIsisSysTERouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 33), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysTERouterID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysTERouterID.setDescription("The Local IPv4 TE Router ID. This is a single stable IPv4\n         address that can always be referenced in a path that will\n         be reachable from multiple hops away, regardless of the\n         state of the node's interfaces.\n         \n         This field is ignored if prvtIsisSysLevelxTEEnabled is 'false'.")
prvtIsisSysIPv6TERouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 34), PrvtIsisIPv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysIPv6TERouterID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysIPv6TERouterID.setDescription("The Local IPv6 TE Router ID. This is a single stable IPv6\n         global address that can always be referenced in a path that\n         will be reachable from multiple hops away, regardless of\n         the state of the node's interfaces.\n         \n         This field is ignored if prvtIsisSysLevelxIPv6TEEnabled is\n         'false'.")
prvtIsisSysMaxExternalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 35), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxExternalRoutes.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxExternalRoutes.setDescription('The maximum number of static routes and routes\n         redistributed from other protocols that will be accepted.\n         \n         The action that will be taken when the maximum is\n         exceeded is controlled by prvtIsisSysMaxExternalRoutesAct.\n         \n         0xFFFFFFFF is a special value indicating that the threshold\n         is infinite.')
prvtIsisSysMaxExternalRoutesAct = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("suppressExternal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxExternalRoutesAct.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxExternalRoutesAct.setDescription("The action that will be take whenn the number of\n         external routes exceeds prvtIsisSysMaxExternalRoutes.\n         \n         If set to 'log', IS-IS will alert the administrator by\n         logging that the limit has been exceeded.\n         \n         If set to 'suppressExternal', IS-IS will remove all\n         external routes from the local LSP (at all active levels)\n         in addition to logging the problem.\n         \n         In both cases, the administrator is responsible for\n         correcting the configuration to reduce the number of\n         redistributed external routes.\n         \n         In the 'suppressExternal' case, the system\n         is responsible for resynchronizing the set of routes with\n         IS-IS.")
prvtIsisSysLspFullSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLspFullSuppress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLspFullSuppress.setDescription("The set of routes (if any) that will be removed from the\n         local LSP when the local LSP becomes full at\n         either level.\n         \n         When set to 'external', all static routes and routes\n         redistributed from other protocols will be removed from the\n         local LSP (at all active levels) when the local LSP is\n         full.\n         \n         If set to 'none', IS-IS will be unable to accept any\n         additional configuration that may increase the size of the\n         local LSP.\n         \n         The system administrator should modify the system\n         configuration to reduce the local LSP size - for example,\n         by reducing the number of addresses redistributed from\n         other routing protocols, or by deleting circuit\n         configuration.\n         \n         Once this has been done, if prvtIsisSysLspFullSuppress is set\n         to 'external', the system is responsible\n         for resynchronizing the set of routes with ISIS.")
prvtIsisSysLspFullSetDBOL = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 38), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLspFullSetDBOL.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLspFullSetDBOL.setDescription("If set to 'true', the database overload flag will be set\n         in the local LSP (at all active levels) when the local\n         LSP becomes full (at either level).\n         \n         The administrator can clear the database overload flag for\n         a level by setting prvtIsisSysLevelxSetOverload to 'false' for\n         that level.")
prvtIsisSysRestartHelpPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 39), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysRestartHelpPeer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysRestartHelpPeer.setDescription('Indicates if the procedures defined in the IS-IS restart\n         RFC (3847) for helping a peer to restart is implemented.\n         \n         Note that this object has no effect on the local restart\n         behavior, and so may be set independently of\n         prvtIsisSysRestartActivationType and\n         prvtIsisSysRestartAutoResetType.')
prvtIsisSysRestartActivationType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 40), PrvtIsisSysRestartType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysRestartActivationType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysRestartActivationType.setDescription("This object is only used when IS-IS is manually activated\n         or deactivated (in other words, enters or leaves the state\n         with row status 'active' and admin status 'on'), and\n         indicates which restart procedures (if any) are followed.\n         \n         During the activation period, IS-IS will use the value\n         that was configured at the start of activation. The value\n         may be changed at any time, but the new value will only\n         take effect the next time that manual activation takes\n         place.\n         \n         During deactivation, IS-IS will purge the local LSP from\n         remote nodes if this object is set to 'none' or 'start'.\n         Setting the object to 'restart' before deactivation will\n         prevent the local LSP from being purged.\n         \n         A planned restart may be initiated by setting\n         prvtIsisSysShutdown to 'true' and later to 'false'. Graceful\n         restart procedures will only function correctly if the\n         local LSP has not been purged, and so to initiate a planned\n         restart, prvtIsisSysRestartActivationType should be set to\n         'restart' before deactivation.")
prvtIsisSysRestartAutoResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 41), PrvtIsisSysRestartType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysRestartAutoResetType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysRestartAutoResetType.setDescription('There are cases where the IS-IS protocol requires the local\n         node to automatically deactivate and later reactivate.\n         This object indicates which restart procedures (if any) are\n         followed during such an automatic reset.\n         \n         During the activation period, IS-IS will use the value\n         that was configured at the start of activation. The value\n         may be changed at any time, but the new value will only\n         take effect the next time that automatic re-activation\n         takes place.')
prvtIsisSysRestartAdjacencyWait = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysRestartAdjacencyWait.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysRestartAdjacencyWait.setDescription("This object is only used when IS-IS activates with\n         the activation type (prvtIsisSysRestartActivationType or\n         prvtIsisSysRestartAutoResetType) set to 'start' or 'restart'.\n         \n         It defines how long IS-IS will wait to establish\n         adjacencies before completing the start/restart.\n         \n         This object follows the ResettingTimer behavior.")
prvtIsisSysMaxRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysMaxRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysMaxRecoveryTime.setDescription("This object is only used when IS-IS activates with\n         the activation type (prvtIsisSysRestartActivationType or\n         prvtIsisSysRestartAutoResetType) set to 'restart'.\n         \n         It defines the maximum time that IS-IS will take before\n         completing restart procedures.\n         \n         The value specified puts an upper bound on the duration of\n         the T3 timer described in the IS-IS restart RFC (3847).\n         The actual duration of the timer is the minimum of the value\n         specified and the minimum remaining holding time received\n         on an adjacency.\n         \n         This object follows the ResettingTimer behavior.")
prvtIsisSysClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 44), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysClearStats.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysClearStats.setDescription("Set to 'true' to clear all system statistics, including the\n         prvtIsisSystemCounter and prvtIsisPacketCounter tables.\n         \n         Note that prvtIsisSysStatsLSPCount is not reset by this object.\n         \n         Reading the value of this field has no meaning.")
prvtIsisSysSetAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("attachNoOverlapOrRedist", 1), ("attachNoOverlapOnly", 2), ("attachSet", 3), ("attachClear", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysSetAttached.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysSetAttached.setDescription("If IS-IS is operating at both level 1 and level 2, this\n         field indicates how IS-IS should decide whether to set the\n         attached bit in its level 1 LSP.\n         \n         - 'attachNoOverlapOrRedist' indicates that the attached bit\n         should be set if either of the following are true.\n         - The IS can reach at least one other area (the IS is\n         adjacent with a L2 router whose area addresses do not\n         overlap with the area addresses we know about at L1).\n         - The IS is redistributing one or more external routes\n         into the AS.\n         \n         - 'attachNoOverlapOnly' indicates that the attached bit\n         should be set only if the IS can reach at least one other\n         area.\n         \n         - 'attachSet' indicates that the attached bit should always\n         be set.\n         \n         - 'attachClear' indicates that the attached bit should\n         never be set.")
prvtIsisSysProtSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 46), Bits().clone(namedValues=NamedValues(("reserved", 0), ("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysProtSupported.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysProtSupported.setDescription('This attribute contains the set of protocols supported by\n         this Intermediate System.')
prvtIsisSysRstrctLanAdjsToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysRstrctLanAdjsToSubnet.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysRstrctLanAdjsToSubnet.setDescription("This object only affects IPv4 broadcast circuits. If this\n         is set to 'true', IS-IS will only form adjacencies with\n         intermediate systems that are on the same subnet as the\n         local circuit. This object only has effect when the I3\n         Stub is used to determine subnet addresses and is ignored\n         otherwise.")
prvtIsisSysHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 48), PrvtIsisHostName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysHostName.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysHostName.setDescription('The string that this instance of IS-IS will use as the\n         local hostname.\n         \n         This is advertised to other Intermediate Systems in the\n         Dynamic Hostname TLV.')
prvtIsisSysCalcSoonAfterCircChng = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 49), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysCalcSoonAfterCircChng.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysCalcSoonAfterCircChng.setDescription("Set this object to 'true' to minimize the delay before\n         triggering a routing calculation that includes any\n         relevant circuit change. This means a change to the local\n         neighbors (including pseudonodes), or to the reachable\n         addresses received from the I3 stub.\n         \n         There are two aspects to minimizing the delay.\n         \n         - IS-IS overrides the setting of the\n         prvtIsisSysLevelMinLSPGenInt object when such a change\n         occurs, and usually regenerates the local LSP(s)\n         immediately. The only exception is when IS-IS is\n         performing restart procedures as defined in RFC3847.\n         This RFC specifies when IS-IS can update the local\n         LSP during a restart.\n         \n         - IS-IS overrides all of the objects that affect the\n         scheduling of routing calculations, with the exception\n         of the prvtIsisSysCalcThrshRestartLimit object. It ensures\n         that a routing calculation including the updated LSPs\n         takes place as soon as possible. It abandons an\n         existing route calculation if necessary, unless more\n         than prvtIsisSysCalcThrshRestartLimit successive\n         calculations would have been interrupted.")
prvtIsisSysSendNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 50), Bits().clone(namedValues=NamedValues(("circuitIndication", 0), ("databaseOverload", 1), ("manualAreaAddressDrops", 2), ("idLengthMismatch", 3), ("maxAreaAddressMismatch", 4), ("ownLspPurge", 5), ("areaMismatch", 6), ("rejectedAdjacency", 7), ("adjacencyChange", 8), ("lspErrorDetected", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysSendNotifications.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysSendNotifications.setDescription('This attribute contains the set of notifications generated\n         by this Intermediate System.\n         \n         The notifications that may be enabled are the prvtIsisCircIndTable,\n         prvtIsisDatabaseOverload, prvtIsisManualAddressDrops, prvtIsisIDLenMismatch,\n         prvtIsisMaxAreaAddressesMismatch, prvtIsisOwnLSPPurge, prvtIsisAreaMismatch,\n         prvtIsisRejectedAdjacency, prvtIsisAdjacencyChange and\n         prvtIsisLSPErrorDetected notifications.')
prvtIsisSysLvl1OrigLSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 60), PrvtIsisLSPBuffSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1OrigLSPBuffSize.setReference('{ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: prvtIsisSysLvl1OrigLSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1OrigLSPBuffSize.setDescription('The maximum size of LSPs and SNPs originated by\n         this Intermediate System at level 1.\n         This object follows the ReplaceOnlyWhileDisabled\n         behavior.')
prvtIsisSysLvl1MinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 61), PrvtIsisUnsigned16NoZeroTC()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1MinLSPGenInt.setReference('{ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: prvtIsisSysLvl1MinLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1MinLSPGenInt.setDescription('Minimum interval, in seconds, between successive\n         generation of LSPs with the same LSPID at level 1\n         by this instance of the protocol. This object\n         follows the ResettingTimer behavior.')
prvtIsisSysLvl1OverloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 62), PrvtIsisLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysLvl1OverloadState.setReference('{ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: prvtIsisSysLvl1OverloadState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1OverloadState.setDescription("The Overload state of the database at level 1.\n         The value 'overloaded' indicates a database that is\n         low on an essential resource, such as memory.\n         The administrator may indirectly force the state to\n         'waiting' when the router is initializing by setting\n         the object prvtIsisSysLvl1SetOverload.\n         If the state is waiting or overloaded, we\n         originate LSPs with the Overload bit set.")
prvtIsisSysLvl1SetOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 63), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1SetOverload.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1SetOverload.setDescription('Administratively set the overload bit for the level.\n         The overload bit will continue to be set if the\n         implementation runs out of memory, independent of\n         this variable.')
prvtIsisSysLvl1SetOverloadUntil = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 64), TimeTicks()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1SetOverloadUntil.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1SetOverloadUntil.setDescription('If set, the overload bit should be set, and cleared\n         after sysUpTime exceeds this value.')
prvtIsisSysLvl1MetricStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 65), PrvtIsisMetricStyle()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1MetricStyle.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1MetricStyle.setDescription('Which style of Metric do we generate in our LSPs\n         at level 1 ?')
prvtIsisSysLvl1SPFConsiders = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 66), PrvtIsisMetricStyle()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1SPFConsiders.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1SPFConsiders.setDescription('Which style of Metric do we consider in our\n         SPF computation at level 1 ?')
prvtIsisSysLvl1TEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 67), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1TEEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1TEEnabled.setDescription("Do we do Traffic Engineering for IPv4 at level 1 ?\n         \n         Currently only Traffic Engineering at L1 is supported.\n         \n         If Traffic Engineering is enabled, prvtIsisSysLvl1MetricStyle\n         must be set to 'wide' or 'both', and a value must be\n         configured for prvtIsisSysTERouterID.\n         \n         When Traffic Engineering is enabled for IPv4, this IS will\n         advertise the IPv4 TE router ID in the local LSP, and will\n         advertise traffic engineering parameters (where available)\n         for links configured to support IPv4.\n         \n         This object is ignored if the 'ipv4' bit is not set in the\n         value of prvtIsisSysProtSupported.")
prvtIsisSysLvl1IPv6TEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 68), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1IPv6TEEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1IPv6TEEnabled.setDescription("Do we do Traffic Engineering for IPv6 at level 1 ?\n         \n         Currently only Traffic Engineering at L1 is supported.\n         \n         If Traffic Engineering is enabled, a value must be\n         configured for prvtIsisSysIPv6TERouterID.\n         \n         When Traffic Engineering is enabled for IPv6, this IS will\n         advertise the IPv6 TE router ID in the local LSP, and will\n         advertise traffic engineering parameters (where available)\n         for links configured to support IPv6.\n         \n         This object is ignored if the 'ipv6' bit is not set in the\n         value of prvtIsisSysProtSupported.")
prvtIsisSysLvl1RestartT2Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1RestartT2Duration.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1RestartT2Duration.setDescription("This object is only used when IS-IS activates with\n         the activation type (prvtIsisSysRestartActivationType or\n         prvtIsisSysRestartAutoResetType) set to 'start' or 'restart'.\n         \n         It defines how long IS-IS will wait to complete database\n         synchronization at level 1 before completing the\n         start/restart.\n         \n         This object follows the ResettingTimer behavior.")
prvtIsisSysLvl1AuthUser = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 70), PrvtIsisAuthUserDataString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl1AuthUser.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl1AuthUser.setDescription('Authentication user data for area/domain level\n         authentication.\n         \n         This data is passed opaquely to the authentication\n         interface where it can be used to assist with\n         authentication decisions.')
prvtIsisSysLvl2OrigLSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 80), PrvtIsisLSPBuffSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2OrigLSPBuffSize.setReference('{ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: prvtIsisSysLvl2OrigLSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2OrigLSPBuffSize.setDescription('The maximum size of LSPs and SNPs originated by\n         this Intermediate System at level 2.\n         This object follows the ReplaceOnlyWhileDisabled\n         behavior.')
prvtIsisSysLvl2MinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 81), PrvtIsisUnsigned16NoZeroTC()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2MinLSPGenInt.setReference('{ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: prvtIsisSysLvl2MinLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2MinLSPGenInt.setDescription('Minimum interval, in seconds, between successive\n         generation of LSPs with the same LSPID at level 2\n         by this instance of the protocol. This object\n         follows the ResettingTimer behavior.')
prvtIsisSysLvl2OverloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 82), PrvtIsisLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisSysLvl2OverloadState.setReference('{ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: prvtIsisSysLvl2OverloadState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2OverloadState.setDescription("The Overload state of the database at level 2.\n         The value 'overloaded' indicates a database that is\n         low on an essential resource, such as memory.\n         The administrator may indirectly force the state to\n         'waiting' when the router is initializing by setting\n         the object prvtIsisSysLvl2SetOverload.\n         If the state is waiting or overloaded, we\n         originate LSPs with the Overload bit set.")
prvtIsisSysLvl2SetOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 83), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2SetOverload.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2SetOverload.setDescription('Administratively set the overload bit for the level.\n         The overload bit will continue to be set if the\n         implementation runs out of memory, independent of\n         this variable.')
prvtIsisSysLvl2SetOverloadUntil = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 84), TimeTicks()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2SetOverloadUntil.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2SetOverloadUntil.setDescription('If set, the overload bit should be set, and cleared\n         after sysUpTime exceeds this value.')
prvtIsisSysLvl2MetricStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 85), PrvtIsisMetricStyle()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2MetricStyle.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2MetricStyle.setDescription('Which style of Metric do we generate in our LSPs\n         at level 2 ?')
prvtIsisSysLvl2SPFConsiders = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 86), PrvtIsisMetricStyle()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2SPFConsiders.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2SPFConsiders.setDescription('Which style of Metric do we consider in our\n         SPF computation at level 2 ?')
prvtIsisSysLvl2TEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 87), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2TEEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2TEEnabled.setDescription("Do we do Traffic Engineering for IPv4 at level 2 ?\n         \n         Currently only Traffic Engineering at L1 is supported.\n         \n         If Traffic Engineering is enabled, prvtIsisSysLvl2MetricStyle\n         must be set to 'wide' or 'both', and a value must be\n         configured for prvtIsisSysTERouterID.\n         \n         When Traffic Engineering is enabled for IPv4, this IS will\n         advertise the IPv4 TE router ID in the local LSP, and will\n         advertise traffic engineering parameters (where available)\n         for links configured to support IPv4.\n         \n         This object is ignored if the 'ipv4' bit is not set in the\n         value of prvtIsisSysProtSupported.")
prvtIsisSysLvl2IPv6TEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 88), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2IPv6TEEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2IPv6TEEnabled.setDescription("Do we do Traffic Engineering for IPv6 at level 2 ?\n         \n         Currently only Traffic Engineering at L1 is supported.\n         \n         If Traffic Engineering is enabled, a value must be\n         configured for prvtIsisSysIPv6TERouterID.\n         \n         When Traffic Engineering is enabled for IPv6, this IS will\n         advertise the IPv6 TE router ID in the local LSP, and will\n         advertise traffic engineering parameters (where available)\n         for links configured to support IPv6.\n         \n         This object is ignored if the 'ipv6' bit is not set in the\n         value of prvtIsisSysProtSupported.")
prvtIsisSysLvl2RestartT2Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2RestartT2Duration.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2RestartT2Duration.setDescription("This object is only used when IS-IS activates with\n         the activation type (prvtIsisSysRestartActivationType or\n         prvtIsisSysRestartAutoResetType) set to 'start' or 'restart'.\n         \n         It defines how long IS-IS will wait to complete database\n         synchronization at level 2 before completing the\n         start/restart.\n         \n         This object follows the ResettingTimer behavior.")
prvtIsisSysLvl2AuthUser = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 1, 1, 90), PrvtIsisAuthUserDataString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSysLvl2AuthUser.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSysLvl2AuthUser.setDescription('Authentication user data for area/domain level\n         authentication.\n         \n         This data is passed opaquely to the authentication\n         interface where it can be used to assist with\n         authentication decisions.')
prvtIsisManAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 2), )
if mibBuilder.loadTexts: prvtIsisManAreaAddrTable.setReference('{ISIS.aoi manualAreaAddresses (10)}')
if mibBuilder.loadTexts: prvtIsisManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisManAreaAddrTable.setDescription('The set of manual area addresses configured on this\n         Intermediate System.')
prvtIsisManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisManAreaAddr"))
if mibBuilder.loadTexts: prvtIsisManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisManAreaAddrEntry.setDescription('Each entry contains one area address manually configured\n         on this system')
prvtIsisManAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 2, 1, 1), PrvtIsisOSINSAddress())
if mibBuilder.loadTexts: prvtIsisManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIsisManAreaAddr.setDescription('A manually configured area address for this system. This\n         object follows the index behavior.\n         The area address must have a non-zero length.')
prvtIsisManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisManAreaAddrExistState.setDescription('The existence state (RowStatus) of the prvtIsisManAreaAddrEntry')
prvtIsisAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 3), )
if mibBuilder.loadTexts: prvtIsisAreaAddrTable.setReference('{ISIS.aoi areaAddresses (18)}')
if mibBuilder.loadTexts: prvtIsisAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisAreaAddrTable.setDescription('The union of the sets of area addresses reported in all\n         Level 1 LSPs with segment number zero received by this\n         instance of the protocol from Intermediate Systems which\n         are reachable via Level 1 routing.')
prvtIsisAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisAreaAddr"))
if mibBuilder.loadTexts: prvtIsisAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisAreaAddrEntry.setDescription('Each entry contains one area address reported in a\n         Level 1 LSP received by this instance of the IS-IS\n         protocol.\n         \n         Received area addresses with a length of zero are\n         ignored.')
prvtIsisAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 3, 1, 1), PrvtIsisOSINSAddress())
if mibBuilder.loadTexts: prvtIsisAreaAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIsisAreaAddr.setDescription('An area address reported in a Level 1 LSP received by\n         this instance of the IS-IS protocol.\n         \n         Received area addresses with a length of zero are\n         ignored.')
prvtIsisAreaAddrInLSP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisAreaAddrInLSP.setStatus('current')
if mibBuilder.loadTexts: prvtIsisAreaAddrInLSP.setDescription("Following ISO10589 section 7.1.5, we advertise the three\n         numerically lowest level 1 area addresses in the level 2\n         LSP fragment zero.\n         \n         If 'true', then this area address is one of the three\n         numerically lowest area addresses, and if this router is\n         active at level 2, it is therefore one of those area\n         addresses advertised in the level 2 LSP fragment 0.")
prvtIsisSummAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5), )
if mibBuilder.loadTexts: prvtIsisSummAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddrTable.setDescription('The set of IP summary addresses to use in forming\n         summary TLVs originated by this Intermediate System.\n         \n         An administrator may use a summary address to combine\n         and modify IP Reachability announcements. If the\n         Intermediate system can reach any subset of the summary\n         address, the summary address will be announced instead,\n         at the configured metric.')
prvtIsisSummAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisSummAddress"))
if mibBuilder.loadTexts: prvtIsisSummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddrEntry.setDescription('Each entry contains one IP summary address.')
prvtIsisSummAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5))
if mibBuilder.loadTexts: prvtIsisSummAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddress.setDescription('The IP address and prefix length value for this summary address.')
prvtIsisSummAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddrExistState.setDescription('The existence state (RowStatus) of this summary address.')
prvtIsisSummAddrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5, 1, 5), PrvtIsisDefaultMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSummAddrMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddrMetric.setDescription('The metric value to announce this summary\n         address within LSPs generated by this system.')
prvtIsisSummAddrFullMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 5, 1, 6), PrvtIsisFullMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisSummAddrFullMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisSummAddrFullMetric.setDescription('The wide metric value to announce this summary\n         address within LSPs generated by this system.')
prvtIsisRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10), )
if mibBuilder.loadTexts: prvtIsisRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeTable.setDescription('The table represents the routing protocols redistributed into\n         the IS-IS routing domain.\n         \n         Creation of conceptual row in the table starts the redistribution of the\n         specified protocol, which would lead to the injection of routing information\n         from that protocol into IS-IS.\n         \n         Deletion of conceptual row would stop the redistribution of that protocol\n         into the IS-IS.')
prvtIsisRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisRedistributeProtocol"))
if mibBuilder.loadTexts: prvtIsisRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeEntry.setDescription('An entry into the prvtIsisRedistributeTable.')
prvtIsisRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 17))).clone(namedValues=NamedValues(("kernel", 2), ("connect", 3), ("static", 4), ("default", 17))))
if mibBuilder.loadTexts: prvtIsisRedistributeProtocol.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeProtocol.setDescription('The specific routes redistributed into IS-IS.')
prvtIsisRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeRowStatus.setDescription('Indicates the status of the row.\n         \n         Setting of this field to active enables the redistribution of the protocol.\n         Setting this field to destroy disables the redistribution of the protocol.')
prvtIsisRedistributeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisRedistributeLevel.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeLevel.setDescription('The IS-IS level at which this row applies to.')
prvtIsisRedistributeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisRedistributeMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisRedistributeMetric.setDescription('The IS-IS protocol metric to assign to the redistributed route.')
prvtIsisCirc = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3))
prvtIsisCircTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2), )
if mibBuilder.loadTexts: prvtIsisCircTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircTable.setDescription('The table of circuits used by each instance of\n         Integrated IS-IS on this system.')
prvtIsisCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisCircIfIndex"))
if mibBuilder.loadTexts: prvtIsisCircEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircEntry.setDescription('An prvtIsisCircEntry exists for each circuit used by\n         Integrated IS-IS on this system.')
prvtIsisCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: prvtIsisCircIfIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircIfIndex.setDescription('The value of ifIndex for the interface to which this\n         circuit corresponds. This object cannot be modified\n         after creation.\n         \n         This is also used as the 3-way circuit ID on\n         point-to-point circuits.')
prvtIsisCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircExistState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircExistState.setDescription("The existence state (RowStatus) of this circuit. Setting the\n         state to 'notInService' halts the generation and processing of\n         IS-IS protocol PDUs on this circuit. Setting the state\n         to destroy will also erase any configuration associated\n         with the circuit.\n         \n         Automatic circuits from the I3 stub appear as\n         passive circuits with existence state 'active'. These\n         circuits can be configured via the MIB like manual\n         circuits, except that they will survive a Destroy request,\n         with all fields reset to their automatic values.\n         \n         MIB configuration overrides automatic configuration.")
prvtIsisCircIfSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which\n         this circuit corresponds, such as a DLCI or VPI/VCI.\n         This object cannot be modified after creation.\n         \n         This field is currently ignored.')
prvtIsisCircShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircShutdown.setDescription('The administrative state of the circuit.')
prvtIsisCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircType.setReference('{ISIS.aoi type (33)}')
if mibBuilder.loadTexts: prvtIsisCircType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircType.setDescription("The type of the circuit. This object follows the\n         ReplaceOnlyWhileDisabled behavior. The type specified\n         must be compatible with the type of the interface defined\n         by the value of prvtIsisCircIfIndex.\n         \n         Only 'broadcast' and 'ptToPt' circuits are currently\n         supported. An automatic circuit can have type 'unknown'\n         until the correct MIB type is defined.")
prvtIsisCircExtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircExtDomain.setReference('{ISIS.aoi externalDomain (46)}')
if mibBuilder.loadTexts: prvtIsisCircExtDomain.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircExtDomain.setDescription('If true, suppress normal transmission of and\n         interpretation of Intra-domain IS-IS PDUs on this\n         circuit.')
prvtIsisCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLevel.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLevel.setDescription('Indicates which type of packets will be sent and\n         accepted on this circuit. The values used will be\n         modified by the settings of prvtIsisSysType. This\n         object follows the ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircPassiveCircuit.setDescription("Should we include this interface in LSPs, even if\n         it is not running the IS-IS Protocol?\n         \n         Circuits with prvtIsisCircExtDomain 'true'\n         will only be included in LSPs if this field is\n         also 'true', and the circuit is active.")
prvtIsisCircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircMeshGroupEnabled.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: prvtIsisCircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked?\n         Circuits in the same mesh group act as a virtual\n         multiaccess network. LSPs seen on one circuit in\n         a mesh group will not be flooded to another circuit\n         in the same mesh group.')
prvtIsisCircMeshGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircMeshGroup.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: prvtIsisCircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual\n         multiaccess network. LSPs seen on one circuit in\n         a mesh group will not be flooded to another circuit\n         in the same mesh group. If prvtIsisCircMeshGroupEnabled\n         is inactive or blocked, this value is ignored.')
prvtIsisCircSmallHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircSmallHellos.setDescription('Can we send unpadded hellos on LAN circuits? False\n         means LAN Hellos must be padded.\n         \n         Currently only unpadded hellos are supported.')
prvtIsisCircLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 13), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLastUpTime.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLastUpTime.setDescription('If the circuit is enabled, the value of sysUpTime\n         when prvtIsisCircShutdown most recently entered\n         the state on. If the circuit is not on,\n         the value of sysUpTime when the circuit last\n         entered state on, 0 if the circuit has never\n         been on.')
prvtIsisCirc3WayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCirc3WayEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCirc3WayEnabled.setDescription('Is this circuit enabled to run 3Way handshake?\n         \n         Currently the 3-way handshake on point to\n         point circuits is always run.')
prvtIsisCircExtendedCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircExtendedCircID.setDescription('The value to be used as the extended circuit ID in\n         3Way handshake. This value is only used if\n         prvtIsisCirc3WayEnabled is true, and must be unique across\n         all circuits on this IS.\n         \n         Currently the value for prvtIsisCircIfIndex is used as the extended\n         circuit ID.')
prvtIsisCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 16), PrvtIsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircOperState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircOperState.setDescription('The operational state of this circuit.')
prvtIsisCircSdEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircSdEntityIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircSdEntityIndex.setDescription('Identifies the SDC entity which will handle this circuit.\n         This object must be specified before the circuit can run the\n         IS-IS protocol. It cannot be changed after it has been\n         specified.')
prvtIsisCircDlBuffPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircDlBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircDlBuffPoolSize.setDescription('Capacity of the buffer pool used by the DL stub to send\n         data signals to the SDC. This object follows the\n         ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircSdPDUBuffPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircSdPDUBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircSdPDUBuffPoolSize.setDescription('Capacity of the buffer pool into which SDC transfers data\n         signals from the DL Stub. This object follows the\n         ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircSdIndBuffPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircSdIndBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircSdIndBuffPoolSize.setDescription('Capacity of the buffer pool used by SDC to send\n         indications to PM. This object follows the\n         ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircDataLinkBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircDataLinkBlockSize.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircDataLinkBlockSize.setDescription('Maximum size of PDU that can be sent or received over this\n         circuit (MTU). This object follows the\n         ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 22), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircPhysicalAddress.setDescription('The physical address of the network interface (for example\n         a MAC address on an Ethernet card). This value is only\n         relevant to a broadcast circuit and is ignored on a\n         point-to-point circuit. It needs to be specified in the\n         MIB if the information is not obtained from the I3 stub.\n         \n         This object follows the ReplaceOnlyWhileDisabled behavior.')
prvtIsisCircManualOrAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircManualOrAutomatic.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircManualOrAutomatic.setDescription("Has this circuit been configured by MIB (manual), I3\n         information (automatic) or both? MIB configuration\n         overrides I3 configuration.\n         \n         Automatic circuits cannot be destroyed. Destroying a\n         manual circuit removes all configuration for that circuit.\n         Destroying a circuit in state 'both'\n         destroys any MIB configuration and returns the circuit to\n         automatic state.")
prvtIsisCircT1TimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircT1TimerRunning.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircT1TimerRunning.setDescription("Is the T1 timer running on this circuit?\n         \n         This object is only valid on a circuit that is currently\n         running the IS-IS protocol (prvtIsisCircExtDomain is 'false'\n         and prvtIsisCircOperState is 'operStatusUp').\n         \n         When set to 'true', this indicates that the local node is\n         running starting or restarting node procedures.")
prvtIsisCircProtSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 25), Bits().clone(namedValues=NamedValues(("reserved", 0), ("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircProtSupported.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircProtSupported.setDescription("Which protocols are supported on this circuit?\n         \n         Note that the configured value is used in conjunction with\n         the value of prvtIsisSysProtSupported. In particular:\n         \n         - IPv4 is supported on the circuit if both\n         prvtIsisSysProtSupported and this object have the 'ipv4' bit\n         set.\n         \n         - IPv6 is supported on the circuit if both\n         prvtIsisSysProtSupported and this object have the 'ipv6' bit\n         set.")
prvtIsisCircPtToPtOverLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 26), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircPtToPtOverLAN.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircPtToPtOverLAN.setDescription("Allows a broadcast circuit to be configured to operate\n         point-to-point over LAN procedures.\n         \n         This is used in conjunction with the prvtIsisCircType object\n         as follows.\n         \n         - If prvtIsisCircType = 'ptToPt', the circuit is a standard\n         point-point circuit, and prvtIsisCircPtToPtOverLAN is\n         ignored.\n         \n         - If prvtIsisCircType = 'broadcast' and prvtIsisCircPtToPtOverLAN\n         is 'false', the circuit is used as a normal LAN.\n         \n         - If prvtIsisCircType = 'broadcast' and prvtIsisCircPtToPtOverLAN\n         is 'true', point-point over LAN procedures are\n         followed.\n         \n         Point-to-point over LAN procedures should only be\n         configured when there are just two Intermediate Systems\n         operating on the LAN.\n         \n         This object follows the ReplaceOnlyWhileDisabled behavior.")
prvtIsisCircLvl1Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 30), PrvtIsisDefaultMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1Metric.setReference('{ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1Metric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1Metric.setDescription('The metric value of this circuit for level 1.')
prvtIsisCircLvl1WideMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 31), PrvtIsisWideMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1WideMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1WideMetric.setDescription('The wide metric value of this circuit for level 1.')
prvtIsisCircLvl1ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 32), PrvtIsisISPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1ISPriority.setReference('{ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1ISPriority.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1ISPriority.setDescription('The priority for becoming the LAN-Designated\n         Intermediate System at level 1.')
prvtIsisCircLvl1IDOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl1IDOctet.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1IDOctet.setDescription('A one byte identifier for the circuit selected by the\n         Intermediate System.\n         \n         On point-to-point circuits, the value is used as the Local\n         Circuit ID in point-to-point IIH PDUs transmitted on this\n         circuit. In this case, values of prvtIsisCircLvl1IDOctet do\n         not need to be unique.\n         \n         For broadcast circuits, the value is used to generate the\n         LAN ID that will be used if this Intermediate System is\n         elected as the Designated IS on this circuit. The value\n         is required to differ on LANs where the Intermediate System\n         is the Designated Intermediate System.')
prvtIsisCircLvl1ID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 34), PrvtIsisCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl1ID.setReference('{ISIS.aoi ptPtCircuitID (51)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1ID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1ID.setDescription('On a point to point circuit with a fully initialized\n         adjacency to a peer IS, the value of this object is\n         the circuit ID negotiated during adjacency initialization.\n         On a point to point circuit without such an adjacency,\n         the value is the concatenation of the local system ID\n         and the one byte prvtIsisCircLvl1IDOctet for this circuit\n         i.e. the value that would be proposed for the circuit ID.\n         \n         On other circuit types, the value returned is the zero\n         length OCTET STRING.')
prvtIsisCircLvl1DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 35), PrvtIsisCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl1DesIS.setReference('{ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1DesIS.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1DesIS.setDescription('The ID of the LAN-Designated Intermediate System\n         on this circuit at level 1. If, for any reason,\n         this system is not partaking in the relevant\n         Designated Intermediate System election process,\n         then the value returned is the zero length OCTET STRING.')
prvtIsisCircLvl1HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloMultiplier.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer\n         and the result in seconds (rounded up) is used as the\n         holding time in transmitted hellos, to be used by\n         receivers of hello packets from this IS.')
prvtIsisCircLvl1HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloTimer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1HelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs\n         on multiaccess networks at level 1 for LANs.\n         The value at L1 is used as the period between\n         Hellos on L1L2 point to point circuits. Setting\n         this value at level 2 on an L1L2 point to point\n         circuit will result in an error of InconsistentValue.\n         \n         This object follows the ResettingTimer behavior.')
prvtIsisCircLvl1DRHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1DRHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1DRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1DRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on\n         multiaccess networks when this IS is the Designated\n         Intermediate System. This object follows the\n         ResettingTimer behavior.')
prvtIsisCircLvl1LSPThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 39), PrvtIsisUnsigned16NoZeroTC()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1LSPThrottle.setReference('{ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1LSPThrottle.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1LSPThrottle.setDescription('Minimal interval of time, in milliseconds, between\n         transmissions of LSPs on an interface at level 1.')
prvtIsisCircLvl1MinLSPRetransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1MinLSPRetransInt.setReference('{ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1MinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1MinLSPRetransInt.setDescription('Minimum interval, in seconds, between re-transmission of\n         an LSP at level 1. This object follows the\n         ResettingTimer behavior.\n         \n         Note that prvtIsisCircLvl1LSPThrottle controls\n         how fast we send back to back LSPs. This variable\n         controls how fast we re-send the same LSP.')
prvtIsisCircLvl1CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1CSNPInterval.setReference('{ISIS.aoi completeSNPInterval (8)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1CSNPInterval.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1CSNPInterval.setDescription('Interval of time, in seconds, between periodic\n         transmission of a complete set of CSNPs on\n         multiaccess networks if this router is the\n         designated router at level 1.\n         This object follows the ResettingTimer behavior.')
prvtIsisCircLvl1PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1PartSNPInterval.setReference('{ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: prvtIsisCircLvl1PartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1PartSNPInterval.setDescription('Minimum interval in seconds between sending Partial\n         Sequence Number PDUs at level 1. This object\n         follows the ResettingTimer behavior.')
prvtIsisCircLvl1StickyDIS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1StickyDIS.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1StickyDIS.setDescription('Boost to add to the priority of this router (up to the maximum\n         permitted value) when it becomes DIS at level 1 to make it\n         more likely to remain DIS.')
prvtIsisCircLvl1AuthUser = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 44), PrvtIsisAuthUserDataString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl1AuthUser.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1AuthUser.setDescription("Authentication user data for level 1's authentication.\n         This data is passed opaquely to the authentication\n         interface where it can be used to assist with\n         authentication decisions.")
prvtIsisCircLvl1IDHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 45), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl1IDHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1IDHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisCircLvl1ID object.\n         \n         This is the null string if the prvtIsisCircLvl1ID object\n         is null, or if no hostname is known.')
prvtIsisCircLvl1DesISHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 46), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl1DesISHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl1DesISHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisCircLvl1DesIS object.\n         \n         This is the null string if the prvtIsisCircLvl1DesIS object\n         is null, or if no hostname is known.')
prvtIsisCircLvl2Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 50), PrvtIsisDefaultMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2Metric.setReference('{ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2Metric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2Metric.setDescription('The metric value of this circuit for level 2.')
prvtIsisCircLvl2WideMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 51), PrvtIsisWideMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2WideMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2WideMetric.setDescription('The wide metric value of this circuit for level 2.')
prvtIsisCircLvl2ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 52), PrvtIsisISPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2ISPriority.setReference('{ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2ISPriority.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2ISPriority.setDescription('The priority for becoming the LAN-Designated\n         Intermediate System at level 2.')
prvtIsisCircLvl2IDOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl2IDOctet.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2IDOctet.setDescription('A one byte identifier for the circuit selected by the\n         Intermediate System.\n         \n         On point-to-point circuits, the value is used as the Local\n         Circuit ID in point-to-point IIH PDUs transmitted on this\n         circuit. In this case, values of prvtIsisCircLvl2IDOctet do\n         not need to be unique.\n         \n         For broadcast circuits, the value is used to generate the\n         LAN ID that will be used if this Intermediate System is\n         elected as the Designated IS on this circuit. The value\n         is required to differ on LANs where the Intermediate System\n         is the Designated Intermediate System.')
prvtIsisCircLvl2ID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 54), PrvtIsisCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl2ID.setReference('{ISIS.aoi ptPtCircuitID (51)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2ID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2ID.setDescription('On a point to point circuit with a fully initialized\n         adjacency to a peer IS, the value of this object is\n         the circuit ID negotiated during adjacency initialization.\n         On a point to point circuit without such an adjacency,\n         the value is the concatenation of the local system ID\n         and the one byte prvtIsisCircLvl2IDOctet for this circuit\n         i.e. the value that would be proposed for the circuit ID.\n         \n         On other circuit types, the value returned is the zero\n         length OCTET STRING.')
prvtIsisCircLvl2DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 55), PrvtIsisCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl2DesIS.setReference('{ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2DesIS.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2DesIS.setDescription('The ID of the LAN-Designated Intermediate System\n         on this circuit at level 2. If, for any reason,\n         this system is not partaking in the relevant\n         Designated Intermediate System election process,\n         then the value returned is the zero length OCTET STRING.')
prvtIsisCircLvl2HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloMultiplier.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer\n         and the result in seconds (rounded up) is used as the\n         holding time in transmitted hellos, to be used by\n         receivers of hello packets from this IS.')
prvtIsisCircLvl2HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloTimer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2HelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs\n         on multiaccess networks at level 2 for LANs.\n         The value at L1 is used as the period between\n         Hellos on L1L2 point to point circuits. Setting\n         this value at level 2 on an L1L2 point to point\n         circuit will result in an error of InconsistentValue.\n         \n         This object follows the ResettingTimer behavior.')
prvtIsisCircLvl2DRHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2DRHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2DRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2DRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on\n         multiaccess networks when this IS is the Designated\n         Intermediate System. This object follows the\n         ResettingTimer behavior.')
prvtIsisCircLvl2LSPThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 59), PrvtIsisUnsigned16NoZeroTC()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2LSPThrottle.setReference('{ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2LSPThrottle.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2LSPThrottle.setDescription('Minimal interval of time, in milliseconds, between\n         transmissions of LSPs on an interface at level 2.')
prvtIsisCircLvl2MinLSPRetransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2MinLSPRetransInt.setReference('{ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2MinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2MinLSPRetransInt.setDescription('Minimum interval, in seconds, between re-transmission of\n         an LSP at level 2. This object follows the\n         ResettingTimer behavior.\n         \n         Note that prvtIsisCircLvl2LSPThrottle controls\n         how fast we send back to back LSPs. This variable\n         controls how fast we re-send the same LSP.')
prvtIsisCircLvl2CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2CSNPInterval.setReference('{ISIS.aoi completeSNPInterval (8)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2CSNPInterval.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2CSNPInterval.setDescription('Interval of time, in seconds, between periodic\n         transmission of a complete set of CSNPs on\n         multiaccess networks if this router is the\n         designated router at level 2.\n         This object follows the ResettingTimer behavior.')
prvtIsisCircLvl2PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2PartSNPInterval.setReference('{ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: prvtIsisCircLvl2PartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2PartSNPInterval.setDescription('Minimum interval in seconds between sending Partial\n         Sequence Number PDUs at level 2. This object\n         follows the ResettingTimer behavior.')
prvtIsisCircLvl2StickyDIS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIsisCircLvl2StickyDIS.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2StickyDIS.setDescription('Boost to add to the priority of this router (up to the maximum\n         permitted value) when it becomes DIS at level 2 to make it\n         more likely to remain DIS.')
prvtIsisCircLvl2IDHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 65), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl2IDHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2IDHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisCircLvl2ID object.\n         \n         This is the null string if the prvtIsisCircLvl2ID object\n         is null, or if no hostname is known.')
prvtIsisCircLvl2DesISHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 3, 2, 1, 66), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisCircLvl2DesISHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisCircLvl2DesISHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisCircLvl2DesIS object.\n         \n         This is the null string if the prvtIsisCircLvl2DesIS object\n         is null, or if no hostname is known.')
prvtIsisISAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6))
prvtIsisISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1), )
if mibBuilder.loadTexts: prvtIsisISAdjTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
prvtIsisISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisCircIfIndex"), (0, "PRVT-ISIS-MIB", "prvtIsisISAdjIndex"))
if mibBuilder.loadTexts: prvtIsisISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjEntry.setDescription('Each entry corresponds to one adjacency to an\n         Intermediate System on this system.')
prvtIsisISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: prvtIsisISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIndex.setDescription('A unique value identifying the IS adjacency from all\n         other such adjacencies on this circuit. This value is\n         automatically assigned by the system when the adjacency\n         is created.')
prvtIsisISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjState.setReference('{ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: prvtIsisISAdjState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjState.setDescription('The state of the adjacency.')
prvtIsisISAdj3WayState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("up", 0), ("initializing", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdj3WayState.setReference('{ RFC 3373 }')
if mibBuilder.loadTexts: prvtIsisISAdj3WayState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdj3WayState.setDescription('The 3Way state of the adjacency. These are picked\n         to match the historical on-the-wire representation\n         of the 3Way state, and are not intended to match\n         prvtIsisISAdjState.')
prvtIsisISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 4), PrvtIsisOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighSNPAAddress.setReference('{ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
prvtIsisISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l1IntermediateSystem", 1), ("l2IntermediateSystem", 2), ("l1L2IntermediateSystem", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysType.setReference('{ISIS.aoi neighbourSystemType (80)}')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysType.setDescription('The type of the neighboring system.')
prvtIsisISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 6), PrvtIsisSystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysID.setReference('{ISIS.aoi neighbourSystemIds (83)}')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighSysID.setDescription('The system ID of the neighboring Intermediate\n         System.')
prvtIsisISAdjNbrExtendedCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNbrExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNbrExtendedCircID.setDescription('The 4-byte Extended Circuit ID learned from the\n         Neighbor during 3-way handshake, or 0.')
prvtIsisISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1and2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjUsage.setReference('{ISIS.aoi adjacencyUsage (82)}')
if mibBuilder.loadTexts: prvtIsisISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjUsage.setDescription('How is the adjacency used? On a point-to-point link,\n         this might be level1and2, but on a LAN, the usage will\n         be level1 on the adjacency between peers at L1,\n         and level2 for the adjacency between peers at L2.')
prvtIsisISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 9), PrvtIsisUnsigned16NoZeroTC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjHoldTimer.setReference('{ISIS.aoi holdingTimer (85)}')
if mibBuilder.loadTexts: prvtIsisISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjHoldTimer.setDescription('The holding time in seconds for this adjacency.\n         This value is based on received IIH PDUs and\n         the elapsed time since receipt.')
prvtIsisISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 10), PrvtIsisISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighPriority.setReference('{ISIS.aoi lANPriority (86)}')
if mibBuilder.loadTexts: prvtIsisISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for\n         becoming the Designated Intermediate System.')
prvtIsisISAdjLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 11), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjLastUpTime.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjLastUpTime.setDescription("If the prvtIsisISAdjState is in state 'up', the value\n         of sysUpTime when the adjacency most recently\n         entered the state 'up', or 0 if it has never\n         been in state 'up'.")
prvtIsisISAdjRestartCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjRestartCapable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjRestartCapable.setDescription("Does the neighbor support restart signalling?\n         \n         This object is set to 'true' if the peer includes the\n         restart TLV in IIH PDUs.")
prvtIsisISAdjPeerRestartState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("restartingNoHelp", 2), ("helpingRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjPeerRestartState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjPeerRestartState.setDescription("Is the peer currently restarting?\n         \n         Set to 'notRestarting' if the neighbor is not restarting\n         (is not including a restart TLV in the IIH, or is not setting the\n         RR bit).\n         \n         Set to 'restartingNoHelp' if the neighbor is restarting\n         (is including a restart TLV with the RR bit in IIH PDUs), but\n         the local node is not helping the restart.\n         \n         Set to 'helpingRestart' if the neighbor is restarting and the\n         local node is helping the restart.")
prvtIsisISAdjSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjSuppressed.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjSuppressed.setDescription("Has the peer requested that the adjacency be suppressed?\n         If set to 'true', the adjacency will not be added to the\n         local LSP.\n         \n         This object is set to 'true' if the peer sets the SA bit in\n         the restart TLV in IIH PDUs.")
prvtIsisISAdjNeighLanID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighLanID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighLanID.setDescription('On a broadcast circuit, the LAN ID reported by the\n         neighbor for the Designated Intermediate System on this\n         circuit at this level. For a non-broadcast circuit, or if,\n         for any reason, the neighbor is not partaking in the\n         relevant Designated Intermediate System election process,\n         then the value returned is the zero length OCTET STRING.')
prvtIsisISAdjNeighHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 16), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighHostname.setDescription("The hostname corresponding to prvtIsisISAdjNeighSysID.\n         This is the null string if prvtIsisSdEntMapHostnames is\n         'false' or if no hostname is known.")
prvtIsisISAdjNeighLanIDHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 1, 1, 17), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjNeighLanIDHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjNeighLanIDHostname.setDescription("The hostname corresponding to the system ID part of the\n         prvtIsisISAdjNeighLanID object.\n         \n         This is the null string if the prvtIsisISAdjNeighLanID object\n         is null, if prvtIsisSdEntMapHostnames is 'false', or if no\n         hostname is known.")
prvtIsisISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 2), )
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrTable.setReference('{ISIS.aoi areaAddressesOfNeighbour (84)}')
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of\n         neighboring Intermediate Systems as reported in received\n         IIH PDUs.')
prvtIsisISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 2, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisCircIfIndex"), (0, "PRVT-ISIS-MIB", "prvtIsisISAdjIndex"), (0, "PRVT-ISIS-MIB", "prvtIsisISAdjAreaAddrIndex"))
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a\n         neighboring Intermediate System in its IIH PDUs.')
prvtIsisISAdjAreaAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddrIndex.setDescription('An index for the areas associated with one neighbor.\n         This provides a simple way to walk the table.')
prvtIsisISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 2, 1, 2), PrvtIsisOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from\n         the neighbor.')
prvtIsisISAdjIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 3), )
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrTable.setDescription("This table contains the set of IP Addresses of\n         neighboring Intermediate Systems as reported in received\n         IIH PDUs.\n         \n         If the prvtIsisSysRstrctLanAdjsToSubnet object in prvtIsisSysTable\n         is set to 'true' then for an IPv4 broadcast circuit, only\n         IP addresses on the same subnet as the local circuit are\n         included in this table.")
prvtIsisISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 3, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisCircIfIndex"), (0, "PRVT-ISIS-MIB", "prvtIsisISAdjIndex"), (0, "PRVT-ISIS-MIB", "prvtIsisISAdjIPAddrIndex"))
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a\n         neighboring Intermediate System in its IIH PDUs.')
prvtIsisISAdjIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrIndex.setDescription('An index to this table which identifies the IP addresss\n         to which this entry belongs.')
prvtIsisISAdjIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 3, 1, 2), PrvtIsisInetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrType.setDescription('The type of one IP Address as reported in IIH PDUs\n         received from the neighbor.')
prvtIsisISAdjIPAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 6, 3, 1, 3), PrvtIsisInetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisISAdjIPAddrAddress.setDescription('One IP Address as reported in IIH PDUs received from the\n         neighbor.\n         \n         The type of this address is determined by the value of\n         the prvtIsisISAdjIPAddrType object.')
prvtIsisIPReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8))
prvtIsisIPRATable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1), )
if mibBuilder.loadTexts: prvtIsisIPRATable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRATable.setDescription('The table of IP Reachable Addresses to networks,\n         subnetworks or hosts, learned automatically.\n         \n         This table is read-only. Manual addition of entries\n         using this table is not supported.')
prvtIsisIPRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisIPRADestType"), (0, "PRVT-ISIS-MIB", "prvtIsisIPRADest"), (0, "PRVT-ISIS-MIB", "prvtIsisIPRADestPrefixLen"), (0, "PRVT-ISIS-MIB", "prvtIsisIPRANextHopIndex"))
if mibBuilder.loadTexts: prvtIsisIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network,\n         subnetwork or host.\n         \n         Each IP Reachable Address may have multiple entries in the\n         table, one for each equal cost path to the reachable address.')
prvtIsisIPRADestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 1), PrvtIsisInetAddressType())
if mibBuilder.loadTexts: prvtIsisIPRADestType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRADestType.setDescription('The type of this IP Reachable Address.')
prvtIsisIPRADest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 2), PrvtIsisInetAddress())
if mibBuilder.loadTexts: prvtIsisIPRADest.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRADest.setDescription('The destination of this IP Reachable Address. This is\n         either a network address, subnetwork address or host\n         address.\n         \n         The type of this address is determined by the value of\n         the prvtIsisIPRADestType object.')
prvtIsisIPRADestPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: prvtIsisIPRADestPrefixLen.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRADestPrefixLen.setDescription('The length of the IP Netmask for Reachability Address.')
prvtIsisIPRANextHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prvtIsisIPRANextHopIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRANextHopIndex.setDescription('Index of next hop. Used when there are multiple Equal\n         Cost Multipath alternatives for the same destination.')
prvtIsisIPRANextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 5), PrvtIsisInetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRANextHopType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRANextHopType.setDescription('The type of the IP next hop address.')
prvtIsisIPRANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 6), PrvtIsisInetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRANextHop.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRANextHop.setDescription('The IP next hop to this destination.\n         \n         The type of this address is determined by the value of\n         the prvtIsisIPRANextHopType object.')
prvtIsisIPRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRAType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAType.setDescription('The type of this IP Reachable Address. Those of type\n         manual are created by the network manager. Those of type\n         automatic are created through propagation of routing\n         information from another routing protocol.\n         \n         Currently only automatic entries in this table are supported.')
prvtIsisIPRAAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 9), PrvtIsisAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRAAdminState.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAAdminState.setDescription('The administrative state of the IP Reachable Address.')
prvtIsisIPRAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 10), PrvtIsisDefaultMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRAMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAMetric.setDescription('The metric value for reaching the specified\n         destination over this circuit.')
prvtIsisIPRAMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 11), PrvtIsisMetricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRAMetricType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAMetricType.setDescription('Indicates whether the metric is internal or\n         external.')
prvtIsisIPRAFullMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 12), PrvtIsisFullMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRAFullMetric.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRAFullMetric.setDescription('The wide metric value for reaching the specified\n         destination over this circuit.')
prvtIsisIPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 13), PrvtIsisOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in\n         order to reach a destination which matches this IP\n         Reachable Address.\n         This field is currently not supported.')
prvtIsisIPRASourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("static", 1), ("direct", 2), ("ospfv2", 3), ("ospfv3", 4), ("isis", 5), ("rip", 6), ("igrp", 7), ("eigrp", 8), ("bgp", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisIPRASourceType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisIPRASourceType.setDescription('The origin of this route.')
prvtIsisLSPDataBase = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9))
prvtIsisLSPSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1), )
if mibBuilder.loadTexts: prvtIsisLSPSummaryTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPSummaryTable.setDescription('The table of LSP Headers.')
prvtIsisLSPSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisLSPLevel"), (0, "PRVT-ISIS-MIB", "prvtIsisLSPID"))
if mibBuilder.loadTexts: prvtIsisLSPSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPSummaryEntry.setDescription('Each entry provides a summary describing an\n         LSP currently stored in the system.')
prvtIsisLSPLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 1), PrvtIsisISLevel())
if mibBuilder.loadTexts: prvtIsisLSPLevel.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPLevel.setDescription('At which level does this LSP appear?')
prvtIsisLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 2), PrvtIsisLinkStatePDUID())
if mibBuilder.loadTexts: prvtIsisLSPID.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPID.setDescription('The 8-byte LSP ID, consisting of the SystemID,\n         Circuit ID, and Fragment Number.')
prvtIsisLSPSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPSeq.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPSeq.setDescription('The sequence number for this LSP.')
prvtIsisLSPZeroLife = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPZeroLife.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPZeroLife.setDescription('Is this LSP being purged by this System?')
prvtIsisLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 5), PrvtIsisUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPChecksum.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPChecksum.setDescription('The 16 bit Fletcher Checksum for this LSP.')
prvtIsisLSPLifetimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 6), PrvtIsisUnsigned16TC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPLifetimeRemain.setDescription("The remaining lifetime in seconds for this LSP.\n         \n         For a current LSP (prvtIsisLSPZeroLife is 'false'), this\n         indicates the time remaining before the LSP will expire.\n         For an LSP being purged from the system (prvtIsisLSPZeroLife\n         is 'true'), the LSP remains in the database for\n         ZeroAgeLifetime, and this will indicate the time remaining\n         before final deletion of the LSP.")
prvtIsisLSPPDULength = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 7), PrvtIsisUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPPDULength.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPPDULength.setDescription('The length of this LSP.')
prvtIsisLSPAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 8), PrvtIsisUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPAttributes.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPAttributes.setDescription('Flags carried by the LSP.')
prvtIsisLSPIDHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 1, 1, 9), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPIDHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPIDHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisLSPID object.\n         \n         This is the null string if no hostname is known.')
prvtIsisLSPTLVTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2), )
if mibBuilder.loadTexts: prvtIsisLSPTLVTable.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVTable.setDescription('The table of LSPs in the database.')
prvtIsisLSPTLVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1), ).setIndexNames((0, "PRVT-ISIS-MIB", "prvtIsisSysInstance"), (0, "PRVT-ISIS-MIB", "prvtIsisLSPLevel"), (0, "PRVT-ISIS-MIB", "prvtIsisLSPID"), (0, "PRVT-ISIS-MIB", "prvtIsisLSPTLVIndex"))
if mibBuilder.loadTexts: prvtIsisLSPTLVEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVEntry.setDescription('Each entry describes a TLV within\n         an LSP currently stored in the\n         system.')
prvtIsisLSPTLVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtIsisLSPTLVIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVIndex.setDescription('The index of this TLV in the LSP. The first TLV has index 1\n         and the Nth TLV has an index of N.')
prvtIsisLSPTLVSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVSeq.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVSeq.setDescription('The sequence number for this LSP.')
prvtIsisLSPTLVChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 3), PrvtIsisUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVChecksum.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVChecksum.setDescription('The 16 bit Fletcher Checksum for this LSP.')
prvtIsisLSPTLVType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 4), PrvtIsisUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVType.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVType.setDescription('The type of this TLV.')
prvtIsisLSPTLVLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 5), PrvtIsisUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVLen.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVLen.setDescription('The length of this TLV.')
prvtIsisLSPTLVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVValue.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVValue.setDescription('The value of this TLV.')
prvtIsisLSPTLVHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 4, 1, 9, 2, 1, 7), PrvtIsisHostName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIsisLSPTLVHostname.setStatus('current')
if mibBuilder.loadTexts: prvtIsisLSPTLVHostname.setDescription('The hostname corresponding to the system ID part of the\n         prvtIsisLSPID object.\n         \n         This is the null string if no hostname is known.')
mibBuilder.exportSymbols("PRVT-ISIS-MIB", prvtIsisSysLvl2OrigLSPBuffSize=prvtIsisSysLvl2OrigLSPBuffSize, prvtIsisCircLevel=prvtIsisCircLevel, prvtIsisISAdjIPAddrType=prvtIsisISAdjIPAddrType, prvtIsisSysUnresBwidthPcntge=prvtIsisSysUnresBwidthPcntge, prvtIsisSysLvl2AuthUser=prvtIsisSysLvl2AuthUser, prvtIsisCircLvl2ID=prvtIsisCircLvl2ID, prvtIsisManAreaAddrTable=prvtIsisManAreaAddrTable, prvtIsisISAdjNbrExtendedCircID=prvtIsisISAdjNbrExtendedCircID, prvtIsisISAdjEntry=prvtIsisISAdjEntry, prvtIsisSysMaxLSPBwidthPcntge=prvtIsisSysMaxLSPBwidthPcntge, prvtIsisSysCalcSoonAfterCircChng=prvtIsisSysCalcSoonAfterCircChng, prvtIsisCircSdEntityIndex=prvtIsisCircSdEntityIndex, prvtIsisCircManualOrAutomatic=prvtIsisCircManualOrAutomatic, prvtIsisCircEntry=prvtIsisCircEntry, prvtIsisCircLvl2CSNPInterval=prvtIsisCircLvl2CSNPInterval, prvtIsisCircLvl2HelloTimer=prvtIsisCircLvl2HelloTimer, prvtIsisRedistributeEntry=prvtIsisRedistributeEntry, prvtIsisCircShutdown=prvtIsisCircShutdown, prvtIsisCircSdPDUBuffPoolSize=prvtIsisCircSdPDUBuffPoolSize, prvtIsisCircLvl2Metric=prvtIsisCircLvl2Metric, prvtIsisCircMeshGroupEnabled=prvtIsisCircMeshGroupEnabled, prvtIsisCircLvl1DRHelloTimer=prvtIsisCircLvl1DRHelloTimer, prvtIsisSysMaxPathSplits=prvtIsisSysMaxPathSplits, prvtIsisISAdjAreaAddrTable=prvtIsisISAdjAreaAddrTable, prvtIsisLSPTLVChecksum=prvtIsisLSPTLVChecksum, PrvtIsisLSPBuffSize=PrvtIsisLSPBuffSize, prvtIsisSysClearStats=prvtIsisSysClearStats, prvtIsisAreaAddr=prvtIsisAreaAddr, prvtIsisMIB=prvtIsisMIB, prvtIsisISAdjNeighSysID=prvtIsisISAdjNeighSysID, prvtIsisCircLvl2IDOctet=prvtIsisCircLvl2IDOctet, prvtIsisSysCalcThrshUpdRestart=prvtIsisSysCalcThrshUpdRestart, prvtIsisSysHostName=prvtIsisSysHostName, prvtIsisRedistributeTable=prvtIsisRedistributeTable, prvtIsisSysLvl1SetOverload=prvtIsisSysLvl1SetOverload, prvtIsisCircLvl1PartSNPInterval=prvtIsisCircLvl1PartSNPInterval, prvtIsisLSPLevel=prvtIsisLSPLevel, prvtIsisCircLvl2ISPriority=prvtIsisCircLvl2ISPriority, prvtIsisIPRAType=prvtIsisIPRAType, PrvtIsisOSINSAddress=PrvtIsisOSINSAddress, prvtIsisISAdjIPAddrTable=prvtIsisISAdjIPAddrTable, prvtIsisISAdjSuppressed=prvtIsisISAdjSuppressed, prvtIsisSysType=prvtIsisSysType, prvtIsisSysLvl2TEEnabled=prvtIsisSysLvl2TEEnabled, PrvtIsisOperStatus=PrvtIsisOperStatus, prvtIsisSysRestartAdjacencyWait=prvtIsisSysRestartAdjacencyWait, prvtIsisSysLvl2MinLSPGenInt=prvtIsisSysLvl2MinLSPGenInt, prvtIsisManAreaAddrEntry=prvtIsisManAreaAddrEntry, prvtIsisLSPID=prvtIsisLSPID, prvtIsisSysVersion=prvtIsisSysVersion, prvtIsisLSPTLVValue=prvtIsisLSPTLVValue, prvtIsisSysLvl2MetricStyle=prvtIsisSysLvl2MetricStyle, prvtIsisCircLvl2MinLSPRetransInt=prvtIsisCircLvl2MinLSPRetransInt, prvtIsisAreaAddrInLSP=prvtIsisAreaAddrInLSP, prvtIsisRedistributeLevel=prvtIsisRedistributeLevel, prvtIsisIPRAMetricType=prvtIsisIPRAMetricType, prvtIsisSummAddrFullMetric=prvtIsisSummAddrFullMetric, prvtIsisSysEntry=prvtIsisSysEntry, prvtIsisSysCalcPauseFreq=prvtIsisSysCalcPauseFreq, prvtIsisCirc=prvtIsisCirc, PrvtIsisCircuitID=PrvtIsisCircuitID, PrvtIsisFullMetric=PrvtIsisFullMetric, prvtIsisSysRestartActivationType=prvtIsisSysRestartActivationType, prvtIsisSysTable=prvtIsisSysTable, prvtIsisCircExtDomain=prvtIsisCircExtDomain, prvtIsisIPRAFullMetric=prvtIsisIPRAFullMetric, prvtIsisSysLvl2SPFConsiders=prvtIsisSysLvl2SPFConsiders, prvtIsisSysWaitTime=prvtIsisSysWaitTime, prvtIsisSysMaxRecoveryTime=prvtIsisSysMaxRecoveryTime, prvtIsisSysLvl2IPv6TEEnabled=prvtIsisSysLvl2IPv6TEEnabled, prvtIsisCircLastUpTime=prvtIsisCircLastUpTime, PrvtIsisInetAddress=PrvtIsisInetAddress, prvtIsisCircLvl2DesIS=prvtIsisCircLvl2DesIS, prvtIsisSysL2toL1Leaking=prvtIsisSysL2toL1Leaking, prvtIsisIPRAMetric=prvtIsisIPRAMetric, prvtIsisISAdjAreaAddrIndex=prvtIsisISAdjAreaAddrIndex, prvtIsisRedistributeMetric=prvtIsisRedistributeMetric, prvtIsisIPRASNPAAddress=prvtIsisIPRASNPAAddress, prvtIsisSysLspFullSetDBOL=prvtIsisSysLspFullSetDBOL, prvtIsisSysLvl1SPFConsiders=prvtIsisSysLvl1SPFConsiders, prvtIsisCircLvl2StickyDIS=prvtIsisCircLvl2StickyDIS, PrvtIsisIPv6Address=PrvtIsisIPv6Address, PrvtIsisMetricStyle=PrvtIsisMetricStyle, prvtIsisCircLvl1HelloTimer=prvtIsisCircLvl1HelloTimer, prvtIsisIPRASourceType=prvtIsisIPRASourceType, prvtIsisSysShutdown=prvtIsisSysShutdown, prvtIsisCircSdIndBuffPoolSize=prvtIsisCircSdIndBuffPoolSize, prvtIsisCirc3WayEnabled=prvtIsisCirc3WayEnabled, prvtIsisSysOperStatus=prvtIsisSysOperStatus, prvtIsisISAdjTable=prvtIsisISAdjTable, PrvtIsisMaxAgeTC=PrvtIsisMaxAgeTC, prvtIsisSysReceiveLSPBufferSize=prvtIsisSysReceiveLSPBufferSize, prvtIsisSysCheckChecksums=prvtIsisSysCheckChecksums, prvtIsisSysMTUSizePcntge=prvtIsisSysMTUSizePcntge, PrvtIsisLinkStatePDUID=PrvtIsisLinkStatePDUID, prvtIsisSysMaxExternalRoutesAct=prvtIsisSysMaxExternalRoutesAct, prvtIsisSummAddrEntry=prvtIsisSummAddrEntry, prvtIsisCircLvl1IDHostname=prvtIsisCircLvl1IDHostname, prvtIsisLSPTLVType=prvtIsisLSPTLVType, PrvtIsisMetricType=PrvtIsisMetricType, prvtIsisCircLvl1WideMetric=prvtIsisCircLvl1WideMetric, prvtIsisIPRATable=prvtIsisIPRATable, prvtIsisRedistributeRowStatus=prvtIsisRedistributeRowStatus, prvtIsisSummAddress=prvtIsisSummAddress, prvtIsisSysNumUpdPending=prvtIsisSysNumUpdPending, PrvtIsisLevelState=PrvtIsisLevelState, prvtIsisAreaAddrTable=prvtIsisAreaAddrTable, prvtIsisISAdjIPAddrIndex=prvtIsisISAdjIPAddrIndex, prvtIsisSysNumCksumsPending=prvtIsisSysNumCksumsPending, prvtIsisLSPPDULength=prvtIsisLSPPDULength, PrvtIsisHostName=PrvtIsisHostName, prvtIsisLSPDataBase=prvtIsisLSPDataBase, prvtIsisLSPSummaryEntry=prvtIsisLSPSummaryEntry, prvtIsisCircMeshGroup=prvtIsisCircMeshGroup, prvtIsisCircDlBuffPoolSize=prvtIsisCircDlBuffPoolSize, PrvtIsisUnsigned16TC=PrvtIsisUnsigned16TC, prvtIsisSysMinLSPBwidthPcntge=prvtIsisSysMinLSPBwidthPcntge, prvtIsisSysCalcThrshRestartLimit=prvtIsisSysCalcThrshRestartLimit, prvtIsisCircDataLinkBlockSize=prvtIsisCircDataLinkBlockSize, prvtIsisSysMaxLSPGenInt=prvtIsisSysMaxLSPGenInt, prvtIsisCircLvl1DesIS=prvtIsisCircLvl1DesIS, prvtIsisISAdj3WayState=prvtIsisISAdj3WayState, prvtIsisSysLvl1TEEnabled=prvtIsisSysLvl1TEEnabled, prvtIsisSysLvl1OverloadState=prvtIsisSysLvl1OverloadState, PrvtIsisAuthUserDataString=PrvtIsisAuthUserDataString, prvtIsisCircLvl1ISPriority=prvtIsisCircLvl1ISPriority, prvtIsisIPRANextHopType=prvtIsisIPRANextHopType, prvtIsisCircLvl1StickyDIS=prvtIsisCircLvl1StickyDIS, prvtIsisSysTERouterID=prvtIsisSysTERouterID, prvtIsisLSPTLVIndex=prvtIsisLSPTLVIndex, prvtIsisRedistributeProtocol=prvtIsisRedistributeProtocol, prvtIsisSysLvl1AuthUser=prvtIsisSysLvl1AuthUser, prvtIsisCircPhysicalAddress=prvtIsisCircPhysicalAddress, PrvtIsisSysRestartType=PrvtIsisSysRestartType, prvtIsisIPRADestPrefixLen=prvtIsisIPRADestPrefixLen, prvtIsisSummAddrMetric=prvtIsisSummAddrMetric, prvtIsisCircLvl1IDOctet=prvtIsisCircLvl1IDOctet, prvtIsisISAdjNeighPriority=prvtIsisISAdjNeighPriority, prvtIsisLSPTLVEntry=prvtIsisLSPTLVEntry, PrvtIsisSystemID=PrvtIsisSystemID, PrvtIsisWideMetric=PrvtIsisWideMetric, prvtIsisISAdjIndex=prvtIsisISAdjIndex, prvtIsisSysCalcMaxDelay=prvtIsisSysCalcMaxDelay, PrvtIsisReceiveLSPBufferSizeTC=PrvtIsisReceiveLSPBufferSizeTC, prvtIsisLSPAttributes=prvtIsisLSPAttributes, prvtIsisLSPTLVLen=prvtIsisLSPTLVLen, prvtIsisCircLvl2IDHostname=prvtIsisCircLvl2IDHostname, prvtIsisSystem=prvtIsisSystem, prvtIsisCircPassiveCircuit=prvtIsisCircPassiveCircuit, prvtIsisLSPSeq=prvtIsisLSPSeq, prvtIsisSysSendNotifications=prvtIsisSysSendNotifications, prvtIsisSysRestartHelpPeer=prvtIsisSysRestartHelpPeer, prvtIsisISAdjNeighLanID=prvtIsisISAdjNeighLanID, PrvtIsisUnsigned8TC=PrvtIsisUnsigned8TC, prvtIsisSysLvl2SetOverload=prvtIsisSysLvl2SetOverload, prvtIsisISAdj=prvtIsisISAdj, PrvtIsisISPriority=PrvtIsisISPriority, prvtIsisLSPTLVTable=prvtIsisLSPTLVTable, prvtIsisISAdjHoldTimer=prvtIsisISAdjHoldTimer, PYSNMP_MODULE_ID=prvtIsisMIB, prvtIsisIPRANextHopIndex=prvtIsisIPRANextHopIndex, prvtIsisIPRAAdminState=prvtIsisIPRAAdminState, prvtIsisSysRstrctLanAdjsToSubnet=prvtIsisSysRstrctLanAdjsToSubnet, prvtIsisSysLvl1RestartT2Duration=prvtIsisSysLvl1RestartT2Duration, prvtIsisManAreaAddrExistState=prvtIsisManAreaAddrExistState, prvtIsisIPReachAddr=prvtIsisIPReachAddr, PrvtIsisInetAddressType=PrvtIsisInetAddressType, prvtIsisSysAllowAutoI3Config=prvtIsisSysAllowAutoI3Config, PrvtIsisAdminState=PrvtIsisAdminState, PrvtIsisUnsigned16NoZeroTC=PrvtIsisUnsigned16NoZeroTC, prvtIsisSysMaxBwidthPcntge=prvtIsisSysMaxBwidthPcntge, prvtIsisISAdjLastUpTime=prvtIsisISAdjLastUpTime, prvtIsisSysLvl2OverloadState=prvtIsisSysLvl2OverloadState, prvtIsisSysID=prvtIsisSysID, prvtIsisCircOperState=prvtIsisCircOperState, prvtIsisCircLvl1Metric=prvtIsisCircLvl1Metric, prvtIsisCircLvl1AuthUser=prvtIsisCircLvl1AuthUser, prvtIsisSysMaxExternalRoutes=prvtIsisSysMaxExternalRoutes, prvtIsisCircProtSupported=prvtIsisCircProtSupported, prvtIsisSysMaxAge=prvtIsisSysMaxAge, prvtIsisSysLvl1MinLSPGenInt=prvtIsisSysLvl1MinLSPGenInt, prvtIsisCircExtendedCircID=prvtIsisCircExtendedCircID, prvtIsisIPRANextHop=prvtIsisIPRANextHop, prvtIsisSysLspFullSuppress=prvtIsisSysLspFullSuppress, prvtIsisCircTable=prvtIsisCircTable, prvtIsisSysProtSupported=prvtIsisSysProtSupported, prvtIsisSysInstance=prvtIsisSysInstance, prvtIsisCircPtToPtOverLAN=prvtIsisCircPtToPtOverLAN, prvtIsisISAdjNeighHostname=prvtIsisISAdjNeighHostname, prvtIsisCircLvl2DRHelloTimer=prvtIsisCircLvl2DRHelloTimer, prvtIsisLSPChecksum=prvtIsisLSPChecksum, prvtIsisCircLvl1DesISHostname=prvtIsisCircLvl1DesISHostname, prvtIsisSysLvl2SetOverloadUntil=prvtIsisSysLvl2SetOverloadUntil, prvtIsisCircIfIndex=prvtIsisCircIfIndex, prvtIsisLSPLifetimeRemain=prvtIsisLSPLifetimeRemain, prvtIsisLSPTLVHostname=prvtIsisLSPTLVHostname, prvtIsisSysLvl1SetOverloadUntil=prvtIsisSysLvl1SetOverloadUntil, prvtIsisSysExistState=prvtIsisSysExistState, PrvtIsisISLevel=PrvtIsisISLevel, prvtIsisSummAddrTable=prvtIsisSummAddrTable, prvtIsisIPRAEntry=prvtIsisIPRAEntry, prvtIsisISAdjAreaAddress=prvtIsisISAdjAreaAddress, prvtIsisSysZeroAgeLifetime=prvtIsisSysZeroAgeLifetime, prvtIsisSysMaxResBwidthPcntge=prvtIsisSysMaxResBwidthPcntge, prvtIsisSysTEMetricPcntge=prvtIsisSysTEMetricPcntge, prvtIsisSysIPv6TERouterID=prvtIsisSysIPv6TERouterID, prvtIsisCircExistState=prvtIsisCircExistState, prvtIsisISAdjNeighSysType=prvtIsisISAdjNeighSysType, prvtIsisIPRADestType=prvtIsisIPRADestType, prvtIsisSysPollESHelloRate=prvtIsisSysPollESHelloRate, prvtIsisISAdjNeighLanIDHostname=prvtIsisISAdjNeighLanIDHostname, prvtIsisAreaAddrEntry=prvtIsisAreaAddrEntry, prvtIsisLSPSummaryTable=prvtIsisLSPSummaryTable, prvtIsisSysNumUpdMerged=prvtIsisSysNumUpdMerged, prvtIsisLSPTLVSeq=prvtIsisLSPTLVSeq, prvtIsisCircType=prvtIsisCircType, prvtIsisSysRestartAutoResetType=prvtIsisSysRestartAutoResetType, prvtIsisISAdjAreaAddrEntry=prvtIsisISAdjAreaAddrEntry, prvtIsisIPRADest=prvtIsisIPRADest, PrvtIsisIPv4Address=PrvtIsisIPv4Address, prvtIsisLSPZeroLife=prvtIsisLSPZeroLife, prvtIsisCircLvl1HelloMultiplier=prvtIsisCircLvl1HelloMultiplier, prvtIsisISAdjNeighSNPAAddress=prvtIsisISAdjNeighSNPAAddress, prvtIsisCircLvl2WideMetric=prvtIsisCircLvl2WideMetric, prvtIsisSysSetAttached=prvtIsisSysSetAttached, prvtIsisCircLvl1MinLSPRetransInt=prvtIsisCircLvl1MinLSPRetransInt, prvtIsisCircLvl2PartSNPInterval=prvtIsisCircLvl2PartSNPInterval, prvtIsisSummAddrExistState=prvtIsisSummAddrExistState, prvtIsisManAreaAddr=prvtIsisManAreaAddr, prvtIsisCircLvl2LSPThrottle=prvtIsisCircLvl2LSPThrottle, prvtIsisISAdjUsage=prvtIsisISAdjUsage, prvtIsisISAdjRestartCapable=prvtIsisISAdjRestartCapable, PrvtIsisDefaultMetric=PrvtIsisDefaultMetric, prvtIsisSysLvl2RestartT2Duration=prvtIsisSysLvl2RestartT2Duration, prvtIsisCircIfSubIndex=prvtIsisCircIfSubIndex, prvtIsisCircSmallHellos=prvtIsisCircSmallHellos, prvtIsisISAdjPeerRestartState=prvtIsisISAdjPeerRestartState, prvtIsisSysLvl1MetricStyle=prvtIsisSysLvl1MetricStyle, prvtIsisSysCalcThrshUpdStart=prvtIsisSysCalcThrshUpdStart, prvtIsisCircLvl1LSPThrottle=prvtIsisCircLvl1LSPThrottle, prvtIsisSysLvl1OrigLSPBuffSize=prvtIsisSysLvl1OrigLSPBuffSize, prvtIsisISAdjState=prvtIsisISAdjState, prvtIsisCircLvl1CSNPInterval=prvtIsisCircLvl1CSNPInterval, prvtIsisMIBObjects=prvtIsisMIBObjects, prvtIsisISAdjIPAddrEntry=prvtIsisISAdjIPAddrEntry, prvtIsisLSPIDHostname=prvtIsisLSPIDHostname, prvtIsisCircLvl2DesISHostname=prvtIsisCircLvl2DesISHostname, prvtIsisSysLvl1IPv6TEEnabled=prvtIsisSysLvl1IPv6TEEnabled, prvtIsisCircLvl1ID=prvtIsisCircLvl1ID, prvtIsisCircLvl2HelloMultiplier=prvtIsisCircLvl2HelloMultiplier, prvtIsisISAdjIPAddrAddress=prvtIsisISAdjIPAddrAddress, prvtIsisCircT1TimerRunning=prvtIsisCircT1TimerRunning)
