#
# PySNMP MIB module ALCATEL-IND1-IPRMV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-IPRMV6-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:36 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Iprm, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Iprm")
AlaIprmStaticRouteTypes, AlaIprmAdminStatus = mibBuilder.importSymbols("ALCATEL-IND1-IPRM-MIB", "AlaIprmStaticRouteTypes", "AlaIprmAdminStatus")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
Ipv6IfIndex, Ipv6IfIndexOrZero, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6IfIndex", "Ipv6IfIndexOrZero", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, iso, IpAddress, ModuleIdentity, MibIdentifier, Counter64, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "iso", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "NotificationType", "Bits")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1IPRMV6MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2))
alcatelIND1IPRMV6MIB.setRevisions(('2010-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setLastUpdated('201309230000Z')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for\n             the configuration of IPRMv6 global configuration parameters.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2010 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPRMV6MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1))
alaIprmV6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1))
class AlaIprmV6RtPrefType(TextualConvention, Integer32):
    description = 'Used to define the various types of IPv6 routes along with their\n         route preference values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("local", 1), ("static", 2), ("ospf", 3), ("rip", 4), ("bgpExternal", 5), ("bgpInternal", 6), ("isisl1", 7), ("isisl2", 8), ("import", 9))

alaIprmV6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: alaIprmV6RouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteTable.setDescription("IPRM's IPv6 Routing table. This table contains\n       an entry for each valid IPv6 unicast route that\n       can be used for packet forwarding determination.\n       It is for display purposes only.")
alaIprmV6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteDest"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RoutePfxLength"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteNextHop"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteProtocol"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteIfIndex"))
if mibBuilder.loadTexts: alaIprmV6RouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteEntry.setDescription('A routing entry.')
alaIprmV6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6RouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteDest.setDescription('The destination IPv6 address of this route.')
alaIprmV6RoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: alaIprmV6RoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RoutePfxLength.setDescription('Indicates the prefix length of the destination\n        address.')
alaIprmV6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6RouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteNextHop.setDescription("On remote routes, the address of the next\n        system en route;  otherwise, ::0\n        ('00000000000000000000000000000000'H in ASN.1\n        string representation).")
alaIprmV6RouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 4), IANAipRouteProtocol())
if mibBuilder.loadTexts: alaIprmV6RouteProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteProtocol.setDescription('The protocol that this route was learned from')
alaIprmV6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 5), Ipv6IfIndex())
if mibBuilder.loadTexts: alaIprmV6RouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteIfIndex.setDescription('The index value which uniquely identifies the local\n        interface through which the next hop of this\n        route should be reached.')
alaIprmV6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmV6RouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteMetric.setDescription("The routing metric for this route. The\n        semantics of this metric are determined by the\n        routing protocol specified in the route's\n        ipv6RouteProtocol value.")
alaIprmV6RouteValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmV6RouteValid.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteValid.setDescription('If this value is true(1) IPRM believes the\n        route is being used.  If this value is false(2),\n        the route is currently not being used and is\n        considered a backup route.')
alaIprmV6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: alaIprmV6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteTable.setDescription('Table allowing the creation and removal of IPv6 Static Routes.')
alaIprmV6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteDest"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRoutePfxLength"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteNextHop"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteIfIndex"))
if mibBuilder.loadTexts: alaIprmV6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteEntry.setDescription('An IPv6 static route entered by the user')
alaIprmV6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteDest.setDescription('The destination IPv6 address of this static route.\n       This object may not take a multicast address value.')
alaIprmV6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaIprmV6StaticRoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination\n        address.')
alaIprmV6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteNextHop.setDescription('The IPv6 address of the next hop towards the\n        destination.')
alaIprmV6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 4), Ipv6IfIndexOrZero())
if mibBuilder.loadTexts: alaIprmV6StaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteIfIndex.setDescription('The index value which uniquely identifies the local\n        interface through which the next hop of this\n        route should be reached.')
alaIprmV6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteMetric.setDescription('The routing metric for this route. The lower the\n        value, the higher the priority for the static\n        route.')
alaIprmV6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteStatus.setDescription('Used to control the addition and removal of static\n        routes.')
alaIprmV6StaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteTag.setDescription('Tag associated with route.')
alaIprmV6StaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteName.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteName.setDescription('A comment associated with the static route.')
alaIprmV6StaticRouteBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 9), AlaIprmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteBfdStatus.setDescription('For enabling or disabling the BFD status on this static route.')
alaIprmV6StaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 10), AlaIprmStaticRouteTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteType.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteType.setDescription('Type of static route.')
alaIprmV6RtPrefTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: alaIprmV6RtPrefTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefTable.setDescription('This table specifies the route preference values for\n         various types of IPv6 routes handled by IPRM.')
alaIprmV6RtPrefTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RtPrefEntryType"))
if mibBuilder.loadTexts: alaIprmV6RtPrefTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefTableEntry.setDescription('An entry is in this table for each IPv6 route preference type.')
alaIprmV6RtPrefEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1, 1), AlaIprmV6RtPrefType())
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryType.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryType.setDescription('The type of route (associated with a route preference value)')
alaIprmV6RtPrefEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryValue.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryValue.setDescription('The route preference value used for this type of route.')
alaIprmV6ExportRouteMap = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmV6ExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ExportRouteMap.setDescription('A route-map index representing the route-map used to filter\n         IPv6 routes exported to the Global Route Table. A value of -1 \n         indicates no routes should be exported. A value of 0 indicates \n         all routes should be exported. Otherwise, the value is the \n         route-map index to use for filtering.')
alaIprmV6ExportToAllVrfsRouteMap = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmV6ExportToAllVrfsRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ExportToAllVrfsRouteMap.setDescription("Used to export IPv6 routes to all other VRFs that don't already have\n         an entry in the Import Vrf Table. The object is a route-map index \n         representing the route-map used to filter the exported routes.\n         A value of -1 indicates no routes should be exported. A value of 0 \n         indicates all routes should be exported. Otherwise, the value is \n         the route-map index to use for filtering.")
alaIprmV6ImportVrfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 6), )
if mibBuilder.loadTexts: alaIprmV6ImportVrfTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ImportVrfTable.setDescription('This table specifies VRFs to import IPv6 routes from.')
alaIprmV6ImportVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ImportVrfName"))
if mibBuilder.loadTexts: alaIprmV6ImportVrfEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ImportVrfEntry.setDescription('An entry in this table is created for each VRF\n         to import IPv6 routes from.')
alaIprmV6ImportVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: alaIprmV6ImportVrfName.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ImportVrfName.setDescription('The name of the VRF that IPv6 routes should be imported from. An\n         empty string indicates the default VRF.')
alaIprmV6ImportVrfRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6ImportVrfRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ImportVrfRouteMap.setDescription('A route-map index representing the route-map used to filter\n         IPv6 imported routes.  A value of 0 indicates all IPv6 routes \n         that have been exported by the specified VRF should be imported.')
alaIprmV6ImportVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6ImportVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ImportVrfRowStatus.setDescription('This variable is used to create, modify, and/or\n         delete a row in this table.')
alaIprmV6StaticAllBfd = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 7), AlaIprmAdminStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmV6StaticAllBfd.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticAllBfd.setDescription('To enable/disable the BFD state on all IPv6 static routes.')
alcatelIND1IPRMV6MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2))
alcatelIND1IPRMV6MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 1))
alcatelIND1IPRMV6MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 2))
alaIprmV6Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmV6Compliance = alaIprmV6Compliance.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6Compliance.setDescription('The compliance statement for routers running IPRM\n            and implementing the ALCATEL-IND1-IPRMV6 MIB.')
alaIprmV6ConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteMetric"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteValid"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteMetric"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteStatus"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteTag"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteName"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteBfdStatus"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteType"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RtPrefEntryValue"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ExportRouteMap"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ExportToAllVrfsRouteMap"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ImportVrfRouteMap"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ImportVrfRowStatus"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticAllBfd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmV6ConfigMIBGroup = alaIprmV6ConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of the IPRM Module supporting IPv6 routes.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPRMV6-MIB", alaIprmV6ExportToAllVrfsRouteMap=alaIprmV6ExportToAllVrfsRouteMap, alaIprmV6StaticRouteTag=alaIprmV6StaticRouteTag, alcatelIND1IPRMV6MIBGroups=alcatelIND1IPRMV6MIBGroups, alaIprmV6Compliance=alaIprmV6Compliance, alaIprmV6RouteIfIndex=alaIprmV6RouteIfIndex, alaIprmV6ExportRouteMap=alaIprmV6ExportRouteMap, alaIprmV6StaticRouteStatus=alaIprmV6StaticRouteStatus, alaIprmV6ImportVrfEntry=alaIprmV6ImportVrfEntry, PYSNMP_MODULE_ID=alcatelIND1IPRMV6MIB, alaIprmV6RtPrefEntryValue=alaIprmV6RtPrefEntryValue, alaIprmV6StaticRouteNextHop=alaIprmV6StaticRouteNextHop, alaIprmV6RouteMetric=alaIprmV6RouteMetric, alaIprmV6ConfigMIBGroup=alaIprmV6ConfigMIBGroup, alaIprmV6StaticAllBfd=alaIprmV6StaticAllBfd, alaIprmV6StaticRoutePfxLength=alaIprmV6StaticRoutePfxLength, alaIprmV6StaticRouteMetric=alaIprmV6StaticRouteMetric, alaIprmV6RtPrefTableEntry=alaIprmV6RtPrefTableEntry, alaIprmV6ImportVrfTable=alaIprmV6ImportVrfTable, alaIprmV6ImportVrfRouteMap=alaIprmV6ImportVrfRouteMap, alaIprmV6ImportVrfRowStatus=alaIprmV6ImportVrfRowStatus, alaIprmV6StaticRouteName=alaIprmV6StaticRouteName, alcatelIND1IPRMV6MIBConformance=alcatelIND1IPRMV6MIBConformance, alaIprmV6StaticRouteDest=alaIprmV6StaticRouteDest, alcatelIND1IPRMV6MIBObjects=alcatelIND1IPRMV6MIBObjects, alaIprmV6StaticRouteTable=alaIprmV6StaticRouteTable, alaIprmV6StaticRouteBfdStatus=alaIprmV6StaticRouteBfdStatus, alaIprmV6RouteDest=alaIprmV6RouteDest, alaIprmV6StaticRouteIfIndex=alaIprmV6StaticRouteIfIndex, alaIprmV6RtPrefTable=alaIprmV6RtPrefTable, alcatelIND1IPRMV6MIBCompliances=alcatelIND1IPRMV6MIBCompliances, alaIprmV6RouteTable=alaIprmV6RouteTable, alaIprmV6ImportVrfName=alaIprmV6ImportVrfName, alaIprmV6RouteValid=alaIprmV6RouteValid, alaIprmV6RouteNextHop=alaIprmV6RouteNextHop, alaIprmV6StaticRouteType=alaIprmV6StaticRouteType, alaIprmV6StaticRouteEntry=alaIprmV6StaticRouteEntry, alaIprmV6Config=alaIprmV6Config, alaIprmV6RouteProtocol=alaIprmV6RouteProtocol, alcatelIND1IPRMV6MIB=alcatelIND1IPRMV6MIB, alaIprmV6RtPrefEntryType=alaIprmV6RtPrefEntryType, alaIprmV6RouteEntry=alaIprmV6RouteEntry, alaIprmV6RoutePfxLength=alaIprmV6RoutePfxLength, AlaIprmV6RtPrefType=AlaIprmV6RtPrefType)
