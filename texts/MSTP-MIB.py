#
# PySNMP MIB module MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/MSTP-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:36:14 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Timeout, BridgeId, dot1dBridge = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "BridgeId", "dot1dBridge")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, Counter32, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, Counter64, ObjectIdentity, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Counter32", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "IpAddress")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
mstpMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 17, 8))
mstpMib.setRevisions(('1904-12-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mstpMib.setRevisionsDescriptions(('Draft 1',))
if mibBuilder.loadTexts: mstpMib.setLastUpdated('0412050000Z')
if mibBuilder.loadTexts: mstpMib.setOrganization('IETF Bridge MIB Working Group')
if mibBuilder.loadTexts: mstpMib.setContactInfo('Email: Bridge-mib@ietf.org')
if mibBuilder.loadTexts: mstpMib.setDescription(' The Bridge MIB Extension module for managing Sdevices\n                       that support the Multiple Spanning Tree Protocol defined\n                       by IEEE 802.1s.')
mstpMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1))
dot1sStp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1))
dot1sStpName = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpName.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: dot1sStpName.setStatus('current')
if mibBuilder.loadTexts: dot1sStpName.setDescription('The configuration name that identifies the MST\n                           region and is used as one of the inputs in the \n                           computation of the MST Configuration Identifier.\n                           This object does not have any default value.')
dot1sStpRevision = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpRevision.setReference('IEEE 802.1s: Section 13.7')
if mibBuilder.loadTexts: dot1sStpRevision.setStatus('current')
if mibBuilder.loadTexts: dot1sStpRevision.setDescription('This object identifies the MST revision that \n                           identifies the MST region and is used as one\n                           of the inputs in the computation of the MST \n                           configuration Identifier. This object does not\n                           have any default value.')
dot1sStpEnable = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 3), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpEnable.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpEnable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpEnable.setDescription('This parameter is used for enabling or disabling\n                           MST globally on all the bridging ports.')
dot1sStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeMaxAge.setReference('IEEE 802.1s: Section 13.23.4, 13.23.10')
if mibBuilder.loadTexts: dot1sStpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: dot1sStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when\n                           this bridge is acting as the root. This parameter \n                           is applicable for all MST Instances including CIST.')
dot1sStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeHelloTime.setReference('IEEE 802.1s: Section 13.23.4, 13.23.10')
if mibBuilder.loadTexts: dot1sStpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: dot1sStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when\n                           this bridge is acting as the root. This parameter \n                           is applicable for all MST Instances including CIST.')
dot1sStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeForwardDelay.setReference('IEEE 802.1s: Section 13.23.4, 13.23.10')
if mibBuilder.loadTexts: dot1sStpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: dot1sStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay\n                           when this bridge is acting as the root. This parameter \n                           is applicable for all MST Instances including CIST.')
dot1sStpBridgeMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: dot1sStpBridgeMaxHops.setDescription('The maximum number of hops that the information for a\n                          particular Spanning Tree instance may traverse (via\n                          relay of BPDUs within the applicable MST region) before\n                          being discarded.  This value is used only if this bridge\n                          is the CIST Regional Root and/or the MSTI Regional Root\n                          for one or more Multiple Spanning Tree instances.')
dot1sStpTxHoldCount = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpTxHoldCount.setReference('IEEE 802.1s: Section 13.22')
if mibBuilder.loadTexts: dot1sStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: dot1sStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to\n                           limit the maximum transmission rate of MST BPDUs within\n                           the hello interval.')
dot1sStpProtocolSpecification = MibScalar((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3), ("ieee8021w", 4), ("ieee8021s", 5))).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpProtocolSpecification.setReference('IEEE 802.1s: Section 13.22')
if mibBuilder.loadTexts: dot1sStpProtocolSpecification.setStatus('current')
if mibBuilder.loadTexts: dot1sStpProtocolSpecification.setDescription("An indication of what version of the Spanning\n                           Tree Protocol is being run.  The value\n                           'decLb100(2)' indicates the DEC LANbridge 100\n                           Spanning Tree protocol.  IEEE 802.1w\n                           implementations will return 'ieee8021w(4)'. IEEE\n                           802.1s implementations will return 'ieee8021s(5). If\n                           future versions of the IEEE Spanning Tree Protocol\n                           are released that are incompatible with the\n                           current version a new value will be defined.")
dot1sStpInstTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10), )
if mibBuilder.loadTexts: dot1sStpInstTable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstTable.setDescription('A table that contains MST instance-specific\n                           configuration and operational information.')
dot1sStpInstEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpInstId"))
if mibBuilder.loadTexts: dot1sStpInstEntry.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstEntry.setDescription('A list of information maintained by every mst instance\n                           about the STP topology for that instance.')
dot1sStpInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: dot1sStpInstId.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpInstId.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstId.setDescription('Identifier of this MST Instance')
dot1sStpPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPriority.setReference('IEEE 802.1s: Section 13.23.2')
if mibBuilder.loadTexts: dot1sStpPriority.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPriority.setDescription('The value of the write-able portion of the Bridge\n                           ID, i.e., the first two octets, out of which the \n                           priority is the most significant 4 bits of the first \n                           octet of the (8 octet long) Bridge ID.  The other \n                           (last) 6 octets of the Bridge ID are given by the \n                           value of dot1dBaseBridgeAddress in the BRIDGE-MIB. \n                           The value of this object should always be a multiple\n                           of 4096.')
dot1sStpInstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstTimeSinceTopologyChange.setReference(' IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: dot1sStpInstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the\n                           last time a topology change was detected by the\n                           bridge entity running MSTP.')
dot1sStpInstTopChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstTopChanges.setReference(' IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: dot1sStpInstTopChanges.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstTopChanges.setDescription('The total number of topology changes detected by\n                           this bridge entity running MST since the management\n                           entity was last reset or initialized.')
dot1sStpInstDesignatedRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstDesignatedRoot.setReference('IEEE 802.1s: Section 13.23.6, 13.23.12')
if mibBuilder.loadTexts: dot1sStpInstDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstDesignatedRoot.setDescription('The bridge identifier of the root of the \n                           corresponding spanning tree instance as determined\n                           by the Spanning Tree Protocol for that instance.  \n                           This value is used as the CIST Root Identifier or MSTI\n                           regional root identifier parameter in all MST BPDUs \n                           originated by this node.')
dot1sStpInstRootCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstRootCost.setReference('IEEE 802.1s: Section 13.23.6, 13.23.12')
if mibBuilder.loadTexts: dot1sStpInstRootCost.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstRootCost.setDescription('The cost of the path to the root as seen from\n                           this bridge for this instance.')
dot1sStpInstRootPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstRootPort.setReference('IEEE 802.1s: Section 13.23.6, 13.23.12')
if mibBuilder.loadTexts: dot1sStpInstRootPort.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstRootPort.setDescription('The port number of the port which offers the\n                           lowest cost path from this bridge to the root\n                           bridge for this instance.')
dot1sStpInstMaxAge = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstMaxAge.setReference('IEEE 802.1s: Section 13.23.7, 13.23.13')
if mibBuilder.loadTexts: dot1sStpInstMaxAge.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstMaxAge.setDescription('The maximum age of Spanning Tree Protocol\n                           information learned from the network on any port\n                           before it is discarded, in units of hundredths of\n                           a second.  This is the actual value, which is \n                           advertised by the Root bridge and is currently \n                           used for this MST Instance.')
dot1sStpInstHelloTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstHelloTime.setReference('IEEE 802.1s: Section 13.23.7, 13.23.13')
if mibBuilder.loadTexts: dot1sStpInstHelloTime.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstHelloTime.setDescription('The period of time between the transmission of\n                           MST BPDUs by this node on any port when it is the\n                           root of the spanning tree or trying to become so, \n                           in units of hundredths of a second. This is the actual\n                           value, which is advertised by the Root bridge and is \n                           currently used for this MST Instance.')
dot1sStpInstForwardDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstForwardDelay.setReference('IEEE 802.1s: Section 13.23.7, 13.23.13')
if mibBuilder.loadTexts: dot1sStpInstForwardDelay.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstForwardDelay.setDescription('This time value, measured in units of hundredths\n                           of a second, controls how fast a port changes its\n                           spanning state when moving towards the Forwarding\n                           state.  The value determines how long the port\n                           stays in each of the Discarding and Learning\n                           states, which precede the Forwarding state.  This\n                           value is also used, when a topology change has\n                           been detected and is underway, to age all dynamic\n                           entries in the Forwarding Database.  [Note that\n                           this value is the one that this bridge is\n                           currently using, in contrast to\n                           dot1sStpBridgeForwardDelay which is the value that\n                           this bridge and all others would start using\n                           if/when this bridge were to become the root.]')
dot1sStpInstAdminEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 11), TruthValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstAdminEnable.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpInstAdminEnable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstAdminEnable.setDescription('The administrative enabled/disabled status of the\n                           instance')
dot1sStpInstOperEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 10, 1, 12), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstOperEnable.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpInstOperEnable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstOperEnable.setDescription('The operational enabled/disabled status of the\n                           instance. An MST Instance may be administratively \n                           enabled but may not be operationally running, for\n                           example, when no VLAN is mapped to that MST Instance.')
dot1sStpPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11), )
if mibBuilder.loadTexts: dot1sStpPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortTable.setDescription("A table that contains MSTP ports' information.")
dot1sStpPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortEntry.setDescription('A list of information maintained by every MST port\n                   about the Spanning Tree Protocol state for that port.')
dot1sStpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dot1sStpPort.setReference(' IEEE 802.1s: Section 13.24.21')
if mibBuilder.loadTexts: dot1sStpPort.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPort.setDescription('The port number of the port for which this entry\n                   contains Spanning Tree Protocol management\n                   information.')
dot1sStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortAdminEdgePort.setReference('IEEE 802.1s: Section 12.8.2.1.3')
if mibBuilder.loadTexts: dot1sStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter.  A\n                   value of TRUE(1) indicates that this port should be\n                   assumed as an edge-port and a value of FALSE(2) indicates\n                   that this port should be assumed as a non-edge-port.')
dot1sStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortAdminPointToPoint.setReference('IEEE 802.1s: Section 13.18')
if mibBuilder.loadTexts: dot1sStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment\n                   attached to this port.  A value of forceTrue(1) indicates that\n                   this port should always be treated as if it is connected to\n                   a point-to-point link.  A value of forceFalse(2) indicates\n                   that this port should be treated as having a shared media\n                   connection.  A value of auto(3) indicates that this port is\n                   considered to have a point-to-point link if it is an Aggregator\n                   and all of its members are aggregatable, or if the MAC entity\n                   is configured for full duplex operation, either through\n                   auto-negotiation or by management means.')
dot1sStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpPortOperEdgePort.setReference('IEEE 802.1s: Section 12.8.2.1.3')
if mibBuilder.loadTexts: dot1sStpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter.  A\n                   value of TRUE(1) indicates that this port should be\n                   assumed as an edge-port and a value of FALSE(2) indicates\n                   that this port should be assumed as a non-edge-port.')
dot1sStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpPortOperPointToPoint.setReference('IEEE 802.1s: Section 13.18')
if mibBuilder.loadTexts: dot1sStpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment\n                    attached to this port.  It indicates whether a port is\n                    considered to have a point-to-point connection or not.\n                    The value is determined by management or by auto-detection,\n                    as described in the dot1dStpPortAdminPointToPoint object.')
dot1sStpPortExterPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortExterPathCost.setReference('IEEE 802.1s: Section 13.24.8, 13.24.17')
if mibBuilder.loadTexts: dot1sStpPortExterPathCost.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortExterPathCost.setDescription('The contribution of this port to the path cost of\n                   paths towards the spanning tree root which include\n                   this port.  802.1D-1990 recommends that the\n                   default value of this parameter be in inverse\n                   proportion to the speed of the attached LAN.')
dot1sStpVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp-mstp", 2))).clone('rstp-mstp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpVersion.setReference('IEEE 802.1s: Section 14.2')
if mibBuilder.loadTexts: dot1sStpVersion.setStatus('current')
if mibBuilder.loadTexts: dot1sStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is\n                   currently running.  The value 'stpCompatible(0)'\n                   indicates the Spanning Tree Protocol specified in\n                   IEEE 802.1D and 'rstp/mstp(2)' indicates the Rapid \n                   Spanning Tree Protocol specified in IEEE 802.1w and\n                   Multiple Spanning Tree Protocol specified in IEEE\n                   802.1s. New value may be defined as future versions \n                   of the protocol become available.")
dot1sStpInstPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12), )
if mibBuilder.loadTexts: dot1sStpInstPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortTable.setDescription('A table that contains MST port and instance \n                   information.')
dot1sStpInstPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpInstId"), (0, "MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpInstPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortEntry.setDescription('A list of information maintained by every MST port \n                   for each MST instance it belongs to about the Spanning \n                   Tree Protocol state for that port.')
dot1sStpInstPortPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortPriority.setReference('IEEE 802.1s: Section 13.24.21')
if mibBuilder.loadTexts: dot1sStpInstPortPriority.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortPriority.setDescription('The value of the priority field which is\n                   contained in the most significant 4 bits \n                   of the first (in network byte order)\n                   octet of the (2 octet long) Port ID. As it is\n                   contained only in 4 bits, the value has to be \n                   a multiple of 16. The other octet of the Port \n                   ID is given by the value of dot1dStpPort.')
dot1sStpInstPortState = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortState.setReference('IEEE 802.1s: Section 13.16')
if mibBuilder.loadTexts: dot1sStpInstPortState.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortState.setDescription("The port's current state as defined by\n                   application of the Spanning Tree Protocol.  This\n                   state controls what action a port takes on\n                   reception of a frame. For ports which\n                   are disabled (see dot1dStpPortEnable), this object\n                   will have a value of disabled(1).")
dot1sStpInstPortPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpInstPortPathCost.setReference('IEEE 802.1s: Section 13.24.8, 13.24.17')
if mibBuilder.loadTexts: dot1sStpInstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortPathCost.setDescription('The contribution of this port to the path cost of\n                   paths towards the spanning tree root which include\n                   this port.  802.1D-1990 recommends that the\n                   default value of this parameter be in inverse\n                   proportion to the speed of the attached LAN.')
dot1sStpInstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedRoot.setReference('IEEE 802.1s: Section 13.24.4, 13.24.11')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge\n                   recorded as the Root in the Configuration BPDUs\n                   transmitted by the Designated Bridge for the\n                   segment to which the port is attached.')
dot1sStpInstPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedCost.setReference('IEEE 802.1s: Section 13.24.4, 13.24.11')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedCost.setDescription('The path cost of the Designated Port of the\n                   segment connected to this port.  This value is\n                   compared to the Root Path Cost field in received\n                   bridge PDUs.')
dot1sStpInstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedBridge.setReference('IEEE 802.1s: Section 13.24.4, 13.24.11')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this\n                   port considers to be the Designated Bridge for\n                   this port's segment.")
dot1sStpInstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedPort.setReference('IEEE 802.1s: Section 13.24.4, 13.24.11')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated\n                   Bridge for this port's segment.")
dot1sStpInstPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortForwardTransitions.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpInstPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortForwardTransitions.setDescription('The number of times this port has transitioned\n                   from the Learning state to the Forwarding state.')
dot1sStpInstPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("master", 0), ("alternate-backup", 1), ("root", 2), ("designated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1sStpInstPortRole.setReference('IEEE 802.1s: Section 13.24.25')
if mibBuilder.loadTexts: dot1sStpInstPortRole.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortRole.setDescription('The role of the port. As per IEEE 802.1s, the \n                   port can have any of the following roles:\n                   Disabled, Root, Designated, Alternate, Backup,\n                   Master')
dot1sStpVlanTable = MibTable((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13), )
if mibBuilder.loadTexts: dot1sStpVlanTable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpVlanTable.setDescription('A table that contains MSTI-VLAN mapping.')
dot1sStpVlanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1), ).setIndexNames((0, "MSTP-MIB", "dot1sStpVlanIndex"))
if mibBuilder.loadTexts: dot1sStpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: dot1sStpVlanEntry.setDescription('A list of information maintained by every MST instance \n                   about the VLANs mapped to that instance.')
dot1sStpVlanIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dot1sStpVlanIndex.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dot1sStpVlanIndex.setDescription('This is the primary index to the MSTI-VLAN Table. \n                   It signifies the index to the VLAN range entry in \n                   the table.')
dot1sStpVlanInstId = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpVlanInstId.setReference('IEEE 802.1s')
if mibBuilder.loadTexts: dot1sStpVlanInstId.setStatus('current')
if mibBuilder.loadTexts: dot1sStpVlanInstId.setDescription('The MST Instance value the VLAN mapped to.')
dot1sStpPortSnoopingEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1sStpPortSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: dot1sStpPortSnoopingEnable.setDescription('This parameter is used for enabling or disabling\n                           digest snooping on  the bridge port.')
dot1sStpTrapTable = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14))
dot1sStpTrapEntry = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1))
dot1sStpInstNewRoot = NotificationType((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1, 1)).setObjects(("MSTP-MIB", "dot1sStpInstDesignatedRoot"))
if mibBuilder.loadTexts: dot1sStpInstNewRoot.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstNewRoot.setDescription('Root bridge changed for the mstp.')
dot1sStpInstPortForwarding = NotificationType((1, 3, 6, 1, 2, 1, 17, 8, 1, 1, 14, 1, 2)).setObjects(("MSTP-MIB", "dot1sStpPort"))
if mibBuilder.loadTexts: dot1sStpInstPortForwarding.setStatus('current')
if mibBuilder.loadTexts: dot1sStpInstPortForwarding.setDescription('Port status is turned from blocking to forwarding.')
mibBuilder.exportSymbols("MSTP-MIB", dot1sStpInstMaxAge=dot1sStpInstMaxAge, dot1sStpPortExterPathCost=dot1sStpPortExterPathCost, dot1sStpName=dot1sStpName, dot1sStpEnable=dot1sStpEnable, dot1sStpProtocolSpecification=dot1sStpProtocolSpecification, dot1sStpPortAdminEdgePort=dot1sStpPortAdminEdgePort, dot1sStpPortAdminPointToPoint=dot1sStpPortAdminPointToPoint, dot1sStpVlanIndex=dot1sStpVlanIndex, dot1sStpPortEntry=dot1sStpPortEntry, dot1sStpPort=dot1sStpPort, dot1sStpInstOperEnable=dot1sStpInstOperEnable, dot1sStpBridgeMaxAge=dot1sStpBridgeMaxAge, mstpMIBObjects=mstpMIBObjects, dot1sStpVlanTable=dot1sStpVlanTable, dot1sStpInstPortPriority=dot1sStpInstPortPriority, dot1sStpInstId=dot1sStpInstId, dot1sStp=dot1sStp, dot1sStpInstRootCost=dot1sStpInstRootCost, dot1sStpInstForwardDelay=dot1sStpInstForwardDelay, dot1sStpInstPortDesignatedRoot=dot1sStpInstPortDesignatedRoot, dot1sStpVlanEntry=dot1sStpVlanEntry, dot1sStpTrapTable=dot1sStpTrapTable, dot1sStpInstHelloTime=dot1sStpInstHelloTime, dot1sStpPortSnoopingEnable=dot1sStpPortSnoopingEnable, dot1sStpInstPortEntry=dot1sStpInstPortEntry, dot1sStpInstPortState=dot1sStpInstPortState, dot1sStpInstPortDesignatedCost=dot1sStpInstPortDesignatedCost, dot1sStpBridgeMaxHops=dot1sStpBridgeMaxHops, dot1sStpInstNewRoot=dot1sStpInstNewRoot, dot1sStpInstRootPort=dot1sStpInstRootPort, dot1sStpInstPortForwardTransitions=dot1sStpInstPortForwardTransitions, dot1sStpInstPortPathCost=dot1sStpInstPortPathCost, dot1sStpTxHoldCount=dot1sStpTxHoldCount, dot1sStpInstTimeSinceTopologyChange=dot1sStpInstTimeSinceTopologyChange, dot1sStpInstDesignatedRoot=dot1sStpInstDesignatedRoot, dot1sStpPortOperPointToPoint=dot1sStpPortOperPointToPoint, dot1sStpInstPortDesignatedPort=dot1sStpInstPortDesignatedPort, dot1sStpInstPortTable=dot1sStpInstPortTable, dot1sStpRevision=dot1sStpRevision, dot1sStpBridgeForwardDelay=dot1sStpBridgeForwardDelay, dot1sStpInstPortRole=dot1sStpInstPortRole, dot1sStpInstTopChanges=dot1sStpInstTopChanges, dot1sStpInstTable=dot1sStpInstTable, mstpMib=mstpMib, dot1sStpTrapEntry=dot1sStpTrapEntry, dot1sStpBridgeHelloTime=dot1sStpBridgeHelloTime, dot1sStpVersion=dot1sStpVersion, dot1sStpVlanInstId=dot1sStpVlanInstId, dot1sStpPortTable=dot1sStpPortTable, dot1sStpInstPortForwarding=dot1sStpInstPortForwarding, PYSNMP_MODULE_ID=mstpMib, dot1sStpPriority=dot1sStpPriority, dot1sStpInstPortDesignatedBridge=dot1sStpInstPortDesignatedBridge, dot1sStpPortOperEdgePort=dot1sStpPortOperEdgePort, dot1sStpInstAdminEnable=dot1sStpInstAdminEnable, dot1sStpInstEntry=dot1sStpInstEntry)
