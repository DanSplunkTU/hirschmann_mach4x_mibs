#
# PySNMP MIB module PT3080-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/protelevision/PT3080-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 12:26:26 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
pt, = mibBuilder.importSymbols("PT-MIB", "pt")
AgentCapabilities, ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "AgentCapabilities", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Counter32, Unsigned32, ModuleIdentity, iso, Counter64, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter32", "Unsigned32", "ModuleIdentity", "iso", "Counter64", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
pt3080 = ModuleIdentity((1, 3, 6, 1, 4, 1, 18086, 3080))
pt3080.setRevisions(('2015-06-22 09:40',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pt3080.setRevisionsDescriptions(('SWPROTELEVISION_P3_1_02_157 build 1441106393',))
if mibBuilder.loadTexts: pt3080.setLastUpdated('201506220940Z')
if mibBuilder.loadTexts: pt3080.setOrganization('ProTelevision Technologies A/S, Denmark')
if mibBuilder.loadTexts: pt3080.setContactInfo('Contact: \n\n       Web: http://www.protelevision.com\n\n       Address: Valhoejs Alle 176, DK-2610 Roedovre, Denmark\n       Telephone: +45 44700000\n       Fax:       +45 44700001')
if mibBuilder.loadTexts: pt3080.setDescription('This is the MIB file of PT3080 DVB-T/H Modulator.\n\n       Copyright (c) 2008-2015 Protelevision Technologies A/S.\n       All rights reserved.\n       Reproduction of this document is authorized on the condition\n       that the foregoing copyright notice is included.')
pt3080System = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 1))
pt3080Mode = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 2))
pt3080Input = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 3))
pt3080Output = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 4))
pt3080Gps = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 7))
pt3080TSoIP = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 10))
pt3080Monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 12))
pt3080Test = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 13))
pt3080Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 14))
pt3080Preset = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 15))
pt3080Eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 16))
pt3080Comms = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 17))
pt3080Demodulator = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 24))
pt3080Precorrector = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 25))
pt3080ASI = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 30))
pt3080Reception = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 26))
pt3080Backplane = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 27))
pt3080Notifs = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 64))
pt3080Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 100))
pt3080Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 1))
pt3080SystemInstrumentFW1Rev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW1Rev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW1Rev.setDescription('The instrument FW1 revision')
pt3080SystemInstrumentFW1RevBL = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW1RevBL.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW1RevBL.setDescription('The instrument FW1 BL revision')
pt3080SystemInstrumentFW2Rev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW2Rev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW2Rev.setDescription('The instrument FW2 revision')
pt3080SystemInstrumentFW2RevBL = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW2RevBL.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW2RevBL.setDescription('The instrument FW2 BL revision')
pt3080SystemInstrumentFW3Rev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW3Rev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW3Rev.setDescription('The instrument FW3 revision')
pt3080SystemInstrumentFW4Rev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentFW4Rev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentFW4Rev.setDescription('The instrument FW4 revision')
pt3080SystemInstrumentPCBRev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentPCBRev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentPCBRev.setDescription('The instrument PCB revision')
pt3080SystemInstrumentCalibrationRev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentCalibrationRev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentCalibrationRev.setDescription('The instrument Calibration revision')
pt3080SystemInstrumentCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentCalibrationDate.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentCalibrationDate.setDescription('The instrument Calibration date')
pt3080SystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("keeprunning", 0), ("sameimage", 1), ("otherimage", 2), ("image0", 3), ("image1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemReboot.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemReboot.setDescription('Force a reboot of the device on the designated image now.')
pt3080SystemRebootDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("keeprunning", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemRebootDefaultConfig.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemRebootDefaultConfig.setDescription('Restore all parameters to factory default and reboot the device on the same image.')
pt3080SystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemDateTime.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemDateTime.setDescription('The current date/time in local timezone of the device.\n         Format is YYYY MM DD HH MM SS.')
pt3080SystemImage0Version = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemImage0Version.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemImage0Version.setDescription('The image 0 version string.')
pt3080SystemImage0InstalledDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemImage0InstalledDate.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemImage0InstalledDate.setDescription('The date and time image 0 was installed.')
pt3080SystemImage1version = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemImage1version.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemImage1version.setDescription('The image 1 version string.')
pt3080SystemImage1InstalledDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemImage1InstalledDate.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemImage1InstalledDate.setDescription('The date and time image 0 was installed.')
pt3080SystemServiceLED = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemServiceLED.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemServiceLED.setDescription('Control the Service LED on frontpanel.')
pt3080SystemLanguage = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("c", 0), ("da-dk", 1), ("ru-ru", 2), ("es-es", 3), ("pt-br", 4), ("it-it", 5), ("de-de", 6), ("fr-fr", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemLanguage.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemLanguage.setDescription('Controls which language is used on web and facia. Change requires\n         reboot.')
pt3080SystemType = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("modulator", 0), ("repeater", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemType.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemType.setDescription('The system type to start in on next reboot.')
pt3080SystemModulationStandard = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dvbt", 0), ("dvbt2", 1), ("atsc", 2), ("isdbt", 3), ("iboc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemModulationStandard.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemModulationStandard.setDescription('The Modulation Standard to start in on next reboot.')
pt3080SystemCurrentImage = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemCurrentImage.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemCurrentImage.setDescription('The flash Image the device is currently booted from.')
pt3080SystemInstrumentKU = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentKU.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentKU.setDescription('The instrument serial number.')
pt3080SystemInstrumentType = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentType.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentType.setDescription('The product type designation.')
pt3080SystemInstrumentOptions = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentOptions.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentOptions.setDescription('The options installed on this instrument.')
pt3080SystemDateTimeSync = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1), ("gps", 2), ("ntp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemDateTimeSync.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemDateTimeSync.setDescription('The method used to synchronize system RTC. Mode auto means use\n         gps if available else ntp else manual.')
pt3080SystemDateTimeSyncActual = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1), ("gps", 2), ("ntp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemDateTimeSyncActual.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemDateTimeSyncActual.setDescription('The actual method used to synchronize system RTC.')
pt3080SystemTimezone = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemTimezone.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemTimezone.setDescription('The Time Zone used for displaying Data and Time.')
pt3080SystemInstrumentSWRev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentSWRev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentSWRev.setDescription('The instrument Software Revision currently running.')
pt3080SystemInstrumentBootLoaderRev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentBootLoaderRev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentBootLoaderRev.setDescription('The instrument Bootloader Software Revision.')
pt3080SystemInstrumentKernelRev = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemInstrumentKernelRev.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemInstrumentKernelRev.setDescription('The instrument O/S Kernel Version.')
pt3080SystemOperationOnTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 34), Integer32()).setUnits('1 secs').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemOperationOnTime.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemOperationOnTime.setDescription('Number of seconds this unit has been turned on since production.')
pt3080SystemOperationOnAirTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 35), Integer32()).setUnits('1 secs').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemOperationOnAirTime.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemOperationOnAirTime.setDescription('Number of seconds this unit has been unmuted since production.')
pt3080SystemOperationNumberOfBoots = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemOperationNumberOfBoots.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemOperationNumberOfBoots.setDescription('Number of times this unit has been booted since last factory\n         default restore.')
pt3080SystemBackplaneid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneid.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneid.setDescription('ID of the backplane the device is plugged into')
pt3080SystemBackplaneIdRaw = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneIdRaw.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneIdRaw.setDescription('Raw ID of the backplane the device is plugged into')
pt3080SystemBackplaneIdPcb = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneIdPcb.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneIdPcb.setDescription('PCB version of the backplane the device is plugged into')
pt3080SystemBackplaneIdCableOptions = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneIdCableOptions.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneIdCableOptions.setDescription('Cable options of the backplane the device is plugged into')
pt3080SystemBackplaneIdMAnuf = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneIdMAnuf.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneIdMAnuf.setDescription('Manufacture ID of the backplane the device is plugged into')
pt3080SystemBackplaneCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneCalibrationDate.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneCalibrationDate.setDescription('Calibration date of the backplane the device is plugged into')
pt3080SystemBackplaneCalibrationSw = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneCalibrationSw.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneCalibrationSw.setDescription('Calibration SW version of the backplane the device is plugged\n         into')
pt3080SystemBackplaneIdPartlist = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SystemBackplaneIdPartlist.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemBackplaneIdPartlist.setDescription('Partlist version of the backplane the device is plugged into')
pt3080SystemScheduledActionTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50), )
if mibBuilder.loadTexts: pt3080SystemScheduledActionTable.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionTable.setDescription('This table contains the scheduled actions')
pt3080SystemScheduledActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080SystemScheduledActionID"))
if mibBuilder.loadTexts: pt3080SystemScheduledActionEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionEntry.setDescription('An entry for the scheduled action')
pt3080SystemScheduledActionID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pt3080SystemScheduledActionID.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionID.setDescription('Unique ID for this scheduled action entry')
pt3080SystemScheduledActionRecurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("never", 0), ("immediate", 1), ("once", 2), ("hourly", 3), ("daily", 4), ("weekly", 5), ("monthly", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionRecurrence.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionRecurrence.setDescription('The interval at which this scheduled action entry will be executed')
pt3080SystemScheduledActionHour = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionHour.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionHour.setDescription('The recurrence hour used when pt3080SystemScheduledActionRecurrence is once, hourly, dayly, weekly and monthly.')
pt3080SystemScheduledActionMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionMinute.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionMinute.setDescription('The recurrence minute used when pt3080SystemScheduledActionRecurrence is once, hourly, dayly, weekly and monthly.')
pt3080SystemScheduledActionWeekday = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionWeekday.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionWeekday.setDescription('The recurrence weekday used when pt3080SystemScheduledActionRecurrence is weekly.')
pt3080SystemScheduledActionMonthDay = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionMonthDay.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionMonthDay.setDescription('The recurrence day of the monthe used when pt3080SystemScheduledActionRecurrence is monthly.')
pt3080SystemScheduledActionDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionDate.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionDate.setDescription('The recurrence date used when pt3080SystemScheduledActionRecurrence is once.\n         The format is dd/mm/yyyy.')
pt3080SystemScheduledActionRandomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionRandomDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionRandomDelay.setDescription('An extra random delay added before the action for this entry is executed.\n         A setting of x means that a random delay between 0 and x seconds are added.')
pt3080SystemScheduledActionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("repeatermode", 1), ("preset", 2), ("swupgrade", 3), ("reboot", 4), ("mute", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionAction.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionAction.setDescription('The action for this entry is executed')
pt3080SystemScheduledActionRepeaterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("digital-iso-repeater", 1), ("digital-transposer", 2), ("analog-iso-repeater", 3), ("analog-transposer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionRepeaterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionRepeaterMode.setDescription('The new repeater mode to change to when pt3080SystemScheduledActionAction\n         of type repeatermode is executed')
pt3080SystemScheduledActionPresetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("digital-iso-repeater", 1), ("digital-transposer", 2), ("analog-iso-repeater", 3), ("analog-transposer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionPresetNo.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionPresetNo.setDescription('The preset to load when pt3080SystemScheduledActionAction\n         of type preset is executed')
pt3080SystemScheduledActionRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sameimage", 0), ("otherimage", 1), ("image0", 2), ("image1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionRebootImage.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionRebootImage.setDescription('The image to reboot to when pt3080SystemScheduledActionAction\n         of type reboot is executed')
pt3080SystemScheduledActionRebootSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("modulator", 0), ("repeater", 1), ("same", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionRebootSystemType.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionRebootSystemType.setDescription('The system type to reboot to when pt3080SystemScheduledActionAction\n         of type reboot is executed')
pt3080SystemScheduledActionMute = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionMute.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionMute.setDescription('The mute mode to change into when pt3080SystemScheduledActionAction\n         of type mute is executed')
pt3080SystemScheduledActionSWUpgradeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("http", 0), ("ftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeProtocol.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeProtocol.setDescription('The protocol to use into when pt3080SystemScheduledActionAction\n         of type swupgrade(3) is executed')
pt3080SystemScheduledActionSWUpgradeUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeUsername.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeUsername.setDescription('The username to use into when pt3080SystemScheduledActionAction\n         of type swupgrade(3) is executed')
pt3080SystemScheduledActionSWUpgradePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradePassword.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradePassword.setDescription('The password to use into when pt3080SystemScheduledActionAction\n         of type swupgrade(3) is executed')
pt3080SystemScheduledActionSWUpgradeImageServer = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeImageServer.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeImageServer.setDescription('The server name to use into when pt3080SystemScheduledActionAction\n         of type swupgrade(3) is executed')
pt3080SystemScheduledActionSWUpgradeImagePath = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 1, 50, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeImagePath.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemScheduledActionSWUpgradeImagePath.setDescription('The image path name to use into when pt3080SystemScheduledActionAction\n         of type swupgrade(3) is executed')
pt3080ModeListenBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeListenBroadcast.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeListenBroadcast.setDescription('Control wheter to react on broadcast tx id.')
pt3080ModeNetwork = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("network-mode-mfn", 0), ("network-mode-sfn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeNetwork.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetwork.setDescription('Network mode multi-frequency-network or single-frequency-network')
pt3080ModeHierarchy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("network-hierarchy-none", 0), ("network-hierarchy-h1", 1), ("network-hierarchy-h2", 2), ("network-hierarchy-h4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeHierarchy.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeHierarchy.setDescription('Hierarchy mode. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080Modeifft = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ifft-mode-2k", 0), ("ifft-mode-4k", 1), ("ifft-mode-8k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Modeifft.setStatus('current')
if mibBuilder.loadTexts: pt3080Modeifft.setDescription('IFFT 2k, 4k or 8k mode. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeCodeRateHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("code-rate-1-2", 0), ("code-rate-2-3", 1), ("code-rate-3-4", 2), ("code-rate-5-6", 3), ("code-rate-7-8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeCodeRateHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeCodeRateHighPrio.setDescription('High Priority Code Rate. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeCodeRateLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("code-rate-1-2", 0), ("code-rate-2-3", 1), ("code-rate-3-4", 2), ("code-rate-5-6", 3), ("code-rate-7-8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeCodeRateLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeCodeRateLowPrio.setDescription('Low Priority Code Rate. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeConstellation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("qpsk", 0), ("qam16", 1), ("qam64", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeConstellation.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeConstellation.setDescription('If QPSK is selected and Hierarchical is <> NONE, \n        then Hierarchical will be forced to NONE. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("guard-1-32", 0), ("guard-1-16", 1), ("guard-1-8", 2), ("guard-1-4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeGuardInterval.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeGuardInterval.setDescription('Guard Interval. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeCellID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeCellID.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeCellID.setDescription('Sets the Cell ID value. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeEnableCellID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeEnableCellID.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeEnableCellID.setDescription('Enables Cell ID in the TPS information. Cannot be set if pt3080ModeMipControl is on(1).\n         Cannot be set to off(0) if pt3080ModeEnableDVBH is on(1)')
pt3080ModeDeepInterleaver = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeDeepInterleaver.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeDeepInterleaver.setDescription('Enables Deep Interleaver. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeEnableDVBH = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeEnableDVBH.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeEnableDVBH.setDescription('Enables DVB-H mode')
pt3080ModeMpeFecLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMpeFecLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMpeFecLowPrio.setDescription('Enables MPE Fec Low Priority. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeMpeFecHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMpeFecHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMpeFecHighPrio.setDescription('Enables MPE Fec High Priority. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeTimeSlicingLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeTimeSlicingLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeTimeSlicingLowPrio.setDescription('Enables timeslicing High Priority. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeTimeSlicingHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeTimeSlicingHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeTimeSlicingHighPrio.setDescription('Enables timeslicing High Priority. Cannot be set if pt3080ModeMipControl is on(1).')
pt3080ModeSfnDelayOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9999999, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeSfnDelayOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeSfnDelayOffset.setDescription('SFN delay offset')
pt3080ModeTxIdent = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeTxIdent.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeTxIdent.setDescription('The transport stream control identifier')
pt3080ModeMipControl = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMipControl.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMipControl.setDescription('Enables transport stream control of modulator')
pt3080ModeMfnKeepNullPackets = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMfnKeepNullPackets.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMfnKeepNullPackets.setDescription('Enables MFN mode keep null packets option')
pt3080ModeNetworkDelayHP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 20), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayHP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayHP.setDescription('Current network delay of HP TS')
pt3080ModeNetworkDelayMinHP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 21), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMinHP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMinHP.setDescription('Minimum network delay  of HP TS seen since last reset')
pt3080ModeNetworkDelayMaxHP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 22), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMaxHP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMaxHP.setDescription('Maximum network delay  of HP TS seen since last reset')
pt3080ModeMaxNetworkDelayHP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 23), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeMaxNetworkDelayHP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMaxNetworkDelayHP.setDescription('Maximum allowed network delay, as received from MIP')
pt3080ModeNetworkDelayMarginHP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 24), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMarginHP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMarginHP.setDescription('Difference between Actual Network Delay and Max. Allowed Network Delay')
pt3080ModeNetworkDelayLP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 25), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayLP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayLP.setDescription('Current network delay of LP TS')
pt3080ModeNetworkDelayMinLP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 26), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMinLP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMinLP.setDescription('Minimum network delay  of LP TS seen since last reset')
pt3080ModeNetworkDelayMaxLP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 27), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMaxLP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMaxLP.setDescription('Maximum network delay  of LP TS seen since last reset')
pt3080ModeMaxNetworkDelayLP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 28), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeMaxNetworkDelayLP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMaxNetworkDelayLP.setDescription('Maximum allowed network delay, as received from MIP')
pt3080ModeNetworkDelayMarginLP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 29), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMarginLP.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayMarginLP.setDescription('Difference between Actual Network Delay and Max. Allowed Network Delay')
pt3080ModeNetworkDelayReset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeNetworkDelayReset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeNetworkDelayReset.setDescription('Reset network delay. Always reads back as noop(0)')
pt3080ModeDefaultMIPOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputPower.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputPower.setDescription('Default MIP value for Output Power Level. Cannot be set if  pt3080ModeMipControlOutputPower is on(1)')
pt3080ModeDefaultMIPOutputTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9999999, 9999999))).setUnits('x100ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputTimeOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputTimeOffset.setDescription('Default MIP value for Output SFN Time Offset. Cannot be set if  pt3080ModeMipControlOutputTimeOffset is on(1)')
pt3080ModeDefaultMIPOutputCellID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputCellID.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputCellID.setDescription('Default MIP value for Output Cell ID. Cannot be set if  pt3080ModeMipControlOutputCellId is on(1)')
pt3080ModeDefaultMIPOutputFreqOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8388608, 8388607))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputFreqOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeDefaultMIPOutputFreqOffset.setDescription('Default MIP value for Output frequency Offset. Cannot be set if  pt3080ModeMipControlOutputFreqOffset is on(1)')
pt3080ModeMIPMaxSFNDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 35), Integer32()).setUnits('x100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ModeMIPMaxSFNDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMIPMaxSFNDelay.setDescription('The MIP value for SFN maximum delay')
pt3080ModeMipControlOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMipControlOutputPower.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMipControlOutputPower.setDescription('Enables transport stream control of ModeDefaultMIPOutputPower')
pt3080ModeMipControlOutputTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMipControlOutputTimeOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMipControlOutputTimeOffset.setDescription('Enables transport stream control of ModeDefaultMIPOutputTimeOffset')
pt3080ModeMipControlOutputCellId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMipControlOutputCellId.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMipControlOutputCellId.setDescription('Enables transport stream control of ModeDefaultMIPOutputCellId')
pt3080ModeMipControlOutputFreqOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ModeMipControlOutputFreqOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeMipControlOutputFreqOffset.setDescription('Enables transport stream control of ModeDefaultMIPOutputFreqOffset')
pt3080ReceptionGainControl = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("freeze", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionGainControl.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGainControl.setDescription('Controls the gain function mode.')
pt3080ReceptionGainManualValue = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 700))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionGainManualValue.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGainManualValue.setDescription('Defines manual gain value.')
pt3080ReceptionGainLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionGainLimitEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGainLimitEnable.setDescription('Controls the Reception RF Gain limit function.')
pt3080ReceptionGainLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 700))).setUnits('0.1 db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionGainLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGainLimit.setDescription('Defines gain limit value.')
pt3080ReceptionGainCurrent = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 13), Integer32()).setUnits('0.01 db').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionGainCurrent.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGainCurrent.setDescription('The current total gain.')
pt3080ReceptionAGCMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("slow", 0), ("fast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionAGCMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionAGCMode.setDescription('Controls the AGC function mode.')
pt3080ReceptionAGCHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionAGCHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionAGCHysteresis.setDescription('Defines the AGC function Hysteresis.')
pt3080ReceptionBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("r5", 0), ("r6", 1), ("r7", 2), ("r8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionBandwidth.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionBandwidth.setDescription('Controls reception bandwidth')
pt3080ReceptionRFFrequency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000000, 954000000))).setUnits('1 hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFFrequency.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFFrequency.setDescription('Defines the reception frequency for the tuner.')
pt3080ReceptionRFFrequencyOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500000, 500000))).setUnits('1 hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFFrequencyOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFFrequencyOffset.setDescription('Defines the offset to be added to the reception frequency for\n         the tuner.')
pt3080ReceptionRFPolarity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("norm", 0), ("inv", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFPolarity.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFPolarity.setDescription('Controls RF reception Polarity')
pt3080ReceptionRFSquelchEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchEnable.setDescription('Controls the squelch function.')
pt3080ReceptionRFSquelchThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-800, -70))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchThreshold.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchThreshold.setDescription('Defines the Squelch function threshold.')
pt3080ReceptionRFSquelchHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFSquelchHysteresis.setDescription('Defines the Squelch function Hysteresis.')
pt3080ReceptionRFTrackingFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFTrackingFilterEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFTrackingFilterEnable.setDescription('Controls the Reception RF Tracking Filter.')
pt3080ReceptionRFifLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 36), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionRFifLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFifLevel.setDescription('The current if level from the tuner.')
pt3080ReceptionRFNominalInputLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-400, 100))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFNominalInputLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFNominalInputLevel.setDescription('The nominal input level on the tuner. The dynamic range of the\n         tuner is from 20dB below nominal level to nominal level')
pt3080ReceptionRFInputLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 21), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevel.setDescription('The current RF input level on the tuner.')
pt3080ReceptionRFInputLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8000, -700))).setUnits('0.01 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevelThreshold.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevelThreshold.setDescription('Defines the Input level threshold.')
pt3080ReceptionRFInputLevelHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevelHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionRFInputLevelHysteresis.setDescription('Defines the Input Level Hysteresis.')
pt3080ReceptionIFFrequency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("if36mhz", 0), ("if36p15mhz", 1), ("if40mhz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionIFFrequency.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFFrequency.setDescription('Defines the reception frequency for the tuner.')
pt3080ReceptionIFPolarity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("norm", 0), ("inv", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionIFPolarity.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFPolarity.setDescription('Controls IF reception Polarity')
pt3080ReceptionIFInputLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 22), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionIFInputLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFInputLevel.setDescription('Shows the current IF input level')
pt3080ReceptionIFInputPolicy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rf", 0), ("if", 1), ("rfav", 2), ("ifav", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionIFInputPolicy.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFInputPolicy.setDescription('Controls RF/IF reception Policy')
pt3080ReceptionIFInput = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("if", 0), ("rf", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionIFInput.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFInput.setDescription('Shows the current RF/IF input selected')
pt3080ReceptionIFRFtoIFHoldoverDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionIFRFtoIFHoldoverDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFRFtoIFHoldoverDelay.setDescription('The holdover delay for switching reception from RF to IF input.')
pt3080ReceptionIFIFtoRFHoldoverDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReceptionIFIFtoRFHoldoverDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionIFIFtoRFHoldoverDelay.setDescription('The holdover delay for switching reception from IF to RF input.')
pt3080ReceptionTunerHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWVersion.setDescription('The tuner HW version.')
pt3080ReceptionTunerHWType = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWType.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWType.setDescription('The tuner HW type.')
pt3080ReceptionTunerHWID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWID.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWID.setDescription('The tuner HW ID.')
pt3080ReceptionTunerHWSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWSerialNumber.setDescription('The tuner HW Serial Number.')
pt3080ReceptionTunerHWCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationDate.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationDate.setDescription('The tuner HW Calibration Date.')
pt3080ReceptionTunerHWCalibrationDataVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationDataVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationDataVersion.setDescription('The tuner HW Calibration Data Version.')
pt3080ReceptionTunerHWCalibrationSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 26, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationSWVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionTunerHWCalibrationSWVersion.setDescription('The tuner HW Calibration SW Version.')
pt3080ASIInput1SyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput1SyncTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1SyncTimeout.setDescription('Specifies the maximum time accepted between received TS packages.')
pt3080ASIInput2SyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput2SyncTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2SyncTimeout.setDescription('Specifies the maximum time accepted between received TS packages.')
pt3080ASIInput1DataErrorLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('0.1 bits/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput1DataErrorLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1DataErrorLimit.setDescription('Specifies the alarm limit for date error rate.')
pt3080ASIInput2DataErrorLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('0.1 bits/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput2DataErrorLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2DataErrorLimit.setDescription('Specifies the alarm limit for date error rate.')
pt3080ASIInput1SyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1SyncStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1SyncStatus.setDescription('Current state of the sync detector')
pt3080ASIInput2SyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2SyncStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2SyncStatus.setDescription('Current state of the sync detector')
pt3080ASIInput1SyncSignal = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("norm", 1), ("inv", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1SyncSignal.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1SyncSignal.setDescription('Current state of the sync detector signal type')
pt3080ASIInput2SyncSignal = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("norm", 1), ("inv", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2SyncSignal.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2SyncSignal.setDescription('Current state of the sync detector signal type')
pt3080ASIInput1SyncTSSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("ts188", 1), ("ts204", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1SyncTSSize.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1SyncTSSize.setDescription('Current TS packet size determined by the sync detector')
pt3080ASIInput2SyncTSSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("ts188", 1), ("ts204", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2SyncTSSize.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2SyncTSSize.setDescription('Current TS packet size determined by the sync detector')
pt3080ASIInput1LineErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 6), Integer32()).setUnits('1 bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1LineErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1LineErrors.setDescription('Counts the number of line errors including IDLE stuffing.')
pt3080ASIInput2LineErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 56), Integer32()).setUnits('1 bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2LineErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2LineErrors.setDescription('Counts the number of line errors including IDLE stuffing.')
pt3080ASIInput1LineRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 7), Integer32()).setUnits('0.1 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1LineRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1LineRate.setDescription('Current line rate')
pt3080ASIInput2LineRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 57), Integer32()).setUnits('0.1 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2LineRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2LineRate.setDescription('Current line rate')
pt3080ASIInput1LineErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 8), Integer32()).setUnits('0.1 bits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1LineErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1LineErrorRate.setDescription('Current line error rate')
pt3080ASIInput2LineErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 58), Integer32()).setUnits('0.1 bits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2LineErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2LineErrorRate.setDescription('Current line error rate')
pt3080ASIInput1DataErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 9), Integer32()).setUnits('1 bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1DataErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1DataErrors.setDescription('Counts the number of data errors excluding IDLE stuffing.')
pt3080ASIInput2DataErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 59), Integer32()).setUnits('1 bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2DataErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2DataErrors.setDescription('Counts the number of data errors excluding IDLE stuffing.')
pt3080ASIInput1DataRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 10), Integer32()).setUnits('0.1 Mbps/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1DataRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1DataRate.setDescription('Current data rate')
pt3080ASIInput2DataRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 60), Integer32()).setUnits('0.1 Mbps/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2DataRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2DataRate.setDescription('Current data rate')
pt3080ASIInput1DataErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 11), Integer32()).setUnits('0.1 bits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput1DataErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1DataErrorRate.setDescription('Current data error rate')
pt3080ASIInput2DataErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 61), Integer32()).setUnits('0.1 bits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIInput2DataErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2DataErrorRate.setDescription('Current data error rate')
pt3080ASIInput1ClearErrorCounters = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput1ClearErrorCounters.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput1ClearErrorCounters.setDescription('Clear all error counters and reset all rates')
pt3080ASIInput2ClearErrorCounters = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 30, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIInput2ClearErrorCounters.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIInput2ClearErrorCounters.setDescription('Clear all error counters and reset all rates')
pt3080InputRefDevType = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tcxo-int", 0), ("ocxo-pt3710-10", 1), ("ocxo-pt3710-20", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputRefDevType.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefDevType.setDescription('Type of TCXO/OCXO')
pt3080InputRefCalDate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 91), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputRefCalDate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefCalDate.setDescription('Calibration Date')
pt3080InputRefCalVer = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputRefCalVer.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefCalVer.setDescription('Calibration SW Version')
pt3080InputRefDirection = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRefDirection.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefDirection.setDescription('monitors the Reference signal direction. state: - inputOutput[inputOutput_INPUT]\n         - inputOutput[inputOutput_OUTPUT]')
pt3080InputRefSource = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("ext", 1), ("int", 2), ("gps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRefSource.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefSource.setDescription('Defines the input reference synchronisation source. If the value\n         AUTO is chosen, the source is chosen automatically between \n        available sources. The order of choice is GPS->EXT10MHz->INT.\n         If the value EXT is chosen, the external clock is chosen as\n         source If the value INT is chosen, the internal clock is chosen\n         as source. If the value GPS is chosen, the GNSS 1PPS clock \n        is chosen as source.')
pt3080InputRefStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("external", 0), ("external-10mhz", 1), ("external-1pps", 2), ("internal", 3), ("gnss", 4), ("asi1", 5), ("asi2", 6), ("ndel", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputRefStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRefStatus.setDescription('returns the current input reference synchronisation source.')
pt3080InputRef10MhzImpedance = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("o-50", 0), ("himp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef10MhzImpedance.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef10MhzImpedance.setDescription('Defines the external 10 MHz input reference synchronisation \n        source impedance. The value is either 50O or high impedance.')
pt3080InputRef10MhzHoldoverDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef10MhzHoldoverDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef10MhzHoldoverDelay.setDescription('Defines the external 10 MHz input reference synchronisation \n        source impedance. The value is either 50O or high impedance.')
pt3080InputRef10MhzHoldoverForever = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef10MhzHoldoverForever.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef10MhzHoldoverForever.setDescription('The holdover delay for input reference source 10MHz failure \n        is forever')
pt3080InputRef1PPSImpedance = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("o-50", 0), ("himp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef1PPSImpedance.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef1PPSImpedance.setDescription('Defines the external 1 PPS input reference synchronisation source\n         impedance. The value is either 50ohm or high impedance.')
pt3080InputRef1PPSHoldoverDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef1PPSHoldoverDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef1PPSHoldoverDelay.setDescription('Defines the external 1 PPS input reference synchronisation source\n         impedance. The value is either 50ohm or high impedance.')
pt3080InputRef1PPSHoldoverForever = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef1PPSHoldoverForever.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef1PPSHoldoverForever.setDescription('The holdover delay for input reference source 1 pps failure \n        is forever')
pt3080InputRef1PPSTrigSlope = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rising", 0), ("falling", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef1PPSTrigSlope.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef1PPSTrigSlope.setDescription('Defines the trigger edge of the external 1PPS input reference\n         clock. The value is either RISING or FALLING.')
pt3080InputRef1PPSTrigLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 16))).setUnits('0.1 v').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputRef1PPSTrigLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080InputRef1PPSTrigLevel.setDescription('Defines the trigger level of the external 1PPS input reference\n         clock')
pt3080InputASIAutoRoutingDelayHp2Lp = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingDelayHp2Lp.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingDelayHp2Lp.setDescription('The delay before performing the actual substitution where TS-Primary\n         -> TS-LP and TS-Secondary -> TS-HP')
pt3080InputASIAutoRoutingDelayLp2Hp = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingDelayLp2Hp.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingDelayLp2Hp.setDescription('The delay before performing the actual substitution where TS-Primary\n         -> TS-HP and TS-Secondary -> TS-LP')
pt3080InputASIHoldoverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASIHoldoverTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASIHoldoverTimeout.setDescription('The time ASI Holdover will be active, if seamless ASI switching\n         is not possible')
pt3080InputASITSPrimarySource = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("asi-in-1", 0), ("asi-in-2", 1), ("demodulator-1", 2), ("demodulator-2", 3), ("tsoip-rx1", 4), ("tsoip-rx2", 5), ("satRecv", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASITSPrimarySource.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASITSPrimarySource.setDescription('The TS-Primary input source connector selected')
pt3080InputASITSSecondarySource = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("asi-in-1", 0), ("asi-in-2", 1), ("demodulator-1", 2), ("demodulator-2", 3), ("tsoip-rx1", 4), ("tsoip-rx2", 5), ("satRecv", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASITSSecondarySource.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASITSSecondarySource.setDescription('The TS-Secondary input source connector selected')
pt3080InputASIAutoRoutingPolicy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("only-use-primary", 0), ("only-use-secondary", 1), ("use-primary-if-available", 2), ("use-any-available", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingPolicy.setStatus('current')
if mibBuilder.loadTexts: pt3080InputASIAutoRoutingPolicy.setDescription('The policy to use for TS auto routing')
pt3080InputTSPrimaryMaxPATDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxPATDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxPATDelay.setDescription('The Max delay between the Program Association Table (PAT) on\n         the incomming transport stream.')
pt3080InputTSPrimaryMaxPATDelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxPATDelayEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxPATDelayEnable.setDescription('Enables TS switching if the Max delay between PAT table updates\n         has been exceeded.')
pt3080InputTSPrimaryExpectedTSID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedTSID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedTSID.setDescription('The TS-ID value expected on the incoming TS stream.')
pt3080InputTSPrimaryExpectedTSIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedTSIDEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedTSIDEnable.setDescription('Enables TS switching if the TS-ID is not the expected value.')
pt3080InputTSPrimaryExpectedNWID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedNWID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedNWID.setDescription('The NW-ID value expected on the incoming TS stream.')
pt3080InputTSPrimaryExpectedNWIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedNWIDEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryExpectedNWIDEnable.setDescription('Enables TS switching if the NW-ID is not the expected value.')
pt3080InputTSPrimaryMaxStuffingrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStuffingrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStuffingrate.setDescription('The expected stuffing rate on the incoming TS stream.')
pt3080InputTSPrimaryMaxStuffingrateEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStuffingrateEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStuffingrateEnable.setDescription('Enables TS switching if the Stuffing rate is over the expected\n         value.')
pt3080InputTSPrimaryMinDelaymargin = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMinDelaymargin.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMinDelaymargin.setDescription('The minimum delay margin of the incoming TS stream.')
pt3080InputTSPrimaryMinDelaymarginEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMinDelaymarginEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMinDelaymarginEnable.setDescription('Enables TS switching if the Minimum Delay margin is not according\n         to the expected value.')
pt3080InputTSPrimaryMaxMissingmip = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxMissingmip.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxMissingmip.setDescription('The maximum seconds of missing mip information from the incoming\n         TS stream.')
pt3080InputTSPrimaryMaxMissingmipEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxMissingmipEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxMissingmipEnable.setDescription('Enables TS switching if the Maximum missing mip is not according\n         to the expected value.')
pt3080InputTSSecondaryMaxPATDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxPATDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxPATDelay.setDescription('The Max delay between the Program Association Table (PAT) on\n         the incomming transport stream.')
pt3080InputTSSecondaryMaxPATDelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxPATDelayEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxPATDelayEnable.setDescription('Enables TS switching if the Max delay between PAT table updates\n         has been exceeded.')
pt3080InputTSSecondaryExpectedTSID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedTSID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedTSID.setDescription('The TS-ID value expected on the incoming TS stream.')
pt3080InputTSSecondaryExpectedTSIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedTSIDEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedTSIDEnable.setDescription('Enables TS switching if the TS-ID is not the expected value.')
pt3080InputTSSecondaryExpectedNWID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedNWID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedNWID.setDescription('The NW-ID value expected on the incoming TS stream.')
pt3080InputTSSecondaryExpectedNWIDEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedNWIDEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryExpectedNWIDEnable.setDescription('Enables TS switching if the NW-ID is not the expected value.')
pt3080InputTSSecondaryMaxStuffingrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStuffingrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStuffingrate.setDescription('The expected stuffing rate on the incoming TS stream.')
pt3080InputTSSecondaryMaxStuffingrateEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStuffingrateEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStuffingrateEnable.setDescription('Enables TS switching if the Stuffing rate is over the expected\n         value.')
pt3080InputTSSecondaryMinDelaymargin = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMinDelaymargin.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMinDelaymargin.setDescription('The minimum delay margin of the incoming TS stream.')
pt3080InputTSSecondaryMinDelaymarginEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMinDelaymarginEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMinDelaymarginEnable.setDescription('Enables TS switching if the Minimum Delay margin is not according\n         to the expected value.')
pt3080InputTSSecondaryMaxMissingmip = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('1 secs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxMissingmip.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxMissingmip.setDescription('The maximum seconds of missing mip information from the incoming\n         TS stream.')
pt3080InputTSSecondaryMaxMissingmipEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxMissingmipEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxMissingmipEnable.setDescription('Enables TS switching if the Maximum missing mip is not according\n         to the expected value.')
pt3080InputTSPrimaryMaxStsJitter = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('100ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStsJitter.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryMaxStsJitter.setDescription('The Max STS jitter on the TS-Primary')
pt3080InputTSSecondaryMaxStsJitter = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('100ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStsJitter.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryMaxStsJitter.setDescription('The Max STS jitter on the TS-Secondary')
pt3080InputTSPrimaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1), ("nosync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSPrimaryStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryStatus.setDescription('The current state for TS-Primary. Unavailable means violation of alarms.')
pt3080InputTSSecondaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1), ("nosync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSSecondaryStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryStatus.setDescription('The current state for TS-Secondary. Unavailable means violation of alarms.')
pt3080InputTSHp = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("asi-in-1", 0), ("asi-in-2", 1), ("demodulator-1", 2), ("demodulator-2", 3), ("tsoip-rx1", 4), ("tsoip-rx2", 5), ("satRecv", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHp.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHp.setDescription('The input source currently On Air. (TS-HP)')
pt3080InputTSLp = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("asi-in-1", 0), ("asi-in-2", 1), ("demodulator-1", 2), ("demodulator-2", 3), ("tsoip-rx1", 4), ("tsoip-rx2", 5), ("satRecv", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLp.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLp.setDescription('The input source currently used as backup. (TS-LP)')
pt3080InputEffectiveAutoroutingPolicy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("only-primary", 0), ("only-secondary", 1), ("prefer-primary", 2), ("any-available", 3), ("seamless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputEffectiveAutoroutingPolicy.setStatus('current')
if mibBuilder.loadTexts: pt3080InputEffectiveAutoroutingPolicy.setDescription('Reflects the effective ASI Autorouting Policy')
pt3080InputTSHpBitrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 41), Integer32()).setUnits('Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpBitrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpBitrate.setDescription('Current bitrate for On Air TS. (TS-HP)')
pt3080InputTSHpPacketsBuffered = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 42), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpPacketsBuffered.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpPacketsBuffered.setDescription('Current number of packets buffered for On Air TS (TS-HP)')
pt3080InputTSHpPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 43), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpPacketSize.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpPacketSize.setDescription('Current size of packets for On Air TS (TS-HP)')
pt3080InputTSHpStuffingrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 44), Integer32()).setUnits('Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpStuffingrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpStuffingrate.setDescription('Current NULL stuffing as a percentage of the\n         current bitrate for On Air TS (TS-HP)')
pt3080InputTSHpTSID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpTSID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpTSID.setDescription('Current Transport Stream ID for On Air TS. (TS-HP)')
pt3080InputTSHpNWID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSHpNWID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSHpNWID.setDescription('Current Network ID for On Air TS. (TS-HP)')
pt3080InputTSLpBitrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 47), Integer32()).setUnits('Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpBitrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpBitrate.setDescription('Current bitrate for Backup TS. (TS-LP)')
pt3080InputTSLpPacketsBuffered = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 48), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpPacketsBuffered.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpPacketsBuffered.setDescription('Current number of packets buffered for Backup TS. (TS-LP)')
pt3080InputTSLpPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 49), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpPacketSize.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpPacketSize.setDescription('Current size of packets for Backup TS. (TS-LP)')
pt3080InputTSLpStuffingrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 50), Integer32()).setUnits('Permille').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpStuffingrate.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpStuffingrate.setDescription('Current NULL stuffing as a percentage of the\n         current bitrate for  Backup TS. (TS-LP)')
pt3080InputTSLpTSID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpTSID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpTSID.setDescription('Current Transport Stream ID for Backup TS. (TS-LP)')
pt3080InputTSLpNWID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSLpNWID.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSLpNWID.setDescription('Current Network ID for Backup TS. (TS-LP)')
pt3080InputTSPrimaryStsJitter = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 53), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitter.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitter.setDescription('Current STS jitter on the TS-Primary.')
pt3080InputTSPrimaryStsJitterMax = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 54), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterMax.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterMax.setDescription('The Maximum STS jitter value seen on the TS-Primary')
pt3080InputTSPrimaryStsJitterMin = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 55), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterMin.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterMin.setDescription('The minimum STS jitter value seen on the TS-Primary')
pt3080InputTSPrimaryStsJitterReset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("reset-min-max", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterReset.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSPrimaryStsJitterReset.setDescription('Reset the pt3080InputTSPrimaryStsJitterMax and pt3080InputTSPrimaryStsJitterMin values')
pt3080InputTSSecondaryStsJitter = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 57), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitter.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitter.setDescription('Current STS jitter on the TS-Secondary')
pt3080InputTSSecondaryStsJitterMax = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 58), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterMax.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterMax.setDescription('The Maximum STS jitter value seen on the TS-Secondary')
pt3080InputTSSecondaryStsJitterMin = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 59), Integer32()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterMin.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterMin.setDescription('The minimum STS jitter value seen on the TS-Secondary')
pt3080InputTSSecondaryStsJitterReset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 3, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("reset-min-max", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterReset.setStatus('current')
if mibBuilder.loadTexts: pt3080InputTSSecondaryStsJitterReset.setDescription('Reset the pt3080InputTSSecondaryStsJitterMax and\n         pt3080InputTSSecondaryStsJitterMin values')
pt3080OutputBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputBandwidth.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputBandwidth.setDescription('Output Bandwidth')
pt3080OutputChannel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(21, 69))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputChannel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputChannel.setDescription('Channel settings')
pt3080OutputSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-synchronized", 0), ("synchronized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputSynchronized.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputSynchronized.setDescription('The values of pt3080OutputRfFrequency, pt3080OutputBandwidth and\n         pt3080OutputChannel are synchronized aaccording to\n         freq = (bw * channel) + 306000000.')
pt3080OutputMute = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputMute.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputMute.setDescription('Output mute. When set the mute reason UserRequest is ORed into the mute reason set.\n         When read it is the logical OR of all mute reasons')
pt3080OutputPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(280, 490))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputPowerLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputPowerLevel.setDescription('The desired output power level.')
pt3080OutputIfEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputIfEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputIfEnable.setDescription('Control IF output')
pt3080OutputIfFrequency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35150000, 37150000))).setUnits('1 Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputIfFrequency.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputIfFrequency.setDescription('Output Frequency for I/F')
pt3080OutputIfPolarity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("norm", 0), ("inv", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputIfPolarity.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputIfPolarity.setDescription('Control IF output polarity')
pt3080OutputIfLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 0))).setUnits('0.01 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputIfLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputIfLevel.setDescription('Output Level for I/F')
pt3080OutputMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("standby", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputMode.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputMode.setDescription('Control RF output mode')
pt3080OutputEffectiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 17), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputEffectiveLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputEffectiveLevel.setDescription('Effective RF Output Level')
pt3080OutputActualLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 18), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputActualLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputActualLevel.setDescription('Actual RF Output Level')
pt3080OutputPolarity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("norm", 0), ("inv", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputPolarity.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputPolarity.setDescription('Control RF output polarity')
pt3080OutputRfFrequency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000000, 860000000))).setUnits('1 Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfFrequency.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfFrequency.setDescription('Output RF frequency')
pt3080OutputRfFrequencyOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-8388608, 8388607))).setUnits('1 Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfFrequencyOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfFrequencyOffset.setDescription('Output RF frequency offset')
pt3080OutputRfLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('0.01 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfLevel.setDescription('Sets the output level in 0.01dB steps, 0dB is +6dBm on IF, 0dBm\n         on RF')
pt3080OutputRfCableMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("const", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableMode.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableMode.setDescription('Control whether Cable Level loss compensation should be enabled')
pt3080OutputRfCableConstantLevelOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableConstantLevelOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableConstantLevelOffset.setDescription('Constant level offset to add to RF Output level. Only used if\n         mode is Constant.')
pt3080OutputRfCableFrequencyLevelOffset0 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset0.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset0.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfCableFrequencyLevelOffset1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset1.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset1.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfCableFrequencyLevelOffset2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset2.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset2.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfCableFrequencyLevelOffset3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset3.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset3.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfCableFrequencyLevelOffset4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset4.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset4.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfCableFrequencyLevelOffset5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 10000))).setUnits('0.001 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset5.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfCableFrequencyLevelOffset5.setDescription('Frequency depedent level offset to add to RF Output level. Only\n         used if mode is Automatic.')
pt3080OutputRfDetectedActualLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 19), Integer32()).setUnits('0.01 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputRfDetectedActualLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfDetectedActualLevel.setDescription('Detected Output Level for RF')
pt3080OutputRfDetectedLowerLevelLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfDetectedLowerLevelLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfDetectedLowerLevelLimit.setDescription('Limit to how much lower the detected RF output level can be \n        than the configured level.')
pt3080OutputRfDetectedLowerLevelcontrol = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfDetectedLowerLevelcontrol.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfDetectedLowerLevelcontrol.setDescription('Controls whether the lower limit for RF output level is enforced.')
pt3080OutputRfDetectedHigherLevelLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfDetectedHigherLevelLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfDetectedHigherLevelLimit.setDescription('Limit to how much higher the detected RF output level can be\n         than the configured level.')
pt3080OutputRfDetectedHigherLevelcontrol = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfDetectedHigherLevelcontrol.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfDetectedHigherLevelcontrol.setDescription('Controls whether the higher limit for RF output level is enforced.')
pt3080OutputRfAlcControl = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfAlcControl.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcControl.setDescription('Controls whether the ALC system is enabled or disabled.')
pt3080OutputRfAlcSense = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfsense1", 0), ("rfsense2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfAlcSense.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcSense.setDescription('Controls which sense port is used by the ALC system if the ALC\n         is enabled.')
pt3080OutputRfAlcSetpointPort1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-11000, 11000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfAlcSetpointPort1.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcSetpointPort1.setDescription('ALC setpoint for RF Sense Port 1')
pt3080OutputRfAlcSetpointPort2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-11000, 11000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080OutputRfAlcSetpointPort2.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcSetpointPort2.setDescription('ALC setpoint for RF Sense Port 2')
pt3080OutputRfAlcStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputRfAlcStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcStatus.setDescription('Status for whether the ALC system is enabled or disabled.')
pt3080OutputRfAlcStatusInformation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 4, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080OutputRfAlcStatusInformation.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputRfAlcStatusInformation.setDescription('Information on the state of the ALC system.')
pt3080GpsBias = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsBias.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsBias.setDescription('Defines the bias to be either on or off for the GPS antenna \n        DC supply (5V or 3V DC). An active GPS antenna requires a power\n         supply i.e. requires this parameter to set to ON.')
pt3080GpsbiasVoltage = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gpsant-5v", 0), ("gpsant-33v", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsbiasVoltage.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsbiasVoltage.setDescription('Defines the gps antenna bias voltage. An active GPS antenna \n        requires a power supply of either 3V or 5V.')
pt3080GpsCableDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18125, 13750))).setUnits('0.1 ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsCableDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsCableDelay.setDescription('Defines the antenna cable compensation delay. If the GPS antenna\n         is situated far away from the receiver itself the signal will\n         be delayed and must be compensated.')
pt3080GpsHoldoverForever = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsHoldoverForever.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsHoldoverForever.setDescription('Defines whether the GPS system is allowed to operate infinitely\n         (YES) following loss of GPS locking using the internal GPS \n        chip oscillator or not (NO).In case NO is chosen the GPS holdover\n         time applies.')
pt3080GpsHoldoverTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsHoldoverTime.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsHoldoverTime.setDescription('Defines the GPS holdover time. This value is ignored if the \n        holdover forever (see below) is set to YES If the GPS locking\n         is lost the system is allowed to continue operating for holdover\n         time seconds using the internal GPS chip oscillator. If - when\n         the holdover time interval expires - the GPS locking it still\n         lost, the GPS operation will be maintained using external timing\n         if present. If external timing is not present the GPS operation\n         will be maintained using the internal motherboard oscillator.')
pt3080GpsSatelliteSystemGPS = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGPS.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGPS.setDescription('Controls whether GPS satellites are used to obtain position \n        and timing information.')
pt3080GpsSatelliteSystemGLONASS = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGLONASS.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGLONASS.setDescription('Controls whether GLONASS satellites are used to obtain position\n         and timing information.')
pt3080GpsSatelliteSystemGALILEO = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGALILEO.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemGALILEO.setDescription('Controls whether GALILEO satellites are used to obtain position\n         and timing information.')
pt3080GpsSatelliteSystemCOMPASS = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemCOMPASS.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsSatelliteSystemCOMPASS.setDescription('Controls whether COMPASS satellites are used to obtain position\n         and timing information.')
pt3080GpsVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsVersion.setDescription('Returns the GPS chip firmware version as a string.')
pt3080Gps1PPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Gps1PPSStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080Gps1PPSStatus.setDescription('Returns the current locking state of the GPS system. The value\n         LOCKED indicates that the GPS system is locked to a sufficient\n         number of satellites to perform well. UNLOCKED indicates that\n         it is not. For the GPS system to perform well at least 4 satellites\n         must be visible with a proper signal to noise ratio.')
pt3080GpsState = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsState.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsState.setDescription('Returns a string describing the GPS state. For informational\n         purposes.')
pt3080GpsVisibleSatellitesSnr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 14), Integer32()).setUnits('0.1 dBHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsVisibleSatellitesSnr.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsVisibleSatellitesSnr.setDescription('Returns the average signal to noise ratio of all visible satellites\n         via the built-in GPS receiver')
pt3080GpsVisibleSatellites = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsVisibleSatellites.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsVisibleSatellites.setDescription('Returns the number of currently visible satellites via the built-in\n         GPS receiver. A satellite is visible if at all detectable by\n         the GPS system i.e. regardless of signal to noise ratio. Note\n         that the upper value N can change with the launch of new satellites.\n         For some time, however, the GPS system has had a total of 24\n         satellites.')
pt3080GpsTrackedSatellites = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsTrackedSatellites.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsTrackedSatellites.setDescription('Returns the number of currently tracked satellites via the GPS\n         receiver.')
pt3080GpsLongtitude = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsLongtitude.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsLongtitude.setDescription('Returns - as a string - the current longtitude derived from \n        the received GPS signal(s). The string format is DDD MM SS C.\n         according to the following: - DD denotes degrees in the intervals\n         [0 .. 180]. MM and SS denote minutes/seconds in the interval\n         [0 .. 59]. C denotes E, W (East, West).')
pt3080GpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsLatitude.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsLatitude.setDescription('Returns - as a string - the current latitude derived from the\n         received GPS signal(s). The string format is DD MM SS C. according\n         to the following: - DD denotes degrees in the intervals [0 \n        .. 90]. MM and SS denote minutes/seconds in the interval [0 \n        .. 59]. C denotes N, S (North, South).')
pt3080GpsAltitude = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GpsAltitude.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsAltitude.setDescription('Returns - as a string - the current altitude derived from the\n         received GPS signal(s). The string format is HHHH.c;. according\n         to the following: HHHH.c denotes the altitude in metres with\n         one digit after the comma. The altitude can be negative.')
pt3080TSoIPRx1ReceiverEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1ReceiverEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1ReceiverEnable.setDescription('Enables the reception of IP/UDP packets with transport stream\n         data to be forward into the modulator.')
pt3080TSoIPRx2ReceiverEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2ReceiverEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2ReceiverEnable.setDescription('Enables the reception of IP/UDP packets with transport stream\n         data to be forward into the modulator.')
pt3080TSoIPRx1LanSelect = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("flan", 0), ("alan", 1), ("tlan", 2), ("blan", 3), ("plan", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1LanSelect.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1LanSelect.setDescription('Specifies which virtual LAN interface to receive IP/UDP packets\n         from.')
pt3080TSoIPRx2LanSelect = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("flan", 0), ("alan", 1), ("tlan", 2), ("blan", 3), ("plan", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2LanSelect.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2LanSelect.setDescription('Specifies which virtual LAN interface to receive IP/UDP packets\n         from.')
pt3080TSoIPRx1Multicast = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1Multicast.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1Multicast.setDescription('Enables the reception of Multicast IP/UDP packets with transport\n         stream data to be forward into the modulator. If disabled, \n        only unicast IP/UDP packets are considdered.')
pt3080TSoIPRx2Multicast = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2Multicast.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2Multicast.setDescription('Enables the reception of Multicast IP/UDP packets with transport\n         stream data to be forward into the modulator. If disabled, \n        only unicast IP/UDP packets are considdered.')
pt3080TSoIPRx1Protocol = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("udp", 0), ("rtp", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1Protocol.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1Protocol.setDescription('Selects which protocol to expect incoming packets to have.')
pt3080TSoIPRx2Protocol = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("udp", 0), ("rtp", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2Protocol.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2Protocol.setDescription('Selects which protocol to expect incoming packets to have.')
pt3080TSoIPRx1Portnumber = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1Portnumber.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1Portnumber.setDescription('Specifies which UDP port number to receive IP/UDP packets from.')
pt3080TSoIPRx2Portnumber = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2Portnumber.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2Portnumber.setDescription('Specifies which UDP port number to receive IP/UDP packets from.')
pt3080TSoIPRx1PacketErrorRatioLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketErrorRatioLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketErrorRatioLimit.setDescription('Specifies limit for the Packet Error Ratio. If the limit is \n        exceeded and alarm is raised.')
pt3080TSoIPRx2PacketErrorRatioLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketErrorRatioLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketErrorRatioLimit.setDescription('Specifies limit for the Packet Error Ratio. If the limit is \n        exceeded and alarm is raised.')
pt3080TSoIPRx1MinumimLatency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('0.1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1MinumimLatency.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1MinumimLatency.setDescription('Specifies the minimum time incoming data is buffered. The value\n         configured might be modified by FEC row/column sized on the\n         incoming data.')
pt3080TSoIPRx2MinumimLatency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('0.1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2MinumimLatency.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2MinumimLatency.setDescription('Specifies the minimum time incoming data is buffered. The value\n         configured might be modified by FEC row/column sized on the\n         incoming data.')
pt3080TSoIPRx1SyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 250))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx1SyncTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1SyncTimeout.setDescription('Specifies the maximum time accepted between received TS packages.')
pt3080TSoIPRx2SyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 250))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPRx2SyncTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2SyncTimeout.setDescription('Specifies the maximum time accepted between received TS packages.')
pt3080TSoIPRx1Status = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1Status.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1Status.setDescription('The current status of the receiver. Locked means minimum of \n        3 IP/UDP frames received per second.')
pt3080TSoIPRx2Status = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2Status.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2Status.setDescription('The current status of the receiver. Locked means minimum of \n        3 IP/UDP frames received per second.')
pt3080TSoIPRx1CurrentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1CurrentIPAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1CurrentIPAddress.setDescription('The current receive IP address for the TSoIP interface.')
pt3080TSoIPRx2CurrentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2CurrentIPAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2CurrentIPAddress.setDescription('The current receive IP address for the TSoIP interface.')
pt3080TSoIPRx1IpBitrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 26), Integer32()).setUnits('0.001 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1IpBitrate.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1IpBitrate.setDescription('Shows the current bitrate of uncoming traffic for this UDP port.')
pt3080TSoIPRx2IpBitrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 56), Integer32()).setUnits('0.001 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2IpBitrate.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2IpBitrate.setDescription('Shows the current bitrate of uncoming traffic for this UDP port.')
pt3080TSoIPRx1PacketErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 20), Integer32()).setUnits('0.1 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketErrorRatio.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketErrorRatio.setDescription('Shows the current error ratio of uncoming traffic for this UDP\n         port.')
pt3080TSoIPRx2PacketErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 50), Integer32()).setUnits('0.1 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketErrorRatio.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketErrorRatio.setDescription('Shows the current error ratio of uncoming traffic for this UDP\n         port.')
pt3080TSoIPRx1SequenceErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1SequenceErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1SequenceErrors.setDescription('The number of sequence errors on this channel on the TSoIP interface.')
pt3080TSoIPRx2SequenceErrors = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2SequenceErrors.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2SequenceErrors.setDescription('The number of sequence errors on this channel on the TSoIP interface.')
pt3080TSoIPRx1LostIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1LostIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1LostIPFrames.setDescription('The number of lost IP frames on the channel on the TSoIP interface.\n         The sequence numbers of frames employed by the RTP protocol\n         are used to determine this statistic.')
pt3080TSoIPRx2LostIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2LostIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2LostIPFrames.setDescription('The number of lost IP frames on the channel on the TSoIP interface.\n         The sequence numbers of frames employed by the RTP protocol\n         are used to determine this statistic.')
pt3080TSoIPRx1CorrectedIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1CorrectedIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1CorrectedIPFrames.setDescription('The number of corrected IP frames (via FEC) on this cannel on\n         the TSoIP interface.')
pt3080TSoIPRx2CorrectedIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2CorrectedIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2CorrectedIPFrames.setDescription('The number of corrected IP frames (via FEC) on this cannel on\n         the TSoIP interface.')
pt3080TSoIPRx1OverrunIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1OverrunIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1OverrunIPFrames.setDescription('The number of IP frames lost on the channel on the TSoIP interface\n         due to overrun. Overrun happens when the outgoing rate of the\n         modulator is lower that the incoming rate of TSoIP data.')
pt3080TSoIPRx2OverrunIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2OverrunIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2OverrunIPFrames.setDescription('The number of IP frames lost on the channel on the TSoIP interface\n         due to overrun. Overrun happens when the outgoing rate of the\n         modulator is lower that the incoming rate of TSoIP data.')
pt3080TSoIPRx1PacketsPerFrame = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketsPerFrame.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1PacketsPerFrame.setDescription('The curent number of TS packets per IP frames on this cannel\n         on the TSoIP interface.')
pt3080TSoIPRx2PacketsPerFrame = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketsPerFrame.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2PacketsPerFrame.setDescription('The curent number of TS packets per IP frames on this cannel\n         on the TSoIP interface.')
pt3080TSoIPRx1TSPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1TSPacketSize.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1TSPacketSize.setDescription('The curent size of TS packets on this cannel on the TSoIP interface.\n         Usually 188 or 204.')
pt3080TSoIPRx2TSPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2TSPacketSize.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2TSPacketSize.setDescription('The curent size of TS packets on this cannel on the TSoIP interface.\n         Usually 188 or 204.')
pt3080TSoIPRx1FecColumn = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1FecColumn.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1FecColumn.setDescription('The curent FEC Column (L) number for this cannel on the TSoIP\n         interface.')
pt3080TSoIPRx2FecColumn = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2FecColumn.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2FecColumn.setDescription('The curent FEC Column (L) number for this cannel on the TSoIP\n         interface.')
pt3080TSoIPRx1FecRow = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1FecRow.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1FecRow.setDescription('The curent FEC Row (D) number for this cannel on the TSoIP interface.')
pt3080TSoIPRx2FecRow = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2FecRow.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2FecRow.setDescription('The curent FEC Row (D) number for this cannel on the TSoIP interface.')
pt3080TSoIPRx1QueueSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 27), Integer32()).setUnits('1 Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1QueueSize.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1QueueSize.setDescription('The curent queue size for this cannel on the TSoIP interface.')
pt3080TSoIPRx2QueueSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 57), Integer32()).setUnits('1 Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2QueueSize.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2QueueSize.setDescription('The curent queue size for this cannel on the TSoIP interface.')
pt3080TSoIPRx1CurrentLatency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 28), Integer32()).setUnits('0.1 ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx1CurrentLatency.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx1CurrentLatency.setDescription('The current latency incurrent by queue size on this channel \n        on the TSoIP interface.')
pt3080TSoIPRx2CurrentLatency = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 10, 58), Integer32()).setUnits('0.1 ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPRx2CurrentLatency.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPRx2CurrentLatency.setDescription('The current latency incurrent by queue size on this channel \n        on the TSoIP interface.')
pt3080MonitorSource = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("asi-in1", 0), ("asi-in2", 1), ("aux1", 2), ("aux2", 3), ("tsoiprx1", 4), ("tsoiprx2", 5), ("ts-hp", 6), ("ts-lp", 7), ("backplane1", 8), ("backplane2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorSource.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorSource.setDescription('Selects the source to be monitored on the ASI monitor output.')
pt3080MonitorTSoIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPEnable.setDescription('Enable or disable the generation of monitor data over TSoIP.')
pt3080MonitorTSoIPSource = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("asi-in1", 0), ("asi-in2", 1), ("aux1", 2), ("aux2", 3), ("tsoiprx1", 4), ("tsoiprx2", 5), ("ts-hp", 6), ("ts-lp", 7), ("backplane1", 8), ("backplane2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPSource.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPSource.setDescription('Selects the source to be monitored on the TSoIP monitor output.')
pt3080MonitorTSoIPMulticastLanSelect = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("flan", 0), ("alan", 1), ("tlan", 2), ("blan", 3), ("plan", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPMulticastLanSelect.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPMulticastLanSelect.setDescription('Specifies which virtual LAN interface to transmit Multicast \n        IP/UDP packets out via.')
pt3080MonitorTSoIPDestIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPDestIPAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPDestIPAddress.setDescription('Selects the destination IP address of the data to be monitored\n         on the TSoIP monitor output.')
pt3080MonitorTSoIPDestPort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPDestPort.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPDestPort.setDescription('Selects the destination UDP Port number of the data to be monitored\n         on the TSoIP monitor output.')
pt3080MonitorTSoIPProtocol = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("udp", 0), ("rtp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPProtocol.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPProtocol.setDescription('Selects the protocol to be used on the TSoIP monitor output.')
pt3080MonitorTSoIPEnableFec = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPEnableFec.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPEnableFec.setDescription('Enable or disable FEC protocol on the output data from the TSoIP\n         Monitor.')
pt3080MonitorTSoIPFecColumn = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecColumn.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecColumn.setDescription('Selects the FEC protocoll Column number (L) of the data to be\n         monitored on the TSoIP monitor output.')
pt3080MonitorTSoIPFecRow = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecRow.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecRow.setDescription('Selects the FEC protocol Row number (D) of the data to be monitored\n         on the TSoIP monitor output.')
pt3080MonitorTSoIPFecSkew = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecSkew.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPFecSkew.setDescription('Selects the FEC protocol Skew (non block alignment of FEC Frame)\n         of the data to be monitored on the TSoIP monitor output.')
pt3080MonitorTSoIPKeepNullPackets = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPKeepNullPackets.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPKeepNullPackets.setDescription('Retain or discard Null packets of the generation of monitor \n        data over TSoIP.')
pt3080MonitorTSoIPPacketsPerFrame = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPPacketsPerFrame.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPPacketsPerFrame.setDescription('Set the number of TS packets to send per IP frame on the TSoIP\n         monitor output.')
pt3080MonitorTSoIPUDPChecksum = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPUDPChecksum.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPUDPChecksum.setDescription('Generate UDP checksum in the outgoing packets of the TSoIP Monitor.')
pt3080MonitorTSoIPDSCP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPDSCP.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPDSCP.setDescription('Selects the value of the TOS/DSCP field in IP packets to be \n        sent on the TSoIP monitor output.')
pt3080MonitorTSoIPTTL = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPTTL.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPTTL.setDescription('Selects the value of the TTL (Time-To-Live) field in IP packets\n         to be sent on the TSoIP monitor output.')
pt3080MonitorTSoIPGenerateError = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080MonitorTSoIPGenerateError.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPGenerateError.setDescription('Artificially generate an error rate as a percentage of frames\n         lost on the TSoIP monitor output.')
pt3080MonitorTSoIPIpBitrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 30), Integer32()).setUnits('0.001 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080MonitorTSoIPIpBitrate.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPIpBitrate.setDescription('The current rate IP packets traffic to be sent on the TSoIP \n        monitor output.')
pt3080MonitorTSoIPTSSize = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 32), Integer32()).setUnits('1 bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080MonitorTSoIPTSSize.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPTSSize.setDescription('The current TS packet size (188 or 204) on the TSoIP monitor\n         output.')
pt3080MonitorTSoIPLostIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 12, 31), Integer32()).setUnits('1 Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080MonitorTSoIPLostIPFrames.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorTSoIPLostIPFrames.setDescription('The number of IP packets traffic generated but lost on the TSoIP\n         monitor output.')
pt3080TestEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("scar", 1), ("sweep2", 2), ("prbs-on", 3), ("prbs-auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TestEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080TestEnable.setDescription('controls the test signal generation. This cannot be used when\n         network mode is SFN. Only a subset is available in repeater\n         mode. test signal output state: - testSignalsArray[testSignals_OFF]\n         Normal operation. No test signal. - testSignalsArray[testSignals_SCAR]\n         A single carrier output is provided. - testSignalsArray[testSignals_SWEEP2]\n         A test signal with full spectrum bandwidth and a 3dB peak to\n         average power ratio. (OFDM PPR-3). - testSignalsArray[testSignals_PRBSON]\n         Forced transmission of stuffing data only (null packets) irrespective\n         of the status of the MPEG-2 transport stream input. - testSignalsArray[testSignals_PRBSAUTO]\n         Automatic transmission of spectrum based on stuffing data when\n         no MPEG-2 TS input is available.')
pt3080TestEnableReconnect = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TestEnableReconnect.setStatus('current')
if mibBuilder.loadTexts: pt3080TestEnableReconnect.setDescription('Controls whether the test signal shall reconnect after reset.\n         This value is saved in non-volatile memory and thus survives\n         a reboot. - onOffArray[TEXT_INDEX_OFF] The selected test signal\n         will be set to OFF after reset. - onOffArray[TEXT_INDEX_ON]\n         The selected test signal will be output after reset.')
pt3080TestScarrierLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TestScarrierLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080TestScarrierLevel.setDescription('Control level of the single carrier test signal.')
pt3080TestscarrierFrequencyOffset = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4000000, 4000000))).setUnits('1 Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TestscarrierFrequencyOffset.setStatus('current')
if mibBuilder.loadTexts: pt3080TestscarrierFrequencyOffset.setDescription('Control frequency offset of the single carrier test signal.')
pt3080GroupAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1), )
if mibBuilder.loadTexts: pt3080GroupAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmTable.setDescription('This table contains the group alarms')
pt3080GroupAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080GroupAlarmID"))
if mibBuilder.loadTexts: pt3080GroupAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmEntry.setDescription('An entry for the alarms')
pt3080GroupAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080GroupAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmID.setDescription('Unique ID for this alarm')
pt3080GroupAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GroupAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmDescription.setDescription('Description for this alarm')
pt3080GroupAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GroupAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmState.setDescription('Current GroupAlarm state condition')
pt3080GroupAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080GroupAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080GroupAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080GroupAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080GroupAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080GroupAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080GroupAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GroupAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080GroupAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080ASITSPrimaryAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5), )
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmTable.setDescription('This table contains the ASI TS-Primary alarms')
pt3080ASITSPrimaryAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080ASITSPrimaryAlarmID"))
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmEntry.setDescription('An entry for the alarms')
pt3080ASITSPrimaryAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmID.setDescription('Unique ID for this alarm')
pt3080ASITSPrimaryAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmDescription.setDescription('Description for this alarm')
pt3080ASITSPrimaryAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmState.setDescription('Current ASITSPrimaryAlarm state condition')
pt3080ASITSPrimaryAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080ASITSPrimaryAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080ASITSPrimaryAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080ASITSPrimaryAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080ASITSPrimaryAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080ASITSPrimaryAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080ASITSPrimaryAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSPrimaryAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080ASITSSecondaryAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6), )
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmTable.setDescription('This table contains the ASI alarms')
pt3080ASITSSecondaryAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080ASITSSecondaryAlarmID"))
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmEntry.setDescription('An entry for the alarms')
pt3080ASITSSecondaryAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmID.setDescription('Unique ID for this alarm')
pt3080ASITSSecondaryAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmDescription.setDescription('Description for this alarm')
pt3080ASITSSecondaryAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmState.setDescription('Current ASITSSecondaryAlarm state condition')
pt3080ASITSSecondaryAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080ASITSSecondaryAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080ASITSSecondaryAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080ASITSSecondaryAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080ASITSSecondaryAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080ASITSSecondaryAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080ASITSSecondaryAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ASITSSecondaryAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080SFNAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7), )
if mibBuilder.loadTexts: pt3080SFNAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmTable.setDescription('This table contains the SFN alarms')
pt3080SFNAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080SFNAlarmID"))
if mibBuilder.loadTexts: pt3080SFNAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmEntry.setDescription('An entry for the alarms')
pt3080SFNAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080SFNAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmID.setDescription('Unique ID for this alarm')
pt3080SFNAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SFNAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmDescription.setDescription('Description for this alarm')
pt3080SFNAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080SFNAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmState.setDescription('Current SFNAlarm state condition')
pt3080SFNAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080SFNAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080SFNAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080SFNAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080SFNAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080SFNAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080SFNAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080SFNAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080SFNAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080ReferenceAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8), )
if mibBuilder.loadTexts: pt3080ReferenceAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmTable.setDescription('This table contains the Reference alarms')
pt3080ReferenceAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080ReferenceAlarmID"))
if mibBuilder.loadTexts: pt3080ReferenceAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmEntry.setDescription('An entry for the alarms')
pt3080ReferenceAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080ReferenceAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmID.setDescription('Unique ID for this alarm')
pt3080ReferenceAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReferenceAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmDescription.setDescription('Description for this alarm')
pt3080ReferenceAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ReferenceAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmState.setDescription('Current ReferenceAlarm state condition')
pt3080ReferenceAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080ReferenceAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080ReferenceAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080ReferenceAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080ReferenceAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080ReferenceAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080ReferenceAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ReferenceAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080RFAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9), )
if mibBuilder.loadTexts: pt3080RFAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmTable.setDescription('This table contains the RF alarms')
pt3080RFAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080RFAlarmID"))
if mibBuilder.loadTexts: pt3080RFAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmEntry.setDescription('An entry for the alarms')
pt3080RFAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080RFAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmID.setDescription('Unique ID for this alarm')
pt3080RFAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080RFAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmDescription.setDescription('Description for this alarm')
pt3080RFAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080RFAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmState.setDescription('Current RFAlarm state condition')
pt3080RFAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080RFAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080RFAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080RFAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080RFAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080RFAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080RFAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080RFAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080RFAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080GPSAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10), )
if mibBuilder.loadTexts: pt3080GPSAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmTable.setDescription('This table contains the GPS alarms')
pt3080GPSAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080GPSAlarmID"))
if mibBuilder.loadTexts: pt3080GPSAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmEntry.setDescription('An entry for the alarms')
pt3080GPSAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080GPSAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmID.setDescription('Unique ID for this alarm')
pt3080GPSAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GPSAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmDescription.setDescription('Description for this alarm')
pt3080GPSAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080GPSAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmState.setDescription('Current GPSAlarm state condition')
pt3080GPSAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080GPSAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080GPSAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080GPSAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080GPSAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080GPSAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080GPSAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080GPSAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080GPSAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080TSoIPAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12), )
if mibBuilder.loadTexts: pt3080TSoIPAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmTable.setDescription('This table contains the TSoIP alarms')
pt3080TSoIPAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080TSoIPAlarmID"))
if mibBuilder.loadTexts: pt3080TSoIPAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmEntry.setDescription('An entry for the alarms')
pt3080TSoIPAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080TSoIPAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmID.setDescription('Unique ID for this alarm')
pt3080TSoIPAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmDescription.setDescription('Description for this alarm')
pt3080TSoIPAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080TSoIPAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmState.setDescription('Current TSoIPAlarm state condition')
pt3080TSoIPAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080TSoIPAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080TSoIPAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080TSoIPAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080TSoIPAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080TSoIPAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080TSoIPAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080ExternalAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13), )
if mibBuilder.loadTexts: pt3080ExternalAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmTable.setDescription('This table contains the External alarms')
pt3080ExternalAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080ExternalAlarmID"))
if mibBuilder.loadTexts: pt3080ExternalAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmEntry.setDescription('An entry for the alarms')
pt3080ExternalAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080ExternalAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmID.setDescription('Unique ID for this alarm')
pt3080ExternalAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ExternalAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmDescription.setDescription('Description for this alarm')
pt3080ExternalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ExternalAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmState.setDescription('Current ExternalAlarm state condition')
pt3080ExternalAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080ExternalAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080ExternalAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080ExternalAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080ExternalAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080ExternalAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080ExternalAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ExternalAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ExternalAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080HWMonitorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14), )
if mibBuilder.loadTexts: pt3080HWMonitorAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmTable.setDescription('This table contains the HW Monitor alarms')
pt3080HWMonitorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080HWMonitorAlarmID"))
if mibBuilder.loadTexts: pt3080HWMonitorAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmEntry.setDescription('An entry for the alarms')
pt3080HWMonitorAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080HWMonitorAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmID.setDescription('Unique ID for this alarm')
pt3080HWMonitorAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmDescription.setDescription('Description for this alarm')
pt3080HWMonitorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmState.setDescription('Current HWMonitorAlarm state condition')
pt3080HWMonitorAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080HWMonitorAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080HWMonitorAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080HWMonitorAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080HWMonitorAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080HWMonitorAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080HWMonitorAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080HWMonitorAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080CommsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15), )
if mibBuilder.loadTexts: pt3080CommsAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmTable.setDescription('This table contains the Communication alarms')
pt3080CommsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080CommsAlarmID"))
if mibBuilder.loadTexts: pt3080CommsAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmEntry.setDescription('An entry for the alarms')
pt3080CommsAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080CommsAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmID.setDescription('Unique ID for this alarm')
pt3080CommsAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmDescription.setDescription('Description for this alarm')
pt3080CommsAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmState.setDescription('Current CommsAlarm state condition')
pt3080CommsAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080CommsAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080CommsAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080CommsAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080CommsAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080CommsAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080CommsAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080ASIAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16), )
if mibBuilder.loadTexts: pt3080ASIAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmTable.setDescription('This table contains the ASI alarms')
pt3080ASIAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080ASIAlarmID"))
if mibBuilder.loadTexts: pt3080ASIAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmEntry.setDescription('An entry for the alarms')
pt3080ASIAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080ASIAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmID.setDescription('Unique ID for this alarm')
pt3080ASIAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmDescription.setDescription('Description for this alarm')
pt3080ASIAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080ASIAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmState.setDescription('Current ASIAlarm state condition')
pt3080ASIAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080ASIAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080ASIAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080ASIAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080ASIAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080ASIAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080ASIAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080ASIAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080DemodulatorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17), )
if mibBuilder.loadTexts: pt3080DemodulatorAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmTable.setDescription('This table contains the Demodulator alarms')
pt3080DemodulatorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080DemodulatorAlarmID"))
if mibBuilder.loadTexts: pt3080DemodulatorAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmEntry.setDescription('An entry for the alarms')
pt3080DemodulatorAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080DemodulatorAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmID.setDescription('Unique ID for this alarm')
pt3080DemodulatorAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmDescription.setDescription('Description for this alarm')
pt3080DemodulatorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmState.setDescription('Current DemodulatorAlarm state condition')
pt3080DemodulatorAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080DemodulatorAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080DemodulatorAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080DemodulatorAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080DemodulatorAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080DemodulatorAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080DemodulatorAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080InternalAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18), )
if mibBuilder.loadTexts: pt3080InternalAlarmTable.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmTable.setDescription('This table contains the Internal alarms')
pt3080InternalAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080InternalAlarmID"))
if mibBuilder.loadTexts: pt3080InternalAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmEntry.setDescription('An entry for the alarms')
pt3080InternalAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: pt3080InternalAlarmID.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmID.setDescription('Unique ID for this alarm')
pt3080InternalAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InternalAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmDescription.setDescription('Description for this alarm')
pt3080InternalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080InternalAlarmState.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmState.setDescription('Current InternalAlarm state condition')
pt3080InternalAlarmActionEventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionEventlog.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionEventlog.setDescription('Will the current alarm generate an event in the eventlog')
pt3080InternalAlarmActionRelay1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionRelay1.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionRelay1.setDescription('Will the current alarm activate relay1')
pt3080InternalAlarmActionRelay2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionRelay2.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionRelay2.setDescription('Will the current alarm activate relay2')
pt3080InternalAlarmActionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionTrap.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionTrap.setDescription('Will the current alarm generate a trap')
pt3080InternalAlarmActionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionEmail.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionEmail.setDescription('Will the current alarm generate an email')
pt3080InternalAlarmActionAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionAlarmLED.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionAlarmLED.setDescription('Will the current alarm turn Alarm LED on frontpanel on')
pt3080InternalAlarmActionForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 14, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("mute", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080InternalAlarmActionForceMode.setStatus('current')
if mibBuilder.loadTexts: pt3080InternalAlarmActionForceMode.setDescription('Will the current alarm mute output')
pt3080PresetTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 1), )
if mibBuilder.loadTexts: pt3080PresetTable.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetTable.setDescription('This table contains the presets')
pt3080PresetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 1, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080PresetNo"))
if mibBuilder.loadTexts: pt3080PresetEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetEntry.setDescription('An entry for the presets')
pt3080PresetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: pt3080PresetNo.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetNo.setDescription('Unique number for this preset')
pt3080PresetName = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PresetName.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetName.setDescription('Name for this preset')
pt3080PresetRecall = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PresetRecall.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetRecall.setDescription('Install this preset into current running parameter set.\n         Value will always read as 0 and setting it to 0 has no effect.')
pt3080PresetStore = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PresetStore.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetStore.setDescription('Store the currently running parameter set into this preset\n         Value will always read as 0 and setting it to 0 has no effect.')
pt3080EventlogTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1), )
if mibBuilder.loadTexts: pt3080EventlogTable.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogTable.setDescription('This table contains the group alarms')
pt3080EventlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080EventlogNo"))
if mibBuilder.loadTexts: pt3080EventlogEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogEntry.setDescription('An entry for the alarms')
pt3080EventlogNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)))
if mibBuilder.loadTexts: pt3080EventlogNo.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogNo.setDescription('Unique number for this event')
pt3080EventlogID = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080EventlogID.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogID.setDescription('Unique ID for this type of event')
pt3080EventlogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080EventlogTimestamp.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogTimestamp.setDescription('Timestamp for this event')
pt3080EventlogText = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080EventlogText.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogText.setDescription('Text for this event')
pt3080EventlogClear = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080EventlogClear.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogClear.setDescription('Clear the entire eventlog by setting the value to 1.')
pt3080EventlogEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080EventlogEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogEnable.setDescription('Enable eventlog by setting the value to 1.')
pt3080EventlogMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fifo", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080EventlogMode.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogMode.setDescription('Set eventlog mode to FIFO for keeping the newest entries.\n         Set eventlog mode to FULL for keeping the oldest entries.')
pt3080CommsAlarmEmailReceiver = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAlarmEmailReceiver.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAlarmEmailReceiver.setDescription('The email address of the receipiant of alarm emails.')
pt3080CommsSeparatedSwitchPorts = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSeparatedSwitchPorts.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSeparatedSwitchPorts.setDescription('Will the ports on the switch in the backplane forward LAN traffic\n         to each other or will they be separated and only forward traffic\n         to/from the modulator/repeater.')
pt3080CommsBroadcastStormProtection = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBroadcastStormProtection.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBroadcastStormProtection.setDescription('Enable/Disable broadcast (and multicast) storm Protection. This\n         will limit the network ingress rate on physical Ethernet port\n         0 and 1 to roughly 100mbit/s.')
pt3080CommsLocalPhysicalInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalPhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalPhysicalInterface.setDescription('The Physical Ethernet Interface of this (virtual) interface.')
pt3080CommsLocalDhcpMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalDhcpMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalDhcpMode.setDescription('Enable/Disable DHCP client on this interface.')
pt3080CommsLocalStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalStaticIpAddr.setDescription('The static IP address for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsLocalStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalStaticNetmask.setDescription('The static IP netmask for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsLocalIpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 100), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastAddr.setDescription('The IP Multicast address for this interface.')
pt3080CommsLocalIpMulticastSourceFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 190), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfinclude", 0), ("sfexclude", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterMode.setDescription('Specifies whether the Multicast Source Filter IP Address list\n         is: SFINCLUDE: ONLY receive multicast frames from the source\n         addresses in the list. SFEXCLUDE: Receive all multicast frames\n         EXCEPT from the source addresses in the list.')
pt3080CommsLocalIpMulticastSourceFilterAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 200), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress1.setDescription('The IP Multicast Source Filter address no 1 for this interface.')
pt3080CommsLocalIpMulticastSourceFilterAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 201), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress2.setDescription('The IP Multicast Source Filter address no 2 for this interface.')
pt3080CommsLocalIpMulticastSourceFilterAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 202), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress3.setDescription('The IP Multicast Source Filter address no 3 for this interface.')
pt3080CommsLocalIpMulticastSourceFilterAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 203), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress4.setDescription('The IP Multicast Source Filter address no 4 for this interface.')
pt3080CommsLocalIpMulticastSourceFilterAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 204), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress5.setDescription('The IP Multicast Source Filter address no 5 for this interface.')
pt3080CommsLocalIpMulticastSourceFilterAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 205), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress6.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalIpMulticastSourceFilterAddress6.setDescription('The IP Multicast Source Filter address no 6 for this interface.')
pt3080CommsLocalVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalVlanEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalVlanEnable.setDescription('Enable/Disable VLAN on this interface.')
pt3080CommsLocalVlanId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalVlanId.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalVlanId.setDescription('VLAN ID to use on this interface, if VLAN is enabled. Please\n         note that VLAN ID 4001 and 4002 are used for internal switching\n         and thus cannot be used on any interface.')
pt3080CommsLocalServiceSNMP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalServiceSNMP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalServiceSNMP.setDescription('Enable/Disable SNMP service on this interface.')
pt3080CommsLocalServiceSCPI = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalServiceSCPI.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalServiceSCPI.setDescription('Enable/Disable SCPI service on this interface.')
pt3080CommsLocalServiceTSoIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalServiceTSoIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalServiceTSoIP.setDescription('Enable/Disable TSoIP service on this interface.')
pt3080CommsLocalServiceRIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsLocalServiceRIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalServiceRIP.setDescription('Enable/Disable RIP service on this interface.')
pt3080CommsLocalCurrentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsLocalCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalCurrentIpAddr.setDescription('The current IP address for this interface.')
pt3080CommsLocalCurrentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsLocalCurrentNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsLocalCurrentNetmask.setDescription('The current IP netmask for this interface.')
pt3080CommsRemoteEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteEnable.setDescription('Enable/Disable this interface.')
pt3080CommsRemotePhysicalInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemotePhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemotePhysicalInterface.setDescription('The Physical Ethernet Interface of this (virtual) interface.')
pt3080CommsRemoteDhcpMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteDhcpMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteDhcpMode.setDescription('Enable/Disable DHCP client on this interface.')
pt3080CommsRemoteStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteStaticIpAddr.setDescription('The static IP address for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsRemoteStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteStaticNetmask.setDescription('The static IP netmask for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsRemoteIpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 110), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastAddr.setDescription('The IP Multicast address for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 191), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfinclude", 0), ("sfexclude", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterMode.setDescription('Specifies whether the Multicast Source Filter IP Address list\n         is: SFINCLUDE: ONLY receive multicast frames from the source\n         addresses in the list. SFEXCLUDE: Receive all multicast frames\n         EXCEPT from the source addresses in the list.')
pt3080CommsRemoteIpMulticastSourceFilterAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 220), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress1.setDescription('The IP Multicast Source Filter address no 1 for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 221), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress2.setDescription('The IP Multicast Source Filter address no 2 for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 222), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress3.setDescription('The IP Multicast Source Filter address no 3 for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 223), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress4.setDescription('The IP Multicast Source Filter address no 4 for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 224), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress5.setDescription('The IP Multicast Source Filter address no 5 for this interface.')
pt3080CommsRemoteIpMulticastSourceFilterAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 225), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress6.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteIpMulticastSourceFilterAddress6.setDescription('The IP Multicast Source Filter address no 6 for this interface.')
pt3080CommsRemoteVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteVlanEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteVlanEnable.setDescription('Enable/Disable VLAN on this interface.')
pt3080CommsRemoteVlanId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteVlanId.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteVlanId.setDescription('VLAN ID to use on this interface, if VLAN is enabled. Please\n         note that VLAN ID 4001 and 4002 are used for internal switching\n         and thus cannot be used on any interface.')
pt3080CommsRemoteServiceSNMP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteServiceSNMP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteServiceSNMP.setDescription('Enable/Disable SNMP service on this interface.')
pt3080CommsRemoteServiceSCPI = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteServiceSCPI.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteServiceSCPI.setDescription('Enable/Disable SCPI service on this interface.')
pt3080CommsRemoteServiceTSoIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteServiceTSoIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteServiceTSoIP.setDescription('Enable/Disable TSoIP service on this interface.')
pt3080CommsRemoteServiceWeb = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteServiceWeb.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteServiceWeb.setDescription('Enable/Disable WEB (http) service on this interface.')
pt3080CommsRemoteServiceRIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRemoteServiceRIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteServiceRIP.setDescription('Enable/Disable RIP service on this interface.')
pt3080CommsRemoteCurrentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsRemoteCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteCurrentIpAddr.setDescription('The current IP address for this interface.')
pt3080CommsRemoteCurrentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsRemoteCurrentNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRemoteCurrentNetmask.setDescription('The current IP netmask for this interface.')
pt3080CommsGbeAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminEnable.setDescription('Enable/Disable this interface.')
pt3080CommsGbeAdminPhysicalInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminPhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminPhysicalInterface.setDescription('The Physical Ethernet Interface of this (virtual) interface.')
pt3080CommsGbeAdminDhcpMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminDhcpMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminDhcpMode.setDescription('Enable/Disable DHCP client on this interface.')
pt3080CommsGbeAdminStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminStaticIpAddr.setDescription('The static IP address for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsGbeAdminStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminStaticNetmask.setDescription('The static IP netmask for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsGbeAdminIpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 120), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastAddr.setDescription('The IP Multicast address for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfinclude", 0), ("sfexclude", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterMode.setDescription('Specifies whether the Multicast Source Filter IP Address list\n         is: SFINCLUDE: ONLY receive multicast frames from the source\n         addresses in the list. SFEXCLUDE: Receive all multicast frames\n         EXCEPT from the source addresses in the list.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 230), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress1.setDescription('The IP Multicast Source Filter address no 1 for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 231), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress2.setDescription('The IP Multicast Source Filter address no 2 for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 232), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress3.setDescription('The IP Multicast Source Filter address no 3 for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 233), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress4.setDescription('The IP Multicast Source Filter address no 4 for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 234), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress5.setDescription('The IP Multicast Source Filter address no 5 for this interface.')
pt3080CommsGbeAdminIpMulticastSourceFilterAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 235), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress6.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminIpMulticastSourceFilterAddress6.setDescription('The IP Multicast Source Filter address no 6 for this interface.')
pt3080CommsGbeAdminVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminVlanEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminVlanEnable.setDescription('Enable/Disable VLAN on this interface.')
pt3080CommsGbeAdminVlanId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminVlanId.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminVlanId.setDescription('VLAN ID to use on this interface, if VLAN is enabled. Please\n         note that VLAN ID 4001 and 4002 are used for internal switching\n         and thus cannot be used on any interface.')
pt3080CommsGbeAdminServiceSNMP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceSNMP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceSNMP.setDescription('Enable/Disable SNMP service on this interface.')
pt3080CommsGbeAdminServiceSCPI = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 124), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceSCPI.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceSCPI.setDescription('Enable/Disable SCPI service on this interface.')
pt3080CommsGbeAdminServiceTSoIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceTSoIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceTSoIP.setDescription('Enable/Disable TSoIP service on this interface.')
pt3080CommsGbeAdminServiceWeb = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceWeb.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceWeb.setDescription('Enable/Disable Web (http) service on this interface.')
pt3080CommsGbeAdminServiceRIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceRIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminServiceRIP.setDescription('Enable/Disable RIP service on this interface.')
pt3080CommsGbeAdminCurrentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsGbeAdminCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminCurrentIpAddr.setDescription('The current IP address for this interface.')
pt3080CommsGbeAdminCurrentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsGbeAdminCurrentNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGbeAdminCurrentNetmask.setDescription('The current IP netmask for this interface.')
pt3080CommsBackupEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupEnable.setDescription('Enable/Disable this interface.')
pt3080CommsBackupPhysicalInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupPhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupPhysicalInterface.setDescription('The Physical Ethernet Interface of this (virtual) interface.')
pt3080CommsBackupDhcpMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupDhcpMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupDhcpMode.setDescription('Enable/Disable DHCP client on this interface.')
pt3080CommsBackupStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 152), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupStaticIpAddr.setDescription('The static IP address for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsBackupStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 153), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupStaticNetmask.setDescription('The static IP netmask for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsBackupIpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 154), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastAddr.setDescription('The IP Multicast address for this interface.')
pt3080CommsBackupIpMulticastSourceFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 193), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfinclude", 0), ("sfexclude", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterMode.setDescription('Specifies whether the Multicast Source Filter IP Address list\n         is: SFINCLUDE: ONLY receive multicast frames from the source\n         addresses in the list. SFEXCLUDE: Receive all multicast frames\n         EXCEPT from the source addresses in the list.')
pt3080CommsBackupIpMulticastSourceFilterAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 170), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress1.setDescription('The IP Multicast Source Filter address no 1 for this interface.')
pt3080CommsBackupIpMulticastSourceFilterAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 171), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress2.setDescription('The IP Multicast Source Filter address no 2 for this interface.')
pt3080CommsBackupIpMulticastSourceFilterAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 172), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress3.setDescription('The IP Multicast Source Filter address no 3 for this interface.')
pt3080CommsBackupIpMulticastSourceFilterAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 173), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress4.setDescription('The IP Multicast Source Filter address no 4 for this interface.')
pt3080CommsBackupIpMulticastSourceFilterAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 174), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress5.setDescription('The IP Multicast Source Filter address no 5 for this interface.')
pt3080CommsBackupIpMulticastSourceFilterAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 175), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress6.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupIpMulticastSourceFilterAddress6.setDescription('The IP Multicast Source Filter address no 6 for this interface.')
pt3080CommsBackupVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupVlanEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupVlanEnable.setDescription('Enable/Disable VLAN on this interface.')
pt3080CommsBackupVlanId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 156), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupVlanId.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupVlanId.setDescription('VLAN ID to use on this interface, if VLAN is enabled. Please\n         note that VLAN ID 4001 and 4002 are used for internal switching\n         and thus cannot be used on any interface.')
pt3080CommsBackupServiceSNMP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupServiceSNMP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupServiceSNMP.setDescription('Enable/Disable SNMP service on this interface.')
pt3080CommsBackupServiceSCPI = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupServiceSCPI.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupServiceSCPI.setDescription('Enable/Disable SCPI service on this interface.')
pt3080CommsBackupServiceTSoIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupServiceTSoIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupServiceTSoIP.setDescription('Enable/Disable TSoIP service on this interface.')
pt3080CommsBackupServiceWeb = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupServiceWeb.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupServiceWeb.setDescription('Enable/Disable Web (http) service on this interface.')
pt3080CommsBackupServiceRIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsBackupServiceRIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupServiceRIP.setDescription('Enable/Disable RIP service on this interface.')
pt3080CommsBackupCurrentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 162), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsBackupCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupCurrentIpAddr.setDescription('The current IP address for this interface.')
pt3080CommsBackupCurrentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 163), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsBackupCurrentNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsBackupCurrentNetmask.setDescription('The current IP netmask for this interface.')
pt3080CommsPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2500), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortEnable.setDescription('Enable/Disable this interface.')
pt3080CommsPortPhysicalInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortPhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortPhysicalInterface.setDescription('The Physical Ethernet Interface of this (virtual) interface.')
pt3080CommsPortDhcpMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2075), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortDhcpMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortDhcpMode.setDescription('Enable/Disable DHCP client on this interface.')
pt3080CommsPortStaticIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2152), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortStaticIpAddr.setDescription('The static IP address for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsPortStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2153), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortStaticNetmask.setDescription('The static IP netmask for this interface. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsPortIpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2154), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastAddr.setDescription('The IP Multicast address for this interface.')
pt3080CommsPortIpMulticastSourceFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2193), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfinclude", 0), ("sfexclude", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterMode.setDescription('Specifies whether the Multicast Source Filter IP Address list\n         is: SFINCLUDE: ONLY receive multicast frames from the source\n         addresses in the list. SFEXCLUDE: Receive all multicast frames\n         EXCEPT from the source addresses in the list.')
pt3080CommsPortIpMulticastSourceFilterAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2170), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress1.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress1.setDescription('The IP Multicast Source Filter address no 1 for this interface.')
pt3080CommsPortIpMulticastSourceFilterAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2171), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress2.setDescription('The IP Multicast Source Filter address no 2 for this interface.')
pt3080CommsPortIpMulticastSourceFilterAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2172), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress3.setDescription('The IP Multicast Source Filter address no 3 for this interface.')
pt3080CommsPortIpMulticastSourceFilterAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2173), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress4.setDescription('The IP Multicast Source Filter address no 4 for this interface.')
pt3080CommsPortIpMulticastSourceFilterAddress5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2174), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress5.setDescription('The IP Multicast Source Filter address no 5 for this interface.')
pt3080CommsPortIpMulticastSourceFilterAddress6 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2175), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress6.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortIpMulticastSourceFilterAddress6.setDescription('The IP Multicast Source Filter address no 6 for this interface.')
pt3080CommsPortVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortVlanEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortVlanEnable.setDescription('Enable/Disable VLAN on this interface.')
pt3080CommsPortVlanId = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2156), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortVlanId.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortVlanId.setDescription('VLAN ID to use on this interface, if VLAN is enabled. Please\n         note that VLAN ID 4001 and 4002 are used for internal switching\n         and thus cannot be used on any interface.')
pt3080CommsPortServiceSNMP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortServiceSNMP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortServiceSNMP.setDescription('Enable/Disable SNMP service on this interface.')
pt3080CommsPortServiceSCPI = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortServiceSCPI.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortServiceSCPI.setDescription('Enable/Disable SCPI service on this interface.')
pt3080CommsPortServiceTSoIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortServiceTSoIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortServiceTSoIP.setDescription('Enable/Disable TSoIP service on this interface.')
pt3080CommsPortServiceWeb = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortServiceWeb.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortServiceWeb.setDescription('Enable/Disable Web (http) service on this interface.')
pt3080CommsPortServiceRIP = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsPortServiceRIP.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortServiceRIP.setDescription('Enable/Disable RIP service on this interface.')
pt3080CommsPortCurrentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2162), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsPortCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortCurrentIpAddr.setDescription('The current IP address for this interface.')
pt3080CommsPortCurrentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 2163), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsPortCurrentNetmask.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsPortCurrentNetmask.setDescription('The current IP netmask for this interface.')
pt3080CommsSNMPServicePort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPServicePort.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPServicePort.setDescription('The UDP port number used for SNMP Service.')
pt3080CommsSNMPReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPReadOnlyCommunity.setDescription('The Read-only community string used to access the SNMP Service.')
pt3080CommsSNMPReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPReadWriteCommunity.setDescription('The Read-Write community string used to access the SNMP Service.')
pt3080CommsSNMPTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 58), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapCommunity.setDescription('The Trap community string used when sending SNMP Traps.')
pt3080CommsSNMPTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination.setDescription('The destination IP address for the SNMP traps.')
pt3080CommsSNMPTrapDestination2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 419), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination2.setDescription('The destination 2 IP address for the SNMP traps.')
pt3080CommsSNMPTrapDestination3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 779), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination3.setDescription('The destination 3 IP address for the SNMP traps.')
pt3080CommsSNMPTrapDestination4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 1139), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination4.setDescription('The destination 4 IP address for the SNMP traps.')
pt3080CommsSNMPTrapDestination5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 1499), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestination5.setDescription('The destination 5 IP address for the SNMP traps.')
pt3080CommsSNMPTrapDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort.setDescription('The UDP port number used for Trap destination .')
pt3080CommsSNMPTrapDestinationPort2 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 420), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort2.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort2.setDescription('The UDP port number used for Trap destination 2.')
pt3080CommsSNMPTrapDestinationPort3 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 780), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort3.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort3.setDescription('The UDP port number used for Trap destination 3.')
pt3080CommsSNMPTrapDestinationPort4 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 1140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort4.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort4.setDescription('The UDP port number used for Trap destination 4.')
pt3080CommsSNMPTrapDestinationPort5 = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 1500), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort5.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSNMPTrapDestinationPort5.setDescription('The UDP port number used for Trap destination 5.')
pt3080CommsStaticGateway = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticGateway.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticGateway.setDescription('The static IP address for the default router (gateway). Will\n         be used unless DHCP is enabled and the DHCP server is configured\n         to include a default router address.')
pt3080CommsCurrentGateway = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentGateway.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentGateway.setDescription('The Current IP address for the default router (gateway).')
pt3080CommsStaticHostname = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticHostname.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticHostname.setDescription('The static hostname for the device. Will be used if DHCP is \n        disabled or unavailable.')
pt3080CommsCurrentHostname = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentHostname.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentHostname.setDescription('The static hostname for the device. Will be used if DHCP is \n        disabled or unavailable.')
pt3080CommsStaticDNSDomain = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticDNSDomain.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticDNSDomain.setDescription('The static DNS domain name for the device. Will be used if DHCP\n         is disabled or unavailable.')
pt3080CommsCurrentDNSDomain = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentDNSDomain.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentDNSDomain.setDescription('The current DNS domain name for the device.')
pt3080CommsStaticDNS1ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticDNS1ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticDNS1ServerAddress.setDescription('The IP address of DNS server 1.')
pt3080CommsStaticDNS2ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticDNS2ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticDNS2ServerAddress.setDescription('The IP address of DNS server 2.')
pt3080CommsStaticDNS3ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticDNS3ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticDNS3ServerAddress.setDescription('The IP address of DNS server 3.')
pt3080CommsCurrentDNS1ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentDNS1ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentDNS1ServerAddress.setDescription('The Current IP address of DNS server 1.')
pt3080CommsCurrentDNS2ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentDNS2ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentDNS2ServerAddress.setDescription('The Current IP address of DNS server 2.')
pt3080CommsCurrentDNS3ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentDNS3ServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentDNS3ServerAddress.setDescription('The Current IP address of DNS server 3.')
pt3080CommsStaticNtpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticNtpServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticNtpServerAddress.setDescription('The DNS name or IP address of the NTP server.')
pt3080CommsCurrentNtpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsCurrentNtpServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsCurrentNtpServerAddress.setDescription('The Current IP address of the NTP server.')
pt3080CommsEmailServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsEmailServerAddress.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsEmailServerAddress.setDescription('The IP address of the Email (SMTP) server.')
pt3080CommsWebServicePort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsWebServicePort.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsWebServicePort.setDescription('The TCP port number used for Web Service.')
pt3080CommsSCPIServicePort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSCPIServicePort.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSCPIServicePort.setDescription('The TCP port number used for SCPI Service.')
pt3080CommsSCPIServerBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("r2400", 0), ("r4800", 1), ("r9600", 2), ("r19200", 3), ("r38400", 4), ("r57600", 5), ("r115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSCPIServerBaudrate.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSCPIServerBaudrate.setDescription('The Baudrate used for SCPI Service on serial port.')
pt3080CommsSCPIUartInterface = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rs232", 0), ("rs485", 1), ("rs485hd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsSCPIUartInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsSCPIUartInterface.setDescription('The Interface used for SCPI Service on serial port.')
pt3080CommsRipPort = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsRipPort.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsRipPort.setDescription('The UDP port number used for RIP Service.')
pt3080CommsIGMPVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsIGMPVersion.setDescription('Select which IGMP Version to use.')
pt3080CommsIGMPQueryRobustnessCount = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsIGMPQueryRobustnessCount.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsIGMPQueryRobustnessCount.setDescription('The Number of Query Replies sent. The higher a number, the more\n         robust IGMP setup is. At the cost of traffic on the network.\n         Note: Changing this parameter doesnt take effect on a network\n         interface until it has (re-)enabled.')
pt3080CommsIGMPv3UnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsIGMPv3UnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsIGMPv3UnsolicitedReportInterval.setDescription('The time interval between unsolicited IGMPv3 reports being sent.\n         See RFC3376. The number of such report being sent is controlled\n         by the Query Robustness Count.')
pt3080CommsIGMPv2UnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setUnits('1 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsIGMPv2UnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsIGMPv2UnsolicitedReportInterval.setDescription('The time interval between unsolicited IGMPv2/v1 reports being\n         sent. See RFC2236. The number of such report being sent is \n        controlled by the Query Robustness Count.')
pt3080CommsAccessAllowed = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remote", 0), ("local-disable-set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAccessAllowed.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessAllowed.setDescription('Current access mode allowed: Remote: SNMP via Ethernet, Local:\n         Frontpanel')
pt3080CommsAccessAllowedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('1 min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAccessAllowedTimeout.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessAllowedTimeout.setDescription('Timeout (in minutes) before local mode reverts to remote mode.')
pt3080CommsAccessAllowedTimeLeft = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 50), Integer32()).setUnits('1 secs').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080CommsAccessAllowedTimeLeft.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessAllowedTimeLeft.setDescription('Current time left (in seconds) before local mode reverts to \n        remote mode.')
pt3080CommsAccessPasswordObserver = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAccessPasswordObserver.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessPasswordObserver.setDescription('The access password for Observer level access. Will always read as empty.')
pt3080CommsAccessPasswordOperator = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAccessPasswordOperator.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessPasswordOperator.setDescription('The access password for Operator level access. Will always read as empty.')
pt3080CommsAccessPasswordAdministrator = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsAccessPasswordAdministrator.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsAccessPasswordAdministrator.setDescription('The access password for Administrator level access. Will always read as empty.')
pt3080CommsStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300), )
if mibBuilder.loadTexts: pt3080CommsStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRouteTable.setDescription('This table contains the static routing table entries')
pt3080CommsStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1), ).setIndexNames((0, "PT3080-MIB", "pt3080CommsStaticRouteNO"))
if mibBuilder.loadTexts: pt3080CommsStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRouteEntry.setDescription('An entry for the static network routing table')
pt3080CommsStaticRouteNO = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pt3080CommsStaticRouteNO.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRouteNO.setDescription('Unique ID for this static route entry')
pt3080CommsStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 0), ("normal", 1), ("physicalif", 2), ("recursive", 3), ("drop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticRouteType.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRouteType.setDescription('Type of a Route table entry.')
pt3080CommsStaticRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRoutePrefix.setDescription('The IP address part of prefix for a route table entry.\n         If the address is 0.0.0.0, the entry will not be used.')
pt3080CommsStaticRoutePrefixSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticRoutePrefixSize.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRoutePrefixSize.setDescription('The number of bits in the network part of the prefix for route table entry $.\n         If the number is 0 (zero), the entry will not be used.')
pt3080CommsStaticRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticRouteTarget.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRouteTarget.setDescription('The target IP address for a route table entry.\n         Only used if pt3080CommsStaticRouteType is normal(1) or recursive(3).\n         If the target address is 0.0.0.0, the entry will not be used.')
pt3080CommsStaticRoutePhysicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18086, 3080, 17, 300, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eth0", 0), ("eth1", 1), ("eth2", 2), ("eth3", 3), ("eth4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080CommsStaticRoutePhysicalInterface.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsStaticRoutePhysicalInterface.setDescription('The Physical Ethernet Interface to use for a Route table entry.\n         Only used when pt3080CommsStaticRouteType is physicalif(2).')
pt3080DemodulatorFollowMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080DemodulatorFollowMode.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorFollowMode.setDescription('Controls the Demodulators follow mode.')
pt3080Demodulator1Available = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1Available.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1Available.setDescription('Status on the availability of Demodulator 1')
pt3080Demodulator2Available = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2Available.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2Available.setDescription('Status on the availability of Demodulator 2')
pt3080Demodulator1FWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1FWVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1FWVersion.setDescription('Demodulator 1 firmware version string')
pt3080Demodulator2FWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2FWVersion.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2FWVersion.setDescription('Demodulator 2 firmware version string')
pt3080Demodulator1OutputTS = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hp", 0), ("lp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator1OutputTS.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1OutputTS.setDescription('Controls which TS demodulator 1 shall output')
pt3080Demodulator2OutputTS = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hp", 0), ("lp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator2OutputTS.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2OutputTS.setDescription('Controls which TS demodulator 2 shall output')
pt3080Demodulator1MerLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 240))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator1MerLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1MerLimit.setDescription('Lower limit for MER Level')
pt3080Demodulator2MerLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 240))).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator2MerLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2MerLimit.setDescription('Lower limit for MER Level')
pt3080Demodulator1PreVirterbiErrorRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator1PreVirterbiErrorRateLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1PreVirterbiErrorRateLimit.setDescription('Upper limit for Pre-Virterbi Bit Error Rate')
pt3080Demodulator2PreVirterbiErrorRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator2PreVirterbiErrorRateLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2PreVirterbiErrorRateLimit.setDescription('Upper limit for Pre-Virterbi Bit Error Rate')
pt3080Demodulator1PostVirterbiErrorRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator1PostVirterbiErrorRateLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1PostVirterbiErrorRateLimit.setDescription('Upper limit for Post-Virterbi Bit Error Rate')
pt3080Demodulator2PostVirterbiErrorRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080Demodulator2PostVirterbiErrorRateLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2PostVirterbiErrorRateLimit.setDescription('Upper limit for Post-Virterbi Bit Error Rate')
pt3080Demodulator1FelStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1FelStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1FelStatus.setDescription('Received signal locked status on Demodulator 1')
pt3080Demodulator2FelStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2FelStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2FelStatus.setDescription('Received signal locked status on Demodulator 2')
pt3080Demodulator1UncorrectedPackets = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1UncorrectedPackets.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1UncorrectedPackets.setDescription('Number of uncorrected packets received in Demodulator 1 since\n         boot or since counter was last cleared.')
pt3080Demodulator2UncorrectedPackets = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2UncorrectedPackets.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2UncorrectedPackets.setDescription('Number of uncorrected packets received in Demodulator 2 since\n         boot or since counter was last cleared.')
pt3080Demodulator1Mer = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 11), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1Mer.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1Mer.setDescription('Current MER level for Demodulator 1')
pt3080Demodulator2Mer = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 38), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2Mer.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2Mer.setDescription('Current MER level for Demodulator 2')
pt3080Demodulator1PreVirterbiErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 12), Integer32()).setUnits('0.1 x1e-7').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1PreVirterbiErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1PreVirterbiErrorRate.setDescription('Current Pre-Virterbi Bit Error Rate for Demodulator 1')
pt3080Demodulator2PreVirterbiErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 39), Integer32()).setUnits('0.1 x1e-7').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2PreVirterbiErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2PreVirterbiErrorRate.setDescription('Current Pre-Virterbi Bit Error Rate for Demodulator 2')
pt3080Demodulator1PostVirterbiErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 13), Integer32()).setUnits('0.1 x1e-7').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1PostVirterbiErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1PostVirterbiErrorRate.setDescription('Current Post-Virterbi Bit Error Rate for Demodulator 1')
pt3080Demodulator2PostVirterbiErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 40), Integer32()).setUnits('0.1 x1e-7').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2PostVirterbiErrorRate.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2PostVirterbiErrorRate.setDescription('Current Post-Virterbi Bit Error Rate for Demodulator 2')
pt3080Demodulator1ActualGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g1-32", 0), ("g1-16", 1), ("g1-8", 2), ("g1-4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualGuardInterval.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualGuardInterval.setDescription('Guard Interval for the received signal on Demodulator 1')
pt3080Demodulator2ActualGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g1-32", 0), ("g1-16", 1), ("g1-8", 2), ("g1-4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualGuardInterval.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualGuardInterval.setDescription('Guard Interval for the received signal on Demodulator 2')
pt3080Demodulator1Actualifft = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("f2k", 0), ("f4k", 1), ("f8k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1Actualifft.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1Actualifft.setDescription('IFFT for the received signal on Demodulator 1')
pt3080Demodulator2Actualifft = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("f2k", 0), ("f4k", 1), ("f8k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2Actualifft.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2Actualifft.setDescription('IFFT for the received signal on Demodulator 2')
pt3080Demodulator1ActualConstellation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("qpsk", 0), ("qam16", 1), ("qam64", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualConstellation.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualConstellation.setDescription('Constellation for the received signal on Demodulator 1')
pt3080Demodulator2ActualConstellation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("qpsk", 0), ("qam16", 1), ("qam64", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualConstellation.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualConstellation.setDescription('Constellation for the received signal on Demodulator 2')
pt3080Demodulator1ActualHierarchy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("h-1", 1), ("h-2", 2), ("h-4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualHierarchy.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualHierarchy.setDescription('Hierarchy for the received signal on Demodulator 1')
pt3080Demodulator2ActualHierarchy = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("h-1", 1), ("h-2", 2), ("h-4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualHierarchy.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualHierarchy.setDescription('Hierarchy for the received signal on Demodulator 2')
pt3080Demodulator1ActualCodeRateHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("r1-2", 0), ("r2-3", 1), ("r3-4", 2), ("r5-6", 3), ("r7-8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualCodeRateHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualCodeRateHighPrio.setDescription('High Priority Code Rate for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualCodeRateHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("r1-2", 0), ("r2-3", 1), ("r3-4", 2), ("r5-6", 3), ("r7-8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualCodeRateHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualCodeRateHighPrio.setDescription('High Priority Code Rate for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualCodeRateLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("r1-2", 0), ("r2-3", 1), ("r3-4", 2), ("r5-6", 3), ("r7-8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualCodeRateLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualCodeRateLowPrio.setDescription('High Priority Code Rate for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualCodeRateLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("r1-2", 0), ("r2-3", 1), ("r3-4", 2), ("r5-6", 3), ("r7-8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualCodeRateLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualCodeRateLowPrio.setDescription('High Priority Code Rate for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualDeepInterleaver = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualDeepInterleaver.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualDeepInterleaver.setDescription('Deep Interleaver for the received signal on Demodulator 1')
pt3080Demodulator2ActualDeepInterleaver = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualDeepInterleaver.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualDeepInterleaver.setDescription('Deep Interleaver for the received signal on Demodulator 2')
pt3080Demodulator1ActualMpeFecHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualMpeFecHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualMpeFecHighPrio.setDescription('High Priority MPE/FEC mode for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualMpeFecHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualMpeFecHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualMpeFecHighPrio.setDescription('High Priority MPE/FEC mode for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualMpeFecLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualMpeFecLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualMpeFecLowPrio.setDescription('Low Priority MPE/FEC mode for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualMpeFecLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualMpeFecLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualMpeFecLowPrio.setDescription('Low Priority MPE/FEC mode for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualTimeSlicingHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualTimeSlicingHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualTimeSlicingHighPrio.setDescription('High Priority timeslicing mode for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualTimeSlicingHighPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualTimeSlicingHighPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualTimeSlicingHighPrio.setDescription('High Priority timeslicing mode for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualTimeSlicingLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualTimeSlicingLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualTimeSlicingLowPrio.setDescription('Low Priority timeslicing mode for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualTimeSlicingLowPrio = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualTimeSlicingLowPrio.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualTimeSlicingLowPrio.setDescription('Low Priority timeslicing mode for the received signal on Demodulator\n         2')
pt3080Demodulator1ActualCellID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualCellID.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualCellID.setDescription('Current Cell ID value for the received signal on Demodulator\n         1')
pt3080Demodulator2ActualCellID = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualCellID.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualCellID.setDescription('Current Cell ID value for the received signal on Demodulator\n         1')
pt3080Demodulator1ActualDVBHMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator1ActualDVBHMode.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator1ActualDVBHMode.setDescription('DVB-H mode for the received signal on Demodulator 1')
pt3080Demodulator2ActualDVBHMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 24, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080Demodulator2ActualDVBHMode.setStatus('current')
if mibBuilder.loadTexts: pt3080Demodulator2ActualDVBHMode.setDescription('DVB-H mode for the received signal on Demodulator 2')
pt3080PrecorrectorLinearAdaptive = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptive.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptive.setDescription('Linear precorrection curve active in the system')
pt3080PrecorrectorLinearMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("monitoring", 0), ("static", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMode.setDescription('selection of the operational mode for the linear precorrector\n         <br/>(note: legacy term used for backward compatibility. MONITORING\n         Equal to the mode named BYPASS in the WEB GUI )')
pt3080PrecorrectorLinearSenseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearSenseEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearSenseEnable.setDescription('By using this, it is possible to control wether to use the linear\n         Sense Input or not.')
pt3080PrecorrectorLinearMonitorStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("not-running", 0), ("monitoring", 1), ("initialising", 2), ("initialising-0", 3), ("initialising-10", 4), ("initialising-20", 5), ("initialising-30", 6), ("initialising-40", 7), ("initialising-50", 8), ("initialising-60", 9), ("initialising-70", 10), ("initialising-80", 11), ("initialising-90", 12), ("auto-applying", 13), ("completed", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorStatus.setDescription('linear Precor state')
pt3080PrecorrectorLinearMonitorSenseLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 22), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseLevel.setDescription('Level meassured at the linear sense input with offset defined\n         by attenuation')
pt3080PrecorrectorLinearMonitorSenseValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseValid.setDescription('Is linear sense input information valid')
pt3080PrecorrectorLinearMonitorSenseBadCount = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseBadCount.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorSenseBadCount.setDescription('Number of bad/invalid sense counts, made by the linear adaptive\n         precorrector.')
pt3080PrecorrectorLinearMonitorAmplitudeRipple = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 26), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorAmplitudeRipple.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorAmplitudeRipple.setDescription('Amplitude ripple')
pt3080PrecorrectorLinearMonitorAmplitudeRippleValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorAmplitudeRippleValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorAmplitudeRippleValid.setDescription('Is amplitude ripple information valid')
pt3080PrecorrectorLinearMonitorGroupDelay = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 27), Integer32()).setUnits('0.1 ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorGroupDelay.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorGroupDelay.setDescription('Group delay')
pt3080PrecorrectorLinearMonitorGroupDelayValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorGroupDelayValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorGroupDelayValid.setDescription('Is group delay information valid')
pt3080PrecorrectorLinearMonitorDiscartedIterations = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorDiscartedIterations.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorDiscartedIterations.setDescription('Number of iterations discarded by the linear adaptive precorrector\n         due to noisy signal samples.')
pt3080PrecorrectorLinearMonitorIterations = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorIterations.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearMonitorIterations.setDescription('Number of iterations made by the linear adaptive precorrector.')
pt3080PrecorrectorLinearAdaptiveMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("autorun", 1), ("runtotarget", 2), ("continuous", 3), ("single", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveMode.setDescription('selection of the operational mode for the linear adaptive precorrector\n         <br/>(note: legacy term used for backward compatibility. IDLE\n         Equal to the mode named MONITORING in the WEB GUI )')
pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel.setDescription('Define a adaptive target level for the amplitude ripple')
pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis.setDescription('Define a adaptive target level hysteresis for the amplitude \n        ripple')
pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable.setDescription('Enable amplitude ripple as a trigger for the AUTORUN and RUNTOTARGET\n         modes')
pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('0.1 ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel.setDescription('Define a adaptive target level for the group delay')
pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('0.01 ns').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis.setDescription('Define a adaptive target level hysteresis for the group delay')
pt3080PrecorrectorLinearAdaptiveGroupDelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAdaptiveGroupDelayEnable.setDescription('Enable group delay as a trigger for the AUTORUN and RUNTOTARGET\n         modes')
pt3080PrecorrectorLinearAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAttenuation.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearAttenuation.setDescription('Define a attenuation level for the sense input')
pt3080PrecorrectorNonlinearAdaptive = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptive.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptive.setDescription('Non-Linear precorrection curve active in the system')
pt3080PrecorrectorNonlinearMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("monitoring", 0), ("static", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMode.setDescription('selection of the operational mode for the non-linear precorrector\n         <br/>(note: legacy term used for backward compatibility. MONITORING\n         Equal to the mode named BYPASS in the WEB GUI )')
pt3080PrecorrectorNonlinearSenseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearSenseEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearSenseEnable.setDescription('By using this, it is possible to control wether to use the nonlinear\n         Sense Input or not.')
pt3080PrecorrectorNonlinearMonitorStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("not-running", 0), ("monitoring", 1), ("initialising", 2), ("initialising-0", 3), ("initialising-10", 4), ("initialising-20", 5), ("initialising-30", 6), ("initialising-40", 7), ("initialising-50", 8), ("initialising-60", 9), ("initialising-70", 10), ("initialising-80", 11), ("initialising-90", 12), ("auto-applying", 13), ("completed", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorStatus.setDescription('Nonlinear Precor state')
pt3080PrecorrectorNonlinearMonitorSenseLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 38), Integer32()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseLevel.setDescription('Level meassured at the Nonlinear sense input with offset defined\n         by attenuation')
pt3080PrecorrectorNonlinearMonitorSenseValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseValid.setDescription('Is Nonlinear sense input information valid')
pt3080PrecorrectorNonlinearMonitorSenseBadCount = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseBadCount.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorSenseBadCount.setDescription('Number of bad/invalid sense counts, made by the nonlinear adaptive\n         precorrector.')
pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 28), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel.setDescription('Lower shoulder level')
pt3080PrecorrectorNonlinearMonitorLowerShoulderValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorLowerShoulderValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorLowerShoulderValid.setDescription('Is Lower shoulder information valid')
pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 29), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel.setDescription('Upper shoulder level')
pt3080PrecorrectorNonlinearMonitorUpperShoulderValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorUpperShoulderValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorUpperShoulderValid.setDescription('Is Upper shoulder information valid')
pt3080PrecorrectorNonlinearMonitorDiscartedIterations = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorDiscartedIterations.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorDiscartedIterations.setDescription('Number of iterations discarded by the non-linear adaptive precorrector\n         dur to noisy signal samples.')
pt3080PrecorrectorNonlinearMonitorIterations = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorIterations.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorIterations.setDescription('Number of iterations made by the nonlinear adaptive precorrector.')
pt3080PrecorrectorNonlinearMonitorMer = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 50), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorMer.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorMer.setDescription('MER')
pt3080PrecorrectorNonlinearMonitorMerValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorMerValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorMerValid.setDescription('Is MER information valid')
pt3080PrecorrectorNonlinearMonitorPapr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 52), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorPapr.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorPapr.setDescription('PAPR level')
pt3080PrecorrectorNonlinearMonitorPaprValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorPaprValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearMonitorPaprValid.setDescription('Is Papr information valid')
pt3080PrecorrectorNonlinearAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAttenuation.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAttenuation.setDescription('Define a attenuation level for the sense input')
pt3080PrecorrectorNonlinearAdaptiveMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("autorun", 1), ("runtotarget", 2), ("continuous", 3), ("single", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMode.setDescription('selection of the operational mode for the non-linear adaptive\n         precorrector <br/>(note: legacy term used for backward compatibility.\n         IDLE Equal to the mode named MONITORING in the WEB GUI )')
pt3080PrecorrectorNonlinearAdaptiveAveraging = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveAveraging.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveAveraging.setDescription('Choose wether or not to use averaging calulations')
pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable.setDescription("Enable the modulator's output PAPR limiter function")
pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 180))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit.setDescription('Maximum RF PAPR Limitation')
pt3080PrecorrectorNonlinearAdaptiveMerTarget = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 800))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerTarget.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerTarget.setDescription('Define a target level for the MER')
pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis.setDescription('Define a target MER hysteresis')
pt3080PrecorrectorNonlinearAdaptiveMerEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveMerEnable.setDescription('Enable MER as a trigger for the AUTORUN and RUNTOTARGET modes')
pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-800, 0))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel.setDescription('Define a adaptive target level for the lower shoulder')
pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis.setDescription('Define a adaptive target level hysteresis for the lower shoulder')
pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable.setDescription('Enable shoulder level (lower) as a trigger for the AUTORUN and\n         RUNTOTARGET modes')
pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-800, 0))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel.setDescription('Define a adaptive target level for the upper shoulder')
pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis.setDescription('Define a adaptive target level hysteresis for the upper shoulder')
pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable.setDescription('Enable shoulder level (upper) as a trigger for the AUTORUN and\n         RUNTOTARGET modes')
pt3080PrecorrectorPaprClipping = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1200))).setUnits('0.01 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorPaprClipping.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorPaprClipping.setDescription("set the built-in peak clipper function. The value 'max' corresponds\n         to an unclipped COFDM signal (12dB peak to average ratio). \n        The value 'min' correspondsto COFDM signal where all peaks >2dB\n         above average power are clipped. When feeding the output from\n         the modulator through an amplifier the best overall performance\n         result is normally obtained if the clipper value used by modulator\n         clips the signal just a fraction before the amplifier would\n         clip the signal.")
pt3080PrecorrectorPaprShaping = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorPaprShaping.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorPaprShaping.setDescription("Set the output peak shaping filter hardness. The value 'min'\n         correspond to traditional 'hard-clipping' where the clipper\n         noise is equally distributed below, inside and above the COFDM\n         spectrum (clipper noise clearly visible in the form of noise\n         above and below the spectrum. The value 'max' corresponds to\n         maximum soft clipping where the clipper noise in the sidebands\n         (above and below the COFDM spectrum) is subjected to maximum\n         suppression while still maintaining the exact clipper value\n         (peak-to-average-ration). The suppression of the sideband noise\n         is obtained as a tradeoff against the in band performance. \n        The clip filter setting is typically selected as a compromise\n         between spectrum shoulder performance and in-band signal performance\n         (MER).")
pt3080PrecorrectorClipperMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("monitoring", 0), ("static", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMode.setDescription('Selection between no, static (manual) and adaptive clipper function')
pt3080PrecorrectorClipperAdaptive = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptive.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptive.setDescription('Clipper shaped by the OptiClipper algorithm')
pt3080PrecorrectorClipperEnable = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperEnable.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperEnable.setDescription('Clipper enable')
pt3080PrecorrectorClipperAdaptiveMode = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("monitoring", 0), ("continuous", 1), ("single", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptiveMode.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptiveMode.setDescription('Selection of the operational mode for the adaptive clipper function')
pt3080PrecorrectorClipperAdaptiveShaping = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(99, 100))).setUnits('1 %').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptiveShaping.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperAdaptiveShaping.setDescription("Depricated Therefore min and max value are set to 100% Set the\n         peak shaping filter hardness. The value 'min' correspond to\n         traditional 'hard-clipping' where the clipper noise is equally\n         distributed below, inside and above the COFDM spectrum (clipper\n         noise clearly visible in the form of noise above and below \n        the spectrum. The value 'max' corresponds to maximum soft clipping\n         where the clipper noise in the sidebands (above and below the\n         COFDM spectrum) is subjected to maximum suppression while still\n         maintaining the exact clipper value (peak-to-average-ration).\n         The suppression of the sideband noise is obtained as a tradeoff\n         against the in band performance. The clip filter setting is\n         typically selected as a compromise between spectrum shoulder\n         performance and in-band signal performance (MER).")
pt3080PrecorrectorClipperMonitorStatus = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("not-running", 0), ("monitoring", 1), ("initialising", 2), ("initialising-0", 3), ("initialising-10", 4), ("initialising-20", 5), ("initialising-30", 6), ("initialising-40", 7), ("initialising-50", 8), ("initialising-60", 9), ("initialising-70", 10), ("initialising-80", 11), ("initialising-90", 12), ("auto-applying", 13), ("completed", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorStatus.setDescription('OptiClipper state')
pt3080PrecorrectorClipperMonitorShoulderLevelLower = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 65), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelLower.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelLower.setDescription('Lower shoulder level')
pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid.setDescription('Is Lower shoulder information valid')
pt3080PrecorrectorClipperMonitorShoulderLevelUpper = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 67), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelUpper.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelUpper.setDescription('Upper shoulder level')
pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid.setDescription('Is Upper shoulder information valid')
pt3080PrecorrectorClipperMonitorMer = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 69), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorMer.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorMer.setDescription('MER level')
pt3080PrecorrectorClipperMonitorMerValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorMerValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorMerValid.setDescription('Is MER information valid')
pt3080PrecorrectorClipperMonitorPapr = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 71), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorPapr.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorPapr.setDescription('PAPR level')
pt3080PrecorrectorClipperMonitorPaprValid = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorPaprValid.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorPaprValid.setDescription('Is Papr information valid')
pt3080PrecorrectorClipperMonitorIterations = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorIterations.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorClipperMonitorIterations.setDescription('Number of Iterations performed by the OptiClipper algorithm')
pt3080PrecorrectorLastTurnAroundTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLastTurnAroundTime.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLastTurnAroundTime.setDescription('PrecorrectorLastTurnAroundTime ')
pt3080PrecorrectorSecondsSinceLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorSecondsSinceLastUpdate.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorSecondsSinceLastUpdate.setDescription('PrecorrectorSecondsSinceLastUpdate ')
pt3080PrecorrectorLinCleanrun = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorLinCleanrun.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinCleanrun.setDescription('PrecorrectorLinCleanrun ')
pt3080PrecorrectorNlinCleanrun = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt3080PrecorrectorNlinCleanrun.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNlinCleanrun.setDescription('PrecorrectorNlinCleanrun ')
pt3080PrecorrectorLinearLoadNeutral = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("load", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearLoadNeutral.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearLoadNeutral.setDescription('PrecorrectorLinearLoadNeutral ')
pt3080PrecorrectorLinearLoadFactory = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("load", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearLoadFactory.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearLoadFactory.setDescription('PrecorrectorLinearLoadFactory ')
pt3080PrecorrectorLinearUpdateFactoryCurve = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorLinearUpdateFactoryCurve.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorLinearUpdateFactoryCurve.setDescription('PrecorrectorLinearUpdateFactoryCurve ')
pt3080PrecorrectorNonlinearLoadNeutral = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("load", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearLoadNeutral.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearLoadNeutral.setDescription('PrecorrectorNonlinearLoadNeutral ')
pt3080PrecorrectorNonlinearLoadFactory = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("load", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearLoadFactory.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearLoadFactory.setDescription('PrecorrectorNonlinearLoadFactory ')
pt3080PrecorrectorNonlinearUpdateFactoryCurve = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 25, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noop", 0), ("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearUpdateFactoryCurve.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorNonlinearUpdateFactoryCurve.setDescription('PrecorrectorNonlinearUpdateFactoryCurve ')
pt3080BackplanePolarityHardMute = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activelow", 0), ("activehigh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080BackplanePolarityHardMute.setStatus('current')
if mibBuilder.loadTexts: pt3080BackplanePolarityHardMute.setDescription('Set the polarity of the Hard Mute input pin on the PTT2 backplane.')
pt3080BackplanePolarityRFFail = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activelow", 0), ("activehigh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pt3080BackplanePolarityRFFail.setStatus('current')
if mibBuilder.loadTexts: pt3080BackplanePolarityRFFail.setDescription('Set the polarity of the RF Fail output pin on the PTT2 backplane.')
pt3080Notif = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0))
pt3080NotifMessage = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pt3080NotifMessage.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifMessage.setDescription('The current alarm notification message')
pt3080NotifState = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("activated", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pt3080NotifState.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifState.setDescription('The current alarm notification state')
pt3080NotifLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pt3080NotifLocalTime.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifLocalTime.setDescription('The time the current alarm notification state changed')
pt3080Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 1, 1)).setObjects(("PT3080-MIB", "pt3080SystemGroup"), ("PT3080-MIB", "pt3080InputGroup"), ("PT3080-MIB", "pt3080OutputGroup"), ("PT3080-MIB", "pt3080MonitorGroup"), ("PT3080-MIB", "pt3080TestGroup"), ("PT3080-MIB", "pt3080AlarmGroup"), ("PT3080-MIB", "pt3080PresetGroup"), ("PT3080-MIB", "pt3080EventlogGroup"), ("PT3080-MIB", "pt3080CommsGroup"), ("PT3080-MIB", "pt3080PrecorrectorGroup"), ("PT3080-MIB", "pt3080ModeGroup"), ("PT3080-MIB", "pt3080GpsGroup"), ("PT3080-MIB", "pt3080ChannelFilterGroup"), ("PT3080-MIB", "pt3080TSoIPGroup"), ("PT3080-MIB", "pt3080DemodulatorGroup"), ("PT3080-MIB", "pt3080ReceptionGroup"), ("PT3080-MIB", "pt3080ASIGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080Compliance = pt3080Compliance.setStatus('current')
if mibBuilder.loadTexts: pt3080Compliance.setDescription('The compliance statement for systems supporting\n       the this MIB.')
pt3080Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2))
pt3080SystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 1)).setObjects(("PT3080-MIB", "pt3080SystemInstrumentFW1Rev"), ("PT3080-MIB", "pt3080SystemInstrumentFW1RevBL"), ("PT3080-MIB", "pt3080SystemInstrumentFW2Rev"), ("PT3080-MIB", "pt3080SystemInstrumentFW2RevBL"), ("PT3080-MIB", "pt3080SystemInstrumentFW3Rev"), ("PT3080-MIB", "pt3080SystemInstrumentFW4Rev"), ("PT3080-MIB", "pt3080SystemInstrumentPCBRev"), ("PT3080-MIB", "pt3080SystemInstrumentCalibrationRev"), ("PT3080-MIB", "pt3080SystemInstrumentCalibrationDate"), ("PT3080-MIB", "pt3080SystemReboot"), ("PT3080-MIB", "pt3080SystemRebootDefaultConfig"), ("PT3080-MIB", "pt3080SystemDateTime"), ("PT3080-MIB", "pt3080SystemImage0Version"), ("PT3080-MIB", "pt3080SystemImage0InstalledDate"), ("PT3080-MIB", "pt3080SystemImage1version"), ("PT3080-MIB", "pt3080SystemImage1InstalledDate"), ("PT3080-MIB", "pt3080SystemScheduledActionRecurrence"), ("PT3080-MIB", "pt3080SystemScheduledActionHour"), ("PT3080-MIB", "pt3080SystemScheduledActionMinute"), ("PT3080-MIB", "pt3080SystemScheduledActionWeekday"), ("PT3080-MIB", "pt3080SystemScheduledActionMonthDay"), ("PT3080-MIB", "pt3080SystemScheduledActionDate"), ("PT3080-MIB", "pt3080SystemScheduledActionRandomDelay"), ("PT3080-MIB", "pt3080SystemScheduledActionAction"), ("PT3080-MIB", "pt3080SystemScheduledActionRepeaterMode"), ("PT3080-MIB", "pt3080SystemScheduledActionPresetNo"), ("PT3080-MIB", "pt3080SystemScheduledActionRebootImage"), ("PT3080-MIB", "pt3080SystemScheduledActionRebootSystemType"), ("PT3080-MIB", "pt3080SystemScheduledActionMute"), ("PT3080-MIB", "pt3080SystemScheduledActionSWUpgradeProtocol"), ("PT3080-MIB", "pt3080SystemScheduledActionSWUpgradeUsername"), ("PT3080-MIB", "pt3080SystemScheduledActionSWUpgradePassword"), ("PT3080-MIB", "pt3080SystemScheduledActionSWUpgradeImageServer"), ("PT3080-MIB", "pt3080SystemScheduledActionSWUpgradeImagePath"), ("PT3080-MIB", "pt3080SystemServiceLED"), ("PT3080-MIB", "pt3080SystemLanguage"), ("PT3080-MIB", "pt3080SystemType"), ("PT3080-MIB", "pt3080SystemModulationStandard"), ("PT3080-MIB", "pt3080SystemCurrentImage"), ("PT3080-MIB", "pt3080SystemInstrumentKU"), ("PT3080-MIB", "pt3080SystemInstrumentType"), ("PT3080-MIB", "pt3080SystemInstrumentOptions"), ("PT3080-MIB", "pt3080SystemDateTimeSync"), ("PT3080-MIB", "pt3080SystemDateTimeSyncActual"), ("PT3080-MIB", "pt3080SystemTimezone"), ("PT3080-MIB", "pt3080SystemInstrumentSWRev"), ("PT3080-MIB", "pt3080SystemInstrumentBootLoaderRev"), ("PT3080-MIB", "pt3080SystemInstrumentKernelRev"), ("PT3080-MIB", "pt3080SystemOperationOnTime"), ("PT3080-MIB", "pt3080SystemOperationOnAirTime"), ("PT3080-MIB", "pt3080SystemOperationNumberOfBoots"), ("PT3080-MIB", "pt3080SystemBackplaneid"), ("PT3080-MIB", "pt3080SystemBackplaneIdRaw"), ("PT3080-MIB", "pt3080SystemBackplaneIdPcb"), ("PT3080-MIB", "pt3080SystemBackplaneIdCableOptions"), ("PT3080-MIB", "pt3080SystemBackplaneIdMAnuf"), ("PT3080-MIB", "pt3080SystemBackplaneCalibrationDate"), ("PT3080-MIB", "pt3080SystemBackplaneCalibrationSw"), ("PT3080-MIB", "pt3080SystemBackplaneIdPartlist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080SystemGroup = pt3080SystemGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080SystemGroup.setDescription('System group')
pt3080ModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 2)).setObjects(("PT3080-MIB", "pt3080ModeListenBroadcast"), ("PT3080-MIB", "pt3080ModeNetwork"), ("PT3080-MIB", "pt3080ModeHierarchy"), ("PT3080-MIB", "pt3080Modeifft"), ("PT3080-MIB", "pt3080ModeCodeRateHighPrio"), ("PT3080-MIB", "pt3080ModeCodeRateLowPrio"), ("PT3080-MIB", "pt3080ModeConstellation"), ("PT3080-MIB", "pt3080ModeGuardInterval"), ("PT3080-MIB", "pt3080ModeCellID"), ("PT3080-MIB", "pt3080ModeEnableCellID"), ("PT3080-MIB", "pt3080ModeDeepInterleaver"), ("PT3080-MIB", "pt3080ModeEnableDVBH"), ("PT3080-MIB", "pt3080ModeMpeFecLowPrio"), ("PT3080-MIB", "pt3080ModeMpeFecHighPrio"), ("PT3080-MIB", "pt3080ModeTimeSlicingLowPrio"), ("PT3080-MIB", "pt3080ModeTimeSlicingHighPrio"), ("PT3080-MIB", "pt3080ModeSfnDelayOffset"), ("PT3080-MIB", "pt3080ModeTxIdent"), ("PT3080-MIB", "pt3080ModeMipControl"), ("PT3080-MIB", "pt3080ModeNetworkDelayHP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMinHP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMaxHP"), ("PT3080-MIB", "pt3080ModeMaxNetworkDelayHP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMarginHP"), ("PT3080-MIB", "pt3080ModeNetworkDelayLP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMinLP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMaxLP"), ("PT3080-MIB", "pt3080ModeMaxNetworkDelayLP"), ("PT3080-MIB", "pt3080ModeNetworkDelayMarginLP"), ("PT3080-MIB", "pt3080ModeNetworkDelayReset"), ("PT3080-MIB", "pt3080ModeDefaultMIPOutputPower"), ("PT3080-MIB", "pt3080ModeDefaultMIPOutputTimeOffset"), ("PT3080-MIB", "pt3080ModeDefaultMIPOutputCellID"), ("PT3080-MIB", "pt3080ModeDefaultMIPOutputFreqOffset"), ("PT3080-MIB", "pt3080ModeMIPMaxSFNDelay"), ("PT3080-MIB", "pt3080ModeMipControlOutputPower"), ("PT3080-MIB", "pt3080ModeMipControlOutputTimeOffset"), ("PT3080-MIB", "pt3080ModeMipControlOutputCellId"), ("PT3080-MIB", "pt3080ModeMipControlOutputFreqOffset"), ("PT3080-MIB", "pt3080ModeMfnKeepNullPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080ModeGroup = pt3080ModeGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080ModeGroup.setDescription('DVB-T Mode group')
pt3080InputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 3)).setObjects(("PT3080-MIB", "pt3080InputASITSPrimarySource"), ("PT3080-MIB", "pt3080InputASITSSecondarySource"), ("PT3080-MIB", "pt3080InputASIAutoRoutingPolicy"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxPATDelay"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxPATDelayEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryExpectedTSID"), ("PT3080-MIB", "pt3080InputTSPrimaryExpectedTSIDEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryExpectedNWID"), ("PT3080-MIB", "pt3080InputTSPrimaryExpectedNWIDEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxStuffingrate"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxStuffingrateEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryMinDelaymargin"), ("PT3080-MIB", "pt3080InputTSPrimaryMinDelaymarginEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxMissingmip"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxMissingmipEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxPATDelay"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxPATDelayEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryExpectedTSID"), ("PT3080-MIB", "pt3080InputTSSecondaryExpectedTSIDEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryExpectedNWID"), ("PT3080-MIB", "pt3080InputTSSecondaryExpectedNWIDEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxStuffingrate"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxStuffingrateEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryMinDelaymargin"), ("PT3080-MIB", "pt3080InputTSSecondaryMinDelaymarginEnable"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxMissingmip"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxMissingmipEnable"), ("PT3080-MIB", "pt3080InputTSPrimaryMaxStsJitter"), ("PT3080-MIB", "pt3080InputTSSecondaryMaxStsJitter"), ("PT3080-MIB", "pt3080InputTSPrimaryStatus"), ("PT3080-MIB", "pt3080InputTSSecondaryStatus"), ("PT3080-MIB", "pt3080InputTSHp"), ("PT3080-MIB", "pt3080InputTSLp"), ("PT3080-MIB", "pt3080InputEffectiveAutoroutingPolicy"), ("PT3080-MIB", "pt3080InputTSHpBitrate"), ("PT3080-MIB", "pt3080InputTSLpBitrate"), ("PT3080-MIB", "pt3080InputTSHpPacketsBuffered"), ("PT3080-MIB", "pt3080InputTSHpPacketSize"), ("PT3080-MIB", "pt3080InputTSHpStuffingrate"), ("PT3080-MIB", "pt3080InputTSHpTSID"), ("PT3080-MIB", "pt3080InputTSLpPacketsBuffered"), ("PT3080-MIB", "pt3080InputTSLpPacketSize"), ("PT3080-MIB", "pt3080InputTSLpStuffingrate"), ("PT3080-MIB", "pt3080InputTSLpTSID"), ("PT3080-MIB", "pt3080InputTSHpNWID"), ("PT3080-MIB", "pt3080InputTSLpNWID"), ("PT3080-MIB", "pt3080InputTSPrimaryStsJitter"), ("PT3080-MIB", "pt3080InputTSPrimaryStsJitterMax"), ("PT3080-MIB", "pt3080InputTSPrimaryStsJitterMin"), ("PT3080-MIB", "pt3080InputTSPrimaryStsJitterReset"), ("PT3080-MIB", "pt3080InputTSSecondaryStsJitter"), ("PT3080-MIB", "pt3080InputTSSecondaryStsJitterMax"), ("PT3080-MIB", "pt3080InputTSSecondaryStsJitterMin"), ("PT3080-MIB", "pt3080InputTSSecondaryStsJitterReset"), ("PT3080-MIB", "pt3080InputRefDevType"), ("PT3080-MIB", "pt3080InputRefCalDate"), ("PT3080-MIB", "pt3080InputRefCalVer"), ("PT3080-MIB", "pt3080InputRefDirection"), ("PT3080-MIB", "pt3080InputRefSource"), ("PT3080-MIB", "pt3080InputRefStatus"), ("PT3080-MIB", "pt3080InputRef10MhzImpedance"), ("PT3080-MIB", "pt3080InputRef10MhzHoldoverDelay"), ("PT3080-MIB", "pt3080InputRef10MhzHoldoverForever"), ("PT3080-MIB", "pt3080InputRef1PPSImpedance"), ("PT3080-MIB", "pt3080InputRef1PPSHoldoverDelay"), ("PT3080-MIB", "pt3080InputRef1PPSHoldoverForever"), ("PT3080-MIB", "pt3080InputRef1PPSTrigSlope"), ("PT3080-MIB", "pt3080InputRef1PPSTrigLevel"), ("PT3080-MIB", "pt3080InputASIAutoRoutingDelayHp2Lp"), ("PT3080-MIB", "pt3080InputASIAutoRoutingDelayLp2Hp"), ("PT3080-MIB", "pt3080InputASIHoldoverTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080InputGroup = pt3080InputGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080InputGroup.setDescription('Input group')
pt3080OutputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 4)).setObjects(("PT3080-MIB", "pt3080OutputIfEnable"), ("PT3080-MIB", "pt3080OutputIfFrequency"), ("PT3080-MIB", "pt3080OutputIfPolarity"), ("PT3080-MIB", "pt3080OutputIfLevel"), ("PT3080-MIB", "pt3080OutputMode"), ("PT3080-MIB", "pt3080OutputEffectiveLevel"), ("PT3080-MIB", "pt3080OutputActualLevel"), ("PT3080-MIB", "pt3080OutputPolarity"), ("PT3080-MIB", "pt3080OutputRfFrequency"), ("PT3080-MIB", "pt3080OutputRfFrequencyOffset"), ("PT3080-MIB", "pt3080OutputRfLevel"), ("PT3080-MIB", "pt3080OutputRfCableMode"), ("PT3080-MIB", "pt3080OutputRfCableConstantLevelOffset"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset0"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset1"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset2"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset3"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset4"), ("PT3080-MIB", "pt3080OutputRfCableFrequencyLevelOffset5"), ("PT3080-MIB", "pt3080OutputRfDetectedActualLevel"), ("PT3080-MIB", "pt3080OutputRfDetectedLowerLevelLimit"), ("PT3080-MIB", "pt3080OutputRfDetectedLowerLevelcontrol"), ("PT3080-MIB", "pt3080OutputRfDetectedHigherLevelLimit"), ("PT3080-MIB", "pt3080OutputRfDetectedHigherLevelcontrol"), ("PT3080-MIB", "pt3080OutputRfAlcControl"), ("PT3080-MIB", "pt3080OutputRfAlcSense"), ("PT3080-MIB", "pt3080OutputRfAlcSetpointPort1"), ("PT3080-MIB", "pt3080OutputRfAlcSetpointPort2"), ("PT3080-MIB", "pt3080OutputRfAlcStatus"), ("PT3080-MIB", "pt3080OutputRfAlcStatusInformation"), ("PT3080-MIB", "pt3080OutputBandwidth"), ("PT3080-MIB", "pt3080OutputChannel"), ("PT3080-MIB", "pt3080OutputSynchronized"), ("PT3080-MIB", "pt3080OutputMute"), ("PT3080-MIB", "pt3080OutputPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080OutputGroup = pt3080OutputGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080OutputGroup.setDescription('Output group')
pt3080GpsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 7)).setObjects(("PT3080-MIB", "pt3080GpsBias"), ("PT3080-MIB", "pt3080GpsbiasVoltage"), ("PT3080-MIB", "pt3080GpsCableDelay"), ("PT3080-MIB", "pt3080GpsHoldoverForever"), ("PT3080-MIB", "pt3080GpsHoldoverTime"), ("PT3080-MIB", "pt3080GpsSatelliteSystemGPS"), ("PT3080-MIB", "pt3080GpsSatelliteSystemGLONASS"), ("PT3080-MIB", "pt3080GpsSatelliteSystemGALILEO"), ("PT3080-MIB", "pt3080GpsSatelliteSystemCOMPASS"), ("PT3080-MIB", "pt3080GpsVersion"), ("PT3080-MIB", "pt3080Gps1PPSStatus"), ("PT3080-MIB", "pt3080GpsState"), ("PT3080-MIB", "pt3080GpsVisibleSatellitesSnr"), ("PT3080-MIB", "pt3080GpsVisibleSatellites"), ("PT3080-MIB", "pt3080GpsTrackedSatellites"), ("PT3080-MIB", "pt3080GpsLongtitude"), ("PT3080-MIB", "pt3080GpsLatitude"), ("PT3080-MIB", "pt3080GpsAltitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080GpsGroup = pt3080GpsGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080GpsGroup.setDescription('GPS group')
pt3080ChannelFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 8)).setObjects(("PT3080-MIB", "pt3080ChannelFiltersSelect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080ChannelFilterGroup = pt3080ChannelFilterGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080ChannelFilterGroup.setDescription('Channel Filter group')
pt3080TSoIPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 10)).setObjects(("PT3080-MIB", "pt3080TSoIPRx1ReceiverEnable"), ("PT3080-MIB", "pt3080TSoIPRx2ReceiverEnable"), ("PT3080-MIB", "pt3080TSoIPRx1LanSelect"), ("PT3080-MIB", "pt3080TSoIPRx2LanSelect"), ("PT3080-MIB", "pt3080TSoIPRx1Multicast"), ("PT3080-MIB", "pt3080TSoIPRx2Multicast"), ("PT3080-MIB", "pt3080TSoIPRx1Protocol"), ("PT3080-MIB", "pt3080TSoIPRx2Protocol"), ("PT3080-MIB", "pt3080TSoIPRx1Portnumber"), ("PT3080-MIB", "pt3080TSoIPRx2Portnumber"), ("PT3080-MIB", "pt3080TSoIPRx1PacketErrorRatioLimit"), ("PT3080-MIB", "pt3080TSoIPRx2PacketErrorRatioLimit"), ("PT3080-MIB", "pt3080TSoIPRx1MinumimLatency"), ("PT3080-MIB", "pt3080TSoIPRx2MinumimLatency"), ("PT3080-MIB", "pt3080TSoIPRx1SyncTimeout"), ("PT3080-MIB", "pt3080TSoIPRx2SyncTimeout"), ("PT3080-MIB", "pt3080TSoIPRx1Status"), ("PT3080-MIB", "pt3080TSoIPRx2Status"), ("PT3080-MIB", "pt3080TSoIPRx1CurrentIPAddress"), ("PT3080-MIB", "pt3080TSoIPRx2CurrentIPAddress"), ("PT3080-MIB", "pt3080TSoIPRx1IpBitrate"), ("PT3080-MIB", "pt3080TSoIPRx2IpBitrate"), ("PT3080-MIB", "pt3080TSoIPRx1PacketErrorRatio"), ("PT3080-MIB", "pt3080TSoIPRx2PacketErrorRatio"), ("PT3080-MIB", "pt3080TSoIPRx1SequenceErrors"), ("PT3080-MIB", "pt3080TSoIPRx2SequenceErrors"), ("PT3080-MIB", "pt3080TSoIPRx1LostIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx2LostIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx1CorrectedIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx2CorrectedIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx1OverrunIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx2OverrunIPFrames"), ("PT3080-MIB", "pt3080TSoIPRx1PacketsPerFrame"), ("PT3080-MIB", "pt3080TSoIPRx2PacketsPerFrame"), ("PT3080-MIB", "pt3080TSoIPRx1TSPacketSize"), ("PT3080-MIB", "pt3080TSoIPRx2TSPacketSize"), ("PT3080-MIB", "pt3080TSoIPRx1FecColumn"), ("PT3080-MIB", "pt3080TSoIPRx2FecColumn"), ("PT3080-MIB", "pt3080TSoIPRx1FecRow"), ("PT3080-MIB", "pt3080TSoIPRx2FecRow"), ("PT3080-MIB", "pt3080TSoIPRx1QueueSize"), ("PT3080-MIB", "pt3080TSoIPRx2QueueSize"), ("PT3080-MIB", "pt3080TSoIPRx1CurrentLatency"), ("PT3080-MIB", "pt3080TSoIPRx2CurrentLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080TSoIPGroup = pt3080TSoIPGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080TSoIPGroup.setDescription('TSoIP group')
pt3080MonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 12)).setObjects(("PT3080-MIB", "pt3080MonitorSource"), ("PT3080-MIB", "pt3080MonitorTSoIPEnable"), ("PT3080-MIB", "pt3080MonitorTSoIPSource"), ("PT3080-MIB", "pt3080MonitorTSoIPMulticastLanSelect"), ("PT3080-MIB", "pt3080MonitorTSoIPDestIPAddress"), ("PT3080-MIB", "pt3080MonitorTSoIPDestPort"), ("PT3080-MIB", "pt3080MonitorTSoIPProtocol"), ("PT3080-MIB", "pt3080MonitorTSoIPEnableFec"), ("PT3080-MIB", "pt3080MonitorTSoIPFecColumn"), ("PT3080-MIB", "pt3080MonitorTSoIPFecRow"), ("PT3080-MIB", "pt3080MonitorTSoIPFecSkew"), ("PT3080-MIB", "pt3080MonitorTSoIPKeepNullPackets"), ("PT3080-MIB", "pt3080MonitorTSoIPPacketsPerFrame"), ("PT3080-MIB", "pt3080MonitorTSoIPUDPChecksum"), ("PT3080-MIB", "pt3080MonitorTSoIPDSCP"), ("PT3080-MIB", "pt3080MonitorTSoIPTTL"), ("PT3080-MIB", "pt3080MonitorTSoIPGenerateError"), ("PT3080-MIB", "pt3080MonitorTSoIPIpBitrate"), ("PT3080-MIB", "pt3080MonitorTSoIPTSSize"), ("PT3080-MIB", "pt3080MonitorTSoIPLostIPFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080MonitorGroup = pt3080MonitorGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080MonitorGroup.setDescription('Signal monitor group')
pt3080TestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 13)).setObjects(("PT3080-MIB", "pt3080TestEnable"), ("PT3080-MIB", "pt3080TestEnableReconnect"), ("PT3080-MIB", "pt3080TestScarrierLevel"), ("PT3080-MIB", "pt3080TestscarrierFrequencyOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080TestGroup = pt3080TestGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080TestGroup.setDescription('Test Signal group')
pt3080AlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 14)).setObjects(("PT3080-MIB", "pt3080GroupAlarmDescription"), ("PT3080-MIB", "pt3080GroupAlarmState"), ("PT3080-MIB", "pt3080GroupAlarmActionEventlog"), ("PT3080-MIB", "pt3080GroupAlarmActionRelay1"), ("PT3080-MIB", "pt3080GroupAlarmActionRelay2"), ("PT3080-MIB", "pt3080GroupAlarmActionTrap"), ("PT3080-MIB", "pt3080GroupAlarmActionEmail"), ("PT3080-MIB", "pt3080GroupAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080GroupAlarmActionForceMode"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmDescription"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmState"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionEventlog"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionRelay1"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionRelay2"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionTrap"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionEmail"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080ASITSPrimaryAlarmActionForceMode"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmDescription"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmState"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionEventlog"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionRelay1"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionRelay2"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionTrap"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionEmail"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080ASITSSecondaryAlarmActionForceMode"), ("PT3080-MIB", "pt3080SFNAlarmDescription"), ("PT3080-MIB", "pt3080SFNAlarmState"), ("PT3080-MIB", "pt3080SFNAlarmActionEventlog"), ("PT3080-MIB", "pt3080SFNAlarmActionRelay1"), ("PT3080-MIB", "pt3080SFNAlarmActionRelay2"), ("PT3080-MIB", "pt3080SFNAlarmActionTrap"), ("PT3080-MIB", "pt3080SFNAlarmActionEmail"), ("PT3080-MIB", "pt3080SFNAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080SFNAlarmActionForceMode"), ("PT3080-MIB", "pt3080TSoIPAlarmDescription"), ("PT3080-MIB", "pt3080TSoIPAlarmState"), ("PT3080-MIB", "pt3080TSoIPAlarmActionEventlog"), ("PT3080-MIB", "pt3080TSoIPAlarmActionRelay1"), ("PT3080-MIB", "pt3080TSoIPAlarmActionRelay2"), ("PT3080-MIB", "pt3080TSoIPAlarmActionTrap"), ("PT3080-MIB", "pt3080TSoIPAlarmActionEmail"), ("PT3080-MIB", "pt3080TSoIPAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080TSoIPAlarmActionForceMode"), ("PT3080-MIB", "pt3080DemodulatorAlarmDescription"), ("PT3080-MIB", "pt3080DemodulatorAlarmState"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionEventlog"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionRelay1"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionRelay2"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionTrap"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionEmail"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080DemodulatorAlarmActionForceMode"), ("PT3080-MIB", "pt3080ReferenceAlarmDescription"), ("PT3080-MIB", "pt3080ReferenceAlarmState"), ("PT3080-MIB", "pt3080ReferenceAlarmActionEventlog"), ("PT3080-MIB", "pt3080ReferenceAlarmActionRelay1"), ("PT3080-MIB", "pt3080ReferenceAlarmActionRelay2"), ("PT3080-MIB", "pt3080ReferenceAlarmActionTrap"), ("PT3080-MIB", "pt3080ReferenceAlarmActionEmail"), ("PT3080-MIB", "pt3080ReferenceAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080ReferenceAlarmActionForceMode"), ("PT3080-MIB", "pt3080RFAlarmDescription"), ("PT3080-MIB", "pt3080RFAlarmState"), ("PT3080-MIB", "pt3080RFAlarmActionEventlog"), ("PT3080-MIB", "pt3080RFAlarmActionRelay1"), ("PT3080-MIB", "pt3080RFAlarmActionRelay2"), ("PT3080-MIB", "pt3080RFAlarmActionTrap"), ("PT3080-MIB", "pt3080RFAlarmActionEmail"), ("PT3080-MIB", "pt3080RFAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080RFAlarmActionForceMode"), ("PT3080-MIB", "pt3080GPSAlarmDescription"), ("PT3080-MIB", "pt3080GPSAlarmState"), ("PT3080-MIB", "pt3080GPSAlarmActionEventlog"), ("PT3080-MIB", "pt3080GPSAlarmActionRelay1"), ("PT3080-MIB", "pt3080GPSAlarmActionRelay2"), ("PT3080-MIB", "pt3080GPSAlarmActionTrap"), ("PT3080-MIB", "pt3080GPSAlarmActionEmail"), ("PT3080-MIB", "pt3080GPSAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080GPSAlarmActionForceMode"), ("PT3080-MIB", "pt3080ExternalAlarmDescription"), ("PT3080-MIB", "pt3080ExternalAlarmState"), ("PT3080-MIB", "pt3080ExternalAlarmActionEventlog"), ("PT3080-MIB", "pt3080ExternalAlarmActionRelay1"), ("PT3080-MIB", "pt3080ExternalAlarmActionRelay2"), ("PT3080-MIB", "pt3080ExternalAlarmActionTrap"), ("PT3080-MIB", "pt3080ExternalAlarmActionEmail"), ("PT3080-MIB", "pt3080ExternalAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080ExternalAlarmActionForceMode"), ("PT3080-MIB", "pt3080HWMonitorAlarmDescription"), ("PT3080-MIB", "pt3080HWMonitorAlarmState"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionEventlog"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionRelay1"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionRelay2"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionTrap"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionEmail"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080HWMonitorAlarmActionForceMode"), ("PT3080-MIB", "pt3080CommsAlarmDescription"), ("PT3080-MIB", "pt3080CommsAlarmState"), ("PT3080-MIB", "pt3080CommsAlarmActionEventlog"), ("PT3080-MIB", "pt3080CommsAlarmActionRelay1"), ("PT3080-MIB", "pt3080CommsAlarmActionRelay2"), ("PT3080-MIB", "pt3080CommsAlarmActionTrap"), ("PT3080-MIB", "pt3080CommsAlarmActionEmail"), ("PT3080-MIB", "pt3080CommsAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080CommsAlarmActionForceMode"), ("PT3080-MIB", "pt3080InternalAlarmDescription"), ("PT3080-MIB", "pt3080InternalAlarmState"), ("PT3080-MIB", "pt3080InternalAlarmActionEventlog"), ("PT3080-MIB", "pt3080InternalAlarmActionRelay1"), ("PT3080-MIB", "pt3080InternalAlarmActionRelay2"), ("PT3080-MIB", "pt3080InternalAlarmActionTrap"), ("PT3080-MIB", "pt3080InternalAlarmActionEmail"), ("PT3080-MIB", "pt3080InternalAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080InternalAlarmActionForceMode"), ("PT3080-MIB", "pt3080ASIAlarmDescription"), ("PT3080-MIB", "pt3080ASIAlarmState"), ("PT3080-MIB", "pt3080ASIAlarmActionEventlog"), ("PT3080-MIB", "pt3080ASIAlarmActionRelay1"), ("PT3080-MIB", "pt3080ASIAlarmActionRelay2"), ("PT3080-MIB", "pt3080ASIAlarmActionTrap"), ("PT3080-MIB", "pt3080ASIAlarmActionEmail"), ("PT3080-MIB", "pt3080ASIAlarmActionAlarmLED"), ("PT3080-MIB", "pt3080ASIAlarmActionForceMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080AlarmGroup = pt3080AlarmGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080AlarmGroup.setDescription('Alarm group')
pt3080PresetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 15)).setObjects(("PT3080-MIB", "pt3080PresetName"), ("PT3080-MIB", "pt3080PresetRecall"), ("PT3080-MIB", "pt3080PresetStore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080PresetGroup = pt3080PresetGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080PresetGroup.setDescription('Preset group')
pt3080EventlogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 16)).setObjects(("PT3080-MIB", "pt3080EventlogID"), ("PT3080-MIB", "pt3080EventlogTimestamp"), ("PT3080-MIB", "pt3080EventlogText"), ("PT3080-MIB", "pt3080EventlogClear"), ("PT3080-MIB", "pt3080EventlogEnable"), ("PT3080-MIB", "pt3080EventlogMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080EventlogGroup = pt3080EventlogGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080EventlogGroup.setDescription('Eventlog group')
pt3080CommsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 17)).setObjects(("PT3080-MIB", "pt3080CommsAccessPasswordObserver"), ("PT3080-MIB", "pt3080CommsAccessPasswordOperator"), ("PT3080-MIB", "pt3080CommsAccessPasswordAdministrator"), ("PT3080-MIB", "pt3080CommsStaticRouteType"), ("PT3080-MIB", "pt3080CommsStaticRoutePrefix"), ("PT3080-MIB", "pt3080CommsStaticRoutePrefixSize"), ("PT3080-MIB", "pt3080CommsStaticRouteTarget"), ("PT3080-MIB", "pt3080CommsStaticRoutePhysicalInterface"), ("PT3080-MIB", "pt3080CommsAlarmEmailReceiver"), ("PT3080-MIB", "pt3080CommsSeparatedSwitchPorts"), ("PT3080-MIB", "pt3080CommsBroadcastStormProtection"), ("PT3080-MIB", "pt3080CommsLocalPhysicalInterface"), ("PT3080-MIB", "pt3080CommsLocalDhcpMode"), ("PT3080-MIB", "pt3080CommsLocalStaticIpAddr"), ("PT3080-MIB", "pt3080CommsLocalStaticNetmask"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastAddr"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterMode"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress1"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress2"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress3"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress4"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress5"), ("PT3080-MIB", "pt3080CommsLocalIpMulticastSourceFilterAddress6"), ("PT3080-MIB", "pt3080CommsLocalVlanEnable"), ("PT3080-MIB", "pt3080CommsLocalVlanId"), ("PT3080-MIB", "pt3080CommsLocalServiceSNMP"), ("PT3080-MIB", "pt3080CommsLocalServiceSCPI"), ("PT3080-MIB", "pt3080CommsLocalServiceTSoIP"), ("PT3080-MIB", "pt3080CommsLocalServiceRIP"), ("PT3080-MIB", "pt3080CommsLocalCurrentIpAddr"), ("PT3080-MIB", "pt3080CommsLocalCurrentNetmask"), ("PT3080-MIB", "pt3080CommsRemoteEnable"), ("PT3080-MIB", "pt3080CommsRemotePhysicalInterface"), ("PT3080-MIB", "pt3080CommsRemoteDhcpMode"), ("PT3080-MIB", "pt3080CommsRemoteStaticIpAddr"), ("PT3080-MIB", "pt3080CommsRemoteStaticNetmask"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastAddr"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterMode"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress1"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress2"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress3"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress4"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress5"), ("PT3080-MIB", "pt3080CommsRemoteIpMulticastSourceFilterAddress6"), ("PT3080-MIB", "pt3080CommsRemoteVlanEnable"), ("PT3080-MIB", "pt3080CommsRemoteVlanId"), ("PT3080-MIB", "pt3080CommsRemoteServiceSNMP"), ("PT3080-MIB", "pt3080CommsRemoteServiceSCPI"), ("PT3080-MIB", "pt3080CommsRemoteServiceTSoIP"), ("PT3080-MIB", "pt3080CommsRemoteServiceWeb"), ("PT3080-MIB", "pt3080CommsRemoteServiceRIP"), ("PT3080-MIB", "pt3080CommsRemoteCurrentIpAddr"), ("PT3080-MIB", "pt3080CommsRemoteCurrentNetmask"), ("PT3080-MIB", "pt3080CommsGbeAdminEnable"), ("PT3080-MIB", "pt3080CommsGbeAdminPhysicalInterface"), ("PT3080-MIB", "pt3080CommsGbeAdminDhcpMode"), ("PT3080-MIB", "pt3080CommsGbeAdminStaticIpAddr"), ("PT3080-MIB", "pt3080CommsGbeAdminStaticNetmask"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastAddr"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterMode"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress1"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress2"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress3"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress4"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress5"), ("PT3080-MIB", "pt3080CommsGbeAdminIpMulticastSourceFilterAddress6"), ("PT3080-MIB", "pt3080CommsGbeAdminVlanEnable"), ("PT3080-MIB", "pt3080CommsGbeAdminVlanId"), ("PT3080-MIB", "pt3080CommsGbeAdminServiceSNMP"), ("PT3080-MIB", "pt3080CommsGbeAdminServiceSCPI"), ("PT3080-MIB", "pt3080CommsGbeAdminServiceTSoIP"), ("PT3080-MIB", "pt3080CommsGbeAdminServiceWeb"), ("PT3080-MIB", "pt3080CommsGbeAdminServiceRIP"), ("PT3080-MIB", "pt3080CommsGbeAdminCurrentIpAddr"), ("PT3080-MIB", "pt3080CommsGbeAdminCurrentNetmask"), ("PT3080-MIB", "pt3080CommsBackupEnable"), ("PT3080-MIB", "pt3080CommsBackupPhysicalInterface"), ("PT3080-MIB", "pt3080CommsBackupDhcpMode"), ("PT3080-MIB", "pt3080CommsBackupStaticIpAddr"), ("PT3080-MIB", "pt3080CommsBackupStaticNetmask"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastAddr"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterMode"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress1"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress2"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress3"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress4"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress5"), ("PT3080-MIB", "pt3080CommsBackupIpMulticastSourceFilterAddress6"), ("PT3080-MIB", "pt3080CommsBackupVlanEnable"), ("PT3080-MIB", "pt3080CommsBackupVlanId"), ("PT3080-MIB", "pt3080CommsBackupServiceSNMP"), ("PT3080-MIB", "pt3080CommsBackupServiceSCPI"), ("PT3080-MIB", "pt3080CommsBackupServiceTSoIP"), ("PT3080-MIB", "pt3080CommsBackupServiceWeb"), ("PT3080-MIB", "pt3080CommsBackupServiceRIP"), ("PT3080-MIB", "pt3080CommsBackupCurrentIpAddr"), ("PT3080-MIB", "pt3080CommsBackupCurrentNetmask"), ("PT3080-MIB", "pt3080CommsPortEnable"), ("PT3080-MIB", "pt3080CommsPortPhysicalInterface"), ("PT3080-MIB", "pt3080CommsPortDhcpMode"), ("PT3080-MIB", "pt3080CommsPortStaticIpAddr"), ("PT3080-MIB", "pt3080CommsPortStaticNetmask"), ("PT3080-MIB", "pt3080CommsPortIpMulticastAddr"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterMode"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress1"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress2"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress3"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress4"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress5"), ("PT3080-MIB", "pt3080CommsPortIpMulticastSourceFilterAddress6"), ("PT3080-MIB", "pt3080CommsPortVlanEnable"), ("PT3080-MIB", "pt3080CommsPortVlanId"), ("PT3080-MIB", "pt3080CommsPortServiceSNMP"), ("PT3080-MIB", "pt3080CommsPortServiceSCPI"), ("PT3080-MIB", "pt3080CommsPortServiceTSoIP"), ("PT3080-MIB", "pt3080CommsPortServiceWeb"), ("PT3080-MIB", "pt3080CommsPortServiceRIP"), ("PT3080-MIB", "pt3080CommsPortCurrentIpAddr"), ("PT3080-MIB", "pt3080CommsPortCurrentNetmask"), ("PT3080-MIB", "pt3080CommsSNMPServicePort"), ("PT3080-MIB", "pt3080CommsSNMPReadOnlyCommunity"), ("PT3080-MIB", "pt3080CommsSNMPReadWriteCommunity"), ("PT3080-MIB", "pt3080CommsSNMPTrapCommunity"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestination"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestination2"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestination3"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestination4"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestination5"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestinationPort"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestinationPort2"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestinationPort3"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestinationPort4"), ("PT3080-MIB", "pt3080CommsSNMPTrapDestinationPort5"), ("PT3080-MIB", "pt3080CommsStaticGateway"), ("PT3080-MIB", "pt3080CommsCurrentGateway"), ("PT3080-MIB", "pt3080CommsStaticHostname"), ("PT3080-MIB", "pt3080CommsCurrentHostname"), ("PT3080-MIB", "pt3080CommsStaticDNSDomain"), ("PT3080-MIB", "pt3080CommsCurrentDNSDomain"), ("PT3080-MIB", "pt3080CommsStaticDNS1ServerAddress"), ("PT3080-MIB", "pt3080CommsStaticDNS2ServerAddress"), ("PT3080-MIB", "pt3080CommsStaticDNS3ServerAddress"), ("PT3080-MIB", "pt3080CommsCurrentDNS1ServerAddress"), ("PT3080-MIB", "pt3080CommsCurrentDNS2ServerAddress"), ("PT3080-MIB", "pt3080CommsCurrentDNS3ServerAddress"), ("PT3080-MIB", "pt3080CommsStaticNtpServerAddress"), ("PT3080-MIB", "pt3080CommsCurrentNtpServerAddress"), ("PT3080-MIB", "pt3080CommsEmailServerAddress"), ("PT3080-MIB", "pt3080CommsWebServicePort"), ("PT3080-MIB", "pt3080CommsSCPIServicePort"), ("PT3080-MIB", "pt3080CommsSCPIServerBaudrate"), ("PT3080-MIB", "pt3080CommsSCPIUartInterface"), ("PT3080-MIB", "pt3080CommsRipPort"), ("PT3080-MIB", "pt3080CommsIGMPVersion"), ("PT3080-MIB", "pt3080CommsIGMPQueryRobustnessCount"), ("PT3080-MIB", "pt3080CommsIGMPv3UnsolicitedReportInterval"), ("PT3080-MIB", "pt3080CommsIGMPv2UnsolicitedReportInterval"), ("PT3080-MIB", "pt3080CommsAccessAllowed"), ("PT3080-MIB", "pt3080CommsAccessAllowedTimeout"), ("PT3080-MIB", "pt3080CommsAccessAllowedTimeLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080CommsGroup = pt3080CommsGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080CommsGroup.setDescription('Data network communications group')
pt3080DemodulatorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 24)).setObjects(("PT3080-MIB", "pt3080DemodulatorFollowMode"), ("PT3080-MIB", "pt3080Demodulator1Available"), ("PT3080-MIB", "pt3080Demodulator2Available"), ("PT3080-MIB", "pt3080Demodulator1FWVersion"), ("PT3080-MIB", "pt3080Demodulator2FWVersion"), ("PT3080-MIB", "pt3080Demodulator1OutputTS"), ("PT3080-MIB", "pt3080Demodulator2OutputTS"), ("PT3080-MIB", "pt3080Demodulator1MerLimit"), ("PT3080-MIB", "pt3080Demodulator2MerLimit"), ("PT3080-MIB", "pt3080Demodulator1PreVirterbiErrorRateLimit"), ("PT3080-MIB", "pt3080Demodulator2PreVirterbiErrorRateLimit"), ("PT3080-MIB", "pt3080Demodulator1PostVirterbiErrorRateLimit"), ("PT3080-MIB", "pt3080Demodulator2PostVirterbiErrorRateLimit"), ("PT3080-MIB", "pt3080Demodulator1FelStatus"), ("PT3080-MIB", "pt3080Demodulator2FelStatus"), ("PT3080-MIB", "pt3080Demodulator1UncorrectedPackets"), ("PT3080-MIB", "pt3080Demodulator2UncorrectedPackets"), ("PT3080-MIB", "pt3080Demodulator1Mer"), ("PT3080-MIB", "pt3080Demodulator2Mer"), ("PT3080-MIB", "pt3080Demodulator1PreVirterbiErrorRate"), ("PT3080-MIB", "pt3080Demodulator2PreVirterbiErrorRate"), ("PT3080-MIB", "pt3080Demodulator1PostVirterbiErrorRate"), ("PT3080-MIB", "pt3080Demodulator2PostVirterbiErrorRate"), ("PT3080-MIB", "pt3080Demodulator1ActualGuardInterval"), ("PT3080-MIB", "pt3080Demodulator2ActualGuardInterval"), ("PT3080-MIB", "pt3080Demodulator1Actualifft"), ("PT3080-MIB", "pt3080Demodulator2Actualifft"), ("PT3080-MIB", "pt3080Demodulator1ActualConstellation"), ("PT3080-MIB", "pt3080Demodulator2ActualConstellation"), ("PT3080-MIB", "pt3080Demodulator1ActualHierarchy"), ("PT3080-MIB", "pt3080Demodulator2ActualHierarchy"), ("PT3080-MIB", "pt3080Demodulator1ActualCodeRateHighPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualCodeRateHighPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualCodeRateLowPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualCodeRateLowPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualDeepInterleaver"), ("PT3080-MIB", "pt3080Demodulator2ActualDeepInterleaver"), ("PT3080-MIB", "pt3080Demodulator1ActualMpeFecHighPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualMpeFecHighPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualMpeFecLowPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualMpeFecLowPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualTimeSlicingHighPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualTimeSlicingHighPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualTimeSlicingLowPrio"), ("PT3080-MIB", "pt3080Demodulator2ActualTimeSlicingLowPrio"), ("PT3080-MIB", "pt3080Demodulator1ActualCellID"), ("PT3080-MIB", "pt3080Demodulator2ActualCellID"), ("PT3080-MIB", "pt3080Demodulator1ActualDVBHMode"), ("PT3080-MIB", "pt3080Demodulator2ActualDVBHMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080DemodulatorGroup = pt3080DemodulatorGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080DemodulatorGroup.setDescription('Demodulator group')
pt3080PrecorrectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 25)).setObjects(("PT3080-MIB", "pt3080PrecorrectorLastTurnAroundTime"), ("PT3080-MIB", "pt3080PrecorrectorSecondsSinceLastUpdate"), ("PT3080-MIB", "pt3080PrecorrectorLinCleanrun"), ("PT3080-MIB", "pt3080PrecorrectorNlinCleanrun"), ("PT3080-MIB", "pt3080PrecorrectorLinearLoadNeutral"), ("PT3080-MIB", "pt3080PrecorrectorLinearLoadFactory"), ("PT3080-MIB", "pt3080PrecorrectorLinearUpdateFactoryCurve"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearLoadNeutral"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearLoadFactory"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearUpdateFactoryCurve"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptive"), ("PT3080-MIB", "pt3080PrecorrectorLinearMode"), ("PT3080-MIB", "pt3080PrecorrectorLinearSenseEnable"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorStatus"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorSenseLevel"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorSenseValid"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorSenseBadCount"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorAmplitudeRipple"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorAmplitudeRippleValid"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorGroupDelay"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorGroupDelayValid"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorDiscartedIterations"), ("PT3080-MIB", "pt3080PrecorrectorLinearMonitorIterations"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveMode"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis"), ("PT3080-MIB", "pt3080PrecorrectorLinearAdaptiveGroupDelayEnable"), ("PT3080-MIB", "pt3080PrecorrectorLinearAttenuation"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptive"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMode"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearSenseEnable"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorStatus"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorSenseLevel"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorSenseValid"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorSenseBadCount"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorLowerShoulderValid"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorUpperShoulderValid"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorDiscartedIterations"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorIterations"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorMer"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorMerValid"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorPapr"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearMonitorPaprValid"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAttenuation"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMode"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveAveraging"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMerTarget"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveMerEnable"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis"), ("PT3080-MIB", "pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable"), ("PT3080-MIB", "pt3080PrecorrectorPaprClipping"), ("PT3080-MIB", "pt3080PrecorrectorPaprShaping"), ("PT3080-MIB", "pt3080PrecorrectorClipperMode"), ("PT3080-MIB", "pt3080PrecorrectorClipperAdaptive"), ("PT3080-MIB", "pt3080PrecorrectorClipperEnable"), ("PT3080-MIB", "pt3080PrecorrectorClipperAdaptiveMode"), ("PT3080-MIB", "pt3080PrecorrectorClipperAdaptiveShaping"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorStatus"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorShoulderLevelLower"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorShoulderLevelUpper"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorMer"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorMerValid"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorPapr"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorPaprValid"), ("PT3080-MIB", "pt3080PrecorrectorClipperMonitorIterations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080PrecorrectorGroup = pt3080PrecorrectorGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080PrecorrectorGroup.setDescription('Precorrector group')
pt3080ReceptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 26)).setObjects(("PT3080-MIB", "pt3080ReceptionGainControl"), ("PT3080-MIB", "pt3080ReceptionGainManualValue"), ("PT3080-MIB", "pt3080ReceptionGainLimitEnable"), ("PT3080-MIB", "pt3080ReceptionGainLimit"), ("PT3080-MIB", "pt3080ReceptionGainCurrent"), ("PT3080-MIB", "pt3080ReceptionAGCMode"), ("PT3080-MIB", "pt3080ReceptionAGCHysteresis"), ("PT3080-MIB", "pt3080ReceptionBandwidth"), ("PT3080-MIB", "pt3080ReceptionRFFrequency"), ("PT3080-MIB", "pt3080ReceptionRFFrequencyOffset"), ("PT3080-MIB", "pt3080ReceptionRFPolarity"), ("PT3080-MIB", "pt3080ReceptionRFSquelchEnable"), ("PT3080-MIB", "pt3080ReceptionRFSquelchThreshold"), ("PT3080-MIB", "pt3080ReceptionRFSquelchHysteresis"), ("PT3080-MIB", "pt3080ReceptionRFTrackingFilterEnable"), ("PT3080-MIB", "pt3080ReceptionRFifLevel"), ("PT3080-MIB", "pt3080ReceptionRFNominalInputLevel"), ("PT3080-MIB", "pt3080ReceptionRFInputLevel"), ("PT3080-MIB", "pt3080ReceptionRFInputLevelThreshold"), ("PT3080-MIB", "pt3080ReceptionRFInputLevelHysteresis"), ("PT3080-MIB", "pt3080ReceptionIFFrequency"), ("PT3080-MIB", "pt3080ReceptionIFPolarity"), ("PT3080-MIB", "pt3080ReceptionIFInputLevel"), ("PT3080-MIB", "pt3080ReceptionIFInputPolicy"), ("PT3080-MIB", "pt3080ReceptionIFInput"), ("PT3080-MIB", "pt3080ReceptionIFRFtoIFHoldoverDelay"), ("PT3080-MIB", "pt3080ReceptionIFIFtoRFHoldoverDelay"), ("PT3080-MIB", "pt3080ReceptionTunerHWVersion"), ("PT3080-MIB", "pt3080ReceptionTunerHWType"), ("PT3080-MIB", "pt3080ReceptionTunerHWID"), ("PT3080-MIB", "pt3080ReceptionTunerHWSerialNumber"), ("PT3080-MIB", "pt3080ReceptionTunerHWCalibrationDate"), ("PT3080-MIB", "pt3080ReceptionTunerHWCalibrationDataVersion"), ("PT3080-MIB", "pt3080ReceptionTunerHWCalibrationSWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080ReceptionGroup = pt3080ReceptionGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080ReceptionGroup.setDescription('Reception group')
pt3080BackplaneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 27)).setObjects(("PT3080-MIB", "pt3080BackplanePolarityHardMute"), ("PT3080-MIB", "pt3080BackplanePolarityRFFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080BackplaneGroup = pt3080BackplaneGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080BackplaneGroup.setDescription('Backplane group')
pt3080ASIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 30)).setObjects(("PT3080-MIB", "pt3080ASIInput1SyncTimeout"), ("PT3080-MIB", "pt3080ASIInput2SyncTimeout"), ("PT3080-MIB", "pt3080ASIInput1DataErrorLimit"), ("PT3080-MIB", "pt3080ASIInput2DataErrorLimit"), ("PT3080-MIB", "pt3080ASIInput1SyncStatus"), ("PT3080-MIB", "pt3080ASIInput2SyncStatus"), ("PT3080-MIB", "pt3080ASIInput1SyncSignal"), ("PT3080-MIB", "pt3080ASIInput2SyncSignal"), ("PT3080-MIB", "pt3080ASIInput1SyncTSSize"), ("PT3080-MIB", "pt3080ASIInput2SyncTSSize"), ("PT3080-MIB", "pt3080ASIInput1LineErrors"), ("PT3080-MIB", "pt3080ASIInput2LineErrors"), ("PT3080-MIB", "pt3080ASIInput1LineRate"), ("PT3080-MIB", "pt3080ASIInput2LineRate"), ("PT3080-MIB", "pt3080ASIInput1LineErrorRate"), ("PT3080-MIB", "pt3080ASIInput2LineErrorRate"), ("PT3080-MIB", "pt3080ASIInput1DataErrors"), ("PT3080-MIB", "pt3080ASIInput2DataErrors"), ("PT3080-MIB", "pt3080ASIInput1DataRate"), ("PT3080-MIB", "pt3080ASIInput2DataRate"), ("PT3080-MIB", "pt3080ASIInput1DataErrorRate"), ("PT3080-MIB", "pt3080ASIInput2DataErrorRate"), ("PT3080-MIB", "pt3080ASIInput1ClearErrorCounters"), ("PT3080-MIB", "pt3080ASIInput2ClearErrorCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080ASIGroup = pt3080ASIGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080ASIGroup.setDescription('ASI media group')
pt3080NotifsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 2, 64)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifsGroup = pt3080NotifsGroup.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifsGroup.setDescription('Notification objects group')
pt3080Agent = AgentCapabilities((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 3))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080Agent = pt3080Agent.setProductRelease('SWPROTELEVISION_P3_1_02_157 build 1441106393')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080Agent = pt3080Agent.setStatus('current')
if mibBuilder.loadTexts: pt3080Agent.setDescription('PT2080 DVB-T/H Modulator agent')
pt3080NotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4))
pt3080NotifModulatorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 3)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifModulatorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifModulatorAlarm.setDescription('Modulator Alarms')
pt3080NotifTSPrimaryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 5)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryAlarm.setDescription('ASI TS Primary Alarms')
pt3080NotifTSSecondaryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 6)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryAlarm.setDescription('ASI TS Secondary Alarms')
pt3080NotifSFNAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 7)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNAlarm.setDescription('SFN Alarms')
pt3080NotifRefenceClockAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 8)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockAlarm.setDescription('Reference Alarms')
pt3080NotifRFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 9)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRFAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRFAlarm.setDescription('RF Alarms')
pt3080NotifGNSSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 10)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifGNSSAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGNSSAlarm.setDescription('GNSS Alarms')
pt3080NotifTSoIPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 12)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSoIPAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSoIPAlarm.setDescription('TSoIP Alarms')
pt3080NotifExternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 13)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalAlarm.setDescription('External Alarms')
pt3080NotifHWMonitorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 14)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorAlarm.setDescription('HW Monitor Alarms')
pt3080NotifCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 15)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommAlarm.setDescription('Communications Alarms')
pt3080NotifASIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 16)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifASIAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifASIAlarm.setDescription('ASI Alarms')
pt3080NotifInternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 18)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalAlarm.setDescription('Internal Alarms')
pt3080NotifTSPrimarySyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 21)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimarySyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimarySyncLossAlarm.setDescription('TS Primary Sync Loss')
pt3080NotifTSPrimarySyncErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 22)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimarySyncErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimarySyncErrorAlarm.setDescription('TS Primary Sync Error')
pt3080NotifTSPrimaryPCRErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 23)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryPCRErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryPCRErrorAlarm.setDescription('TS Primary PCR Error')
pt3080NotifTSPrimaryPATLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 24)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryPATLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryPATLossAlarm.setDescription('TS Primary PAT Loss')
pt3080NotifTSPrimaryTSIDWrongAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 25)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryTSIDWrongAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryTSIDWrongAlarm.setDescription('TS Primary Transport Stream ID')
pt3080NotifTSPrimaryNWIDWrongAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 26)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryNWIDWrongAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryNWIDWrongAlarm.setDescription('TS Primary Network ID')
pt3080NotifTSPrimaryStuffingRateExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 27)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryStuffingRateExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryStuffingRateExceededAlarm.setDescription('TS Primary Stuffing Rate')
pt3080NotifTSPrimaryBufferPoolExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 28)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryBufferPoolExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryBufferPoolExceededAlarm.setDescription('TS Primary Buffer Pool')
pt3080NotifTSPrimarySTSJitterExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 29)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimarySTSJitterExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimarySTSJitterExceededAlarm.setDescription('TS Primary STS Jitter')
pt3080NotifTSPrimaryMIPDataMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 30)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryMIPDataMissingAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryMIPDataMissingAlarm.setDescription('TS Primary MIP Data Missing')
pt3080NotifTSPrimaryMIPPriorityBadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 31)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryMIPPriorityBadAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryMIPPriorityBadAlarm.setDescription('TS Primary Bad Priority in MIP')
pt3080NotifTSSecondarySyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 32)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondarySyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondarySyncLossAlarm.setDescription('TS Secondary Sync Loss')
pt3080NotifTSSecondarySyncErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 33)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondarySyncErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondarySyncErrorAlarm.setDescription('TS Secondary Sync Error')
pt3080NotifTSSecondaryPCRErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 34)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryPCRErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryPCRErrorAlarm.setDescription('TS Secondary PCR Error')
pt3080NotifTSSecondaryPATLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 35)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryPATLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryPATLossAlarm.setDescription('TS Secondary PAT Loss')
pt3080NotifTSSecondaryTSIDWrongAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 36)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryTSIDWrongAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryTSIDWrongAlarm.setDescription('TS Secondary Transport Stream ID')
pt3080NotifTSSecondaryNWIDWrongAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 37)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryNWIDWrongAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryNWIDWrongAlarm.setDescription('TS Secondary Network ID')
pt3080NotifTSSecondaryStuffingRateExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 38)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryStuffingRateExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryStuffingRateExceededAlarm.setDescription('TS Secondary Stuffing Rate')
pt3080NotifTSSecondaryBufferPoolExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 39)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryBufferPoolExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryBufferPoolExceededAlarm.setDescription('TS Secondary Buffer Pool')
pt3080NotifTSSecondarySTSJitterExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 40)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondarySTSJitterExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondarySTSJitterExceededAlarm.setDescription('TS Secondary STS Jitter')
pt3080NotifTSSecondaryMIPDataMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 41)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryMIPDataMissingAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryMIPDataMissingAlarm.setDescription('TS Secondary MIP Data Missing')
pt3080NotifTSSecondaryMIPPriorityBadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 42)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryMIPPriorityBadAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryMIPPriorityBadAlarm.setDescription('TS Secondary Bad Priority in MIP')
pt3080NotifRFOverloadProtectionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 44)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRFOverloadProtectionAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRFOverloadProtectionAlarm.setDescription('Overload Protection')
pt3080NotifCommeth0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 55)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommeth0Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommeth0Alarm.setDescription('ETH0 Conn. State')
pt3080NotifCommeth1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 56)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommeth1Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommeth1Alarm.setDescription('ETH1 Conn. State')
pt3080NotifCommeth2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 57)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommeth2Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommeth2Alarm.setDescription('ETH2 Conn. State')
pt3080NotifCommeth3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 58)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommeth3Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommeth3Alarm.setDescription('ETH3 Conn. State')
pt3080NotifCommeth4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 59)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifCommeth4Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifCommeth4Alarm.setDescription('ETH4 Conn. State')
pt3080NotifExternalInput1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 72)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput1Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput1Alarm.setDescription('Alarm Input 1')
pt3080NotifExternalInput2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 73)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput2Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput2Alarm.setDescription('Alarm Input 2')
pt3080NotifExternalInput3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 74)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput3Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput3Alarm.setDescription('Alarm Input 3')
pt3080NotifExternalInput4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 75)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput4Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput4Alarm.setDescription('Alarm Input 4')
pt3080NotifRefenceClockExtern1PPSLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 76)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockExtern1PPSLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockExtern1PPSLossAlarm.setDescription('Ext. 1PPS Loss')
pt3080NotifRefenceClockIntern1PPSLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 77)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockIntern1PPSLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockIntern1PPSLossAlarm.setDescription('Int. 10MHz Loss')
pt3080NotifRefenceClockExtern10MHzLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 78)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockExtern10MHzLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockExtern10MHzLossAlarm.setDescription('Ext. 10MHz Loss')
pt3080NotifRFAlcRangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 79)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRFAlcRangeAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRFAlcRangeAlarm.setDescription('ALC Range')
pt3080NotifSFNResyncAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 80)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNResyncAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNResyncAlarm.setDescription('SFN Resync Error')
pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 81)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm.setDescription('Primary SFN Max Delay + Offset OOR')
pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 82)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm.setDescription('Primary SFN NW Delay Greater Than Max')
pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 84)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm.setDescription('Secondary SFN Max. Delay + Offset OOR')
pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 85)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm.setDescription('Secondary SFN NW Delay Greater Than Max')
pt3080NotifRFLevelOutOfRangeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 87)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRFLevelOutOfRangeAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRFLevelOutOfRangeAlarm.setDescription('RF Level Out of Range')
pt3080NotifRefenceClockNTPSyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 89)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockNTPSyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockNTPSyncLossAlarm.setDescription('NTP Sync Loss')
pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 92)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm.setDescription('Primary Delay Margin too Small for Seamless and Holdover')
pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 93)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm.setDescription('Primary SFN and MIP Config Differ')
pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 94)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm.setDescription('Secondary Delay Margin too Small for Seamless and Holdover')
pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 95)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm.setDescription('Secondary SFN and MIP Config Differ')
pt3080NotifGNSSUnlockedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 98)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifGNSSUnlockedAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGNSSUnlockedAlarm.setDescription('GNSS Unlocked')
pt3080NotifGNSSAntennaFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 107)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifGNSSAntennaFaultAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGNSSAntennaFaultAlarm.setDescription('GNSS Antenna Fault')
pt3080NotifGNSSHoldOverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 108)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifGNSSHoldOverAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGNSSHoldOverAlarm.setDescription('GNSS Holdover')
pt3080NotifRefenceClockExternal10MHzHoldOverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 109)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockExternal10MHzHoldOverAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockExternal10MHzHoldOverAlarm.setDescription('Ext. 10MHz Ref Holdover')
pt3080NotifRefenceClockExternal1PPSHoldOverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 110)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifRefenceClockExternal1PPSHoldOverAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifRefenceClockExternal1PPSHoldOverAlarm.setDescription('Ext. 1PPS Ref Holdover')
pt3080NotifASIASI1ErrorRateEceeededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 113)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifASIASI1ErrorRateEceeededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifASIASI1ErrorRateEceeededAlarm.setDescription('ASI-IN1 Error Rate')
pt3080NotifASIASI2ErrorRateEceeededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 114)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifASIASI2ErrorRateEceeededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifASIASI2ErrorRateEceeededAlarm.setDescription('ASI-IN2 Error Rate')
pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 115)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm.setDescription('TSoIP RX1 Package Error Ratio Exceeded')
pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 117)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm.setDescription('TSoIP RX2 Package Error Ratio Exceeded')
pt3080NotifTSoIPRx1SyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 119)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSoIPRx1SyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSoIPRx1SyncLossAlarm.setDescription('TSoIP RX1 Signal Loss')
pt3080NotifTSoIPRx2SyncLossAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 121)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSoIPRx2SyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSoIPRx2SyncLossAlarm.setDescription('TSoIP RX2 Signal Loss')
pt3080NotifInternalBackplaneAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 129)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalBackplaneAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalBackplaneAlarm.setDescription('Backplane Status')
pt3080NotifInternalReferenceClockAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 132)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalReferenceClockAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalReferenceClockAlarm.setDescription('Reference Status')
pt3080NotifInternalUpConverterAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 134)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalUpConverterAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalUpConverterAlarm.setDescription('Upconverter Status')
pt3080NotifInternalDownConverterAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 135)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalDownConverterAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalDownConverterAlarm.setDescription('Downconverter Status')
pt3080NotifInternalMainboardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 136)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalMainboardAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalMainboardAlarm.setDescription('Main board Status')
pt3080NotifInternalBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 137)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalBatteryAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalBatteryAlarm.setDescription('Main Board Battery')
pt3080NotifInternalFirmware1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 139)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalFirmware1Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalFirmware1Alarm.setDescription('Firmware 1 Status')
pt3080NotifInternalGNSSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 142)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalGNSSAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalGNSSAlarm.setDescription('GNSS Status')
pt3080NotifInternalSatelliteAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 143)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalSatelliteAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalSatelliteAlarm.setDescription('Satrecv Status')
pt3080NotifInternalEthAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 146)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalEthAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalEthAlarm.setDescription('EtherNet Port Failure')
pt3080NotifHWMonitorFPGAAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 156)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorFPGAAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorFPGAAlarm.setDescription('Main Board FPGA Temperature')
pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 157)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm.setDescription('Main Board CPU Temperature')
pt3080NotifHWMonitorMainBoardTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 158)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorMainBoardTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorMainBoardTemperatureAlarm.setDescription('Main Board Temperature')
pt3080NotifHWMonitorLeftFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 159)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorLeftFanAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorLeftFanAlarm.setDescription('Left Chassis Fan')
pt3080NotifHWMonitorRightFan2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 160)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorRightFan2Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorRightFan2Alarm.setDescription('Right Chassis Fan')
pt3080NotifHWMonitorBackplaneTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 162)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifHWMonitorBackplaneTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifHWMonitorBackplaneTemperatureAlarm.setDescription('Backplane Temperature')
pt3080NotifTSPrimaryInputTSHoldOverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 180)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryInputTSHoldOverAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryInputTSHoldOverAlarm.setDescription('Input TS Holdover')
pt3080NotifInternalPLLUnlockedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 182)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifInternalPLLUnlockedAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifInternalPLLUnlockedAlarm.setDescription('PLL Out of Lock')
pt3080NotifExternalInput5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 183)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput5Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput5Alarm.setDescription('Alarm Input 5')
pt3080NotifSFNUntimedModeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 184)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNUntimedModeAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNUntimedModeAlarm.setDescription('SFN Mode Untimed')
pt3080NotifSFNFreeRunningModeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 185)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifSFNFreeRunningModeAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifSFNFreeRunningModeAlarm.setDescription('SFN Mode Free Running')
pt3080NotifExternalInput6Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 186)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput6Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput6Alarm.setDescription('Alarm Input 6')
pt3080NotifExternalInput7Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 187)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput7Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput7Alarm.setDescription('Alarm Input 7')
pt3080NotifExternalInput8Alarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 188)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifExternalInput8Alarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifExternalInput8Alarm.setDescription('Alarm Input 8')
pt3080NotifTSPrimaryDelayMarginAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 190)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSPrimaryDelayMarginAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSPrimaryDelayMarginAlarm.setDescription('TS Primary Delay Margin')
pt3080NotifTSSecondaryDelayMarginAlarm = NotificationType((1, 3, 6, 1, 4, 1, 18086, 3080, 64, 0, 191)).setObjects(("PT3080-MIB", "pt3080NotifMessage"), ("PT3080-MIB", "pt3080NotifState"), ("PT3080-MIB", "pt3080NotifLocalTime"))
if mibBuilder.loadTexts: pt3080NotifTSSecondaryDelayMarginAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifTSSecondaryDelayMarginAlarm.setDescription('TS Secondary Delay Margin')
pt3080NotifGroupModulatorAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 3)).setObjects(("PT3080-MIB", "pt3080NotifModulatorAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupModulatorAlarm = pt3080NotifGroupModulatorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupModulatorAlarm.setDescription('Modulator Alarms')
pt3080NotifGroupTSPrimaryAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 5)).setObjects(("PT3080-MIB", "pt3080NotifTSPrimaryAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimarySyncLossAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimarySyncErrorAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryPCRErrorAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryPATLossAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryTSIDWrongAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryNWIDWrongAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryStuffingRateExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryBufferPoolExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimarySTSJitterExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryMIPDataMissingAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryMIPPriorityBadAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryInputTSHoldOverAlarm"), ("PT3080-MIB", "pt3080NotifTSPrimaryDelayMarginAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupTSPrimaryAlarm = pt3080NotifGroupTSPrimaryAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupTSPrimaryAlarm.setDescription('ASI TS Primary Alarms')
pt3080NotifGroupTSSecondaryAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 6)).setObjects(("PT3080-MIB", "pt3080NotifTSSecondaryAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondarySyncLossAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondarySyncErrorAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryPCRErrorAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryPATLossAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryTSIDWrongAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryNWIDWrongAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryStuffingRateExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryBufferPoolExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondarySTSJitterExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryMIPDataMissingAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryMIPPriorityBadAlarm"), ("PT3080-MIB", "pt3080NotifTSSecondaryDelayMarginAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupTSSecondaryAlarm = pt3080NotifGroupTSSecondaryAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupTSSecondaryAlarm.setDescription('ASI TS Secondary Alarms')
pt3080NotifGroupSFNAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 7)).setObjects(("PT3080-MIB", "pt3080NotifSFNAlarm"), ("PT3080-MIB", "pt3080NotifSFNResyncAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm"), ("PT3080-MIB", "pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm"), ("PT3080-MIB", "pt3080NotifSFNUntimedModeAlarm"), ("PT3080-MIB", "pt3080NotifSFNFreeRunningModeAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupSFNAlarm = pt3080NotifGroupSFNAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupSFNAlarm.setDescription('SFN Alarms')
pt3080NotifGroupRefenceClockAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 8)).setObjects(("PT3080-MIB", "pt3080NotifRefenceClockAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockExtern1PPSLossAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockIntern1PPSLossAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockExtern10MHzLossAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockNTPSyncLossAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockExternal10MHzHoldOverAlarm"), ("PT3080-MIB", "pt3080NotifRefenceClockExternal1PPSHoldOverAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupRefenceClockAlarm = pt3080NotifGroupRefenceClockAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupRefenceClockAlarm.setDescription('Reference Alarms')
pt3080NotifGroupRFAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 9)).setObjects(("PT3080-MIB", "pt3080NotifRFAlarm"), ("PT3080-MIB", "pt3080NotifRFOverloadProtectionAlarm"), ("PT3080-MIB", "pt3080NotifRFAlcRangeAlarm"), ("PT3080-MIB", "pt3080NotifRFLevelOutOfRangeAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupRFAlarm = pt3080NotifGroupRFAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupRFAlarm.setDescription('RF Alarms')
pt3080NotifGroupGNSSAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 10)).setObjects(("PT3080-MIB", "pt3080NotifGNSSAlarm"), ("PT3080-MIB", "pt3080NotifGNSSUnlockedAlarm"), ("PT3080-MIB", "pt3080NotifGNSSAntennaFaultAlarm"), ("PT3080-MIB", "pt3080NotifGNSSHoldOverAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupGNSSAlarm = pt3080NotifGroupGNSSAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupGNSSAlarm.setDescription('GNSS Alarms')
pt3080NotifGroupTSoIPAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 12)).setObjects(("PT3080-MIB", "pt3080NotifTSoIPAlarm"), ("PT3080-MIB", "pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm"), ("PT3080-MIB", "pt3080NotifTSoIPRx1SyncLossAlarm"), ("PT3080-MIB", "pt3080NotifTSoIPRx2SyncLossAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupTSoIPAlarm = pt3080NotifGroupTSoIPAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupTSoIPAlarm.setDescription('TSoIP Alarms')
pt3080NotifGroupExternalAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 13)).setObjects(("PT3080-MIB", "pt3080NotifExternalAlarm"), ("PT3080-MIB", "pt3080NotifExternalInput1Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput2Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput3Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput4Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput5Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput6Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput7Alarm"), ("PT3080-MIB", "pt3080NotifExternalInput8Alarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupExternalAlarm = pt3080NotifGroupExternalAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupExternalAlarm.setDescription('External Alarms')
pt3080NotifGroupHWMonitorAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 14)).setObjects(("PT3080-MIB", "pt3080NotifHWMonitorAlarm"), ("PT3080-MIB", "pt3080NotifHWMonitorFPGAAlarm"), ("PT3080-MIB", "pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm"), ("PT3080-MIB", "pt3080NotifHWMonitorMainBoardTemperatureAlarm"), ("PT3080-MIB", "pt3080NotifHWMonitorLeftFanAlarm"), ("PT3080-MIB", "pt3080NotifHWMonitorRightFan2Alarm"), ("PT3080-MIB", "pt3080NotifHWMonitorBackplaneTemperatureAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupHWMonitorAlarm = pt3080NotifGroupHWMonitorAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupHWMonitorAlarm.setDescription('HW Monitor Alarms')
pt3080NotifGroupCommAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 15)).setObjects(("PT3080-MIB", "pt3080NotifCommAlarm"), ("PT3080-MIB", "pt3080NotifCommeth0Alarm"), ("PT3080-MIB", "pt3080NotifCommeth1Alarm"), ("PT3080-MIB", "pt3080NotifCommeth2Alarm"), ("PT3080-MIB", "pt3080NotifCommeth3Alarm"), ("PT3080-MIB", "pt3080NotifCommeth4Alarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupCommAlarm = pt3080NotifGroupCommAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupCommAlarm.setDescription('Communications Alarms')
pt3080NotifGroupASIAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 16)).setObjects(("PT3080-MIB", "pt3080NotifASIAlarm"), ("PT3080-MIB", "pt3080NotifASIASI1ErrorRateEceeededAlarm"), ("PT3080-MIB", "pt3080NotifASIASI2ErrorRateEceeededAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupASIAlarm = pt3080NotifGroupASIAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupASIAlarm.setDescription('ASI Alarms')
pt3080NotifGroupInternalAlarm = NotificationGroup((1, 3, 6, 1, 4, 1, 18086, 3080, 100, 4, 18)).setObjects(("PT3080-MIB", "pt3080NotifInternalAlarm"), ("PT3080-MIB", "pt3080NotifInternalBackplaneAlarm"), ("PT3080-MIB", "pt3080NotifInternalReferenceClockAlarm"), ("PT3080-MIB", "pt3080NotifInternalUpConverterAlarm"), ("PT3080-MIB", "pt3080NotifInternalDownConverterAlarm"), ("PT3080-MIB", "pt3080NotifInternalMainboardAlarm"), ("PT3080-MIB", "pt3080NotifInternalBatteryAlarm"), ("PT3080-MIB", "pt3080NotifInternalFirmware1Alarm"), ("PT3080-MIB", "pt3080NotifInternalGNSSAlarm"), ("PT3080-MIB", "pt3080NotifInternalSatelliteAlarm"), ("PT3080-MIB", "pt3080NotifInternalEthAlarm"), ("PT3080-MIB", "pt3080NotifInternalPLLUnlockedAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pt3080NotifGroupInternalAlarm = pt3080NotifGroupInternalAlarm.setStatus('current')
if mibBuilder.loadTexts: pt3080NotifGroupInternalAlarm.setDescription('Internal Alarms')
mibBuilder.exportSymbols("PT3080-MIB", pt3080Demodulator1Available=pt3080Demodulator1Available, pt3080RFAlarmActionAlarmLED=pt3080RFAlarmActionAlarmLED, pt3080NotifInternalDownConverterAlarm=pt3080NotifInternalDownConverterAlarm, pt3080ChannelFilterGroup=pt3080ChannelFilterGroup, pt3080SystemImage1InstalledDate=pt3080SystemImage1InstalledDate, pt3080NotifTSPrimaryAlarm=pt3080NotifTSPrimaryAlarm, pt3080HWMonitorAlarmTable=pt3080HWMonitorAlarmTable, pt3080Demodulator2ActualGuardInterval=pt3080Demodulator2ActualGuardInterval, pt3080NotifExternalInput7Alarm=pt3080NotifExternalInput7Alarm, pt3080NotifTSPrimaryNWIDWrongAlarm=pt3080NotifTSPrimaryNWIDWrongAlarm, pt3080ReceptionTunerHWVersion=pt3080ReceptionTunerHWVersion, pt3080ASIInput1SyncTimeout=pt3080ASIInput1SyncTimeout, pt3080CommsStaticDNS3ServerAddress=pt3080CommsStaticDNS3ServerAddress, pt3080CommsSCPIServicePort=pt3080CommsSCPIServicePort, pt3080OutputRfCableConstantLevelOffset=pt3080OutputRfCableConstantLevelOffset, pt3080PrecorrectorNonlinearLoadNeutral=pt3080PrecorrectorNonlinearLoadNeutral, pt3080CommsRemoteStaticIpAddr=pt3080CommsRemoteStaticIpAddr, pt3080CommsLocalServiceTSoIP=pt3080CommsLocalServiceTSoIP, pt3080CommsCurrentNtpServerAddress=pt3080CommsCurrentNtpServerAddress, pt3080BackplaneGroup=pt3080BackplaneGroup, pt3080NotifInternalBatteryAlarm=pt3080NotifInternalBatteryAlarm, pt3080SystemScheduledActionMonthDay=pt3080SystemScheduledActionMonthDay, pt3080PrecorrectorNonlinearUpdateFactoryCurve=pt3080PrecorrectorNonlinearUpdateFactoryCurve, pt3080GpsBias=pt3080GpsBias, pt3080DemodulatorAlarmTable=pt3080DemodulatorAlarmTable, pt3080CommsLocalStaticIpAddr=pt3080CommsLocalStaticIpAddr, pt3080SFNAlarmActionTrap=pt3080SFNAlarmActionTrap, pt3080NotifInternalEthAlarm=pt3080NotifInternalEthAlarm, pt3080RFAlarmEntry=pt3080RFAlarmEntry, pt3080PrecorrectorNonlinearMonitorPaprValid=pt3080PrecorrectorNonlinearMonitorPaprValid, pt3080TSoIPRx2MinumimLatency=pt3080TSoIPRx2MinumimLatency, pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis=pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetHysteresis, pt3080Demodulator1OutputTS=pt3080Demodulator1OutputTS, pt3080CommsRemoteServiceRIP=pt3080CommsRemoteServiceRIP, pt3080ExternalAlarmState=pt3080ExternalAlarmState, pt3080MonitorTSoIPKeepNullPackets=pt3080MonitorTSoIPKeepNullPackets, pt3080TSoIPRx2IpBitrate=pt3080TSoIPRx2IpBitrate, pt3080CommsCurrentDNS3ServerAddress=pt3080CommsCurrentDNS3ServerAddress, pt3080TSoIPRx2PacketErrorRatioLimit=pt3080TSoIPRx2PacketErrorRatioLimit, pt3080ReceptionIFInput=pt3080ReceptionIFInput, pt3080PrecorrectorLinearMonitorGroupDelay=pt3080PrecorrectorLinearMonitorGroupDelay, pt3080CommsAlarmTable=pt3080CommsAlarmTable, pt3080CommsGbeAdminIpMulticastSourceFilterAddress3=pt3080CommsGbeAdminIpMulticastSourceFilterAddress3, pt3080CommsGbeAdminVlanEnable=pt3080CommsGbeAdminVlanEnable, pt3080CommsRemoteIpMulticastSourceFilterAddress3=pt3080CommsRemoteIpMulticastSourceFilterAddress3, pt3080NotifExternalInput3Alarm=pt3080NotifExternalInput3Alarm, pt3080ModeTimeSlicingLowPrio=pt3080ModeTimeSlicingLowPrio, pt3080CommsAlarmActionForceMode=pt3080CommsAlarmActionForceMode, pt3080CommsSNMPReadOnlyCommunity=pt3080CommsSNMPReadOnlyCommunity, pt3080TestEnableReconnect=pt3080TestEnableReconnect, pt3080CommsBackupServiceRIP=pt3080CommsBackupServiceRIP, pt3080OutputIfEnable=pt3080OutputIfEnable, pt3080Demodulator1ActualCodeRateLowPrio=pt3080Demodulator1ActualCodeRateLowPrio, pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit=pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprLimit, pt3080Demodulator=pt3080Demodulator, pt3080CommsAccessAllowed=pt3080CommsAccessAllowed, pt3080Demodulator2ActualTimeSlicingHighPrio=pt3080Demodulator2ActualTimeSlicingHighPrio, pt3080ASITSSecondaryAlarmActionTrap=pt3080ASITSSecondaryAlarmActionTrap, pt3080HWMonitorAlarmActionEmail=pt3080HWMonitorAlarmActionEmail, pt3080TSoIPRx1Protocol=pt3080TSoIPRx1Protocol, pt3080CommsBackupIpMulticastSourceFilterAddress4=pt3080CommsBackupIpMulticastSourceFilterAddress4, pt3080TSoIPRx1PacketsPerFrame=pt3080TSoIPRx1PacketsPerFrame, pt3080Demodulator2ActualCellID=pt3080Demodulator2ActualCellID, pt3080CommsBackupServiceSCPI=pt3080CommsBackupServiceSCPI, pt3080NotifRefenceClockAlarm=pt3080NotifRefenceClockAlarm, pt3080NotifASIAlarm=pt3080NotifASIAlarm, pt3080ASITSPrimaryAlarmState=pt3080ASITSPrimaryAlarmState, pt3080CommsBackupServiceTSoIP=pt3080CommsBackupServiceTSoIP, pt3080InputRef1PPSTrigLevel=pt3080InputRef1PPSTrigLevel, pt3080InputTSPrimaryStatus=pt3080InputTSPrimaryStatus, pt3080PrecorrectorClipperAdaptiveMode=pt3080PrecorrectorClipperAdaptiveMode, pt3080NotifTSSecondaryMIPDataMissingAlarm=pt3080NotifTSSecondaryMIPDataMissingAlarm, pt3080Demodulator1PostVirterbiErrorRateLimit=pt3080Demodulator1PostVirterbiErrorRateLimit, pt3080RFAlarmActionTrap=pt3080RFAlarmActionTrap, pt3080CommsBackupIpMulticastSourceFilterAddress1=pt3080CommsBackupIpMulticastSourceFilterAddress1, pt3080CommsStaticGateway=pt3080CommsStaticGateway, pt3080NotifCommeth3Alarm=pt3080NotifCommeth3Alarm, pt3080SFNAlarmActionForceMode=pt3080SFNAlarmActionForceMode, pt3080Demodulator2ActualCodeRateHighPrio=pt3080Demodulator2ActualCodeRateHighPrio, pt3080TSoIPRx1SequenceErrors=pt3080TSoIPRx1SequenceErrors, pt3080CommsSCPIUartInterface=pt3080CommsSCPIUartInterface, pt3080Demodulator1FWVersion=pt3080Demodulator1FWVersion, pt3080InputTSHpTSID=pt3080InputTSHpTSID, pt3080CommsStaticRoutePrefix=pt3080CommsStaticRoutePrefix, pt3080NotifGNSSAntennaFaultAlarm=pt3080NotifGNSSAntennaFaultAlarm, pt3080PrecorrectorLinearMonitorDiscartedIterations=pt3080PrecorrectorLinearMonitorDiscartedIterations, pt3080ASIGroup=pt3080ASIGroup, pt3080HWMonitorAlarmState=pt3080HWMonitorAlarmState, pt3080CommsBroadcastStormProtection=pt3080CommsBroadcastStormProtection, pt3080CommsRemoteIpMulticastSourceFilterAddress2=pt3080CommsRemoteIpMulticastSourceFilterAddress2, pt3080Precorrector=pt3080Precorrector, pt3080ModeListenBroadcast=pt3080ModeListenBroadcast, pt3080GPSAlarmDescription=pt3080GPSAlarmDescription, pt3080TSoIPAlarmEntry=pt3080TSoIPAlarmEntry, pt3080EventlogNo=pt3080EventlogNo, pt3080ReceptionRFNominalInputLevel=pt3080ReceptionRFNominalInputLevel, pt3080CommsRemoteServiceTSoIP=pt3080CommsRemoteServiceTSoIP, pt3080ASIInput1DataErrors=pt3080ASIInput1DataErrors, pt3080CommsBackupEnable=pt3080CommsBackupEnable, pt3080OutputSynchronized=pt3080OutputSynchronized, pt3080NotifRefenceClockExtern10MHzLossAlarm=pt3080NotifRefenceClockExtern10MHzLossAlarm, pt3080TSoIPRx2CurrentLatency=pt3080TSoIPRx2CurrentLatency, pt3080CommsAccessPasswordAdministrator=pt3080CommsAccessPasswordAdministrator, pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable=pt3080PrecorrectorLinearAdaptiveAmplitudeRippleEnable, pt3080OutputRfAlcSense=pt3080OutputRfAlcSense, pt3080InputTSSecondaryMaxPATDelayEnable=pt3080InputTSSecondaryMaxPATDelayEnable, pt3080InputTSLpNWID=pt3080InputTSLpNWID, pt3080PrecorrectorNonlinearMonitorPapr=pt3080PrecorrectorNonlinearMonitorPapr, pt3080NotifRFOverloadProtectionAlarm=pt3080NotifRFOverloadProtectionAlarm, pt3080ASIInput1SyncTSSize=pt3080ASIInput1SyncTSSize, pt3080InputTSSecondaryMaxStuffingrateEnable=pt3080InputTSSecondaryMaxStuffingrateEnable, pt3080CommsBackupServiceSNMP=pt3080CommsBackupServiceSNMP, pt3080PrecorrectorLinearMonitorSenseValid=pt3080PrecorrectorLinearMonitorSenseValid, pt3080NotifGNSSAlarm=pt3080NotifGNSSAlarm, pt3080InternalAlarmDescription=pt3080InternalAlarmDescription, pt3080NotifTSSecondaryTSIDWrongAlarm=pt3080NotifTSSecondaryTSIDWrongAlarm, pt3080SystemScheduledActionSWUpgradeUsername=pt3080SystemScheduledActionSWUpgradeUsername, pt3080GpsVisibleSatellites=pt3080GpsVisibleSatellites, pt3080ASITSSecondaryAlarmActionForceMode=pt3080ASITSSecondaryAlarmActionForceMode, pt3080Monitor=pt3080Monitor, pt3080TSoIPRx2CorrectedIPFrames=pt3080TSoIPRx2CorrectedIPFrames, pt3080CommsBackupIpMulticastSourceFilterAddress3=pt3080CommsBackupIpMulticastSourceFilterAddress3, pt3080PrecorrectorLinCleanrun=pt3080PrecorrectorLinCleanrun, pt3080SystemBackplaneid=pt3080SystemBackplaneid, pt3080PrecorrectorClipperAdaptiveShaping=pt3080PrecorrectorClipperAdaptiveShaping, pt3080InternalAlarmActionRelay2=pt3080InternalAlarmActionRelay2, pt3080GroupAlarmEntry=pt3080GroupAlarmEntry, pt3080CommsLocalIpMulticastSourceFilterMode=pt3080CommsLocalIpMulticastSourceFilterMode, pt3080RFAlarmDescription=pt3080RFAlarmDescription, pt3080TSoIPAlarmDescription=pt3080TSoIPAlarmDescription, pt3080InputTSPrimaryExpectedTSIDEnable=pt3080InputTSPrimaryExpectedTSIDEnable, pt3080CommsStaticDNSDomain=pt3080CommsStaticDNSDomain, pt3080PrecorrectorLinearMonitorGroupDelayValid=pt3080PrecorrectorLinearMonitorGroupDelayValid, pt3080ExternalAlarmDescription=pt3080ExternalAlarmDescription, pt3080RFAlarmTable=pt3080RFAlarmTable, pt3080InputTSSecondaryStsJitterReset=pt3080InputTSSecondaryStsJitterReset, pt3080PrecorrectorLinearMonitorIterations=pt3080PrecorrectorLinearMonitorIterations, pt3080InputTSPrimaryMaxStuffingrate=pt3080InputTSPrimaryMaxStuffingrate, pt3080EventlogText=pt3080EventlogText, pt3080NotifTSoIPAlarm=pt3080NotifTSoIPAlarm, pt3080NotifGroupSFNAlarm=pt3080NotifGroupSFNAlarm, pt3080CommsStaticRoutePhysicalInterface=pt3080CommsStaticRoutePhysicalInterface, pt3080CommsPortServiceSCPI=pt3080CommsPortServiceSCPI, pt3080PrecorrectorLinearLoadFactory=pt3080PrecorrectorLinearLoadFactory, pt3080CommsPortServiceTSoIP=pt3080CommsPortServiceTSoIP, pt3080CommsAlarmActionTrap=pt3080CommsAlarmActionTrap, pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm=pt3080NotifSFNTSPrimaryMaxDelayOffsetExceededAlarm, pt3080InputTSHpPacketsBuffered=pt3080InputTSHpPacketsBuffered, pt3080CommsLocalIpMulticastSourceFilterAddress6=pt3080CommsLocalIpMulticastSourceFilterAddress6, pt3080Demodulator1PreVirterbiErrorRateLimit=pt3080Demodulator1PreVirterbiErrorRateLimit, pt3080PrecorrectorNonlinearMonitorIterations=pt3080PrecorrectorNonlinearMonitorIterations, pt3080CommsPortIpMulticastAddr=pt3080CommsPortIpMulticastAddr, pt3080ModeNetworkDelayMaxLP=pt3080ModeNetworkDelayMaxLP, pt3080MonitorGroup=pt3080MonitorGroup, pt3080ReceptionRFSquelchEnable=pt3080ReceptionRFSquelchEnable, pt3080SystemScheduledActionTable=pt3080SystemScheduledActionTable, pt3080ASITSPrimaryAlarmActionRelay2=pt3080ASITSPrimaryAlarmActionRelay2, pt3080CommsLocalStaticNetmask=pt3080CommsLocalStaticNetmask, pt3080ASIInput2ClearErrorCounters=pt3080ASIInput2ClearErrorCounters, pt3080InputTSPrimaryStsJitterReset=pt3080InputTSPrimaryStsJitterReset, pt3080Mode=pt3080Mode, pt3080ReceptionGainLimitEnable=pt3080ReceptionGainLimitEnable, pt3080SystemRebootDefaultConfig=pt3080SystemRebootDefaultConfig, pt3080TSoIPRx2Multicast=pt3080TSoIPRx2Multicast, pt3080ASITSSecondaryAlarmActionEmail=pt3080ASITSSecondaryAlarmActionEmail, pt3080ExternalAlarmActionTrap=pt3080ExternalAlarmActionTrap, pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm=pt3080NotifSFNTSPrimarySeamlessDelayTooSmallAlarm, pt3080Demodulator2MerLimit=pt3080Demodulator2MerLimit, pt3080SystemInstrumentFW1Rev=pt3080SystemInstrumentFW1Rev, pt3080CommsGbeAdminStaticNetmask=pt3080CommsGbeAdminStaticNetmask, pt3080NotifGroupGNSSAlarm=pt3080NotifGroupGNSSAlarm, pt3080InputTSSecondaryMaxMissingmip=pt3080InputTSSecondaryMaxMissingmip, pt3080Demodulator2Available=pt3080Demodulator2Available, pt3080MonitorTSoIPDestPort=pt3080MonitorTSoIPDestPort, pt3080PrecorrectorLinearSenseEnable=pt3080PrecorrectorLinearSenseEnable, pt3080CommsBackupIpMulticastSourceFilterMode=pt3080CommsBackupIpMulticastSourceFilterMode, pt3080TSoIPRx2TSPacketSize=pt3080TSoIPRx2TSPacketSize, pt3080CommsBackupServiceWeb=pt3080CommsBackupServiceWeb, pt3080TSoIPRx1MinumimLatency=pt3080TSoIPRx1MinumimLatency, pt3080MonitorTSoIPDestIPAddress=pt3080MonitorTSoIPDestIPAddress, pt3080CommsSCPIServerBaudrate=pt3080CommsSCPIServerBaudrate, pt3080ReferenceAlarmEntry=pt3080ReferenceAlarmEntry, pt3080GPSAlarmTable=pt3080GPSAlarmTable, pt3080CommsGbeAdminServiceSCPI=pt3080CommsGbeAdminServiceSCPI, pt3080SystemImage0Version=pt3080SystemImage0Version, pt3080OutputRfAlcSetpointPort2=pt3080OutputRfAlcSetpointPort2, pt3080NotifCommeth1Alarm=pt3080NotifCommeth1Alarm, pt3080InternalAlarmActionForceMode=pt3080InternalAlarmActionForceMode, pt3080CommsPortIpMulticastSourceFilterAddress5=pt3080CommsPortIpMulticastSourceFilterAddress5, pt3080TSoIPRx2CurrentIPAddress=pt3080TSoIPRx2CurrentIPAddress, pt3080SystemInstrumentFW3Rev=pt3080SystemInstrumentFW3Rev, pt3080RFAlarmActionEmail=pt3080RFAlarmActionEmail, pt3080CommsRemotePhysicalInterface=pt3080CommsRemotePhysicalInterface, pt3080TSoIPRx1LostIPFrames=pt3080TSoIPRx1LostIPFrames, pt3080CommsStaticRouteNO=pt3080CommsStaticRouteNO, pt3080ReceptionIFIFtoRFHoldoverDelay=pt3080ReceptionIFIFtoRFHoldoverDelay, pt3080ReceptionAGCMode=pt3080ReceptionAGCMode, pt3080PrecorrectorPaprShaping=pt3080PrecorrectorPaprShaping, pt3080InputTSLpTSID=pt3080InputTSLpTSID, pt3080SystemInstrumentKernelRev=pt3080SystemInstrumentKernelRev, pt3080TSoIPRx1PacketErrorRatioLimit=pt3080TSoIPRx1PacketErrorRatioLimit, pt3080DemodulatorAlarmState=pt3080DemodulatorAlarmState, pt3080MonitorSource=pt3080MonitorSource, pt3080CommsAccessAllowedTimeout=pt3080CommsAccessAllowedTimeout, pt3080CommsLocalServiceRIP=pt3080CommsLocalServiceRIP, pt3080InputASITSPrimarySource=pt3080InputASITSPrimarySource, pt3080TSoIPRx2QueueSize=pt3080TSoIPRx2QueueSize, pt3080CommsAlarmActionAlarmLED=pt3080CommsAlarmActionAlarmLED, pt3080PrecorrectorClipperEnable=pt3080PrecorrectorClipperEnable, pt3080PrecorrectorClipperMonitorPapr=pt3080PrecorrectorClipperMonitorPapr, pt3080GPSAlarmState=pt3080GPSAlarmState, pt3080PrecorrectorLinearMonitorAmplitudeRipple=pt3080PrecorrectorLinearMonitorAmplitudeRipple, pt3080SFNAlarmID=pt3080SFNAlarmID, pt3080PrecorrectorClipperMonitorMer=pt3080PrecorrectorClipperMonitorMer, pt3080SystemScheduledActionMinute=pt3080SystemScheduledActionMinute, pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm=pt3080NotifSFNTSPrimaryMIPConfigErrorAlarm, pt3080ASIInput1SyncStatus=pt3080ASIInput1SyncStatus, pt3080ASIAlarmActionEventlog=pt3080ASIAlarmActionEventlog, pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel=pt3080PrecorrectorLinearAdaptiveGroupDelayTargetLevel, pt3080NotifModulatorAlarm=pt3080NotifModulatorAlarm, pt3080InputTSSecondaryExpectedTSIDEnable=pt3080InputTSSecondaryExpectedTSIDEnable, pt3080NotifTSPrimaryDelayMarginAlarm=pt3080NotifTSPrimaryDelayMarginAlarm, pt3080CommsAlarmActionRelay2=pt3080CommsAlarmActionRelay2, pt3080SFNAlarmActionAlarmLED=pt3080SFNAlarmActionAlarmLED, pt3080OutputRfCableFrequencyLevelOffset2=pt3080OutputRfCableFrequencyLevelOffset2, pt3080InputTSSecondaryMinDelaymargin=pt3080InputTSSecondaryMinDelaymargin, pt3080TSoIPRx1FecRow=pt3080TSoIPRx1FecRow, pt3080DemodulatorAlarmActionRelay2=pt3080DemodulatorAlarmActionRelay2, pt3080ReceptionTunerHWType=pt3080ReceptionTunerHWType, pt3080GpsVisibleSatellitesSnr=pt3080GpsVisibleSatellitesSnr, pt3080GroupAlarmActionTrap=pt3080GroupAlarmActionTrap, pt3080CommsGbeAdminServiceSNMP=pt3080CommsGbeAdminServiceSNMP, pt3080PrecorrectorClipperMonitorStatus=pt3080PrecorrectorClipperMonitorStatus, pt3080ReceptionRFFrequencyOffset=pt3080ReceptionRFFrequencyOffset, pt3080Demodulator1UncorrectedPackets=pt3080Demodulator1UncorrectedPackets, pt3080SystemBackplaneCalibrationDate=pt3080SystemBackplaneCalibrationDate, pt3080ReferenceAlarmID=pt3080ReferenceAlarmID, pt3080CommsPortIpMulticastSourceFilterAddress1=pt3080CommsPortIpMulticastSourceFilterAddress1, pt3080GroupAlarmActionEmail=pt3080GroupAlarmActionEmail, pt3080NotifExternalInput5Alarm=pt3080NotifExternalInput5Alarm, pt3080InputTSSecondaryMinDelaymarginEnable=pt3080InputTSSecondaryMinDelaymarginEnable, pt3080CommsBackupVlanEnable=pt3080CommsBackupVlanEnable, pt3080ExternalAlarmID=pt3080ExternalAlarmID, pt3080SystemScheduledActionID=pt3080SystemScheduledActionID, pt3080PrecorrectorNlinCleanrun=pt3080PrecorrectorNlinCleanrun, pt3080SystemInstrumentBootLoaderRev=pt3080SystemInstrumentBootLoaderRev, pt3080CommsGbeAdminServiceRIP=pt3080CommsGbeAdminServiceRIP, pt3080MonitorTSoIPPacketsPerFrame=pt3080MonitorTSoIPPacketsPerFrame, pt3080NotifTSPrimarySTSJitterExceededAlarm=pt3080NotifTSPrimarySTSJitterExceededAlarm, pt3080OutputRfCableMode=pt3080OutputRfCableMode, pt3080CommsSNMPReadWriteCommunity=pt3080CommsSNMPReadWriteCommunity, pt3080Preset=pt3080Preset, pt3080InputASIHoldoverTimeout=pt3080InputASIHoldoverTimeout, pt3080InternalAlarmActionTrap=pt3080InternalAlarmActionTrap)
mibBuilder.exportSymbols("PT3080-MIB", pt3080CommsBackupIpMulticastSourceFilterAddress2=pt3080CommsBackupIpMulticastSourceFilterAddress2, pt3080CommsPortIpMulticastSourceFilterMode=pt3080CommsPortIpMulticastSourceFilterMode, pt3080NotifState=pt3080NotifState, pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm=pt3080NotifSFNTSSecondaryMaxDelayOffsetExceededAlarm, pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel=pt3080PrecorrectorNonlinearMonitorLowerShoulderLevel, pt3080HWMonitorAlarmActionForceMode=pt3080HWMonitorAlarmActionForceMode, pt3080SystemScheduledActionDate=pt3080SystemScheduledActionDate, pt3080CommsBackupIpMulticastSourceFilterAddress6=pt3080CommsBackupIpMulticastSourceFilterAddress6, pt3080NotifTSPrimaryPCRErrorAlarm=pt3080NotifTSPrimaryPCRErrorAlarm, pt3080CommsPortIpMulticastSourceFilterAddress3=pt3080CommsPortIpMulticastSourceFilterAddress3, pt3080CommsBackupDhcpMode=pt3080CommsBackupDhcpMode, pt3080OutputIfLevel=pt3080OutputIfLevel, pt3080SystemScheduledActionAction=pt3080SystemScheduledActionAction, pt3080GroupAlarmActionAlarmLED=pt3080GroupAlarmActionAlarmLED, pt3080InputTSLpStuffingrate=pt3080InputTSLpStuffingrate, pt3080NotifHWMonitorLeftFanAlarm=pt3080NotifHWMonitorLeftFanAlarm, pt3080ASITSSecondaryAlarmTable=pt3080ASITSSecondaryAlarmTable, pt3080SFNAlarmActionRelay1=pt3080SFNAlarmActionRelay1, pt3080ASIInput1ClearErrorCounters=pt3080ASIInput1ClearErrorCounters, pt3080MonitorTSoIPFecRow=pt3080MonitorTSoIPFecRow, pt3080TSoIPRx2ReceiverEnable=pt3080TSoIPRx2ReceiverEnable, pt3080NotifGroupModulatorAlarm=pt3080NotifGroupModulatorAlarm, pt3080ReceptionAGCHysteresis=pt3080ReceptionAGCHysteresis, pt3080CommsAlarmID=pt3080CommsAlarmID, pt3080Demodulator2UncorrectedPackets=pt3080Demodulator2UncorrectedPackets, pt3080Demodulator1ActualDVBHMode=pt3080Demodulator1ActualDVBHMode, pt3080GpsCableDelay=pt3080GpsCableDelay, pt3080DemodulatorAlarmID=pt3080DemodulatorAlarmID, pt3080GpsSatelliteSystemGPS=pt3080GpsSatelliteSystemGPS, pt3080TSoIPRx2SyncTimeout=pt3080TSoIPRx2SyncTimeout, pt3080CommsBackupCurrentIpAddr=pt3080CommsBackupCurrentIpAddr, pt3080TSoIPAlarmID=pt3080TSoIPAlarmID, pt3080CommsSNMPTrapCommunity=pt3080CommsSNMPTrapCommunity, pt3080NotifExternalInput6Alarm=pt3080NotifExternalInput6Alarm, pt3080CommsAlarmDescription=pt3080CommsAlarmDescription, pt3080TSoIPRx2Portnumber=pt3080TSoIPRx2Portnumber, pt3080ModeNetworkDelayMarginHP=pt3080ModeNetworkDelayMarginHP, pt3080ASIInput2DataRate=pt3080ASIInput2DataRate, pt3080OutputMode=pt3080OutputMode, pt3080PrecorrectorLinearLoadNeutral=pt3080PrecorrectorLinearLoadNeutral, pt3080NotifTSPrimaryBufferPoolExceededAlarm=pt3080NotifTSPrimaryBufferPoolExceededAlarm, pt3080ASIAlarmEntry=pt3080ASIAlarmEntry, pt3080InputRef10MhzImpedance=pt3080InputRef10MhzImpedance, pt3080InputTSPrimaryStsJitterMin=pt3080InputTSPrimaryStsJitterMin, pt3080PrecorrectorNonlinearMonitorLowerShoulderValid=pt3080PrecorrectorNonlinearMonitorLowerShoulderValid, pt3080PrecorrectorLinearMode=pt3080PrecorrectorLinearMode, pt3080ExternalAlarmActionRelay2=pt3080ExternalAlarmActionRelay2, pt3080ASITSPrimaryAlarmActionEmail=pt3080ASITSPrimaryAlarmActionEmail, pt3080CommsLocalVlanEnable=pt3080CommsLocalVlanEnable, pt3080NotifInternalMainboardAlarm=pt3080NotifInternalMainboardAlarm, pt3080InputTSPrimaryMaxMissingmip=pt3080InputTSPrimaryMaxMissingmip, pt3080NotifTSPrimaryTSIDWrongAlarm=pt3080NotifTSPrimaryTSIDWrongAlarm, pt3080SFNAlarmEntry=pt3080SFNAlarmEntry, pt3080Demodulator1PostVirterbiErrorRate=pt3080Demodulator1PostVirterbiErrorRate, pt3080Demodulator1FelStatus=pt3080Demodulator1FelStatus, pt3080MonitorTSoIPEnable=pt3080MonitorTSoIPEnable, pt3080TSoIPRx2PacketErrorRatio=pt3080TSoIPRx2PacketErrorRatio, pt3080PrecorrectorNonlinearSenseEnable=pt3080PrecorrectorNonlinearSenseEnable, pt3080SystemBackplaneIdCableOptions=pt3080SystemBackplaneIdCableOptions, pt3080Gps=pt3080Gps, pt3080PrecorrectorNonlinearAdaptiveAveraging=pt3080PrecorrectorNonlinearAdaptiveAveraging, pt3080ModeMaxNetworkDelayHP=pt3080ModeMaxNetworkDelayHP, pt3080Conformance=pt3080Conformance, pt3080CommsPortDhcpMode=pt3080CommsPortDhcpMode, pt3080CommsPortServiceRIP=pt3080CommsPortServiceRIP, pt3080NotifGroupTSPrimaryAlarm=pt3080NotifGroupTSPrimaryAlarm, pt3080MonitorTSoIPProtocol=pt3080MonitorTSoIPProtocol, pt3080ASIAlarmActionRelay1=pt3080ASIAlarmActionRelay1, PYSNMP_MODULE_ID=pt3080, pt3080CommsStaticRouteEntry=pt3080CommsStaticRouteEntry, pt3080TSoIPRx2LanSelect=pt3080TSoIPRx2LanSelect, pt3080ASIAlarmState=pt3080ASIAlarmState, pt3080GpsHoldoverTime=pt3080GpsHoldoverTime, pt3080ReceptionIFFrequency=pt3080ReceptionIFFrequency, pt3080InternalAlarmEntry=pt3080InternalAlarmEntry, pt3080GpsGroup=pt3080GpsGroup, pt3080NotifInternalAlarm=pt3080NotifInternalAlarm, pt3080OutputRfCableFrequencyLevelOffset0=pt3080OutputRfCableFrequencyLevelOffset0, pt3080GroupAlarmTable=pt3080GroupAlarmTable, pt3080SystemInstrumentCalibrationRev=pt3080SystemInstrumentCalibrationRev, pt3080SystemScheduledActionSWUpgradeProtocol=pt3080SystemScheduledActionSWUpgradeProtocol, pt3080MonitorTSoIPFecColumn=pt3080MonitorTSoIPFecColumn, pt3080TSoIPRx1PacketErrorRatio=pt3080TSoIPRx1PacketErrorRatio, pt3080CommsRemoteVlanEnable=pt3080CommsRemoteVlanEnable, pt3080Demodulator2FWVersion=pt3080Demodulator2FWVersion, pt3080ReceptionRFTrackingFilterEnable=pt3080ReceptionRFTrackingFilterEnable, pt3080Demodulator1ActualConstellation=pt3080Demodulator1ActualConstellation, pt3080CommsRemoteCurrentIpAddr=pt3080CommsRemoteCurrentIpAddr, pt3080NotifTSPrimarySyncErrorAlarm=pt3080NotifTSPrimarySyncErrorAlarm, pt3080NotifTSPrimaryStuffingRateExceededAlarm=pt3080NotifTSPrimaryStuffingRateExceededAlarm, pt3080Compliance=pt3080Compliance, pt3080ASIInput2LineRate=pt3080ASIInput2LineRate, pt3080ReceptionTunerHWCalibrationSWVersion=pt3080ReceptionTunerHWCalibrationSWVersion, pt3080CommsPortCurrentIpAddr=pt3080CommsPortCurrentIpAddr, pt3080CommsGbeAdminIpMulticastSourceFilterMode=pt3080CommsGbeAdminIpMulticastSourceFilterMode, pt3080CommsSNMPServicePort=pt3080CommsSNMPServicePort, pt3080TSoIPRx1TSPacketSize=pt3080TSoIPRx1TSPacketSize, pt3080CommsSNMPTrapDestinationPort3=pt3080CommsSNMPTrapDestinationPort3, pt3080Test=pt3080Test, pt3080InputTSHpNWID=pt3080InputTSHpNWID, pt3080PrecorrectorNonlinearMonitorDiscartedIterations=pt3080PrecorrectorNonlinearMonitorDiscartedIterations, pt3080SystemInstrumentSWRev=pt3080SystemInstrumentSWRev, pt3080NotifASIASI2ErrorRateEceeededAlarm=pt3080NotifASIASI2ErrorRateEceeededAlarm, pt3080SystemScheduledActionRepeaterMode=pt3080SystemScheduledActionRepeaterMode, pt3080CommsPortVlanEnable=pt3080CommsPortVlanEnable, pt3080NotifGNSSUnlockedAlarm=pt3080NotifGNSSUnlockedAlarm, pt3080ASITSSecondaryAlarmActionRelay1=pt3080ASITSSecondaryAlarmActionRelay1, pt3080CommsGbeAdminIpMulticastSourceFilterAddress2=pt3080CommsGbeAdminIpMulticastSourceFilterAddress2, pt3080InputGroup=pt3080InputGroup, pt3080PrecorrectorNonlinearAdaptive=pt3080PrecorrectorNonlinearAdaptive, pt3080HWMonitorAlarmActionRelay2=pt3080HWMonitorAlarmActionRelay2, pt3080NotifInternalReferenceClockAlarm=pt3080NotifInternalReferenceClockAlarm, pt3080ModeNetworkDelayMarginLP=pt3080ModeNetworkDelayMarginLP, pt3080HWMonitorAlarmActionTrap=pt3080HWMonitorAlarmActionTrap, pt3080ASIInput2DataErrors=pt3080ASIInput2DataErrors, pt3080NotifRFAlarm=pt3080NotifRFAlarm, pt3080Comms=pt3080Comms, pt3080OutputRfAlcSetpointPort1=pt3080OutputRfAlcSetpointPort1, pt3080InputTSPrimaryExpectedNWID=pt3080InputTSPrimaryExpectedNWID, pt3080GpsTrackedSatellites=pt3080GpsTrackedSatellites, pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel=pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetLevel, pt3080InputTSPrimaryExpectedTSID=pt3080InputTSPrimaryExpectedTSID, pt3080PrecorrectorClipperMode=pt3080PrecorrectorClipperMode, pt3080ReceptionGainLimit=pt3080ReceptionGainLimit, pt3080ModeNetworkDelayLP=pt3080ModeNetworkDelayLP, pt3080InputTSSecondaryExpectedNWIDEnable=pt3080InputTSSecondaryExpectedNWIDEnable, pt3080CommsSNMPTrapDestinationPort=pt3080CommsSNMPTrapDestinationPort, pt3080NotifTSSecondaryDelayMarginAlarm=pt3080NotifTSSecondaryDelayMarginAlarm, pt3080TestscarrierFrequencyOffset=pt3080TestscarrierFrequencyOffset, pt3080GPSAlarmActionAlarmLED=pt3080GPSAlarmActionAlarmLED, pt3080EventlogID=pt3080EventlogID, pt3080PresetNo=pt3080PresetNo, pt3080DemodulatorGroup=pt3080DemodulatorGroup, pt3080ModeTimeSlicingHighPrio=pt3080ModeTimeSlicingHighPrio, pt3080CommsStaticRouteTarget=pt3080CommsStaticRouteTarget, pt3080Demodulator2ActualCodeRateLowPrio=pt3080Demodulator2ActualCodeRateLowPrio, pt3080CommsStaticRouteTable=pt3080CommsStaticRouteTable, pt3080Demodulator2ActualDeepInterleaver=pt3080Demodulator2ActualDeepInterleaver, pt3080PrecorrectorNonlinearMonitorUpperShoulderValid=pt3080PrecorrectorNonlinearMonitorUpperShoulderValid, pt3080ModeMipControl=pt3080ModeMipControl, pt3080SystemImage1version=pt3080SystemImage1version, pt3080InputTSSecondaryExpectedNWID=pt3080InputTSSecondaryExpectedNWID, pt3080CommsPortIpMulticastSourceFilterAddress6=pt3080CommsPortIpMulticastSourceFilterAddress6, pt3080CommsIGMPv2UnsolicitedReportInterval=pt3080CommsIGMPv2UnsolicitedReportInterval, pt3080CommsGbeAdminCurrentNetmask=pt3080CommsGbeAdminCurrentNetmask, pt3080NotifGroupExternalAlarm=pt3080NotifGroupExternalAlarm, pt3080ASIInput2DataErrorRate=pt3080ASIInput2DataErrorRate, pt3080NotifGroupASIAlarm=pt3080NotifGroupASIAlarm, pt3080TSoIPRx2SequenceErrors=pt3080TSoIPRx2SequenceErrors, pt3080CommsIGMPQueryRobustnessCount=pt3080CommsIGMPQueryRobustnessCount, pt3080SystemGroup=pt3080SystemGroup, pt3080ReceptionGainCurrent=pt3080ReceptionGainCurrent, pt3080InputTSSecondaryMaxStuffingrate=pt3080InputTSSecondaryMaxStuffingrate, pt3080TestEnable=pt3080TestEnable, pt3080ASITSPrimaryAlarmEntry=pt3080ASITSPrimaryAlarmEntry, pt3080ASIAlarmActionRelay2=pt3080ASIAlarmActionRelay2, pt3080DemodulatorAlarmEntry=pt3080DemodulatorAlarmEntry, pt3080NotifHWMonitorBackplaneTemperatureAlarm=pt3080NotifHWMonitorBackplaneTemperatureAlarm, pt3080System=pt3080System, pt3080SystemOperationOnAirTime=pt3080SystemOperationOnAirTime, pt3080MonitorTSoIPTTL=pt3080MonitorTSoIPTTL, pt3080ModeMipControlOutputFreqOffset=pt3080ModeMipControlOutputFreqOffset, pt3080TestGroup=pt3080TestGroup, pt3080ModeSfnDelayOffset=pt3080ModeSfnDelayOffset, pt3080TSoIPRx1CurrentLatency=pt3080TSoIPRx1CurrentLatency, pt3080TSoIPRx1IpBitrate=pt3080TSoIPRx1IpBitrate, pt3080SFNAlarmTable=pt3080SFNAlarmTable, pt3080PresetEntry=pt3080PresetEntry, pt3080CommsRemoteIpMulticastSourceFilterAddress4=pt3080CommsRemoteIpMulticastSourceFilterAddress4, pt3080SystemScheduledActionEntry=pt3080SystemScheduledActionEntry, pt3080OutputRfAlcStatusInformation=pt3080OutputRfAlcStatusInformation, pt3080TSoIPRx2FecRow=pt3080TSoIPRx2FecRow, pt3080NotifGroupTSoIPAlarm=pt3080NotifGroupTSoIPAlarm, pt3080NotifSFNUntimedModeAlarm=pt3080NotifSFNUntimedModeAlarm, pt3080GpsSatelliteSystemGLONASS=pt3080GpsSatelliteSystemGLONASS, pt3080SystemScheduledActionRebootImage=pt3080SystemScheduledActionRebootImage, pt3080NotifMessage=pt3080NotifMessage, pt3080NotifExternalInput1Alarm=pt3080NotifExternalInput1Alarm, pt3080InputRef10MhzHoldoverForever=pt3080InputRef10MhzHoldoverForever, pt3080TSoIPGroup=pt3080TSoIPGroup, pt3080ModeEnableDVBH=pt3080ModeEnableDVBH, pt3080Demodulator1Actualifft=pt3080Demodulator1Actualifft, pt3080EventlogTimestamp=pt3080EventlogTimestamp, pt3080CommsPortServiceWeb=pt3080CommsPortServiceWeb, pt3080CommsLocalServiceSNMP=pt3080CommsLocalServiceSNMP, pt3080ReferenceAlarmActionTrap=pt3080ReferenceAlarmActionTrap, pt3080NotifCommAlarm=pt3080NotifCommAlarm, pt3080PrecorrectorLinearAdaptiveGroupDelayEnable=pt3080PrecorrectorLinearAdaptiveGroupDelayEnable, pt3080PrecorrectorPaprClipping=pt3080PrecorrectorPaprClipping, pt3080ModeNetworkDelayReset=pt3080ModeNetworkDelayReset, pt3080Alarm=pt3080Alarm, pt3080InputTSHp=pt3080InputTSHp, pt3080Demodulator1PreVirterbiErrorRate=pt3080Demodulator1PreVirterbiErrorRate, pt3080TSoIPAlarmActionEmail=pt3080TSoIPAlarmActionEmail, pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm=pt3080NotifTSoIPRx1PackageErrorRationExceededAlarm, pt3080OutputRfCableFrequencyLevelOffset3=pt3080OutputRfCableFrequencyLevelOffset3, pt3080TSoIPRx1Portnumber=pt3080TSoIPRx1Portnumber, pt3080ReceptionIFRFtoIFHoldoverDelay=pt3080ReceptionIFRFtoIFHoldoverDelay, pt3080OutputIfPolarity=pt3080OutputIfPolarity, pt3080NotifTSSecondarySyncErrorAlarm=pt3080NotifTSSecondarySyncErrorAlarm, pt3080OutputRfDetectedLowerLevelcontrol=pt3080OutputRfDetectedLowerLevelcontrol, pt3080NotifTSSecondaryStuffingRateExceededAlarm=pt3080NotifTSSecondaryStuffingRateExceededAlarm, pt3080Input=pt3080Input, pt3080CommsGbeAdminIpMulticastAddr=pt3080CommsGbeAdminIpMulticastAddr, pt3080CommsEmailServerAddress=pt3080CommsEmailServerAddress, pt3080InputASIAutoRoutingDelayLp2Hp=pt3080InputASIAutoRoutingDelayLp2Hp, pt3080ASIInput1DataErrorLimit=pt3080ASIInput1DataErrorLimit, pt3080CommsRemoteIpMulticastAddr=pt3080CommsRemoteIpMulticastAddr, pt3080Demodulator1ActualDeepInterleaver=pt3080Demodulator1ActualDeepInterleaver, pt3080ExternalAlarmActionEventlog=pt3080ExternalAlarmActionEventlog, pt3080InputTSSecondaryStsJitterMin=pt3080InputTSSecondaryStsJitterMin, pt3080InputTSHpBitrate=pt3080InputTSHpBitrate, pt3080ReceptionIFInputLevel=pt3080ReceptionIFInputLevel, pt3080InputTSPrimaryStsJitterMax=pt3080InputTSPrimaryStsJitterMax, pt3080CommsRemoteCurrentNetmask=pt3080CommsRemoteCurrentNetmask, pt3080Demodulator2Mer=pt3080Demodulator2Mer, pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel=pt3080PrecorrectorLinearAdaptiveAmplitudeRippleTargetLevel, pt3080InputTSPrimaryMaxStsJitter=pt3080InputTSPrimaryMaxStsJitter, pt3080EventlogEntry=pt3080EventlogEntry, pt3080PrecorrectorClipperMonitorMerValid=pt3080PrecorrectorClipperMonitorMerValid, pt3080SystemTimezone=pt3080SystemTimezone, pt3080GroupAlarmActionRelay1=pt3080GroupAlarmActionRelay1, pt3080SystemDateTimeSyncActual=pt3080SystemDateTimeSyncActual, pt3080NotifTSSecondaryBufferPoolExceededAlarm=pt3080NotifTSSecondaryBufferPoolExceededAlarm, pt3080CommsAlarmActionEventlog=pt3080CommsAlarmActionEventlog, pt3080CommsCurrentDNS2ServerAddress=pt3080CommsCurrentDNS2ServerAddress, pt3080AlarmGroup=pt3080AlarmGroup, pt3080CommsLocalVlanId=pt3080CommsLocalVlanId, pt3080SystemModulationStandard=pt3080SystemModulationStandard, pt3080TSoIPAlarmActionRelay2=pt3080TSoIPAlarmActionRelay2, pt3080NotifTSPrimaryPATLossAlarm=pt3080NotifTSPrimaryPATLossAlarm, pt3080CommsGbeAdminVlanId=pt3080CommsGbeAdminVlanId, pt3080SystemScheduledActionSWUpgradeImageServer=pt3080SystemScheduledActionSWUpgradeImageServer, pt3080InputRefDevType=pt3080InputRefDevType, pt3080InputTSPrimaryExpectedNWIDEnable=pt3080InputTSPrimaryExpectedNWIDEnable, pt3080ASITSPrimaryAlarmActionForceMode=pt3080ASITSPrimaryAlarmActionForceMode, pt3080ReceptionTunerHWCalibrationDate=pt3080ReceptionTunerHWCalibrationDate, pt3080DemodulatorAlarmActionEventlog=pt3080DemodulatorAlarmActionEventlog, pt3080SystemScheduledActionMute=pt3080SystemScheduledActionMute, pt3080MonitorTSoIPTSSize=pt3080MonitorTSoIPTSSize, pt3080DemodulatorAlarmActionAlarmLED=pt3080DemodulatorAlarmActionAlarmLED, pt3080SystemInstrumentFW2RevBL=pt3080SystemInstrumentFW2RevBL, pt3080SystemBackplaneIdMAnuf=pt3080SystemBackplaneIdMAnuf, pt3080EventlogClear=pt3080EventlogClear, pt3080CommsCurrentHostname=pt3080CommsCurrentHostname, pt3080CommsSNMPTrapDestination5=pt3080CommsSNMPTrapDestination5, pt3080OutputRfDetectedHigherLevelLimit=pt3080OutputRfDetectedHigherLevelLimit, pt3080PrecorrectorLinearMonitorSenseLevel=pt3080PrecorrectorLinearMonitorSenseLevel, pt3080CommsStaticRoutePrefixSize=pt3080CommsStaticRoutePrefixSize, pt3080ModeConstellation=pt3080ModeConstellation, pt3080SystemServiceLED=pt3080SystemServiceLED, pt3080ReceptionIFPolarity=pt3080ReceptionIFPolarity, pt3080CommsAccessPasswordOperator=pt3080CommsAccessPasswordOperator, pt3080SystemCurrentImage=pt3080SystemCurrentImage)
mibBuilder.exportSymbols("PT3080-MIB", pt3080ASITSPrimaryAlarmTable=pt3080ASITSPrimaryAlarmTable, pt3080SystemBackplaneCalibrationSw=pt3080SystemBackplaneCalibrationSw, pt3080NotifGroupRFAlarm=pt3080NotifGroupRFAlarm, pt3080SystemType=pt3080SystemType, pt3080RFAlarmState=pt3080RFAlarmState, pt3080ModeEnableCellID=pt3080ModeEnableCellID, pt3080GpsLongtitude=pt3080GpsLongtitude, pt3080Demodulator1ActualCodeRateHighPrio=pt3080Demodulator1ActualCodeRateHighPrio, pt3080Demodulator2Actualifft=pt3080Demodulator2Actualifft, pt3080PrecorrectorNonlinearMonitorMer=pt3080PrecorrectorNonlinearMonitorMer, pt3080Notifs=pt3080Notifs, pt3080CommsGbeAdminIpMulticastSourceFilterAddress6=pt3080CommsGbeAdminIpMulticastSourceFilterAddress6, pt3080CommsPortCurrentNetmask=pt3080CommsPortCurrentNetmask, pt3080GpsAltitude=pt3080GpsAltitude, pt3080NotifTSSecondaryNWIDWrongAlarm=pt3080NotifTSSecondaryNWIDWrongAlarm, pt3080NotifRFLevelOutOfRangeAlarm=pt3080NotifRFLevelOutOfRangeAlarm, pt3080TSoIPRx2OverrunIPFrames=pt3080TSoIPRx2OverrunIPFrames, pt3080ASIInput1LineErrors=pt3080ASIInput1LineErrors, pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis=pt3080PrecorrectorNonlinearAdaptiveMerTargetHysteresis, pt3080ModeCellID=pt3080ModeCellID, pt3080NotifLocalTime=pt3080NotifLocalTime, pt3080TSoIPRx2PacketsPerFrame=pt3080TSoIPRx2PacketsPerFrame, pt3080MonitorTSoIPDSCP=pt3080MonitorTSoIPDSCP, pt3080PrecorrectorLinearAdaptiveMode=pt3080PrecorrectorLinearAdaptiveMode, pt3080InputTSPrimaryMaxMissingmipEnable=pt3080InputTSPrimaryMaxMissingmipEnable, pt3080Demodulator1ActualGuardInterval=pt3080Demodulator1ActualGuardInterval, pt3080ModeNetworkDelayMinHP=pt3080ModeNetworkDelayMinHP, pt3080SystemScheduledActionSWUpgradeImagePath=pt3080SystemScheduledActionSWUpgradeImagePath, pt3080CommsPortIpMulticastSourceFilterAddress2=pt3080CommsPortIpMulticastSourceFilterAddress2, pt3080NotifExternalAlarm=pt3080NotifExternalAlarm, pt3080NotifSFNResyncAlarm=pt3080NotifSFNResyncAlarm, pt3080TSoIPRx2LostIPFrames=pt3080TSoIPRx2LostIPFrames, pt3080CommsAlarmActionEmail=pt3080CommsAlarmActionEmail, pt3080ASITSPrimaryAlarmActionAlarmLED=pt3080ASITSPrimaryAlarmActionAlarmLED, pt3080CommsPortStaticNetmask=pt3080CommsPortStaticNetmask, pt3080ReceptionBandwidth=pt3080ReceptionBandwidth, pt3080NotifRefenceClockExternal1PPSHoldOverAlarm=pt3080NotifRefenceClockExternal1PPSHoldOverAlarm, pt3080Groups=pt3080Groups, pt3080InputTSPrimaryMaxStuffingrateEnable=pt3080InputTSPrimaryMaxStuffingrateEnable, pt3080GPSAlarmActionRelay1=pt3080GPSAlarmActionRelay1, pt3080ModeDefaultMIPOutputCellID=pt3080ModeDefaultMIPOutputCellID, pt3080NotifExternalInput2Alarm=pt3080NotifExternalInput2Alarm, pt3080OutputRfDetectedActualLevel=pt3080OutputRfDetectedActualLevel, pt3080Demodulator2ActualMpeFecHighPrio=pt3080Demodulator2ActualMpeFecHighPrio, pt3080InternalAlarmState=pt3080InternalAlarmState, pt3080SFNAlarmActionRelay2=pt3080SFNAlarmActionRelay2, pt3080ReceptionRFInputLevelThreshold=pt3080ReceptionRFInputLevelThreshold, pt3080MonitorTSoIPEnableFec=pt3080MonitorTSoIPEnableFec, pt3080CommsGbeAdminIpMulticastSourceFilterAddress5=pt3080CommsGbeAdminIpMulticastSourceFilterAddress5, pt3080PrecorrectorClipperAdaptive=pt3080PrecorrectorClipperAdaptive, pt3080CommsPortEnable=pt3080CommsPortEnable, pt3080PrecorrectorLinearAttenuation=pt3080PrecorrectorLinearAttenuation, pt3080ReferenceAlarmActionEventlog=pt3080ReferenceAlarmActionEventlog, pt3080EventlogGroup=pt3080EventlogGroup, pt3080Demodulator2FelStatus=pt3080Demodulator2FelStatus, pt3080PrecorrectorLinearMonitorSenseBadCount=pt3080PrecorrectorLinearMonitorSenseBadCount, pt3080NotifInternalFirmware1Alarm=pt3080NotifInternalFirmware1Alarm, pt3080OutputRfAlcControl=pt3080OutputRfAlcControl, pt3080CommsBackupCurrentNetmask=pt3080CommsBackupCurrentNetmask, pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel=pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetLevel, pt3080CommsAlarmState=pt3080CommsAlarmState, pt3080Demodulator1ActualMpeFecHighPrio=pt3080Demodulator1ActualMpeFecHighPrio, pt3080NotifTSSecondaryAlarm=pt3080NotifTSSecondaryAlarm, pt3080InputTSHpPacketSize=pt3080InputTSHpPacketSize, pt3080PrecorrectorNonlinearAdaptiveMerTarget=pt3080PrecorrectorNonlinearAdaptiveMerTarget, pt3080ModeDeepInterleaver=pt3080ModeDeepInterleaver, pt3080Demodulator1ActualTimeSlicingLowPrio=pt3080Demodulator1ActualTimeSlicingLowPrio, pt3080ASI=pt3080ASI, pt3080ASIInput1SyncSignal=pt3080ASIInput1SyncSignal, pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid=pt3080PrecorrectorClipperMonitorShoulderLevelLowerValid, pt3080ReceptionRFPolarity=pt3080ReceptionRFPolarity, pt3080CommsGbeAdminDhcpMode=pt3080CommsGbeAdminDhcpMode, pt3080Compliances=pt3080Compliances, pt3080ASITSSecondaryAlarmID=pt3080ASITSSecondaryAlarmID, pt3080DemodulatorFollowMode=pt3080DemodulatorFollowMode, pt3080OutputMute=pt3080OutputMute, pt3080CommsCurrentGateway=pt3080CommsCurrentGateway, pt3080Demodulator1ActualTimeSlicingHighPrio=pt3080Demodulator1ActualTimeSlicingHighPrio, pt3080CommsSeparatedSwitchPorts=pt3080CommsSeparatedSwitchPorts, pt3080OutputRfCableFrequencyLevelOffset4=pt3080OutputRfCableFrequencyLevelOffset4, pt3080ReferenceAlarmActionRelay1=pt3080ReferenceAlarmActionRelay1, pt3080CommsGbeAdminServiceWeb=pt3080CommsGbeAdminServiceWeb, pt3080Eventlog=pt3080Eventlog, pt3080CommsAlarmActionRelay1=pt3080CommsAlarmActionRelay1, pt3080PrecorrectorSecondsSinceLastUpdate=pt3080PrecorrectorSecondsSinceLastUpdate, pt3080ReceptionRFFrequency=pt3080ReceptionRFFrequency, pt3080HWMonitorAlarmActionAlarmLED=pt3080HWMonitorAlarmActionAlarmLED, pt3080CommsLocalIpMulticastSourceFilterAddress1=pt3080CommsLocalIpMulticastSourceFilterAddress1, pt3080GpsHoldoverForever=pt3080GpsHoldoverForever, pt3080ASIAlarmActionTrap=pt3080ASIAlarmActionTrap, pt3080ASIAlarmActionForceMode=pt3080ASIAlarmActionForceMode, pt3080InternalAlarmActionEventlog=pt3080InternalAlarmActionEventlog, pt3080CommsSNMPTrapDestination=pt3080CommsSNMPTrapDestination, pt3080CommsAccessPasswordObserver=pt3080CommsAccessPasswordObserver, pt3080InputRef1PPSHoldoverForever=pt3080InputRef1PPSHoldoverForever, pt3080NotifGroupCommAlarm=pt3080NotifGroupCommAlarm, pt3080ReceptionTunerHWID=pt3080ReceptionTunerHWID, pt3080NotifRefenceClockExternal10MHzHoldOverAlarm=pt3080NotifRefenceClockExternal10MHzHoldOverAlarm, pt3080CommsBackupStaticIpAddr=pt3080CommsBackupStaticIpAddr, pt3080ReferenceAlarmActionEmail=pt3080ReferenceAlarmActionEmail, pt3080ReceptionGroup=pt3080ReceptionGroup, pt3080ModeMipControlOutputCellId=pt3080ModeMipControlOutputCellId, pt3080PrecorrectorClipperMonitorPaprValid=pt3080PrecorrectorClipperMonitorPaprValid, pt3080SystemInstrumentFW4Rev=pt3080SystemInstrumentFW4Rev, pt3080HWMonitorAlarmActionRelay1=pt3080HWMonitorAlarmActionRelay1, pt3080ModeMIPMaxSFNDelay=pt3080ModeMIPMaxSFNDelay, pt3080CommsSNMPTrapDestinationPort2=pt3080CommsSNMPTrapDestinationPort2, pt3080RFAlarmActionEventlog=pt3080RFAlarmActionEventlog, pt3080PrecorrectorGroup=pt3080PrecorrectorGroup, pt3080InputTSSecondaryExpectedTSID=pt3080InputTSSecondaryExpectedTSID, pt3080Demodulator2ActualDVBHMode=pt3080Demodulator2ActualDVBHMode, pt3080CommsSNMPTrapDestination3=pt3080CommsSNMPTrapDestination3, pt3080OutputRfCableFrequencyLevelOffset5=pt3080OutputRfCableFrequencyLevelOffset5, pt3080GpsVersion=pt3080GpsVersion, pt3080NotifTSSecondaryPCRErrorAlarm=pt3080NotifTSSecondaryPCRErrorAlarm, pt3080CommsRemoteStaticNetmask=pt3080CommsRemoteStaticNetmask, pt3080InputRef1PPSTrigSlope=pt3080InputRef1PPSTrigSlope, pt3080TSoIPAlarmState=pt3080TSoIPAlarmState, pt3080ASITSSecondaryAlarmActionAlarmLED=pt3080ASITSSecondaryAlarmActionAlarmLED, pt3080HWMonitorAlarmID=pt3080HWMonitorAlarmID, pt3080HWMonitorAlarmActionEventlog=pt3080HWMonitorAlarmActionEventlog, pt3080TSoIPAlarmActionTrap=pt3080TSoIPAlarmActionTrap, pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis=pt3080PrecorrectorLinearAdaptiveGroupDelayTargetHysteresis, pt3080OutputActualLevel=pt3080OutputActualLevel, pt3080MonitorTSoIPGenerateError=pt3080MonitorTSoIPGenerateError, pt3080ASIInput1LineRate=pt3080ASIInput1LineRate, pt3080InputRef1PPSHoldoverDelay=pt3080InputRef1PPSHoldoverDelay, pt3080SystemDateTime=pt3080SystemDateTime, pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable=pt3080PrecorrectorNonlinearAdaptiveLowerShoulderEnable, pt3080ModeNetworkDelayHP=pt3080ModeNetworkDelayHP, pt3080CommsRemoteDhcpMode=pt3080CommsRemoteDhcpMode, pt3080DemodulatorAlarmActionForceMode=pt3080DemodulatorAlarmActionForceMode, pt3080NotificationsGroups=pt3080NotificationsGroups, pt3080CommsSNMPTrapDestinationPort5=pt3080CommsSNMPTrapDestinationPort5, pt3080InputRefCalDate=pt3080InputRefCalDate, pt3080CommsStaticDNS2ServerAddress=pt3080CommsStaticDNS2ServerAddress, pt3080GPSAlarmID=pt3080GPSAlarmID, pt3080TSoIPRx2Status=pt3080TSoIPRx2Status, pt3080InputRefCalVer=pt3080InputRefCalVer, pt3080ModeTxIdent=pt3080ModeTxIdent, pt3080TSoIPRx2Protocol=pt3080TSoIPRx2Protocol, pt3080PresetRecall=pt3080PresetRecall, pt3080PrecorrectorNonlinearMode=pt3080PrecorrectorNonlinearMode, pt3080NotifTSoIPRx1SyncLossAlarm=pt3080NotifTSoIPRx1SyncLossAlarm, pt3080PrecorrectorNonlinearMonitorSenseValid=pt3080PrecorrectorNonlinearMonitorSenseValid, pt3080SystemScheduledActionRebootSystemType=pt3080SystemScheduledActionRebootSystemType, pt3080NotifTSSecondaryPATLossAlarm=pt3080NotifTSSecondaryPATLossAlarm, pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm=pt3080NotifSFNTSSecondaryNetworkDelayExceededAlarm, pt3080CommsBackupPhysicalInterface=pt3080CommsBackupPhysicalInterface, pt3080TSoIPRx1ReceiverEnable=pt3080TSoIPRx1ReceiverEnable, pt3080EventlogTable=pt3080EventlogTable, pt3080InputRefStatus=pt3080InputRefStatus, pt3080=pt3080, pt3080InputTSPrimaryMaxPATDelay=pt3080InputTSPrimaryMaxPATDelay, pt3080NotifTSPrimaryInputTSHoldOverAlarm=pt3080NotifTSPrimaryInputTSHoldOverAlarm, pt3080ExternalAlarmTable=pt3080ExternalAlarmTable, pt3080OutputEffectiveLevel=pt3080OutputEffectiveLevel, pt3080GpsbiasVoltage=pt3080GpsbiasVoltage, pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis=pt3080PrecorrectorNonlinearAdaptiveLowerShoulderTargetHysteresis, pt3080NotifExternalInput4Alarm=pt3080NotifExternalInput4Alarm, pt3080GPSAlarmActionRelay2=pt3080GPSAlarmActionRelay2, pt3080CommsRemoteServiceWeb=pt3080CommsRemoteServiceWeb, pt3080PresetName=pt3080PresetName, pt3080NotifTSPrimaryMIPDataMissingAlarm=pt3080NotifTSPrimaryMIPDataMissingAlarm, pt3080CommsRemoteIpMulticastSourceFilterAddress6=pt3080CommsRemoteIpMulticastSourceFilterAddress6, pt3080NotifInternalSatelliteAlarm=pt3080NotifInternalSatelliteAlarm, pt3080CommsPortPhysicalInterface=pt3080CommsPortPhysicalInterface, pt3080ReferenceAlarmActionForceMode=pt3080ReferenceAlarmActionForceMode, pt3080ASIInput2SyncSignal=pt3080ASIInput2SyncSignal, pt3080ModeNetworkDelayMaxHP=pt3080ModeNetworkDelayMaxHP, pt3080BackplanePolarityRFFail=pt3080BackplanePolarityRFFail, pt3080OutputGroup=pt3080OutputGroup, pt3080InputTSLpPacketSize=pt3080InputTSLpPacketSize, pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel=pt3080PrecorrectorNonlinearMonitorUpperShoulderLevel, pt3080RFAlarmActionForceMode=pt3080RFAlarmActionForceMode, pt3080CommsRipPort=pt3080CommsRipPort, pt3080CommsRemoteIpMulticastSourceFilterMode=pt3080CommsRemoteIpMulticastSourceFilterMode, pt3080PrecorrectorLinearMonitorStatus=pt3080PrecorrectorLinearMonitorStatus, pt3080NotifHWMonitorRightFan2Alarm=pt3080NotifHWMonitorRightFan2Alarm, pt3080ASITSSecondaryAlarmState=pt3080ASITSSecondaryAlarmState, pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm=pt3080NotifSFNTSSecondarySeamlessDelayTooSmallAlarm, pt3080CommsLocalCurrentIpAddr=pt3080CommsLocalCurrentIpAddr, pt3080TSoIPRx1LanSelect=pt3080TSoIPRx1LanSelect, pt3080NotifGroupInternalAlarm=pt3080NotifGroupInternalAlarm, pt3080ASIInput2SyncTSSize=pt3080ASIInput2SyncTSSize, pt3080MonitorTSoIPLostIPFrames=pt3080MonitorTSoIPLostIPFrames, pt3080ReferenceAlarmActionRelay2=pt3080ReferenceAlarmActionRelay2, pt3080SystemBackplaneIdPcb=pt3080SystemBackplaneIdPcb, pt3080ASITSPrimaryAlarmDescription=pt3080ASITSPrimaryAlarmDescription, pt3080CommsLocalIpMulticastSourceFilterAddress5=pt3080CommsLocalIpMulticastSourceFilterAddress5, pt3080InputTSLpPacketsBuffered=pt3080InputTSLpPacketsBuffered, pt3080InternalAlarmActionEmail=pt3080InternalAlarmActionEmail, pt3080ReceptionTunerHWCalibrationDataVersion=pt3080ReceptionTunerHWCalibrationDataVersion, pt3080NotifTSSecondarySyncLossAlarm=pt3080NotifTSSecondarySyncLossAlarm, pt3080NotifSFNAlarm=pt3080NotifSFNAlarm, pt3080TSoIPRx1QueueSize=pt3080TSoIPRx1QueueSize, pt3080SystemOperationNumberOfBoots=pt3080SystemOperationNumberOfBoots, pt3080GpsLatitude=pt3080GpsLatitude, pt3080TSoIPRx1CorrectedIPFrames=pt3080TSoIPRx1CorrectedIPFrames, pt3080TSoIPAlarmActionForceMode=pt3080TSoIPAlarmActionForceMode, pt3080SystemScheduledActionWeekday=pt3080SystemScheduledActionWeekday, pt3080ReceptionGainManualValue=pt3080ReceptionGainManualValue, pt3080CommsLocalIpMulticastAddr=pt3080CommsLocalIpMulticastAddr, pt3080CommsLocalIpMulticastSourceFilterAddress4=pt3080CommsLocalIpMulticastSourceFilterAddress4, pt3080CommsSNMPTrapDestination2=pt3080CommsSNMPTrapDestination2, pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable=pt3080PrecorrectorNonlinearAdaptiveMaxRfPaprEnable, pt3080TSoIPAlarmActionEventlog=pt3080TSoIPAlarmActionEventlog, pt3080CommsPortServiceSNMP=pt3080CommsPortServiceSNMP, pt3080CommsAccessAllowedTimeLeft=pt3080CommsAccessAllowedTimeLeft, pt3080ModeMpeFecLowPrio=pt3080ModeMpeFecLowPrio, pt3080MonitorTSoIPUDPChecksum=pt3080MonitorTSoIPUDPChecksum, pt3080OutputRfFrequency=pt3080OutputRfFrequency, pt3080CommsCurrentDNSDomain=pt3080CommsCurrentDNSDomain, pt3080NotifInternalBackplaneAlarm=pt3080NotifInternalBackplaneAlarm, pt3080ASITSSecondaryAlarmEntry=pt3080ASITSSecondaryAlarmEntry, pt3080CommsLocalIpMulticastSourceFilterAddress3=pt3080CommsLocalIpMulticastSourceFilterAddress3, pt3080ASIAlarmActionAlarmLED=pt3080ASIAlarmActionAlarmLED, pt3080PrecorrectorLinearAdaptive=pt3080PrecorrectorLinearAdaptive, pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable=pt3080PrecorrectorNonlinearAdaptiveUpperShoulderEnable, pt3080InputTSSecondaryMaxStsJitter=pt3080InputTSSecondaryMaxStsJitter, pt3080CommsAlarmEmailReceiver=pt3080CommsAlarmEmailReceiver, pt3080ModeNetworkDelayMinLP=pt3080ModeNetworkDelayMinLP, pt3080InternalAlarmID=pt3080InternalAlarmID, pt3080ModeDefaultMIPOutputPower=pt3080ModeDefaultMIPOutputPower, pt3080PrecorrectorNonlinearMonitorStatus=pt3080PrecorrectorNonlinearMonitorStatus, pt3080ModeDefaultMIPOutputFreqOffset=pt3080ModeDefaultMIPOutputFreqOffset, pt3080SystemInstrumentFW1RevBL=pt3080SystemInstrumentFW1RevBL, pt3080SystemScheduledActionRandomDelay=pt3080SystemScheduledActionRandomDelay, pt3080MonitorTSoIPSource=pt3080MonitorTSoIPSource, pt3080GroupAlarmDescription=pt3080GroupAlarmDescription, pt3080InternalAlarmActionAlarmLED=pt3080InternalAlarmActionAlarmLED, pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm=pt3080NotifHWMonitorMainBoardCPUTemperatureAlarm, pt3080GPSAlarmActionEventlog=pt3080GPSAlarmActionEventlog, pt3080GroupAlarmActionEventlog=pt3080GroupAlarmActionEventlog, pt3080ModeMpeFecHighPrio=pt3080ModeMpeFecHighPrio, pt3080GpsSatelliteSystemCOMPASS=pt3080GpsSatelliteSystemCOMPASS, pt3080TSoIPRx1CurrentIPAddress=pt3080TSoIPRx1CurrentIPAddress, pt3080NotifTSPrimarySyncLossAlarm=pt3080NotifTSPrimarySyncLossAlarm, pt3080CommsAlarmEntry=pt3080CommsAlarmEntry, pt3080OutputRfDetectedLowerLevelLimit=pt3080OutputRfDetectedLowerLevelLimit, pt3080InputASITSSecondarySource=pt3080InputASITSSecondarySource, pt3080ReferenceAlarmActionAlarmLED=pt3080ReferenceAlarmActionAlarmLED, pt3080TSoIPRx2FecColumn=pt3080TSoIPRx2FecColumn, pt3080SFNAlarmActionEventlog=pt3080SFNAlarmActionEventlog, pt3080InputTSPrimaryMinDelaymarginEnable=pt3080InputTSPrimaryMinDelaymarginEnable, pt3080NotifTSSecondaryMIPPriorityBadAlarm=pt3080NotifTSSecondaryMIPPriorityBadAlarm, pt3080InputTSPrimaryMinDelaymargin=pt3080InputTSPrimaryMinDelaymargin, pt3080InputTSSecondaryStsJitter=pt3080InputTSSecondaryStsJitter, pt3080CommsPortIpMulticastSourceFilterAddress4=pt3080CommsPortIpMulticastSourceFilterAddress4, pt3080ModeNetwork=pt3080ModeNetwork, pt3080Demodulator2ActualConstellation=pt3080Demodulator2ActualConstellation, pt3080ModeGuardInterval=pt3080ModeGuardInterval, pt3080ASIAlarmActionEmail=pt3080ASIAlarmActionEmail, pt3080InputTSLpBitrate=pt3080InputTSLpBitrate)
mibBuilder.exportSymbols("PT3080-MIB", pt3080Demodulator2ActualMpeFecLowPrio=pt3080Demodulator2ActualMpeFecLowPrio, pt3080InputEffectiveAutoroutingPolicy=pt3080InputEffectiveAutoroutingPolicy, pt3080OutputRfAlcStatus=pt3080OutputRfAlcStatus, pt3080CommsBackupStaticNetmask=pt3080CommsBackupStaticNetmask, pt3080SystemInstrumentKU=pt3080SystemInstrumentKU, pt3080PrecorrectorNonlinearMonitorMerValid=pt3080PrecorrectorNonlinearMonitorMerValid, pt3080NotifRefenceClockIntern1PPSLossAlarm=pt3080NotifRefenceClockIntern1PPSLossAlarm, pt3080SystemBackplaneIdPartlist=pt3080SystemBackplaneIdPartlist, pt3080ASIInput2SyncStatus=pt3080ASIInput2SyncStatus, pt3080RFAlarmActionRelay1=pt3080RFAlarmActionRelay1, pt3080DemodulatorAlarmDescription=pt3080DemodulatorAlarmDescription, pt3080InputTSSecondaryStsJitterMax=pt3080InputTSSecondaryStsJitterMax, pt3080ASITSPrimaryAlarmActionRelay1=pt3080ASITSPrimaryAlarmActionRelay1, pt3080PresetTable=pt3080PresetTable, pt3080GpsState=pt3080GpsState, pt3080TSoIPRx1FecColumn=pt3080TSoIPRx1FecColumn, pt3080ASIAlarmID=pt3080ASIAlarmID, pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm=pt3080NotifSFNTSSecondaryMIPConfigErrorAlarm, pt3080NotifGNSSHoldOverAlarm=pt3080NotifGNSSHoldOverAlarm, pt3080NotifRFAlcRangeAlarm=pt3080NotifRFAlcRangeAlarm, pt3080InternalAlarmActionRelay1=pt3080InternalAlarmActionRelay1, pt3080ModeCodeRateLowPrio=pt3080ModeCodeRateLowPrio, pt3080ASITSSecondaryAlarmDescription=pt3080ASITSSecondaryAlarmDescription, pt3080NotifASIASI1ErrorRateEceeededAlarm=pt3080NotifASIASI1ErrorRateEceeededAlarm, pt3080PrecorrectorClipperMonitorShoulderLevelLower=pt3080PrecorrectorClipperMonitorShoulderLevelLower, pt3080ReceptionGainControl=pt3080ReceptionGainControl, pt3080GroupAlarmID=pt3080GroupAlarmID, pt3080ReceptionTunerHWSerialNumber=pt3080ReceptionTunerHWSerialNumber, pt3080InputTSHpStuffingrate=pt3080InputTSHpStuffingrate, pt3080EventlogEnable=pt3080EventlogEnable, pt3080ModeGroup=pt3080ModeGroup, pt3080Agent=pt3080Agent, pt3080CommsStaticRouteType=pt3080CommsStaticRouteType, pt3080NotifsGroup=pt3080NotifsGroup, pt3080Demodulator2PostVirterbiErrorRate=pt3080Demodulator2PostVirterbiErrorRate, pt3080PrecorrectorClipperMonitorIterations=pt3080PrecorrectorClipperMonitorIterations, pt3080ModeMfnKeepNullPackets=pt3080ModeMfnKeepNullPackets, pt3080SystemBackplaneIdRaw=pt3080SystemBackplaneIdRaw, pt3080DemodulatorAlarmActionRelay1=pt3080DemodulatorAlarmActionRelay1, pt3080ASIInput2DataErrorLimit=pt3080ASIInput2DataErrorLimit, pt3080CommsLocalCurrentNetmask=pt3080CommsLocalCurrentNetmask, pt3080CommsStaticHostname=pt3080CommsStaticHostname, pt3080CommsRemoteVlanId=pt3080CommsRemoteVlanId, pt3080CommsSNMPTrapDestinationPort4=pt3080CommsSNMPTrapDestinationPort4, pt3080PrecorrectorNonlinearMonitorSenseBadCount=pt3080PrecorrectorNonlinearMonitorSenseBadCount, pt3080NotifGroupHWMonitorAlarm=pt3080NotifGroupHWMonitorAlarm, pt3080ASIInput1DataRate=pt3080ASIInput1DataRate, pt3080Demodulator1Mer=pt3080Demodulator1Mer, pt3080EventlogMode=pt3080EventlogMode, pt3080SystemInstrumentCalibrationDate=pt3080SystemInstrumentCalibrationDate, pt3080OutputIfFrequency=pt3080OutputIfFrequency, pt3080NotifInternalGNSSAlarm=pt3080NotifInternalGNSSAlarm, pt3080TSoIPRx1Multicast=pt3080TSoIPRx1Multicast, pt3080MonitorTSoIPFecSkew=pt3080MonitorTSoIPFecSkew, pt3080SFNAlarmActionEmail=pt3080SFNAlarmActionEmail, pt3080CommsGbeAdminIpMulticastSourceFilterAddress1=pt3080CommsGbeAdminIpMulticastSourceFilterAddress1, pt3080ReceptionRFSquelchHysteresis=pt3080ReceptionRFSquelchHysteresis, pt3080NotifHWMonitorAlarm=pt3080NotifHWMonitorAlarm, pt3080NotifCommeth0Alarm=pt3080NotifCommeth0Alarm, pt3080OutputChannel=pt3080OutputChannel, pt3080Demodulator2PreVirterbiErrorRate=pt3080Demodulator2PreVirterbiErrorRate, pt3080SystemInstrumentFW2Rev=pt3080SystemInstrumentFW2Rev, pt3080OutputPowerLevel=pt3080OutputPowerLevel, pt3080CommsWebServicePort=pt3080CommsWebServicePort, pt3080SystemScheduledActionSWUpgradePassword=pt3080SystemScheduledActionSWUpgradePassword, pt3080NotifRefenceClockNTPSyncLossAlarm=pt3080NotifRefenceClockNTPSyncLossAlarm, pt3080SystemScheduledActionHour=pt3080SystemScheduledActionHour, pt3080CommsLocalPhysicalInterface=pt3080CommsLocalPhysicalInterface, pt3080MonitorTSoIPMulticastLanSelect=pt3080MonitorTSoIPMulticastLanSelect, pt3080ReferenceAlarmDescription=pt3080ReferenceAlarmDescription, pt3080GPSAlarmActionForceMode=pt3080GPSAlarmActionForceMode, pt3080TestScarrierLevel=pt3080TestScarrierLevel, pt3080CommsStaticDNS1ServerAddress=pt3080CommsStaticDNS1ServerAddress, pt3080ExternalAlarmEntry=pt3080ExternalAlarmEntry, pt3080PresetGroup=pt3080PresetGroup, pt3080Demodulator1ActualCellID=pt3080Demodulator1ActualCellID, pt3080PrecorrectorNonlinearMonitorSenseLevel=pt3080PrecorrectorNonlinearMonitorSenseLevel, pt3080CommsLocalServiceSCPI=pt3080CommsLocalServiceSCPI, pt3080ReferenceAlarmTable=pt3080ReferenceAlarmTable, pt3080CommsRemoteServiceSNMP=pt3080CommsRemoteServiceSNMP, pt3080CommsLocalIpMulticastSourceFilterAddress2=pt3080CommsLocalIpMulticastSourceFilterAddress2, pt3080InputASIAutoRoutingPolicy=pt3080InputASIAutoRoutingPolicy, pt3080HWMonitorAlarmEntry=pt3080HWMonitorAlarmEntry, pt3080CommsStaticNtpServerAddress=pt3080CommsStaticNtpServerAddress, pt3080Demodulator2ActualTimeSlicingLowPrio=pt3080Demodulator2ActualTimeSlicingLowPrio, pt3080InputRef10MhzHoldoverDelay=pt3080InputRef10MhzHoldoverDelay, pt3080PresetStore=pt3080PresetStore, pt3080MonitorTSoIPIpBitrate=pt3080MonitorTSoIPIpBitrate, pt3080DemodulatorAlarmActionTrap=pt3080DemodulatorAlarmActionTrap, pt3080ASIInput1DataErrorRate=pt3080ASIInput1DataErrorRate, pt3080ExternalAlarmActionForceMode=pt3080ExternalAlarmActionForceMode, pt3080CommsGroup=pt3080CommsGroup, pt3080BackplanePolarityHardMute=pt3080BackplanePolarityHardMute, pt3080NotifExternalInput8Alarm=pt3080NotifExternalInput8Alarm, pt3080OutputRfFrequencyOffset=pt3080OutputRfFrequencyOffset, pt3080PrecorrectorNonlinearAttenuation=pt3080PrecorrectorNonlinearAttenuation, pt3080NotifRefenceClockExtern1PPSLossAlarm=pt3080NotifRefenceClockExtern1PPSLossAlarm, pt3080ASIAlarmTable=pt3080ASIAlarmTable, pt3080SystemScheduledActionPresetNo=pt3080SystemScheduledActionPresetNo, pt3080Gps1PPSStatus=pt3080Gps1PPSStatus, pt3080TSoIPAlarmActionAlarmLED=pt3080TSoIPAlarmActionAlarmLED, pt3080HWMonitorAlarmDescription=pt3080HWMonitorAlarmDescription, pt3080ASIAlarmDescription=pt3080ASIAlarmDescription, pt3080SystemImage0InstalledDate=pt3080SystemImage0InstalledDate, pt3080OutputRfDetectedHigherLevelcontrol=pt3080OutputRfDetectedHigherLevelcontrol, pt3080PrecorrectorNonlinearAdaptiveMerEnable=pt3080PrecorrectorNonlinearAdaptiveMerEnable, pt3080InternalAlarmTable=pt3080InternalAlarmTable, pt3080SFNAlarmDescription=pt3080SFNAlarmDescription, pt3080ReceptionRFInputLevelHysteresis=pt3080ReceptionRFInputLevelHysteresis, pt3080OutputRfCableFrequencyLevelOffset1=pt3080OutputRfCableFrequencyLevelOffset1, pt3080PrecorrectorLastTurnAroundTime=pt3080PrecorrectorLastTurnAroundTime, pt3080SystemReboot=pt3080SystemReboot, pt3080ModeDefaultMIPOutputTimeOffset=pt3080ModeDefaultMIPOutputTimeOffset, pt3080SystemOperationOnTime=pt3080SystemOperationOnTime, pt3080CommsIGMPVersion=pt3080CommsIGMPVersion, pt3080TSoIPRx1SyncTimeout=pt3080TSoIPRx1SyncTimeout, pt3080SystemDateTimeSync=pt3080SystemDateTimeSync, pt3080Backplane=pt3080Backplane, pt3080SystemScheduledActionRecurrence=pt3080SystemScheduledActionRecurrence, pt3080CommsBackupIpMulticastAddr=pt3080CommsBackupIpMulticastAddr, pt3080InputRefSource=pt3080InputRefSource, pt3080InputRef1PPSImpedance=pt3080InputRef1PPSImpedance, pt3080PrecorrectorNonlinearAdaptiveMode=pt3080PrecorrectorNonlinearAdaptiveMode, pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis=pt3080PrecorrectorNonlinearAdaptiveUpperShoulderTargetHysteresis, pt3080PrecorrectorNonlinearLoadFactory=pt3080PrecorrectorNonlinearLoadFactory, pt3080NotifGroupRefenceClockAlarm=pt3080NotifGroupRefenceClockAlarm, pt3080GPSAlarmActionTrap=pt3080GPSAlarmActionTrap, pt3080CommsGbeAdminStaticIpAddr=pt3080CommsGbeAdminStaticIpAddr, pt3080CommsBackupIpMulticastSourceFilterAddress5=pt3080CommsBackupIpMulticastSourceFilterAddress5, pt3080CommsCurrentDNS1ServerAddress=pt3080CommsCurrentDNS1ServerAddress, pt3080OutputBandwidth=pt3080OutputBandwidth, pt3080InputTSSecondaryStatus=pt3080InputTSSecondaryStatus, pt3080NotifCommeth4Alarm=pt3080NotifCommeth4Alarm, pt3080CommsBackupVlanId=pt3080CommsBackupVlanId, pt3080CommsRemoteEnable=pt3080CommsRemoteEnable, pt3080SFNAlarmState=pt3080SFNAlarmState, pt3080CommsLocalDhcpMode=pt3080CommsLocalDhcpMode, pt3080InputRefDirection=pt3080InputRefDirection, pt3080InputTSPrimaryStsJitter=pt3080InputTSPrimaryStsJitter, pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm=pt3080NotifSFNTSPrimaryNetworkDelayExceededAlarm, pt3080CommsRemoteIpMulticastSourceFilterAddress5=pt3080CommsRemoteIpMulticastSourceFilterAddress5, pt3080ReceptionRFifLevel=pt3080ReceptionRFifLevel, pt3080CommsPortStaticIpAddr=pt3080CommsPortStaticIpAddr, pt3080SystemInstrumentType=pt3080SystemInstrumentType, pt3080ExternalAlarmActionEmail=pt3080ExternalAlarmActionEmail, pt3080ModeMaxNetworkDelayLP=pt3080ModeMaxNetworkDelayLP, pt3080InputASIAutoRoutingDelayHp2Lp=pt3080InputASIAutoRoutingDelayHp2Lp, pt3080ReceptionRFSquelchThreshold=pt3080ReceptionRFSquelchThreshold, pt3080SystemLanguage=pt3080SystemLanguage, pt3080GroupAlarmActionRelay2=pt3080GroupAlarmActionRelay2, pt3080DemodulatorAlarmActionEmail=pt3080DemodulatorAlarmActionEmail, pt3080CommsGbeAdminEnable=pt3080CommsGbeAdminEnable, pt3080CommsRemoteIpMulticastSourceFilterAddress1=pt3080CommsRemoteIpMulticastSourceFilterAddress1, pt3080CommsIGMPv3UnsolicitedReportInterval=pt3080CommsIGMPv3UnsolicitedReportInterval, pt3080NotifHWMonitorMainBoardTemperatureAlarm=pt3080NotifHWMonitorMainBoardTemperatureAlarm, pt3080TSoIPAlarmActionRelay1=pt3080TSoIPAlarmActionRelay1, pt3080Notif=pt3080Notif, pt3080ASIInput2SyncTimeout=pt3080ASIInput2SyncTimeout, pt3080Demodulator1ActualMpeFecLowPrio=pt3080Demodulator1ActualMpeFecLowPrio, pt3080ASITSPrimaryAlarmActionEventlog=pt3080ASITSPrimaryAlarmActionEventlog, pt3080InputTSLp=pt3080InputTSLp, pt3080TSoIPRx1Status=pt3080TSoIPRx1Status, pt3080TSoIPAlarmTable=pt3080TSoIPAlarmTable, pt3080ExternalAlarmActionAlarmLED=pt3080ExternalAlarmActionAlarmLED, pt3080CommsGbeAdminServiceTSoIP=pt3080CommsGbeAdminServiceTSoIP, pt3080NotifHWMonitorFPGAAlarm=pt3080NotifHWMonitorFPGAAlarm, pt3080Demodulator2OutputTS=pt3080Demodulator2OutputTS, pt3080CommsGbeAdminCurrentIpAddr=pt3080CommsGbeAdminCurrentIpAddr, pt3080ASITSPrimaryAlarmActionTrap=pt3080ASITSPrimaryAlarmActionTrap, pt3080Demodulator2PostVirterbiErrorRateLimit=pt3080Demodulator2PostVirterbiErrorRateLimit, pt3080ExternalAlarmActionRelay1=pt3080ExternalAlarmActionRelay1, pt3080CommsPortVlanId=pt3080CommsPortVlanId, pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm=pt3080NotifTSoIPRx2PackageErrorRationExceededAlarm, pt3080NotifTSPrimaryMIPPriorityBadAlarm=pt3080NotifTSPrimaryMIPPriorityBadAlarm, pt3080TSoIP=pt3080TSoIP, pt3080NotifGroupTSSecondaryAlarm=pt3080NotifGroupTSSecondaryAlarm, pt3080ASIInput2LineErrorRate=pt3080ASIInput2LineErrorRate, pt3080Demodulator2ActualHierarchy=pt3080Demodulator2ActualHierarchy, pt3080CommsGbeAdminPhysicalInterface=pt3080CommsGbeAdminPhysicalInterface, pt3080Demodulator1ActualHierarchy=pt3080Demodulator1ActualHierarchy, pt3080ModeHierarchy=pt3080ModeHierarchy, pt3080InputTSSecondaryMaxPATDelay=pt3080InputTSSecondaryMaxPATDelay, pt3080TSoIPRx1OverrunIPFrames=pt3080TSoIPRx1OverrunIPFrames, pt3080ReceptionRFInputLevel=pt3080ReceptionRFInputLevel, pt3080RFAlarmActionRelay2=pt3080RFAlarmActionRelay2, pt3080PrecorrectorLinearMonitorAmplitudeRippleValid=pt3080PrecorrectorLinearMonitorAmplitudeRippleValid, pt3080GroupAlarmState=pt3080GroupAlarmState, pt3080SystemInstrumentOptions=pt3080SystemInstrumentOptions, pt3080ModeCodeRateHighPrio=pt3080ModeCodeRateHighPrio, pt3080GPSAlarmActionEmail=pt3080GPSAlarmActionEmail, pt3080ReceptionIFInputPolicy=pt3080ReceptionIFInputPolicy, pt3080ASIInput1LineErrorRate=pt3080ASIInput1LineErrorRate, pt3080RFAlarmID=pt3080RFAlarmID, pt3080CommsSNMPTrapDestination4=pt3080CommsSNMPTrapDestination4, pt3080ModeMipControlOutputTimeOffset=pt3080ModeMipControlOutputTimeOffset, pt3080SystemInstrumentPCBRev=pt3080SystemInstrumentPCBRev, pt3080PrecorrectorClipperMonitorShoulderLevelUpper=pt3080PrecorrectorClipperMonitorShoulderLevelUpper, pt3080CommsRemoteServiceSCPI=pt3080CommsRemoteServiceSCPI, pt3080ASITSSecondaryAlarmActionEventlog=pt3080ASITSSecondaryAlarmActionEventlog, pt3080NotifInternalPLLUnlockedAlarm=pt3080NotifInternalPLLUnlockedAlarm, pt3080OutputRfLevel=pt3080OutputRfLevel, pt3080Demodulator2PreVirterbiErrorRateLimit=pt3080Demodulator2PreVirterbiErrorRateLimit, pt3080NotifCommeth2Alarm=pt3080NotifCommeth2Alarm, pt3080NotifTSoIPRx2SyncLossAlarm=pt3080NotifTSoIPRx2SyncLossAlarm, pt3080ReferenceAlarmState=pt3080ReferenceAlarmState, pt3080NotifInternalUpConverterAlarm=pt3080NotifInternalUpConverterAlarm, pt3080Demodulator1MerLimit=pt3080Demodulator1MerLimit, pt3080CommsGbeAdminIpMulticastSourceFilterAddress4=pt3080CommsGbeAdminIpMulticastSourceFilterAddress4, pt3080ModeMipControlOutputPower=pt3080ModeMipControlOutputPower, pt3080Output=pt3080Output, pt3080GpsSatelliteSystemGALILEO=pt3080GpsSatelliteSystemGALILEO, pt3080ASITSPrimaryAlarmID=pt3080ASITSPrimaryAlarmID, pt3080Reception=pt3080Reception, pt3080GroupAlarmActionForceMode=pt3080GroupAlarmActionForceMode, pt3080PrecorrectorLinearUpdateFactoryCurve=pt3080PrecorrectorLinearUpdateFactoryCurve, pt3080Modeifft=pt3080Modeifft, pt3080OutputPolarity=pt3080OutputPolarity, pt3080InputTSSecondaryMaxMissingmipEnable=pt3080InputTSSecondaryMaxMissingmipEnable, pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid=pt3080PrecorrectorClipperMonitorShoulderLevelUpperValid, pt3080InputTSPrimaryMaxPATDelayEnable=pt3080InputTSPrimaryMaxPATDelayEnable, pt3080ASIInput2LineErrors=pt3080ASIInput2LineErrors, pt3080NotifTSSecondarySTSJitterExceededAlarm=pt3080NotifTSSecondarySTSJitterExceededAlarm, pt3080GPSAlarmEntry=pt3080GPSAlarmEntry, pt3080NotifSFNFreeRunningModeAlarm=pt3080NotifSFNFreeRunningModeAlarm, pt3080ASITSSecondaryAlarmActionRelay2=pt3080ASITSSecondaryAlarmActionRelay2)
