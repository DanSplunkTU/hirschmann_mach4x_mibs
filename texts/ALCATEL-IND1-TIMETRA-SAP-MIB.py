#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-TIMETRA-SAP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:14:28 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
timetraSRMIBModules, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
tSchedulerPolicyName, TAdaptationRule, tVirtualSchedulerName, TBurstSize, TBurstPercentOrDefault = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName", "TAdaptationRule", "tVirtualSchedulerName", "TBurstSize", "TBurstPercentOrDefault")
ServObjDesc, BridgeId, VpnId, TlsLimitMacMoveLevel, tmnxServObjs, svcDhcpCoAError, svcDhcpPacketProblem, TStpPortState, ConfigStatus, svcDhcpClientLease, TlsLimitMacMove, svcDhcpLseStateNewCiAddr, CemSapEcid, tmnxOtherBridgeId, svcDhcpLseStatePopulateError, svcVpnId, svcDhcpSubAuthError, tstpTraps, tlsDhcpPacketProblem, hostConnectivityCiAddrType, svcTlsMacMoveMaxRate, tmnxCustomerBridgeId, tmnxServConformance, tlsDhcpLseStateNewCiAddr, protectedMacForNotify, tlsDhcpLseStateOldCiAddr, staticHostDynamicMacIpAddress, svcDhcpLseStateNewChAddr, StpExceptionCondition, custId, svcDhcpProxyError, TSapEgrQueueId, tmnxCustomerRootBridgeId, TQosQueueAttribute, tlsMstiInstanceId, MstiInstanceIdOrZero, hostConnectivityChAddr, ServObjName, tmnxServNotifications, tlsDHCPClientLease, svcId, svcDhcpLseStateOldChAddr, hostConnectivityCiAddr, CemSapReportAlarm, svcDhcpLseStateOldCiAddr, TSapIngQueueId, StpPortRole, TdmOptionsCasTrunkFraming, MvplsPruneState, tlsDhcpLseStateNewChAddr, TVirtSchedAttribute, ServType, staticHostDynamicMacConflict, StpProtocol, L2ptProtocols, tlsDhcpLseStateOldChAddr = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "ServObjDesc", "BridgeId", "VpnId", "TlsLimitMacMoveLevel", "tmnxServObjs", "svcDhcpCoAError", "svcDhcpPacketProblem", "TStpPortState", "ConfigStatus", "svcDhcpClientLease", "TlsLimitMacMove", "svcDhcpLseStateNewCiAddr", "CemSapEcid", "tmnxOtherBridgeId", "svcDhcpLseStatePopulateError", "svcVpnId", "svcDhcpSubAuthError", "tstpTraps", "tlsDhcpPacketProblem", "hostConnectivityCiAddrType", "svcTlsMacMoveMaxRate", "tmnxCustomerBridgeId", "tmnxServConformance", "tlsDhcpLseStateNewCiAddr", "protectedMacForNotify", "tlsDhcpLseStateOldCiAddr", "staticHostDynamicMacIpAddress", "svcDhcpLseStateNewChAddr", "StpExceptionCondition", "custId", "svcDhcpProxyError", "TSapEgrQueueId", "tmnxCustomerRootBridgeId", "TQosQueueAttribute", "tlsMstiInstanceId", "MstiInstanceIdOrZero", "hostConnectivityChAddr", "ServObjName", "tmnxServNotifications", "tlsDHCPClientLease", "svcId", "svcDhcpLseStateOldChAddr", "hostConnectivityCiAddr", "CemSapReportAlarm", "svcDhcpLseStateOldCiAddr", "TSapIngQueueId", "StpPortRole", "TdmOptionsCasTrunkFraming", "MvplsPruneState", "tlsDhcpLseStateNewChAddr", "TVirtSchedAttribute", "ServType", "staticHostDynamicMacConflict", "StpProtocol", "L2ptProtocols", "tlsDhcpLseStateOldChAddr")
TmnxEncapVal, TSapEgressPolicyID, TPolicyStatementNameOrEmpty, TEgressQueueId, TmnxIgmpVersion, TCpmProtPolicyID, TNamedItemOrEmpty, TmnxEnabledDisabled, TCIRRate, TmnxOperState, TItemDescription, TIngressQueueId, TmnxActionType, ServiceAdminStatus, TmnxServId, TPIRRate, TPortSchedulerPIR, TmnxPortID, TNamedItem, TSapIngressPolicyID, TmnxCustId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxEncapVal", "TSapEgressPolicyID", "TPolicyStatementNameOrEmpty", "TEgressQueueId", "TmnxIgmpVersion", "TCpmProtPolicyID", "TNamedItemOrEmpty", "TmnxEnabledDisabled", "TCIRRate", "TmnxOperState", "TItemDescription", "TIngressQueueId", "TmnxActionType", "ServiceAdminStatus", "TmnxServId", "TPIRRate", "TPortSchedulerPIR", "TmnxPortID", "TNamedItem", "TSapIngressPolicyID", "TmnxCustId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmTrafficDescrParamIndex")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Gauge32, Counter64, iso, Counter32, MibIdentifier, Bits, ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Counter64", "iso", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Unsigned32")
DisplayString, MacAddress, RowStatus, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TruthValue", "TimeStamp", "TextualConvention")
timetraSvcSapMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 55))
timetraSvcSapMIBModule.setRevisions(('1907-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraSvcSapMIBModule.setRevisionsDescriptions(('Rev 1.0                01 OCT 2007 00:00\n                     1.0 release of the TIMETRA-SAP-MIB from TIMETRA-SERV-MIB.',))
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setLastUpdated('0710010000Z')
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setContactInfo('Alcatel 7x50 Support\n         Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setDescription("This  document  is the SNMP MIB module to manage and provision\n        the various services of the Alcatel 7x50 SR system.\n\n        Copyright  2003-2008 Alcatel-Lucent. All rights reserved. Reproduction\n        of  this  document  is  authorized  on  the  condition that the\n        foregoing copyright notice is included.\n\n        This   SNMP   MIB  module  (Specification)  embodies  Alcatel's\n        proprietary  intellectual  property.  Alcatel retains all title\n        and ownership in the Specification, including any revisions.\n\n        Alcatel  grants  all interested parties a non-exclusive license\n        to  use and distribute an unmodified copy of this Specification\n        in  connection with management of Alcatel products, and without\n        fee,  provided  this copyright notice and license appear on all\n        copies.\n\n        This  Specification  is  supplied `as is', and Alcatel makes no\n        warranty,  either express or implied, as to the use, operation,\n        condition, or performance of the Specification.")
tmnxSapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3))
tmnxSapNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100))
tmnxSapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3))
sapTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3))
sapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0))
sapNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapNumEntries.setStatus('current')
if mibBuilder.loadTexts: sapNumEntries.setDescription('The current number of SAPs configured in this\n                     device.')
sapBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2), )
if mibBuilder.loadTexts: sapBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapBaseInfoTable.setDescription('A table that contains basic SAP information.')
sapBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapBaseInfoEntry.setDescription('Information about a specific SAP.')
sapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortId.setStatus('current')
if mibBuilder.loadTexts: sapPortId.setDescription('The ID of the access port where this SAP\n                     is defined.')
sapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 2), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEncapValue.setStatus('current')
if mibBuilder.loadTexts: sapEncapValue.setDescription('The value of the label used to identify this\n                     SAP on the access port specified by sapPortId.')
sapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'.")
sapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 4), ServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapType.setStatus('current')
if mibBuilder.loadTexts: sapType.setDescription('This object indicates the type of service where\n                     this SAP is defined.')
sapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapDescription.setStatus('current')
if mibBuilder.loadTexts: sapDescription.setDescription('Generic information about this SAP.')
sapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapAdminStatus.setDescription('The desired state of this SAP.')
sapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("portMtuTooSmall", 5), ("svcAdminDown", 6), ("iesIfAdminDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperStatus.setStatus('current')
if mibBuilder.loadTexts: sapOperStatus.setDescription('The value of the object sapOperStatus indicates the\n                     operating state of this SAP.')
sapIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 8), TSapIngressPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosPolicyId.setDescription('The value of the object sapIngressQosPolicyId specifies\n                     the row index in the tSapIngressTable corresponding to this\n                     ingress QoS policy, or one if no policy is specified.\n                     The value 0 is needed for mirror SAPs that\n                     cannot have a qos policy assigned.')
sapIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 9), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIngressMacFilterId.setDescription('The value of the object sapIngressMacFilterId specifies\n                     the row index in the tMacFilterTable corresponding to this\n                     ingress filter, or zero if no filter is specified.')
sapIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 10), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIngressIpFilterId.setDescription('The value of the object sapIngressIpFilterId specifies the\n                     row index in the tIPFilterTable corresponding to this\n                     ingress filter, or zero if no filter is specified.')
sapEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 11), TSapEgressPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosPolicyId.setDescription('The row index in the tSapEgressTable\n                     corresponding to this egress QoS policy,\n                     or one if no policy is specified.')
sapEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 12), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapEgressMacFilterId.setDescription('The row index in the tMacFilterTable\n                     corresponding to this egress filter,\n                     or zero if no filter is specified.')
sapEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 13), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapEgressIpFilterId.setDescription('The row index in the tIPFilterTable\n                     corresponding to this egress filter,\n                     or zero if no filter is specified.')
sapMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("ingressAndEgress", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: sapMirrorStatus.setDescription('This object specifies whether traffic\n                     mirroring has been enabled on this SAP.')
sapIesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIesIfIndex.setStatus('current')
if mibBuilder.loadTexts: sapIesIfIndex.setDescription("When the value of sapType is 'ies' this\n                     object specifies the index of the IES interface\n                     where this SAP is defined. The value of this object\n                     can be set only when the row is created and cannot\n                     be changed while the row status is 'active'. This\n                     object is otherwise not significant and should have\n                     the value zero.")
sapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this SAP.')
sapCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCollectAcctStats.setStatus('current')
if mibBuilder.loadTexts: sapCollectAcctStats.setDescription("When the value of this object is 'true' the agent\n                     collects accounting statistics on this SAP.")
sapAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAccountingPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapAccountingPolicyId.setDescription('This object specifies the policy to use to collect\n                     accounting statistics on this SAP. The value zero\n                     indicates that the agent should use the default\n                     accounting policy, if one exists.')
sapVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 19), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapVpnId.setStatus('current')
if mibBuilder.loadTexts: sapVpnId.setDescription('The VPN ID of the associated service.')
sapCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 20), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCustId.setStatus('current')
if mibBuilder.loadTexts: sapCustId.setDescription('The Customer ID of the associated service.')
sapCustMultSvcSite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 21), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCustMultSvcSite.setStatus('current')
if mibBuilder.loadTexts: sapCustMultSvcSite.setDescription('The value of this object, when not null, indicates\n                     the Multi-Service Site this SAP is a member of. This\n                     information is used to configure the ingress and\n                     egress QoS schedulers for this SAP.')
sapIngressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 22), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\n                     is null. It indicates the ingress QoS scheduler for\n                     this SAP.')
sapEgressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 23), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\n                     is null. It indicates the egress QoS scheduler for\n                     this SAP.')
sapSplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 24), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSplitHorizonGrp.setStatus('current')
if mibBuilder.loadTexts: sapSplitHorizonGrp.setDescription('This object specifies the name of the split-horizon\n                     group where the SAP belongs to. This object can be\n                     set only at the time the row is created. Per default\n                     a SAP does not belong to any split-horizon group. The\n                     name specified must correspond to an existing split-\n                     horizon group in the TLS service where this SAP is\n                     defined.')
sapIngressSharedQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 25), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressSharedQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: sapIngressSharedQueuePolicy.setDescription('This object indicates the ingress shared queue policy\n                     used by this SAP. When the value of this object is null\n                     it means that the SAP will use individual ingress QoS\n                     queues, instead of the shared ones.')
sapIngressMatchQinQDot1PBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("top", 2), ("bottom", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressMatchQinQDot1PBits.setStatus('current')
if mibBuilder.loadTexts: sapIngressMatchQinQDot1PBits.setDescription("This object applies only to SAP's defined on a port\n                     configured for qinq service encapsulation. It indicates\n                     which 802.1P bits will be used to match a QoS or a MAC\n                     filter policy when a double-tagged frame is received on\n                     this SAP.")
sapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 27), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("iesIfAdminDown", 2), ("portOperDown", 3), ("portMtuTooSmall", 4), ("l2OperDown", 5), ("ingressQosMismatch", 6), ("egressQosMismatch", 7), ("relearnLimitExceeded", 8), ("recProtSrcMac", 9), ("subIfAdminDown", 10), ("sapIpipeNoCeIpAddr", 11), ("sapTodResourceUnavail", 12), ("sapTodMssResourceUnavail", 13), ("sapParamMismatch", 14), ("sapCemNoEcidOrMacAddr", 15), ("sapStandbyForMcRing", 16), ("sapSvcMtuTooSmall", 17), ("ingressNamedPoolMismatch", 18), ("egressNamedPoolMismatch", 19), ("ipMirrorNoMacAddr", 20), ("sapEpipeNoRingNode", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperFlags.setStatus('current')
if mibBuilder.loadTexts: sapOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SAP.')
sapLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: sapLastStatusChange.setDescription('The value of sysUpTime at the time of the\n                     most recent operating status change to this\n                     SAP.')
sapAntiSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("sourceIpAddr", 1), ("sourceMacAddr", 2), ("sourceIpAndMacAddr", 3), ("nextHopIpAndMacAddr", 4))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAntiSpoofing.setStatus('current')
if mibBuilder.loadTexts: sapAntiSpoofing.setDescription("The value of the object sapAntiSpoofing specifies\n                     the type of anti-spoof filtering applicable on this SAP.\n\n                     'nextHopIpAndMacAddr (4)' is not supported on SR-1, where\n                     the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is '5'.")
sapIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 30), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapIngressIpv6FilterId.setDescription('The value of the object sapIngressIpv6FilterId specifies\n                     the row index in the tIPv6FilterTable corresponding to\n                     this ingress ipv6 filter, or zero if no ipv6 filter is\n                     specified.')
sapEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 31), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapEgressIpv6FilterId.setDescription('The value of the object sapEgressIpv6FilterId specifies\n                     the row index in the tIPv6FilterTable corresponding to\n                     this egress ipv6 filter, or zero if no ipv6 filter is\n                     specified.')
sapTodSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapTodSuite.setStatus('current')
if mibBuilder.loadTexts: sapTodSuite.setDescription('The value of the object sapTodSuite specifies the Time of\n                     Day (ToD) suite to be applied on this SAP.\n                     An empty string indicates that no ToD suite is applied\n                     on this SAP.\n                     A set request will only be allowed, if the indicated suite\n                     is defined in TIMETRA-SCHEDULER-MIB::tmnxTodSuiteTable.')
sapIngUseMultipointShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngUseMultipointShared.setStatus('current')
if mibBuilder.loadTexts: sapIngUseMultipointShared.setDescription('When the value of sapIngressSharedQueuePolicy is not null,\n                     the value of the object sapIngUseMultipointShared\n                     specifies whether this SAP uses the multipoint-shared\n                     queues of the shared policy.')
sapEgressQinQMarkTopOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQinQMarkTopOnly.setStatus('current')
if mibBuilder.loadTexts: sapEgressQinQMarkTopOnly.setDescription('When the encapsulation type of the access port where\n                     this SAP is defined is qinq, the value of the object\n                     sapEgressQinQMarkTopOnly specifies which P-bits to mark\n                     during packet egress. When the value is false both set\n                     of P-bits are marked. When the value is true, only the\n                     P-bits in the top Q-tag are marked.')
sapEgressAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 35), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: sapEgressAggRateLimit.setDescription("The value of the object sapEgressAggRateLimit\n                     specifies the maximum total rate of all egress queues for\n                     this SAP. The value '-1' means that there\n                     is no limit.")
sapEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 36), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEndPoint.setStatus('current')
if mibBuilder.loadTexts: sapEndPoint.setDescription('The value of the object sapEndPoint specifies the service\n                     endpoint to which this SAP is attached. The svcId of the \n                     SAP MUST match the svcId of the service endpoint.')
sapIngressVlanTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vlanId", 2), ("copyOuter", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressVlanTranslation.setStatus('current')
if mibBuilder.loadTexts: sapIngressVlanTranslation.setDescription("The value of sapIngressVlanTranslation specifies the \n                     desired Ingress Vlan Translation.\n                     \n                     A value of 'vlanId' specifies that the value of\n                     sapIngressVlanTranslationId is to be used to overwrite\n                     the preserved VLAN id in the packet.\n\n                     A value of 'copyOuter' specifies that the outer VLAN\n                     id should be used to overwrite the preserved VLAN id in\n                     the packet.\n\n                     An 'inconsistentValue' error is returned when an attempt\n                     is made to set the value of sapIngressVlanTranslation\n                     to 'vlanId' and sapIngressVlanTranslationId is\n                     set to '-1'.")
sapIngressVlanTranslationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4094), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressVlanTranslationId.setStatus('current')
if mibBuilder.loadTexts: sapIngressVlanTranslationId.setDescription("The value of sapIngressVlanTranslationId specifies the\n                     VLAN id to be used to overwrite the preserved VLAN id\n                     in the packet.\n                     \n                     An 'inconsistentValue' error is returned when an\n                     attempt is made to set the value of\n                     sapIngressVlanTranslationId to other than '-1' and\n                     sapIngressVlanTranslation is not set to 'vlanId'.")
sapSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("regular", 0), ("capture", 1), ("managed", 2))).clone('regular')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubType.setStatus('current')
if mibBuilder.loadTexts: sapSubType.setDescription("The value of the object sapSubType indicates the\n                     sub-type for this SAP.\n\n                     A value of 'regular' indicates a standard SAP.\n\n                     A value of 'capture' specifies a capturing SAP\n                     in which triggering packets will be sent to the CPM.\n                     Non-triggering packets captured by the 'capture' SAP\n                     will be dropped.\n\n                     A value of 'managed' indicates a managed SAP which\n                     was created dynamically after receiving triggering\n                     packets on a SAP with a sapSubType value of\n                     'capture'. Entries with a value of 'managed'\n                     are not user editable and are not maintained\n                     in the configuration file.\n\n                     Whereas any of the three values may be returned in\n                     in response to an SNMP GET request, only two values\n                     may be specified in an SNMP SET request: 'regular'\n                     and 'capture'. An attempt to specify a value\n                     of 'managed' in an SNMP SET request will fail\n                     with an error of 'wrongValue'.\n\n                     The value of this object cannot be changed after creation.")
sapCpmProtPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 40), TCpmProtPolicyID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCpmProtPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapCpmProtPolicyId.setDescription("The value of sapCpmProtPolicyId associates a CPM Protection policy\n         with a SAP. \n         \n         A value of zero (0) specifies that no CPM Protection policy is\n         associated with this SAP.\n\n         A value of one (1) specifies that the default CPM Protection policy is\n         associated with this SAP.\n\n         If no value for sapCpmProtPolicyId is specified when the \n         sapBaseInfoEntry is created, the system assigns a default value \n         as follows: if the system creates a corresponding entry\n         in the sapSubMgmtInfoTable, the default value is 'one'; otherwise,\n         the default value is 'zero'. This means that all SAP's that\n         support Enhanced Subscriber Management get a default value of 'one'.\n\n         If a SAP would get a default value of 'one', it is not\n         allowed to set the value of sapCpmProtPolicyId to 'zero'.\n\n         If a SAP would get a default value of 'zero', it is not\n         allowed to modify the value of sapCpmProtPolicyId.\n\n         This object is not supported on SR-1 and ESS-1, where the \n         value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is '5',\n         and 7710, where the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is\n         '7' or '9'.")
sapCpmProtMonitorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 41), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCpmProtMonitorMac.setStatus('current')
if mibBuilder.loadTexts: sapCpmProtMonitorMac.setDescription("The value of sapCpmProtMonitorMac specifies whether the \n         tmnxCpmProtPolPerSrcRateLimit of the CPM Protection policy must be applied.\n         \n         If the value of sapCpmProtMonitorMac is 'true', the per-source rate limit\n         must be applied.\n         \n         If the value of sapCpmProtPolicyId is equal to zero (0), the value of\n         sapCpmProtMonitorMac is irrelevant and will be ignored.\n\n         This object is not supported on SR-1 and ESS-1, where the \n         value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is '5',\n         and 7710, where the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is\n         '7' or '9'.")
sapEgressFrameBasedAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressFrameBasedAccounting.setStatus('current')
if mibBuilder.loadTexts: sapEgressFrameBasedAccounting.setDescription("The value of sapEgressFrameBasedAccounting specifies whether\n         to use frame-based accounting when evaluating \n         sapEgressAggRateLimit for all egress queues for this SAP.\n\n         If the value is 'false', the default packet-based accounting\n         method will be used.")
sapTlsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3), )
if mibBuilder.loadTexts: sapTlsInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsInfoTable.setDescription('A table that contains TLS SAP information.')
sapTlsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsInfoEntry.setDescription('TLS specific information about a SAP.')
sapTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpAdminStatus.setDescription("The value of the object sapTlsStpAdminStatus specifies\n                     whether this SAP participates in the TLS's Spanning Tree\n                     Protocol.")
sapTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPriority.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpPriority.setDescription('The value of the object sapTlsStpPriority specifies\n                     the value of the port priority field which is contained in\n                     the most significant 4 bits of the 16-bit Port ID\n                     associated with this SAP. As only the most significant 4\n                     bits of the value are used, the actual value of this object\n                     is limited to multiples of 16: e.g. the agent rounds down\n                     the value to one of: 0, 16, 32, .. , 224, 240.')
sapTlsStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPortNum.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpPortNum.setDescription('The value of the object sapTlsStpPortNum specifies the\n                     value of the port number field which is contained in the\n                     least significant 12 bits of the 16-bit Port ID associated\n                     with this SAP. Values in the range 2048..4094 are\n                     automatically assigned by the agent when the SAP is\n                     created or when the value of this object is set to zero\n                     via management. Values in the range 1..2047 can be set\n                     via management, to allow this object to have a\n                     deterministic value across system reboots.')
sapTlsStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPathCost.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpPathCost.setDescription('The value of the object  sapTlsStpPathCost specifies the\n                     contribution of this port to the path cost of paths\n                     towards the spanning tree root which include this port.')
sapTlsStpRapidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpRapidStart.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpRapidStart.setDescription("The value of the object sapTlsStpRapidStart specifies\n                     whether Rapid Start is enabled on this SAP. When the value\n                     is 'enabled' the Spanning Tree Protocol state transitions\n                     on this SAP are driven by the value of the 'HelloTime'\n                     instead of the value of 'ForwardDelay', thus allowing a\n                     faster transition into the forwarding state. This\n                     parameter is also referred to as 'adminEdge'. ")
sapTlsStpBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpBpduEncap.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpBpduEncap.setDescription('The value of the object sapTlsStpBpduEncap specifies the\n                     type of encapsulation used on BPDUs sent out and received\n                     on this SAP.')
sapTlsStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 7), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpPortState.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpPortState.setDescription("The value of the object sapTlsStpPortState indicates the\n                     port's current state as defined by application of the\n                     Spanning Tree Protocol. This state controls what action a\n                     port takes on reception of a frame. If the bridge has\n                     detected a port that is malfunctioning it will\n                     place that port into the 'broken' state.")
sapTlsStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpDesignatedBridge.setDescription("The value of the object sapTlsStpDesignatedBridge\n                     indicates  the Bridge Identifier of the bridge which this\n                     port considers to be the Designated Bridge for this port's\n                     segment.")
sapTlsStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpDesignatedPort.setDescription("The value of the object sapTlsStpDesignatedPort indicates\n                     the Port Identifier of the port on the Designated Bridge\n                     for this port's segment.")
sapTlsStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpForwardTransitions.setDescription('The value of the object sapTlsStpForwardTransitions\n                     indicates the number of times this port has transitioned\n                     from the Learning state to the Forwarding state.')
sapTlsStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInConfigBpdus.setDescription('The value of the object sapTlsStpInConfigBpdus indicates\n                     the number of Configuration BPDUs received on this SAP.')
sapTlsStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInTcnBpdus.setDescription('The value of the object  sapTlsStpInTcnBpdus indicates the\n                     number of Topology Change Notification BPDUs received on\n                     this SAP.')
sapTlsStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInBadBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInBadBpdus.setDescription('This object specifies the number of bad\n                     BPDUs received on this SAP.')
sapTlsStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOutConfigBpdus.setDescription('The value of the object sapTlsStpOutConfigBpdus indicates\n                     the number of Configuration BPDUs sent out this SAP.')
sapTlsStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOutTcnBpdus.setDescription('This object specifies the number of Topology\n                     Change Notification BPDUs sent out this SAP.')
sapTlsStpOperBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperBpduEncap.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOperBpduEncap.setDescription('The value of the object sapTlsStpOperBpduEncap indicates\n                     the operating encapsulation  type used on BPDUs sent out\n                     and received on this SAP.')
sapTlsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 17), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsVpnId.setStatus('current')
if mibBuilder.loadTexts: sapTlsVpnId.setDescription('The value of the object sapTlsVpnId indicates the VPN ID\n                     of the associated service.')
sapTlsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 18), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsCustId.setStatus('current')
if mibBuilder.loadTexts: sapTlsCustId.setDescription('The Customer ID of the associated service.')
sapTlsMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacAddressLimit.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacAddressLimit.setDescription("The value of the object sapTlsMacAddressLimit specifies\n                     the maximum number of learned and static entries allowed\n                     in the FDB of this SAP. The value 0 means: no limit for\n                     this SAP. When the value of\n                     ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisOperMode is not 'c', the\n                     maximum value of sapTlsMacAddressLimit is '131071'.")
sapTlsNumMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsNumMacAddresses.setStatus('current')
if mibBuilder.loadTexts: sapTlsNumMacAddresses.setDescription('The value of the object sapTlsNumMacAddresses indicates\n                     the number of MAC addresses  currently present in the FDB\n                     that belong to this  SAP  (Both  learned and static MAC\n                     addresses are counted).')
sapTlsNumStaticMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsNumStaticMacAddresses.setStatus('current')
if mibBuilder.loadTexts: sapTlsNumStaticMacAddresses.setDescription('The value of the object sapTlsNumStaticMacAddresses\n                     indicates the number of static MAC addresses currently\n                     present in the FDB that belong to this SAP.')
sapTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 22), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacLearning.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacLearning.setDescription('The value of the object sapTlsMacLearning specifies\n                     whether the MAC learning process  is enabled for this SAP.\n                     The value is ignored if MAC learning is disabled on\n                     service level.')
sapTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 23), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacAgeing.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacAgeing.setDescription('The value of the object sapTlsMacAgeing specifies whether\n                     the MAC aging process  is enabled for this SAP. the value\n                     is ignored if MAC aging is disabled on service level.')
sapTlsStpOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperEdge.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: sapTlsStpOperEdge.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOperEdge.setDescription('The value of the object sapTlsStpOperEdge indicates the\n                     operational value of the Edge Port parameter. The object\n                     is initialized to the value of sapTlsStpRapidStart and is\n                     set FALSE on reception of a BPDU.')
sapTlsStpAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1))).clone('forceTrue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: sapTlsStpAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpAdminPointToPoint.setDescription("The value of the object sapTlsStpAdminPointToPoint\n                     specifies the administrative point-to-point  status  of\n                     the LAN segment attached to this  sap. The value\n                     'forceTrue' means that this port should  always  be\n                     treated as if it is connected to a point-to-point link.\n                     The value of 'forceFalse' means that this port should\n                     be treated as having a shared media connection.")
sapTlsStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 26), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpPortRole.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpPortRole.setDescription('sapTlsStpPortRole indicates the current role of the\n                     sap as defined by the Rapid Spanning Tree Protocol.')
sapTlsStpAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 27), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAutoEdge.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpAutoEdge.setDescription('sapTlsStpAutoEdge specifies whether this SAP\n                     is enabled for auto-edge detection as defined by Rapid\n                     Spanning Tree Protocol.')
sapTlsStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 28), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperProtocol.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOperProtocol.setDescription('sapTlsStpOperProtocol indicates whether stp, rstp or\n                     mstp is  running  on this SAP. If the protocol is not\n                     enabled  on  this  SAP,  the  value  notApplicable  is\n                     returned.')
sapTlsStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInRstBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInRstBpdus.setDescription('The value of the object  sapTlsStpInRstBpdus indicates\n                     the number of Rapid Spanning Tree (RST) BPDUs received on\n                     this SAP.')
sapTlsStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutRstBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOutRstBpdus.setDescription('The value of the  object sapTlsStpOutRstBpdus indicates\n                     the number of Rapid Spanning Tree (RST) BPDUs sent out on\n                     this SAP.')
sapTlsLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 31), TlsLimitMacMove().clone('blockable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsLimitMacMove.setStatus('current')
if mibBuilder.loadTexts: sapTlsLimitMacMove.setDescription("When sapTlsLimitMacMove value is set  to  'blockable'\n                     the  agent will monitor the MAC relearn rate on this\n                     SAP,  and it will  block  it  when the re-learn rate\n                     specified  by  svcTlsMacMoveMaxRate  is exceeded. When\n                     the  value is  'nonBlockable'  this  SAP will not be\n                     blocked,  and  another  blockable  SAP will be blocked\n                     instead.")
sapTlsDhcpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpSnooping.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpSnooping.setDescription('The value of the object sapTlsDhcpSnooping specifies\n                     whether or not DHCP packets received on this SAP will be\n                     snooped. This object was made obsolete in the 3.0 release.')
sapTlsMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 33), TmnxEnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacPinning.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacPinning.setDescription('The value of the object sapTlsMacPinning specifies whether\n                     or not MAC address pinning is active on this SAP. The\n                     value will be set by default to disabled. However for a\n                     SAP that belongs to a residential SHG, the value is set to\n                     enabled by the system, and cannot be altered by the\n                     operator. Setting the value to enable disables\n                     re-learning of MAC addresses on other SAPs or\n                     spoke-SDPs within the same VPLS; the MAC address will\n                     hence remain attached to the SAP for the duration of\n                     its age-timer. This object has effect only for MAC\n                     addresses learned via the normal MAC learning\n                     process, and not for entries learned via DHCP.')
sapTlsDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 34), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDiscardUnknownSource.setStatus('current')
if mibBuilder.loadTexts: sapTlsDiscardUnknownSource.setDescription('with   the object sapTlsMacAddressLimit a limit can be\n                     configured  for  the  max number of MAC addresses that\n                     will  be learned on this  SAP.  When  this limit is\n                     reached, packets with unknown source MAC address are\n                     forwarded by default. By setting\n                     sapTlsDiscardUnknownSource  to enabled, packets with\n                     unknown source MAC will be dropped in stead.')
sapTlsMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 35), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsPruneState.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsPruneState.setDescription('The value of sapTlsMvplsPruneState indicates the mVPLS\n                     prune state of the SAP. The object will be set to\n                     notApplicable if the SAP is not managed by a mVPLS. If\n                     the SAP is managed the state reflects whether or not\n                     the SAP is pruned by the STP instance running in the\n                     mVPLS instance.')
sapTlsMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 36), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtService.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMgmtService.setDescription('The value of sapTlsMvplsMgmtService indicates the\n                     service Id of the service where the STP instance is\n                     running that is managing this SAP. This object is\n                     only valid if sapTlsMvplsPruneState is different from\n                     notApplicable.')
sapTlsMvplsMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 37), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtPortId.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMgmtPortId.setDescription('The value of sapTlsMvplsMgmtPortId indicates the SAP\n                     port Id of the SAP in the mVPLS instance specified in\n                     sapTlsMvplsMgmtService that is controlling this SAP.\n                     This object is only valid if sapTlsMvplsPruneState is\n                     different from notApplicable.')
sapTlsMvplsMgmtEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 38), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtEncapValue.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMgmtEncapValue.setDescription('The value of sapTlsMvplsMgmtEncapValue indicates the\n                     SAP Encap value of the SAP in the mVPLS instance\n                     specified in sapTlsMvplsMgmtService that is\n                     controlling this SAP. This object is only valid if\n                     sapTlsMvplsPruneState is different from notApplicable.')
sapTlsArpReplyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledWithSubscrIdent", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsArpReplyAgent.setStatus('current')
if mibBuilder.loadTexts: sapTlsArpReplyAgent.setDescription('The value of the object sapTlsArpReplyAgent specifies\n                     the status of the special ARP response mechanism in the\n                     system for ARP requests destined to static or dynamic hosts\n                     associated with this SAP.\n                     disabled: the ARP reply function is not operational\n                     enabled: the ARP reply function is enabled without\n                              subscriber identification.\n                     enabledWithSubscrIdent: the ARP reply function is enabled\n                                             with subscriber identification.')
sapTlsStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 40), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpException.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpException.setDescription('The value of the object sapTlsStpException indicates\n                     whether an STP exception condition is present on this\n                     Sap.\n                     - none : no exception condition found.\n                     - oneWayCommuniation : The neighbor RSTP peer on this link\n                                            is not able to detect our presence.\n                     - downstreamLoopDetected :A loop is detected on this link.')
sapTlsAuthenticationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 41), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsAuthenticationPolicy.setStatus('current')
if mibBuilder.loadTexts: sapTlsAuthenticationPolicy.setDescription('The value of the object sapTlsAuthenticationPolicy specifies\n                  which subscriber authentication policy  must  be applied when\n                  a DHCP msg is received on the interface.  The  authentication\n                  policies  must be defined  in  tmnxSubAuthPlcyTable. The policy\n                  will only be applied when sapTlsDhcpSnoop is enabled.')
sapTlsL2ptTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 42), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptTermination.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptTermination.setDescription("The value of the object sapTlsL2ptTermination specifies\n                     whether received L2 Protocol Tunnel pdu's are terminated\n                     on this port or sap")
sapTlsBpduTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("disabled", 2), ("pvst", 3), ("stp", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsBpduTranslation.setStatus('current')
if mibBuilder.loadTexts: sapTlsBpduTranslation.setDescription("The value of the object sapTlsBpduTranslation specifies\n                     whether received L2 Protocol Tunnel pdu's are\n                     translated before being sent out on this port or sap")
sapTlsStpRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 44), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpRootGuard.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpRootGuard.setDescription("The value of the object sapTlsStpRootGuard specifies\n                     whether this port is allowed to become STP root port.\n                     It corresponds to the parameter 'restrictedRole' in 802.1Q.\n                     If set, it can cause lack of spanning tree connectivity.")
sapTlsStpInsideRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInsideRegion.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInsideRegion.setDescription("The value of the object sapTlsStpInsideRegion indicates\n                     whether the network connected to the SAP is in the same\n                     MST region. It corresponds to the parameter 'infoInternal'\n                     in 802.1Q.")
sapTlsEgressMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 46), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsEgressMcastGroup.setStatus('current')
if mibBuilder.loadTexts: sapTlsEgressMcastGroup.setDescription('The value of the object sapTlsEgressMcastGroup specifies\n                     the Egress Multicast Group this SAP belongs to.')
sapTlsStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInMstBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpInMstBpdus.setDescription('The value of the object sapTlsStpInMstBpdus indicates\n                     the number of Multiple Spanning Tree (MST) BPDUs received\n                     on this SAP.')
sapTlsStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutMstBpdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpOutMstBpdus.setDescription('The value of the object sapTlsStpOutMstBpdus indicates\n                     the number of Multiple Spanning Tree (MST) BPDUs sent out\n                     on this SAP.')
sapTlsRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestProtSrcMac.setStatus('current')
if mibBuilder.loadTexts: sapTlsRestProtSrcMac.setDescription("The value of the object sapTlsRestProtSrcMac specifies\n                     how the agent will handle relearn requests for protected\n                     MAC addresses. When the value of this object is 'true'\n                     requests to relearn a protected MAC address will be\n                     ignored.\n                     In addition, if the value of sapTlsRestProtSrcMacAction\n                     is 'disable', then the SAP where the protected source\n                     MAC was seen will be brought operationally down.")
sapTlsRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestUnprotDstMac.setStatus('current')
if mibBuilder.loadTexts: sapTlsRestUnprotDstMac.setDescription("The value of the object sapTlsRestUnprotDstMac specifies\n                     how the system will forward packets destined to an\n                     unprotected MAC address. When the value of this object is\n                     'true' packets destined to an unprotected MAC address\n                     will be dropped.")
sapTlsStpRxdDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 51), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpRxdDesigBridge.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpRxdDesigBridge.setDescription('The value of the object sapTlsStpRxdDesigBridge\n                     indicates  the designated Bridge Identifier in the last\n                     BPDU which was received on this SAP. It identifies\n                     which bridge is connected to the SAP.')
sapTlsStpRootGuardViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpRootGuardViolation.setStatus('current')
if mibBuilder.loadTexts: sapTlsStpRootGuardViolation.setDescription('The value of the object sapTlsStpRootGuardViolation\n                     indicates whether there is a root-guard violation at the\n                     present time. This can only happen when sapTlsStpRootGuard\n                     is set to true.')
sapTlsShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvAction.setStatus('current')
if mibBuilder.loadTexts: sapTlsShcvAction.setDescription('The value of the object sapTlsShcvAction\n                     indicates whether any action should be triggered when\n                     the connectivity check fails.')
sapTlsShcvSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 54), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvSrcIp.setStatus('current')
if mibBuilder.loadTexts: sapTlsShcvSrcIp.setDescription('The value of the object sapTlsShcvSrcIp\n                     specifies the source IP address used when doing the\n                     connectivity check. The value 0.0.0.0 indicates that\n                     no host IP address is specified.')
sapTlsShcvSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 55), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvSrcMac.setStatus('current')
if mibBuilder.loadTexts: sapTlsShcvSrcMac.setDescription('The value of the object sapTlsShcvSrcMac\n                     specifies the MAC address used when doing the connectivity\n                     check. The value 0:0:0:0:0:0 indicates that no host MAC\n                     address is specified.')
sapTlsShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvInterval.setStatus('current')
if mibBuilder.loadTexts: sapTlsShcvInterval.setDescription('The value of the object sapTlsShcvInterval specifies\n                     the interval in minutes between connectivity checks.\n                     Zero means no connectivity checking.')
sapTlsMvplsMgmtMsti = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 57), MstiInstanceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtMsti.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMgmtMsti.setDescription('The value of the object sapTlsMvplsMgmtMsti indicates the\n                     MST-instance in the mVPLS instance specified in\n                     sapTlsMvplsMgmtService that is controlling this SAP. A\n                     value of 0 indicates the CIST.\n                     This object is only valid if sapTlsMvplsPruneState is\n                     different from notApplicable.')
sapTlsMacMoveNextUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 58), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMacMoveNextUpTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacMoveNextUpTime.setDescription("The value of the object sapTlsMacMoveNextUpTime counts down\n                     the time in seconds until a SAP that has been brought down\n                     due to exceeding the TLS svcTlsMacMoveMaxRate, sapOperFlags\n                     'relearnLimitExceeded', is automatically brought up again. \n                     When this value is 0xffff, the SAP will never be \n                     automatically brought up. The value is zero when \n                     sapOperStatus is 'up'.")
sapTlsMacMoveRateExcdLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMacMoveRateExcdLeft.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacMoveRateExcdLeft.setDescription('The value of the object sapTlsMacMoveRateExcdLeft\n                     counts down the number of times this SAP can exceed the \n                     TLS svcTlsMacMoveMaxRate and still be automatically\n                     brought up.')
sapTlsRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("alarm-only", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestProtSrcMacAction.setStatus('current')
if mibBuilder.loadTexts: sapTlsRestProtSrcMacAction.setDescription("The value of the object sapTlsRestProtSrcMacAction\n                     indicates the action to take whenever a relearn request\n                     for a protected MAC is received on a restricted SAP.\n                     When the value of this object is 'disable' the SAP\n                     will be placed in the operational down state, with the\n                     operating flag 'recProtSrcMac' set. When the value of\n                     this object is 'alarm-only', the SAP will be left up\n                     and only a notification, sapReceivedProtSrcMac,  will be \n                     generated.")
sapTlsL2ptForceBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptForceBoundary.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptForceBoundary.setDescription("The value of sapTlsL2ptForceBoundary specifies if\n                     sapTlsL2ptTermination is enforced for its managed SAP's.  \n                     Setting the value of the object sapTlsL2ptForceBoundary of\n                     a SAP in a Management VPLS to `true' forces all its \n                     managed SAP's to have sapTlsL2ptTermination enabled. This\n                     value can only be `true' if the SAP belongs to a \n                     management VPLS. \n                     If this SAP has managed SAP's already with\n                     sapTlsL2ptTermination disabled, it is not allowed\n                     to set sapTlsL2ptForceBoundary to `true'.")
sapTlsLimitMacMoveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 62), TlsLimitMacMoveLevel().clone('tertiary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsLimitMacMoveLevel.setStatus('current')
if mibBuilder.loadTexts: sapTlsLimitMacMoveLevel.setDescription('The value of the object sapTlsLimitMacMoveLevel\n                     specifies the hierarchy in which SAPs are\n                     blocked when a MAC-move limit is exceeded. When a MAC is\n                     moving among multiple SAPs or spoke-SDPs, the SAP bind\n                     or spoke-SDP bind with the lower level is blocked first.\n                     (tertiary is the lowest)')
sapTlsBpduTransOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("disabled", 2), ("pvst", 3), ("stp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsBpduTransOper.setStatus('current')
if mibBuilder.loadTexts: sapTlsBpduTransOper.setDescription('The value of the object sapTlsBpduTransOper indicates\n                     the operational bpdu encapsulation used for BPDU \n                     translated frames.')
sapTlsDefMsapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 64), TPolicyStatementNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDefMsapPolicy.setStatus('current')
if mibBuilder.loadTexts: sapTlsDefMsapPolicy.setDescription("The value of sapTlsDefMsapPolicy specifies the\n                     default Managed SAP policy to use to create\n                     Managed SAPs when the response from the Radius\n                     server does not specify a Managed SAP policy.\n\n                     The value of sapTlsDefMsapPolicy is only valid for\n                     a SAP with a sapSubType value of 'capture'.\n                     If the value is set to a non-empty string for a \n                     SAP with a sapSubType value other than 'capture',\n                     an 'inconsistentValue' error will be returned.\n\n                     The Managed SAP policy must be defined in\n                     msapPlcyTable, otherwise an 'inconsistentValue'\n                     error will be returned.")
sapTlsL2ptProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 65), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptProtocols.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptProtocols.setDescription("The value of the object sapTlsL2ptTermination specifies\n                     which L2 Protocol Tunnel pdu's are terminated\n                     on this port or sap")
sapTlsL2ptForceProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 66), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptForceProtocols.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptForceProtocols.setDescription("The value of the object sapTlsL2ptForceProtocols specifies\n                     which L2 Protocol Tunnel pdu's must be terminated by \n                     SAP's managed by this SAP.\n                     This object is only relevant if the value of the object \n                     sapTlsL2ptForceBoundary is 'true'.\n                     For every SAP managed by this SAP, each L2 protocol\n                     specified by sapTlsL2ptForceProtocols must be terminated,\n                     while other L2 protocols may or may not be terminated,\n                     depending on the value of sapTlsL2ptProtocols of that\n                     managed SAP.")
sapTlsPppoeMsapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 67), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsPppoeMsapTrigger.setStatus('current')
if mibBuilder.loadTexts: sapTlsPppoeMsapTrigger.setDescription("The value of sapTlsPppoeMsapTrigger specifies whether \n                     the receipt of PPPoE trigger packets on a VPLS SAP\n                     with a sapSubType value of 'capture' will result in\n                     a Radius authentication that will provide a service\n                     context and the creation of a SAP with a sapSubType\n                     value of 'managed'.\n\n                     An attempt to set the value sapTlsPppoeMsapTrigger to \n                     'true' on a SAP with sapSubType other than 'capture'\n                     will return an 'inconsistentValue' error.")
sapTlsDhcpMsapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 68), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpMsapTrigger.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpMsapTrigger.setDescription("The value of sapTlsDhcpMsapTrigger specifies whether\n                     the receipt of DHCP trigger packets on this VPLS SAP\n                     with a sapSubType value of 'capture' will result in\n                     a Radius authentication that will provide a service\n                     context and the creation of a SAP with a sapSubType\n                     value of 'managed'.\n\n                     An attempt to set the value sapTlsDhcpMsapTrigger to \n                     'true' on a SAP with sapSubType other than 'capture'\n                     will return an 'inconsistentValue' error.")
sapTlsMrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 69), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpJoinTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpJoinTime.setDescription('The value of sapTlsMrpJoinTime specifies a timer value in\n                    10ths of seconds which determines the maximum rate at\n                    which attribute join messages can be sent on the SAP.')
sapTlsMrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 60)).clone(30)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpLeaveTime.setDescription('The value of sapTlsMrpLeaveTime specifies a timer value in\n                    10ths of seconds which determines the amount of time a\n                    registered attribute is held in leave state before the\n                    registration is removed.')
sapTlsMrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(100)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpLeaveAllTime.setDescription('The value of sapTlsMrpLeaveAllTime specifies the a timer\n                    value in 10ths of seconds which determines the frequency\n                    where all attribute declarations on the SAP are all\n                    refreshed.')
sapTlsMrpPeriodicTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpPeriodicTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpPeriodicTime.setDescription('The value of sapTlsMrpPeriodicTime specifies a timer value\n                    in 10ths of seconds which determines the frequency of\n                    re-transmission of attribute declarations.')
sapTlsMrpPeriodicEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 73), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpPeriodicEnabled.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpPeriodicEnabled.setDescription('The value of sapTlsMrpPeriodicEnabled specifies whether\n                    re-transmission of attribute declarations is enabled.')
sapAtmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4), )
if mibBuilder.loadTexts: sapAtmInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapAtmInfoTable.setDescription('A table that contains ATM SAP information.')
sapAtmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapAtmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapAtmInfoEntry.setDescription('Information about a specific ATM SAP.')
sapAtmEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 10, 11))).clone(namedValues=NamedValues(("vcMultiplexRoutedProtocol", 1), ("vcMultiplexBridgedProtocol8023", 2), ("llcSnapRoutedProtocol", 7), ("multiprotocolFrameRelaySscs", 8), ("unknown", 10), ("llcSnapBridgedProtocol8023", 11))).clone('llcSnapRoutedProtocol')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmEncapsulation.setStatus('current')
if mibBuilder.loadTexts: sapAtmEncapsulation.setDescription('This object specifies the data encapsulation used\n                      over the AAL5 SSCS layer.  The definition references\n                      RFC 2684 Multiprotocol Encapsulation over ATM AAL5\n                      and to the ATM Forum LAN Emulation specification.')
sapAtmIngressTrafficDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 2), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmIngressTrafficDescIndex.setStatus('current')
if mibBuilder.loadTexts: sapAtmIngressTrafficDescIndex.setDescription('This object specifies the index of the ATM traffic\n                      descriptor in the ATM traffic data encapsulation used\n                      in for the ingress direction over the AAL5 SSCS layer.\n                      The definition references RFC 2684 Multiprotocol\n                      Encapsulation over ATM AAL5 and to the ATM Forum LAN\n                      Emulation specification.')
sapAtmEgressTrafficDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 3), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmEgressTrafficDescIndex.setStatus('current')
if mibBuilder.loadTexts: sapAtmEgressTrafficDescIndex.setDescription('This object specifies the index of the ATM traffic\n                      descriptor in the ATM traffic data encapsulation used\n                      in for the egress direction over the AAL5 SSCS layer.\n                      The definition references RFC 2684 Multiprotocol\n                      Encapsulation over ATM AAL5 and to the ATM Forum LAN\n                      Emulation specification.')
sapAtmOamAlarmCellHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 4), ServiceAdminStatus().clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamAlarmCellHandling.setStatus('current')
if mibBuilder.loadTexts: sapAtmOamAlarmCellHandling.setDescription('A value of up specifies that the OAM status of a pvc\n                      affects  the  sap  operational  status and OAM AIS/RDI\n                      cell generation upon a sap operational status of down.\n                      A value of down specifies that the OAM status of a pvc\n                      will   not   affect  the  operational  status  of  the\n                      associated   sap   and   no   OAM  AIS/RDI  cells  are\n                      generated.')
sapAtmOamTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 5), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamTerminate.setStatus('current')
if mibBuilder.loadTexts: sapAtmOamTerminate.setDescription("The sapAtmOamTerminate object specifies whether this\n                      SAP will act as an OAM termination point.\n                      If enabled, OAM cells will be sunk by the SAP and can\n                      affect the SAP's operational status (if\n                      sapAtmOamAlarmCellHandling is also enabled). Otherwise\n                      the OAM cells will be passed into the APIPE service.\n                      This object is only configurable for ATM SAPs that are\n                      part of an APIPE service SDU or VCC mode. If the \n                      sapPortId belongs to an Multi-Chassis APS port, the\n                      default value is up.")
sapAtmOamPeriodicLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamPeriodicLoopback.setStatus('current')
if mibBuilder.loadTexts: sapAtmOamPeriodicLoopback.setDescription('The sapAtmOamPeriodicLoopback object specifies whether\n                      this SAP will run periodic OAM loopbacks or not.  If\n                      enabled, an ATM OAM loopback cell will be transmitted\n                      every period as configured in tAtmSysOamLoopbackPeriod.\n                      If a response is not received and tAtmSysOamRetryDown\n                      consecutive retries also result in failure, the endpoint\n                      will transition to the eteAisLoc state.  Once in the\n                      eteAisLoc state, an ATM OAM loopback cell will be\n                      transmitted every period as configured in\n                      tAtmSysOamLoopbackPeriod. If a response is received for\n                      the periodic loopback and tAtmSysOamRetryUp consecutive\n                      retries also each receive a response, the endpoint will\n                      transition back to the up state.  This object is only\n                      configurable on IES or VPRN service endpoints.')
sapBaseStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6), )
if mibBuilder.loadTexts: sapBaseStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsTable.setDescription("A table that contains basic SAP statistics.\n                     In the descriptions below 'Pchip' refers\n                     to the Alcatel 7x50 SR series Packet Processing\n                     chip, while 'Qchip' refers to the Alcatel 7x50\n                     SR series QoS Queueing Engine chip.")
sapBaseStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEntry.setDescription('Basic statistics about a specific SAP.')
sapBaseStatsIngressPchipDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedPackets.setDescription('The number of packets dropped by the\n                     ingress Pchip due to: SAP state,\n                     ingress MAC, IP or IPv6 filter, same segment\n                     discard, bad checksum, etc.')
sapBaseStatsIngressPchipDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedOctets.setDescription('The number of octets dropped by the\n                     ingress Pchip due to: SAP state,\n                     ingress MAC, IP or IPv6 filter, same segment\n                     discard, bad checksum, etc.')
sapBaseStatsIngressPchipOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioPackets.setDescription('The number of high priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsIngressPchipOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioOctets.setDescription('The number of high priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsIngressPchipOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioPackets.setDescription('The number of low priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsIngressPchipOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioOctets.setDescription('The number of low priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsIngressQchipDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioPackets.setDescription('The number of high priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsIngressQchipDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioOctets.setDescription('The number of high priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsIngressQchipDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioPackets.setDescription('The number of low priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsIngressQchipDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioOctets.setDescription('The number of low priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsIngressQchipForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfPackets.setDescription('The number of in-profile packets\n                     (rate below CIR) forwarded by the\n                     ingress Qchip.')
sapBaseStatsIngressQchipForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfOctets.setDescription('The number of in-profile octets\n                     (rate below CIR) forwarded by the\n                     ingress Qchip.')
sapBaseStatsIngressQchipForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n                     (rate above CIR) forwarded by the\n                     ingress Qchip.')
sapBaseStatsIngressQchipForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n                     (rate above CIR) forwarded by the\n                     ingress Qchip.')
sapBaseStatsEgressQchipDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfPackets.setDescription('The number of in-profile packets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsEgressQchipDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfOctets.setDescription('The number of in-profile octets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsEgressQchipDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfPackets.setDescription('The number of out-of-profile packets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsEgressQchipDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfOctets.setDescription('The number of out-of-profile packets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapBaseStatsEgressQchipForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfPackets.setDescription('The number of in-profile packets\n                     (rate below CIR) forwarded by the\n                     egress Qchip.')
sapBaseStatsEgressQchipForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfOctets.setDescription('The number of in-profile octets\n                     (rate below CIR) forwarded by the\n                     egress Qchip.')
sapBaseStatsEgressQchipForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n                     (rate above CIR) forwarded by the\n                     egress Qchip.')
sapBaseStatsEgressQchipForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n                     (rate above CIR) forwarded by the\n                     egress Qchip.')
sapBaseStatsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 23), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsCustId.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsCustId.setDescription('The Customer ID for the associated service.')
sapBaseStatsIngressPchipOfferedUncoloredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredPackets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredPackets.setDescription('The number of uncolored packets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsIngressPchipOfferedUncoloredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredOctets.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredOctets.setDescription('The number of uncolored octets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapBaseStatsAuthenticationPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsDiscarded.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsDiscarded.setDescription('The number of DHCP packets discarded\n                     as result of authentication.')
sapBaseStatsAuthenticationPktsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsSuccess.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsSuccess.setDescription('The number of DHCP packets successfully authenticated.')
sapBaseStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: sapBaseStatsLastClearedTime.setDescription('The value of sapBaseStatsLastClearedTime indicates\n                     the sysUpTime when the counters in this table were\n                     last cleared.')
sapIngQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7), )
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setDescription('A table that contains ingress QoS queue SAP\n                     statistics.')
sapIngQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueId"))
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setDescription("Ingress statistics about a specific SAP's\n                     QoS queue.")
sapIngQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 1), TSapIngQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueId.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueId.setDescription('The index of the ingress QoS queue of\n                     this SAP.')
sapIngQosQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setDescription('The number of high priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosQueueStatsDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioPackets.setDescription('The number of high priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIngQosQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setDescription('The number of low priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosQueueStatsDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioPackets.setDescription('The number of low priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIngQosQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setDescription('The number of high priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosQueueStatsDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioOctets.setDescription('The number of high priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIngQosQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setDescription('The number of low priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosQueueStatsDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioOctets.setDescription('The number of low priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIngQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setDescription('The number of in-profile packets\n                     (rate below CIR) forwarded by the\n                     ingress Qchip.')
sapIngQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n                     (rate above CIR) forwarded by the\n                     ingress Qchip.')
sapIngQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setDescription('The number of in-profile octets\n                     (rate below CIR) forwarded by the\n                     ingress Qchip.')
sapIngQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n                     (rate above CIR) forwarded by the\n                     ingress Qchip.')
sapIngQosCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 14), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosCustId.setStatus('current')
if mibBuilder.loadTexts: sapIngQosCustId.setDescription('The Customer ID for the associated service.')
sapIngQosQueueStatsUncoloredPacketsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredPacketsOffered.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredPacketsOffered.setDescription('The number of uncolored packets offered to\n                     the ingress Qchip.')
sapIngQosQueueStatsUncoloredOctetsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredOctetsOffered.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredOctetsOffered.setDescription('The number of uncolored octets offered to\n                     the ingress Qchip.')
sapEgrQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8), )
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setDescription('A table that contains egress QoS queue SAP\n                     statistics.')
sapEgrQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueId"))
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setDescription("Egress statistics about a specific SAP's\n                     QoS queue.")
sapEgrQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 1), TSapEgrQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueId.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueId.setDescription('The index of the egress QoS queue of\n                     this SAP.')
sapEgrQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setDescription('The number of in-profile packets\n                     (rate below CIR) forwarded by the\n                     egress Qchip.')
sapEgrQosQueueStatsDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfPackets.setDescription('The number of in-profile packets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgrQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n                     (rate above CIR) forwarded by the\n                     egress Qchip.')
sapEgrQosQueueStatsDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfPackets.setDescription('The number of out-of-profile packets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgrQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setDescription('The number of in-profile octets\n                     (rate below CIR) forwarded by the\n                     egress Qchip.')
sapEgrQosQueueStatsDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfOctets.setDescription('The number of in-profile octets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgrQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n                     (rate above CIR) forwarded by the\n                     egress Qchip.')
sapEgrQosQueueStatsDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfOctets.setDescription('The number of out-of-profile octets\n                     discarded by the egress Qchip due\n                     to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgrQosCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 10), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosCustId.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosCustId.setDescription('The Customer ID for the associated service.')
sapIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9), )
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setDescription('A table that contains ingress QoS queue SAP\n                     statistics.')
sapIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setDescription("Ingress statistics about a specific SAP's\n                     QoS queue.")
sapIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedName.setDescription('The index of the ingress QoS scheduler of\n                     this SAP.')
sapIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets, as\n                     determined by the SAP ingress scheduler\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets, as\n                     determined by the SAP ingress scheduler\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 4), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedCustId.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedCustId.setDescription('The Customer ID for the associated service.')
sapEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10), )
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setDescription('A table that contains ingress QoS queue SAP\n                     statistics.')
sapEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setDescription("Egress statistics about a specific SAP's\n                     QoS queue.")
sapEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedName.setDescription('The index of the egress QoS scheduler of\n                     this SAP.')
sapEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets by the\n                     egress Qchip, as determined by the SAP\n                     egress scheduler policy.')
sapEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets by the\n                     egress Qchip, as determined by the SAP\n                     egress scheduler policy.')
sapEgrQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 4), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedCustId.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedCustId.setDescription('The Customer ID for the associated service.')
sapTlsManagedVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11), )
if mibBuilder.loadTexts: sapTlsManagedVlanListTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsManagedVlanListTable.setDescription('This table is used only for SAPs that are part\n                     of a management VPLS. It indicates for each SAP the\n                     ranges of associated VLANs that will be affected when\n                     the SAP changes state.')
sapTlsManagedVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMinVlanTag"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMaxVlanTag"))
if mibBuilder.loadTexts: sapTlsManagedVlanListEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsManagedVlanListEntry.setDescription('Each row specifies a range of VLANS associated\n                     with a SAP of a MVPLS. Ranges may contains overlapping\n                     sections only for Mvpls SAPs that belong to the same\n                     service.')
sapTlsMvplsMinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: sapTlsMvplsMinVlanTag.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMinVlanTag.setDescription('The value of sapTlsMvplsMinVlanTag specifies\n                     the left bound (i.e. min. value) of a range of VLANs\n                     that are associated with the Mvpls SAP.\n                     sapTlsMvplsMinVlanTag must be smaller than (or equal\n                     to) sapTlsMvplsMaxVlanTag.\n                     Special values are:\n                     0: this value is reserved for the null tag.\n                     4095: this value denotes the default SAP.')
sapTlsMvplsMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: sapTlsMvplsMaxVlanTag.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsMaxVlanTag.setDescription('The value of sapTlsMvplsMaxVlanTag specifies the\n                     right bound (i.e. max. value) of a range of VLANs that\n                     are associated with the Mvpls SAP.\n                     Special values are:\n                     0: this value is reserved for the null tag.\n                     4095: this value denotes the default SAP.')
sapTlsMvplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapTlsMvplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapTlsMvplsRowStatus.setDescription("The value of sapTlsMvplsRowStatus specifies\n                      the status of this row. The only values supported\n                      during a set operation are 'createAndGo' and\n                      'destroy'. A row (i.e. a range of VLAN tags) can be\n                      destroyed only if there are no SAPs defined in\n                      regular VPLSses in this range.")
sapAntiSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12), )
if mibBuilder.loadTexts: sapAntiSpoofTable.setStatus('current')
if mibBuilder.loadTexts: sapAntiSpoofTable.setDescription('The sapAntiSpoofTable contains information about\n                     anti-spoofing filters on a SAP.')
sapAntiSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofIpAddress"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofMacAddress"))
if mibBuilder.loadTexts: sapAntiSpoofEntry.setStatus('current')
if mibBuilder.loadTexts: sapAntiSpoofEntry.setDescription('An entry in the sapAntiSpoofTable.')
sapAntiSpoofIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapAntiSpoofIpAddress.setStatus('current')
if mibBuilder.loadTexts: sapAntiSpoofIpAddress.setDescription('The value of sapAntiSpoofIpAddress indicates the IP\n                     address for which this table entry contains information.')
sapAntiSpoofMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapAntiSpoofMacAddress.setStatus('current')
if mibBuilder.loadTexts: sapAntiSpoofMacAddress.setDescription('The value of sapAntiSpoofMacAddress indicates the MAC\n                     address for which this table entry contains information.')
sapStaticHostTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13), )
if mibBuilder.loadTexts: sapStaticHostTable.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostTable.setDescription('The sapStaticHostTable is used to configure static hosts\n                     on a SAP.')
sapStaticHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostIpAddress"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostMacAddress"))
if mibBuilder.loadTexts: sapStaticHostEntry.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostEntry.setDescription('Each row entry represents information on a statically\n                     configured host. Entries can be created and deleted via\n                     SNMP SET operations.')
sapStaticHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostRowStatus.setDescription('The value of the object sapStaticHostRowStatus controls\n                     the creation and deletion of rows in this table.')
sapStaticHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: sapStaticHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostIpAddress.setDescription('The value of the object sapStaticHostIpAddress specifies\n                     the IP address associated with this static host. The value\n                     0.0.0.0 indicates that no host IP address is specified.')
sapStaticHostMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 3), MacAddress())
if mibBuilder.loadTexts: sapStaticHostMacAddress.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostMacAddress.setDescription('The value of the object sapStaticHostMacAddress specifies\n                     the MAC address associated with this static host. The\n                     value 0:0:0:0:0:0 indicates that no host MAC address is\n                     specified.')
sapStaticHostSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubscrIdent.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostSubscrIdent.setDescription('The value of the object sapStaticHostSubscrIdent specifies\n                     the subscriber identification for this static host.')
sapStaticHostSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 5), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubProfile.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostSubProfile.setDescription('The value of the object sapStaticHostSubProfile specifies\n                     the subscriber profile for this static host. The specified\n                     subscriber profile needs to exists in the\n                     TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubProfileTable.')
sapStaticHostSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 6), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSlaProfile.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostSlaProfile.setDescription('The value of the object sapStaticHostSlaProfile specifies\n                     the SLA profile for this static host. The specified\n                     SLA profile needs to exists in the\n                     TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSLAProfileTable.')
sapStaticHostShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvOperState.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostShcvOperState.setDescription('The value of the object sapStaticHostShcvOperState\n                     gives the state of the subscriber host connectivity\n                     check for this static host.')
sapStaticHostShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvChecks.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostShcvChecks.setDescription('The value of the object sapStaticHostShcvChecks specifies\n                     the number of connectivity checks for this static host.')
sapStaticHostShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvReplies.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostShcvReplies.setDescription('The value of the object sapStaticHostShcvReplies specifies\n                     the number of host replies for this static host.')
sapStaticHostShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvReplyTime.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostShcvReplyTime.setDescription('The value of the object sapStaticHostShcvReplyTime\n                     gives the timestamp of the last successful connectivity\n                     check for this static host.')
sapStaticHostDynMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostDynMacAddress.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostDynMacAddress.setDescription('The value of the object sapStaticHostDynMacAddress gives\n                     the MAC address learned via ARP in case this is an IP-only\n                     static host (sapStaticHostMacAddress is set to\n                     0:0:0:0:0:0).\n                     The value 0:0:0:0:0:0 indicates that no MAC address is\n                     learned yet.')
sapStaticHostRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 12), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostRetailerSvcId.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostRetailerSvcId.setDescription('The value of the object sapStaticHostRetailerSvcId\n                     indicates the service ID of the retailer VPRN service\n                     to which this static host belongs. When this object is\n                     non zero, the static host belongs to a retailer VPRN.')
sapStaticHostRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostRetailerIf.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostRetailerIf.setDescription('The value of the object sapStaticHostRetailerIf indicates\n                     the interface index of the retailer VPRN interface to which\n                     this static host belongs. When this object is non zero,\n                     the static host belongs to a retailer VPRN.')
sapStaticHostFwdingState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 14), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostFwdingState.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostFwdingState.setDescription("The value of sapStaticHostFwdingState indicates the\n                     forwarding state of this static host. When the value\n                     is 'outOfService', host traffic is not forwarded.\n                     When it is 'inService', host traffic is forwarded.")
sapStaticHostAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostAncpString.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostAncpString.setDescription('The value of sapStaticHostAncpString specifies\n                     the ancp-string associated to this SAP host.')
sapStaticHostSubIdIsSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubIdIsSapId.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostSubIdIsSapId.setDescription('The value of the object sapStaticHostSubIdIsSapId\n                     specifies whether the SAP-id is taken as subscriber\n                     identification for this static host.')
sapStaticHostAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 17), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostAppProfile.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostAppProfile.setDescription('The value of sapStaticHostAppProfile specifies\n                     the application profile for this static host. The\n                     specified application profile needs to exist in the\n                     TIMETRA-BSX-MIB::tmnxBsxAppProfTable.')
sapStaticHostIntermediateDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostIntermediateDestId.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostIntermediateDestId.setDescription('The value of sapStaticHostIntermediateDestId specifies\n                     to which intermediate destination (for example a DSLAM)\n                     this host belongs.')
sapTlsDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14), )
if mibBuilder.loadTexts: sapTlsDhcpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpInfoTable.setDescription('sapTlsDhcpInfoTable  contains  DHCP information related\n                     to a TLS  SAP.  This table complements sapTlsInfoTable,\n                     and contains an entry for each Tls SAP. Rows in this\n                     table are created and deleted automatically by the system.')
sapTlsDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsDhcpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpInfoEntry.setDescription(' DHCP specific information for a TLS SAP.')
sapTlsDhcpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpAdminState.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpAdminState.setDescription("The value of the object sapTlsDhcpAdminState specifies\n                     the overall enable/disable state of all DHCP related\n                     actions  on  this  Sap. The value 'disabled' allows\n                     the user to configure  individual DHCP commands but\n                     administratively disable them.")
sapTlsDhcpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 2), ServObjDesc().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpDescription.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpDescription.setDescription('The value of the object sapTlsDhcpDescription specifies\n                     a user provided description for DHCP on this Sap.\n                     It consists of any printable, seven-bit ASCII characters\n                     up to 80 characters in length.')
sapTlsDhcpSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 3), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpSnoop.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpSnoop.setDescription('The value of the object sapTlsDhcpSnoop specifies\n                     the enable/disable state for DHCP snooping on this Sap.\n                     Note that in order for snooping to be enabled\n                     the object sapTlsDhcpAdminState must also have the\n                     value enabled.')
sapTlsDhcpLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpLeasePopulate.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpLeasePopulate.setDescription('The value of the object sapTlsDhcpLeasePopulate specifies\n                     the maximum number of DHCP lease states allowed on this\n                     SAP.')
sapTlsDhcpOperLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpOperLeasePopulate.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpOperLeasePopulate.setDescription('The value of the object sapTlsDhcpOperLeasePopulate\n                     indicates the number of DHCP lease states currently\n                     allocated on this SAP.')
sapTlsDhcpInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3))).clone('keep')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpInfoAction.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpInfoAction.setDescription("The value of the object sapTlsDhcpInfoAction specifies\n                     the DHCP option reforwarding policy:\n                     'replace' - replace existing information with\n                                 configured information\n                     'drop'    - discard messages with existing relay\n                                 information if the option-82 information\n                                 is also present.\n                     'keep'    - retain the existing relay information.")
sapTlsDhcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("asciiTuple", 1), ("vlanAsciiTuple", 2))).clone('asciiTuple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpCircuitId.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpCircuitId.setDescription("The value of the object sapTlsDhcpCircuitId specifies\n                     whether or not the circuit-id suboption is present, and if\n                     it is present what information goes in it:\n                     - 'none'          the circuit-id suboption will not be part\n                                       of the information option (Option 82).\n                     - 'asciiTuple'    the ASCII-encoded  concatenated tuple\n                                       consisting of the\n                                          - access-node-identifier\n                                          - service-id\n                                          - interface-name\n                                       is used.\n                    - 'vlanAsciiTuple' the format will include VLAN-id and dot1p\n                                       bits in addition to what is included in \n                                       ascii-tuple already.  The format is \n                                       supported on dot1q and qinq encapsulated \n                                       ports only.  Thus, when the option 82 \n                                       bits are stripped, dot1p bits will be \n                                       copied to the Ethernet header of an \n                                       outgoing packet.")
sapTlsDhcpRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mac", 2), ("remote-id", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpRemoteId.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpRemoteId.setDescription("The value of the object sapTlsDhcpRemoteId specifies\n                     what information goes into the remote-id suboption in\n                     the DHCP Relay packet.\n                     If the value of this object is set to 'none',\n                     the remote-id suboption will not be part of the\n                     information option (Option 82).\n                     If the value of this object is set to 'mac',\n                     the MAC address of the remote end is encoded in the\n                     suboption.\n                     If the value of this object is set to 'remote-id',\n                     sapTlsDhcpRemoteIdString will represent the remote-id.\n                     By default, the remote-id value is none.")
sapTlsDhcpRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpRemoteIdString.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpRemoteIdString.setDescription("The value of the object sapTlsDhcpRemoteIdString specifies\n                     the remote-id.  This object exists only if \n                     sapTlsDhcpRemoteId has a value of 'remote-id'.")
sapTlsDhcpProxyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyAdminState.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpProxyAdminState.setDescription("The value of sapTlsDhcpProxyAdminState specifies the \n                     desired administrative state of the proxy server on this\n                     interface.\n                     \n                     Note that in order for the proxy server to be enabled,\n                     the value of sapTlsDhcpAdminState must also be 'enabled'.")
sapTlsDhcpProxyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyServerAddr.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpProxyServerAddr.setDescription('The value of sapTlsDhcpProxyServerAddr specifies \n                     the IP address which will be used as the source address\n                     of the emulated DHCP server in the context of \n                     this VPLS SAP.\n                     \n                     This address is mandatory for the proxy server capability\n                     and it should be in the context of the subnet represented\n                     by this VPLS.')
sapTlsDhcpProxyLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 315446399), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyLeaseTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpProxyLeaseTime.setDescription('The value of sapTlsDhcpProxyLeaseTime specifies in seconds\n                     how long a DHCP client is allowed to use the offered IP \n                     address.\n                    \n                     Value 0 means the lease time provided by a RADIUS or\n                     an upstream DHCP server will not be overridden. A lease\n                     time of 7 days is used when RADIUS does not provide \n                     a lease time.')
sapTlsDhcpProxyLTRadiusOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyLTRadiusOverride.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpProxyLTRadiusOverride.setDescription("The value of sapTlsDhcpProxyLTRadiusOverride specifies\n                     whether or not the lease time provided by the RADIUS \n                     server is presented to the DHCP client.\n\n                     By default the proxy-server will always make use of \n                     sapTlsDhcpProxyLeaseTime, regardless of what lease time \n                     information is provided from the RADIUS server. \n                     When sapTlsDhcpProxyLTRadiusOverride is set to 'true', the\n                     proxy-server will use the lease time information provided\n                     by the RADIUS server, regardless of the configured one.")
sapTlsDhcpVendorIncludeOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 14), Bits().clone(namedValues=NamedValues(("systemId", 0), ("clientMac", 1), ("serviceId", 2), ("sapId", 3))).clone(namedValues=NamedValues(("systemId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpVendorIncludeOptions.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpVendorIncludeOptions.setDescription("The value of sapTlsDhcpVendorIncludeOptions specifies\n                     what is encoded in the Alcatel vendor specific\n                     sub-option of option 82.\n\n                     The value of this object is only used when\n                     sapTlsDhcpInfoAction is 'replace'.")
sapTlsDhcpVendorOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpVendorOptionString.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpVendorOptionString.setDescription("The value of sapTlsDhcpVendorOptionString specifies the\n                     string that goes into the Alcatel vendor specific\n                     sub-option of option 82.\n\n                     This string is only used when sapTlsDhcpInfoAction is set \n                     to 'replace'.")
sapTlsDhcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15), )
if mibBuilder.loadTexts: sapTlsDhcpStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsTable.setDescription('sapTlsDhcpStatsTable contains DHCP statistics related\n                     to  a TLS SAP. This table complements sapTlsInfoTable,\n                     and  contains  an entry for each Tls SAP. Rows in this\n                     table  are  created  and  deleted automatically by the\n                     system.')
sapTlsDhcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsDhcpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsEntry.setDescription(' DHCP statistics for a TLS SAP.')
sapTlsDhcpStatsClntSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntSnoopdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsClntSnoopdPckts.setDescription('The value of the object sapTlsDhcpStatsClntSnoopdPckts\n                     indicates the number of  DHCP client packets that have\n                     been snooped on this SAP.')
sapTlsDhcpStatsSrvrSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrSnoopdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrSnoopdPckts.setDescription('The value of the object sapTlsDhcpStatsSrvrSnoopdPckts\n                     indicates the number of  DHCP server packets that have\n                     been snooped on this SAP.')
sapTlsDhcpStatsClntForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntForwdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsClntForwdPckts.setDescription('The value of the object sapTlsDhcpStatsClntForwdPckts\n                     indicates the number  of  DHCP  client  packets  that\n                     have been forwarded on this SAP.')
sapTlsDhcpStatsSrvrForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrForwdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrForwdPckts.setDescription('The value of the object sapTlsDhcpStatsSrvrForwdPckts\n                     indicates the number of  DHCP  server  packets  that have\n                     been forwarded on this SAP.')
sapTlsDhcpStatsClntDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntDropdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsClntDropdPckts.setDescription('The value of the object sapTlsDhcpStatsClntDropdPckts\n                     indicates the number of  DHCP client packets that have\n                     been dropped on this SAP.')
sapTlsDhcpStatsSrvrDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrDropdPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrDropdPckts.setDescription('The value of the object sapTlsDhcpStatsSrvrDropdPckts\n                     indicates the number of  DHCP server packets that have\n                     been dropped on this SAP.')
sapTlsDhcpStatsClntProxRadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxRadPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxRadPckts.setDescription('The value of the object sapTlsDhcpStatsClntProxRadPckts\n                     indicates the number of DHCP client packets that have\n                     been proxied on this SAP based on data received from a\n                     RADIUS server.')
sapTlsDhcpStatsClntProxLSPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxLSPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxLSPckts.setDescription('The value of the object sapTlsDhcpStatsClntProxLSPckts\n                     indicates the number of DHCP client packets that have\n                     been proxied on this SAP based on a lease state. The\n                     lease itself can have been obtained from a DHCP or RADIUS\n                     server. This is the so called lease split functionality.')
sapTlsDhcpStatsGenReleasePckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsGenReleasePckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsGenReleasePckts.setDescription('The value of the object sapTlsDhcpStatsGenReleasePckts\n                     indicates the number of DHCP RELEASE messages spoofed on\n                     this SAP to the DHCP server.')
sapTlsDhcpStatsGenForceRenPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsGenForceRenPckts.setStatus('current')
if mibBuilder.loadTexts: sapTlsDhcpStatsGenForceRenPckts.setDescription('The value of the object sapTlsDhcpStatsGenForceRenPckts\n                     indicates the number of DHCP FORCERENEW messages spoofed\n                     on this SAP to the DHCP clients.')
sapTlsDhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16), )
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateTable.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateTable.setDescription('sapTlsDhcpLeaseStateTable contains DHCP lease state info\n                     for a TLS SAP. This table complements sapTlsInfoTable,\n                     and contains an entry for each Tls SAP. Rows in this table\n                     are created and deleted automatically by the system.\n                     The content of this table is moved to the\n                     svcDhcpLeaseStateTable.')
sapTlsDhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateCiAddr"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateChAddr"))
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateEntry.setDescription('DHCP Lease State information on a TLS SAP.')
sapTlsDhcpLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 1), IpAddress())
if mibBuilder.loadTexts: sapTlsDhcpLseStateCiAddr.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLseStateCiAddr.setDescription('The value of the object sapTlsDhcpLseStateCiAddr indicates\n                     the IP address of the DHCP lease state.')
sapTlsDhcpLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 2), MacAddress())
if mibBuilder.loadTexts: sapTlsDhcpLseStateChAddr.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLseStateChAddr.setDescription('The value of the object sapTlsDhcpLseStateChAddr indicates\n                     the MAC address of the DHCP lease state.')
sapTlsDhcpLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStateRemainLseTime.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLseStateRemainLseTime.setDescription('The value of the object sapTlsDhcpLseStateRemainLseTime\n                     indicates the remaining lease time of the Ip address of\n                     the DHCP lease state.\n                     This object was made obsolete in the 4.0 release.')
sapTlsDhcpLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStateOption82.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLseStateOption82.setDescription('The value of the object sapTlsDhcpLseStateOption82\n                     indicates the content of the Option82 for this DHCP\n                     lease state.\n                     This object was made obsolete in the 4.0 release.')
sapTlsDhcpLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStatePersistKey.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDhcpLseStatePersistKey.setDescription('The value of the object sapTlsDhcpLseStatePersistKey\n                     indicates a key value that can be used to track this lease\n                     state in the persistence file.\n                     This object was made obsolete in the 4.0 release.')
sapPortIdIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17), )
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsTable.setDescription("The sapPortIdIngQosSchedStatsTable contains ingress QoS\n         queue SAP statistics. This table is used when the SAP\n         is  a CCAG or LAG in 'link' mode, or an APS.")
sapPortIdIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngPortId"))
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsEntry.setDescription("Each entry represents the ingress statistics about a\n                     specific SAP's QoS queue. Entries are created when\n                     a scheduler policy is applied to a SAP.")
sapPortIdIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapPortIdIngQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedName.setDescription('The value of sapPortIdIngQosSchedName is used as an index\n                     of the ingress QoS scheduler of this SAP.')
sapPortIdIngPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: sapPortIdIngPortId.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngPortId.setDescription("The value of sapPortIdIngPortId is used\n                     as an index of the ingress QoS scheduler of this SAP. When\n                     the SAP is an aps/ccag/lag in 'link' mode, this object is\n                     the TmnxPortID of the member-port on which the scheduler is\n                     applied.")
sapPortIdIngQosSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdPkts.setDescription('The value of sapPortIdIngQosSchedFwdPkts indicates\n                     the number of forwarded packets, as determined by the SAP\n                     ingress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapPortIdIngQosSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdOctets.setDescription('The value of sapPortIdIngQosSchedFwdOctets indicates\n                     the number of forwarded octets,as determined by the SAP\n                     ingress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapPortIdIngQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedCustId.setStatus('current')
if mibBuilder.loadTexts: sapPortIdIngQosSchedCustId.setDescription('The value of sapPortIdIngQosSchedCustId indicates the\n                     Customer ID for the associated service.')
sapPortIdEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18), )
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsTable.setDescription("The sapPortIdEgrQosSchedStatsTable contains egress QoS\n                     queue SAP statistics. This table is used when the SAP\n                     is  a CCAG or LAG in 'link' mode, or an APS.")
sapPortIdEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrPortId"))
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsEntry.setDescription("Each entry represents the egress statistics about a\n                     specific SAP's QoS queue. Entries are created when\n                     a scheduler policy is applied to a SAP.")
sapPortIdEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapPortIdEgrQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedName.setDescription('The value of sapPortIdEgrQosSchedName is used as an index\n                     of the egress QoS scheduler of this SAP.')
sapPortIdEgrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: sapPortIdEgrPortId.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrPortId.setDescription("The value of sapPortIdEgrPortId is used\n                     as an index of the egress QoS scheduler of this SAP. When\n                     the SAP is an aps/ccag/lag in 'link' mode, this object is\n                     the TmnxPortID of the member-port on which the scheduler is\n                     applied.")
sapPortIdEgrQosSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdPkts.setDescription('The value of sapPortIdEgrQosSchedFwdPkts indicates\n                     the number of forwarded packets, as determined by the SAP\n                     egress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapPortIdEgrQosSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdOctets.setDescription('The value of sapPortIdEgrQosSchedFwdOctets indicates\n                     the number of forwarded octets,as determined by the SAP\n                     egress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapPortIdEgrQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedCustId.setStatus('current')
if mibBuilder.loadTexts: sapPortIdEgrQosSchedCustId.setDescription('The value of sapPortIdEgrQosSchedCustId indicates the\n                     Customer ID for the associated service.')
sapIngQosQueueInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19), )
if mibBuilder.loadTexts: sapIngQosQueueInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueInfoTable.setDescription('This table is used to override the base parameters\n                     of a queue, as defined in the associated SAP\n                     ingress QoS policy.')
sapIngQosQueueInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQId"))
if mibBuilder.loadTexts: sapIngQosQueueInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueInfoEntry.setDescription('Override values for the specified SAP ingress QoS\n                     queue. These values override the corresponding ones\n                     specified in the associated SAP ingress QoS policy.')
sapIngQosQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 1), TIngressQueueId())
if mibBuilder.loadTexts: sapIngQosQId.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQId.setDescription('The value of sapIngQosQId indicates the ID of the\n                     queue whose parameters are to be overridden.')
sapIngQosQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQRowStatus.setDescription('The value of sapIngQosQRowStatus controls the creation\n                     and deletion of rows in this table.')
sapIngQosQLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQLastMgmtChange.setDescription('The value of sapIngQosQLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
sapIngQosQOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 4), TQosQueueAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQOverrideFlags.setDescription("The value of sapIngQosQOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this queue. Clearing a given flag\n                     will return the corresponding overridden attribute\n                     to the value defined on the SAP's ingress QoS policy.")
sapIngQosQCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 5), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQCBS.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQCBS.setDescription('The value of sapIngQosQCBS specifies the amount of\n                     reserved buffer space (in kilo bytes) for this queue.')
sapIngQosQMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 6), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQMBS.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQMBS.setDescription('The value of sapIngQosQMBS specifies the maximum\n                     amount of buffer space (in kilo bytes) allowed for\n                     this queue.')
sapIngQosQHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 7), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQHiPrioOnly.setDescription('The value of sapIngQosQHiPrioOnly specifies the\n                     percentage of buffer space for this queue, used\n                     exclusively by high priority packets.')
sapIngQosQCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 8), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQCIRAdaptation.setDescription('The value of sapIngQosQCIRAdaptation specifies the\n                     criteria to use to compute the operational CIR value\n                     for this queue, while maintaining a minimum offset.')
sapIngQosQPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 9), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQPIRAdaptation.setDescription('The value of sapIngQosQPIRAdaptation specifies the\n                     criteria to use to compute the operational PIR value\n                     for this queue, while maintaining a minimum offset.')
sapIngQosQAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 10), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQAdminPIR.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQAdminPIR.setDescription('The value of sapIngQosQAdminPIR specifies the desired\n                     PIR value for this queue.')
sapIngQosQAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 11), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQAdminCIR.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQAdminCIR.setDescription('The value of sapIngQosQAdminCIR specifies the desired\n                     CIR value for this queue.')
sapEgrQosQueueInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20), )
if mibBuilder.loadTexts: sapEgrQosQueueInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueInfoTable.setDescription('This table is used to override the base parameters\n                     of a queue, as defined in the associated SAP\n                     egress QoS policy.')
sapEgrQosQueueInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQId"))
if mibBuilder.loadTexts: sapEgrQosQueueInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueInfoEntry.setDescription('Override values for the specified SAP egress QoS\n                     queue. These values override the corresponding ones\n                     specified in the associated SAP egress QoS policy.')
sapEgrQosQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 1), TEgressQueueId())
if mibBuilder.loadTexts: sapEgrQosQId.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQId.setDescription('The value of sapEgrQosQId indicates the ID of the\n                     queue whose parameters are to be overridden.')
sapEgrQosQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQRowStatus.setDescription('The value of sapEgrQosQRowStatus controls the creation\n                     and deletion of rows in this table.')
sapEgrQosQLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQLastMgmtChange.setDescription('The value of sapEgrQosQLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
sapEgrQosQOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 4), TQosQueueAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQOverrideFlags.setDescription("The value of sapEgrQosQOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this queue. Clearing a given flag\n                     will return the corresponding overridden attribute\n                     to the value defined on the SAP's ingress QoS policy.")
sapEgrQosQCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 5), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQCBS.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQCBS.setDescription('The value of sapEgrQosQCBS specifies the amount of\n                     reserved buffer space (in kilo bytes) for this queue.')
sapEgrQosQMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 6), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQMBS.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQMBS.setDescription('The value of sapEgrQosQMBS specifies the maximum\n                     amount of buffer space (in kilo bytes) allowed for\n                     this queue.')
sapEgrQosQHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 7), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQHiPrioOnly.setDescription('The value of sapEgrQosQHiPrioOnly specifies the\n                     percentage of buffer space for this queue, used\n                     exclusively by high priority packets.')
sapEgrQosQCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 8), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQCIRAdaptation.setDescription('The value of sapEgrQosQCIRAdaptation specifies the\n                     criteria to use to compute the operational CIR value\n                     for this queue, while maintaining a minimum offset.')
sapEgrQosQPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 9), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQPIRAdaptation.setDescription('The value of sapEgrQosQPIRAdaptation specifies the\n                     criteria to use to compute the operational PIR value\n                     for this queue, while maintaining a minimum offset.')
sapEgrQosQAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 10), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAdminPIR.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQAdminPIR.setDescription('The value of sapEgrQosQAdminPIR specifies the desired\n                     PIR value for this queue.')
sapEgrQosQAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 11), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAdminCIR.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQAdminCIR.setDescription('The value of sapEgrQosQAdminCIR specifies the desired\n                     CIR value for this queue.')
sapEgrQosQAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAvgOverhead.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQAvgOverhead.setDescription('The value of sapEgrQosQAvgOverhead specifies the \n                     encapsulation overhead, in hundredths of a percent,  \n                     used to translate packet-based rate to frame-based \n                     rate and vice versa.')
sapIngQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21), )
if mibBuilder.loadTexts: sapIngQosSchedInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedInfoTable.setDescription('This table is used to override the base parameters\n                     of a virtual scheduler, as defined in the associated\n                     SAP ingress scheduler policy.')
sapIngQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSName"))
if mibBuilder.loadTexts: sapIngQosSchedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedInfoEntry.setDescription('Override values for the specified SAP ingress virtual\n                     scheduler. These values override the corresponding\n                     ones specified in the associated SAP ingress scheduler\n                     policy.')
sapIngQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSName.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSName.setDescription('The value of sapIngQosSName indicates the name of\n                     the virtual scheduler whose parameters are to be\n                     overridden.')
sapIngQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSRowStatus.setDescription('The value of sapIngQosSRowStatus controls the creation\n                     and deletion of rows in this table.')
sapIngQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSLastMgmtChange.setDescription('The value of sapIngQosSLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
sapIngQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSOverrideFlags.setDescription("The value of sapIngQosSOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this virtual scheduler. Clearing a\n                     given flag will return the corresponding overridden\n                     attribute to the value defined on the SAP's ingress\n                     scheduler policy.")
sapIngQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSPIR.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSPIR.setDescription('The value of sapIngQosSPIR specifies the desired\n                     PIR value for this virtual scheduler.')
sapIngQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSCIR.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSCIR.setDescription('The value of sapIngQosSCIR specifies the desired\n                     CIR value for this virtual scheduler.')
sapIngQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSSummedCIR.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSSummedCIR.setDescription("The value of sapIngQosSSummedCIR specifies if the CIR\n                     should be used as the summed CIR values of the children\n                     schedulers or queues. If set to 'true', the applicable\n                     scheduler CIR (sapIngQosSCIR) loses its meaning.")
sapEgrQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22), )
if mibBuilder.loadTexts: sapEgrQosSchedInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedInfoTable.setDescription('This table is used to override the base parameters\n                     of a virtual scheduler, as defined in the associated\n                     SAP egress scheduler policy.')
sapEgrQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSName"))
if mibBuilder.loadTexts: sapEgrQosSchedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedInfoEntry.setDescription('Override values for the specified SAP egress virtual\n                     scheduler. These values override the corresponding\n                     ones specified in the associated SAP egress scheduler\n                     policy.')
sapEgrQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSName.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSName.setDescription('The value of sapEgrQosSName indicates the name of\n                     the virtual scheduler whose parameters are to be\n                     overridden.')
sapEgrQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSRowStatus.setDescription('The value of sapEgrQosSRowStatus controls the creation\n                     and deletion of rows in this table.')
sapEgrQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSLastMgmtChange.setDescription('The value of sapEgrQosSLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
sapEgrQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSOverrideFlags.setDescription("The value of sapEgrQosSOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this virtual scheduler. Clearing a\n                     given flag will return the corresponding overridden\n                     attribute to the value defined on the SAP's egress\n                     scheduler policy.")
sapEgrQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSPIR.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSPIR.setDescription('The value of sapEgrQosSPIR specifies the desired\n                     PIR value for this virtual scheduler.')
sapEgrQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSCIR.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSCIR.setDescription('The value of sapEgrQosSCIR specifies the desired\n                     CIR value for this virtual scheduler.')
sapEgrQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSSummedCIR.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSSummedCIR.setDescription("The value of sapEgrQosSSummedCIR specifies if the CIR\n                     should be used as the summed CIR values of the children\n                     schedulers or queues. If set to 'true', the applicable\n                     scheduler CIR (sapEgrQosSCIR) loses its meaning.")
sapSubMgmtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23), )
if mibBuilder.loadTexts: sapSubMgmtInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtInfoTable.setDescription('A table that contains SAP subscriber management\n                     information.')
sapSubMgmtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapSubMgmtInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtInfoEntry.setDescription('Subscriber management specific information about a SAP.')
sapSubMgmtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtAdminStatus.setDescription('The value of sapSubMgmtAdminStatus specifies whether\n                     enhanced subscriber management is enabled on this SAP.')
sapSubMgmtDefSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 2), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubProfile.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtDefSubProfile.setDescription("The value of sapSubMgmtDefSubProfile specifies the default\n                     subscriber profile applicable on this SAP. The\n                     corresponding profile is defined in\n                     TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubProfileTable.\n\n                     A value of 'default' is not allowed for this object.")
sapSubMgmtDefSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 3), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSlaProfile.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtDefSlaProfile.setDescription('The value of sapSubMgmtDefSlaProfile specifies the default\n                     SLA profile applicable on this SAP. The corresponding\n                     profile is defined in\n                     TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSLAProfileTable.')
sapSubMgmtSubIdentPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 4), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtSubIdentPolicy.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtSubIdentPolicy.setDescription('The value of sapSubMgmtSubIdentPolicy specifies the\n                     subscriber identification policy applicable on this SAP.\n                     The corresponding policy is defined in\n                     TIMETRA-SUBSCRIBER-MGMT-MIB::tmnxSubIdentPolicyTable.')
sapSubMgmtSubscriberLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtSubscriberLimit.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtSubscriberLimit.setDescription("The value of sapSubMgmtSubscriberLimit specifies the\n                     maximum number of subscribers allowed for this SAP.\n\n                     If the value is 0, there is no limit. Only if the value is\n                     1, the 'single-sub-parameters' defined with objects\n                     sapSubMgmtProfiledTrafficOnly,\n                     sapSubMgmtNonSubTrafficSubProf and\n                     sapSubMgmtNonSubTrafficSlaProf are meaningful.")
sapSubMgmtProfiledTrafficOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtProfiledTrafficOnly.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtProfiledTrafficOnly.setDescription("The value of sapSubMgmtProfiledTrafficOnly specifies\n                     whether only profiled traffic is applicable for this SAP.\n                     If set to 'true', all SAP queues will be deleted.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtSubscriberLimit is set to 1.")
sapSubMgmtNonSubTrafficSubIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubIdent.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubIdent.setDescription('The value of sapSubMgmtNonSubTrafficSubIdent specifies the\n                     subscriber identification applicable on this SAP for all\n                     non-subscriber traffic.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtSubscriberLimit is set to 1.')
sapSubMgmtNonSubTrafficSubProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 8), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubProf.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubProf.setDescription('The value of sapSubMgmtNonSubTrafficSubProf specifies the\n                     subscriber profile applicable on this SAP for all\n                     non-subscriber traffic.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtSubscriberLimit is set to 1.')
sapSubMgmtNonSubTrafficSlaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 9), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSlaProf.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSlaProf.setDescription('The value of sapSubMgmtNonSubTrafficSlaProf specifies the\n                     SLA profile applicable on this SAP for all non-subscriber\n                     traffic.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtSubscriberLimit is set to 1.')
sapSubMgmtMacDaHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtMacDaHashing.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtMacDaHashing.setDescription("The value of sapSubMgmtMacDaHashing specifies whether\n                     subscriber traffic egressing a LAG SAP has its egress LAG\n                     link selected by a function of the MAC destination address\n                     instead of subscriber id.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtAdminStatus is set to 'enabled' and can only\n                     be configured for TLS services.")
sapSubMgmtDefSubIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSapId", 1), ("useString", 2))).clone('useString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubIdent.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtDefSubIdent.setDescription("The value of sapSubMgmtDefSubIdent specifies what is\n                     used as the default subscriber identification applicable\n                     on this SAP.\n\n                     This value is used in case no other source (like Radius)\n                     provides a subscriber identification string.\n\n                     If the value of this objects is set to 'useSapId',\n                     the SAP-id is used as the default subscriber identification\n                     string. In this case, sapSubMgmtDefSubIdentString must\n                     contain the empty string.\n                     If the value of this object is set to 'useString',\n                     the value of sapSubMgmtDefSubIdentString is used as the\n                     default subscriber identification string. In this case,\n                     an empty sapSubMgmtDefSubIdentString means that there is no\n                     default subscriber identification configured.")
sapSubMgmtDefSubIdentString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubIdentString.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtDefSubIdentString.setDescription('The value of sapSubMgmtDefSubIdentString specifies the\n                     default subscriber identification string applicable on\n                     this SAP.')
sapSubMgmtDefAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 13), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefAppProfile.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtDefAppProfile.setDescription('The value of sapSubMgmtDefAppProfile specifies the default\n                     application profile applicable on this SAP. The\n                     corresponding profile is defined in\n                     TIMETRA-BSX-MIB::tmnxBsxAppProfTable.')
sapSubMgmtNonSubTrafficAppProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 14), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficAppProf.setStatus('current')
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficAppProf.setDescription('The value of sapSubMgmtNonSubTrafficAppProf specifies the\n                     application profile applicable on this SAP for all\n                     non-subscriber traffic.\n\n                     The value of this object is only meaningful if\n                     sapSubMgmtSubscriberLimit is set to 1.')
sapTlsMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24), )
if mibBuilder.loadTexts: sapTlsMstiTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiTable.setDescription('This table contains Multiple Spanning Tree Instance\n                     information for the SAP. Each management VPLS running\n                     MSTP can have upto 15 MSTI. An entry in this table is\n                     automatically created when a tlsMstiEntry is created.')
sapTlsMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: sapTlsMstiEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiEntry.setDescription('Information about a specific MSTI for a SAP.')
sapTlsMstiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMstiPriority.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiPriority.setDescription('The value of the object sapTlsMstiPriority specifies\n                     the value of the port priority field which is contained in\n                     the most significant 4 bits of the 16-bit Port ID\n                     associated with this SAP and MSTI. As only the most\n                     significant 4 bits of the value are used, the actual value\n                     of this object is limited to multiples of 16: e.g. the\n                     agent rounds down the value to one of: 0, 16, 32, .. ,\n                     224, 240.')
sapTlsMstiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMstiPathCost.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiPathCost.setDescription('The value of the object sapTlsMstiPathCost specifies the\n                     contribution of this port to the MSTI path cost of paths\n                     towards the spanning tree regional root which include this\n                     port.')
sapTlsMstiLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiLastMgmtChange.setDescription('The value of the object sapTlsMstiLastMgmtChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     management-initiated change to this SAP MSTI information.')
sapTlsMstiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 4), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiPortRole.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiPortRole.setDescription('sapTlsMstiPortRole indicates the current role of the\n                     sap in the MSTI as defined by the Spanning Tree Protocol.')
sapTlsMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 5), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiPortState.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiPortState.setDescription("The value of the object sapTlsMstiPortState indicates the\n                     port's current state as defined by application of the\n                     Spanning Tree Protocol. This state controls what action a\n                     port takes on reception of a frame. If the bridge has\n                     detected a port that is malfunctioning it will\n                     place that port into the 'broken' state.")
sapTlsMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiDesignatedBridge.setDescription("The value of the object sapTlsMstiDesignatedBridge\n                     indicates  the Bridge Identifier of the bridge which this\n                     port considers to be the Designated Bridge for this port's\n                     segment for this MSTI.")
sapTlsMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: sapTlsMstiDesignatedPort.setDescription("The value of the object sapTlsMstiDesignatedPort indicates\n                     the Port Identifier of the port on the Designated Bridge\n                     for this port's segment for this MSTI.")
sapIpipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25), )
if mibBuilder.loadTexts: sapIpipeInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapIpipeInfoTable.setDescription('A table that contains IPIPE specific SAP information.')
sapIpipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapIpipeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapIpipeInfoEntry.setDescription('IPIPE specific information about a SAP.')
sapIpipeCeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeCeInetAddressType.setStatus('current')
if mibBuilder.loadTexts: sapIpipeCeInetAddressType.setDescription('The value of the object sapIpipeCeInetAddressType\n                     specifies the addresstype of the local end host IP\n                     of an IPIPE.')
sapIpipeCeInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeCeInetAddress.setStatus('current')
if mibBuilder.loadTexts: sapIpipeCeInetAddress.setDescription('The type of this address is determined by the value of\n                     the sapIpipeCeInetAddressType object.\n\n                     This object specifies the IPv4 address of the\n                     local end host of an IPIPE.')
sapIpipeMacRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(14400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeMacRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: sapIpipeMacRefreshInterval.setDescription('The value of sapIpipeMacRefreshInterval specifies the interval\n         between successive attempts to refresh the MAC address of the CE\n         device associated with an Ethernet ipipe SAP. If no other event\n         (such as reception of an ARP request from the CE) occurs that\n         would refresh the MAC address before the end of the interval,\n         an ARP request will be originated from the IPIPE SAP.')
sapIpipeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeMacAddress.setStatus('current')
if mibBuilder.loadTexts: sapIpipeMacAddress.setDescription('The value of the object sapIpipeMacAddress specifies\n                    the MAC address of an IPIPE Ethernet SAP.')
sapIpipeArpedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIpipeArpedMacAddress.setStatus('current')
if mibBuilder.loadTexts: sapIpipeArpedMacAddress.setDescription('The value of the object sapIpipeArpedMacAddress indicates\n                    the MAC address of the local end host.')
sapIpipeArpedMacAddressTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIpipeArpedMacAddressTimeout.setStatus('current')
if mibBuilder.loadTexts: sapIpipeArpedMacAddressTimeout.setDescription('The value of the object sapIpipeArpedMacAddressTimeout\n                    indicates the number of seconds to wait for the\n                    sapIpipeArpedMacAddress to be re-refreshed.')
sapTodMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26), )
if mibBuilder.loadTexts: sapTodMonitorTable.setStatus('current')
if mibBuilder.loadTexts: sapTodMonitorTable.setDescription('This table contains information on configurable objects\n                     on SAP level, that can be modified by a scheduled policy.')
sapTodMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTodMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: sapTodMonitorEntry.setDescription('Information about ToD policy modifiable config data\n                     for a SAP.')
sapCurrentIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 1), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentIngressIpFilterId.setDescription('The value of the object sapCurrentIngressIpFilterId\n                     indicates the index in the tIPFilterTable corresponding to\n                     the ingress filter applied on this SAP, or zero if no\n                     filter is currently active.\n                     The active filter may deviate from sapIngressIpFilterId in\n                     case it is overruled by a ToD Suite policy.')
sapCurrentIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 2), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentIngressIpv6FilterId.setDescription('The value of the object sapCurrentIngressIpv6FilterId\n                     indicates the index in the tIPv6FilterTable corresponding\n                     to the ingress Ipv6 filter applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapIngressIpv6FilterId\n                     in case it is overruled by a ToD Suite policy.')
sapCurrentIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 3), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentIngressMacFilterId.setDescription('The value of the object sapCurrentIngressMacFilterId\n                     indicates the index in the tMacFilterTable corresponding\n                     to the ingress Mac filter applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapIngressMacFilterId\n                     in case it is overruled by a ToD Suite policy.')
sapCurrentIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 4), TSapIngressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentIngressQosPolicyId.setDescription('The value of the object sapCurrentIngressQosPolicyId\n                     indicates the index in the tSapIngressTable corresponding\n                     to the ingress Qos Policy applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapIngressQosPolicyId\n                     in case it is overruled by a ToD Suite policy.')
sapCurrentIngressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 5), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressQosSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: sapCurrentIngressQosSchedPlcy.setDescription('The value of the object sapCurrentIngressQosSchedPlcy\n                     indicates the ingress QoS scheduler on this SAP, or zero\n                     if none is currently active.\n                     The active policy may deviate from\n                     sapIngressQosSchedulerPolicy in case it is overruled by a\n                     ToD Suite policy defined on this SAP, or on the\n                     multi-service this SAP belongs to. ')
sapCurrentEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 6), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentEgressIpFilterId.setDescription('The value of the object sapCurrentEgressIpFilterId\n                     indicates the index in the tIPFilterTable corresponding to\n                     the Egress filter applied on this SAP, or zero if no\n                     filter is currently active.\n                     The active filter may deviate from sapEgressIpFilterId in\n                     case it is overruled by a ToD Suite policy.')
sapCurrentEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 7), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentEgressIpv6FilterId.setDescription('The value of the object sapCurrentEgressIpv6FilterId\n                     indicates the index in the tIPv6FilterTable corresponding\n                     to the Egress Ipv6 filter applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapEgressIpv6FilterId\n                     in case it is overruled by a ToD Suite policy.')
sapCurrentEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 8), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentEgressMacFilterId.setDescription('The value of the object sapCurrentEgressMacFilterId\n                     indicates the index in the tMacFilterTable corresponding\n                     to the Egress Mac filter applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapEgressMacFilterId in\n                     case it is overruled by a ToD Suite policy.')
sapCurrentEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 9), TSapEgressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapCurrentEgressQosPolicyId.setDescription('The value of the object sapCurrentEgressQosPolicyId\n                     indicates the index in the tSapEgressTable corresponding\n                     to the Egress Qos Policy applied on this SAP, or zero if\n                     no filter is currently active.\n                     The active filter may deviate from sapEgressQosPolicyId in\n                     case it is overruled by a ToD Suite policy.')
sapCurrentEgressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 10), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressQosSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: sapCurrentEgressQosSchedPlcy.setDescription('The value of the object sapCurrentEgressQosSchedPlcy\n                     indicates the Egress QoS scheduler on this SAP, or zero if\n                     none is currently active.\n                     The active policy may deviate from\n                     sapEgressQosSchedulerPolicy in case it is overruled by a\n                     ToD Suite policy defined on this SAP, or on the\n                     multi-customer this SAP belongs to.')
sapIntendedIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 11), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedIngressIpFilterId.setDescription('The value of the object sapIntendedIngressIpFilterId\n                     indicates the index in the tIPFilterTable corresponding\n                     to the ingress IP filter that should be applied on\n                     this SAP.\n                     If it deviates from sapCurrentIngressIpFilterId, this \n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites\n                     for the SAP. When the ToD Suites decides that a new\n                     filter must be applied, it will try to do this. If it\n                     fails, the current and intended field are not equal.')
sapIntendedIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 12), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedIngressIpv6FilterId.setDescription('The value of the object sapIntendedIngressIpv6FilterId\n                     indicates the index in the tIPv6FilterTable corresponding\n                     to the ingress Ipv6 filter that should be applied on this\n                     SAP. \n                     If it deviates from sapCurrentIngressIpv6FilterId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites\n                     for the SAP. When the ToD Suites decides that a new\n                     filter must be applied, it will try to do this. If it\n                     fails, the current and intended field are not equal.')
sapIntendedIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 13), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedIngressMacFilterId.setDescription('The value of the object sapIntendedIngressMacFilterId\n                     indicates the index in the tMacFilterTable corresponding\n                     to the ingress Mac filter that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentIngressMacFilterId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter\n                     must be applied, it will try to do this. If it fails,\n                     the current and intended field are not equal.')
sapIntendedIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 14), TSapIngressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedIngressQosPolicyId.setDescription('The value of the object sapIntendedIngressQosPolicyId\n                     indicates the index in the tSapIngressTable corresponding\n                     to the ingress Qos policy that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentIngressQosPolicyId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter\n                     must be applied, it will try to do this. If it fails, the \n                     current and intended field are not equal.')
sapIntendedIngressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 15), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressQosSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: sapIntendedIngressQosSchedPlcy.setDescription('The value of the object sapIntendedIngressQosSchedPlcy\n                     indicates the ingress QoS scheduler that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentIngressQosSchedPlcy, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter \n                     must be applied, it will try to do this. If it fails,\n                     the current and intended field are not equal.')
sapIntendedEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 16), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressIpFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedEgressIpFilterId.setDescription('The value of the object sapIntendedEgressIpFilterId\n                     indicates the index in the tIPFilterTable corresponding to\n                     the Egress IP filter scheduler that should be applied on\n                     this SAP. \n                     If it deviates from sapCurrentEgressIpFilterId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter\n                     must be applied, it will try to do this. If it fails, \n                     the current and intended field are not equal.')
sapIntendedEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 17), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedEgressIpv6FilterId.setDescription('The value of the object sapIntendedEgressIpv6FilterId\n                     indicates the index in the tIPv6FilterTable corresponding\n                     to the Egress IPv6 filter scheduler that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentEgressIpv6FilterId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter \n                     must be applied, it will try to do this. If it fails, \n                     the current and intended field are not equal.')
sapIntendedEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 18), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressMacFilterId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedEgressMacFilterId.setDescription('The value of the object sapIntendedEgressMacFilterId\n                     indicates the index in the tMacFilterTable corresponding \n                     to the Egress mac filter scheduler that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentEgressMacFilterId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter \n                     must be applied, it will try to do this. If it fails, \n                     the current and intended field are not equal.')
sapIntendedEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 19), TSapEgressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapIntendedEgressQosPolicyId.setDescription('The value of the object sapIntendedEgressQosPolicyId\n                     indicates the index in the tSapEgressTable corresponding\n                     to the Egress Qos Policy that should be applied\n                     on this SAP. \n                     If it deviates from sapCurrentEgressQosPolicyId, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter \n                     must be applied, it will try to do this. If it fails, \n                     the current and intended field are not equal.')
sapIntendedEgressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 20), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressQosSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: sapIntendedEgressQosSchedPlcy.setDescription('The value of the object sapIntendedEgressQosSchedPlcy\n                     indicates the index in the tSapEgressTable corresponding\n                     to the Egress Qos Scheduler policy that should be applied \n                     on this SAP. \n                     If it deviates from sapCurrentEgressQosSchedPlcy, this\n                     means that there was a problem when trying to activate\n                     this filter. It can only deviate when using ToD Suites for\n                     the SAP. When the ToD Suites decides that a new filter \n                     must be applied, it will try to do this. If it fails, \n                     the current and intended field are not equal.')
sapIngrQosPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27), )
if mibBuilder.loadTexts: sapIngrQosPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngrQosPlcyStatsTable.setDescription('A table that contains Ingress Qos policy related\n                     statistics for a SAP.')
sapIngrQosPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyId"))
if mibBuilder.loadTexts: sapIngrQosPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngrQosPlcyStatsEntry.setDescription('Statistics about a specific Ingress Qos Policy applied\n                     on a specific SAP.')
sapIgQosPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 1), TSapIngressPolicyID())
if mibBuilder.loadTexts: sapIgQosPlcyId.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyId.setDescription('The value of the object sapIgQosPlcyId indicates\n                     the row index in the tSapIngressTable corresponding to this\n                     ingress QoS policy, or one if no policy is specified.')
sapIgQosPlcyDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioPackets.setDescription('The value of the object sapIgQosPlcyDroppedHiPrioPackets\n                     indicates the number of high priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapIgQosPlcyDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioOctets.setDescription('The value of the object sapIgQosPlcyDroppedHiPrioOctets\n                     indicates the number of high priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapIgQosPlcyDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioPackets.setDescription('The value of the object sapIgQosPlcyDroppedLoPrioPackets\n                     indicates the number of low priority packets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapIgQosPlcyDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioOctets.setDescription('The value of the object sapIgQosPlcyDroppedLoPrioOctets\n                     indicates the number of low priority octets,\n                     as determined by the SAP ingress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapIgQosPlcyForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfPackets.setDescription('The value of the object sapIgQosPlcyForwardedInProfPackets\n                     indicates the number of in-profile packets\n                     (rate below CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfOctets.setDescription('The value of the object sapIgQosPlcyForwardedInProfOctets\n                     indicates the number of in-profile octets\n                     (rate below CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfPackets.setDescription('The value of the object sapIgQosPlcyForwardedOutProfPackets\n                     indicates the number of out-of-profile packets\n                     (rate above CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfOctets.setDescription('The value of the object sapIgQosPlcyForwardedOutProfOctets\n                     indicates the number of out-of-profile octets\n                     (rate above CIR) forwarded by the ingress Qchip.')
sapEgrQosPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28), )
if mibBuilder.loadTexts: sapEgrQosPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosPlcyStatsTable.setDescription('A table that contains Egress Qos policy related\n                     statistics for a SAP.')
sapEgrQosPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyId"))
if mibBuilder.loadTexts: sapEgrQosPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosPlcyStatsEntry.setDescription('Statistics about a specific Egress Qos Policy applied\n                     on a specific SAP.')
sapEgQosPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: sapEgQosPlcyId.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyId.setDescription('The value of the object sapEgQosPlcyId indicates\n                     the row index in the tSapEgressTable corresponding to this\n                     egress QoS policy, or one if no policy is specified.')
sapEgQosPlcyDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfPackets.setDescription('The value of the object sapEgQosPlcyDroppedInProfPackets\n                     indicates the number of in-profile packets,\n                     as determined by the SAP egress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapEgQosPlcyDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfOctets.setDescription('The value of the object sapEgQosPlcyDroppedInProfOctets\n                     indicates the number of in-profile octets,\n                     as determined by the SAP egress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapEgQosPlcyDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfPackets.setDescription('The value of the object sapEgQosPlcyDroppedOutProfPackets\n                     indicates the number of out-profile packets,\n                     as determined by the SAP egress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapEgQosPlcyDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfOctets.setDescription('The value of the object sapEgQosPlcyDroppedOutProfOctets\n                     indicates the number of out-profile octets,\n                     as determined by the SAP egress QoS\n                     policy, dropped by the Qchip due to:\n                     MBS exceeded, buffer pool limit exceeded, etc.')
sapEgQosPlcyForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfPackets.setDescription('The value of the object sapEgQosPlcyForwardedInProfPackets\n                     indicates the number of in-profile packets\n                     (rate below CIR) forwarded by the egress Qchip.')
sapEgQosPlcyForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfOctets.setDescription('The value of the object sapEgQosPlcyForwardedInProfOctets\n                     indicates the number of in-profile octets\n                     (rate below CIR) forwarded by the egress Qchip.')
sapEgQosPlcyForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfPackets.setDescription('The value of the object sapEgQosPlcyForwardedOutProfPackets\n                     indicates the number of out-of-profile packets\n                     (rate above CIR) forwarded by the egress Qchip.')
sapEgQosPlcyForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfOctets.setDescription('The value of the object sapEgQosPlcyForwardedOutProfOctets\n                     indicates the number of out-of-profile octets\n                     (rate above CIR) forwarded by the egress Qchip.')
sapIngQosPlcyQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29), )
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsTable.setDescription('A table that contains ingress QoS queue SAP\n                     statistics, per Ingress QoS Policy the queue\n                     was used by.')
sapIngQosPlcyQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueuePlcyId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueId"))
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsEntry.setDescription("Ingress statistics about a specific SAP's\n                     QoS queue for a given Qos policy.")
sapIgQosPlcyQueuePlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 1), TSapIngressPolicyID())
if mibBuilder.loadTexts: sapIgQosPlcyQueuePlcyId.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueuePlcyId.setDescription('The value of the object sapIgQosPlcyQueuePlcyId indicates\n                     the row index in the tSapIngressTable corresponding to\n                     this ingress QoS policy.')
sapIgQosPlcyQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 2), TSapIngQueueId())
if mibBuilder.loadTexts: sapIgQosPlcyQueueId.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueId.setDescription('The index of the ingress QoS queue of this SAP used by the\n                     policy indicated by sapIgQosPlcyQueuePlcyId.')
sapIgQosPlcyQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioPackets.setDescription('The value of sapIgQosPlcyQueueStatsOfferedHiPrioPackets\n                     indicates the number of high priority packets,\n                     as determined by the SAP ingress QoS policy, offered by\n                     the Pchip to the Qchip.')
sapIgQosPlcyQueueStatsDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioPackets.setDescription('The value of sapIgQosPlcyQueueStatsDroppedHiPrioPackets\n                     indicates the number of high priority packets,\n                     as determined by the SAP ingress QoS policy, dropped by\n                     the Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIgQosPlcyQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioPackets.setDescription('The value of sapIgQosPlcyQueueStatsOfferedLoPrioPackets\n                     indicates the number of  low priority packets,\n                     as determined by the SAP ingress QoS policy, offered by\n                     the Pchip to the Qchip.')
sapIgQosPlcyQueueStatsDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioPackets.setDescription('The value of sapIgQosPlcyQueueStatsDroppedLoPrioPackets\n                     indicates the number of low priority packets,\n                     as determined by the SAP ingress QoS policy, dropped by\n                     the Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIgQosPlcyQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioOctets.setDescription('The value of sapIgQosPlcyQueueStatsOfferedHiPrioOctets\n                     indicates the number of high priority octets,\n                     as determined by the SAP ingress QoS policy, offered by\n                     the Pchip to the Qchip.')
sapIgQosPlcyQueueStatsDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioOctets.setDescription('The value of sapIgQosPlcyQueueStatsDroppedHiPrioOctets\n                     indicates the number ofhigh priority octets,\n                     as determined by the SAP ingress QoS policy, dropped by\n                     the Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIgQosPlcyQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioOctets.setDescription('The value of sapIgQosPlcyQueueStatsOfferedLoPrioOctets\n                     indicates the number of low priority octets,\n                     as determined by the SAP ingress QoS policy, offered by\n                     the Pchip to the Qchip.')
sapIgQosPlcyQueueStatsDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioOctets.setDescription('The value of sapIgQosPlcyQueueStatsDroppedLoPrioOctets\n                     indicates the number of low priority octets,\n                     as determined by the SAP ingress QoS policy, dropped by\n                     the Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapIgQosPlcyQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfPackets.setDescription('The value of sapIgQosPlcyQueueStatsForwardedInProfPackets\n                     indicates the number of in-profile packets\n                     (rate below CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfPackets.setDescription('The value of sapIgQosPlcyQueueStatsForwardedOutProfPackets\n                     indicates the number of out-of-profile packets\n                     (rate above CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfOctets.setDescription('The value of sapIgQosPlcyQueueStatsForwardedInProfOctets\n                     indicates the number of in-profile octets\n                     (rate below CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfOctets.setDescription('The value of sapIgQosPlcyQueueStatsForwardedOutProfOctets\n                     indicates the number of  out-of-profile octets\n                     (rate above CIR) forwarded by the ingress Qchip.')
sapIgQosPlcyQueueCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 15), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueCustId.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueCustId.setDescription('The value of the object sapIgQosPlcyQueueCustId\n                     indicates the Customer ID for the associated service.')
sapIgQosPlcyQueueStatsUncoloredPacketsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredPacketsOffered.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredPacketsOffered.setDescription('The value of sapIgQosPlcyQueueStatsUncoloredPacketsOffered\n                     indicates the number of uncolored packets offered to\n                     the ingress Qchip.')
sapIgQosPlcyQueueStatsUncoloredOctetsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredOctetsOffered.setStatus('current')
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredOctetsOffered.setDescription('The value of sapIgQosPlcyQueueStatsUncoloredOctetsOffered\n                     indicates the number of uncolored octets offered to\n                     the ingress Qchip.')
sapEgrQosPlcyQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30), )
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsTable.setDescription('A table that contains egress QoS queue SAP\n                     statistics per Egress QoS Policy the queue\n                     was used by.')
sapEgrQosPlcyQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueuePlcyId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueId"))
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsEntry.setDescription("Egress statistics about a specific SAP's\n                     QoS queue for a given Qos policy.")
sapEgQosPlcyQueuePlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: sapEgQosPlcyQueuePlcyId.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueuePlcyId.setDescription('The row index in the tSapEgressTable\n                     corresponding to this egress QoS policy.')
sapEgQosPlcyQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 2), TSapEgrQueueId())
if mibBuilder.loadTexts: sapEgQosPlcyQueueId.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueId.setDescription('The value of sapEgQosPlcyQueueId indicates\n                     index of the egress QoS queue of this SAP.')
sapEgQosPlcyQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfPackets.setDescription('The value of sapEgQosPlcyQueueStatsForwardedInProfPackets\n                     indicates the number of in-profile packets (rate below\n                     CIR) forwarded by the egress Qchip.')
sapEgQosPlcyQueueStatsDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfPackets.setDescription('The value of sapEgQosPlcyQueueStatsDroppedInProfPackets\n                     indicates the number of in-profile packets discarded by\n                     the egress Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgQosPlcyQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfPackets.setDescription('The value of sapEgQosPlcyQueueStatsForwardedOutProfPackets\n                     indicates the number of out-of-profile packets (rate\n                     above CIR) forwarded by the egress Qchip.')
sapEgQosPlcyQueueStatsDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfPackets.setDescription('The value of sapEgQosPlcyQueueStatsDroppedOutProfPackets\n                     indicates the number out-of-profile packets discarded by\n                     the egress Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgQosPlcyQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfOctets.setDescription('The value of sapEgQosPlcyQueueStatsForwardedInProfOctets\n                     indicates the number ofin-profile octets (rate below CIR)\n                     forwarded by the egress Qchip.')
sapEgQosPlcyQueueStatsDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfOctets.setDescription('The value of sapEgQosPlcyQueueStatsDroppedInProfOctets\n                     indicates the number in-profile octets discarded by the\n                     egress Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgQosPlcyQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfOctets.setDescription('The value of sapEgQosPlcyQueueStatsForwardedOutProfOctets\n                     indicates the number of out-of-profile octets (rate\n                     above CIR) forwarded by the egress Qchip.')
sapEgQosPlcyQueueStatsDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfOctets.setDescription('The value of sapEgQosPlcyQueueStatsDroppedOutProfOctets\n                     indicates the number out-of-profile octets discarded by\n                     the egress Qchip due to: MBS exceeded, buffer pool limit\n                     exceeded, etc.')
sapEgQosPlcyQueueCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 11), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueCustId.setStatus('current')
if mibBuilder.loadTexts: sapEgQosPlcyQueueCustId.setDescription('The value of the object sapEgQosPlcyQueueCustId indicates\n                     the Customer ID for the associated service.')
sapDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31), )
if mibBuilder.loadTexts: sapDhcpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapDhcpInfoTable.setDescription('sapDhcpInfoTable contains DHCP information related to a\n                     routed CO subscriber SAP.  This table complements\n                     sapBaseInfoTable, and contains an entry for each\n                     routed CO subscriber SAP. Rows in this table\n                     are created and deleted automatically by the system.')
sapDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDhcpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapDhcpInfoEntry.setDescription('DHCP specific information for a routed CO subscriber SAP.')
sapDhcpOperLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapDhcpOperLeasePopulate.setStatus('current')
if mibBuilder.loadTexts: sapDhcpOperLeasePopulate.setDescription('The value of the object sapDhcpOperLeasePopulate\n                     indicates the number of DHCP lease states currently\n                     allocated on this SAP.')
sapIngSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32), )
if mibBuilder.loadTexts: sapIngSchedPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyStatsTable.setDescription("A table that contains ingress QoS queue\n                     statistics for the SAP's, organized by\n                     scheduler policy.")
sapIngSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngSchedPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyStatsEntry.setDescription("Statistics about a specific SAP's ingress Qos Scheduler. \n                     Entries are created when a scheduler policy of a SAP \n                     is replaced with another one due to Time-Of-Day policies.")
sapIngSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdPkt.setDescription('The number of forwarded packets, as\n                     determined by the SAP ingress scheduler\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapIngSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdOct.setDescription('The number of forwarded octets, as\n                     determined by the SAP ingress scheduler\n                     policy, offered by the Pchip to the\n                     Qchip.')
sapEgrSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33), )
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsTable.setDescription("A table that contains egress QoS scheduler \n                     statistics for the SAP's, organized by\n                     scheduler policy.")
sapEgrSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsEntry.setDescription("Statistics about a specific SAP's egress QoS scheduler.\n                     Entries are created when a scheduler policy of a SAP \n                     is replaced with another one due to Time-Of-Day policies.")
sapEgrSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdPkt.setDescription('The number of packets forwarded by the\n                     egress Qchip, as determined by the SAP\n                     egress scheduler policy.')
sapEgrSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdOct.setDescription('The number of octets forwarded by the\n                     egress Qchip, as determined by the SAP\n                     egress scheduler policy.')
sapIngSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34), )
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsTable.setDescription("The sapIngSchedPlcyPortStatsTable contains \n         ingress QoS scheduler statistics for the SAP's, organized per\n         scheduler policy and per port. This table is used when the SAP\n         is  a CCAG or LAG in 'link' mode, or an APS. \n         Entries are created when a scheduler policy of a SAP \n         is replaced with another one due to Time-Of-Day policies.")
sapIngSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngPortId"))
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsEntry.setDescription("Statistics about a specific SAP's ingress Qos Scheduler. \n                     Entries are created when a scheduler policy of a SAP \n                     is replaced with another one due to Time-Of-Day policies.")
sapIngSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsPort.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsPort.setDescription("The value of sapIngSchedPlcyPortStatsPort is used\n                     as an index of the ingress QoS scheduler of this SAP. When\n                     the SAP is an aps/ccag/lag in 'link' mode, this object is\n                     the TmnxPortID of the member-port on which the scheduler is\n                     applied.")
sapIngSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdPkt.setDescription('The value of sapIngSchedPlcyPortStatsFwdPkt indicates\n                     the number of forwarded packets, as determined by the SAP\n                     ingress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapIngSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdOct.setDescription('The value of sapIngSchedPlcyPortStatsFwdOct indicates\n                     the number of forwarded octets,as determined by the SAP\n                     ingress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapEgrSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35), )
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsTable.setDescription("The sapEgrSchedPlcyPortStatsTable contains \n         egress QoS scheduler statistics for the SAP's, organized per\n         scheduler policy and per port. This table is used when the SAP\n         is  a CCAG or LAG in 'link' mode, or an APS. \n         Entries are created when a scheduler policy of a SAP \n         is replaced with another one due to Time-Of-Day policies.")
sapEgrSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrPortId"))
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsEntry.setDescription("Statistics about a specific SAP's egress Qos Scheduler. \n                     Entries are created when a scheduler policy of a SAP \n                     is replaced with another one due to Time-Of-Day policies.")
sapEgrSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsPort.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsPort.setDescription("The value of sapEgrSchedPlcyPortStatsPort is used\n                     as an index of the egress QoS scheduler of this SAP. When\n                     the SAP is an aps/ccag/lag in 'link' mode, this object is\n                     the TmnxPortID of the member-port on which the scheduler is\n                     applied.")
sapEgrSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdPkt.setDescription('The value of sapEgrSchedPlcyPortStatsFwdPkt indicates\n                     the number of forwarded packets, as determined by the SAP\n                     egress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapEgrSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdOct.setDescription('The value of sapEgrSchedPlcyPortStatsFwdOct indicates\n                     the number of forwarded octets,as determined by the SAP\n                     egress scheduler policy, offered by the Pchip to the\n                     Qchip.')
sapCemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40), )
if mibBuilder.loadTexts: sapCemInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapCemInfoTable.setDescription('A table that contains CEM SAP information.')
sapCemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCemInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapCemInfoEntry.setDescription('Information about a specific CEM SAP.')
sapCemLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapCemLastMgmtChange.setDescription('The value of the object sapCemLastMgmtChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     management-initiated change to this CEM SAP information.')
sapCemEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unstructuredE1", 1), ("unstructuredT1", 2), ("unstructuredE3", 3), ("unstructuredT3", 4), ("nxDS0", 5), ("nxDS0WithCas", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemEndpointType.setStatus('current')
if mibBuilder.loadTexts: sapCemEndpointType.setDescription('This object indicates the CEM SAP endpoint type.')
sapCemBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 699))).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemBitrate.setStatus('current')
if mibBuilder.loadTexts: sapCemBitrate.setDescription('This object indicates the bit-rate in multiples of\n                      64 Kbit/s of the CEM SAP.')
sapCemCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 4), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemCasTrunkFraming.setStatus('current')
if mibBuilder.loadTexts: sapCemCasTrunkFraming.setDescription('This object indicates the CAS trunk framing mode of\n                      the CEM SAP.')
sapCemPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 2048), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemPayloadSize.setStatus('current')
if mibBuilder.loadTexts: sapCemPayloadSize.setDescription("This object specifies the payload size (in bytes) of\n                      packets transmitted to the Packet Service Network (PSN)\n                      by the CEM SAP.  This determines the size of the data\n                      that will be transmitted over the service.  As well,\n                      if the size of the data received is not consistent with\n                      the payload size then the packet is considered malformed.\n\n                      Default value depends on the CEM SAP endpoint type\n                      (sapCemEndpointType), and if applicable, the number of\n                      timeslots (sapCemBitrate):\n                      ---------------------------------------------------------\n                      | Endpoint Type      | Timeslots | Default payload size |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredE1'   | n/a       |    256 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredT1'   | n/a       |    192 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredE3'   | n/a       |   1024 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredT3'   | n/a       |   1024 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0' (E1/T1)    | N = 1     |     64 bytes         |\n                      |                    +-----------+-----------------------\n                      |                    | N = 2..4  | N x 32 bytes         |\n                      |                    +-----------+-----------------------\n                      |                    | N = 5..15 | N x 16 bytes         |\n                      |                    +-----------+-----------------------\n                      |                    | N >= 16   | N x  8 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0WithCas' (E1)| N         | N x 16 bytes         |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0WithCas' (T1)| N         | N x 24 bytes         |\n                      ---------------------------------------------------------\n\n                      For all endpoint types except for 'nxDS0WithCas',\n                      valid payload size range is from the default (in the\n                      table above) to 2048 bytes.  \n\n                      For 'nxDS0WithCas', sapCemPayloadSize divide by the\n                      number of timeslots (sapCemBitrate) must be an integer\n                      factor of the number of frames per trunk multiframe (i.e.\n                      16 for E1 trunk and 24 for T1 trunk).\n\n                      For '1xDS0', sapCemPayloadSize must be a multiple of 2.\n                      \n                      For 'NxDS0', where N > 1, sapCemPayloadSize must be a\n                      multiple of the number of timeslots (sapCemBitrate).\n\n                      For 'unstructuredE1', 'unstructuredT1', 'unstructuredE3'\n                      and 'unstructuredT3', sapCemPayloadSize must be a\n                      multiple of 32 bytes.\n\n                      Configuring sapCemPayloadSize and sapCemJitterBuffer to\n                      values that result in less than 2 packet buffers or\n                      greater than 32 packet buffer is not allowed.\n\n                      Setting this object to 0 sets it back to the default\n                      value.")
sapCemJitterBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 250), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemJitterBuffer.setStatus('current')
if mibBuilder.loadTexts: sapCemJitterBuffer.setDescription("This object specifies the jitter buffer size in\n                      milliseconds (ms).\n                      \n                      Default value depends on the CEM SAP endpoint type\n                      (sapCemEndpointType), and if applicable, the number of\n                      timeslots (sapCemBitrate):\n                      ---------------------------------------------------------\n                      | Endpoint Type      | Timeslots | Default jitter buf.  |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredE1'   | n/a       |    5 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredT1'   | n/a       |    5 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredE3'   | n/a       |    5 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'unstructuredT3'   | n/a       |    5 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0' (E1/T1)    | N = 1     |   32 ms              |\n                      |                    +-----------+-----------------------\n                      |                    | N = 2..4  |   16 ms              |\n                      |                    +-----------+-----------------------\n                      |                    | N = 5..15 |    8 ms              |\n                      |                    +-----------+-----------------------\n                      |                    | N >= 16   |    5 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0WithCas' (E1)| N         |    8 ms              |\n                      ---------------------+-----------+-----------------------\n                      | 'nxDS0WithCas' (T1)| N         |   12 ms              |\n                      ---------------------------------------------------------\n                      \n                      Configuring sapCemPayloadSize and sapCemJitterBuffer to\n                      values that result in less than 2 packet buffers or\n                      greater than 32 packet buffers is not allowed.\n\n                      The valid range is 1 to 250 ms.  Setting this object\n                      to 0 sets it back to the default value.")
sapCemUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemUseRtpHeader.setStatus('current')
if mibBuilder.loadTexts: sapCemUseRtpHeader.setDescription('This object specifies whether a RTP header is used when\n                     packets are transmitted to the Packet Service Network\n                     (PSN) by the CEM SAP.')
sapCemDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemDifferential.setStatus('current')
if mibBuilder.loadTexts: sapCemDifferential.setDescription('This object specifies whether this CEM SAP is in\n                     differential mode.')
sapCemTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 9), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemTimestampFreq.setStatus('current')
if mibBuilder.loadTexts: sapCemTimestampFreq.setDescription('This object specifies whether the value of the timestamp\n                     frequency in multiples of 8 KHz for this CEM SAP.')
sapCemReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 10), CemSapReportAlarm().clone(namedValues=NamedValues(("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemReportAlarm.setStatus('current')
if mibBuilder.loadTexts: sapCemReportAlarm.setDescription('The value of sapCemReportAlarm determines when and if to\n                    generate notifications for the CEM SAP.')
sapCemReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 11), CemSapReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: sapCemReportAlarmStatus.setDescription('The value of sapCemReportAlarmStatus indicates the current\n                     alarms on this CEM SAP.')
sapCemLocalEcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 12), CemSapEcid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemLocalEcid.setStatus('current')
if mibBuilder.loadTexts: sapCemLocalEcid.setDescription('The value of the object sapCemLocalEcid specifies\n                     the local ECID.  \n                     \n                     Only valid if CEM SAP belongs to an EPIPE service.')
sapCemRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemRemoteMacAddr.setStatus('current')
if mibBuilder.loadTexts: sapCemRemoteMacAddr.setDescription('The value of the object sapCemRemoteMacAddr specifies\n                     the remote MAC address.  \n                     \n                     Only valid if CEM SAP belongs to an EPIPE service.')
sapCemRemoteEcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 14), CemSapEcid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemRemoteEcid.setStatus('current')
if mibBuilder.loadTexts: sapCemRemoteEcid.setDescription('The value of the object sapCemRemoteEcid specifies\n                     the remote ECID.  \n                     \n                     Only valid if CEM SAP belongs to an EPIPE service.')
sapCemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41), )
if mibBuilder.loadTexts: sapCemStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsTable.setDescription('A table that contains CEM SAP statistics.')
sapCemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCemStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEntry.setDescription('Statistics for a specific CEM SAP.')
sapCemStatsIngressForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsIngressForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsIngressForwardedPkts.setDescription('The value of sapCemStatsIngressForwardedPkts indicates\n                     the number of packets that were successfully forwarded.')
sapCemStatsIngressDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsIngressDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsIngressDroppedPkts.setDescription('The value of sapCemStatsIngressDroppedPkts indicates\n                     the total number of packets that were dropped due to\n                     errors.')
sapCemStatsEgressForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressForwardedPkts.setDescription('The value of sapCemStatsEgressForwardedPkts indicates the\n                     number of packets that were successfully forwarded.')
sapCemStatsEgressDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressDroppedPkts.setDescription('The value of sapCemStatsEgressDroppedPkts indicates\n                     the total number of packets that were dropped due to\n                     errors.')
sapCemStatsEgressMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMissingPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressMissingPkts.setDescription('The value of sapCemStatsEgressMissingPkts indicates the\n                     number of missing packets (as detected via control word\n                     sequence number gaps).')
sapCemStatsEgressPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressPktsReOrder.setDescription('The value of sapCemStatsEgressPktsReOrder indicates the\n                     number of packets detected out of sequence (via control\n                     word sequence number), but successfully re-ordered.')
sapCemStatsEgressJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrUnderruns.setDescription('The value of sapCemStatsEgressJtrBfrUnderruns indicates\n                     the number of times a packet needed to be played out and\n                     the jitter buffer was empty.')
sapCemStatsEgressJtrBfrOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrOverruns.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrOverruns.setDescription('The value of sapCemStatsEgressJtrBfrOverruns indicates\n                     the number of times a packet was dropped because it could\n                     not fit in the jitter buffer.')
sapCemStatsEgressMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressMisOrderDropped.setDescription('The value of sapCemStatsEgressMisOrderDropped indicates\n                     the number of packets detected out of order (via control\n                     word sequence numbers), and could not be re-ordered, or\n                     could not be placed in the jitter buffer because it was\n                     out of the current window.')
sapCemStatsEgressMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMalformedPkts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressMalformedPkts.setDescription("The value of sapCemStatsEgressMalformedPkts indicates the\n                     number of packets detected with unexpected size, or bad\n                     headers' stack.")
sapCemStatsEgressLBitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressLBitDropped.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressLBitDropped.setDescription('The value of sapCemStatsEgressLBitDropped indicates the\n                     number of packets dropped due to the L bit set by the far\n                     end.')
sapCemStatsEgressMultipleDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMultipleDropped.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressMultipleDropped.setDescription('The value of sapCemStatsEgressMultipleDropped indicates\n                     the number of packets dropped due to multiple sequence\n                     numbers.')
sapCemStatsEgressESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressESs.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressESs.setDescription('The value of sapCemStatsEgressESs indicates the number of\n                     Error Seconds (ESs) encountered. Any malformed packet,\n                     seq.  error, LOPS and similar are considered as error\n                     seconds.')
sapCemStatsEgressSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressSESs.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressSESs.setDescription('The value of sapCemStatsEgressSESs indicates the number\n                     of Severely Error Seconds (SESs) encountered.  This is\n                     when more than 30 percent of the packets within a one\n                     second window are missing.')
sapCemStatsEgressUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressUASs.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressUASs.setDescription('The value of sapCemStatsEgressUASs indicates the number of\n                     Unavailable Seconds (UASs) encountered. Any consecutive\n                     ten seconds of SESs are counted as one UAS.')
sapCemStatsEgressFailureCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressFailureCounts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressFailureCounts.setDescription('The value of sapCemStatsEgressFailureCounts indicates\n                     the number failure events.  A failure event begins when\n                     the LOPS failure is declared, and ends when the failure\n                     is cleared.')
sapCemStatsEgressUnderrunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressUnderrunCounts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressUnderrunCounts.setDescription('The value of sapCemStatsEgressUnderrunCounts indicates\n                     the number of times the jitter buffer went into an\n                     underrun state.')
sapCemStatsEgressOverrunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressOverrunCounts.setStatus('current')
if mibBuilder.loadTexts: sapCemStatsEgressOverrunCounts.setDescription('The value of sapCemStatsEgressOverrunCounts indicates\n                     the number of times the jitter buffer went into an\n                     overrun state.')
sapTlsL2ptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42), )
if mibBuilder.loadTexts: sapTlsL2ptStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsTable.setDescription('A table that contains SAP Layer 2 Protocol Tunneling \n                     Statistics.\n                     This table complements sapTlsInfoTable. Rows in this\n                     table are created and deleted automatically by the\n                     system.')
sapTlsL2ptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsL2ptStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsEntry.setDescription('Layer 2 Protocol Tunneling Statistics for a specific SAP.\n                     The statistics are provided for each combination of \n                     Destination Address and LLC SNAP type.')
sapTlsL2ptStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsLastClearedTime.setDescription('The value of sapTlsL2ptStatsLastClearedTime indicates \n                     the last time that these stats were cleared. The value\n                     zero indicates that they have not been cleared yet.')
sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx indicates the\n                     number of L2PT encapsulated STP config bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx indicates the\n                     number of L2PT encapsulated STP config bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpRstBpdusRx indicates the\n                     number of L2PT encapsulated STP rst bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpRstBpdusTx indicates the\n                     number of L2PT encapsulated STP rst bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx indicates the\n                     number of L2PT encapsulated STP tcn bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx indicates the\n                     number of L2PT encapsulated STP tcn bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx indicates the\n                     number of L2PT encapsulated PVST config bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx indicates the\n                     number of L2PT encapsulated PVST config bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx indicates the\n                     number of L2PT encapsulated PVST rst bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx indicates the\n                     number of L2PT encapsulated PVST rst bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx indicates the\n                     number of L2PT encapsulated PVST tcn bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx indicates the\n                     number of L2PT encapsulated PVST tcn bpdus transmitted on this SAP.')
sapTlsL2ptStatsStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusRx.setDescription('The value of sapTlsL2ptStatsStpConfigBpdusRx indicates the\n                     number of STP config bpdus received on this SAP.')
sapTlsL2ptStatsStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusTx.setDescription('The value of sapTlsL2ptStatsStpConfigBpdusTx indicates the\n                     number of STP config bpdus transmitted on this SAP.')
sapTlsL2ptStatsStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusRx.setDescription('The value of sapTlsL2ptStatsStpRstBpdusRx indicates the\n                     number of STP rst bpdus received on this SAP.')
sapTlsL2ptStatsStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusTx.setDescription('The value of sapTlsL2ptStatsStpRstBpdusTx indicates the\n                     number of STP rst bpdus transmitted on this SAP.')
sapTlsL2ptStatsStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusRx.setDescription('The value of sapTlsL2ptStatsStpTcnBpdusRx indicates the\n                     number of STP tcn bpdus received on this SAP.')
sapTlsL2ptStatsStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusTx.setDescription('The value of sapTlsL2ptStatsStpTcnBpdusTx indicates the\n                     number of STP tcn bpdus transmitted on this SAP.')
sapTlsL2ptStatsPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusRx.setDescription('The value of sapTlsL2ptStatsPvstConfigBpdusRx indicates the\n                     number of PVST config bpdus received on this SAP.')
sapTlsL2ptStatsPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusTx.setDescription('The value of sapTlsL2ptStatsPvstConfigBpdusTx indicates the\n                     number of PVST config bpdus transmitted on this SAP.')
sapTlsL2ptStatsPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusRx.setDescription('The value of sapTlsL2ptStatsPvstRstBpdusRx indicates the\n                     number of PVST rst bpdus received on this SAP.')
sapTlsL2ptStatsPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusTx.setDescription('The value of sapTlsL2ptStatsPvstRstBpdusTx indicates the\n                     number of PVST rst bpdus transmitted on this SAP.')
sapTlsL2ptStatsPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusRx.setDescription('The value of sapTlsL2ptStatsPvstTcnBpdusRx indicates the\n                     number of PVST tcn bpdus received on this SAP.')
sapTlsL2ptStatsPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusTx.setDescription('The value of sapTlsL2ptStatsPvstTcnBpdusTx indicates the\n                     number of PVST tcn bpdus transmitted on this SAP.')
sapTlsL2ptStatsOtherBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusRx.setDescription('The value of sapTlsL2ptStatsOtherBpdusRx indicates the\n                     number of other bpdus received on this SAP.')
sapTlsL2ptStatsOtherBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusTx.setDescription('The value of sapTlsL2ptStatsOtherBpdusTx indicates the\n                     number of other bpdus transmitted on this SAP.')
sapTlsL2ptStatsOtherL2ptBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusRx.setDescription('The value of sapTlsL2ptStatsOtherL2ptBpdusRx indicates the\n                     number of other L2PT bpdus received on this SAP.')
sapTlsL2ptStatsOtherL2ptBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusTx.setDescription('The value of sapTlsL2ptStatsOtherL2ptBpdusTx indicates the\n                     number of other L2PT bpdus transmitted on this SAP.')
sapTlsL2ptStatsOtherInvalidBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusRx.setDescription('The value of sapTlsL2ptStatsOtherInvalidBpdusRx indicates the\n                     number of other invalid bpdus received on this SAP.')
sapTlsL2ptStatsOtherInvalidBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusTx.setDescription('The value of sapTlsL2ptStatsOtherInvalidBpdusTx indicates the\n                     number of other invalid bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapCdpBpdusRx indicates the\n                     number of L2PT encapsulated CDP bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapCdpBpdusTx indicates the\n                     number of L2PT encapsulated CDP bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapVtpBpdusRx indicates the\n                     number of L2PT encapsulated VTP bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapVtpBpdusTx indicates the\n                     number of L2PT encapsulated VTP bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapDtpBpdusRx indicates the\n                     number of L2PT encapsulated DTP bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapDtpBpdusTx indicates the\n                     number of L2PT encapsulated DTP bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPagpBpdusRx indicates the\n                     number of L2PT encapsulated PAGP bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapPagpBpdusTx indicates the\n                     number of L2PT encapsulated PAGP bpdus transmitted on this SAP.')
sapTlsL2ptStatsL2ptEncapUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusRx.setDescription('The value of sapTlsL2ptStatsL2ptEncapUdldBpdusRx indicates the\n                     number of L2PT encapsulated UDLD bpdus received on this SAP.')
sapTlsL2ptStatsL2ptEncapUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusTx.setDescription('The value of sapTlsL2ptStatsL2ptEncapUdldBpdusTx indicates the\n                     number of L2PT encapsulated UDLD bpdus transmitted on this SAP.')
sapTlsL2ptStatsCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusRx.setDescription('The value of sapTlsL2ptStatsCdpBpdusRx indicates the\n                     number of CDP bpdus received on this SAP.')
sapTlsL2ptStatsCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusTx.setDescription('The value of sapTlsL2ptStatsCdpBpdusTx indicates the\n                     number of CDP bpdus transmitted on this SAP.')
sapTlsL2ptStatsVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusRx.setDescription('The value of sapTlsL2ptStatsVtpBpdusRx indicates the\n                     number of VTP bpdus received on this SAP.')
sapTlsL2ptStatsVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusTx.setDescription('The value of sapTlsL2ptStatsVtpBpdusTx indicates the\n                     number of VTP bpdus transmitted on this SAP.')
sapTlsL2ptStatsDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusRx.setDescription('The value of sapTlsL2ptStatsDtpBpdusRx indicates the\n                     number of DTP bpdus received on this SAP.')
sapTlsL2ptStatsDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusTx.setDescription('The value of sapTlsL2ptStatsDtpBpdusTx indicates the\n                     number of DTP bpdus transmitted on this SAP.')
sapTlsL2ptStatsPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusRx.setDescription('The value of sapTlsL2ptStatsPagpBpdusRx indicates the\n                     number of PAGP bpdus received on this SAP.')
sapTlsL2ptStatsPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusTx.setDescription('The value of sapTlsL2ptStatsPagpBpdusTx indicates the\n                     number of PAGP bpdus transmitted on this SAP.')
sapTlsL2ptStatsUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusRx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusRx.setDescription('The value of sapTlsL2ptStatsUdldBpdusRx indicates the\n                     number of UDLD bpdus received on this SAP.')
sapTlsL2ptStatsUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusTx.setStatus('current')
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusTx.setDescription('The value of sapTlsL2ptStatsUdldBpdusTx indicates the\n                     number of UDLD bpdus transmitted on this SAP.')
sapEthernetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43), )
if mibBuilder.loadTexts: sapEthernetInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapEthernetInfoTable.setDescription('A table that contains Ethernet SAP information.')
sapEthernetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapEthernetInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapEthernetInfoEntry.setDescription('Information about a specific Ethernet SAP.')
sapEthernetLLFAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1, 1), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEthernetLLFAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapEthernetLLFAdminStatus.setDescription("sapEthernetLLFAdminStatus specifies whether or not Link-\n                    Loss Forwarding is enabled ('up'). When this object is set\n                    to 'up' the underlying port will be forced into the\n                    operationally 'down' state if the service is operationally\n                    'down', or any of the 'sdpBindPwPeerStatusBits' are set,\n                    and will set the underlying port's\n                    tmnxPortEtherReasonDownFlags 'linklossFwd' bit. Setting\n                    this object to 'down' will clear the 'linklossFwd' reason.\n                    sapEthernetLLFAdminStatus can only be enabled on saps \n                    configured for an EPIPE service using an Ethernet \n                    port with the tmnxPortEncapType set to 'nullEncap.'")
sapEthernetLLFOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEthernetLLFOperStatus.setStatus('current')
if mibBuilder.loadTexts: sapEthernetLLFOperStatus.setDescription("sapEthernetLLFOperStatus indicates whether or not the\n                    underlying port is forced operationally 'down' due to the\n                    service being operationally 'down' or an\n                    sdpBindPwPeerStatusBits bit is set. \n                    sapEthernetLLFOperStatus is set to 'fault' when the \n                    sapEthernetLLFAdminStatus is set to 'up,' and either a \n                    fault has occurred on the pseudo-wire, or the service is \n                    down, otherwise sapEthernetLLFOperStatus is set to 'clear.'")
msapPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44), )
if mibBuilder.loadTexts: msapPlcyTable.setStatus('current')
if mibBuilder.loadTexts: msapPlcyTable.setDescription('The msapPlcyTable has an entry for each managed SAP(MSAP) policy\n         configured in the system.')
msapPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"))
if mibBuilder.loadTexts: msapPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: msapPlcyEntry.setDescription('Each entry represents the configuration for a managed SAP(MSAP) policy.\n\n         The values for each entry will be used to populate the following\n         tables when the MSAP policy is applied to a MSAP:\n \n         ALCATEL-IND1-TIMETRA-SAP-MIB::sapBaseInfoTable\n         ALCATEL-IND1-TIMETRA-SAP-MIB::sapSubMgmtInfoTable\n        ')
msapPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 1), TNamedItem())
if mibBuilder.loadTexts: msapPlcyName.setStatus('current')
if mibBuilder.loadTexts: msapPlcyName.setDescription('The value of msapPlcyName specifies the name of the MSAP policy.')
msapPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: msapPlcyRowStatus.setDescription('The value of msapPlcyRowStatus is used for the creation\n         and deletion of MSAP policies.')
msapPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: msapPlcyLastChanged.setDescription('The value of msapPlcyLastChanged indicates the sysUpTime\n         at the time of the last modification of this entry.\n\n         If no changes were made to the entry since the last\n         re-initialization of the local network management subsystem,\n         then this object contains a zero value.')
msapPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: msapPlcyDescription.setDescription('The value of msapPlcyDescription specifies the description\n         of the MSAP policy.')
msapPlcyCpmProtPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 5), TCpmProtPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyCpmProtPolicyId.setStatus('current')
if mibBuilder.loadTexts: msapPlcyCpmProtPolicyId.setDescription("The value of msapPlcyCpmProtPolicyId specifies a CPM Protection\n         policy for the MSAP policy.\n         \n         If a corresponding policy is not defined in \n         TIMETRA-SECURITY-MIB::tmnxCpmProtPolTable, an 'inconsistentValue'\n         error will be returned.\n\n         A value of one specifies that the default CPM Protection\n         policy is associated with the Managed SAP.\n\n         This object is not supported on SR-1 and ESS-1, where the \n         value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is '5',\n         and 7710, where the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is\n         '7' or '9'. An attempt  to set msapPlcyCpmProtPolicyId to a non-zero \n         value on one of these unsupported chassis types will return\n         an 'inconsistentValue' error.")
msapPlcyCpmProtMonitorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyCpmProtMonitorMac.setStatus('current')
if mibBuilder.loadTexts: msapPlcyCpmProtMonitorMac.setDescription("The value of msapPlcyCpmProtMonitorMac specifies whether the \n          tmnxCpmProtPolPerSrcRateLimit of the CPM Protection policy,\n          as specified by msapPlcyCpmProtPolicyId, must be applied.\n         \n         If the value of msapPlcyCpmProtMonitorMac is 'true', the\n         per-source rate limit must be applied.\n         \n         If the value of msapPlcyCpmProtPolicyId is equal to zero,\n         the value of msapPlcyCpmProtMonitorMac is irrelevant and\n         will be ignored.\n\n         This object is not supported on SR-1 and ESS-1, where the \n         value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is '5',\n         and 7710, where the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisType is\n         '7' or '9'. An attempt  to set msapPlcyCpmProtMonitorMac to 'true' \n         on one of these unsupported chassis types will return an\n         'inconsistentValue' error.")
msapPlcySubMgmtDefSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSapId", 1), ("useString", 2))).clone('useString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubId.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubId.setDescription("The value of msapPlcySubMgmtDefSubId specifies what will be used as\n         the default subscriber identification applicable on the MSAP.\n\n         This value is used in case no other source (like Radius) provides a \n         subscriber identification string.\n\n         If the value of this object is set to 'useSapId', the SAP-id will\n         be used as the default subscriber identification string. In this case,\n         msapPlcySubMgmtDefSubIdStr must contain the empty string, so any\n         non-empty string in msapPlcySubMgmtDefSubIdStr will be set to an empty\n         string.\n         \n         If the value of this object is set to 'useString', the value of\n         msapPlcySubMgmtDefSubIdStr will be used as the default subscriber \n         identification string. In this case, an empty msapPlcySubMgmtDefSubIdStr\n         means that there is no default subscriber identification configured.")
msapPlcySubMgmtDefSubIdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubIdStr.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubIdStr.setDescription('The value of msapPlcySubMgmtDefSubIdStr specifies the default \n         subscriber identification string applicable on this MSAP.')
msapPlcySubMgmtDefSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubProfile.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubProfile.setDescription("The value of msapPlcySubMgmtDefSubProfile specifies the default\n         subscriber profile applicable on the MSAP.\n\n         If a corresponding profile is not defined in tmnxSubProfileTable, an \n         'inconsistentValue' error will be returned.\n\n         A value of 'default' is not allowed for this object.")
msapPlcySubMgmtDefSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 10), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSlaProfile.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtDefSlaProfile.setDescription("The value of msapPlcySubMgmtDefSlaProfile specifies the default SLA\n         profile applicable on the MSAP. \n\n         If a corresponding profile is not defined in tmnxSLAProfileTable, an \n         'inconsistentValue' error will be returned.")
msapPlcySubMgmtDefAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 11), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefAppProfile.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtDefAppProfile.setDescription("The value of msapPlcySubMgmtDefAppProfile specifies the default\n         application profile applicable on the MSAP. \n\n         If a corresponding profile is not defined in\n         TIMETRA-BSX-MIB::tmnxBsxAppProfTable, an 'inconsistentValue'\n         error will be returned.")
msapPlcySubMgmtSubIdPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 12), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtSubIdPlcy.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtSubIdPlcy.setDescription("The value of msapPlcySubMgmtSubIdPlcy specifies the subscriber \n         identification policy applicable on the MSAP.\n\n         If a corresponding profile is not defined in tmnxSubIdentPolicyTable,\n         an 'inconsistentValue' error will be returned.")
msapPlcySubMgmtSubscriberLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtSubscriberLimit.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtSubscriberLimit.setDescription('The value of msapPlcySubMgmtSubscriberLimit specifies the\n         maximum number of subscribers allowed for the MSAP.\n        \n         A value is 0 means there is no limit.\n\n         The values for the objects msapPlcySubMgmtProfiledTrafOnly,\n         msapPlcySubMgmtNonSubTrafSubProf, and\n         msapPlcySubMgmtNonSubTrafSlaProf are only meaningful when\n         the value of msapPlcySubMgmtSubscriberLimit is 1 and will not\n         be used when the value of msapPlcySubMgmtSubscriberLimit is \n         not 1.')
msapPlcySubMgmtProfiledTrafOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtProfiledTrafOnly.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtProfiledTrafOnly.setDescription("The value of msapPlcySubMgmtProfiledTrafOnly specifies\n         whether only profiled traffic is applicable for the MSAP.\n         If set to 'true', the MSAP queues will be deleted.\n         \n         The value of this object is only meaningful if\n         msapPlcySubMgmtSubscriberLimit is set to 1.")
msapPlcySubMgmtNonSubTrafSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubId.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubId.setDescription('The value of msapPlcySubMgmtNonSubTrafSubId specifies the\n         subscriber identification applicable on the MSAP for all\n         non-subscriber traffic.\n\n         The value of this object is only meaningful if\n         msapPlcySubMgmtSubscriberLimit is set to 1.')
msapPlcySubMgmtNonSubTrafSubProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 16), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubProf.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubProf.setDescription('The value of msapPlcySubMgmtNonSubTrafSubProf specifies the\n         subscriber profile applicable on the MSAP for all\n         non-subscriber traffic.\n         \n         The value of this object is only meaningful if\n         msapPlcySubMgmtSubscriberLimit is set to 1.')
msapPlcySubMgmtNonSubTrafSlaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSlaProf.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSlaProf.setDescription('The value of msapPlcySubMgmtNonSubTrafSlaProf specifies the\n         SLA profile applicable on the MSAP for all non-subscriber\n         traffic.\n\n         The value of this object is only meaningful if\n         msapPlcySubMgmtSubscriberLimit is set to 1.')
msapPlcySubMgmtNonSubTrafAppProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 18), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafAppProf.setStatus('current')
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafAppProf.setDescription('The value of msapPlcySubMgmtNonSubTrafAppProf specifies the\n         Application profile applicable on the MSAP for all \n         non-subscriber traffic.\n\n         The value of this object is only meaningful if\n         msapPlcySubMgmtSubscriberLimit is set to 1.')
msapPlcyAssociatedMsaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyAssociatedMsaps.setStatus('current')
if mibBuilder.loadTexts: msapPlcyAssociatedMsaps.setDescription('The value of msapPlcyAssociatedMsaps indicates the\n         number of MSAPs associated with this MSAP policy.')
msapTlsPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45), )
if mibBuilder.loadTexts: msapTlsPlcyTable.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyTable.setDescription('The msapTlsPlcyTable has an entry for each managed SAP (MSAP)\n         policy configured in the system.')
msapTlsPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1), )
msapPlcyEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyEntry"))
msapTlsPlcyEntry.setIndexNames(*msapPlcyEntry.getIndexNames())
if mibBuilder.loadTexts: msapTlsPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyEntry.setDescription('Each entry represents the VPLS-related configuration for a managed\n         SAP (MSAP) policy.\n\n         The values for each entry will be used to populate the following\n         VPLS-related tables when the MSAP policy is applied to a MSAP:\n \n         TIMETRA-SAP-MIB::sapTlsInfoTable\n         TIMETRA-SAP-MIB::sapTlsDhcpInfoTable\n         ALCATEL-IGMP-SNOOPING-MIB::tlsIgmpSnpgConfigTable\n        ')
msapTlsPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapTlsPlcyLastChanged.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyLastChanged.setDescription('The value of msapTlsPlcyLastChanged indicates the sysUpTime\n         at the time of the last modification of this entry.\n\n         If no changes were made to the entry since the last\n         re-initialization of the local network management subsystem,\n         then this object contains a zero value.')
msapTlsPlcySplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcySplitHorizonGrp.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcySplitHorizonGrp.setDescription('The value of msapTlsPlcySplitHorizonGrp specifies the name of the \n         split-horizon group for the MSAP.\n\n         If the name specified does not correspond to a tlsShgInfoEntry\n         for the VPLS service, the creation of the MSAP will fail.\n         Additionally, if msapTlsPlcySplitHorizonGrp is set to a new value,\n         the sapSplitHorizonGrp object for any existing MSAPs created by \n         this policy will not be updated.')
msapTlsPlcyArpReplyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledWithSubscrIdent", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyArpReplyAgent.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyArpReplyAgent.setDescription("The value of msapTlsPlcyArpReplyAgent specifies the status of the special\n         ARP response mechanism in the system for ARP requests destined to \n         static or dynamic hosts associated with the MSAP.\n\n         'disabled'               - the ARP reply function is not operational\n         'enabled'                - the ARP reply function is enabled without\n                                      subscriber identification.\n         'enabledWithSubscrIdent' - the ARP reply function is enabled\n                                      with subscriber identification.")
msapTlsPlcySubMgmtMacDaHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcySubMgmtMacDaHashing.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcySubMgmtMacDaHashing.setDescription('The value of msapTlsPlcySubMgmtMacDaHashing specifies whether\n         subscriber traffic egressing a LAG MSAP has its egress LAG\n         link selected by a function of the MAC destination address\n         instead of subscriber id.')
msapTlsPlcyDhcpLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpLeasePopulate.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpLeasePopulate.setDescription('The value of msapTlsPlcyDhcpLeasePopulate specifies the maximum number of\n         DHCP lease states allowed on the MSAP.')
msapTlsPlcyDhcpPrxyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 6), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyAdminState.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyAdminState.setDescription('The value of msapTlsPlcyDhcpPrxyAdminState specifies the desired \n         administrative state of the proxy server on the interface.')
msapTlsPlcyDhcpPrxyServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddrType.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddrType.setDescription('The value of msapTlsPlcyDhcpPrxyServAddrType specifies the address type\n        of msapTlsPlcyDhcpPrxyServAddr.')
msapTlsPlcyDhcpPrxyServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddr.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddr.setDescription('The value of msapTlsPlcyDhcpPrxyServAddr specifies the IP address of the\n         which will be used as the source address of the emulated DHCP server \n         in the context of the VPLS MSAP.\n                     \n         This address is mandatory for the proxy server capability and it \n         should be in the context of the subnet represented by the VPLS.')
msapTlsPlcyDhcpPrxyLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 315446399), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLeaseTime.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLeaseTime.setDescription('The value of msapTlsPlcyDhcpPrxyLeaseTime specifies, in seconds, how long\n         a DHCP client is allowed to use the offered IP address.\n                    \n         A value of 0 means the lease time provided by a RADIUS or an upstream\n         DHCP server will not be overridden. A value of \n         7 days (315446399 seconds) is used when RADIUS does not provide a\n         lease time.')
msapTlsPlcyDhcpPrxyLTRadOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLTRadOverride.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLTRadOverride.setDescription("The value of msapTlsPlcyDhcpPrxyLTRadOverride specifies whether or not the\n         lease time provided by the RADIUS server is presented to the DHCP \n         client.\n\n         By default the proxy-server will always make use of \n         msapTlsPlcyDhcpPrxyLeaseTime, regardless of what lease time information is\n         provided from the RADIUS server. When msapTlsPlcyDhcpPrxyLTRadOverride is\n         set to 'true', the proxy-server will use the lease time \n         information provided by the RADIUS server, regardless of the \n         configured lease time.")
msapTlsPlcyDhcpInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3))).clone('keep')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpInfoAction.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpInfoAction.setDescription("The value of msapTlsPlcyDhcpInfoAction specifies the DHCP option \n         reforwarding policy:\n\n         'replace' - replace existing information with configured \n                       information\n         'drop'    - discard messages with existing relay information if the\n                       option-82 information is also present\n         'keep'    - retain the existing relay information")
msapTlsPlcyDhcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("asciiTuple", 1), ("vlanAsciiTuple", 2))).clone('asciiTuple')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpCircuitId.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpCircuitId.setDescription('The value of msapTlsPlcyDhcpCircuitId specifies whether or not the \n         circuit-id suboption is present, and if it is present what\n         information goes in it:\n         \n         none           - the circuit-id suboption will not be part of\n                          the information option (Option 82).\n         asciiTuple     - the ASCII-encoded concatenated tuple consisting\n                          of the\n                              - access-node-identifier\n                              - service-id\n                              - interface-name\n                          is used.\n         vlanAsciiTuple - the format will include VLAN-id and dot1p bits\n                          in addition to what is included in ascii-tuple\n                          already.  The format is supported on dot1q and\n                          qinq encapsulated ports only.  Thus, when the\n                          option 82 bits are stripped, dot1p bits will be \n                          copied to the Ethernet header of an outgoing\n                          packet.')
msapTlsPlcyDhcpRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mac", 2), ("remote-id", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteId.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteId.setDescription("The value of msapTlsPlcyDhcpRemoteId specifies what information goes into\n         the remote-id suboption in the DHCP Relay packet.\n\n         If the value of this object is set to 'none', the remote-id suboption\n         will not be part of the information option (Option 82).\n\n         If the value of this object is set to 'mac', the MAC address of the\n         remote end is encoded in the suboption.\n\n         If the value of this object is set to 'remote-id', \n         msapTlsPlcyDhcpRemoteIdString will represent the remote-id.\n\n         By default, the remote-id value is none.")
msapTlsPlcyDhcpRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 14), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteIdString.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteIdString.setDescription("The value of msapTlsPlcyDhcpRemoteIdString specifies the remote-id. The\n         value of this object is ignored if msapTlsPlcyDhcpRemoteId does not have\n         the value of 'remote-id'.")
msapTlsPlcyDhcpVendorInclOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 15), Bits().clone(namedValues=NamedValues(("systemId", 0), ("clientMac", 1), ("serviceId", 2), ("sapId", 3))).clone(namedValues=NamedValues(("systemId", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorInclOpts.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorInclOpts.setDescription("The value of msapTlsPlcyDhcpVendorInclOpts specifies what is encoded in the\n         Alcatel-Lucent vendor specific sub-option of option 82.\n\n         The value of this object is only used when msapTlsPlcyDhcpInfoAction is\n         'replace'.")
msapTlsPlcyDhcpVendorOptStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 16), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorOptStr.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorOptStr.setDescription("The value of msapTlsPlcyDhcpVendorOptStr specifies the string that goes\n         into the Alcatel-Lucent vendor specific sub-option of option 82.\n\n         This string is only used when msapTlsPlcyDhcpInfoAction is set to\n         'replace'.")
msapTlsPlcyEgressMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyEgressMcastGroup.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyEgressMcastGroup.setDescription('The value of msapTlsPlcyEgressMcastGroup specifies the Egress Multicast\n         Group for the MSAP.')
msapTlsPlcyIgmpSnpgImportPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 18), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgImportPlcy.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgImportPlcy.setDescription('The value of msapTlsPlcyIgmpSnpgImportPlcy specifies the policy statement\n         that is be applied to all incoming IGMP messages on the MSAP.')
msapTlsPlcyIgmpSnpgFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 19), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgFastLeave.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgFastLeave.setDescription("The value of msapTlsPlcyIgmpSnpgFastLeave specifies\n         whether fast leave is allowed on this MSAP.\n         \n         If set to 'enabled', the system prunes the port on which an IGMP\n         'leave' message has been received without waiting for the Group\n         Specific Query to timeout.")
msapTlsPlcyIgmpSnpgSendQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 20), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgSendQueries.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgSendQueries.setDescription('The value of msapTlsPlcyIgmpSnpgSendQueries specifies\n         whether the system generates General Queries by itself on\n         the MSAP.')
msapTlsPlcyIgmpSnpgGenQueryIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgGenQueryIntv.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgGenQueryIntv.setDescription("The value of msapTlsPlcyIgmpSnpgGenQueryIntv specifies\n         the interval (in seconds) between two consecutive general queries sent\n         by the system on the MSAP.\n\n         The value of this object is only meaningful when the value of\n         msapTlsPlcyIgmpSnpgSendQueries is 'enabled'.")
msapTlsPlcyIgmpSnpgQueryRespIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgQueryRespIntv.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgQueryRespIntv.setDescription("The value of msapTlsPlcyIgmpSnpgQueryRespIntv specifies\n         the maximum response time (in seconds) advertised in IGMPv2/v3\n         queries.\n\n         The value of this object is only meaningful when the value of\n         msapTlsPlcyIgmpSnpgSendQueries is 'enabled'.")
msapTlsPlcyIgmpSnpgRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgRobustCount.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgRobustCount.setDescription("The value of msapTlsPlcyIgmpSnpgRobustCount specifies\n         the robustness variable on the MSAP.\n\n         This object allows tuning for the expected packet loss on the MSAP.\n         If a MSAP is expected to be lossy, the Robustness Variable may be\n         increased. IGMP snooping is robust to (Robustness Variable-1) packet\n         losses.\n\n         The value of this object is only meaningful when the value of\n         msapTlsPlcyIgmpSnpgSendQueries is 'enabled'.")
msapTlsPlcyIgmpSnpgLastMembIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgLastMembIntvl.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgLastMembIntvl.setDescription("The value of msapTlsPlcyIgmpSnpgLastMembIntvl specifies the \n         Max Response Time (in tenths of a second) used in\n         Group-Specific and Group-Source-Specific Queries sent in response\n         to 'leave' messages. This is also the amount of time between\n         Group-Specific Query messages.\n\n         This value may be tuned to modify the leave latency of the network.\n         A reduced value results in reduced time to detect the loss of the last\n         member of a group.")
msapTlsPlcyIgmpSnpgMaxNbrGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMaxNbrGrps.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMaxNbrGrps.setDescription('The value of msapTlsPlcyIgmpSnpgMaxNbrGrps specifies how many group\n         addresses are allowed for the MSAP.\n\n         The value 0 means that no limit is imposed.')
msapTlsPlcyIgmpSnpgMvrFromVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 26), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMvrFromVplsId.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMvrFromVplsId.setDescription("The value of msapTlsPlcyIgmpSnpgMvrFromVplsId specifies from which\n         VPLS the multicast streams corresponding to the groups learned\n         via the MSAP are copied.\n\n         Groups which cannot be joined to the corresponding MVR VPLS\n         (because MVR is not up or the configured MVR policy rejects the group)\n         copy the multicast streams from the local VPLS if IGMP snooping is up\n         (i.e. tlsIgmpSnpgCfgAdminState is 'enabled').")
msapTlsPlcyIgmpSnpgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 27), TmnxIgmpVersion().clone('version3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgVersion.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgVersion.setDescription('The value of msapTlsPlcyIgmpSnpgVersion specifies the version\n         of IGMP running on the MSAP.')
msapTlsPlcyIgmpSnpgMcacPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 28), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPlcyName.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPlcyName.setDescription('The value of msapTlsPlcyIgmpSnpgMcacPlcyName specifies the name\n         of the multicast CAC (Connection Admission Control) policy.')
msapTlsPlcyIgmpSnpgMcacUncnstBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacUncnstBW.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacUncnstBW.setDescription("The value of msapTlsPlcyIgmpSnpgMcacUncnstBW specifies the bandwidth\n         assigned for interface's multicast CAC policy traffic in kilo-bits per\n         second(kbps). \n\n         If the default value of '-1' is set, there is no constraint on\n         bandwidth allocated at the interface. \n\n         If the value of msapTlsPlcyIgmpSnpgMcacUncnstBW is set to '0' and if \n         a multicast CAC policy is assigned on the interface, then \n         no group (channel) from that policy is allowed on that interface.")
msapTlsPlcyIgmpSnpgMcacPrRsvMnBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPrRsvMnBW.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPrRsvMnBW.setDescription("The value of msapTlsPlcyIgmpSnpgMcacPrRsvMnBW specifies the bandwidth\n         pre-reserved for all the mandatory channels on a given interface\n         in kilo-bits per second(kbps). \n              \n         If the value of msapTlsPlcyIgmpSnpgMcacUncnstBW is '0', no mandatory\n         channels are allowed. If the value of msapTlsPlcyIgmpSnpgMcacPrRsvMnBW \n         is '-1', then all mandatory and optional channels are allowed.\n\n         If the value of msapTlsPlcyIgmpSnpgMcacPrRsvMnBW is equal to the \n         value of msapTlsPlcyIgmpSnpgMcacUncnstBW, then all the unconstrained \n         bandwidth on a given interface is allocated to mandatory channels \n         configured through multicast CAC policy on that interface and no \n         optional groups (channels) are allowed.\n\n         The value of msapTlsPlcyIgmpSnpgMcacPrRsvMnBW should always be less \n         than or equal to that of msapTlsPlcyIgmpSnpgMcacUncnstBW. An attempt \n         to set the value of msapTlsPlcyIgmpSnpgMcacPrRsvMnBW greater than \n         that of msapTlsPlcyIgmpSnpgMcacUncnstBW will result in \n         'inconsistentValue' error.")
msapIgmpSnpgMcacLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46), )
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelTable.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelTable.setDescription('The msapIgmpSnpgMcacLevelTable has an entry for each\n                 multicast CAC policy constraint level configured for\n                 a Managed SAP policy.')
msapIgmpSnpgMcacLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelId"))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelEntry.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelEntry.setDescription('Each row entry represents a multicast CAC policy\n                 bundle level constraints for a particular Managed\n                 SAP policy. Entries are created and deleted by\n                 the user.')
msapIgmpSnpgMcacLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelId.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelId.setDescription('The value of msapIgmpSnpgMcacLevelId indicates\n                 the level id of the multicast CAC policy bundle\n                 constraint.\n\n                 The value of level 1 has the highest priority and\n                 level 8 the lowest.')
msapIgmpSnpgMcacLevelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelRowStatus.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelRowStatus.setDescription('The value of msapIgmpSnpgMcacLevelRowStatus is\n                 used for creation and deletion of level constraint\n                 in a CAC for a Managed SAP policy.')
msapIgmpSnpgMcacLevelLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelLastChanged.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelLastChanged.setDescription('The value of msapIgmpSnpgMcacLevelLastChanged indicates\n                 the sysUpTime at the time of the last modification\n                 of this entry.\n\n                 If no changes were made to the entry since the last\n                 re-initialization of the local network management\n                 subsystem, then this object contains a zero value.')
msapIgmpSnpgMcacLevelBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 4), Unsigned32().clone(1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelBW.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelBW.setDescription('The value of msapIgmpSnpgMcacLevelBW specifies\n                 the bandwidth in kilo-bits per second (kbps) for\n                 the level.')
msapIgmpSnpgMcacLagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47), )
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTable.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTable.setDescription('The msapIgmpSnpgMcacLagTable has an entry for each lag\n                 port configured for a multicast CAC policy bundle configured\n                 for a Managed SAP policy.')
msapIgmpSnpgMcacLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagPortsDown"))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagEntry.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagEntry.setDescription('Each row entry represents a particular multicast CAC lag port\n                 constraints for a Managed SAP policy.. Entries are\n                 created and deleted by the user.')
msapIgmpSnpgMcacLagPortsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagPortsDown.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagPortsDown.setDescription('The value of msapIgmpSnpgMcacLagPortsDown indicates\n                 the configured number of ports in a lag group that are down.\n\n                 If the number of ports available in the lag is reduced by the  \n                 number of ports configured for msapIgmpSnpgMcacLagPortsDown\n                 object then bandwidth allowed for bundle will be updated to\n                 the value of msapIgmpSnpgMcacLevelBW indexed by\n                 msapIgmpSnpgMcacLagLevel value.')
msapIgmpSnpgMcacLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagRowStatus.setDescription('The value of msapIgmpSnpgMcacLagRowStatus is used for\n                 creation and deletion of lag constraint in a CAC policy.')
msapIgmpSnpgMcacLagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLastChanged.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLastChanged.setDescription('The value of msapIgmpSnpgMcacLagLastChanged indicates the \n                 sysUpTime at the time of the last modification of this entry.\n\n                 If no changes were made to the entry since the last\n                 re-initialization of the local network management subsystem,\n                 then this object contains a zero value.')
msapIgmpSnpgMcacLagLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLevel.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLevel.setDescription('The value of msapIgmpSnpgMcacLagLevel specifies the level\n                 id to use when the value of msapIgmpSnpgMcacLagPortsDown\n                 matches the actual number of ports down in a lag.\n    \n                 Using the value of msapIgmpSnpgMcacLagLevel as an index,\n                 the operational MSAP unconstrained bandwidth will be set\n                 to msapIgmpSnpgMcacLevelBW.\n\n                 By default, for all lag constraints the link level will\n                 be set to 1 at row creation.')
msapInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48), )
if mibBuilder.loadTexts: msapInfoTable.setStatus('current')
if mibBuilder.loadTexts: msapInfoTable.setDescription('A table that contains Managed SAP information.')
msapInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: msapInfoEntry.setStatus('current')
if mibBuilder.loadTexts: msapInfoEntry.setDescription('Information about a specific Managed SAP.')
msapInfoCreationSapPortEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 1), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoCreationSapPortEncapVal.setStatus('current')
if mibBuilder.loadTexts: msapInfoCreationSapPortEncapVal.setDescription("The value of msapInfoCreationSapPortEncapVal indicates\n                       the port encapsulation value of the SAP with a sapSubType\n                       value of 'capture' that created this MSAP.")
msapInfoCreationPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 2), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoCreationPlcyName.setStatus('current')
if mibBuilder.loadTexts: msapInfoCreationPlcyName.setDescription('The value of msapInfoCreationPlcyName indicates\n                      the value of the msapPlcyName object for MSAP policy\n                      used to create this MSAP.')
msapInfoReEvalPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 3), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msapInfoReEvalPolicy.setStatus('current')
if mibBuilder.loadTexts: msapInfoReEvalPolicy.setDescription("The value of msapInfoReEvalPolicy specifies whether\n                      to re-apply the Managed SAP policy associated with\n                      this MSAP.\n\n                      When a SET of this object is done with a value of\n                      'doAction', the system will attempt to re-apply the\n                      MSAP policy indicated by msapInfoCreationPlcyName.\n                      If this action is successful, 'noError' will be returned.\n                      If this action is unsuccessful, an 'inconsistentValue'\n                      error will be returned. Attempting to SET this object with\n                      a value of 'notApplicable' will have no effect and will\n                      return 'noError'.\n\n                      SNMP GET and GETNEXT requests on this object will \n                      return 'notApplicable'.")
msapInfoLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoLastChanged.setStatus('current')
if mibBuilder.loadTexts: msapInfoLastChanged.setDescription('The value of msapInfoLastChanged indicates the \n                 sysUpTime at the time of the last modification of this entry.\n\n                 If no changes were made to the entry since the last\n                 re-initialization of the local network management subsystem,\n                 then this object contains a zero value.')
msapCaptureSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49), )
if mibBuilder.loadTexts: msapCaptureSapStatsTable.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsTable.setDescription("A table that contains statistics for SAPs \n                     with a sapSubType value of 'capture'.")
msapCaptureSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsTriggerType"))
if mibBuilder.loadTexts: msapCaptureSapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsEntry.setDescription("Statistics for a specific 'capture' SAP.")
msapCaptureSapStatsTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("pppoe", 2))))
if mibBuilder.loadTexts: msapCaptureSapStatsTriggerType.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsTriggerType.setDescription('The value of msapCaptureSapStatsTriggerType indicates the\n                       type of trigger packets this entry is for.')
msapCaptureSapStatsPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRecvd.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRecvd.setDescription("The value of msapCaptureSapStatsPktsRecvd indicates the\n                      number of packets received on this 'capture' SAP.")
msapCaptureSapStatsPktsRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRedirect.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRedirect.setDescription("The value of msapCaptureSapStatsPktsRedirect indicates the\n                      number of packets redirected on this 'capture' SAP.")
msapCaptureSapStatsPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsDropped.setStatus('current')
if mibBuilder.loadTexts: msapCaptureSapStatsPktsDropped.setDescription("The value of msapCaptureSapStatsPktsDropped indicates the\n                      number of packets dropped on this 'capture' SAP.")
sapTlsMrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50), )
if mibBuilder.loadTexts: sapTlsMrpTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTable.setDescription('The sapTlsMrpTable augments sapTlsInfoTable with\n                     attributes of the Multiple Registration Protocol (MRP)\n                     feature for the TLS SAP.')
sapTlsMrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1), )
sapTlsInfoEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpEntry"))
sapTlsMrpEntry.setIndexNames(*sapTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: sapTlsMrpEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpEntry.setDescription('MRP specific information about a SAP in a TLS.')
sapTlsMrpRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxPdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxPdus.setDescription('The value of sapTlsMrpRxPdus indicates the number of MRP packets\n        received on this SAP.')
sapTlsMrpDroppedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpDroppedPdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpDroppedPdus.setDescription('The value of sapTlsMrpDroppedPdus indicates the number of dropped MRP\n        packets on this SAP.')
sapTlsMrpTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxPdus.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxPdus.setDescription('The value of sapTlsMrpTxPdus indicates the number of MRP packets\n        transmitted on this SAP.')
sapTlsMrpRxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxNewEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxNewEvent.setDescription("The value of sapTlsMrpRxNewEvent indicates the number of 'New' MRP\n        events received on this SAP.")
sapTlsMrpRxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxJoinInEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxJoinInEvent.setDescription("The value of sapTlsMrpRxJoinInEvent indicates the number of 'Join-In'\n        MRP events received on this SAP.")
sapTlsMrpRxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxInEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxInEvent.setDescription("The value of sapTlsMrpRxInEvent indicates the number of 'In' MRP\n        events received on this SAP.")
sapTlsMrpRxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxJoinEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxJoinEmptyEvent.setDescription("The value of sapTlsMrpRxJoinEmptyEvent indicates the number of\n        'Join Empty' MRP events received on this SAP.")
sapTlsMrpRxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxEmptyEvent.setDescription("The value of sapTlsMrpRxEmptyEvent indicates the number of 'Empty'\n        MRP events received on this SAP.")
sapTlsMrpRxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxLeaveEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpRxLeaveEvent.setDescription("The value of sapTlsMrpRxLeaveEvent indicates the number of 'Leave'\n        MRP events received on this SAP.")
sapTlsMrpTxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxNewEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxNewEvent.setDescription("The value of sapTlsMrpTxNewEvent indicates the number of 'New' MRP\n        events transmitted on this SAP.")
sapTlsMrpTxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxJoinInEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxJoinInEvent.setDescription("The value of sapTlsMrpTxJoinInEvent indicates the number of 'Join-In'\n        MRP events transmitted on this SAP.")
sapTlsMrpTxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxInEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxInEvent.setDescription("The value of sapTlsMrpTxInEvent indicates the number of 'In' MRP\n        events transmitted on this SAP.")
sapTlsMrpTxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxJoinEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxJoinEmptyEvent.setDescription("The value of sapTlsMrpTxJoinEmptyEvent indicates the number of\n        'Join Empty' MRP events transmitted on this SAP.")
sapTlsMrpTxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxEmptyEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxEmptyEvent.setDescription("The value of sapTlsMrpTxEmptyEvent indicates the number of 'Empty'\n        MRP events transmitted on this SAP.")
sapTlsMrpTxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxLeaveEvent.setStatus('current')
if mibBuilder.loadTexts: sapTlsMrpTxLeaveEvent.setDescription("The value of sapTlsMrpTxLeaveEvent indicates the number of 'Leave'\n        MRP events transmitted on this SAP.")
sapTlsMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51), )
if mibBuilder.loadTexts: sapTlsMmrpTable.setStatus('current')
if mibBuilder.loadTexts: sapTlsMmrpTable.setDescription('This table contains an entry for each MAC address managed\n                    by Multiple MAC Registration Protocol (MMRP) on the SAP\n                    for the TLS.  Entries are dynamically created and\n                    destroyed by the system as the MAC Addresses are registered\n                    or declared in MMRP.')
sapTlsMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpMacAddr"))
if mibBuilder.loadTexts: sapTlsMmrpEntry.setStatus('current')
if mibBuilder.loadTexts: sapTlsMmrpEntry.setDescription('MMRP specific information about a MAC address managed by\n                    MMRP on a SAP in a TLS.')
sapTlsMmrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 1), MacAddress())
if mibBuilder.loadTexts: sapTlsMmrpMacAddr.setStatus('current')
if mibBuilder.loadTexts: sapTlsMmrpMacAddr.setDescription('The value of sapTlsMmrpMacAddr indicates an ethernet MAC address which\n        is being managed by MMRP on this SAP.')
sapTlsMmrpDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMmrpDeclared.setStatus('current')
if mibBuilder.loadTexts: sapTlsMmrpDeclared.setDescription('The value of sapTlsMmrpDeclared indicates whether the MRP applicant\n        on this SAP is declaring this MAC address on behalf of MMRP.')
sapTlsMmrpRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMmrpRegistered.setStatus('current')
if mibBuilder.loadTexts: sapTlsMmrpRegistered.setDescription('The value of sapTlsMmrpRegistered indicates whether the MRP registrant\n        on this SAP has notified MMRP of a registration of this MAC address.')
msapPlcyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 59), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: msapPlcyTblLastChgd.setDescription('The value of msapPlcyTblLastChgd indicates the\n                     sysUpTime at the time of the last modification of\n                     msapPlcyTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
msapTlsPlcyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapTlsPlcyTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: msapTlsPlcyTblLastChgd.setDescription('The value of msapTlsPlcyTblLastChgd indicates the\n                     sysUpTime at the time of the last modification of\n                     msapTlsPlcyTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
msapIgmpSnpgMcacLvlTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLvlTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLvlTblLastChgd.setDescription('The value of msapIgmpSnpgMcacLvlTblLastChgd indicates the\n                     sysUpTime at the time of the last modification of\n                     msapIgmpSnpgMcacLevelTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
msapIgmpSnpgMcacLagTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTblLastChgd.setDescription('The value of msapIgmpSnpgMcacLagTblLastChgd indicates the\n                     sysUpTime at the time of the last modification of\n                     msapIgmpSnpgMcacLagTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
msapInfoTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 63), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: msapInfoTblLastChgd.setDescription('The value of msapInfoTblLastChgd indicates the\n                     sysUpTime at the time of the last modification of\n                     msapInfoTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
sapNotifyPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 1), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sapNotifyPortId.setStatus('current')
if mibBuilder.loadTexts: sapNotifyPortId.setDescription('The ID of the access port where a SAP is defined.\n                     This object is used by the sapPortStateChangeProcessed\n                     notification to indicate the port ID that changed\n                     state and that resulted in having the associated\n                     sapStatusChanged events suppressed for all SAPs on\n                     that port.')
msapStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 2), ConfigStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: msapStatus.setStatus('current')
if mibBuilder.loadTexts: msapStatus.setDescription("The status of the Managed SAP which is used \n                     by the msapStateChanged notification to indicate \n                     what state the Managed SAP has entered: 'created',\n                     'modified', or 'deleted'.")
svcManagedSapCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcManagedSapCreationError.setStatus('current')
if mibBuilder.loadTexts: svcManagedSapCreationError.setDescription('The value of the object svcManagedSapCreationError\n                   indicates the reason why the system was unable to create\n                   the managed SAP.')
sapCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCreated.setStatus('obsolete')
if mibBuilder.loadTexts: sapCreated.setDescription('This trap is sent when a new row is created\n                     in the sapBaseInfoTable.')
sapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: sapDeleted.setDescription('This trap is sent when an existing row is\n                     deleted from the sapBaseInfoTable.')
sapStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperFlags"))
if mibBuilder.loadTexts: sapStatusChanged.setStatus('current')
if mibBuilder.loadTexts: sapStatusChanged.setDescription('The sapStatusChanged notification is generated\n                     when there is a change in the administrative or\n                     operating status of an SAP.\n                     \n                     Notice that this trap is not generated whenever\n                     the SAP operating status change is caused by an\n                     operating status change on the associated access\n                     port.')
sapTlsMacAddrLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmRaised.setDescription('The trap sapTlsMacAddrLimitAlarmRaised is sent whenever\n                     the number of MAC addresses stored in the FDB for this SAP\n                     increases to reach the watermark specified by the object\n                     svcTlsFdbTableFullHighWatermark.')
sapTlsMacAddrLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmCleared.setDescription('The trap sapTlsMacAddrLimitAlarmCleared is sent whenever\n                     the number of MAC addresses stored in the FDB for this SAP\n                     drops to the watermark specified by the object\n                     svcTlsFdbTableFullLowWatermark.')
sapTlsDHCPLseStEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDHCPClientLease"))
if mibBuilder.loadTexts: sapTlsDHCPLseStEntriesExceeded.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDHCPLseStEntriesExceeded.setDescription('The sapTlsDHCPLseStEntriesExceeded notification is\n                     generated when the number  of  DHCP  lease states\n                     entries on a given SAP reaches a user configurable\n                     upper limit given by sapTlsDhcpLeasePopulate.')
sapTlsDHCPLeaseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sapTlsDHCPLeaseStateOverride.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDHCPLeaseStateOverride.setDescription('The sapTlsDHCPLeaseStateOverride notification is\n                     generated when an existing DHCP lease state is\n                     overridden by a new lease state which has the same\n                     IP address but a different MAC address.')
sapTlsDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"))
if mibBuilder.loadTexts: sapTlsDHCPSuspiciousPcktRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: sapTlsDHCPSuspiciousPcktRcvd.setDescription('The sapTlsDHCPSuspiciousPcktRcvd notification is\n                     generated when a DHCP packet is received with suspicious\n                     content.')
sapDHCPLeaseEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: sapDHCPLeaseEntriesExceeded.setStatus('current')
if mibBuilder.loadTexts: sapDHCPLeaseEntriesExceeded.setDescription('The sapDHCPLeaseEntriesExceeded notification is generated\n                     when the number of DHCP lease state entries on a given SAP\n                     reaches a user configurable upper limit. This limit is\n                     given by sapTlsDhcpLeasePopulate for a TLS service and by\n                     ALCATEL-IND1-TIMETRA-VRTR-MIB::vRtrIfDHCPLeasePopulate for an IES or\n                     VPRN service.')
sapDHCPLseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sapDHCPLseStateOverride.setStatus('current')
if mibBuilder.loadTexts: sapDHCPLseStateOverride.setDescription('The sapDHCPLseStateOverride notification is generated when\n                     an existing DHCP lease state is overridden by a new lease\n                     state which has the same IP address but a different MAC\n                     address.')
sapDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"))
if mibBuilder.loadTexts: sapDHCPSuspiciousPcktRcvd.setStatus('current')
if mibBuilder.loadTexts: sapDHCPSuspiciousPcktRcvd.setDescription('The sapDHCPSuspiciousPcktRcvd notification is generated\n                     when a DHCP packet is received with suspicious content.')
sapDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sapDHCPLseStatePopulateErr.setStatus('current')
if mibBuilder.loadTexts: sapDHCPLseStatePopulateErr.setDescription('The sapDHCPLseStatePopulateErr notification indicates that\n                     the system was unable to update the DHCP Lease State table\n                     with the information contained in the DHCP ACK message.\n                     The DHCP ACK message has been discarded.')
hostConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"))
if mibBuilder.loadTexts: hostConnectivityLost.setStatus('current')
if mibBuilder.loadTexts: hostConnectivityLost.setDescription('The hostConnectivityLost notification indicates that\n                     the system lost the connectivity with the indicated host.')
hostConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"))
if mibBuilder.loadTexts: hostConnectivityRestored.setStatus('current')
if mibBuilder.loadTexts: hostConnectivityRestored.setDescription('The hostConnectivityRestored notification indicates that\n                     the system has restored the connectivity with the\n                     indicated host.')
sapReceivedProtSrcMac = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "protectedMacForNotify"))
if mibBuilder.loadTexts: sapReceivedProtSrcMac.setStatus('current')
if mibBuilder.loadTexts: sapReceivedProtSrcMac.setDescription("The sapReceivedProtSrcMac notification is generated when a\n                     protected source MAC is received on a TLS SAP with \n                     sapTlsRestProtSrcMac 'true' and \n                     sapTlsRestProtSrcMacAction 'alarm-only', or if the TLS\n                     SAP belongs to an SHG with tlsShgRestProtSrcMac 'true'\n                     and tlsShgRestProtSrcMacAction 'alarm-only'.")
sapStaticHostDynMacConflict = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"))
if mibBuilder.loadTexts: sapStaticHostDynMacConflict.setStatus('current')
if mibBuilder.loadTexts: sapStaticHostDynMacConflict.setDescription('The sapStaticHostDynMacConflict notification indicates\n                     that the system is trying to learn a conflicting IP-only\n                     static host dynamic MAC address\n                     (sapStaticHostDynMacAddress).')
sapTlsMacMoveExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"))
if mibBuilder.loadTexts: sapTlsMacMoveExceeded.setStatus('current')
if mibBuilder.loadTexts: sapTlsMacMoveExceeded.setDescription('The sapTlsMacMoveExceeded notification is generated\n                     when the SAP exceeds the TLS svcTlsMacMoveMaxRate.')
sapDHCPProxyServerError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"))
if mibBuilder.loadTexts: sapDHCPProxyServerError.setStatus('current')
if mibBuilder.loadTexts: sapDHCPProxyServerError.setDescription('The sapDHCPProxyServerError notification indicates that\n                     the system was unable to proxy DHCP requests.')
sapDHCPCoAError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"))
if mibBuilder.loadTexts: sapDHCPCoAError.setStatus('obsolete')
if mibBuilder.loadTexts: sapDHCPCoAError.setDescription('The sapDHCPCoAError notification indicates that\n                     the system was unable to process a Change of Authorization\n                     (CoA) request from a Radius server.')
sapDHCPSubAuthError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"))
if mibBuilder.loadTexts: sapDHCPSubAuthError.setStatus('obsolete')
if mibBuilder.loadTexts: sapDHCPSubAuthError.setDescription('The sapDHCPSubAuthError notification indicates that\n                     the system encountered a problem while trying to\n                     authenticate a subscriber.')
sapPortStateChangeProcessed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNotifyPortId"))
if mibBuilder.loadTexts: sapPortStateChangeProcessed.setStatus('current')
if mibBuilder.loadTexts: sapPortStateChangeProcessed.setDescription("The sapPortStateChangeProcessed notification indicates\n                     that the agent has finished processing an access port\n                     state change event, and that the operating status of\n                     all the affected SAP's has been updated accordingly.\n                     The value of the sapNotifyPortId object indicates the\n                     ID of the port that experienced the state change.")
sapDHCPLseStateMobilityError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDHCPLseStateMobilityError.setStatus('current')
if mibBuilder.loadTexts: sapDHCPLseStateMobilityError.setDescription('The sapDHCPLseStateMobilityError notification indicates\n                     that the system was unable to perform a mobility check\n                     for this lease state.')
sapCemPacketDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"))
if mibBuilder.loadTexts: sapCemPacketDefectAlarm.setStatus('current')
if mibBuilder.loadTexts: sapCemPacketDefectAlarm.setDescription("Generated when a CEM SAP alarm condition is detected.\n                      It is generated only when the packet error indicated\n                      by 'sapCemReportAlarmStatus' persists over a 3 second\n                      window.")
sapCemPacketDefectAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"))
if mibBuilder.loadTexts: sapCemPacketDefectAlarmClear.setStatus('current')
if mibBuilder.loadTexts: sapCemPacketDefectAlarmClear.setDescription("Generated when a CEM SAP alarm condition is cleared.\n                      It is generated only when the packet error indicated\n                      by 'sapCemReportAlarmStatus' no longer persists over\n                      a 10 second window.")
msapStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStatus"))
if mibBuilder.loadTexts: msapStateChanged.setStatus('current')
if mibBuilder.loadTexts: msapStateChanged.setDescription("The msapStateChanged notification is generated when a\n                    Managed SAP is 'created', 'modified', or 'deleted', with the\n                    value of msapStatus indicated which state it has entered.")
msapCreationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "svcManagedSapCreationError"))
if mibBuilder.loadTexts: msapCreationFailure.setStatus('current')
if mibBuilder.loadTexts: msapCreationFailure.setDescription('The trap msapCreationFailure is sent whenever\n                    the system fails to create a managed SAP.\n                    The svcId, svcVpnId, sapPortId and sapEncapValue are \n                    those of the capturing SAP.')
topologyChangeSapMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: topologyChangeSapMajorState.setStatus('current')
if mibBuilder.loadTexts: topologyChangeSapMajorState.setDescription('The    topologyChangeSapMajorState   notification    is\n                    generated  when  a  SAP has transitioned its state from\n                    learning  to  forwarding or from forwarding to blocking\n                    or broken. The spanning tree topology has been modified\n                    and   it   may   denote  loss  of  customer  access  or\n                    redundancy.   Check   the   new  topology  against  the\n                    provisioned  topology  to  determine  the  severity  of\n                    connectivity loss.')
newRootSap = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: newRootSap.setStatus('current')
if mibBuilder.loadTexts: newRootSap.setDescription('The  newRootSap  notification is  generated  when  the\n                     previous  root bridge has been aged out and a new root\n                     bridge  has  been elected. A new root bridge creates a\n                     new  spanning  tree topology and it may denote loss of\n                     customer  access or redundancy. Check the new topology\n                     against  the  provisioned  topology  to  determine the\n                     severity of connectivity loss.')
topologyChangeSapState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: topologyChangeSapState.setStatus('current')
if mibBuilder.loadTexts: topologyChangeSapState.setDescription('The topologyChangeSapState notification is   generated\n                     when  a  SAP  has  transitioned  state  to blocking or\n                     broken  from a state other than forwarding. This event\n                     complements     what     is     not     covered     by\n                     topologyChangeSapMajorState.    The    spanning   tree\n                     topology  has  been modified and it may denote loss of\n                     customer  access or redundancy. Check the new topology\n                     against the provisioned topology to determine severity\n                     of connectivity loss.')
receivedTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: receivedTCN.setStatus('current')
if mibBuilder.loadTexts: receivedTCN.setDescription('The receivedTCN notification is generated  when  a SAP\n                     has received TCN from another bridge. This bridge will\n                     either  have  its  configured  BPDU  with the topology\n                     change  flag  set  if  it is a root bridge, or it will\n                     pass  TCN  to  its root bridge. Eventually the address\n                     aging  timer  for the forwarding database will be made\n                     shorter  for  a  short  period of time. No recovery is\n                     needed.')
higherPriorityBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"))
if mibBuilder.loadTexts: higherPriorityBridge.setStatus('current')
if mibBuilder.loadTexts: higherPriorityBridge.setDescription("The higherPriorityBridge notification is generated when\n                     a  customer's device has been configured with a bridge\n                     priority  equal  to  zero. The SAP that the customer's\n                     device  is  connected  through will be blocked. Remove\n                     the  customer's  device  or reconfigure the customer's\n                     bridge priority with a value greater than zero.")
bridgedTLS = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: bridgedTLS.setStatus('obsolete')
if mibBuilder.loadTexts: bridgedTLS.setDescription('The  bridgedTLS  notification  is  generated  when   a\n                     configuration  BPDU  has been received that identifies\n                     that  another TLS with a different VPNID is attempting\n                     to   bridge   with   this   TLS.   At  least  one  ESR\n                     participating  within  one  of the TLS that is locally\n                     connected must have an active VCP for this to be seen.\n                     The  SAP  that  the  configuration BPDU is received on\n                     will  be  blocked  to prevent the TLS to TLS bridging.\n                     Reconfigure  the  bridged  TLS  into  a  single TLS or\n                     remove the connectivity.')
sapEncapPVST = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapEncapPVST.setStatus('current')
if mibBuilder.loadTexts: sapEncapPVST.setDescription('The sapEncapPVST  notification  is  generated when the\n                     SAP  receives  a BPDU that is PVST encapsulated, after\n                     having  received  BPDUs  that were 802.d encapsulated.\n                     The  SAP  BPDUs  will  also  be  PVST encapsulated. No\n                     recovery is needed.')
sapEncapDot1d = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapEncapDot1d.setStatus('current')
if mibBuilder.loadTexts: sapEncapDot1d.setDescription('The  sapEncapDot1d  notification is generated when the\n                     SAP  receives a BPDU that is 802.1d encapsulated after\n                     having received BPDUs that were PVST encapsulated. The\n                     SAP   BPDUs  will  also  be  802.1d  encapsulated.  No\n                     recovery is needed.')
sapReceiveOwnBpdu = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapReceiveOwnBpdu.setStatus('obsolete')
if mibBuilder.loadTexts: sapReceiveOwnBpdu.setDescription("The sapReceiveOwnBpdu notification is generated when the\n                     SAP STP received it's own BPDU.")
sapActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 30)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperProtocol"))
if mibBuilder.loadTexts: sapActiveProtocolChange.setStatus('current')
if mibBuilder.loadTexts: sapActiveProtocolChange.setDescription('The sapActiveProtocolChange notification is generated\n                     when  the  spanning  tree protocol on this SAP changes\n                     from  rstp  to  stp  or  vise  versa.  No  recovery is\n                     needed.')
tmnxStpRootGuardViolation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 35)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuardViolation"))
if mibBuilder.loadTexts: tmnxStpRootGuardViolation.setStatus('current')
if mibBuilder.loadTexts: tmnxStpRootGuardViolation.setDescription('The tmnxStpRootGuardViolation notification is\n                     generated when a SAP which has root-guard configured is\n                     trying to become root (has a better STP priority vector).\n                     The SAP will become alternate and traffic will be blocked.')
tmnxSapStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 37)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpException"))
if mibBuilder.loadTexts: tmnxSapStpExcepCondStateChng.setStatus('current')
if mibBuilder.loadTexts: tmnxSapStpExcepCondStateChng.setDescription('The tmnxSapStpExcepCondStateChng notification is\n                     generated when the value of the object sapTlsStpException\n                     has changed, i.e. when the exception condition \n                     changes on the indicated SAP.')
tmnxSapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1))
tmnxSapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2))
tmnxSap7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7450V6v0Compliance = tmnxSap7450V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSap7450V6v0Compliance.setDescription('The compliance statement for management of services SAPs\n         on Alcatel 7450 ESS series systems.')
tmnxSap7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapAtmV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxTlsMsapPppoeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIpV6FilterV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7750V6v0Compliance = tmnxSap7750V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSap7750V6v0Compliance.setDescription('The compliance statement for management of services SAPs\n         on Alcatel 7750 SR series systems.')
tmnxSap7710V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapAtmV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxTlsMsapPppoeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIpV6FilterV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7710V6v0Compliance = tmnxSap7710V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSap7710V6v0Compliance.setDescription('The compliance statement for management of services SAPs\n         on Alcatel 7710 SR series systems.')
tmnxSapV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNumEntries"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressVlanTranslationId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapMirrorStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIesIfIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCustMultSvcSite"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressQosSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQosSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressSharedQueuePolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressMatchQinQDot1PBits"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTodSuite"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngUseMultipointShared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQinQMarkTopOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressAggRateLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEndPoint"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressVlanTranslation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCpmProtPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCpmProtMonitorMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressFrameBasedAccounting"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEthernetLLFAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEthernetLLFOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofIpAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapV6v0Group = tmnxSapV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapV6v0Group.setDescription('The group of objects supporting management of Sap\n         general capabilities on Alcatel 7x50 SR series systems.')
tmnxSapTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortNum"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPathCost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRapidStart"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpBpduEncap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperBpduEncap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsNumMacAddresses"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsNumStaticMacAddresses"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperEdge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAdminPointToPoint"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortRole"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAutoEdge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacPinning"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsArpReplyAgent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpException"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsAuthenticationPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptTermination"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsBpduTranslation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuard"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInsideRegion"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsEgressMcastGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestProtSrcMacAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRxdDesigBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuardViolation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvSrcIp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvInterval"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtMsti"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptForceBoundary"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsLimitMacMoveLevel"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsBpduTransOper"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDefMsapPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptProtocols"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptForceProtocols"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpMsapTrigger"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpRemoteId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpJoinTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpLeaveTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpLeaveAllTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpPeriodicTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpPeriodicEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapTlsV6v0Group = tmnxSapTlsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapTlsV6v0Group.setDescription('The group of objects supporting management of Sap\n         TLS capabilities on Alcatel 7x50 SR series systems.')
tmnxSapAtmV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmEncapsulation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmIngressTrafficDescIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmEgressTrafficDescIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamAlarmCellHandling"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamTerminate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamPeriodicLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapAtmV6v0Group = tmnxSapAtmV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapAtmV6v0Group.setDescription('The group of objects supporting management of Sap\n         ATM capabilities on Alcatel 7x50 SR series systems.')
tmnxSapBaseV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipDroppedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipDroppedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedUncoloredPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedUncoloredOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsAuthenticationPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsAuthenticationPktsSuccess"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapBaseV6v0Group = tmnxSapBaseV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapBaseV6v0Group.setDescription('The group of objects supporting management of Sap\n         Base capabilities on Alcatel 7x50 SR series systems.')
tmnxSapQosV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsUncoloredPacketsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsUncoloredOctetsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQCBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQMBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQPIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQAdminPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQAdminCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQCBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQMBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQPIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAdminPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAdminCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAvgOverhead"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSSummedCIR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapQosV6v0Group = tmnxSapQosV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapQosV6v0Group.setDescription('The group of objects supporting management of Sap\n         Ingress/Egress QoS capabilities on Alcatel 7x50 SR series systems.')
tmnxSapStaticHostV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubscrIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvOperState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvChecks"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvReplies"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvReplyTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostDynMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRetailerSvcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRetailerIf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostFwdingState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostAncpString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubIdIsSapId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostIntermediateDestId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapStaticHostV6v0Group = tmnxSapStaticHostV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapStaticHostV6v0Group.setDescription('The group of objects supporting management of Sap\n         static host capabilities on Alcatel 7x50 SR series systems.')
tmnxSapDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpSnoop"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpOperLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpInfoAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpCircuitId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpRemoteIdString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyServerAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyLTRadiusOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpVendorIncludeOptions"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpVendorOptionString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntForwdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrForwdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntDropdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrDropdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntProxRadPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntProxLSPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsGenReleasePckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsGenForceRenPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDhcpOperLeasePopulate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapDhcpV6v0Group = tmnxSapDhcpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapDhcpV6v0Group.setDescription('The group of objects supporting management of Sap\n         TLS DHCP capabilities on Alcatel 7x50 SR series systems.')
tmnxSapPortIdV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedCustId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapPortIdV6v0Group = tmnxSapPortIdV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapPortIdV6v0Group.setDescription('The group of objects supporting management of Sap\n         Port ID capabilities on Alcatel 7x50 SR series systems.')
tmnxSapSubMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtSubIdentPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtSubscriberLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtProfiledTrafficOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSubIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSubProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSlaProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtMacDaHashing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubIdentString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapSubMgmtV6v0Group = tmnxSapSubMgmtV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapSubMgmtV6v0Group.setDescription('The group of objects supporting management of Sap\n         Sub-management capabilities on Alcatel 7x50 SR series systems.')
tmnxSapMstiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPriority"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPathCost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPortRole"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPortState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiDesignatedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMstiV6v0Group = tmnxSapMstiV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapMstiV6v0Group.setDescription('The group of objects supporting management of Sap\n         TLS MSTI capabilities on Alcatel 7x50 SR series systems.')
tmnxSapIppipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 110)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeCeInetAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeCeInetAddressType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeMacRefreshInterval"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeArpedMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeArpedMacAddressTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapIppipeV6v0Group = tmnxSapIppipeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapIppipeV6v0Group.setDescription('The group of objects supporting management of Sap\n         I-Pipe capabilities on Alcatel 7x50 SR series systems.')
tmnxSapPolicyV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 111)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsUncoloredPacketsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsUncoloredOctetsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsFwdOct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapPolicyV6v0Group = tmnxSapPolicyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapPolicyV6v0Group.setDescription('The group of objects supporting management of Sap\n         ingress/egress capabilities on Alcatel 7x50 SR series systems.')
tmnxSapCemV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemEndpointType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemBitrate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPayloadSize"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemJitterBuffer"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemDifferential"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemTimestampFreq"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarm"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemLocalEcid"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemRemoteMacAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemRemoteEcid"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsIngressForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsIngressDroppedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressDroppedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMissingPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressPktsReOrder"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressJtrBfrUnderruns"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressJtrBfrOverruns"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMisOrderDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMalformedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressLBitDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMultipleDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressESs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressSESs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressUASs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressFailureCounts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressUnderrunCounts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressOverrunCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapCemV6v0Group = tmnxSapCemV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapCemV6v0Group.setDescription('The group of objects supporting management of Sap\n         Cem capabilities on Alcatel 7x50 SR series systems.')
tmnxSapL2ptV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 113)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsLastClearedTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherL2ptBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherL2ptBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherInvalidBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherInvalidBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapUdldBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsUdldBpdusTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapL2ptV6v0Group = tmnxSapL2ptV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapL2ptV6v0Group.setDescription('The group of objects supporting management of Sap\n         TLS L2pt capabilities on Alcatel 7x50 SR series systems.')
tmnxSapMsapV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyCpmProtPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyCpmProtMonitorMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubIdStr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtSubIdPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtSubscriberLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtProfiledTrafOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSubId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSubProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSlaProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyAssociatedMsaps"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcySplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyArpReplyAgent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcySubMgmtMacDaHashing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyServAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyServAddrType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyLTRadOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpInfoAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpCircuitId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpRemoteId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpRemoteIdString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpVendorInclOpts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpVendorOptStr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyEgressMcastGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgImportPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgFastLeave"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgSendQueries"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgGenQueryIntv"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgQueryRespIntv"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgRobustCount"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgLastMembIntvl"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMaxNbrGrps"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMvrFromVplsId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgVersion"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacPlcyName"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacPrRsvMnBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacUncnstBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagLevel"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoCreationSapPortEncapVal"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoCreationPlcyName"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoReEvalPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsRecvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsRedirect"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLvlTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMsapV6v0Group = tmnxSapMsapV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapMsapV6v0Group.setDescription('The group of objects supporting management of\n         managed SAP capabilities on Alcatel 7x50 SR series systems.')
tmnxSapMrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpDroppedPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxNewEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxNewEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpDeclared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMrpV6v0Group = tmnxSapMrpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapMrpV6v0Group.setDescription('The group of objects supporting management of Sap\n         MRP capabilities on Alcatel 7x50 SR series systems.')
tmnxTlsMsapPppoeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 117)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsPppoeMsapTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTlsMsapPppoeV6v0Group = tmnxTlsMsapPppoeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxTlsMsapPppoeV6v0Group.setDescription('The group of objects supporting PPPOE on Managed SAPs\n         feature on the Alcatel 7x50 SR series systems.')
tmnxSapIpV6FilterV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 118)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressIpv6FilterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapIpV6FilterV6v0Group = tmnxSapIpV6FilterV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapIpV6FilterV6v0Group.setDescription('The group of objects supporting management of Sap Ingress Policy\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSapBsxV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 119)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficAppProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafAppProf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapBsxV6v0Group = tmnxSapBsxV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapBsxV6v0Group.setDescription('The group of objects supporting management of BSX (Application\n         Assurance) capabilities on Alcatel 7x50 SR series systems.')
tmnxSapNotificationObjV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNotifyPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "svcManagedSapCreationError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapNotificationObjV6v0Group = tmnxSapNotificationObjV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapNotificationObjV6v0Group.setDescription('The group of objects supporting management of notifications\n         on Alcatel 7x50 SR series systems.')
tmnxSapObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 300)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpSnooping"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateRemainLseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateOption82"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStatePersistKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapObsoletedV6v0Group = tmnxSapObsoletedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapObsoletedV6v0Group.setDescription('The group of obsolete objects for the services feature\n         on Alcatel 7x50 SR series systems.')
tmnxSapNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 400)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStatusChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddrLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddrLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLeaseEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStateOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStatePopulateErr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "hostConnectivityLost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "hostConnectivityRestored"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapReceivedProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostDynMacConflict"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPProxyServerError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortStateChangeProcessed"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStateMobilityError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStateChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCreationFailure"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "topologyChangeSapMajorState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "newRootSap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "topologyChangeSapState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "receivedTCN"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "higherPriorityBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapPVST"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapDot1d"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxStpRootGuardViolation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStpExcepCondStateChng"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapNotifyGroup = tmnxSapNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSapNotifyGroup.setDescription('The group of obsolete notifications for the Sap feature\n         on Alcatel 7x50 SR series systems.')
tmnxSapCemNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPacketDefectAlarm"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPacketDefectAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapCemNotificationV6v0Group = tmnxSapCemNotificationV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSapCemNotificationV6v0Group.setDescription('The group of notifications supporting the CEM Sap feature\n         on Alcatel 7710 SR series systems.')
tmnxSapObsoletedNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 402)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCreated"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDeleted"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPLseStEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPLeaseStateOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPCoAError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPSubAuthError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "bridgedTLS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapReceiveOwnBpdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapObsoletedNotifyGroup = tmnxSapObsoletedNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSapObsoletedNotifyGroup.setDescription('The group of obsolete notifications for the Sap feature\n         on Alcatel 7x50 SR series systems.')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapPortIdIngQosSchedFwdOctets=sapPortIdIngQosSchedFwdOctets, sapEgrQosSchedStatsEntry=sapEgrQosSchedStatsEntry, sapBaseStatsEgressQchipForwardedInProfPackets=sapBaseStatsEgressQchipForwardedInProfPackets, sapIgQosPlcyForwardedInProfOctets=sapIgQosPlcyForwardedInProfOctets, sapDHCPCoAError=sapDHCPCoAError, sapTlsDhcpStatsSrvrForwdPckts=sapTlsDhcpStatsSrvrForwdPckts, sapType=sapType, sapIngSchedPlcyStatsTable=sapIngSchedPlcyStatsTable, msapTlsPlcyDhcpRemoteIdString=msapTlsPlcyDhcpRemoteIdString, receivedTCN=receivedTCN, sapIgQosPlcyId=sapIgQosPlcyId, sapSubMgmtNonSubTrafficSubProf=sapSubMgmtNonSubTrafficSubProf, sapIpipeMacAddress=sapIpipeMacAddress, sapIntendedIngressIpFilterId=sapIntendedIngressIpFilterId, sapBaseStatsTable=sapBaseStatsTable, tmnxSapMsapV6v0Group=tmnxSapMsapV6v0Group, sapBaseStatsIngressPchipOfferedLoPrioPackets=sapBaseStatsIngressPchipOfferedLoPrioPackets, sapTlsDhcpStatsTable=sapTlsDhcpStatsTable, sapTlsL2ptStatsDtpBpdusTx=sapTlsL2ptStatsDtpBpdusTx, sapStaticHostAncpString=sapStaticHostAncpString, sapAtmEncapsulation=sapAtmEncapsulation, sapAntiSpoofEntry=sapAntiSpoofEntry, sapCemLastMgmtChange=sapCemLastMgmtChange, sapIgQosPlcyForwardedInProfPackets=sapIgQosPlcyForwardedInProfPackets, sapTlsL2ptStatsL2ptEncapCdpBpdusRx=sapTlsL2ptStatsL2ptEncapCdpBpdusRx, sapEthernetLLFAdminStatus=sapEthernetLLFAdminStatus, higherPriorityBridge=higherPriorityBridge, sapIgQosPlcyDroppedLoPrioOctets=sapIgQosPlcyDroppedLoPrioOctets, sapTodMonitorEntry=sapTodMonitorEntry, sapIgQosPlcyDroppedHiPrioPackets=sapIgQosPlcyDroppedHiPrioPackets, sapCpmProtMonitorMac=sapCpmProtMonitorMac, sapBaseStatsIngressPchipOfferedUncoloredPackets=sapBaseStatsIngressPchipOfferedUncoloredPackets, sapCemLocalEcid=sapCemLocalEcid, sapEgrQosQueueId=sapEgrQosQueueId, msapTlsPlcyIgmpSnpgGenQueryIntv=msapTlsPlcyIgmpSnpgGenQueryIntv, sapBaseStatsIngressPchipDroppedOctets=sapBaseStatsIngressPchipDroppedOctets, sapAtmOamPeriodicLoopback=sapAtmOamPeriodicLoopback, sapTlsAuthenticationPolicy=sapTlsAuthenticationPolicy, sapIntendedEgressQosSchedPlcy=sapIntendedEgressQosSchedPlcy, sapEgrSchedPlcyPortStatsEntry=sapEgrSchedPlcyPortStatsEntry, sapTlsMrpRxEmptyEvent=sapTlsMrpRxEmptyEvent, sapTlsL2ptStatsPvstTcnBpdusTx=sapTlsL2ptStatsPvstTcnBpdusTx, sapTlsDHCPLseStEntriesExceeded=sapTlsDHCPLseStEntriesExceeded, sapNumEntries=sapNumEntries, msapTlsPlcyEntry=msapTlsPlcyEntry, sapTlsMmrpTable=sapTlsMmrpTable, sapIgQosPlcyQueueStatsOfferedLoPrioPackets=sapIgQosPlcyQueueStatsOfferedLoPrioPackets, sapEgrQosQueueStatsForwardedInProfPackets=sapEgrQosQueueStatsForwardedInProfPackets, sapTlsDiscardUnknownSource=sapTlsDiscardUnknownSource, sapIngressIpv6FilterId=sapIngressIpv6FilterId, sapTlsDhcpMsapTrigger=sapTlsDhcpMsapTrigger, tmnxSapObsoletedNotifyGroup=tmnxSapObsoletedNotifyGroup, sapTlsMstiDesignatedBridge=sapTlsMstiDesignatedBridge, sapAntiSpoofing=sapAntiSpoofing, sapDHCPSubAuthError=sapDHCPSubAuthError, msapPlcySubMgmtNonSubTrafSubProf=msapPlcySubMgmtNonSubTrafSubProf, sapPortIdEgrPortId=sapPortIdEgrPortId, sapTlsL2ptStatsOtherInvalidBpdusTx=sapTlsL2ptStatsOtherInvalidBpdusTx, bridgedTLS=bridgedTLS, sapSubMgmtNonSubTrafficAppProf=sapSubMgmtNonSubTrafficAppProf, sapCemStatsEgressMultipleDropped=sapCemStatsEgressMultipleDropped, sapEgrQosPlcyQueueStatsEntry=sapEgrQosPlcyQueueStatsEntry, msapTlsPlcyIgmpSnpgMaxNbrGrps=msapTlsPlcyIgmpSnpgMaxNbrGrps, sapDhcpInfoEntry=sapDhcpInfoEntry, sapDHCPSuspiciousPcktRcvd=sapDHCPSuspiciousPcktRcvd, sapTlsL2ptStatsPvstTcnBpdusRx=sapTlsL2ptStatsPvstTcnBpdusRx, sapIngUseMultipointShared=sapIngUseMultipointShared, sapPortIdEgrQosSchedStatsEntry=sapPortIdEgrQosSchedStatsEntry, tmnxSapTlsV6v0Group=tmnxSapTlsV6v0Group, sapPortIdIngPortId=sapPortIdIngPortId, sapTlsL2ptStatsPvstConfigBpdusRx=sapTlsL2ptStatsPvstConfigBpdusRx, sapIngQosSPIR=sapIngQosSPIR, sapCemPayloadSize=sapCemPayloadSize, sapTlsMmrpDeclared=sapTlsMmrpDeclared, sapStaticHostDynMacConflict=sapStaticHostDynMacConflict, sapIngQosQCIRAdaptation=sapIngQosQCIRAdaptation, sapTlsMrpRxJoinInEvent=sapTlsMrpRxJoinInEvent, msapTlsPlcyIgmpSnpgRobustCount=msapTlsPlcyIgmpSnpgRobustCount, sapIngQosQueueStatsDroppedLoPrioOctets=sapIngQosQueueStatsDroppedLoPrioOctets, sapEgQosPlcyDroppedInProfOctets=sapEgQosPlcyDroppedInProfOctets, sapTlsNumMacAddresses=sapTlsNumMacAddresses, sapDhcpInfoTable=sapDhcpInfoTable, msapTlsPlcyIgmpSnpgMcacPlcyName=msapTlsPlcyIgmpSnpgMcacPlcyName, sapIngQosSchedStatsTable=sapIngQosSchedStatsTable, sapTlsL2ptStatsTable=sapTlsL2ptStatsTable, msapInfoCreationSapPortEncapVal=msapInfoCreationSapPortEncapVal, sapIngressSharedQueuePolicy=sapIngressSharedQueuePolicy, msapCaptureSapStatsEntry=msapCaptureSapStatsEntry, sapIpipeCeInetAddressType=sapIpipeCeInetAddressType, sapAtmIngressTrafficDescIndex=sapAtmIngressTrafficDescIndex, sapTlsL2ptStatsL2ptEncapVtpBpdusRx=sapTlsL2ptStatsL2ptEncapVtpBpdusRx, sapTlsMacMoveNextUpTime=sapTlsMacMoveNextUpTime, sapEndPoint=sapEndPoint, sapTlsVpnId=sapTlsVpnId, sapIpipeMacRefreshInterval=sapIpipeMacRefreshInterval, msapIgmpSnpgMcacLvlTblLastChgd=msapIgmpSnpgMcacLvlTblLastChgd, tmnxSapPolicyV6v0Group=tmnxSapPolicyV6v0Group, sapEgrQosQPIRAdaptation=sapEgrQosQPIRAdaptation, msapInfoTable=msapInfoTable, sapTlsDhcpSnoop=sapTlsDhcpSnoop, sapTlsL2ptStatsL2ptEncapStpRstBpdusRx=sapTlsL2ptStatsL2ptEncapStpRstBpdusRx, sapStaticHostFwdingState=sapStaticHostFwdingState, tmnxSapCemNotificationV6v0Group=tmnxSapCemNotificationV6v0Group, sapCemStatsEgressOverrunCounts=sapCemStatsEgressOverrunCounts, sapTlsL2ptStatsStpTcnBpdusRx=sapTlsL2ptStatsStpTcnBpdusRx, sapIngQosQueueStatsDroppedHiPrioPackets=sapIngQosQueueStatsDroppedHiPrioPackets, sapEgQosPlcyQueueStatsDroppedOutProfPackets=sapEgQosPlcyQueueStatsDroppedOutProfPackets, sapEgrQosSName=sapEgrQosSName, sapEgrQosQId=sapEgrQosQId, sapBaseStatsIngressQchipForwardedInProfPackets=sapBaseStatsIngressQchipForwardedInProfPackets, sapIngQosQueueStatsForwardedInProfOctets=sapIngQosQueueStatsForwardedInProfOctets, sapAntiSpoofMacAddress=sapAntiSpoofMacAddress, sapTlsArpReplyAgent=sapTlsArpReplyAgent, sapCemStatsIngressDroppedPkts=sapCemStatsIngressDroppedPkts, sapStaticHostIntermediateDestId=sapStaticHostIntermediateDestId, sapEgressAggRateLimit=sapEgressAggRateLimit, sapTlsDhcpStatsGenForceRenPckts=sapTlsDhcpStatsGenForceRenPckts, sapTlsL2ptStatsOtherBpdusTx=sapTlsL2ptStatsOtherBpdusTx, sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx=sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx, sapTlsLimitMacMoveLevel=sapTlsLimitMacMoveLevel, sapEthernetLLFOperStatus=sapEthernetLLFOperStatus, sapEgQosPlcyForwardedOutProfOctets=sapEgQosPlcyForwardedOutProfOctets, sapIngSchedPlcyPortStatsEntry=sapIngSchedPlcyPortStatsEntry, sapTlsL2ptStatsL2ptEncapUdldBpdusTx=sapTlsL2ptStatsL2ptEncapUdldBpdusTx, sapSubMgmtDefSubIdent=sapSubMgmtDefSubIdent, msapTlsPlcySplitHorizonGrp=msapTlsPlcySplitHorizonGrp, sapIngQosQueueStatsDroppedHiPrioOctets=sapIngQosQueueStatsDroppedHiPrioOctets, sapSubMgmtInfoEntry=sapSubMgmtInfoEntry, sapIpipeInfoEntry=sapIpipeInfoEntry, sapIngQosQueueInfoTable=sapIngQosQueueInfoTable, sapTlsStpInConfigBpdus=sapTlsStpInConfigBpdus, sapTlsMstiTable=sapTlsMstiTable, sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx=sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx, sapStaticHostShcvReplies=sapStaticHostShcvReplies, sapStatusChanged=sapStatusChanged, sapEgQosPlcyForwardedInProfPackets=sapEgQosPlcyForwardedInProfPackets, sapIngQosSchedInfoTable=sapIngQosSchedInfoTable, sapOperStatus=sapOperStatus, sapCurrentEgressQosSchedPlcy=sapCurrentEgressQosSchedPlcy, sapCemTimestampFreq=sapCemTimestampFreq, sapBaseStatsIngressQchipForwardedOutProfOctets=sapBaseStatsIngressQchipForwardedOutProfOctets, sapBaseStatsIngressPchipOfferedUncoloredOctets=sapBaseStatsIngressPchipOfferedUncoloredOctets, sapEgrQosQCBS=sapEgrQosQCBS, tmnxSap7710V6v0Compliance=tmnxSap7710V6v0Compliance, msapPlcySubMgmtDefSubId=msapPlcySubMgmtDefSubId, sapTlsShcvAction=sapTlsShcvAction, sapTlsDhcpAdminState=sapTlsDhcpAdminState, sapCreated=sapCreated, tmnxSapNotificationObjV6v0Group=tmnxSapNotificationObjV6v0Group, msapTlsPlcyIgmpSnpgFastLeave=msapTlsPlcyIgmpSnpgFastLeave, sapTlsDhcpDescription=sapTlsDhcpDescription, sapIngQosSSummedCIR=sapIngQosSSummedCIR, sapTlsMstiLastMgmtChange=sapTlsMstiLastMgmtChange, sapIngQosQueueStatsUncoloredOctetsOffered=sapIngQosQueueStatsUncoloredOctetsOffered, sapStaticHostRowStatus=sapStaticHostRowStatus, tmnxSap7450V6v0Compliance=tmnxSap7450V6v0Compliance, sapIngQosSchedInfoEntry=sapIngQosSchedInfoEntry, sapLastMgmtChange=sapLastMgmtChange, sapTlsStpRapidStart=sapTlsStpRapidStart, msapTlsPlcyDhcpPrxyLTRadOverride=msapTlsPlcyDhcpPrxyLTRadOverride, sapTlsMacAddrLimitAlarmCleared=sapTlsMacAddrLimitAlarmCleared, sapEgrSchedPlcyPortStatsTable=sapEgrSchedPlcyPortStatsTable, tmnxSapNotifyObjs=tmnxSapNotifyObjs, tmnxSap7750V6v0Compliance=tmnxSap7750V6v0Compliance, sapRowStatus=sapRowStatus, sapBaseStatsLastClearedTime=sapBaseStatsLastClearedTime, sapStaticHostRetailerIf=sapStaticHostRetailerIf, sapCurrentEgressMacFilterId=sapCurrentEgressMacFilterId, sapPortIdEgrQosSchedName=sapPortIdEgrQosSchedName, sapIngQosQueueId=sapIngQosQueueId, msapTlsPlcySubMgmtMacDaHashing=msapTlsPlcySubMgmtMacDaHashing, sapAtmOamTerminate=sapAtmOamTerminate, sapTlsMstiDesignatedPort=sapTlsMstiDesignatedPort, sapBaseStatsIngressQchipDroppedLoPrioOctets=sapBaseStatsIngressQchipDroppedLoPrioOctets, sapIngressQosSchedulerPolicy=sapIngressQosSchedulerPolicy, sapEgrQosSchedInfoEntry=sapEgrQosSchedInfoEntry, tmnxSapStpExcepCondStateChng=tmnxSapStpExcepCondStateChng, sapCemStatsEgressESs=sapCemStatsEgressESs, sapEgQosPlcyQueueStatsDroppedOutProfOctets=sapEgQosPlcyQueueStatsDroppedOutProfOctets, sapIgQosPlcyQueueCustId=sapIgQosPlcyQueueCustId, sapEgrSchedPlcyPortStatsFwdPkt=sapEgrSchedPlcyPortStatsFwdPkt, msapTlsPlcyDhcpVendorOptStr=msapTlsPlcyDhcpVendorOptStr, sapIngSchedPlcyStatsFwdPkt=sapIngSchedPlcyStatsFwdPkt, msapPlcyDescription=msapPlcyDescription, sapTlsL2ptStatsL2ptEncapVtpBpdusTx=sapTlsL2ptStatsL2ptEncapVtpBpdusTx, sapTlsNumStaticMacAddresses=sapTlsNumStaticMacAddresses, sapEgrQosQueueStatsForwardedOutProfOctets=sapEgrQosQueueStatsForwardedOutProfOctets, sapEgrQosSOverrideFlags=sapEgrQosSOverrideFlags, sapEgrQosSRowStatus=sapEgrQosSRowStatus, sapTlsStpDesignatedBridge=sapTlsStpDesignatedBridge, sapCemPacketDefectAlarmClear=sapCemPacketDefectAlarmClear, sapCemRemoteMacAddr=sapCemRemoteMacAddr, tmnxSapBaseV6v0Group=tmnxSapBaseV6v0Group, sapEgQosPlcyQueueStatsDroppedInProfPackets=sapEgQosPlcyQueueStatsDroppedInProfPackets, sapTlsRestProtSrcMacAction=sapTlsRestProtSrcMacAction, sapTlsStpPriority=sapTlsStpPriority, sapIngQosQPIRAdaptation=sapIngQosQPIRAdaptation, sapTlsL2ptStatsL2ptEncapDtpBpdusTx=sapTlsL2ptStatsL2ptEncapDtpBpdusTx, sapTlsMrpRxInEvent=sapTlsMrpRxInEvent, sapTlsStpOperEdge=sapTlsStpOperEdge, msapTlsPlcyDhcpPrxyServAddrType=msapTlsPlcyDhcpPrxyServAddrType, sapEgrQosSPIR=sapEgrQosSPIR, tmnxSapAtmV6v0Group=tmnxSapAtmV6v0Group, sapTlsStpInBadBpdus=sapTlsStpInBadBpdus, sapIngQosQueueStatsForwardedOutProfPackets=sapIngQosQueueStatsForwardedOutProfPackets, sapIngQosQHiPrioOnly=sapIngQosQHiPrioOnly, sapTlsMstiPortRole=sapTlsMstiPortRole, sapEgQosPlcyForwardedInProfOctets=sapEgQosPlcyForwardedInProfOctets, sapTlsManagedVlanListEntry=sapTlsManagedVlanListEntry, sapReceivedProtSrcMac=sapReceivedProtSrcMac, sapTlsMrpJoinTime=sapTlsMrpJoinTime, sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx=sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx, sapTlsMstiPathCost=sapTlsMstiPathCost, sapBaseStatsIngressPchipDroppedPackets=sapBaseStatsIngressPchipDroppedPackets, sapBaseStatsIngressQchipDroppedLoPrioPackets=sapBaseStatsIngressQchipDroppedLoPrioPackets, sapTlsL2ptStatsPvstRstBpdusTx=sapTlsL2ptStatsPvstRstBpdusTx, sapTlsL2ptStatsOtherInvalidBpdusRx=sapTlsL2ptStatsOtherInvalidBpdusRx, sapTlsStpPortState=sapTlsStpPortState, sapAntiSpoofIpAddress=sapAntiSpoofIpAddress, sapTlsL2ptForceProtocols=sapTlsL2ptForceProtocols, sapSubMgmtDefSubProfile=sapSubMgmtDefSubProfile, msapTlsPlcyLastChanged=msapTlsPlcyLastChanged, sapDeleted=sapDeleted, sapTlsL2ptStatsStpConfigBpdusTx=sapTlsL2ptStatsStpConfigBpdusTx, sapSubMgmtProfiledTrafficOnly=sapSubMgmtProfiledTrafficOnly, sapStaticHostRetailerSvcId=sapStaticHostRetailerSvcId, msapPlcyCpmProtPolicyId=msapPlcyCpmProtPolicyId, sapTlsMrpTxLeaveEvent=sapTlsMrpTxLeaveEvent, msapCreationFailure=msapCreationFailure, sapTlsMacMoveExceeded=sapTlsMacMoveExceeded, sapSplitHorizonGrp=sapSplitHorizonGrp, sapEgrQosQueueInfoTable=sapEgrQosQueueInfoTable, sapTlsRestProtSrcMac=sapTlsRestProtSrcMac, sapIngrQosPlcyStatsTable=sapIngrQosPlcyStatsTable, sapIpipeArpedMacAddressTimeout=sapIpipeArpedMacAddressTimeout, sapReceiveOwnBpdu=sapReceiveOwnBpdu, tmnxSapPortIdV6v0Group=tmnxSapPortIdV6v0Group, sapBaseStatsEgressQchipForwardedInProfOctets=sapBaseStatsEgressQchipForwardedInProfOctets, sapTlsDhcpLseStateRemainLseTime=sapTlsDhcpLseStateRemainLseTime, sapCemStatsEgressFailureCounts=sapCemStatsEgressFailureCounts, msapStatus=msapStatus, sapTlsL2ptStatsLastClearedTime=sapTlsL2ptStatsLastClearedTime, sapTlsMrpTxInEvent=sapTlsMrpTxInEvent, sapCurrentEgressQosPolicyId=sapCurrentEgressQosPolicyId, sapSubMgmtSubscriberLimit=sapSubMgmtSubscriberLimit, sapEgrQosSchedStatsTable=sapEgrQosSchedStatsTable, sapPortIdIngQosSchedStatsTable=sapPortIdIngQosSchedStatsTable, sapEgrQosPlcyStatsEntry=sapEgrQosPlcyStatsEntry, sapTlsL2ptStatsOtherBpdusRx=sapTlsL2ptStatsOtherBpdusRx, sapTlsMstiPortState=sapTlsMstiPortState, msapPlcyName=msapPlcyName, sapTlsMstiPriority=sapTlsMstiPriority, msapTlsPlcyDhcpLeasePopulate=msapTlsPlcyDhcpLeasePopulate, sapVpnId=sapVpnId)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapIgQosPlcyQueuePlcyId=sapIgQosPlcyQueuePlcyId, sapTlsMvplsMaxVlanTag=sapTlsMvplsMaxVlanTag, sapIntendedIngressMacFilterId=sapIntendedIngressMacFilterId, sapTlsL2ptStatsPagpBpdusTx=sapTlsL2ptStatsPagpBpdusTx, msapCaptureSapStatsPktsRecvd=msapCaptureSapStatsPktsRecvd, sapCustMultSvcSite=sapCustMultSvcSite, sapTlsStpDesignatedPort=sapTlsStpDesignatedPort, sapTlsStpAdminStatus=sapTlsStpAdminStatus, sapTlsDhcpInfoTable=sapTlsDhcpInfoTable, sapCemStatsTable=sapCemStatsTable, msapCaptureSapStatsTriggerType=msapCaptureSapStatsTriggerType, sapCemRemoteEcid=sapCemRemoteEcid, sapCustId=sapCustId, sapSubType=sapSubType, sapStaticHostTable=sapStaticHostTable, sapIngQosQueueStatsOfferedHiPrioOctets=sapIngQosQueueStatsOfferedHiPrioOctets, sapStaticHostSubIdIsSapId=sapStaticHostSubIdIsSapId, sapTlsDhcpLseStateOption82=sapTlsDhcpLseStateOption82, msapPlcyTable=msapPlcyTable, sapIgQosPlcyQueueStatsOfferedHiPrioOctets=sapIgQosPlcyQueueStatsOfferedHiPrioOctets, msapTlsPlcyIgmpSnpgQueryRespIntv=msapTlsPlcyIgmpSnpgQueryRespIntv, sapEgQosPlcyDroppedInProfPackets=sapEgQosPlcyDroppedInProfPackets, sapTlsDHCPSuspiciousPcktRcvd=sapTlsDHCPSuspiciousPcktRcvd, msapIgmpSnpgMcacLagTblLastChgd=msapIgmpSnpgMcacLagTblLastChgd, sapSubMgmtDefSubIdentString=sapSubMgmtDefSubIdentString, tmnxSapL2ptV6v0Group=tmnxSapL2ptV6v0Group, sapEgrQosSCIR=sapEgrQosSCIR, tmnxSapV6v0Group=tmnxSapV6v0Group, sapEgQosPlcyQueueId=sapEgQosPlcyQueueId, sapIgQosPlcyQueueStatsOfferedHiPrioPackets=sapIgQosPlcyQueueStatsOfferedHiPrioPackets, sapTlsDhcpStatsClntProxLSPckts=sapTlsDhcpStatsClntProxLSPckts, sapEgressQosSchedulerPolicy=sapEgressQosSchedulerPolicy, sapTlsMrpRxJoinEmptyEvent=sapTlsMrpRxJoinEmptyEvent, sapTlsL2ptStatsStpRstBpdusTx=sapTlsL2ptStatsStpRstBpdusTx, sapTlsMvplsRowStatus=sapTlsMvplsRowStatus, sapBaseStatsEgressQchipForwardedOutProfPackets=sapBaseStatsEgressQchipForwardedOutProfPackets, sapIgQosPlcyQueueStatsForwardedInProfPackets=sapIgQosPlcyQueueStatsForwardedInProfPackets, sapTlsEgressMcastGroup=sapTlsEgressMcastGroup, sapTlsDefMsapPolicy=sapTlsDefMsapPolicy, msapPlcyLastChanged=msapPlcyLastChanged, sapTlsStpInTcnBpdus=sapTlsStpInTcnBpdus, sapAccountingPolicyId=sapAccountingPolicyId, sapIntendedIngressQosSchedPlcy=sapIntendedIngressQosSchedPlcy, sapCemStatsEgressMisOrderDropped=sapCemStatsEgressMisOrderDropped, sapTlsStpOutTcnBpdus=sapTlsStpOutTcnBpdus, sapBaseStatsAuthenticationPktsSuccess=sapBaseStatsAuthenticationPktsSuccess, sapTlsInfoTable=sapTlsInfoTable, msapTlsPlcyIgmpSnpgMcacPrRsvMnBW=msapTlsPlcyIgmpSnpgMcacPrRsvMnBW, sapCemJitterBuffer=sapCemJitterBuffer, sapIntendedEgressIpFilterId=sapIntendedEgressIpFilterId, sapEgrQosQCIRAdaptation=sapEgrQosQCIRAdaptation, sapTlsStpRootGuardViolation=sapTlsStpRootGuardViolation, sapIngQosQueueStatsForwardedOutProfOctets=sapIngQosQueueStatsForwardedOutProfOctets, sapAtmEgressTrafficDescIndex=sapAtmEgressTrafficDescIndex, sapPortIdEgrQosSchedCustId=sapPortIdEgrQosSchedCustId, sapIngSchedPlcyPortStatsPort=sapIngSchedPlcyPortStatsPort, sapSubMgmtDefAppProfile=sapSubMgmtDefAppProfile, sapBaseStatsIngressQchipForwardedInProfOctets=sapBaseStatsIngressQchipForwardedInProfOctets, sapCemStatsEgressMissingPkts=sapCemStatsEgressMissingPkts, sapTlsStpException=sapTlsStpException, sapCemStatsEgressMalformedPkts=sapCemStatsEgressMalformedPkts, sapCemPacketDefectAlarm=sapCemPacketDefectAlarm, sapEgQosPlcyQueueCustId=sapEgQosPlcyQueueCustId, sapCurrentEgressIpFilterId=sapCurrentEgressIpFilterId, topologyChangeSapMajorState=topologyChangeSapMajorState, sapTlsL2ptStatsL2ptEncapPagpBpdusRx=sapTlsL2ptStatsL2ptEncapPagpBpdusRx, sapIngQosSchedStatsForwardedPackets=sapIngQosSchedStatsForwardedPackets, sapIngressMacFilterId=sapIngressMacFilterId, sapIngQosQLastMgmtChange=sapIngQosQLastMgmtChange, sapAtmOamAlarmCellHandling=sapAtmOamAlarmCellHandling, msapPlcySubMgmtProfiledTrafOnly=msapPlcySubMgmtProfiledTrafOnly, sapActiveProtocolChange=sapActiveProtocolChange, sapDHCPLseStatePopulateErr=sapDHCPLseStatePopulateErr, PYSNMP_MODULE_ID=timetraSvcSapMIBModule, sapIngressQosPolicyId=sapIngressQosPolicyId, sapBaseStatsIngressQchipDroppedHiPrioPackets=sapBaseStatsIngressQchipDroppedHiPrioPackets, sapBaseStatsIngressPchipOfferedHiPrioOctets=sapBaseStatsIngressPchipOfferedHiPrioOctets, sapSubMgmtNonSubTrafficSlaProf=sapSubMgmtNonSubTrafficSlaProf, msapPlcyCpmProtMonitorMac=msapPlcyCpmProtMonitorMac, sapTlsDhcpOperLeasePopulate=sapTlsDhcpOperLeasePopulate, msapPlcySubMgmtDefAppProfile=msapPlcySubMgmtDefAppProfile, sapTlsMacAddrLimitAlarmRaised=sapTlsMacAddrLimitAlarmRaised, sapTlsL2ptStatsVtpBpdusRx=sapTlsL2ptStatsVtpBpdusRx, sapNotifyPortId=sapNotifyPortId, sapIngQosQueueStatsTable=sapIngQosQueueStatsTable, sapStaticHostDynMacAddress=sapStaticHostDynMacAddress, sapIngQosQueueStatsOfferedLoPrioPackets=sapIngQosQueueStatsOfferedLoPrioPackets, sapIngQosQId=sapIngQosQId, sapIngSchedPlcyPortStatsFwdOct=sapIngSchedPlcyPortStatsFwdOct, sapEgrQosPlcyQueueStatsTable=sapEgrQosPlcyQueueStatsTable, sapIesIfIndex=sapIesIfIndex, sapTlsStpInRstBpdus=sapTlsStpInRstBpdus, sapEgrSchedPlcyStatsTable=sapEgrSchedPlcyStatsTable, sapIpipeArpedMacAddress=sapIpipeArpedMacAddress, sapIngQosSchedCustId=sapIngQosSchedCustId, msapTlsPlcyDhcpRemoteId=msapTlsPlcyDhcpRemoteId, msapPlcySubMgmtDefSlaProfile=msapPlcySubMgmtDefSlaProfile, msapPlcyRowStatus=msapPlcyRowStatus, sapTlsDHCPLeaseStateOverride=sapTlsDHCPLeaseStateOverride, sapEgrQosQueueStatsDroppedInProfOctets=sapEgrQosQueueStatsDroppedInProfOctets, sapIngressIpFilterId=sapIngressIpFilterId, sapTlsPppoeMsapTrigger=sapTlsPppoeMsapTrigger, sapEgQosPlcyQueuePlcyId=sapEgQosPlcyQueuePlcyId, sapEgrSchedPlcyPortStatsPort=sapEgrSchedPlcyPortStatsPort, msapPlcySubMgmtDefSubIdStr=msapPlcySubMgmtDefSubIdStr, sapEgrQosQMBS=sapEgrQosQMBS, sapCurrentIngressMacFilterId=sapCurrentIngressMacFilterId, sapTlsL2ptStatsCdpBpdusTx=sapTlsL2ptStatsCdpBpdusTx, sapTlsStpOperProtocol=sapTlsStpOperProtocol, sapPortIdIngQosSchedStatsEntry=sapPortIdIngQosSchedStatsEntry, sapTlsMmrpEntry=sapTlsMmrpEntry, sapStaticHostAppProfile=sapStaticHostAppProfile, sapCemStatsEgressForwardedPkts=sapCemStatsEgressForwardedPkts, msapInfoEntry=msapInfoEntry, sapTlsL2ptProtocols=sapTlsL2ptProtocols, msapTlsPlcyDhcpInfoAction=msapTlsPlcyDhcpInfoAction, hostConnectivityLost=hostConnectivityLost, sapTlsL2ptStatsEntry=sapTlsL2ptStatsEntry, sapEgrQosSchedName=sapEgrQosSchedName, tmnxSapCompliances=tmnxSapCompliances, tmnxSapObjs=tmnxSapObjs, sapIgQosPlcyQueueStatsDroppedLoPrioPackets=sapIgQosPlcyQueueStatsDroppedLoPrioPackets, sapStaticHostShcvReplyTime=sapStaticHostShcvReplyTime, sapSubMgmtInfoTable=sapSubMgmtInfoTable, msapPlcySubMgmtNonSubTrafSlaProf=msapPlcySubMgmtNonSubTrafSlaProf, sapCemEndpointType=sapCemEndpointType, sapCemStatsEgressPktsReOrder=sapCemStatsEgressPktsReOrder, sapTlsDhcpProxyLeaseTime=sapTlsDhcpProxyLeaseTime, sapTlsDhcpLeaseStateEntry=sapTlsDhcpLeaseStateEntry, sapTlsDhcpRemoteIdString=sapTlsDhcpRemoteIdString, tmnxSapStaticHostV6v0Group=tmnxSapStaticHostV6v0Group, msapTlsPlcyEgressMcastGroup=msapTlsPlcyEgressMcastGroup, sapEthernetInfoEntry=sapEthernetInfoEntry, sapTlsL2ptStatsStpTcnBpdusTx=sapTlsL2ptStatsStpTcnBpdusTx, sapPortStateChangeProcessed=sapPortStateChangeProcessed, sapTlsL2ptStatsL2ptEncapDtpBpdusRx=sapTlsL2ptStatsL2ptEncapDtpBpdusRx, sapBaseStatsEgressQchipDroppedOutProfPackets=sapBaseStatsEgressQchipDroppedOutProfPackets, sapTodSuite=sapTodSuite, tmnxSapQosV6v0Group=tmnxSapQosV6v0Group, msapTlsPlcyDhcpPrxyLeaseTime=msapTlsPlcyDhcpPrxyLeaseTime, sapTlsDhcpProxyServerAddr=sapTlsDhcpProxyServerAddr, sapStaticHostIpAddress=sapStaticHostIpAddress, sapTlsMrpRxLeaveEvent=sapTlsMrpRxLeaveEvent, sapDHCPLseStateOverride=sapDHCPLseStateOverride, sapEgrQosSchedStatsForwardedOctets=sapEgrQosSchedStatsForwardedOctets, sapEgQosPlcyQueueStatsForwardedInProfOctets=sapEgQosPlcyQueueStatsForwardedInProfOctets, sapTlsBpduTransOper=sapTlsBpduTransOper, sapBaseStatsIngressPchipOfferedLoPrioOctets=sapBaseStatsIngressPchipOfferedLoPrioOctets, tmnxTlsMsapPppoeV6v0Group=tmnxTlsMsapPppoeV6v0Group, sapTlsMacMoveRateExcdLeft=sapTlsMacMoveRateExcdLeft, sapCemStatsEntry=sapCemStatsEntry, msapTlsPlcyIgmpSnpgSendQueries=msapTlsPlcyIgmpSnpgSendQueries, sapTlsMrpRxNewEvent=sapTlsMrpRxNewEvent, sapTlsStpOperBpduEncap=sapTlsStpOperBpduEncap, sapTlsMacAddressLimit=sapTlsMacAddressLimit, sapTlsMmrpMacAddr=sapTlsMmrpMacAddr, msapStateChanged=msapStateChanged, sapTlsDhcpStatsEntry=sapTlsDhcpStatsEntry, sapEgrQosQueueStatsForwardedOutProfPackets=sapEgrQosQueueStatsForwardedOutProfPackets, sapEgrQosSchedStatsForwardedPackets=sapEgrQosSchedStatsForwardedPackets, sapDHCPLeaseEntriesExceeded=sapDHCPLeaseEntriesExceeded, sapCurrentIngressQosSchedPlcy=sapCurrentIngressQosSchedPlcy, msapIgmpSnpgMcacLevelBW=msapIgmpSnpgMcacLevelBW, msapIgmpSnpgMcacLagEntry=msapIgmpSnpgMcacLagEntry, tmnxSapIpV6FilterV6v0Group=tmnxSapIpV6FilterV6v0Group, sapEgressIpv6FilterId=sapEgressIpv6FilterId, sapTlsShcvSrcIp=sapTlsShcvSrcIp, svcManagedSapCreationError=svcManagedSapCreationError, sapTlsMrpPeriodicEnabled=sapTlsMrpPeriodicEnabled, sapIgQosPlcyQueueStatsDroppedHiPrioOctets=sapIgQosPlcyQueueStatsDroppedHiPrioOctets, sapTlsMrpTxJoinEmptyEvent=sapTlsMrpTxJoinEmptyEvent, sapEgressMacFilterId=sapEgressMacFilterId, sapStaticHostSubProfile=sapStaticHostSubProfile, sapCollectAcctStats=sapCollectAcctStats, msapIgmpSnpgMcacLevelLastChanged=msapIgmpSnpgMcacLevelLastChanged, sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx=sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx, sapTlsL2ptStatsL2ptEncapUdldBpdusRx=sapTlsL2ptStatsL2ptEncapUdldBpdusRx, sapBaseStatsEgressQchipDroppedInProfOctets=sapBaseStatsEgressQchipDroppedInProfOctets, tmnxSapBsxV6v0Group=tmnxSapBsxV6v0Group, sapTlsStpBpduEncap=sapTlsStpBpduEncap, sapPortIdEgrQosSchedStatsTable=sapPortIdEgrQosSchedStatsTable, sapTlsL2ptTermination=sapTlsL2ptTermination, sapStaticHostShcvOperState=sapStaticHostShcvOperState, msapCaptureSapStatsTable=msapCaptureSapStatsTable, sapTlsBpduTranslation=sapTlsBpduTranslation, sapTlsDhcpLseStateCiAddr=sapTlsDhcpLseStateCiAddr, sapPortIdIngQosSchedCustId=sapPortIdIngQosSchedCustId, sapTlsMstiEntry=sapTlsMstiEntry, sapMirrorStatus=sapMirrorStatus, sapDescription=sapDescription, sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx=sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx, sapIgQosPlcyQueueStatsUncoloredPacketsOffered=sapIgQosPlcyQueueStatsUncoloredPacketsOffered, sapIgQosPlcyDroppedLoPrioPackets=sapIgQosPlcyDroppedLoPrioPackets, sapSubMgmtDefSlaProfile=sapSubMgmtDefSlaProfile, sapEgrQosQAdminCIR=sapEgrQosQAdminCIR, sapPortIdEgrQosSchedFwdOctets=sapPortIdEgrQosSchedFwdOctets, sapEgQosPlcyId=sapEgQosPlcyId, msapInfoReEvalPolicy=msapInfoReEvalPolicy, sapIngQosSOverrideFlags=sapIngQosSOverrideFlags, sapIgQosPlcyQueueStatsOfferedLoPrioOctets=sapIgQosPlcyQueueStatsOfferedLoPrioOctets, msapInfoCreationPlcyName=msapInfoCreationPlcyName, sapEgrQosQAdminPIR=sapEgrQosQAdminPIR, sapTlsDhcpStatsClntProxRadPckts=sapTlsDhcpStatsClntProxRadPckts, sapIgQosPlcyQueueStatsForwardedInProfOctets=sapIgQosPlcyQueueStatsForwardedInProfOctets, sapPortId=sapPortId, sapTlsL2ptStatsPvstRstBpdusRx=sapTlsL2ptStatsPvstRstBpdusRx, sapEgressFrameBasedAccounting=sapEgressFrameBasedAccounting, sapBaseStatsIngressPchipOfferedHiPrioPackets=sapBaseStatsIngressPchipOfferedHiPrioPackets, sapTlsDhcpStatsGenReleasePckts=sapTlsDhcpStatsGenReleasePckts, msapIgmpSnpgMcacLevelRowStatus=msapIgmpSnpgMcacLevelRowStatus, sapTlsDhcpStatsClntForwdPckts=sapTlsDhcpStatsClntForwdPckts, msapIgmpSnpgMcacLevelTable=msapIgmpSnpgMcacLevelTable, sapEthernetInfoTable=sapEthernetInfoTable, tmnxSapNotifyGroup=tmnxSapNotifyGroup, hostConnectivityRestored=hostConnectivityRestored, sapBaseStatsEgressQchipDroppedInProfPackets=sapBaseStatsEgressQchipDroppedInProfPackets, sapEgrQosQueueStatsForwardedInProfOctets=sapEgrQosQueueStatsForwardedInProfOctets, sapCemStatsEgressUASs=sapCemStatsEgressUASs, sapIngressMatchQinQDot1PBits=sapIngressMatchQinQDot1PBits, sapTlsL2ptStatsPvstConfigBpdusTx=sapTlsL2ptStatsPvstConfigBpdusTx, msapIgmpSnpgMcacLagTable=msapIgmpSnpgMcacLagTable, msapTlsPlcyIgmpSnpgVersion=msapTlsPlcyIgmpSnpgVersion, sapTlsDhcpVendorIncludeOptions=sapTlsDhcpVendorIncludeOptions, sapTlsMrpPeriodicTime=sapTlsMrpPeriodicTime, sapTlsMvplsPruneState=sapTlsMvplsPruneState, msapTlsPlcyArpReplyAgent=msapTlsPlcyArpReplyAgent, sapIngQosQMBS=sapIngQosQMBS, sapTlsDhcpCircuitId=sapTlsDhcpCircuitId, sapEgrQosQLastMgmtChange=sapEgrQosQLastMgmtChange, sapTlsDhcpLeaseStateTable=sapTlsDhcpLeaseStateTable, sapSubMgmtSubIdentPolicy=sapSubMgmtSubIdentPolicy, sapIgQosPlcyQueueStatsDroppedHiPrioPackets=sapIgQosPlcyQueueStatsDroppedHiPrioPackets, sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx=sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx, sapTlsManagedVlanListTable=sapTlsManagedVlanListTable, sapIngQosCustId=sapIngQosCustId, sapEgressIpFilterId=sapEgressIpFilterId, msapCaptureSapStatsPktsRedirect=msapCaptureSapStatsPktsRedirect, sapTlsStpInsideRegion=sapTlsStpInsideRegion, sapIngQosQueueStatsOfferedLoPrioOctets=sapIngQosQueueStatsOfferedLoPrioOctets, sapEgrQosPlcyStatsTable=sapEgrQosPlcyStatsTable, sapIngQosPlcyQueueStatsTable=sapIngQosPlcyQueueStatsTable, sapTlsStpRxdDesigBridge=sapTlsStpRxdDesigBridge, sapEgrSchedPlcyStatsEntry=sapEgrSchedPlcyStatsEntry, msapPlcySubMgmtSubIdPlcy=msapPlcySubMgmtSubIdPlcy, sapTlsL2ptStatsUdldBpdusRx=sapTlsL2ptStatsUdldBpdusRx, sapIngQosQRowStatus=sapIngQosQRowStatus, sapEncapPVST=sapEncapPVST, sapIngressVlanTranslationId=sapIngressVlanTranslationId, sapEgrQosSSummedCIR=sapEgrQosSSummedCIR, sapIpipeInfoTable=sapIpipeInfoTable, sapIgQosPlcyQueueStatsForwardedOutProfOctets=sapIgQosPlcyQueueStatsForwardedOutProfOctets, msapTlsPlcyDhcpPrxyServAddr=msapTlsPlcyDhcpPrxyServAddr, sapIgQosPlcyQueueId=sapIgQosPlcyQueueId, sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx=sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapTlsLimitMacMove=sapTlsLimitMacMove, sapEgrQosQRowStatus=sapEgrQosQRowStatus, sapCemDifferential=sapCemDifferential, sapTlsDhcpProxyLTRadiusOverride=sapTlsDhcpProxyLTRadiusOverride, sapTraps=sapTraps, msapTlsPlcyIgmpSnpgMcacUncnstBW=msapTlsPlcyIgmpSnpgMcacUncnstBW, newRootSap=newRootSap, sapCemStatsEgressUnderrunCounts=sapCemStatsEgressUnderrunCounts, sapTlsStpOutConfigBpdus=sapTlsStpOutConfigBpdus, sapCurrentIngressIpFilterId=sapCurrentIngressIpFilterId, sapBaseInfoTable=sapBaseInfoTable, sapIngQosQAdminCIR=sapIngQosQAdminCIR, sapEgrQosQAvgOverhead=sapEgrQosQAvgOverhead, sapCemInfoEntry=sapCemInfoEntry, sapTlsL2ptStatsCdpBpdusRx=sapTlsL2ptStatsCdpBpdusRx, sapTlsDhcpSnooping=sapTlsDhcpSnooping, sapCemInfoTable=sapCemInfoTable, sapTlsDhcpStatsSrvrSnoopdPckts=sapTlsDhcpStatsSrvrSnoopdPckts, sapTlsMvplsMgmtMsti=sapTlsMvplsMgmtMsti, sapIngQosSchedName=sapIngQosSchedName, sapEgrQosQueueStatsTable=sapEgrQosQueueStatsTable, sapEgQosPlcyDroppedOutProfOctets=sapEgQosPlcyDroppedOutProfOctets, sapTlsMvplsMgmtService=sapTlsMvplsMgmtService, sapStaticHostMacAddress=sapStaticHostMacAddress, sapTlsShcvInterval=sapTlsShcvInterval, sapTlsL2ptStatsStpRstBpdusRx=sapTlsL2ptStatsStpRstBpdusRx, sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx=sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx, msapPlcySubMgmtDefSubProfile=msapPlcySubMgmtDefSubProfile, sapTlsDhcpStatsClntDropdPckts=sapTlsDhcpStatsClntDropdPckts, timetraSvcSapMIBModule=timetraSvcSapMIBModule, sapTlsStpAutoEdge=sapTlsStpAutoEdge, sapIngQosQueueStatsDroppedLoPrioPackets=sapIngQosQueueStatsDroppedLoPrioPackets, sapAdminStatus=sapAdminStatus, sapEgrQosQueueStatsDroppedInProfPackets=sapEgrQosQueueStatsDroppedInProfPackets, sapTlsL2ptStatsStpConfigBpdusRx=sapTlsL2ptStatsStpConfigBpdusRx, sapBaseStatsEgressQchipForwardedOutProfOctets=sapBaseStatsEgressQchipForwardedOutProfOctets, sapIngQosQueueStatsOfferedHiPrioPackets=sapIngQosQueueStatsOfferedHiPrioPackets, sapIngQosQAdminPIR=sapIngQosQAdminPIR, sapIngQosQCBS=sapIngQosQCBS, sapTlsDhcpRemoteId=sapTlsDhcpRemoteId, sapTlsL2ptStatsOtherL2ptBpdusRx=sapTlsL2ptStatsOtherL2ptBpdusRx, sapIngSchedPlcyStatsFwdOct=sapIngSchedPlcyStatsFwdOct, sapEgQosPlcyQueueStatsForwardedOutProfPackets=sapEgQosPlcyQueueStatsForwardedOutProfPackets, sapTlsStpRootGuard=sapTlsStpRootGuard, sapCemStatsEgressJtrBfrOverruns=sapCemStatsEgressJtrBfrOverruns, sapDhcpOperLeasePopulate=sapDhcpOperLeasePopulate, sapBaseStatsIngressQchipForwardedOutProfPackets=sapBaseStatsIngressQchipForwardedOutProfPackets, sapTlsStpPortNum=sapTlsStpPortNum, sapCemStatsIngressForwardedPkts=sapCemStatsIngressForwardedPkts, sapTlsShcvSrcMac=sapTlsShcvSrcMac, sapIngQosPlcyQueueStatsEntry=sapIngQosPlcyQueueStatsEntry, sapCemStatsEgressSESs=sapCemStatsEgressSESs, sapIngSchedPlcyPortStatsTable=sapIngSchedPlcyPortStatsTable, sapCemReportAlarmStatus=sapCemReportAlarmStatus, sapIngQosQueueInfoEntry=sapIngQosQueueInfoEntry, sapIngrQosPlcyStatsEntry=sapIngrQosPlcyStatsEntry, sapEgrQosQOverrideFlags=sapEgrQosQOverrideFlags, sapEgrQosCustId=sapEgrQosCustId, sapTlsStpOutMstBpdus=sapTlsStpOutMstBpdus, tmnxSapSubMgmtV6v0Group=tmnxSapSubMgmtV6v0Group, sapCemStatsEgressDroppedPkts=sapCemStatsEgressDroppedPkts, sapTlsDhcpLseStateChAddr=sapTlsDhcpLseStateChAddr, sapIngQosQueueStatsForwardedInProfPackets=sapIngQosQueueStatsForwardedInProfPackets, sapIntendedEgressMacFilterId=sapIntendedEgressMacFilterId, sapStaticHostShcvChecks=sapStaticHostShcvChecks, sapTlsDhcpVendorOptionString=sapTlsDhcpVendorOptionString, sapTlsMmrpRegistered=sapTlsMmrpRegistered, sapTlsL2ptStatsOtherL2ptBpdusTx=sapTlsL2ptStatsOtherL2ptBpdusTx, sapIntendedIngressIpv6FilterId=sapIntendedIngressIpv6FilterId, msapPlcySubMgmtNonSubTrafAppProf=msapPlcySubMgmtNonSubTrafAppProf, msapTlsPlcyIgmpSnpgLastMembIntvl=msapTlsPlcyIgmpSnpgLastMembIntvl, sapIpipeCeInetAddress=sapIpipeCeInetAddress, sapTlsMrpEntry=sapTlsMrpEntry, sapStaticHostSlaProfile=sapStaticHostSlaProfile, sapIgQosPlcyQueueStatsUncoloredOctetsOffered=sapIgQosPlcyQueueStatsUncoloredOctetsOffered, tmnxSapMrpV6v0Group=tmnxSapMrpV6v0Group, sapEgrQosQHiPrioOnly=sapEgrQosQHiPrioOnly, tmnxSapCemV6v0Group=tmnxSapCemV6v0Group, sapTlsStpPortRole=sapTlsStpPortRole, sapIgQosPlcyForwardedOutProfPackets=sapIgQosPlcyForwardedOutProfPackets, tmnxSapGroups=tmnxSapGroups, sapTlsL2ptStatsDtpBpdusRx=sapTlsL2ptStatsDtpBpdusRx, sapEgrQosQueueStatsDroppedOutProfOctets=sapEgrQosQueueStatsDroppedOutProfOctets, sapTodMonitorTable=sapTodMonitorTable, sapIngressVlanTranslation=sapIngressVlanTranslation, sapTlsMacAgeing=sapTlsMacAgeing, sapPortIdIngQosSchedFwdPkts=sapPortIdIngQosSchedFwdPkts, sapSubMgmtAdminStatus=sapSubMgmtAdminStatus, sapAtmInfoTable=sapAtmInfoTable, sapCemBitrate=sapCemBitrate, sapTlsDhcpStatsSrvrDropdPckts=sapTlsDhcpStatsSrvrDropdPckts, sapDHCPProxyServerError=sapDHCPProxyServerError, sapIngQosSName=sapIngQosSName, sapSubMgmtNonSubTrafficSubIdent=sapSubMgmtNonSubTrafficSubIdent, sapEgrSchedPlcyStatsFwdOct=sapEgrSchedPlcyStatsFwdOct, msapCaptureSapStatsPktsDropped=msapCaptureSapStatsPktsDropped, sapTlsMvplsMinVlanTag=sapTlsMvplsMinVlanTag, sapIgQosPlcyQueueStatsDroppedLoPrioOctets=sapIgQosPlcyQueueStatsDroppedLoPrioOctets, sapTrapsPrefix=sapTrapsPrefix, sapTlsMrpTxJoinInEvent=sapTlsMrpTxJoinInEvent, sapTlsMrpDroppedPdus=sapTlsMrpDroppedPdus, sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx=sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx, sapEgressQosPolicyId=sapEgressQosPolicyId, sapTlsMrpLeaveTime=sapTlsMrpLeaveTime, sapIntendedEgressIpv6FilterId=sapIntendedEgressIpv6FilterId, sapIngQosSchedStatsForwardedOctets=sapIngQosSchedStatsForwardedOctets, sapTlsMrpTable=sapTlsMrpTable, sapEgrQosQueueInfoEntry=sapEgrQosQueueInfoEntry, sapBaseStatsEntry=sapBaseStatsEntry, sapAtmInfoEntry=sapAtmInfoEntry, sapTlsL2ptStatsL2ptEncapPagpBpdusTx=sapTlsL2ptStatsL2ptEncapPagpBpdusTx, tmnxSapDhcpV6v0Group=tmnxSapDhcpV6v0Group, sapBaseStatsIngressQchipDroppedHiPrioOctets=sapBaseStatsIngressQchipDroppedHiPrioOctets, sapCemCasTrunkFraming=sapCemCasTrunkFraming, msapPlcySubMgmtSubscriberLimit=msapPlcySubMgmtSubscriberLimit, topologyChangeSapState=topologyChangeSapState, sapIngQosSLastMgmtChange=sapIngQosSLastMgmtChange, sapPortIdIngQosSchedName=sapPortIdIngQosSchedName, sapEncapValue=sapEncapValue, sapTlsStpOutRstBpdus=sapTlsStpOutRstBpdus, sapEgQosPlcyForwardedOutProfPackets=sapEgQosPlcyForwardedOutProfPackets, sapLastStatusChange=sapLastStatusChange, sapIngSchedPlcyPortStatsFwdPkt=sapIngSchedPlcyPortStatsFwdPkt, msapPlcyTblLastChgd=msapPlcyTblLastChgd, sapEgQosPlcyDroppedOutProfPackets=sapEgQosPlcyDroppedOutProfPackets, sapTlsMacLearning=sapTlsMacLearning, sapStaticHostEntry=sapStaticHostEntry, msapIgmpSnpgMcacLagPortsDown=msapIgmpSnpgMcacLagPortsDown, sapPortIdEgrQosSchedFwdPkts=sapPortIdEgrQosSchedFwdPkts, sapTlsMrpRxPdus=sapTlsMrpRxPdus, sapTlsDhcpLseStatePersistKey=sapTlsDhcpLseStatePersistKey, msapInfoLastChanged=msapInfoLastChanged, sapTlsInfoEntry=sapTlsInfoEntry, sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx=sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx, sapTlsMrpTxNewEvent=sapTlsMrpTxNewEvent, sapSubMgmtMacDaHashing=sapSubMgmtMacDaHashing, sapTlsDhcpInfoEntry=sapTlsDhcpInfoEntry, sapIngQosSCIR=sapIngQosSCIR, sapAntiSpoofTable=sapAntiSpoofTable, msapPlcyEntry=msapPlcyEntry, msapInfoTblLastChgd=msapInfoTblLastChgd, sapEgressQinQMarkTopOnly=sapEgressQinQMarkTopOnly, sapTlsMacPinning=sapTlsMacPinning, sapIngQosSRowStatus=sapIngQosSRowStatus, msapTlsPlcyDhcpPrxyAdminState=msapTlsPlcyDhcpPrxyAdminState, sapOperFlags=sapOperFlags, sapCemReportAlarm=sapCemReportAlarm, sapTlsMrpTxEmptyEvent=sapTlsMrpTxEmptyEvent, msapPlcyAssociatedMsaps=msapPlcyAssociatedMsaps, sapBaseInfoEntry=sapBaseInfoEntry, sapEgrQosQueueStatsEntry=sapEgrQosQueueStatsEntry, sapTlsL2ptStatsL2ptEncapStpRstBpdusTx=sapTlsL2ptStatsL2ptEncapStpRstBpdusTx, sapCurrentIngressQosPolicyId=sapCurrentIngressQosPolicyId, sapDHCPLseStateMobilityError=sapDHCPLseStateMobilityError, sapIgQosPlcyQueueStatsForwardedOutProfPackets=sapIgQosPlcyQueueStatsForwardedOutProfPackets, sapTlsMrpTxPdus=sapTlsMrpTxPdus, sapTlsMrpLeaveAllTime=sapTlsMrpLeaveAllTime, tmnxSapMstiV6v0Group=tmnxSapMstiV6v0Group, sapCpmProtPolicyId=sapCpmProtPolicyId, msapIgmpSnpgMcacLevelEntry=msapIgmpSnpgMcacLevelEntry, msapTlsPlcyDhcpCircuitId=msapTlsPlcyDhcpCircuitId, sapTlsCustId=sapTlsCustId, sapIgQosPlcyDroppedHiPrioOctets=sapIgQosPlcyDroppedHiPrioOctets, sapCurrentEgressIpv6FilterId=sapCurrentEgressIpv6FilterId, sapTlsStpAdminPointToPoint=sapTlsStpAdminPointToPoint, sapIntendedIngressQosPolicyId=sapIntendedIngressQosPolicyId, msapTlsPlcyTable=msapTlsPlcyTable, sapEgrSchedPlcyPortStatsFwdOct=sapEgrSchedPlcyPortStatsFwdOct, sapTlsDhcpProxyAdminState=sapTlsDhcpProxyAdminState, sapTlsDhcpStatsClntSnoopdPckts=sapTlsDhcpStatsClntSnoopdPckts, tmnxSapObsoletedV6v0Group=tmnxSapObsoletedV6v0Group, msapTlsPlcyTblLastChgd=msapTlsPlcyTblLastChgd, sapIngQosSchedStatsEntry=sapIngQosSchedStatsEntry, sapEgQosPlcyQueueStatsForwardedInProfPackets=sapEgQosPlcyQueueStatsForwardedInProfPackets, sapBaseStatsAuthenticationPktsDiscarded=sapBaseStatsAuthenticationPktsDiscarded, sapIntendedEgressQosPolicyId=sapIntendedEgressQosPolicyId, msapTlsPlcyDhcpVendorInclOpts=msapTlsPlcyDhcpVendorInclOpts, sapTlsDhcpLeasePopulate=sapTlsDhcpLeasePopulate, msapTlsPlcyIgmpSnpgMvrFromVplsId=msapTlsPlcyIgmpSnpgMvrFromVplsId, sapEgQosPlcyQueueStatsDroppedInProfOctets=sapEgQosPlcyQueueStatsDroppedInProfOctets, sapEgQosPlcyQueueStatsForwardedOutProfOctets=sapEgQosPlcyQueueStatsForwardedOutProfOctets, sapEgrQosSchedInfoTable=sapEgrQosSchedInfoTable, sapIngQosQueueStatsEntry=sapIngQosQueueStatsEntry, sapTlsL2ptStatsL2ptEncapCdpBpdusTx=sapTlsL2ptStatsL2ptEncapCdpBpdusTx, sapTlsL2ptStatsVtpBpdusTx=sapTlsL2ptStatsVtpBpdusTx, sapTlsRestUnprotDstMac=sapTlsRestUnprotDstMac, tmnxStpRootGuardViolation=tmnxStpRootGuardViolation, msapTlsPlcyIgmpSnpgImportPlcy=msapTlsPlcyIgmpSnpgImportPlcy, sapTlsL2ptForceBoundary=sapTlsL2ptForceBoundary, tmnxSapConformance=tmnxSapConformance, sapCemStatsEgressLBitDropped=sapCemStatsEgressLBitDropped, sapBaseStatsCustId=sapBaseStatsCustId, sapEgrSchedPlcyStatsFwdPkt=sapEgrSchedPlcyStatsFwdPkt, sapTlsL2ptStatsUdldBpdusTx=sapTlsL2ptStatsUdldBpdusTx, sapStaticHostSubscrIdent=sapStaticHostSubscrIdent, sapTlsStpPathCost=sapTlsStpPathCost, sapCemStatsEgressJtrBfrUnderruns=sapCemStatsEgressJtrBfrUnderruns, tmnxSapIppipeV6v0Group=tmnxSapIppipeV6v0Group, sapTlsDhcpInfoAction=sapTlsDhcpInfoAction, sapCurrentIngressIpv6FilterId=sapCurrentIngressIpv6FilterId, sapTlsMvplsMgmtPortId=sapTlsMvplsMgmtPortId, msapIgmpSnpgMcacLevelId=msapIgmpSnpgMcacLevelId, sapBaseStatsEgressQchipDroppedOutProfOctets=sapBaseStatsEgressQchipDroppedOutProfOctets, sapIngSchedPlcyStatsEntry=sapIngSchedPlcyStatsEntry, msapIgmpSnpgMcacLagLevel=msapIgmpSnpgMcacLagLevel, msapIgmpSnpgMcacLagLastChanged=msapIgmpSnpgMcacLagLastChanged, msapPlcySubMgmtNonSubTrafSubId=msapPlcySubMgmtNonSubTrafSubId, sapEgrQosSLastMgmtChange=sapEgrQosSLastMgmtChange, sapTlsStpForwardTransitions=sapTlsStpForwardTransitions, sapTlsStpInMstBpdus=sapTlsStpInMstBpdus, sapIngQosQueueStatsUncoloredPacketsOffered=sapIngQosQueueStatsUncoloredPacketsOffered, sapEgrQosQueueStatsDroppedOutProfPackets=sapEgrQosQueueStatsDroppedOutProfPackets, sapCemUseRtpHeader=sapCemUseRtpHeader, sapEgrQosSchedCustId=sapEgrQosSchedCustId, sapEncapDot1d=sapEncapDot1d, sapIngQosQOverrideFlags=sapIngQosQOverrideFlags, sapTlsL2ptStatsPagpBpdusRx=sapTlsL2ptStatsPagpBpdusRx, sapIgQosPlcyForwardedOutProfOctets=sapIgQosPlcyForwardedOutProfOctets, msapIgmpSnpgMcacLagRowStatus=msapIgmpSnpgMcacLagRowStatus, sapTlsMvplsMgmtEncapValue=sapTlsMvplsMgmtEncapValue)
