#
# PySNMP MIB module UCD-DISKIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/UCD-DISKIO-MIB
# Produced by pysmi-1.1.3 at Tue Nov 30 02:15:49 2021
# On host fv-az33-471 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Counter32, NotificationType, Unsigned32, MibIdentifier, Integer32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Counter32", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
ucdDiskIOMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021, 13, 15))
ucdDiskIOMIB.setRevisions(('2016-04-04 00:00', '2005-04-20 00:00', '2002-02-13 00:00', '2000-01-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ucdDiskIOMIB.setRevisionsDescriptions(('Add 64-bit counter for busy micro-seconds.', 'Add 64 bit counters. Patch from Dan Nelson.', 'Add 1, 5 and 15-minute load average objects', 'SMIv2 version derived from older definitions contained\n         in the VEST-INTERNETT-MIB module.',))
if mibBuilder.loadTexts: ucdDiskIOMIB.setLastUpdated('201604040000Z')
if mibBuilder.loadTexts: ucdDiskIOMIB.setOrganization('University of California, Davis')
if mibBuilder.loadTexts: ucdDiskIOMIB.setContactInfo('This mib is no longer being maintained by the University of\n\t California and is now in life-support-mode and being\n\t maintained by the net-snmp project.  The best place to write\n\t for public questions about the net-snmp-coders mailing list\n\t at net-snmp-coders@lists.sourceforge.net.\n\n         postal:   Wes Hardaker\n                   P.O. Box 382\n                   Davis CA  95617\n\n         email:    net-snmp-coders@lists.sourceforge.net\n        ')
if mibBuilder.loadTexts: ucdDiskIOMIB.setDescription('This MIB module defines objects for disk IO statistics.')
diskIOTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1), )
if mibBuilder.loadTexts: diskIOTable.setStatus('current')
if mibBuilder.loadTexts: diskIOTable.setDescription('Table of IO devices and how much data they have read/written.')
diskIOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1), ).setIndexNames((0, "UCD-DISKIO-MIB", "diskIOIndex"))
if mibBuilder.loadTexts: diskIOEntry.setStatus('current')
if mibBuilder.loadTexts: diskIOEntry.setDescription('An entry containing a device and its statistics.')
diskIOIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOIndex.setStatus('current')
if mibBuilder.loadTexts: diskIOIndex.setDescription('Reference index for each observed device.')
diskIODevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIODevice.setStatus('current')
if mibBuilder.loadTexts: diskIODevice.setDescription('The name of the device we are counting/checking.')
diskIONRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIONRead.setStatus('current')
if mibBuilder.loadTexts: diskIONRead.setDescription('The number of bytes read from this device since boot.')
diskIONWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIONWritten.setStatus('current')
if mibBuilder.loadTexts: diskIONWritten.setDescription('The number of bytes written to this device since boot.')
diskIOReads = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOReads.setStatus('current')
if mibBuilder.loadTexts: diskIOReads.setDescription('The number of read accesses from this device since boot.')
diskIOWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOWrites.setStatus('current')
if mibBuilder.loadTexts: diskIOWrites.setDescription('The number of write accesses to this device since boot.')
diskIOLA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOLA1.setStatus('current')
if mibBuilder.loadTexts: diskIOLA1.setDescription('The 1 minute average load of disk (%)')
diskIOLA5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOLA5.setStatus('current')
if mibBuilder.loadTexts: diskIOLA5.setDescription('The 5 minute average load of disk (%)')
diskIOLA15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOLA15.setStatus('current')
if mibBuilder.loadTexts: diskIOLA15.setDescription('The 15 minute average load of disk (%)')
diskIONReadX = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIONReadX.setStatus('current')
if mibBuilder.loadTexts: diskIONReadX.setDescription('The number of bytes read from this device since boot.')
diskIONWrittenX = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIONWrittenX.setStatus('current')
if mibBuilder.loadTexts: diskIONWrittenX.setDescription('The number of bytes written to this device since boot.')
diskIOBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 15, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIOBusyTime.setStatus('current')
if mibBuilder.loadTexts: diskIOBusyTime.setDescription('The number of usecs the drive has been busy since boot.')
mibBuilder.exportSymbols("UCD-DISKIO-MIB", diskIONWritten=diskIONWritten, diskIOReads=diskIOReads, diskIOLA15=diskIOLA15, diskIOIndex=diskIOIndex, diskIONReadX=diskIONReadX, diskIOEntry=diskIOEntry, diskIONWrittenX=diskIONWrittenX, diskIOTable=diskIOTable, PYSNMP_MODULE_ID=ucdDiskIOMIB, ucdDiskIOMIB=ucdDiskIOMIB, diskIODevice=diskIODevice, diskIONRead=diskIONRead, diskIOLA5=diskIOLA5, diskIOWrites=diskIOWrites, diskIOLA1=diskIOLA1, diskIOBusyTime=diskIOBusyTime)
