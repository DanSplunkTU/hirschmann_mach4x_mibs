#
# PySNMP MIB module PRVT-JDSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-JDSU-MIB
# Produced by pysmi-1.1.0 at Mon Nov 15 19:59:44 2021
# On host fv-az36-522 platform Linux version 5.11.0-1020-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Integer32, ModuleIdentity, TimeTicks, MibIdentifier, ObjectIdentity, IpAddress, Counter64, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Integer32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter64", "NotificationType", "Unsigned32")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
prvtJdsuMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 137))
prvtJdsuMib.setRevisions(('2011-03-15 00:00', '2011-02-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtJdsuMib.setRevisionsDescriptions(('Add JDSU Loopback traps.', 'Initial version.',))
if mibBuilder.loadTexts: prvtJdsuMib.setLastUpdated('201103150000Z')
if mibBuilder.loadTexts: prvtJdsuMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtJdsuMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtJdsuMib.setDescription('This MIB provide control and analisys for JDSU functionality.')
prvtJdsuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 0))
prvtJdsuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1))
prvtJdsuConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2))
prvtJdsuLoopback = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1))
prvtJdsuLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1), )
if mibBuilder.loadTexts: prvtJdsuLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackTable.setDescription('This table holds the configuration for JDSU loopback')
prvtJdsuLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtJdsuLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackEntry.setDescription('NONE')
prvtJdsuLoopbackAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("forced", 2), ("remote", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtJdsuLoopbackAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackAdminStatus.setDescription('JDSU remote loopback admin status.\n        This can be used to either enable or disable JDSU loopback on a\n        certain interface.\n        Forced parameter is used for manually set loopback.\n        Remote parameter is used for JDSU remote operation.')
prvtJdsuLoopbackRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteMac.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteMac.setDescription('Remote MAC address of the device for JDSU loopback testing.')
prvtJdsuLoopbackRemoteInnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteInnerVlan.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteInnerVlan.setDescription('This is used as the VLAN tag in case of single encapsulated packets \n        or as the inner VLAN tag in case of dual encapsulated packets.')
prvtJdsuLoopbackRemoteOuterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 4), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteOuterVlan.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackRemoteOuterVlan.setDescription('The outer VLAN tag in case of dual encapsulated packets.')
prvtJdsuLoopbackOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtJdsuLoopbackOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackOperationalStatus.setDescription('JDSU remote loopback current operational status.')
prvtJdsuLoopbackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtJdsuLoopbackRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackRowStatus.setDescription('The status of the row entry.\n         The writable columns in a row can not be changed if the row\n         is active. Certain columns must have a valid value before a row\n         can be activated.')
prvtJdsuAdminStateChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 0, 1)).setObjects(("PRVT-JDSU-MIB", "prvtJdsuLoopbackAdminStatus"))
if mibBuilder.loadTexts: prvtJdsuAdminStateChange.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuAdminStateChange.setDescription('This trap should be sent whenever a JDSU admins state is changed\n                for a specific interface.')
prvtJdsuOperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 0, 2)).setObjects(("PRVT-JDSU-MIB", "prvtJdsuLoopbackOperationalStatus"))
if mibBuilder.loadTexts: prvtJdsuOperStateChange.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuOperStateChange.setDescription('This trap should be sent whenever a JDSU state is changed\n                on a specific interface.')
prvtJdsuCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2, 1))
prvtJdsuGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2, 2))
prvtJdsuLoopbackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2, 2, 1)).setObjects(("PRVT-JDSU-MIB", "prvtJdsuLoopbackAdminStatus"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackRemoteMac"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackRemoteInnerVlan"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackRemoteOuterVlan"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackOperationalStatus"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtJdsuLoopbackGroup = prvtJdsuLoopbackGroup.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackGroup.setDescription('Objects for the JDSU loopback group.')
prvtJdsuLoopbackNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2, 2, 2)).setObjects(("PRVT-JDSU-MIB", "prvtJdsuAdminStateChange"), ("PRVT-JDSU-MIB", "prvtJdsuOperStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtJdsuLoopbackNotificationsGroup = prvtJdsuLoopbackNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuLoopbackNotificationsGroup.setDescription('Objects for the Event Propagation notifications group.')
prvtJdsuCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 137, 2, 1, 1)).setObjects(("PRVT-JDSU-MIB", "prvtJdsuLoopbackGroup"), ("PRVT-JDSU-MIB", "prvtJdsuLoopbackNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtJdsuCompliance = prvtJdsuCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtJdsuCompliance.setDescription('The compliance statement for support of the private JDSU MIB module.')
mibBuilder.exportSymbols("PRVT-JDSU-MIB", prvtJdsuLoopbackGroup=prvtJdsuLoopbackGroup, prvtJdsuNotifications=prvtJdsuNotifications, prvtJdsuLoopbackRemoteMac=prvtJdsuLoopbackRemoteMac, prvtJdsuAdminStateChange=prvtJdsuAdminStateChange, prvtJdsuMib=prvtJdsuMib, prvtJdsuLoopbackRowStatus=prvtJdsuLoopbackRowStatus, prvtJdsuLoopbackOperationalStatus=prvtJdsuLoopbackOperationalStatus, PYSNMP_MODULE_ID=prvtJdsuMib, prvtJdsuConformance=prvtJdsuConformance, prvtJdsuLoopbackNotificationsGroup=prvtJdsuLoopbackNotificationsGroup, prvtJdsuLoopbackAdminStatus=prvtJdsuLoopbackAdminStatus, prvtJdsuGroups=prvtJdsuGroups, prvtJdsuOperStateChange=prvtJdsuOperStateChange, prvtJdsuObjects=prvtJdsuObjects, prvtJdsuLoopbackTable=prvtJdsuLoopbackTable, prvtJdsuLoopbackRemoteOuterVlan=prvtJdsuLoopbackRemoteOuterVlan, prvtJdsuCompliances=prvtJdsuCompliances, prvtJdsuLoopbackEntry=prvtJdsuLoopbackEntry, prvtJdsuLoopback=prvtJdsuLoopback, prvtJdsuLoopbackRemoteInnerVlan=prvtJdsuLoopbackRemoteInnerVlan, prvtJdsuCompliance=prvtJdsuCompliance)
