#
# PySNMP MIB module XCONNECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/XCONNECTION-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 20:17:31 2021
# On host fv-az77-612 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
SagemBoolean, = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, MibIdentifier, Bits, Integer32, NotificationType, Counter32, TimeTicks, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "NotificationType", "Counter32", "TimeTicks", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xconnection = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 108))
if mibBuilder.loadTexts: xconnection.setLastUpdated('0205220000Z')
if mibBuilder.loadTexts: xconnection.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
if mibBuilder.loadTexts: xconnection.setContactInfo('    ')
if mibBuilder.loadTexts: xconnection.setDescription('The MIB module describes connection in physical layer\n\tof transmission equipements such as pdh/sdh mux and cross connect.\n\tThis mib assumes that terminaison point are provided by other mibs,\n\tsuch as sdh.mib.\n\txconnection is a particular case of SubNetworkConnection defined \n\tin ETS 300 653')
link = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 108, 10))
xcon = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 108, 30))
class TrafficStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("working", 1), ("protection", 2))

class ProtectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("snc", 1))

class ProtectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("used", 1))

class LinkDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unidirectional", 1), ("bidirectional", 2))

class CTPType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 20, 50, 51, 52, 53, 60, 61, 62, 100))
    namedValues = NamedValues(("unknown", 0), ("au", 1), ("au4c", 2), ("au16c", 3), ("tu3", 10), ("tu12", 20), ("pdh2M", 50), ("pdh34M", 51), ("pdh45M", 52), ("pdh140M", 53), ("eth10M", 60), ("eth100M", 61), ("eth1G", 62), ("nspi", 100))

linkNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNumber.setStatus('current')
if mibBuilder.loadTexts: linkNumber.setDescription('Number of cross connections in equipment.')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
if mibBuilder.loadTexts: linkTable.setDescription('List of link in equipment. For example, a bidirectionnal \n    connection is composed of 2 links. A SNC protected bidirectionnal\n    connection is composed of 3 permanent links .')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1), ).setIndexNames((0, "XCONNECTION-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
if mibBuilder.loadTexts: linkEntry.setDescription('A particular synchronous physical interface of the equipment.')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
if mibBuilder.loadTexts: linkIndex.setDescription('linkIndex = number of the CTP Output\n\t\t\t   = sncIndex ')
linkSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 2), CTPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSinkType.setStatus('current')
if mibBuilder.loadTexts: linkSinkType.setDescription('Kind of CTP table from which the connection is issued')
linkSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 3), CTPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSrcType.setStatus('current')
if mibBuilder.loadTexts: linkSrcType.setDescription('Kind of CTP table from which the connection is issued')
linkCTPSink = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCTPSink.setStatus('current')
if mibBuilder.loadTexts: linkCTPSink.setDescription("The value of this field indicates the Ouput \n\tConnection Point  which composes the unidirectionnal \n\tlink.It's an index in considerated TTP table\n\tlinkCTPSink = linkIndex")
linkCTPSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCTPSource.setStatus('current')
if mibBuilder.loadTexts: linkCTPSource.setDescription("The value of this field indicates the Input \n\tConnection Point  which composes the unidirectionnal \n\tlink. It's an index in considerated TTP table ")
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription("A text string which identifies the name of this link.\n    Links names of a bidirectionnal link must have different name.\n    Same direction SNC protected links have an identical name.\n    M1400 UIT-T specifies the field's format ")
linkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkGroupId.setStatus('current')
if mibBuilder.loadTexts: linkGroupId.setDescription('A group identifier is used to group links by community.')
linkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 8), LinkDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDirection.setStatus('current')
if mibBuilder.loadTexts: linkDirection.setDescription('Unidirectional or Bidirectionnal connections.')
linkProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 9), ProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProtectionType.setStatus('current')
if mibBuilder.loadTexts: linkProtectionType.setDescription('The value of this field indicates the kind of wanted link protection.\n    The default value is NONE.\n    if value is changed in Snc(1)then an entry is created in Snc table with the same index. But this table\n    has to be completed (by setting the PIC,...) to obtain a configured protection. \n    if value is changed in None(0)then the associated entry in Snc table is deleted.\n    When the value is set to Snc for a particular entry of LinkTable, other links which are in relation (of\n    direction or protection) with this main link remain setting to None for this field. But all links are set to the USED(1) value\n    in the next field (linkProtectionStatus)')
linkProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 10), ProtectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkProtectionStatus.setStatus('current')
if mibBuilder.loadTexts: linkProtectionStatus.setDescription('The value of this field indicates if the link is used directly or not in a Snc protection.\n\tFor a non-protected link, this field is mandatory set to None.\n\tThe field value particulary allow to know the hability of link deletion.')
linkTrafficStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 11), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTrafficStatus.setStatus('current')
if mibBuilder.loadTexts: linkTrafficStatus.setDescription('The value of this field indicates where is the traffic.\n\tFor a non-protected link, this field is mandatory set to working')
linkImplementation = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 108, 10, 2, 1, 12), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkImplementation.setStatus('current')
if mibBuilder.loadTexts: linkImplementation.setDescription('Actually, this variable is not implemented (always set to TRUE).\n\t But it could be used to allow to reserve a connection without physical implementation')
class XconDir(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("unidirectional", 1), ("bidirectional", 2))

class ActionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("creation", 1), ("deletion", 2))

xconNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconNumber.setStatus('current')
if mibBuilder.loadTexts: xconNumber.setDescription('Number of connection to process.')
xconSinkType = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 2), CTPType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconSinkType.setStatus('current')
if mibBuilder.loadTexts: xconSinkType.setDescription('Type of CTP')
xconSinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconSinkIndex.setStatus('current')
if mibBuilder.loadTexts: xconSinkIndex.setDescription('Output CTP')
xconSrcType = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 4), CTPType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconSrcType.setStatus('current')
if mibBuilder.loadTexts: xconSrcType.setDescription('Type of CTP')
xconSrcIndex = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconSrcIndex.setStatus('current')
if mibBuilder.loadTexts: xconSrcIndex.setDescription('Input CTP')
xconDirection = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 6), XconDir()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconDirection.setStatus('current')
if mibBuilder.loadTexts: xconDirection.setDescription('Bidirectionnal connections are composed of two unidirectional xcon\n    and therefore 2 link entries.')
xconName = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconName.setStatus('current')
if mibBuilder.loadTexts: xconName.setDescription("A text string which identifies the name of this cross-connection.\n    M1400 UIT-T specifies the field's format like this:\n     \tNameTownA/NameSuffixA-NameTownB/NameSuffixB NameFunctionSNameSerial\n     \t\t* NameTownX field accepts alpha-numeric and space characters. \n     \t\t\tNameTownB is preceded by a '-' character.\n     \t\t\tMaximum length is 12 charracters.\n     \t\t\tNot mandatory fields.\n     \t\t* NameSuffixX field accepts alpha-numeric characters. \n     \t\t    It's preceded by a '/' character.\n     \t\t    Maximum length is 3 characters.\n     \t\t    Not mandatory fields.\n     \t\t* NameFunction field accepts alpha-numeric characters.\n     \t\t    It's followed by a 'S' character.\n     \t\t    Maximum length is 3 characters.\n     \t\t    Mandatory field.\n     \t\t    It represents the function code.\n     \t\t* NameSerial field accepts 4-figure number.\n     \t\t    Not mandatory field.\n     \t\t    It represents the serial number and will be incremented\n    \t\t\tautomatically from the base serial number provided.\n    For ADR2500 equipments:\n    \tLinks names of a bidirectionnal link must have different name.\n    \tSame direction SNC protected links have an identical name.")
xconAction = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 8), ActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconAction.setStatus('current')
if mibBuilder.loadTexts: xconAction.setDescription('Type of action: Unknown(0) or Creation(1) or deletion(2)')
xconProceed = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 20), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconProceed.setStatus('current')
if mibBuilder.loadTexts: xconProceed.setDescription("\n\tThis entry is use to create (set to `true').\n\tThe value of the field remains to `true' until creation is \n\tcompleted or has been aborted. \n\t")
xconDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 1038, 108, 30, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconDiagnostic.setStatus('current')
if mibBuilder.loadTexts: xconDiagnostic.setDescription('A string used to help in case of trouble.')
mibBuilder.exportSymbols("XCONNECTION-MIB", linkImplementation=linkImplementation, ProtectionStatus=ProtectionStatus, TrafficStatus=TrafficStatus, linkCTPSource=linkCTPSource, ProtectionType=ProtectionType, xconSrcIndex=xconSrcIndex, PYSNMP_MODULE_ID=xconnection, XconDir=XconDir, xconAction=xconAction, linkName=linkName, xconSinkIndex=xconSinkIndex, xconSrcType=xconSrcType, linkProtectionType=linkProtectionType, linkNumber=linkNumber, linkTable=linkTable, linkIndex=linkIndex, linkDirection=linkDirection, xconSinkType=xconSinkType, xconnection=xconnection, linkSrcType=linkSrcType, xconDirection=xconDirection, xconProceed=xconProceed, xconNumber=xconNumber, CTPType=CTPType, linkTrafficStatus=linkTrafficStatus, xcon=xcon, linkGroupId=linkGroupId, xconDiagnostic=xconDiagnostic, linkProtectionStatus=linkProtectionStatus, linkSinkType=linkSinkType, xconName=xconName, ActionType=ActionType, linkCTPSink=linkCTPSink, LinkDirection=LinkDirection, linkEntry=linkEntry, link=link)
