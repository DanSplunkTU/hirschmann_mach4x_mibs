#
# PySNMP MIB module ALCATEL-IND1-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-CHASSIS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:14:28 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
hardentIND1Physical, hardentIND1Chassis = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1Physical", "hardentIND1Chassis")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Gauge32, Counter64, iso, Counter32, MibIdentifier, Bits, ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Counter64", "iso", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Unsigned32")
TextualConvention, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "DisplayString")
alcatelIND1ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1))
alcatelIND1ChassisMIB.setRevisions(('2014-09-02 00:00', '2011-10-31 00:00', '2011-10-14 00:00', '2011-08-05 00:00', '2011-03-23 00:00', '2010-05-13 00:00', '2007-06-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setRevisionsDescriptions(('Added chasEntPhysFanSpeed object.', 'Added changes for virtual chassis.', 'Added chasEntPhysPowerUsed object.', 'Added chasEntTemperatureTable.', 'Added image file MD5 checksum changed alert, airflow, and temperature alerts', 'Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'Addressing discrepancies with Alcatel Standard.',))
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setLastUpdated('201103230000Z')
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1ChassisMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        etwork Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the Chassis Supervision\n        Chassis MIB\n        for managing physical chassis objects not covered in the IETF\n        Entity MIB (rfc 2737).\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1ChassisMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBNotifications.setDescription('Branch For Chassis MIB Subsystem Notifications.')
alcatelIND1ChassisMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBObjects.setDescription('Branch For Chassis Supervision Chassis MIB\n            Subsystem Managed Objects.')
alcatelIND1ChassisMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBConformance.setDescription('Branch For Chassis Supervision Chassis MIB\n            Subsystem Conformance Information.')
alcatelIND1ChassisMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBGroups.setDescription('Branch For Chassis Supervision Chassis MIB\n            Subsystem Units Of Conformance.')
alcatelIND1ChassisMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBCompliances.setDescription('Branch For Chassis Supervision Chassis MIB\n            Subsystem Compliance Statements.')
alcatelIND1ChassisPhysMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBObjects.setDescription('Branch For Chassis Supervision Chassis Physical MIB\n            Subsystem Managed Objects.')
alcatelIND1ChassisPhysMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBConformance.setDescription('Branch For Chassis Supervision Chassis Physical MIB\n            Subsystem Conformance Information.')
alcatelIND1ChassisPhysMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBGroups.setDescription('Branch For Chassis Supervision Chassis Physical MIB\n            Subsystem Units Of Conformance.')
alcatelIND1ChassisPhysMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBCompliances.setDescription('Branch For Chassis Supervision Chassis Physical MIB\n            Subsystem Compliance Statements.')
class AlaChasBpsShelfId(TextualConvention, Integer32):
    description = 'BPS shelf Id .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class ChasTrapsBPSPowerSupply(TextualConvention, Integer32):
    description = 'Textual convention for type of bps power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("bpsSysPower1", 1), ("bpsSysPower2", 2), ("bpsPoePower1", 3), ("bpsPoePower2", 4), ("bpsPoePower3", 5), ("notApplicable", 6))

class ChasTrapsBPSFetState(TextualConvention, Integer32):
    description = 'Textual convention for BPS FET state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("on", 1), ("off", 2), ("notApplicable", 3))

class ChasTrapsBPSEventAlert(TextualConvention, Integer32):
    description = 'Textual convention for BPS event alert'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bpsPsPlugged", 1), ("bpsPsUnPlugged", 2), ("bpsModeChanged", 3), ("notApplicable", 4))

class ChasTrapsBPSFwType(TextualConvention, Integer32):
    description = 'Textual convention for BPS FW upgrade requirment alert'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bpsFwCmcu", 1), ("bpsFwMmcu", 2), ("bpsFwCpld", 3), ("notApplicable", 4))

chasControlModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: chasControlModuleTable.setStatus('current')
if mibBuilder.loadTexts: chasControlModuleTable.setDescription('This table contains one row for the primary control module.')
chasControlModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasControlModuleEntry.setStatus('current')
if mibBuilder.loadTexts: chasControlModuleEntry.setDescription('Information about the primary control module. This table is an extension\n        of the entity physical table but this class is instanciated only for a\n        the primary control module that has a particular Index. When operatiing\n        in virtual chassis mode only the master primary control module is\n        instanciated')
chasControlActivateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlActivateTimeout.setStatus('current')
if mibBuilder.loadTexts: chasControlActivateTimeout.setDescription('This value is in seconds. It represents how much time before the\n        switch automatically falls back to the certified version. This value\n        is set via the Activate(reload working) cli command.\n        An Activate reboot must be initiated via the primary CMM and that\n        the timeout value can be accessed via user interface to the primary CMM\n        only. After the Activate reboot has been initiated, a timeout will occur\n        (i.e., an Activate Timeout) at the timeout value specified by the user.\n        If a reboot cancel has not been received prior to the timeout expiration,\n        the primary CMM will automatically reboot (i.e., re-reboot) using the\n        certified configuration. This ensures that an automatic backup reboot is\n        available using the certified configuration in the event that the user\n        is unable to interface with primary CMM as a result of the attempted\n        Activate reboot. If the Activate reboot is successful, the user cancels\n        the backup reboot via the normal reboot cancellation process (i.e., a\n        zero value is written for the object chasControlDelayedRebootTimer).')
chasControlVersionMngt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notSignificant", 1), ("certifySynchro", 2), ("certifyNoSynchro", 3), ("flashSynchro", 4), ("restore", 5), ("activate", 6), ("issu", 7), ("shutdown", 8), ("vcConvert", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlVersionMngt.setStatus('current')
if mibBuilder.loadTexts: chasControlVersionMngt.setDescription('For the primary this means:\n                notSignificant   - No command applied.\n                certifySynchro   - Copy the file from the working to the certified\n                                   directory and from the primary to the secondary\n                                   (reboot of the secondary).\n                certifyNoSynchro - Copy the file from the working to the certified\n                                   directory.\n                flashSynchro -     Copy the file from the primary to the secondary\n                                   (reboot of the secondary).\n                restore -          Copy the file from the certified directory to the\n                                   working directory.\n                activate -         Reload from the working directory. Activate can be\n                                   scheduled.\n                issu -             In Service Software Upgrade (ISSU).\n                shutdown -         Shutdown chassis specified by chasControlChassisId.\n                                   Halts and powers off NIs, halts primary and\n                                   secondary CMMs.\n                vcConvert -        Copy the image files from the running directory\n                                   to the working directory.')
chasControlDelayedActivateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31622400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedActivateTimer.setStatus('current')
if mibBuilder.loadTexts: chasControlDelayedActivateTimer.setDescription('Timer value in seconds used to initiate a delayed activate of the primary\n        CMM. Writing this object to a non-zero value results in CMM reboot of the\n        working  directory following expiration of the specified activate timer delay.\n        Writing this object to zero results in an immediately activate process.\n                It is now adjusted to wait a maximum of 366 days.')
chasControlCertifyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("needCertify", 2), ("certified", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlCertifyStatus.setStatus('current')
if mibBuilder.loadTexts: chasControlCertifyStatus.setDescription('Returned value indicates if the control module has been certified\n     (that is the working directory matches the certified directory)')
chasControlSynchronizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoControlModule", 2), ("notSynchronized", 3), ("synchronized", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlSynchronizationStatus.setStatus('current')
if mibBuilder.loadTexts: chasControlSynchronizationStatus.setDescription('Returned value indicates if the control module has been synchronized\n     (that is the working directory matches the working directory\n     on the other control module(s) if present).  Returned value is\n     monoControlModule when no other control module is present.')
chasControlAcrossCmmWorkingSynchroStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoCMM", 2), ("no", 3), ("yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlAcrossCmmWorkingSynchroStatus.setStatus('current')
if mibBuilder.loadTexts: chasControlAcrossCmmWorkingSynchroStatus.setDescription('Returned value indicates if the /working has been synchronized\n     across the CMMs (that is the working directory matches the working directory\n     on all CMMs if present)')
chasControlAcrossCmmCertifiedSynchroStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("monoCMM", 2), ("no", 3), ("yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlAcrossCmmCertifiedSynchroStatus.setStatus('current')
if mibBuilder.loadTexts: chasControlAcrossCmmCertifiedSynchroStatus.setDescription('Returned value indicates if the /certified has been synchronized\n        across the CMMs if present)')
chasControlNextRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlNextRunningVersion.setStatus('current')
if mibBuilder.loadTexts: chasControlNextRunningVersion.setDescription('The pathname for the image directory that will be\n        used on the next reload. Value may be /flash/certified\n        or /flash/<working directory name>.')
chasControlCurrentRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlCurrentRunningVersion.setStatus('current')
if mibBuilder.loadTexts: chasControlCurrentRunningVersion.setDescription('The pathname of the image directory to the version\n        that is currently executing. Value may be /flash/certified\n        or /flash/<working directory name>.')
chasControlWorkingVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlWorkingVersion.setStatus('current')
if mibBuilder.loadTexts: chasControlWorkingVersion.setDescription('The path to the currently specified working image directory.\n         Value may be /flash/certified or /flash/<working directory name>.')
chasControlRedundancyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlRedundancyTime.setStatus('current')
if mibBuilder.loadTexts: chasControlRedundancyTime.setDescription('Time in minutes that the running image must stay up without error\n         before a subsequent error reset will restart the board from the\n         running image. If a CMM in dual-CMM switch fails after a reload\n         and before chasControlRedundancyTime expires, both CMMs will be\n         rebooted from the certified version.')
chasControlEmpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEmpIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: chasControlEmpIpAddress.setDescription('This object is deprecated. Instead use alaInterfaceTable(ALCATEL-IND1-IP-MIB)\n         when configuring EMP interfaces.\n\n         The IP Address for the primary control module EMP interface.\n         This address is used for managing the chassis and will\n         continue as the EMP interface address after a takeover.')
chasControlEmpIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEmpIpMask.setStatus('deprecated')
if mibBuilder.loadTexts: chasControlEmpIpMask.setDescription('This object is deprecated. Instead use alaInterfaceTable(ALCATEL-IND1-IP-MIB)\n         when configuring EMP interfaces.\n\n         The IP Address Mask for the primary control module EMP interface.\n         This address mask is used for managing the chassis and will\n         continue as the EMP interface mask after a takeover.')
chasControlChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlChassisId.setStatus('current')
if mibBuilder.loadTexts: chasControlChassisId.setDescription('The virtual chassis id for the action specified by\n         chasControlVersionMngt when operating in virtual\n         chassis mode. A value of 0 indicates the local\n         chassis.')
chasControlRedundantTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: chasControlRedundantTable.setStatus('current')
if mibBuilder.loadTexts: chasControlRedundantTable.setDescription('This table contains one row per control module. There is always at least\n        one control module in the system.')
chasControlRedundantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasControlRedundantEntry.setStatus('current')
if mibBuilder.loadTexts: chasControlRedundantEntry.setDescription('Information about a particular control module this table is an extension\n        of the entity physical table but this class is instanciated only for a\n        particular type of physical entity: the control module that has a\n        particular Index. When running in virtual chassis mode, entries are\n        instantiated for the Master and all the slave CMMs')
chasControlNumberOfTakeover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlNumberOfTakeover.setStatus('current')
if mibBuilder.loadTexts: chasControlNumberOfTakeover.setDescription('This object is a count of the number of times the control module has\n        changed from primary to secondary mode as a result of a Takeover. Note\n        that this object can be accessed via user interface to either the\n        primary or secondary CMM. The value returned is the number of times\n        that the interfacing control module (either primary or secondary CMM)\n        has changed from primary to secondary mode. This value does not reflect\n        the total number of CMM Takeovers for the switch. To get the total\n        number of Takeovers for the switch, it is necessary to read this value\n        via user interface to each control module independently.')
chasControlDelayedRebootTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31622400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedRebootTimer.setStatus('current')
if mibBuilder.loadTexts: chasControlDelayedRebootTimer.setDescription('Timer value (in seconds) used to initiate a delayed reboot of the primary\n        or secondary CMM using the certified configuration.  Writing this object to\n        a non-zero value results in a CMM reboot following expiration of the\n        specified reset timer delay.  Writing this object to zero results in\n        cancellation of a pending CMM delayed reboot.\n        It is now adjusted to wait a maximum of 366 days.')
chasControlDelayedResetAll = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDelayedResetAll.setStatus('current')
if mibBuilder.loadTexts: chasControlDelayedResetAll.setDescription('This object is used to schedule a delayed reset all action for a chassis\n        when running in virtual chassis mode. If set to -1 - cancel the timer,\n        0 - reset all immediately, any other value will start counting down the\n        time until reset.')
chasChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: chasChassisTable.setStatus('current')
if mibBuilder.loadTexts: chasChassisTable.setDescription('This table contains one row per chassis. There is always at least one\n        chassis or many when running in virtual chassis mode.')
chasChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasChassisEntry.setStatus('current')
if mibBuilder.loadTexts: chasChassisEntry.setDescription('Information about a particular control module this table is an extension\n         of the entity physical table but this class is instanciated only for a\n         particular type of physical entity: the control module that has a\n         particular Index.')
chasFreeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFreeSlots.setStatus('current')
if mibBuilder.loadTexts: chasFreeSlots.setDescription('The number of free NI front panel slots.')
chasPowerLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerLeft.setStatus('current')
if mibBuilder.loadTexts: chasPowerLeft.setDescription('The power still available on the chassis in Watts.')
chasNumberOfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumberOfResets.setStatus('current')
if mibBuilder.loadTexts: chasNumberOfResets.setDescription('This object is a count of the number of times this station has been reset\n         since a cold-start.')
chasTempRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notPresent", 2), ("underThreshold", 3), ("overFirstThreshold", 4), ("overDangerThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTempRange.setStatus('current')
if mibBuilder.loadTexts: chasTempRange.setDescription('Temp Range is the value of the temperature sensor for the chassis. The\n         Temp Range value reflects the temperature of the chassis relative to the\n         Temp Threshold value (i.e., over vs. under the threshold).')
chasTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTempThreshold.setStatus('current')
if mibBuilder.loadTexts: chasTempThreshold.setDescription('This object is the threshold temperature in degrees Celsius for the\n        chassis. Temp Threshold is the chassis temperature point at which,\n        when reached due to an ascending or descending temperature transition,\n        a temperature notification is provided to the user. When this threshold\n        is exceeded, we start sending traps and other operator notification.')
chasDangerTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasDangerTempThreshold.setStatus('current')
if mibBuilder.loadTexts: chasDangerTempThreshold.setDescription('This Threshold is a second one which is hardcoded. When the\n         Chassis Exceeds this value it starts shutting down NIs.\n         This value will be set by the factory and not changeable.')
chasPrimaryPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPrimaryPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: chasPrimaryPhysicalIndex.setDescription('This value holds the Entity Table Physical Index for the Control\n         Module that is currently primary. This is to allow snmp managers\n         to determine which Control Module is currently primary so it knows\n         what entry in the chasControlModuleTable to access for setting the\n         chasControlVersionMngt values for controling the switch. When running\n         in virtual chassis mode, it will contain the Physical Index of the\n         master primary Control Module.')
chasCPMAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCPMAHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCPMAHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CPMA control module board. This temperature is what is used for\n         comparing to the threshold and determining whether the value\n         is in range.')
chasCFMAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMAHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCFMAHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CFMA fabric board. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasCPMBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCPMBHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCPMBHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CPMB control module board. This temperature is what is used for\n         comparing to the threshold and determining whether the value\n         is in range.')
chasCFMBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMBHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCFMBHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CFMB fabric board. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasCFMCHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMCHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCFMCHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CFMC fabric board. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasCFMDHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCFMDHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasCFMDHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         CFMD fabric board. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasFTAHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFTAHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasFTAHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for\n         Fantray 1. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasFTBHardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFTBHardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasFTBHardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for\n         Fantry 2. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI1HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI1HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI1HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 1. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI2HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI2HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI2HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 2. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI3HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI3HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI3HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 3. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI4HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI4HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI4HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 4. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI5HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI5HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI5HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 5. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI6HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI6HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI6HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 6. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI7HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI7HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI7HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 7. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasNI8HardwareBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNI8HardwareBoardTemp.setStatus('current')
if mibBuilder.loadTexts: chasNI8HardwareBoardTemp.setDescription('This object indicates the current output of the Board Temperature\n         Sensor provided by the LM75 part (degrees Centigrade) for the\n         NI board in slot 8. This temperature is what is used for comparing\n         to the threshold and determining whether the value is in range.')
chasPowerSupplyRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPowerSupplyRedundancy.setStatus('current')
if mibBuilder.loadTexts: chasPowerSupplyRedundancy.setDescription('This object indicates the state of power supply redundancy mode.\n         When on(1), N+1 mode redundancy is enabled(default mode). In\n         this mode the system controls the power supplies to maintain\n         efficient use of the power supplies, with 1 extra power supply\n         in case of a power supply failure. Unneeded power supplies are\n         powered off. It can be set to off(2) to disable redundancy mode.\n         In this mode all power supplies are powered on.\n         This object is applicable only to OS10K devices.')
chasPowerSupplyRedundancyReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPowerSupplyRedundancyReserve.setStatus('current')
if mibBuilder.loadTexts: chasPowerSupplyRedundancyReserve.setDescription("When chasPowerSupplyRedundancyReserve is enabled, N+1 power supply \n         redundancy reserve holds the wattage of one power supply in reserve \n         such that the user cannot insert NIs or configure power over Ethernet (POE)\n         that will use the reserved power from that supply. There are two main advantages \n         to enabling chasPowerSupplyRedundancyReserve. The first advantage is that \n         it provides resiliency to avoid POE drawing power from the four main power supplies\n         in the OS9900 chassis to the extent that POE sinks much more wattage than \n         the CMM, CFM, and NI board logic combined. (Note: The power management functions \n         on the OS9900 are complicated by the presence of the controllers on the GNI-P48 boards. \n         Unlike other chassis supporting POE, like OS6860, there is no separate power supply \n         for the POE front-panel ports.) This is not to be confused with chasPowerSupplyRedundancy \n         which switches off unneeded power supplies - on the OS9900, all inserted power supplies\n         are always switched on and enabled. The second advantage of enabling \n         chasPowerSupplyRedundancyReserve is to avoid 'brown-outs'. \n         (A brown-out may happen when a system running at full POE capacity without the N+1 redundancy reserve\n         enabled suffers a power supply failure causing the POE hardware to immediately\n         disable power over Ethernet on the basis of port priority as soon as it detects the failure.\n         Then, if there is still insufficient power available to run the logic and fan trays,\n         the power supplies will 'crowbar' and the system will be power cycled. The software can \n         do little in this scenario since there is insufficient power to keep the CPU chips running.\n         When the system reboots the chassis supervisor will only power-up NI slots based \n         upon the power available from the remaining power supplies.)")
chasEntPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: chasEntPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysicalTable.setDescription('This table contains one row per physical entity. It is an extension for\n        the entity physical table (rfc 2737) that is instantiated for every physical entity\n        object. The fields are not always significant for every object.')
chasEntPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasEntPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysicalEntry.setDescription('Information about a particular physical entity.')
class ChasEntPhysLed(TextualConvention, Integer32):
    description = 'Textual convention for physical LEDs.  Note: Due to European regulation, the LEDs\n         will never be illuminated in red, but will be either green or amber.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("off", 1), ("greenOn", 2), ("greenBlink", 3), ("amberOn", 4), ("amberBlink", 5))

chasEntPhysAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("powerOff", 2), ("powerOn", 3), ("reset", 4), ("takeover", 5), ("resetAll", 6), ("standby", 7), ("resetWithFabric", 8), ("takeoverWithFabrc", 9), ("vcTakeover", 10), ("resetVcAll", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasEntPhysAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAdminStatus.setDescription('All modules (even empty slots) are in unknown state when the chassis\n             first powers up.\n\n        Chassis status possible value:\n                powerOn <=> powered up\n\n        Control Module possible value:\n                powerOn <=> CM up and running\n                reset <=> CM reset\n                takeover <=> Secondary CM takes over\n                resetAll <=> resets the whole switch\n                vcTakeover <=> Reloads master chassis from the current working directory,\n                               which initiates a VC takeover.\n                vcResetAll <=> resets entire VC.\n        NI status possible value:\n                powerOn <=> NI is either powered (up or down) or waiting to be powered\n                        whenever more power is available. This admin status has not full meaning\n                        without chasEntPhysOperStatus\n                powerOff <=> NI down and unpowered and NI will not be powered until user\n                        requests it, a failover happens or a reboot happens\n                reset <=> NI reset\n\n        FABRIC status possible value:\n                powerOn     <=> FABRIC is powered\n                powerOff    <=> FABRIC is unpowered\n                standby     <=> FABRIC is powered and requested to be redundant (inactive)\n\n        Daughter board status possible value:\n                powerOn <=> DB up and running\n                reset <=> DB reset (TO BE CONFIRMED)\n\n        Power supply status possible value:\n                powerOn <=> PS up')
chasEntPhysOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("secondary", 5), ("notPresent", 6), ("unpowered", 7), ("master", 8), ("idle", 9), ("pwrsave", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysOperStatus.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysOperStatus.setDescription('All modules (even empty slots) are in unknown state when the chassis\n        first powers up.\n\n        Chassis status possible value :\n                up <=> powered up\n\n        Control Module possible value :\n                notPresent <=> CM not present\n                up <=> CM up and running\n                down <=> CM down and powered\n                secondary <=> CM in secondary mode and running\n\n        NI status possible value :\n                notPresent <=> NI not present\n                up <=> NI up and running\n                down <=> NI down and powered\n                unpowered <=> NI unpowered because there is not enough power in the system\n                              (chasEntPhysAdminStatus = powerOn) or because the NI has to be OFF\n                              (chasEntPhysAdminStatus = powerOff). This operational status has\n                  not full meaning without chasEntPhysAdminStatus\n\n        Fabric status possible value :\n                master <=> up and acting as master\n                up <=> up and acting as slave\n                secondary <=> secondary mode for redundancy\n\n        Daughter board status possible value :\n                notPresent <=> DB not present\n                up <=> DB up and running\n                down <=> DB down and powered\n\n        Power supply status possible value :\n                up <=> PS up\n                down <=> PS administratively down\n                unpowered <=> PS not plugged in\n                pwrsave <=> chassis in powersave mode, supply turned off\n\n        Fan Tray status possible value :\n                up <=> powered up\n                down <=> powered down\n                fault <=> fault detected')
chasEntPhysPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPower.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysPower.setDescription('This value is only applicable to the NI, PS and Control Modules.  It\n         corresponds to a a static value for the power consumption of an NI\n         module or Control Module. This value is in Watts.')
chasEntPhysModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysModuleType.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysModuleType.setDescription('This object is the unique Module Type or ID from the entities eeprom.\n             This value is guarrantteed to be unique to each type of Module.\n             This value is only intended for Alcatel internal use.')
chasEntPhysPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPartNumber.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysPartNumber.setDescription('This object contains the Alcatel Part Number for the entity.\n             This value is used to identify what is\n             needed when placing orders with Alcatel.')
chasEntPhysLedStatusOk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 6), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusOk1.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusOk1.setDescription('Chassis Management Module (CMM) front panel LED OK1 status indication')
chasEntPhysLedStatusOk2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 7), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusOk2.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusOk2.setDescription('Chassis Management Module (CMM) front panel LED OK2 status indication')
chasEntPhysLedStatusPrimaryCMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 8), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusPrimaryCMM.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusPrimaryCMM.setDescription('Chassis Management Module (CMM) front panel LED Primary chassis indication')
chasEntPhysLedStatusSecondaryCMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 9), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusSecondaryCMM.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusSecondaryCMM.setDescription('Chassis Management Module (CMM) front panel LED Secondary chassis indication')
chasEntPhysLedStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 10), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusTemperature.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusTemperature.setDescription('Chassis Management Module (CMM) front panel LED temperature status indication')
chasEntPhysLedStatusFan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 11), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusFan.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusFan.setDescription("For Hawk stacks used as a fan group status LED.  For eagle CMM's user instead:\n             Fan 1 (top left), Fan 2 (top right), Fan 3 (rear)")
chasEntPhysLedStatusBackupPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 12), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusBackupPS.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusBackupPS.setDescription('Chassis backup power supply status indication')
chasEntPhysLedStatusInternalPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 13), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusInternalPS.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusInternalPS.setDescription('Chassis internal power supply status indication')
chasEntPhysLedStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 14), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusControl.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusControl.setDescription('Chassis control status')
chasEntPhysLedStatusFabric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 15), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusFabric.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusFabric.setDescription('Chassis Management Module (CMM) Fabric status indication')
chasEntPhysLedStatusPS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 16), ChasEntPhysLed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysLedStatusPS.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysLedStatusPS.setDescription('Chassis Power Supply Unit status indication')
chasEntPhysAsic1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic1Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic1Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysAsic2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic2Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic2Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysAsic3Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic3Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic3Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysAsic4Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic4Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic4Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysAsic5Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic5Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic5Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysAsic6Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAsic6Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAsic6Rev.setDescription('This object contains the ASIC revision Number of the ni entity')
chasEntPhysCpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysCpldRev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysCpldRev.setDescription('This object contains the CPLD revision Number of the ni entity')
chasEntPhysDaughterFpga1Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysDaughterFpga1Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysDaughterFpga1Rev.setDescription('This object contains the daughter fpga revision Number of the ni entity')
chasEntPhysDaughterFpga2Rev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysDaughterFpga2Rev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysDaughterFpga2Rev.setDescription('This object contains the daughter fpga revision Number of the ni entity')
chasEntPhysNiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysNiNum.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysNiNum.setDescription('This value is only applicable to the NI.  It indicates an NI associated with this physicalEntry')
chasEntPhysGbicNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysGbicNum.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysGbicNum.setDescription('This value is only applicable to the NI.  It indicates a gbic associated with this ni')
chasEntPhysWaveLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysWaveLen.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysWaveLen.setDescription('This object contains the wave length of a SFP device')
chasEntPhysUbootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysUbootRev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysUbootRev.setDescription('This object contains the uboot version Number of the ni entity')
chasEntPhysUbootMinibootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysUbootMinibootRev.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysUbootMinibootRev.setDescription('This object contains the uboot miniboot version Number of the ni entity')
chasEntPhysMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysMacAddress.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysMacAddress.setDescription('This object contains the MAC address of the ni entity')
chasEntPhysCpuModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysCpuModel.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysCpuModel.setDescription('This object contains the model description of the cmm/ni cpu')
chasEntPhysAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("frontToRear", 0), ("rearToFront", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysAirflow.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysAirflow.setDescription('Chassis PS fan airflow direction')
chasEntPhysPowerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPowerUsed.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysPowerUsed.setDescription('This value is only applicable to the PS.  It is the current\n         reading for the power usage of the PS. This value is in Watts.')
chasEntPhysPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("ac", 1), ("dc", 2), ("bps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntPhysPowerType.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysPowerType.setDescription('This object is the type of the power supply, It corresponds to AC,\n\t     DC or BPS. This value is only intended for Alcatel internal use.')
chasEntTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: chasEntTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: chasEntTemperatureTable.setDescription('This table contains one row per temperature sensor located on an entity\n         represented by the associated row in the entPhysicalTable.')
chasEntTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: chasEntTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: chasEntTemperatureEntry.setDescription('Information about a particular physical temperature sensor.')
chasEntTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempCurrent.setStatus('current')
if mibBuilder.loadTexts: chasEntTempCurrent.setDescription('This object indicates the current output of the temperature\n         sensor in degrees Celsius.')
chasEntTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempThreshold.setStatus('current')
if mibBuilder.loadTexts: chasEntTempThreshold.setDescription('This object is the threshold temperature in degrees Celsius for the\n        sensor. When the value of chasEntTempCurrent exceeds this value,\n        a temperature notification is provided to the user.')
chasEntTempDangerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempDangerThreshold.setStatus('current')
if mibBuilder.loadTexts: chasEntTempDangerThreshold.setDescription('This object is the danger threshold temperature in degrees Celsius for\n         the sensor. When the value of chasEntTempCurrent exceeds this value, the\n         associated physical entity is powered down.')
chasEntTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notPresent", 2), ("underThreshold", 3), ("overFirstThreshold", 4), ("overDangerThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEntTempStatus.setStatus('current')
if mibBuilder.loadTexts: chasEntTempStatus.setDescription('This object is the status value of the temperature sensor.\n         It reflects the temperature relative to the chasEntTempThreshold\n         and chasEntTempDangerThreshold values.')
chasSupervisionRfsLsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: chasSupervisionRfsLsTable.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsTable.setDescription('This table contains a list of file on the remote chassis per directory.')
chasSupervisionRfsLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileIndex"))
if mibBuilder.loadTexts: chasSupervisionRfsLsEntry.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsEntry.setDescription('Information about a remote file.\n         A row in this table contains a file per directory per chassis')
chasSupervisionRfsLsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileIndex.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileIndex.setDescription('This value holds file Index for the RFS LS table.')
chasSupervisionRfsLsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsSlot.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsSlot.setDescription('CMM Slot where remote file is located.')
chasSupervisionRfsLsDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsDirName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsDirName.setDescription('The remote directory name where remote file is located in')
chasSupervisionRfsLsFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileName.setDescription('The file name of remote file')
chasSupervisionRfsLsFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("file", 1), ("directory", 2), ("undefined", 3), ("tarArchive", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileType.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileType.setDescription('The Type of a remote file')
chasSupervisionRfsLsFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileSize.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileSize.setDescription('size of this remote file')
chasSupervisionRfsLsFileAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileAttr.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileAttr.setDescription('attributes of this remote file')
chasSupervisionRfsLsFileDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsLsFileDateTime.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsFileDateTime.setDescription('the modification date and time of a remote file')
chasSupervisionRfsDfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: chasSupervisionRfsDfTable.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfTable.setDescription('This table contains information about file system size and use.')
chasSupervisionRfsDfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfSlot"))
if mibBuilder.loadTexts: chasSupervisionRfsDfEntry.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfEntry.setDescription('This entry contains information about file system size and use.')
chasSupervisionRfsDfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionRfsDfSlot.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfSlot.setDescription('CMM Slot where flash space is evaluated.')
chasSupervisionRfsDfFlashFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashFree.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashFree.setDescription('Number bytes free on the file system.')
chasSupervisionRfsDfFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashSize.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfFlashSize.setDescription('Number of total bytes on the file system.')
chasSupervisionRfsDfUsbFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 4), Unsigned32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbFree.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbFree.setDescription('The amount of free space on the USB file system.')
chasSupervisionRfsDfUsbSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 8, 1, 5), Unsigned32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbSize.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfUsbSize.setDescription('The total amount of space on the USB file system.')
chasSupervisionFlashMemTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9), )
if mibBuilder.loadTexts: chasSupervisionFlashMemTable.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashMemTable.setDescription('This table contains the systems flash memory information.')
chasSupervisionFlashMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionSlot"))
if mibBuilder.loadTexts: chasSupervisionFlashMemEntry.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashMemEntry.setDescription('This contains one entry for the flash memory table.')
chasSupervisionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionSlot.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionSlot.setDescription('CMM Slot where flash space is evaluated.')
chasSupervisionFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashSize.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashSize.setDescription('Flash memory size.')
chasSupervisionFlashFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashFree.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashFree.setDescription('Number bytes free on file system.')
chasSupervisionFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionFlashUsed.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashUsed.setDescription('A rounded up percentage of Flash Memory used.')
chasSupervisionCmmCertifiedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedTable.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedTable.setDescription('This table contains certification status')
chasSupervisionCmmCertifiedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmNum"))
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedEntry.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedEntry.setDescription('Information about control module certification status.  This class is\n         instanciated only when running in virtual chassis mode.')
chasSupervisionCmmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: chasSupervisionCmmNum.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionCmmNum.setDescription('CMM Slot where /certified directory is evaluated.')
chasSupervisionCmmCertifiedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedStatus.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedStatus.setDescription(' The status of the CMM certified directory - certified or not.')
alaChasEntPhysFanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: alaChasEntPhysFanTable.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanTable.setDescription('This table contains one row per physical fan entity.')
alaChasEntPhysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanLocalIndex"))
if mibBuilder.loadTexts: alaChasEntPhysFanEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanEntry.setDescription('Information about a particular fan in a chassis physical entity.')
alaChasEntPhysFanLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: alaChasEntPhysFanLocalIndex.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanLocalIndex.setDescription('Index to a chassis fan entity')
alaChasEntPhysFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noStatus", 0), ("notRunning", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanStatus.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanStatus.setDescription('Chassis fan operational status')
alaChasEntPhysFanAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("frontToRear", 0), ("rearToFront", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanAirflow.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanAirflow.setDescription('Chassis fan airflow direction')
alaChasEntPhysFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 11, 1, 4), Unsigned32()).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasEntPhysFanSpeed.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanSpeed.setDescription('Chassis fan speed.')
alcatelIND1ChassisSupervisionRfsCommands = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5))
if mibBuilder.loadTexts: alcatelIND1ChassisSupervisionRfsCommands.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisSupervisionRfsCommands.setDescription('Branch For Chassis Supervision RFS commands.\n         For rrm command the Slot, Command and SrcFileName are mandatory.\n         For rcp command the Slot, Command, SrcFileName and DestFileName\n         are mandatory.  For rdf command the Slot and Command are mandatory')
chasSupervisionRfsCommandsSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSlot.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSlot.setDescription('CMM Slot where RFS command should be executed.')
chasSupervisionRfsCommandsCommand = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSignificant", 0), ("rrm", 1), ("rcp", 2), ("rls", 3), ("rdf", 4), ("rget", 5), ("rput", 6), ("reserved", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsCommand.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsCommand.setDescription('This object identifies which of the above Actions is to be\n         performed.  The commands are as follows:\n                  - rrm   Remote file remove\n                  - rcp   Remote file copy (DEPRECATED please use rget or rput instead)\n                  - rls   Remote directory listing\n                  - rdf   Remote flash disk space free\n                  - rget  Remote file get\n                  - rput  Remote file put')
chasSupervisionRfsCommandsSrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSrcFileName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsSrcFileName.setDescription('The remote file for where the RFS action is executed.\n         This includes also the path so directory name and file name.\n         This object is used when command set to rrm or rget or rput.')
chasSupervisionRfsCommandsDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsDestFileName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsDestFileName.setDescription('The destination file for where the RFS action is executed.\n                 This includes also the path so directory name and file name.\n                 This object is used when command set to rget or rput.')
chasSupervisionRfsCommandsRlsDirName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsDirName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsDirName.setDescription('The remote directory name where remote file is located in.\n                This is used when command set to rls.')
chasSupervisionRfsCommandsRlsFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsFileName.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsRlsFileName.setDescription('The remote file name where remote file is located in.\n                This is used when command set to rls.')
chasSupervisionRfsCommandsProcessingState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inProgress", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsProcessingState.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsProcessingState.setDescription('command executing state for the previous set operation.')
chasSupervisionRfsCommandsStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("success", 1), ("slotIsPrimary", 2), ("slotNotExist", 3), ("directoryNotExist", 4), ("fileNotExist", 5), ("maximumFilesExceed", 6), ("noDiskSpace", 7), ("systemBusy", 8), ("systemError", 9), ("directoryNotAllowToRemove", 10), ("permissionDenied", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSupervisionRfsCommandsStatusCode.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsCommandsStatusCode.setDescription('command completetion status error code.')
chasControlReloadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: chasControlReloadStatusTable.setStatus('current')
if mibBuilder.loadTexts: chasControlReloadStatusTable.setDescription('Table containing reload status of each network interface\n                         slot or stack module')
chasControlReloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadIndex"))
if mibBuilder.loadTexts: chasControlReloadEntry.setStatus('current')
if mibBuilder.loadTexts: chasControlReloadEntry.setDescription('Entry of a network interface reload status')
chasControlReloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: chasControlReloadIndex.setStatus('current')
if mibBuilder.loadTexts: chasControlReloadIndex.setDescription('The index (entPhsycialIndex) value of the network interface.')
chasControlReloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reloadEnabled", 1), ("reloadDisabled", 2), ("noInterface", 3), ("unknown", 4))).clone('reloadDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlReloadStatus.setStatus('current')
if mibBuilder.loadTexts: chasControlReloadStatus.setDescription('Returned value indicates if the network interface module is\n         enabled or disabled for reload.')
chasGlobalControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7))
chasGlobalControlDelayedResetAll = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlDelayedResetAll.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlDelayedResetAll.setDescription('This object is used to schedule a delayed reset all action for\n        a standalone chassis or for the entire virtual chassis when running\n        is virtual chassis mode. To schedule a delayed reset on a specific\n        chassis when running is virtual chassis mode, use the\n        chasControlDelayedResetAll object for the desired chassis.\n        If set to -1 - cancel the timer, 0 - reset all immediately,\n        any other value will start counting down the time until reset.')
chasGlobalControlLongCommand = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("certifySynchro", 2), ("certifyNoSynchro", 3), ("flashSynchro", 4), ("restore", 5), ("reload", 6), ("rfs", 7), ("issu", 8), ("shutdown", 9), ("vcConvert", 10), ("macRelease", 11))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlLongCommand.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlLongCommand.setDescription('This object is used to indicate whether a long-term action\n        is in progress, and if so, what the action is.')
chasGlobalControlLongCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completeSuccess", 3), ("completeFailure", 4), ("confirmationRequired", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlLongCommandStatus.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlLongCommandStatus.setDescription('This object indicates the final disposition of the\n        most recent long-term action. When  running in virtual\n        chassis mode, the value confirmationRequired(5),\n        indicates that the command identified in\n        chasGlobalControlLongCommand may disrupt the virtual\n        chassis. The command is suspended and requires that\n        chasClobalControlConfirmOperation be set to true, after\n        reviewing the details and accepting the consequences\n        identified by chasGlobalControlConfirmMessage.')
chasGlobalControlUpdateFirmware = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("ubootCmm", 2), ("ubootNi", 3), ("ubootNiAll", 4), ("ubootCmmAll", 5), ("fpgaCmm", 6), ("fpgaNi", 7), ("fpgaNiDaughterBoard1", 8), ("fpgaNiDaughterBoard2", 9), ("fpgaCmmAll", 10), ("fpgaCmmPower", 11), ("fpgaNiPower", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateFirmware.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlUpdateFirmware.setDescription('This object initiates a firmware update. The chasGlobalControlUpdateSlot\n         and chasGlobalControlUpdateFilename objects must be set prior to setting\n         this object to start the update. The progress of the update can be\n         monitored by reading chasGlobalControlUpdateStatus.')
chasGlobalControlUpdateSlot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateSlot.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlUpdateSlot.setDescription('This object identifies the slot to be updated. The Slot value is\n        the entPhysicalIndex of the NI or CMM entry in the entPhyscialTable.\n        A value of 0 may be specified to update all NIs or CMMs. The value\n        of 0 is supported only for uboot updates.')
chasGlobalControlUpdateFilename = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlUpdateFilename.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlUpdateFilename.setDescription('This object identifies the filename containing the uboot\n         firmware image.')
chasGlobalControlUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noUpdate", 1), ("updateInProgress", 2), ("updateSuccess", 3), ("updateFailed", 4))).clone('noUpdate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlUpdateStatus.setDescription('This object reports the status of the firmware update.\n         The status for the the update identified by\n         chasGlobalControlUpdateFirmware and chasGlobalControlUpdateSlot\n         is returned. When ubootNiAll(4) ubootCmmAll(5) or fpgaCmmAll(10) update is\n         executed, the status of individual NIs or CMMs may be monitored\n         by changing the value of chasGlobalControlUpdateSlot to the\n         desired NI or CMM slot value prior to reading the status.\n         noUpdate(1) - No firmware update has been initiated.\n         updateInProgress(2) - Update is in progress.\n         updateSuccess(3) - The last firmware update was successful.\n         updateFailed(4) - The last firmware update failed.')
chasGlobalControlConfirmOperation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasGlobalControlConfirmOperation.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlConfirmOperation.setDescription('When operating in virtual chassis mode, this object can\n        be set to true(1) to confirm that the operation identified\n        by chasGlobalControlLongCommand can proceed.  Set to false(2)\n        to cancel the operation. This should only be used when\n        chasGlobalControlLongCommandStatus is set to\n        confirmationRequired(5), and the value of\n        chasGlobalControlConfirmMessage has been reviewed.')
chasGlobalControlConfirmMessage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasGlobalControlConfirmMessage.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlConfirmMessage.setDescription('When operating in virtual chassis mode, this object may be read\n         when chasGlobalControlLongCommandStatus is set to\n         confirmationRequired(5). This will happen when an operation such a\n         reload may disrupt the virtual chassis. This object contains information\n         about the consequences of executing the command identified by\n         chasGlobalControlLongCommand. The command has been suspended. To\n         accept the consequences and proceed with the operation, set\n         chasGlobalControlConfirmOperation to true.')
alaChasBpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14))
alaChasBpsFwTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1), )
if mibBuilder.loadTexts: alaChasBpsFwTable.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsFwTable.setDescription('This table contains one row per shelf bps firrmware ')
alaChasBpsFwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsFwEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsFwEntry.setDescription('Information about a bps firrmare')
alaChasBpsShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 1), AlaChasBpsShelfId())
if mibBuilder.loadTexts: alaChasBpsShelfId.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsShelfId.setDescription('Bps shelf ID ')
alaChasBpsUpdateFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsUpdateFirmware.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsUpdateFirmware.setDescription('This object is used to start BPS firmware update.')
alaChasBpsCpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsCpldRev.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsCpldRev.setDescription('This object contains the CPLD revision Number of the  BPS')
alaChasBpsMmcuRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsMmcuRev.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsMmcuRev.setDescription('This object contains the MMCU revision Number of the  BPS')
alaChasBpsCmcuRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsCmcuRev.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsCmcuRev.setDescription('This object contains the CMCU revision Number of the  BPS')
alaChasBpsConnectorPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2), )
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityTable.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityTable.setDescription('This table contains BPS connector priority for each slot')
alaChasBpsConnectorPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsChassisId"))
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityEntry.setDescription('Information about bps connector priority for each slot')
alaChasBpsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaChasBpsChassisId.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsChassisId.setDescription('Numbers allocated for the stack NIs as follows:\n    - 1..8:       valid and assigned slot numbers corresponding to values from the entPhysicalTable')
alaChasBpsConnectorShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 2), AlaChasBpsShelfId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsConnectorShelfId.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorShelfId.setDescription('Bps shelf ID ')
alaChasBpsConnectorPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsConnectorPriority.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorPriority.setDescription('This object specifies the bps connector priority.')
alaChasBpsConnectorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsConnectorNum.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorNum.setDescription('This object specifies the bps connector num.')
alaChasBpsSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSerialNum.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsSerialNum.setDescription('This object specifies the bps serial num.')
alaChasBpsModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3), )
if mibBuilder.loadTexts: alaChasBpsModeTable.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsModeTable.setDescription('This table contains one row for bps config parameters.')
alaChasBpsModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsModeEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsModeEntry.setDescription(' Information about bps mode')
alaChasBpsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("full", 2), ("notApplicable", 3))).clone('single')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaChasBpsMode.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsMode.setDescription('This object is only applicable to BPS .Value is\n    used to specify current Mode of switch.')
alaChasBpsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4), )
if mibBuilder.loadTexts: alaChasBpsPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyTable.setDescription('This table contains   BPS power supplies details')
alaChasBpsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyShelfId"), (0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyIndex"))
if mibBuilder.loadTexts: alaChasBpsPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyEntry.setDescription('Information about a particular  BPS power supply')
alaChasBpsPowerSupplyShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 1), AlaChasBpsShelfId())
if mibBuilder.loadTexts: alaChasBpsPowerSupplyShelfId.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyShelfId.setDescription('BPS shelf ID')
alaChasBpsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: alaChasBpsPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyIndex.setDescription('This value hold BPS power power supply Index')
alaChasBpsPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyName.setDescription('This object hold name of BPS power supply')
alaChasBpsPowerSupplyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyDescr.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyDescr.setDescription('This object hold description of BPS power supply')
alaChasBpsPowerSupplyModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyModuleType.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyModuleType.setDescription('This object is unique module Type or ID from BPS entities eeprom')
alaChasBpsPowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPartNumber.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPartNumber.setDescription('This object contains the BPS power supply  Part Number ')
alaChasBpsPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyHardwareRev.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyHardwareRev.setDescription('The vendor-specific hardware revision string for the\n    BPS  power supplies\n    Note that if revision information is stored internally in a\n    non-printable (e.g., binary) format, then the agent must\n    convert such information to a printable format, in an\n    implementation-specific manner.\n\n    If no specific hardware revision string is associated with\n    the physical component, or this information is unknown to\n    the agent, then this object will contain a zero-length\n    string.')
alaChasBpsPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplySerialNum.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplySerialNum.setDescription('The vendor-specific serial number string for the\n    BPS power supplies')
alaChasBpsPowerSupplyMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyMfgDate.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyMfgDate.setDescription('This object contains the manufacturing date of the BPS power supplies .\n    Its format is mmm dd yyyy : NOV 27 2012.')
alaChasBpsPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyOperStatus.setDescription('Oper status of  BPS power supply')
alaChasBpsPowerSupplyPowerProv = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPowerProv.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyPowerProv.setDescription(' It corresponds to  max power  of  BPS power supply.\n    This value is in Watts.')
alaChasBpsTotalPowerAllocTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5), )
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocTable.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocTable.setDescription('This table contains one row for parameters which reflect total allocation by BPS .')
alaChasBpsTotalPowerAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsShelfId"))
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocEntry.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocEntry.setDescription(' Information about various bps config parameters')
alaChasBpsSysTotalAvailablePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSysTotalAvailablePower.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsSysTotalAvailablePower.setDescription('This value is only applicable to the BPS Module.  It\n    corresponds to system total power available on BPS\n    This value is in Watts.')
alaChasBpsSysTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsSysTotalAllocation.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsSysTotalAllocation.setDescription('This value is only applicable to the BPS Modules.  It\n    corresponds to  total system  power allocated by  BPS\n    This value is in Watts.')
alaChasBpsPoeTotalAvailablePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPoeTotalAvailablePower.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPoeTotalAvailablePower.setDescription('This value is only applicable to the  BPS Modules.  It\n    corresponds to system total power available on BPS\n    This value is in Watts.')
alaChasBpsPoeTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaChasBpsPoeTotalAllocation.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPoeTotalAllocation.setDescription('This value is only applicable to the Bps Modules.  It\n    corresponds to  total POE  power allocated by  BPS\n    This value is in Watts.')
chassisTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13))
class ChassisTrapsStrLevel(TextualConvention, Integer32):
    description = 'enumerated value which provide the\n        urgency level of the STR.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("strNotFatal", 1), ("strApplicationFatal", 2), ("strFatal", 3))

class ChassisTrapsStrAppID(TextualConvention, Integer32):
    description = 'Application Identification number'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsStrSnapID(TextualConvention, Integer32):
    description = 'Subapplication Identification number.\n        we can have multiple snapIDs per\n        Subapplication (task) but only one is\n        to be used to send STRs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsStrfileLineNb(TextualConvention, Integer32):
    description = 'Line number in the source file where the\n        fault was detected. This is given by the C\n        ANSI macro __LINE__.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class ChassisTrapsStrErrorNb(TextualConvention, Integer32):
    description = 'Fault identifier. The error number\n        identifies the kind the detected fault and\n        allows a mapping of the data contained in\n        chassisTrapsdataInfo.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class ChassisTrapsStrdataInfo(TextualConvention, OctetString):
    description = 'Additional data provided to help to find out\n        the origine of the fault. The contain and the\n        significant portion are varying in accordance\n        with chassisTrapsStrErrorNb. The lenght of this\n        field is expressed in bytes.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 63)

class ChassisTrapsObjectType(TextualConvention, Integer32):
    description = 'An enumerated value which provides the object type\n        involved in the alert trap.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassis", 1), ("ni", 2), ("powerSuply", 3), ("fan", 4), ("cmm", 5), ("fabric", 6), ("gbic", 7))

class ChassisTrapsObjectNumber(TextualConvention, Integer32):
    description = 'A number defining the order of the object in the\n        set. EX: The number of the considered fan or power\n        supply. This intend to clarify as much as possible\n        the location of the failure or alert. An instance\n        of the appearance of the trap could be:\n        failure on a module. Power supply 3.  '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChassisTrapsAlertNumber(TextualConvention, Integer32):
    description = 'this number identify the alert among all the\n        possible chassis alert causes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62))
    namedValues = NamedValues(("runningWorking", 1), ("runningCertified", 2), ("certifyStarted", 3), ("certifyFlashSyncStarted", 4), ("certifyCompleted", 5), ("certifyFailed", 6), ("synchroStarted", 7), ("synchroCompleted", 8), ("synchroFailed", 9), ("restoreStarted", 10), ("restoreCompleted", 11), ("restoreFailed", 12), ("takeoverStarted", 13), ("takeoverDeferred", 14), ("takeoverCompleted", 15), ("macAllocFailed", 16), ("macRangeFailed", 17), ("fanFailed", 18), ("fanOk", 19), ("fansOk", 20), ("tempOverThreshold", 21), ("tempUnderThreshold", 22), ("tempOverDangerThreshold", 23), ("powerMissing", 24), ("psNotOperational", 25), ("psOperational", 26), ("psAllOperational", 27), ("redundancyNotSupported", 28), ("redundancyDisabledCertifyNeeded", 29), ("cmmStartingAsPrimary", 30), ("cmmStartingAsSecondary", 31), ("cmmStartupCompleted", 32), ("cmmAPlugged", 33), ("cmmBPlugged", 34), ("cmmAUnPlugged", 35), ("cmmBUnPlugged", 36), ("lowNvramBattery", 37), ("notEnoughFabricsOperational", 38), ("simplexNoSynchro", 39), ("secAutoActivate", 40), ("secAutoCertifyStarted", 41), ("secAutoCertifyCompleted", 42), ("secInactiveReset", 43), ("activateScheduled", 44), ("activateStarted", 45), ("getAfileCompleted", 46), ("getAfileFailed", 47), ("sysUpdateStart", 48), ("sysUpdateInProgress", 49), ("sysUpdateError", 50), ("sysUpdateEnd", 51), ("reloadInProgress", 52), ("c20UpgradeOk", 53), ("c20UpgradeFailed", 54), ("c20RestoreOk", 55), ("c20RestoreFailed", 56), ("c20NiFailed", 57), ("airflowReverse", 58), ("tempSWHigh", 59), ("tempHWHigh", 60), ("tempDanger", 61), ("imageFileChecksumChanged", 62))

chassisTrapsStr = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrLevel"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrAppID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrSnapID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileLineNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrErrorNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrcomments"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrdataInfo"))
if mibBuilder.loadTexts: chassisTrapsStr.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStr.setDescription('A Software Trouble report is sent by whatever application\n        encountering a problem during its execution and would\n        want to aware the user of for maintenance purpose.      ')
chassisTrapsAlert = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertDescr"))
if mibBuilder.loadTexts: chassisTrapsAlert.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsAlert.setDescription("generic trap notifying something changed in the chassis\n        whatever it's a failure or not                          ")
chassisTrapsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysOperStatus"))
if mibBuilder.loadTexts: chassisTrapsStateChange.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStateChange.setDescription('A status change was detected')
chasTrapsBPSLessAllocSysPwr = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 4)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiRqstdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiGrantdBpsSysPower"))
if mibBuilder.loadTexts: chasTrapsBPSLessAllocSysPwr.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSLessAllocSysPwr.setDescription('Insufficient system power given by BPS')
chasTrapsBPSStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 5)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPowerSupply"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSEventAlert"))
if mibBuilder.loadTexts: chasTrapsBPSStateChange.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSStateChange.setDescription('BPS power supplies insertion/removal  trap')
chasTrapsNiBPSFETStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 6)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSSystemFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPoeFETChange"))
if mibBuilder.loadTexts: chasTrapsNiBPSFETStateChange.setStatus('current')
if mibBuilder.loadTexts: chasTrapsNiBPSFETStateChange.setDescription('BPS power supplies FET state change  trap')
chasTrapsBPSFwUpgradeAlert = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 0, 7)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwVersion"))
if mibBuilder.loadTexts: chasTrapsBPSFwUpgradeAlert.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSFwUpgradeAlert.setDescription('BPS FW upgrade requirment alert trap')
chassisTrapsStrLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 1), ChassisTrapsStrLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrLevel.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrLevel.setDescription('An enumerated value which provides the\n        urgency level of the STR.')
chassisTrapsStrAppID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 2), ChassisTrapsStrAppID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrAppID.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrAppID.setDescription('Application Identification number')
chassisTrapsStrSnapID = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 3), ChassisTrapsStrSnapID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrSnapID.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrSnapID.setDescription('Subapplication Identification number.\n        we can have multiple snapIDs per\n        Subapplication (task) but only one is\n        to be used to send STRs.')
chassisTrapsStrfileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrfileName.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrfileName.setDescription("Name of the source file where the fault\n        was detected. This is given by the C ANSI\n        macro __FILE__. The path shouldn't appear.")
chassisTrapsStrfileLineNb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 5), ChassisTrapsStrfileLineNb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrfileLineNb.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrfileLineNb.setDescription('Line number in the source file where the\n        fault was detected. This is given by the C\n        ANSI macro __LINE__.')
chassisTrapsStrErrorNb = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 6), ChassisTrapsStrErrorNb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrErrorNb.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrErrorNb.setDescription('Fault identificator. The error number\n        identify the kind the detected fault and\n        allow a mapping of the data contained in\n        chassisTrapsdataInfo.')
chassisTrapsStrcomments = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrcomments.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrcomments.setDescription('comment text explaning the fault.')
chassisTrapsStrdataInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 8), ChassisTrapsStrdataInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsStrdataInfo.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsStrdataInfo.setDescription('Additional data provided to help to find out\n        the origine of the fault. The contain and the\n        significant portion are varying in accordance\n        with chassisTrapsStrErrorNb. The lenght of this\n        field is expressed in bytes.')
chassisTrapsObjectType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 9), ChassisTrapsObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsObjectType.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsObjectType.setDescription('enumerated value which provide the object type\n        involved in the alert trap.')
chassisTrapsObjectNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 10), ChassisTrapsObjectNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsObjectNumber.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsObjectNumber.setDescription('number defining the order of the object in the\n        set. EX: number of the considered fan or power\n        supply. This intend to clarify as much as possible\n        the location of the failure or alert. A instance\n        of the appearance of the trap could be:\n        failure on a module. Power supply 3.  ')
chassisTrapsAlertNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 11), ChassisTrapsAlertNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsAlertNumber.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsAlertNumber.setDescription('this number identify the alert among all the\n        possible chassis alert causes.')
chassisTrapsAlertDescr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTrapsAlertDescr.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsAlertDescr.setDescription('description of the alert matching chassisTrapsAlertNumber')
physicalIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 13), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalIndex.setStatus('current')
if mibBuilder.loadTexts: physicalIndex.setDescription('The Physical index of the involved object.')
chasTrapsNiRqstdBpsSysPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsNiRqstdBpsSysPower.setStatus('current')
if mibBuilder.loadTexts: chasTrapsNiRqstdBpsSysPower.setDescription('Requested system power from os-bps')
chasTrapsNiGrantdBpsSysPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsNiGrantdBpsSysPower.setStatus('current')
if mibBuilder.loadTexts: chasTrapsNiGrantdBpsSysPower.setDescription('Granted system power from os-bps')
chasTrapBPSShelfId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapBPSShelfId.setStatus('current')
if mibBuilder.loadTexts: chasTrapBPSShelfId.setDescription('Granted system power from os-bps')
chasTrapsBPSPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 17), ChasTrapsBPSPowerSupply()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSPowerSupply.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSPowerSupply.setDescription('value which provide bps power supply involved in the\n    State change trap')
chasTrapsBPSEventAlert = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 18), ChasTrapsBPSEventAlert()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSEventAlert.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSEventAlert.setDescription('enumerated value identifying alert')
chasTrapsBPSSystemFETChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 19), ChasTrapsBPSFetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSSystemFETChange.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSSystemFETChange.setDescription('enumerated value which indicate Fet state')
chasTrapsBPSPoeFETChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 20), ChasTrapsBPSFetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSPoeFETChange.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSPoeFETChange.setDescription('enumerated value which indicate Fet state')
chasTrapsBPSFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSFwVersion.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSFwVersion.setDescription('enumerated value which indicate the FW that require upgrade')
chasTrapsBPSFwType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 1, 13, 22), ChasTrapsBPSFwType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapsBPSFwType.setStatus('current')
if mibBuilder.loadTexts: chasTrapsBPSFwType.setDescription('value which indicate Fet state')
alcatelIND1ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlModuleGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlRedundantGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasChassisGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadStatusGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisNotificationGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasNotificationObjectGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisSupervisionRfsCommandsGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmCertifiedEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashMemEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsEntryGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsFwGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorPriorityGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsModeGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsTotalPowerAllocGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ChassisMIBCompliance = alcatelIND1ChassisMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisMIBCompliance.setDescription('Compliance statement for Chassis Supervision.')
alcatelIND1ChassisPhysMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysicalGroup"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisPhysNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ChassisPhysMIBCompliance = alcatelIND1ChassisPhysMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ChassisPhysMIBCompliance.setDescription('Compliance statement for Chassis Supervision Physical.')
chasControlModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlActivateTimeout"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlVersionMngt"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedActivateTimer"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlCertifyStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlSynchronizationStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlAcrossCmmWorkingSynchroStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlAcrossCmmCertifiedSynchroStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlNextRunningVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlCurrentRunningVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlWorkingVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlRedundancyTime"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlEmpIpAddress"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlEmpIpMask"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlChassisId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlModuleGroup = chasControlModuleGroup.setStatus('current')
if mibBuilder.loadTexts: chasControlModuleGroup.setDescription('Chassis Supervision Control Modules Group.')
chasControlRedundantGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlNumberOfTakeover"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedRebootTimer"), ("ALCATEL-IND1-CHASSIS-MIB", "chasControlDelayedResetAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlRedundantGroup = chasControlRedundantGroup.setStatus('current')
if mibBuilder.loadTexts: chasControlRedundantGroup.setDescription('Chassis Supervision Redundant Control Modules Group.')
chasChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasFreeSlots"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerLeft"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNumberOfResets"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTempRange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTempThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasDangerTempThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPrimaryPhysicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCPMAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCPMBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMCHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasCFMDHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasFTAHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasFTBHardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI1HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI2HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI3HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI4HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI5HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI6HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI7HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasNI8HardwareBoardTemp"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerSupplyRedundancy"), ("ALCATEL-IND1-CHASSIS-MIB", "chasPowerSupplyRedundancyReserve"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasChassisGroup = chasChassisGroup.setStatus('current')
if mibBuilder.loadTexts: chasChassisGroup.setDescription('Chassis Supervision Chassis Group.')
chasControlReloadStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasControlReloadStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasControlReloadStatusGroup = chasControlReloadStatusGroup.setStatus('current')
if mibBuilder.loadTexts: chasControlReloadStatusGroup.setDescription('Chassis Supervision NI Reload Status Control Modules Group.')
chasGlobalControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlDelayedResetAll"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlLongCommand"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlLongCommandStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateFirmware"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateFilename"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlUpdateStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlConfirmOperation"), ("ALCATEL-IND1-CHASSIS-MIB", "chasGlobalControlConfirmMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasGlobalControlGroup = chasGlobalControlGroup.setStatus('current')
if mibBuilder.loadTexts: chasGlobalControlGroup.setDescription('Chassis Supervision Global Control Modules Group.')
chassisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStr"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSLessAllocSysPwr"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSStateChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiBPSFETStateChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwUpgradeAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisNotificationGroup = chassisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: chassisNotificationGroup.setDescription('Chassis Supervision Notification Group.')
alaChasEntPhysFanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanAirflow"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasEntPhysFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasEntPhysFanGroup = alaChasEntPhysFanGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasEntPhysFanGroup.setDescription('Chassis Supervision Physical Fan Group.')
alaChasNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrLevel"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrAppID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrSnapID"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrfileLineNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrErrorNb"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrcomments"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStrdataInfo"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectType"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsObjectNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlertDescr"), ("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiRqstdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsNiGrantdBpsSysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapBPSShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPowerSupply"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSEventAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSSystemFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSPoeFETChange"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwVersion"), ("ALCATEL-IND1-CHASSIS-MIB", "chasTrapsBPSFwType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasNotificationObjectGroup = alaChasNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasNotificationObjectGroup.setDescription('Chassis Supervision Notification Object Group.')
chassisSupervisionRfsCommandsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsCommand"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsSrcFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsDestFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsRlsDirName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsRlsFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsProcessingState"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsCommandsStatusCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisSupervisionRfsCommandsGroup = chassisSupervisionRfsCommandsGroup.setStatus('current')
if mibBuilder.loadTexts: chassisSupervisionRfsCommandsGroup.setDescription('Chassis Supervision RFS Command Group.')
chasSupervisionCmmCertifiedEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionCmmCertifiedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionCmmCertifiedEntryGroup = chasSupervisionCmmCertifiedEntryGroup.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionCmmCertifiedEntryGroup.setDescription('Information about Cmm Certified Group.')
chasSupervisionFlashMemEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionFlashUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionFlashMemEntryGroup = chasSupervisionFlashMemEntryGroup.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionFlashMemEntryGroup.setDescription('The systems flash memory information group.')
chasSupervisionRfsDfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfFlashFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfFlashSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfUsbFree"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsDfUsbSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionRfsDfEntryGroup = chasSupervisionRfsDfEntryGroup.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsDfEntryGroup.setDescription('Information about RfsDf file system group.')
chasSupervisionRfsLsEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileIndex"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsSlot"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsDirName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileName"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileSize"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileAttr"), ("ALCATEL-IND1-CHASSIS-MIB", "chasSupervisionRfsLsFileDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasSupervisionRfsLsEntryGroup = chasSupervisionRfsLsEntryGroup.setStatus('current')
if mibBuilder.loadTexts: chasSupervisionRfsLsEntryGroup.setDescription('Information about a RfsLs file group.')
alaChasBpsFwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsUpdateFirmware"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsCpldRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsMmcuRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsCmcuRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsFwGroup = alaChasBpsFwGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsFwGroup.setDescription('Information about BPS FW group.')
alaChasBpsConnectorPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorShelfId"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorPriority"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsConnectorNum"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsConnectorPriorityGroup = alaChasBpsConnectorPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsConnectorPriorityGroup.setDescription('Information about BPS Connector Priority group.')
alaChasBpsModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsModeGroup = alaChasBpsModeGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsModeGroup.setDescription('Information about BPS Mode group.')
alaChasBpsPowerSupplyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyName"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyDescr"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyModuleType"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyPartNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyHardwareRev"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplySerialNum"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyMfgDate"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyOperStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPowerSupplyPowerProv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsPowerSupplyGroup = alaChasBpsPowerSupplyGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsPowerSupplyGroup.setDescription(' BPS Power Supply  group.')
alaChasBpsTotalPowerAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 3, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSysTotalAvailablePower"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsSysTotalAllocation"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPoeTotalAvailablePower"), ("ALCATEL-IND1-CHASSIS-MIB", "alaChasBpsPoeTotalAllocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaChasBpsTotalPowerAllocGroup = alaChasBpsTotalPowerAllocGroup.setStatus('current')
if mibBuilder.loadTexts: alaChasBpsTotalPowerAllocGroup.setDescription(' BPS Total Power Alloc group.')
chasEntPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAdminStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysOperStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPower"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysModuleType"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPartNumber"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusOk1"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusOk2"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusPrimaryCMM"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusSecondaryCMM"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusTemperature"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusFan"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusBackupPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusInternalPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusControl"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusFabric"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysLedStatusPS"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic1Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic2Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic3Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic4Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic5Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAsic6Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysCpldRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysDaughterFpga1Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysDaughterFpga2Rev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysNiNum"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysGbicNum"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysWaveLen"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysUbootRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysUbootMinibootRev"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysMacAddress"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysCpuModel"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysAirflow"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPowerUsed"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntPhysPowerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasEntPhysicalGroup = chasEntPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: chasEntPhysicalGroup.setDescription('Chassis (inclosure) Entity Physical Group.')
chassisPhysNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStr"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsAlert"), ("ALCATEL-IND1-CHASSIS-MIB", "chassisTrapsStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisPhysNotificationGroup = chassisPhysNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: chassisPhysNotificationGroup.setDescription('Chassis Supervision Physical Notification Group.')
chassisTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempCurrent"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempDangerThreshold"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempStatus"), ("ALCATEL-IND1-CHASSIS-MIB", "chasEntTempThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisTemperatureGroup = chassisTemperatureGroup.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureGroup.setDescription('Chassis Supervision Temprature Group.')
mibBuilder.exportSymbols("ALCATEL-IND1-CHASSIS-MIB", chasSupervisionRfsLsFileName=chasSupervisionRfsLsFileName, chasSupervisionRfsLsFileType=chasSupervisionRfsLsFileType, chassisSupervisionRfsCommandsGroup=chassisSupervisionRfsCommandsGroup, chasChassisTable=chasChassisTable, chasSupervisionRfsLsFileIndex=chasSupervisionRfsLsFileIndex, chasControlActivateTimeout=chasControlActivateTimeout, alaChasBpsPowerSupplyIndex=alaChasBpsPowerSupplyIndex, ChasTrapsBPSFetState=ChasTrapsBPSFetState, alaChasBpsModeEntry=alaChasBpsModeEntry, alaChasBpsSerialNum=alaChasBpsSerialNum, chasControlRedundancyTime=chasControlRedundancyTime, chasTrapsNiRqstdBpsSysPower=chasTrapsNiRqstdBpsSysPower, alaChasBpsPowerSupplyTable=alaChasBpsPowerSupplyTable, alaChasNotificationObjectGroup=alaChasNotificationObjectGroup, chasCFMAHardwareBoardTemp=chasCFMAHardwareBoardTemp, chassisTrapsStrLevel=chassisTrapsStrLevel, chasGlobalControlUpdateSlot=chasGlobalControlUpdateSlot, chasGlobalControlDelayedResetAll=chasGlobalControlDelayedResetAll, alaChasEntPhysFanSpeed=alaChasEntPhysFanSpeed, chasControlChassisId=chasControlChassisId, alaChasEntPhysFanGroup=alaChasEntPhysFanGroup, alaChasBpsModeTable=alaChasBpsModeTable, chasTrapsBPSPowerSupply=chasTrapsBPSPowerSupply, ChasTrapsBPSFwType=ChasTrapsBPSFwType, chasControlWorkingVersion=chasControlWorkingVersion, chasControlNextRunningVersion=chasControlNextRunningVersion, chasDangerTempThreshold=chasDangerTempThreshold, chasSupervisionRfsCommandsDestFileName=chasSupervisionRfsCommandsDestFileName, chasSupervisionCmmCertifiedEntry=chasSupervisionCmmCertifiedEntry, chasEntPhysAsic4Rev=chasEntPhysAsic4Rev, chasTrapsBPSStateChange=chasTrapsBPSStateChange, chasControlRedundantGroup=chasControlRedundantGroup, chasControlDelayedActivateTimer=chasControlDelayedActivateTimer, chasEntPhysLedStatusFabric=chasEntPhysLedStatusFabric, alaChasBpsPowerSupplyPartNumber=alaChasBpsPowerSupplyPartNumber, alaChasBpsPoeTotalAllocation=alaChasBpsPoeTotalAllocation, AlaChasBpsShelfId=AlaChasBpsShelfId, alaChasBpsMode=alaChasBpsMode, chasCFMDHardwareBoardTemp=chasCFMDHardwareBoardTemp, chassisTrapsStrAppID=chassisTrapsStrAppID, chasControlSynchronizationStatus=chasControlSynchronizationStatus, chasSupervisionRfsDfUsbSize=chasSupervisionRfsDfUsbSize, chasGlobalControlUpdateStatus=chasGlobalControlUpdateStatus, chasSupervisionFlashMemTable=chasSupervisionFlashMemTable, alcatelIND1ChassisPhysMIBCompliance=alcatelIND1ChassisPhysMIBCompliance, chasEntPhysLedStatusFan=chasEntPhysLedStatusFan, chasSupervisionRfsLsEntryGroup=chasSupervisionRfsLsEntryGroup, chasControlModuleTable=chasControlModuleTable, chasControlCertifyStatus=chasControlCertifyStatus, chasControlAcrossCmmWorkingSynchroStatus=chasControlAcrossCmmWorkingSynchroStatus, chassisNotificationGroup=chassisNotificationGroup, chasNI7HardwareBoardTemp=chasNI7HardwareBoardTemp, chasSupervisionCmmCertifiedStatus=chasSupervisionCmmCertifiedStatus, chasEntPhysicalTable=chasEntPhysicalTable, chasEntPhysModuleType=chasEntPhysModuleType, chasCPMBHardwareBoardTemp=chasCPMBHardwareBoardTemp, ChassisTrapsStrLevel=ChassisTrapsStrLevel, chassisTrapsStrfileName=chassisTrapsStrfileName, chasPowerSupplyRedundancyReserve=chasPowerSupplyRedundancyReserve, chasControlModuleGroup=chasControlModuleGroup, chasSupervisionRfsDfEntryGroup=chasSupervisionRfsDfEntryGroup, chassisTrapsStr=chassisTrapsStr, chasEntTemperatureEntry=chasEntTemperatureEntry, chasNI1HardwareBoardTemp=chasNI1HardwareBoardTemp, chasFreeSlots=chasFreeSlots, chasSupervisionFlashFree=chasSupervisionFlashFree, chasGlobalControlConfirmMessage=chasGlobalControlConfirmMessage, alaChasBpsUpdateFirmware=alaChasBpsUpdateFirmware, alaChasBpsTotalPowerAllocEntry=alaChasBpsTotalPowerAllocEntry, alcatelIND1ChassisMIBGroups=alcatelIND1ChassisMIBGroups, alcatelIND1ChassisPhysMIBGroups=alcatelIND1ChassisPhysMIBGroups, chasEntPhysLedStatusBackupPS=chasEntPhysLedStatusBackupPS, alaChasEntPhysFanLocalIndex=alaChasEntPhysFanLocalIndex, alaChasBpsTotalPowerAllocTable=alaChasBpsTotalPowerAllocTable, ChassisTrapsObjectNumber=ChassisTrapsObjectNumber, ChassisTrapsStrfileLineNb=ChassisTrapsStrfileLineNb, chasSupervisionSlot=chasSupervisionSlot, chasEntPhysMacAddress=chasEntPhysMacAddress, chasTrapsBPSLessAllocSysPwr=chasTrapsBPSLessAllocSysPwr, chasTrapsBPSFwUpgradeAlert=chasTrapsBPSFwUpgradeAlert, chasControlNumberOfTakeover=chasControlNumberOfTakeover, chasSupervisionRfsCommandsSrcFileName=chasSupervisionRfsCommandsSrcFileName, alaChasBpsMmcuRev=alaChasBpsMmcuRev, chasEntPhysNiNum=chasEntPhysNiNum, chasCPMAHardwareBoardTemp=chasCPMAHardwareBoardTemp, ChassisTrapsStrErrorNb=ChassisTrapsStrErrorNb, alaChasBpsShelfId=alaChasBpsShelfId, chasTrapsNiBPSFETStateChange=chasTrapsNiBPSFETStateChange, alaChasBpsPowerSupplyHardwareRev=alaChasBpsPowerSupplyHardwareRev, ChassisTrapsStrAppID=ChassisTrapsStrAppID, alaChasBpsTotalPowerAllocGroup=alaChasBpsTotalPowerAllocGroup, chasControlReloadStatus=chasControlReloadStatus, chasPrimaryPhysicalIndex=chasPrimaryPhysicalIndex, alaChasBpsModeGroup=alaChasBpsModeGroup, chasNI5HardwareBoardTemp=chasNI5HardwareBoardTemp, chasGlobalControlLongCommandStatus=chasGlobalControlLongCommandStatus, chasControlDelayedRebootTimer=chasControlDelayedRebootTimer, chasSupervisionRfsCommandsStatusCode=chasSupervisionRfsCommandsStatusCode, alcatelIND1ChassisPhysMIBConformance=alcatelIND1ChassisPhysMIBConformance, chasControlAcrossCmmCertifiedSynchroStatus=chasControlAcrossCmmCertifiedSynchroStatus, chasControlEmpIpMask=chasControlEmpIpMask, chasTrapsBPSEventAlert=chasTrapsBPSEventAlert, chassisTemperatureGroup=chassisTemperatureGroup, chasTrapBPSShelfId=chasTrapBPSShelfId, chasGlobalControlLongCommand=chasGlobalControlLongCommand, chasEntPhysDaughterFpga1Rev=chasEntPhysDaughterFpga1Rev, chasEntPhysUbootMinibootRev=chasEntPhysUbootMinibootRev, chasEntPhysAsic1Rev=chasEntPhysAsic1Rev, alaChasBpsSysTotalAllocation=alaChasBpsSysTotalAllocation, chasCFMBHardwareBoardTemp=chasCFMBHardwareBoardTemp, chasEntPhysicalGroup=chasEntPhysicalGroup, alcatelIND1ChassisMIBCompliances=alcatelIND1ChassisMIBCompliances, chasSupervisionRfsLsFileAttr=chasSupervisionRfsLsFileAttr, alaChasBpsChassisId=alaChasBpsChassisId, chasEntPhysLedStatusInternalPS=chasEntPhysLedStatusInternalPS, alcatelIND1ChassisPhysMIBCompliances=alcatelIND1ChassisPhysMIBCompliances, chasSupervisionFlashMemEntry=chasSupervisionFlashMemEntry, chasTempThreshold=chasTempThreshold, ChassisTrapsObjectType=ChassisTrapsObjectType, chasEntPhysLedStatusSecondaryCMM=chasEntPhysLedStatusSecondaryCMM, chassisTrapsStrdataInfo=chassisTrapsStrdataInfo, chasSupervisionCmmCertifiedEntryGroup=chasSupervisionCmmCertifiedEntryGroup, chassisPhysNotificationGroup=chassisPhysNotificationGroup, PYSNMP_MODULE_ID=alcatelIND1ChassisMIB, chasGlobalControl=chasGlobalControl, chasEntPhysLedStatusPS=chasEntPhysLedStatusPS, chasCFMCHardwareBoardTemp=chasCFMCHardwareBoardTemp, alcatelIND1ChassisMIBObjects=alcatelIND1ChassisMIBObjects, chasEntPhysAsic3Rev=chasEntPhysAsic3Rev, alaChasBpsPowerSupplyDescr=alaChasBpsPowerSupplyDescr, chasTrapsBPSFwType=chasTrapsBPSFwType, chasEntPhysPartNumber=chasEntPhysPartNumber, chasEntPhysLedStatusPrimaryCMM=chasEntPhysLedStatusPrimaryCMM, chasSupervisionRfsCommandsRlsDirName=chasSupervisionRfsCommandsRlsDirName, chasEntPhysAdminStatus=chasEntPhysAdminStatus, chasControlReloadStatusTable=chasControlReloadStatusTable, alaChasBpsConnectorNum=alaChasBpsConnectorNum, chasSupervisionRfsLsTable=chasSupervisionRfsLsTable, alaChasBpsSysTotalAvailablePower=alaChasBpsSysTotalAvailablePower, alaChasBpsPoeTotalAvailablePower=alaChasBpsPoeTotalAvailablePower, chasNI8HardwareBoardTemp=chasNI8HardwareBoardTemp, chasTrapsBPSPoeFETChange=chasTrapsBPSPoeFETChange, alcatelIND1ChassisMIB=alcatelIND1ChassisMIB, chasSupervisionRfsCommandsRlsFileName=chasSupervisionRfsCommandsRlsFileName, chasEntTempCurrent=chasEntTempCurrent, chasEntPhysWaveLen=chasEntPhysWaveLen, physicalIndex=physicalIndex, chasSupervisionRfsDfEntry=chasSupervisionRfsDfEntry, alaChasBpsConnectorPriorityGroup=alaChasBpsConnectorPriorityGroup, ChassisTrapsStrdataInfo=ChassisTrapsStrdataInfo, ChasEntPhysLed=ChasEntPhysLed, chasEntPhysicalEntry=chasEntPhysicalEntry, chasSupervisionRfsDfFlashSize=chasSupervisionRfsDfFlashSize, alaChasBpsConnectorPriority=alaChasBpsConnectorPriority, alaChasBpsPowerSupplyModuleType=alaChasBpsPowerSupplyModuleType, ChassisTrapsAlertNumber=ChassisTrapsAlertNumber, chasSupervisionRfsDfUsbFree=chasSupervisionRfsDfUsbFree, chasNumberOfResets=chasNumberOfResets, chasEntTempDangerThreshold=chasEntTempDangerThreshold, alcatelIND1ChassisMIBNotifications=alcatelIND1ChassisMIBNotifications, chasPowerSupplyRedundancy=chasPowerSupplyRedundancy, chassisTrapsAlertNumber=chassisTrapsAlertNumber, alaChasBpsCpldRev=alaChasBpsCpldRev, alaChasEntPhysFanAirflow=alaChasEntPhysFanAirflow, chasGlobalControlConfirmOperation=chasGlobalControlConfirmOperation, chasChassisGroup=chasChassisGroup, chasEntPhysLedStatusOk1=chasEntPhysLedStatusOk1, chasEntPhysLedStatusOk2=chasEntPhysLedStatusOk2, chasSupervisionRfsLsDirName=chasSupervisionRfsLsDirName, chasEntPhysCpuModel=chasEntPhysCpuModel, alaChasBpsPowerSupplyMfgDate=alaChasBpsPowerSupplyMfgDate, alcatelIND1ChassisMIBConformance=alcatelIND1ChassisMIBConformance, alaChasBpsPowerSupplyName=alaChasBpsPowerSupplyName, chasControlVersionMngt=chasControlVersionMngt, chassisTrapsObjectType=chassisTrapsObjectType, chasControlDelayedResetAll=chasControlDelayedResetAll, chasTempRange=chasTempRange, chasControlEmpIpAddress=chasControlEmpIpAddress, chasSupervisionRfsCommandsSlot=chasSupervisionRfsCommandsSlot, alaChasBpsCmcuRev=alaChasBpsCmcuRev, chasEntPhysDaughterFpga2Rev=chasEntPhysDaughterFpga2Rev, chasControlRedundantEntry=chasControlRedundantEntry, chasEntPhysLedStatusControl=chasEntPhysLedStatusControl, chasSupervisionRfsDfSlot=chasSupervisionRfsDfSlot, alaChasBpsConnectorPriorityEntry=alaChasBpsConnectorPriorityEntry, ChassisTrapsStrSnapID=ChassisTrapsStrSnapID, chassisTrapsStrErrorNb=chassisTrapsStrErrorNb, chassisTrapsAlert=chassisTrapsAlert, chasTrapsBPSFwVersion=chasTrapsBPSFwVersion, chasEntPhysPowerType=chasEntPhysPowerType, chasEntPhysPowerUsed=chasEntPhysPowerUsed, chasChassisEntry=chasChassisEntry, chasSupervisionRfsLsFileDateTime=chasSupervisionRfsLsFileDateTime, chasSupervisionFlashUsed=chasSupervisionFlashUsed, alaChasBpsConnectorPriorityTable=alaChasBpsConnectorPriorityTable, chasGlobalControlUpdateFirmware=chasGlobalControlUpdateFirmware, alcatelIND1ChassisSupervisionRfsCommands=alcatelIND1ChassisSupervisionRfsCommands, chassisTrapsStateChange=chassisTrapsStateChange, chasEntPhysUbootRev=chasEntPhysUbootRev, chasGlobalControlUpdateFilename=chasGlobalControlUpdateFilename, chasSupervisionFlashMemEntryGroup=chasSupervisionFlashMemEntryGroup, chasEntPhysLedStatusTemperature=chasEntPhysLedStatusTemperature, chassisTrapsStrSnapID=chassisTrapsStrSnapID, chassisTrapsStrcomments=chassisTrapsStrcomments, chassisTrapsAlertDescr=chassisTrapsAlertDescr, chasGlobalControlGroup=chasGlobalControlGroup, chasSupervisionRfsLsFileSize=chasSupervisionRfsLsFileSize, alaChasEntPhysFanEntry=alaChasEntPhysFanEntry, chassisTrapsObj=chassisTrapsObj, chasSupervisionRfsDfTable=chasSupervisionRfsDfTable, ChasTrapsBPSPowerSupply=ChasTrapsBPSPowerSupply, chasControlReloadStatusGroup=chasControlReloadStatusGroup, chasControlRedundantTable=chasControlRedundantTable, chasNI2HardwareBoardTemp=chasNI2HardwareBoardTemp, chasControlCurrentRunningVersion=chasControlCurrentRunningVersion, chasFTAHardwareBoardTemp=chasFTAHardwareBoardTemp, chasNI6HardwareBoardTemp=chasNI6HardwareBoardTemp, alaChasEntPhysFanTable=alaChasEntPhysFanTable, alcatelIND1ChassisMIBCompliance=alcatelIND1ChassisMIBCompliance, chasSupervisionRfsCommandsProcessingState=chasSupervisionRfsCommandsProcessingState, chasControlModuleEntry=chasControlModuleEntry, ChasTrapsBPSEventAlert=ChasTrapsBPSEventAlert, chasNI4HardwareBoardTemp=chasNI4HardwareBoardTemp, chasSupervisionFlashSize=chasSupervisionFlashSize, alaChasBpsFwTable=alaChasBpsFwTable, chasEntPhysAsic2Rev=chasEntPhysAsic2Rev, chasEntTemperatureTable=chasEntTemperatureTable, chasEntPhysAsic6Rev=chasEntPhysAsic6Rev, chassisTrapsStrfileLineNb=chassisTrapsStrfileLineNb, chasEntTempStatus=chasEntTempStatus, chasEntPhysAsic5Rev=chasEntPhysAsic5Rev, chasEntPhysOperStatus=chasEntPhysOperStatus, alcatelIND1ChassisPhysMIBObjects=alcatelIND1ChassisPhysMIBObjects, chasPowerLeft=chasPowerLeft, chasFTBHardwareBoardTemp=chasFTBHardwareBoardTemp, alaChasBpsPowerSupplyShelfId=alaChasBpsPowerSupplyShelfId, alaChasBpsConnectorShelfId=alaChasBpsConnectorShelfId, chasEntTempThreshold=chasEntTempThreshold, alaChasBpsPowerSupplyOperStatus=alaChasBpsPowerSupplyOperStatus, chasNI3HardwareBoardTemp=chasNI3HardwareBoardTemp, chasEntPhysPower=chasEntPhysPower, chasSupervisionCmmCertifiedTable=chasSupervisionCmmCertifiedTable, alaChasBpsPowerSupplySerialNum=alaChasBpsPowerSupplySerialNum, alaChasBpsObjects=alaChasBpsObjects, chasEntPhysGbicNum=chasEntPhysGbicNum, chasEntPhysAirflow=chasEntPhysAirflow, chasTrapsBPSSystemFETChange=chasTrapsBPSSystemFETChange, alaChasBpsFwGroup=alaChasBpsFwGroup, alaChasEntPhysFanStatus=alaChasEntPhysFanStatus, alaChasBpsPowerSupplyEntry=alaChasBpsPowerSupplyEntry, alaChasBpsFwEntry=alaChasBpsFwEntry, chasSupervisionRfsLsSlot=chasSupervisionRfsLsSlot, alaChasBpsPowerSupplyPowerProv=alaChasBpsPowerSupplyPowerProv, chasSupervisionRfsCommandsCommand=chasSupervisionRfsCommandsCommand)
mibBuilder.exportSymbols("ALCATEL-IND1-CHASSIS-MIB", chasControlReloadEntry=chasControlReloadEntry, chassisTrapsObjectNumber=chassisTrapsObjectNumber, chasControlReloadIndex=chasControlReloadIndex, alaChasBpsPowerSupplyGroup=alaChasBpsPowerSupplyGroup, chasSupervisionCmmNum=chasSupervisionCmmNum, chasSupervisionRfsLsEntry=chasSupervisionRfsLsEntry, chasEntPhysCpldRev=chasEntPhysCpldRev, chasTrapsNiGrantdBpsSysPower=chasTrapsNiGrantdBpsSysPower, chasSupervisionRfsDfFlashFree=chasSupervisionRfsDfFlashFree)
