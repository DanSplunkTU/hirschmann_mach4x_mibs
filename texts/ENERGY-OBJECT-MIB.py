#
# PySNMP MIB module ENERGY-OBJECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/ENERGY-OBJECT-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 04:23:21 2022
# On host fv-az39-968 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
PowerStateSet, = mibBuilder.importSymbols("IANAPowerStateSet-MIB", "PowerStateSet")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, Gauge32, ModuleIdentity, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Unsigned32, iso, MibIdentifier, TimeTicks, Bits, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Gauge32", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Unsigned32", "iso", "MibIdentifier", "TimeTicks", "Bits", "NotificationType", "Integer32")
TruthValue, StorageType, RowStatus, DisplayString, TimeInterval, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "StorageType", "RowStatus", "DisplayString", "TimeInterval", "TextualConvention", "TimeStamp")
energyObjectMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 229))
energyObjectMib.setRevisions(('2015-02-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: energyObjectMib.setRevisionsDescriptions(('Initial version, published as RFC 7460.',))
if mibBuilder.loadTexts: energyObjectMib.setLastUpdated('201502090000Z')
if mibBuilder.loadTexts: energyObjectMib.setOrganization('IETF EMAN Working Group')
if mibBuilder.loadTexts: energyObjectMib.setContactInfo('WG charter:\n             http://datatracker.ietf.org/wg/eman/charter/\n\n             Mailing Lists:\n             General Discussion: eman@ietf.org\n\n             To Subscribe:\n             https://www.ietf.org/mailman/listinfo/eman\n\n             Archive:\n             http://www.ietf.org/mail-archive/web/eman\n\n          Editors:\n             Mouli Chandramouli\n             Cisco Systems, Inc.\n             Sarjapur Outer Ring Road\n             Bangalore 560103\n             India\n             Phone: +91 80 4429 2409\n             Email: moulchan@cisco.com\n\n             Brad Schoening\n             44 Rivers Edge Drive\n             Little Silver, NJ 07739\n             United States\n             Email: brad.schoening@verizon.net\n\n             Juergen Quittek\n             NEC Europe, Ltd.\n             NEC Laboratories Europe\n             Network Research Division\n             Kurfuersten-Anlage 36\n             Heidelberg  69115\n             Germany\n             Phone: +49 6221 4342-115\n             Email: quittek@neclab.eu\n\n             Thomas Dietz\n             NEC Europe, Ltd.\n             NEC Laboratories Europe\n             Network Research Division\n             Kurfuersten-Anlage 36\n             69115 Heidelberg\n             Germany\n             Phone: +49 6221 4342-128\n             Email: Thomas.Dietz@nw.neclab.eu\n\n             Benoit Claise\n             Cisco Systems, Inc.\n             De Kleetlaan 6a b1\n             Degem 1831\n             Belgium\n             Phone:  +32 2 704 5622\n             Email: bclaise@cisco.com')
if mibBuilder.loadTexts: energyObjectMib.setDescription("Copyright (c) 2015 IETF Trust and the persons identified as\n        authors of the code.  All rights reserved.\n\n        Redistribution and use in source and binary forms, with or\n        without modification, is permitted pursuant to, and subject\n        to the license terms contained in, the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\n        This MIB is used to monitor power and energy in\n        devices.\n\n        The tables eoMeterCapabilitiesTable and eoPowerTable\n        are a sparse extension of the eoTable from the\n        ENERGY-OBJECT-CONTEXT-MIB.  As a requirement,\n        [RFC7461] SHOULD be implemented.\n\n        Module Compliance of ENTITY-MIB v4 with respect to\n        entity4CRCompliance MUST be supported which requires\n        implementation of 4 MIB objects: entPhysicalIndex,\n        entPhysicalClass, entPhysicalName and entPhysicalUUID.")
energyObjectMibNotifs = MibIdentifier((1, 3, 6, 1, 2, 1, 229, 0))
energyObjectMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 229, 1))
energyObjectMibConform = MibIdentifier((1, 3, 6, 1, 2, 1, 229, 2))
class UnitMultiplier(TextualConvention, Integer32):
    reference = 'The International System of Units (SI), National\n       Institute of Standards and Technology, Spec. Publ. 330,\n       August 1991.'
    description = 'The Unit Multiplier is an integer value that represents\n       the IEEE 61850 Annex A units multiplier associated with\n       the integer units used to measure the power or energy.\n\n       For example, when used with eoPowerUnitMultiplier, -3\n       represents 10^-3 or milliwatts.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-24, -21, -18, -15, -12, -9, -6, -3, 0, 3, 6, 9, 12, 15, 18, 21, 24))
    namedValues = NamedValues(("yocto", -24), ("zepto", -21), ("atto", -18), ("femto", -15), ("pico", -12), ("nano", -9), ("micro", -6), ("milli", -3), ("units", 0), ("kilo", 3), ("mega", 6), ("giga", 9), ("tera", 12), ("peta", 15), ("exa", 18), ("zetta", 21), ("yotta", 24))

eoMeterCapabilitiesTable = MibTable((1, 3, 6, 1, 2, 1, 229, 1, 1), )
if mibBuilder.loadTexts: eoMeterCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: eoMeterCapabilitiesTable.setDescription('This table is useful for helping applications determine\n       the monitoring capabilities supported by the local\n       management agents.  It is possible for applications to\n       know which tables are usable without going through a\n       trial-and-error process.')
eoMeterCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 229, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: eoMeterCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: eoMeterCapabilitiesEntry.setDescription('An entry describes the metering capability of an Energy\n       Object.')
eoMeterCapability = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("none", 0), ("powermetering", 1), ("energymetering", 2), ("powerattributes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoMeterCapability.setStatus('current')
if mibBuilder.loadTexts: eoMeterCapability.setDescription('An indication of the energy-monitoring capabilities\n       supported by this agent.  This object use a BITS syntax\n       and indicates the MIB groups supported by the probe.  By\n       reading the value of this object, it is possible to\n       determine the MIB tables supported.')
eoPowerTable = MibTable((1, 3, 6, 1, 2, 1, 229, 1, 2), )
if mibBuilder.loadTexts: eoPowerTable.setStatus('current')
if mibBuilder.loadTexts: eoPowerTable.setDescription('This table lists Energy Objects.')
eoPowerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 229, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: eoPowerEntry.setStatus('current')
if mibBuilder.loadTexts: eoPowerEntry.setDescription('An entry describes the power usage of an Energy Object.')
eoPower = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 1), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPower.setStatus('current')
if mibBuilder.loadTexts: eoPower.setDescription("This object indicates the power measured for the Energy\n       Object.  For alternating current, this value is obtained\n       as an average over fixed number of AC cycles.  This value\n       is specified in SI units of watts with the magnitude of\n       watts (milliwatts, kilowatts, etc.) indicated separately\n       in eoPowerUnitMultiplier.  The accuracy of the measurement\n       is specified in eoPowerAccuracy.  The direction of power\n       flow is indicated by the sign on eoPower.  If the Energy\n       Object is consuming power, the eoPower value will be\n       positive.  If the Energy Object is producing power, the\n       eoPower value will be negative.\n\n       The eoPower MUST be less than or equal to the maximum\n       power that can be consumed at the Power State specified\n       by eoPowerState.\n\n       The eoPowerMeasurementCaliber object specifies how the\n       usage value reported by eoPower was obtained.  The eoPower\n       value must report 0 if the eoPowerMeasurementCaliber is\n       'unavailable'.  For devices that cannot measure or\n       report power, this option can be used.")
eoPowerNameplate = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 2), Unsigned32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerNameplate.setStatus('current')
if mibBuilder.loadTexts: eoPowerNameplate.setDescription('This object indicates the rated maximum consumption for\n       the fully populated Energy Object.  The nameplate power\n       requirements are the maximum power numbers given in SI\n       watts and, in almost all cases, are well above the\n       expected operational consumption.  Nameplate power is\n       widely used for power provisioning.  This value is\n       specified in either units of watts or voltage and\n       current.  The units are therefore SI watts or equivalent\n\n       Volt-Amperes with the magnitude (milliwatts, kilowatts,\n       etc.) indicated separately in eoPowerUnitMultiplier.')
eoPowerUnitMultiplier = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 3), UnitMultiplier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerUnitMultiplier.setStatus('current')
if mibBuilder.loadTexts: eoPowerUnitMultiplier.setDescription('The magnitude of watts for the usage value in eoPower\n       and eoPowerNameplate.')
eoPowerAccuracy = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerAccuracy.setStatus('current')
if mibBuilder.loadTexts: eoPowerAccuracy.setDescription('This object indicates a percentage value, in hundredths of a\n       percent, representing the assumed accuracy of the usage\n       reported by eoPower.  For example, the value 1010 means\n       the reported usage is accurate to +/- 10.1 percent.  This\n       value is zero if the accuracy is unknown or not\n       applicable based upon the measurement method.\n\n       ANSI and IEC define the following accuracy classes for\n       power measurement:\n            IEC 62053-22 60044-1 class 0.1, 0.2, 0.5, 1  3.\n            ANSI C12.20 class 0.2, 0.5')
eoPowerMeasurementCaliber = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unavailable", 1), ("unknown", 2), ("actual", 3), ("estimated", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerMeasurementCaliber.setStatus('current')
if mibBuilder.loadTexts: eoPowerMeasurementCaliber.setDescription("This object specifies how the usage value reported by\n       eoPower was obtained:\n\n       - unavailable(1): Indicates that the usage is not\n       available.  In such a case, the eoPower value must be 0\n       for devices that cannot measure or report power this\n\n       option can be used.\n\n       - unknown(2): Indicates that the way the usage was\n       determined is unknown.  In some cases, entities report\n       aggregate power on behalf of another device.  In such\n       cases it is not known whether the usage reported is\n       actual, estimated, or static.\n\n       - actual(3):  Indicates that the reported usage was\n       measured by the entity through some hardware or direct\n       physical means.  The usage data reported is not estimated\n       or static but is the measured consumption rate.\n\n       - estimated(4): Indicates that the usage was not\n       determined by physical measurement.  The value is a\n       derivation based upon the device type, state, and/or\n       current utilization using some algorithm or heuristic.  It\n       is presumed that the entity's state and current\n       configuration were used to compute the value.\n\n       - static(5): Indicates that the usage was not determined\n       by physical measurement, algorithm, or derivation.  The\n       usage was reported based upon external tables,\n       specifications, and/or model information.  For example, a\n       PC Model X draws 200W, while a PC Model Y draws 210W.")
eoPowerCurrentType = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerCurrentType.setStatus('current')
if mibBuilder.loadTexts: eoPowerCurrentType.setDescription("This object indicates whether the eoPower for the\n       Energy Object reports alternating current 'ac', direct\n       current 'dc', or that the current type is unknown.")
eoPowerMeasurementLocal = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerMeasurementLocal.setStatus('current')
if mibBuilder.loadTexts: eoPowerMeasurementLocal.setDescription('This object indicates the source of power measurement\n       and can be useful when modeling the power usage of\n\n       attached devices.  The power measurement can be performed\n       by the entity itself or the power measurement of the\n       entity can be reported by another trusted entity using a\n       protocol extension.  A value of true indicates the\n       measurement is performed by the entity, whereas false\n       indicates that the measurement was performed by another\n       entity.')
eoPowerAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 8), PowerStateSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoPowerAdminState.setStatus('current')
if mibBuilder.loadTexts: eoPowerAdminState.setDescription('This object specifies the desired Power State and the\n       Power State Set for the Energy Object.  Note that other(0)\n       is not a Power State Set and unknown(255) is not a Power\n       State as such, but simply an indication that the Power\n       State of the Energy Object is unknown.\n       Possible values of eoPowerAdminState within the Power\n       State Set are registered at IANA.\n       A current list of assignments can be found at\n       <http://www.iana.org/assignments/power-state-sets>')
eoPowerOperState = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 9), PowerStateSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerOperState.setStatus('current')
if mibBuilder.loadTexts: eoPowerOperState.setDescription('This object specifies the current operational Power\n       State and the Power State Set for the Energy Object.\n       other(0) is not a Power State Set and unknown(255) is not\n       a Power State as such, but simply an indication that the\n       Power State of the Energy Object is unknown.\n\n       Possible values of eoPowerOperState within the Power\n       State Set are registered at IANA.  A current list of\n       assignments can be found at\n       <http://www.iana.org/assignments/power-state-sets>')
eoPowerStateEnterReason = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 2, 1, 10), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoPowerStateEnterReason.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateEnterReason.setDescription('This string object describes the reason for the\n\n       eoPowerAdminState transition.  Alternatively, this string\n       may contain with the entity that configured this Energy\n       Object to this Power State.')
eoPowerStateTable = MibTable((1, 3, 6, 1, 2, 1, 229, 1, 3), )
if mibBuilder.loadTexts: eoPowerStateTable.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateTable.setDescription('This table enumerates the maximum power usage, in watts,\n       for every single supported Power State of each Energy\n       Object.\n\n       This table has cross-reference with the eoPowerTable,\n       containing rows describing each Power State for the\n       corresponding Energy Object.  For every Energy Object in\n       the eoPowerTable, there is a corresponding entry in this\n       table.')
eoPowerStateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 229, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ENERGY-OBJECT-MIB", "eoPowerStateIndex"))
if mibBuilder.loadTexts: eoPowerStateEntry.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateEntry.setDescription('A eoPowerStateEntry extends a corresponding\n       eoPowerEntry.  This entry displays max usage values at\n       every single possible Power State supported by the Energy\n       Object.\n       For example, given the values of a Energy Object\n       corresponding to a maximum usage of 0 W at the\n       state emanmechoff, 8 W at state 6 (ready), 11 W at state\n       emanmediumMinus, and 11 W at state emanhigh:\n\n               State      MaxUsage Units\n            emanmechoff       0       W\n            emansoftoff       0       W\n            emanhibernate     0       W\n            emansleep         0       W\n            emanstandby       0       W\n            emanready         8       W\n            emanlowMinus      8       W\n            emanlow          11       W\n            emanmediumMinus  11       W\n            emanmedium       11       W\n            emanhighMinus    11       W\n\n            emnanhigh        11       W\n\n       Furthermore, this table also includes the total time in\n       each Power State, along with the number of times a\n       particular Power State was entered.')
eoPowerStateIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 3, 1, 1), PowerStateSet())
if mibBuilder.loadTexts: eoPowerStateIndex.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateIndex.setDescription('This object specifies the index of the Power State of\n       the Energy Object within a Power State Set.  The semantics\n       of the specific Power State can be obtained from the\n       Power State Set definition.')
eoPowerStateMaxPower = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 3, 1, 2), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerStateMaxPower.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateMaxPower.setDescription('This object indicates the maximum power for the Energy\n       Object at the particular Power State.  This value is\n       specified in SI units of watts with the magnitude of the\n       units (milliwatts, kilowatts, etc.) indicated separately\n       in eoPowerStatePowerUnitMultiplier.  If the maximum power\n       is not known for a certain Power State, then the value is\n       encoded as 0xFFFFFFFF.\n\n       For Power States not enumerated, the value of\n       eoPowerStateMaxPower might be interpolated by using the\n       next highest supported Power State.')
eoPowerStatePowerUnitMultiplier = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 3, 1, 3), UnitMultiplier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerStatePowerUnitMultiplier.setStatus('current')
if mibBuilder.loadTexts: eoPowerStatePowerUnitMultiplier.setDescription('The magnitude of watts for the usage value in\n       eoPowerStateMaxPower.')
eoPowerStateTotalTime = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerStateTotalTime.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateTotalTime.setDescription('This object indicates the total time in hundredths\n       of a second that the Energy Object has been in this power\n       state since the last reset, as specified in the\n       sysUpTime.')
eoPowerStateEnterCount = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoPowerStateEnterCount.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateEnterCount.setDescription('This object indicates how often the Energy Object has\n       entered this power state, since the last reset of the\n       device as specified in the sysUpTime.')
eoEnergyParametersTable = MibTable((1, 3, 6, 1, 2, 1, 229, 1, 4), )
if mibBuilder.loadTexts: eoEnergyParametersTable.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersTable.setDescription('This table is used to configure the parameters for\n       energy measurement collection in the table eoEnergyTable.\n       This table allows the configuration of different\n       measurement settings on the same Energy Object.\n       Implementation of this table only makes sense for Energy\n       Objects that an eoPowerMeasurementCaliber of actual.')
eoEnergyParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 229, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ENERGY-OBJECT-MIB", "eoEnergyParametersIndex"))
if mibBuilder.loadTexts: eoEnergyParametersEntry.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersEntry.setDescription('An entry controls an energy measurement in\n       eoEnergyTable.')
eoEnergyParametersIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: eoEnergyParametersIndex.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersIndex.setDescription('This object specifies the index of the Energy Parameters\n       setting for collection of energy measurements for an\n       Energy Object.  An Energy Object can have multiple\n       eoEnergyParametersIndex, depending on the capabilities of\n       the Energy Object')
eoEnergyParametersIntervalLength = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 3), TimeInterval().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersIntervalLength.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersIntervalLength.setDescription("This object indicates the length of time in hundredths\n       of a second over which to compute the average\n       eoEnergyConsumed measurement in the eoEnergyTable table.\n       The computation is based on the Energy Object's internal\n       sampling rate of power consumed or produced by the Energy\n       Object.  The sampling rate is the rate at which the Energy\n       Object can read the power usage and may differ based on\n       device capabilities.  The average energy consumption is\n       then computed over the length of the interval.  The\n       default value of 15 minutes is a common interval used in\n       industry.")
eoEnergyParametersIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 4), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersIntervalNumber.setDescription('The number of intervals maintained in the eoEnergyTable.\n       Each interval is characterized by a specific\n       eoEnergyCollectionStartTime, used as an index to the\n       table eoEnergyTable.  Whenever the maximum number of\n       entries is reached, the measurement over the new interval\n       replaces the oldest measurement.  There is one exception\n       to this rule: when the eoEnergyMaxConsumed and/or\n       eoEnergyMaxProduced are in (one of) the two oldest\n       measurement(s), they are left untouched and the next\n       oldest measurement is replaced.')
eoEnergyParametersIntervalMode = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("period", 1), ("sliding", 2), ("total", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersIntervalMode.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersIntervalMode.setDescription('A control object to define the mode of interval\n       calculation for the computation of the average\n       eoEnergyConsumed or eoEnergyProvided measurement in the\n       eoEnergyTable table.\n\n       A mode of period(1) specifies non-overlapping periodic\n       measurements.\n\n       A mode of sliding(2) specifies overlapping sliding\n       windows where the interval between the start of one\n       interval and the next is defined in\n       eoEnergyParametersIntervalWindow.\n\n       A mode of total(3) specifies non-periodic measurement.\n       In this mode only one interval is used as this is a\n       continuous measurement since the last reset.  The value of\n       eoEnergyParametersIntervalNumber should be (1) one and\n       eoEnergyParametersIntervalLength is ignored.')
eoEnergyParametersIntervalWindow = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 6), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersIntervalWindow.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersIntervalWindow.setDescription('The length of the duration window between the starting\n       time of one sliding window and the next starting time in\n       hundredths of seconds, used to compute the average of\n       eoEnergyConsumed, eoEnergyProvided measurements in the\n       eoEnergyTable table.  This is valid only when the\n       eoEnergyParametersIntervalMode is sliding(2).  The\n       eoEnergyParametersIntervalWindow value should be a\n       multiple of eoEnergyParametersSampleRate.')
eoEnergyParametersSampleRate = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 7), Unsigned32().clone(1000)).setUnits('Milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersSampleRate.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersSampleRate.setDescription('The sampling rate, in milliseconds, at which the Energy\n       Object should poll power usage in order to compute the\n       average eoEnergyConsumed, eoEnergyProvided measurements\n       in the table eoEnergyTable.  The Energy Object should\n       initially set this sampling rate to a reasonable value,\n       i.e., a compromise between intervals that will provide\n       good accuracy by not being too long, but not so short\n       that they affect the Energy Object performance by\n       requesting continuous polling.  If the sampling rate is\n       unknown, the value 0 is reported.  The sampling rate\n       should be selected so that\n       eoEnergyParametersIntervalWindow is a multiple of\n       eoEnergyParametersSampleRate.  The default value is one\n       second.')
eoEnergyParametersStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersStorageType.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersStorageType.setDescription('This variable indicates the storage type for this row.')
eoEnergyParametersStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eoEnergyParametersStatus.setStatus('current')
if mibBuilder.loadTexts: eoEnergyParametersStatus.setDescription('The status of this row.  The eoEnergyParametersStatus is\n       used to start or stop energy usage logging.  An entry\n       status may not be active(1) unless all objects in the\n       entry have an appropriate value.  If this object is not\n       equal to active, all associated usage-data logged into\n       the eoEnergyTable will be deleted.  The data can be\n       destroyed by setting up the eoEnergyParametersStatus to\n       destroy.')
eoEnergyTable = MibTable((1, 3, 6, 1, 2, 1, 229, 1, 5), )
if mibBuilder.loadTexts: eoEnergyTable.setStatus('current')
if mibBuilder.loadTexts: eoEnergyTable.setDescription('This table lists Energy Object energy measurements.\n       Entries in this table are only created if the\n       corresponding value of object eoPowerMeasurementCaliber\n       is active(3), i.e., if the power is actually metered.')
eoEnergyEntry = MibTableRow((1, 3, 6, 1, 2, 1, 229, 1, 5, 1), ).setIndexNames((0, "ENERGY-OBJECT-MIB", "eoEnergyParametersIndex"), (0, "ENERGY-OBJECT-MIB", "eoEnergyCollectionStartTime"))
if mibBuilder.loadTexts: eoEnergyEntry.setStatus('current')
if mibBuilder.loadTexts: eoEnergyEntry.setDescription('An entry describing energy measurements.')
eoEnergyCollectionStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 1), TimeTicks()).setUnits('hundredths of a second')
if mibBuilder.loadTexts: eoEnergyCollectionStartTime.setReference('RFC 3418: Management Information Base (MIB) for the\n       Simple Network Management Protocol (SNMP)')
if mibBuilder.loadTexts: eoEnergyCollectionStartTime.setStatus('current')
if mibBuilder.loadTexts: eoEnergyCollectionStartTime.setDescription('The time (in hundredths of a second) since the\n       network management portion of the system was last\n       re-initialized, as specified in the sysUpTime RFC 3418.\n       This object specifies the start time of the energy\n       measurement sample.')
eoEnergyConsumed = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 2), Unsigned32()).setUnits('Watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyConsumed.setStatus('current')
if mibBuilder.loadTexts: eoEnergyConsumed.setDescription('This object indicates the energy consumed in units of\n       watt-hours for the Energy Object over the defined\n       interval.  This value is specified in the common billing\n       units of watt-hours with the magnitude of watt-hours\n       kWh, MWh, etc.) indicated separately in\n       eoEnergyUnitMultiplier.')
eoEnergyProvided = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 3), Unsigned32()).setUnits('Watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyProvided.setStatus('current')
if mibBuilder.loadTexts: eoEnergyProvided.setDescription('This object indicates the energy produced in units of\n       watt-hours for the Energy Object over the defined\n       interval.\n\n       This value is specified in the common billing units of\n       watt-hours with the magnitude of watt-hours (kWh, MWh,\n       etc.) indicated separately in\n       eoEnergyUnitMultiplier.')
eoEnergyStored = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 4), Unsigned32()).setUnits('Watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyStored.setStatus('current')
if mibBuilder.loadTexts: eoEnergyStored.setDescription('This object indicates the difference of the energy\n       consumed and energy produced for an Energy Object in\n       units of watt-hours for the Energy Object over the\n       defined interval.  This value is specified in the common\n       billing units of watt-hours with the magnitude of\n       watt-hours (kWh, MWh, etc.) indicated separately in\n       eoEnergyUnitMultiplier.')
eoEnergyUnitMultiplier = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 5), UnitMultiplier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyUnitMultiplier.setStatus('current')
if mibBuilder.loadTexts: eoEnergyUnitMultiplier.setDescription('This object is the magnitude of watt-hours for the\n       energy field in eoEnergyConsumed, eoEnergyProvided,\n       eoEnergyStored, eoEnergyMaxConsumed, and\n       eoEnergyMaxProduced.')
eoEnergyAccuracy = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('hundredths of percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyAccuracy.setStatus('current')
if mibBuilder.loadTexts: eoEnergyAccuracy.setDescription('This object indicates a percentage accuracy, in hundredths\n       of a percent, of Energy usage reporting.  eoEnergyAccuracy\n       is applicable to all Energy measurements in the\n       eoEnergyTable.\n\n       For example, 1010 means the reported usage is accurate to\n       +/- 10.1 percent.\n\n       This value is zero if the accuracy is unknown.')
eoEnergyMaxConsumed = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 7), Unsigned32()).setUnits('Watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyMaxConsumed.setStatus('current')
if mibBuilder.loadTexts: eoEnergyMaxConsumed.setDescription('This object is the maximum energy observed in\n       eoEnergyConsumed since the monitoring started or was\n       reinitialized.  This value is specified in the common\n       billing units of watt-hours with the magnitude of\n       watt-hours (kWh, MWh, etc.) indicated separately in\n       eoEnergyUnitMultiplier.')
eoEnergyMaxProduced = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 8), Unsigned32()).setUnits('Watt-hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyMaxProduced.setStatus('current')
if mibBuilder.loadTexts: eoEnergyMaxProduced.setDescription('This object is the maximum energy ever observed in\n       eoEnergyEnergyProduced since the monitoring started.  This\n       value is specified in the units of watt-hours with the\n       magnitude of watt-hours (kWh, MWh, etc.) indicated\n       separately in eoEnergyEnergyUnitMultiplier.')
eoEnergyDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 229, 1, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoEnergyDiscontinuityTime.setReference('RFC 3418: Management Information Base (MIB) for the\n        Simple Network Management Protocol (SNMP)')
if mibBuilder.loadTexts: eoEnergyDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: eoEnergyDiscontinuityTime.setDescription("The value of sysUpTime RFC 3418 on the most recent\n       occasion at which any one or more of this entity's energy\n       counters in this table suffered a discontinuity:\n       eoEnergyConsumed, eoEnergyProvided or eoEnergyStored.  If\n       no such discontinuities have occurred since the last\n       re-initialization of the local management subsystem, then\n       this object contains a zero value.")
eoPowerEnableStatusNotification = MibScalar((1, 3, 6, 1, 2, 1, 229, 0, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoPowerEnableStatusNotification.setStatus('current')
if mibBuilder.loadTexts: eoPowerEnableStatusNotification.setDescription('This object controls whether the system produces\n       notifications for eoPowerStateChange.  A false value will\n       prevent these notifications from being generated.')
eoPowerStateChange = NotificationType((1, 3, 6, 1, 2, 1, 229, 0, 2)).setObjects(("ENERGY-OBJECT-MIB", "eoPowerAdminState"), ("ENERGY-OBJECT-MIB", "eoPowerOperState"), ("ENERGY-OBJECT-MIB", "eoPowerStateEnterReason"))
if mibBuilder.loadTexts: eoPowerStateChange.setStatus('current')
if mibBuilder.loadTexts: eoPowerStateChange.setDescription('The SNMP entity generates the eoPowerStateChange when\n       the values of eoPowerAdminState or eoPowerOperState,\n       in the context of the Power State Set, have changed for\n       the Energy Object represented by the entPhysicalIndex.')
energyObjectMibCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 229, 2, 1))
energyObjectMibGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 229, 2, 2))
energyObjectMibFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 229, 2, 1, 1)).setObjects(("ENERGY-OBJECT-MIB", "energyObjectMibTableGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibStateTableGroup"), ("ENERGY-OBJECT-MIB", "eoPowerEnableStatusNotificationGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibNotifGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibEnergyTableGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibEnergyParametersTableGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibMeterCapabilitiesTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibFullCompliance = energyObjectMibFullCompliance.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibFullCompliance.setDescription('When this MIB is implemented with support for\n       read-create, then such an implementation can\n       claim full compliance.  Such devices can then\n       be both monitored and configured with this MIB.\n\n       Module Compliance of RFC 6933\n       with respect to entity4CRCompliance MUST\n       be supported, which requires implementation\n       of four MIB objects: entPhysicalIndex, entPhysicalClass,\n       entPhysicalName and entPhysicalUUID.')
if mibBuilder.loadTexts: energyObjectMibFullCompliance.setReference('RFC 6933: Entity MIB (Version 4)')
energyObjectMibReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 229, 2, 1, 2)).setObjects(("ENERGY-OBJECT-MIB", "energyObjectMibTableGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibStateTableGroup"), ("ENERGY-OBJECT-MIB", "energyObjectMibNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibReadOnlyCompliance = energyObjectMibReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibReadOnlyCompliance.setDescription('When this MIB is implemented without support for\n       read-create (i.e., in read-only mode), then such an\n       implementation can claim read-only compliance.  Such a\n       device can then be monitored but cannot be\n       configured with this MIB.\n\n       Module Compliance of [RFC6933] with respect to\n       entity4CRCompliance MUST be supported which requires\n       implementation of 4 MIB objects: entPhysicalIndex,\n       entPhysicalClass, entPhysicalName and entPhysicalUUID.')
if mibBuilder.loadTexts: energyObjectMibReadOnlyCompliance.setReference('RFC 6933: Entity MIB (Version 4)')
energyObjectMibTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 1)).setObjects(("ENERGY-OBJECT-MIB", "eoPower"), ("ENERGY-OBJECT-MIB", "eoPowerNameplate"), ("ENERGY-OBJECT-MIB", "eoPowerUnitMultiplier"), ("ENERGY-OBJECT-MIB", "eoPowerAccuracy"), ("ENERGY-OBJECT-MIB", "eoPowerMeasurementCaliber"), ("ENERGY-OBJECT-MIB", "eoPowerCurrentType"), ("ENERGY-OBJECT-MIB", "eoPowerMeasurementLocal"), ("ENERGY-OBJECT-MIB", "eoPowerAdminState"), ("ENERGY-OBJECT-MIB", "eoPowerOperState"), ("ENERGY-OBJECT-MIB", "eoPowerStateEnterReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibTableGroup = energyObjectMibTableGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibTableGroup.setDescription('This group contains the collection of all the objects\n       related to the Energy Object.')
energyObjectMibStateTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 2)).setObjects(("ENERGY-OBJECT-MIB", "eoPowerStateMaxPower"), ("ENERGY-OBJECT-MIB", "eoPowerStatePowerUnitMultiplier"), ("ENERGY-OBJECT-MIB", "eoPowerStateTotalTime"), ("ENERGY-OBJECT-MIB", "eoPowerStateEnterCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibStateTableGroup = energyObjectMibStateTableGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibStateTableGroup.setDescription('This group contains the collection of all the objects\n       related to the Power State.')
energyObjectMibEnergyParametersTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 3)).setObjects(("ENERGY-OBJECT-MIB", "eoEnergyParametersIntervalLength"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersIntervalNumber"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersIntervalMode"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersIntervalWindow"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersSampleRate"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersStorageType"), ("ENERGY-OBJECT-MIB", "eoEnergyParametersStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibEnergyParametersTableGroup = energyObjectMibEnergyParametersTableGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibEnergyParametersTableGroup.setDescription('This group contains the collection of all the objects\n        related to the configuration of the Energy Table.')
energyObjectMibEnergyTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 4)).setObjects(("ENERGY-OBJECT-MIB", "eoEnergyConsumed"), ("ENERGY-OBJECT-MIB", "eoEnergyProvided"), ("ENERGY-OBJECT-MIB", "eoEnergyStored"), ("ENERGY-OBJECT-MIB", "eoEnergyUnitMultiplier"), ("ENERGY-OBJECT-MIB", "eoEnergyAccuracy"), ("ENERGY-OBJECT-MIB", "eoEnergyMaxConsumed"), ("ENERGY-OBJECT-MIB", "eoEnergyMaxProduced"), ("ENERGY-OBJECT-MIB", "eoEnergyDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibEnergyTableGroup = energyObjectMibEnergyTableGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibEnergyTableGroup.setDescription('This group contains the collection of all the objects\n        related to the Energy Table.')
energyObjectMibMeterCapabilitiesTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 5)).setObjects(("ENERGY-OBJECT-MIB", "eoMeterCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibMeterCapabilitiesTableGroup = energyObjectMibMeterCapabilitiesTableGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibMeterCapabilitiesTableGroup.setDescription('This group contains the object indicating the capability\n       of the Energy Object')
eoPowerEnableStatusNotificationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 6)).setObjects(("ENERGY-OBJECT-MIB", "eoPowerEnableStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eoPowerEnableStatusNotificationGroup = eoPowerEnableStatusNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: eoPowerEnableStatusNotificationGroup.setDescription('The collection of objects that are used to enable\n       notification.')
energyObjectMibNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 229, 2, 2, 7)).setObjects(("ENERGY-OBJECT-MIB", "eoPowerStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    energyObjectMibNotifGroup = energyObjectMibNotifGroup.setStatus('current')
if mibBuilder.loadTexts: energyObjectMibNotifGroup.setDescription('This group contains the notifications for\n       the Monitoring and Control MIB for Power and Energy.')
mibBuilder.exportSymbols("ENERGY-OBJECT-MIB", PYSNMP_MODULE_ID=energyObjectMib, eoPowerEntry=eoPowerEntry, energyObjectMibConform=energyObjectMibConform, eoPowerStateChange=eoPowerStateChange, energyObjectMibNotifGroup=energyObjectMibNotifGroup, eoMeterCapabilitiesEntry=eoMeterCapabilitiesEntry, eoEnergyMaxConsumed=eoEnergyMaxConsumed, eoPowerStatePowerUnitMultiplier=eoPowerStatePowerUnitMultiplier, eoPowerMeasurementLocal=eoPowerMeasurementLocal, eoPowerMeasurementCaliber=eoPowerMeasurementCaliber, eoEnergyParametersIntervalNumber=eoEnergyParametersIntervalNumber, eoEnergyTable=eoEnergyTable, eoEnergyParametersTable=eoEnergyParametersTable, eoEnergyParametersStatus=eoEnergyParametersStatus, eoEnergyAccuracy=eoEnergyAccuracy, energyObjectMibReadOnlyCompliance=energyObjectMibReadOnlyCompliance, eoEnergyParametersIntervalMode=eoEnergyParametersIntervalMode, energyObjectMib=energyObjectMib, energyObjectMibStateTableGroup=energyObjectMibStateTableGroup, eoEnergyConsumed=eoEnergyConsumed, eoPower=eoPower, eoPowerAccuracy=eoPowerAccuracy, eoEnergyParametersSampleRate=eoEnergyParametersSampleRate, energyObjectMibGroups=energyObjectMibGroups, energyObjectMibObjects=energyObjectMibObjects, eoMeterCapabilitiesTable=eoMeterCapabilitiesTable, eoPowerStateTable=eoPowerStateTable, eoEnergyParametersIntervalLength=eoEnergyParametersIntervalLength, eoEnergyParametersIntervalWindow=eoEnergyParametersIntervalWindow, eoPowerCurrentType=eoPowerCurrentType, eoEnergyMaxProduced=eoEnergyMaxProduced, eoEnergyParametersStorageType=eoEnergyParametersStorageType, energyObjectMibNotifs=energyObjectMibNotifs, energyObjectMibTableGroup=energyObjectMibTableGroup, eoPowerEnableStatusNotification=eoPowerEnableStatusNotification, eoPowerStateEnterReason=eoPowerStateEnterReason, eoPowerStateEntry=eoPowerStateEntry, eoEnergyParametersEntry=eoEnergyParametersEntry, energyObjectMibFullCompliance=energyObjectMibFullCompliance, eoPowerNameplate=eoPowerNameplate, eoEnergyParametersIndex=eoEnergyParametersIndex, energyObjectMibCompliances=energyObjectMibCompliances, eoEnergyStored=eoEnergyStored, eoEnergyEntry=eoEnergyEntry, eoPowerStateMaxPower=eoPowerStateMaxPower, eoPowerStateEnterCount=eoPowerStateEnterCount, eoPowerStateTotalTime=eoPowerStateTotalTime, eoEnergyDiscontinuityTime=eoEnergyDiscontinuityTime, eoPowerTable=eoPowerTable, eoEnergyUnitMultiplier=eoEnergyUnitMultiplier, eoPowerEnableStatusNotificationGroup=eoPowerEnableStatusNotificationGroup, eoPowerAdminState=eoPowerAdminState, eoEnergyCollectionStartTime=eoEnergyCollectionStartTime, energyObjectMibMeterCapabilitiesTableGroup=energyObjectMibMeterCapabilitiesTableGroup, eoEnergyProvided=eoEnergyProvided, energyObjectMibEnergyTableGroup=energyObjectMibEnergyTableGroup, energyObjectMibEnergyParametersTableGroup=energyObjectMibEnergyParametersTableGroup, UnitMultiplier=UnitMultiplier, eoPowerUnitMultiplier=eoPowerUnitMultiplier, eoPowerOperState=eoPowerOperState, eoMeterCapability=eoMeterCapability, eoPowerStateIndex=eoPowerStateIndex)
