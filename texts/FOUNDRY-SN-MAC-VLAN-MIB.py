#
# PySNMP MIB module FOUNDRY-SN-MAC-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/foundry/FOUNDRY-SN-MAC-VLAN-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:47:04 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, IpAddress, NotificationType, Bits, ModuleIdentity, TimeTicks, MibIdentifier, Integer32, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "IpAddress", "NotificationType", "Bits", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Integer32", "Counter32", "Gauge32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
snMacVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30))
snMacVlan.setRevisions(('2007-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snMacVlan.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: snMacVlan.setLastUpdated('200706250000Z')
if mibBuilder.loadTexts: snMacVlan.setOrganization('Foundry Networks, Inc')
if mibBuilder.loadTexts: snMacVlan.setContactInfo('')
if mibBuilder.loadTexts: snMacVlan.setDescription('Management Information Base module for MAC-based Vlan\n            configuration and statistics.')
snMacVlanGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 1))
snMacVlanTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2))
snMacVlanGlobalClearOper = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanGlobalClearOper.setStatus('current')
if mibBuilder.loadTexts: snMacVlanGlobalClearOper.setDescription('valid(0) - a SNMP-GET of this mib shows that it is valid command to use. \n\t\t clear(1) - represents clear operational MAC-based Vlan entry for all ports.')
snMacVlanGlobalDynConfigState = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanGlobalDynConfigState.setStatus('current')
if mibBuilder.loadTexts: snMacVlanGlobalDynConfigState.setDescription('Enable/disable MAC-based VLAN dynamic activation on the global level.')
snMacVlanPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 1), )
if mibBuilder.loadTexts: snMacVlanPortMemberTable.setStatus('current')
if mibBuilder.loadTexts: snMacVlanPortMemberTable.setDescription('MAC-based Vlan port membership table.')
snMacVlanPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacVlanPortMemberVLanId"), (0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacVlanPortMemberPortId"))
if mibBuilder.loadTexts: snMacVlanPortMemberEntry.setStatus('current')
if mibBuilder.loadTexts: snMacVlanPortMemberEntry.setDescription('An entry of the MAC-based Vlan port membership table.')
snMacVlanPortMemberVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: snMacVlanPortMemberVLanId.setStatus('current')
if mibBuilder.loadTexts: snMacVlanPortMemberVLanId.setDescription('The VLAN identifier (VLAN ID).')
snMacVlanPortMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: snMacVlanPortMemberPortId.setStatus('current')
if mibBuilder.loadTexts: snMacVlanPortMemberPortId.setDescription('The ifIndex which is a member of the MAC-based VLAN.')
snMacVlanPortMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanPortMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMacVlanPortMemberRowStatus.setDescription("This object is used to create and\n\t\tdelete row in the table and control\n\t\tif they are used. The values\n\t\tthat can be written are:\n\t\t  delete(3)...deletes the row\n\t\t  create(4)...creates a new row\n\n\t\tIf the row exists, then a SET with\n\t\tvalue of create(4) returns error\n\t\t'wrongValue'. Deleted rows go away\n\t\timmediately. The following values\n\t\tcan be returned on reads:\n\t\t  noSuch(0)...no such row\n\t\t  other(1)....some other case\n\t\t  valid(2)....the row exists and is valid")
snMacVlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2), )
if mibBuilder.loadTexts: snMacVlanIfTable.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfTable.setDescription('MAC-based Vlan Interface table.')
snMacVlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacVlanIfIndex"))
if mibBuilder.loadTexts: snMacVlanIfEntry.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfEntry.setDescription('An entry in the MAC-based Vlan interface table.')
snMacVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: snMacVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfIndex.setDescription('The ifIndex which is a member of the MAC-based VLAN.')
snMacVlanIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanIfEnable.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfEnable.setDescription('The administrative status requested by management for\n \tMAC-based Vlan on this interface.  The value enabled(1) \n \tindicates that MAC-based Vlan should be enabled on this interface,\n \tWhen disabled(2), MAC-based Vlan is disabled on this interface.\n \t Enable/disable MAC-based Vlan on this interface.')
snMacVlanIfMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanIfMaxEntry.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfMaxEntry.setDescription('The maximum number of allowed and denied MAC address \n\t\t(static and dynamic) that can be leared on an interface. \n\t\tThe default value is 2. The value should be between 2 to 32.')
snMacVlanIfClearOper = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanIfClearOper.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfClearOper.setDescription('valid(0) - a SNMP-GET of this mib shows that it is valid command to use. \n\t\t clear(1) - represents clearing operational MAC-based Vlan entry for a port.')
snMacVlanIfClearConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacVlanIfClearConfig.setStatus('current')
if mibBuilder.loadTexts: snMacVlanIfClearConfig.setDescription('valid(0) - a SNMP-GET of this mib shows that it is valid command to use. \n\t\t clear(1) - represents clearing configured MAC-based Vlan entry for a port.')
snMacBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3), )
if mibBuilder.loadTexts: snMacBasedVlanTable.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanTable.setDescription('MAC-based Vlan table.')
snMacBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacVlanIfIndex"), (0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacBasedVlanId"), (0, "FOUNDRY-SN-MAC-VLAN-MIB", "snMacBasedVlanMac"))
if mibBuilder.loadTexts: snMacBasedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanEntry.setDescription('An entry in the MAC-based Vlan table.')
snMacBasedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: snMacBasedVlanId.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanId.setDescription('The ID of a VLAN of which this port is a mac-vlan-permit \n        member. Port must be untagged. This object return 0 which is \n        an invalid VLAN ID value.')
snMacBasedVlanMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: snMacBasedVlanMac.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanMac.setDescription('A host source MAC address to be authenticated.')
snMacBasedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacBasedVlanPriority.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanPriority.setDescription('The priority of the source MAC address.')
snMacBasedVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 30, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snMacBasedVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: snMacBasedVlanRowStatus.setDescription("This object is used to create and delete row in the\n            table and control if they are used. The values that\n            can be written are:\n            delete(3)...deletes the row\n            create(4)...creates a new row\n\n            If the row exists, then a SET with value of create(4)\n            returns error 'wrongValue'. Deleted rows go away immediately.\n            The following values can be returned on reads:\n            noSuchName...no such row\n            other(1).....some other cases\n            valid(2)....the row exists and is valid")
mibBuilder.exportSymbols("FOUNDRY-SN-MAC-VLAN-MIB", snMacBasedVlanMac=snMacBasedVlanMac, snMacVlanGlobalClearOper=snMacVlanGlobalClearOper, snMacVlanIfIndex=snMacVlanIfIndex, PYSNMP_MODULE_ID=snMacVlan, snMacBasedVlanTable=snMacBasedVlanTable, snMacVlan=snMacVlan, snMacBasedVlanRowStatus=snMacBasedVlanRowStatus, snMacVlanIfMaxEntry=snMacVlanIfMaxEntry, snMacVlanGlobalObjects=snMacVlanGlobalObjects, snMacVlanGlobalDynConfigState=snMacVlanGlobalDynConfigState, snMacVlanIfEntry=snMacVlanIfEntry, snMacVlanIfClearConfig=snMacVlanIfClearConfig, snMacBasedVlanPriority=snMacBasedVlanPriority, snMacVlanIfClearOper=snMacVlanIfClearOper, snMacVlanPortMemberPortId=snMacVlanPortMemberPortId, snMacVlanPortMemberRowStatus=snMacVlanPortMemberRowStatus, snMacVlanTableObjects=snMacVlanTableObjects, snMacVlanIfTable=snMacVlanIfTable, snMacVlanPortMemberVLanId=snMacVlanPortMemberVLanId, snMacBasedVlanId=snMacBasedVlanId, snMacVlanPortMemberEntry=snMacVlanPortMemberEntry, snMacVlanPortMemberTable=snMacVlanPortMemberTable, snMacVlanIfEnable=snMacVlanIfEnable, snMacBasedVlanEntry=snMacBasedVlanEntry)
