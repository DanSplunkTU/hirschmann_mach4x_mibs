#
# PySNMP MIB module PRVT-HQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-HQOS-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:09:28 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "serviceAccessSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, Unsigned32, NotificationType, Bits, Integer32, ModuleIdentity, Gauge32, IpAddress, MibIdentifier, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Unsigned32", "NotificationType", "Bits", "Integer32", "ModuleIdentity", "Gauge32", "IpAddress", "MibIdentifier", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
prvtHqosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 7, 5))
prvtHqosMIB.setRevisions(('2010-08-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtHqosMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtHqosMIB.setLastUpdated('201008260000Z')
if mibBuilder.loadTexts: prvtHqosMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtHqosMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtHqosMIB.setDescription('The private MIB module to manage Hierarchical Quality of Service.')
class PrvtHqosNamedItem(TextualConvention, OctetString):
    description = 'The name of an item.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class PrvtHqosNamedItemOrNone(TextualConvention, OctetString):
    description = 'Same as PrvtHqosNamedItem except that a zero-length string is used\n         to represent that no value is assigned.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class PrvtHqosLspExpValueType(TextualConvention, Integer32):
    description = 'MPLS Experimental bits.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class PrvtHqosDot1pPriority(TextualConvention, Integer32):
    description = 'IEEE 802.1p priority. Zero is lowest, seven is highest.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class PrvtHqosFcType(TextualConvention, Integer32):
    description = 'The name of a Forwarding Class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtHqosDscpValue(TextualConvention, Integer32):
    description = 'The value of a Differential Services Code Point.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class PrvtHqosDescrType(TextualConvention, OctetString):
    description = 'The description for an item.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 30)

class PrvtHqosServiceQueueId(TextualConvention, Integer32):
    description = 'The identification number of a service queue.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 24)

class PrvtHqosNetQueueIdType(TextualConvention, Integer32):
    description = 'The identification number of a network queue.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 24)

class PrvtHqosServicePolicyId(TextualConvention, Unsigned32):
    description = 'The identification number of a service policy.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class PrvtHqosNetPolNameType(TextualConvention, OctetString):
    description = 'The identification string of a network policy.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class PrvtHqosNetPolNameOrNoneType(TextualConvention, OctetString):
    description = 'Same as PrvtHqosNetPolNameType except that a zero\n         length string is used to represent no network policy.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class PrvtHqosRateValueL1(TextualConvention, Integer32):
    description = 'Rate in kbps.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(80, 5242875)

class PrvtHqosRateValueL2(TextualConvention, Integer32):
    description = 'Rate in kbps.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(16, 1048575)

class PrvtHqosRateValueNet(TextualConvention, Integer32):
    description = 'Rate in kbps.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(160, 1048575)

class PrvtHqosBurstValueL1(TextualConvention, Integer32):
    description = 'Burst size in kilobytes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(16, 65535)

class PrvtHqosBurstValueL2(TextualConvention, Integer32):
    description = 'Burst size in kilobytes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(16, 16383)

class PrvtHqosBurstValueNet(TextualConvention, Integer32):
    description = 'Burst size in kilobytesRate.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16383)

class PrvtHqosBurstValueIntf(TextualConvention, Integer32):
    description = 'Burst size in kilobytes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32767)

class PrvtHqosWredMinValue(TextualConvention, Integer32):
    description = 'Minimum WRED limit.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32768)

class PrvtHqosWredMaxValue(TextualConvention, Integer32):
    description = 'Maximum WRED limit.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(8, 32768)

class PrvtHqosWredProbValue(TextualConvention, Integer32):
    description = 'WRED probability.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class PrvtHqosLevel(TextualConvention, Integer32):
    description = 'The priority level to apply to a packet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("low", 1), ("high", 2))

class PrvtHqosWeight(TextualConvention, Integer32):
    description = 'The weight of the specified entity while feeding into the parent.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 220)

class PrvtHqosColorType(TextualConvention, Integer32):
    description = 'The traffic conformance level (i.e. traffic color).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

class PrvtHqosIfShaperId(TextualConvention, Integer32):
    description = 'The identifier of an Interface Shaper Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class PrvtHqosIfShaperIdOrNone(TextualConvention, Integer32):
    description = 'Same as PrvtHqosIfShaperId except that the value of zero represents\n         no shaper profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

class PrvtHqosL1ShaperId(TextualConvention, Integer32):
    description = 'The identifier of a L1 Scheduler Shaper Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class PrvtHqosNetShaperId(TextualConvention, Integer32):
    description = 'The identifier of a Network Shaper Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(17, 64)

class PrvtHqosL2ShaperId(TextualConvention, Integer32):
    description = 'The identifier of a L2 Scheduler Shaper Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class PrvtHqosPolicerIdType(TextualConvention, Integer32):
    description = 'The identifier of a Policer Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 256)

class PrvtHqosQueueType(TextualConvention, Integer32):
    description = 'The type of queue.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unicast", 1), ("broadcast", 2), ("multicast", 3))

class PrvtHqosServWfqIdType(TextualConvention, Integer32):
    description = 'The identifier of a Service WFQ Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class PrvtHqosServSchedWfqIdType(TextualConvention, Integer32):
    description = 'The identifier of a Service Scheduler WFQ Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 63)

class PrvtHqosNetWfqIdType(TextualConvention, Integer32):
    description = 'The identifier of a Network WFQ Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class PrvtHqosWredIdType(TextualConvention, Integer32):
    description = 'The identifier of a WRED Profile.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class PrvtHqosMapType(TextualConvention, Integer32):
    description = 'The type of mapping - VPT or DSCP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vpt", 1), ("dscp", 2))

class PrvtHqosStatsCountType(TextualConvention, OctetString):
    description = 'The value of a statistics counter.\n         The value is represented as an ASCII string.'
    status = 'current'
    displayHint = '255a'

hqosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1))
svcIngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1))
prvtHqosSvcIngTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 1), )
if mibBuilder.loadTexts: prvtHqosSvcIngTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngTable.setDescription('Service Ingress Policy Table\n         Each entry in this table defines a service ingress policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosSvcIngQueueTable\n         - prvtHqosSvcIngFcTable\n         - prvtHqosSvcIngFcDscpTable\n         - prvtHqosSvcIngFcDot1pTable\n         - prvtHqosSvcIngFcDefaultTable\n         - prvtHqosSvcIngFcQueueTable')
prvtHqosSvcIngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"))
if mibBuilder.loadTexts: prvtHqosSvcIngEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngEntry.setDescription('An entry belonging to prvtHqosSvcIngTable.')
prvtHqosSvcIngId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 1, 1, 1), PrvtHqosServicePolicyId())
if mibBuilder.loadTexts: prvtHqosSvcIngId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngId.setDescription('Uniquely identifies a service ingress policy.')
prvtHqosSvcIngRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngRowStatus.setDescription('The RowStatus for this service ingress policy.')
prvtHqosSvcIngDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngDescr.setDescription('User-defined description for the service ingress policy.')
prvtHqosSvcIngQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2), )
if mibBuilder.loadTexts: prvtHqosSvcIngQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueTable.setDescription('Service Ingress Policy Queue Table\n         Entries in this table define queues belonging to service ingress policies.\n         A queue is specified using a unique queue identifier (prvtHqosSvcIngQueueId),\n         and its parent scheduler policy name (prvtHqosSchedIngPolicyName) and\n         scheduler name (prvtHqosSchedIngVirtName).')
prvtHqosSvcIngQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngVirtName"))
if mibBuilder.loadTexts: prvtHqosSvcIngQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueEntry.setDescription('An entry belonging to prvtHqosSvcIngQueueTable.')
prvtHqosSvcIngQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1, 1), PrvtHqosServiceQueueId())
if mibBuilder.loadTexts: prvtHqosSvcIngQueueId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueId.setDescription('Uniquely identifies a queue belonging to a service ingress policy.')
prvtHqosSvcIngQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueRowStatus.setDescription('The RowStatus for this service ingress policy queue.')
prvtHqosSvcIngQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1, 3), PrvtHqosServWfqIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngQueueServWfq.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueServWfq.setDescription('The WFQ profile that needs to be used by the scheduler to which the queue would be feeding to.\n         Must be set to the prvtHqosWfqSvcIngPrfId of an entry existing in prvtHqosWfqSvcIngPrfTable.')
prvtHqosSvcIngQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1, 4), PrvtHqosWredIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngQueueWred.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueueWred.setDescription('The WRED profile applied to this service ingress policy queue.\n         Must be set to the prvtHqosWredPrfId of an entry existing in prvtHqosWredPrfTable.')
prvtHqosSvcIngQueuePolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 2, 1, 5), PrvtHqosPolicerIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngQueuePolicer.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQueuePolicer.setDescription('The policer profile applied to this service ingress policy queue.\n         Must be set to the prvtHqosPolicerSvcPrfId of an entry existing in prvtHqosPolicerSvcPrfTable.')
prvtHqosSvcIngFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 3), )
if mibBuilder.loadTexts: prvtHqosSvcIngFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcTable.setDescription('Service Ingress Policy FC Table\n         A list of forwarding classes belonging to service ingress policies.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosSvcIngFcDscpTable\n         - prvtHqosSvcIngFcDot1pTable\n         - prvtHqosSvcIngFcDefaultTable\n         - prvtHqosSvcIngFcQueueTable')
prvtHqosSvcIngFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcType"))
if mibBuilder.loadTexts: prvtHqosSvcIngFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcEntry.setDescription('An entry belonging to prvtHqosSvcIngFcTable.')
prvtHqosSvcIngFcType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 3, 1, 1), PrvtHqosFcType())
if mibBuilder.loadTexts: prvtHqosSvcIngFcType.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcType.setDescription('The forwarding class to which this row applies.')
prvtHqosSvcIngFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcRowStatus.setDescription('The RowStatus for this forwarding class.')
prvtHqosSvcIngFcDscpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 4), )
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpTable.setDescription('Service Ingress Policy FC DSCP Mapping Table\n         Each entry in this table defines a DSCP to forwarding class mapping.\n         Note that DSCP to FC mappings can not be used together with\n         Dot1p (VPT) to FC mappings.')
prvtHqosSvcIngFcDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcDscpValue"))
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpEntry.setDescription('An entry belonging to prvtHqosSvcIngFcDscpTable.')
prvtHqosSvcIngFcDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 4, 1, 1), PrvtHqosDscpValue())
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpValue.setDescription('The Differentiated Services Code Point value to match in the packet.')
prvtHqosSvcIngFcDscpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpRowStatus.setDescription('The RowStatus for this DSCP value.')
prvtHqosSvcIngFcDscpColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 4, 1, 3), PrvtHqosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpColor.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDscpColor.setDescription("The color (conformance level) to apply to traffic matching this\n         row's DSCP value.")
prvtHqosSvcIngFcDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 5), )
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pTable.setDescription('Service Ingress Policy FC Dot1p Mapping Table\n         Each entry in this table defines a Dot1p (VPT) to forwarding class mapping.\n         Note that VPT to FC mappings can not be used together with\n         DSCP to FC mappings.')
prvtHqosSvcIngFcDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcDot1pValue"))
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pEntry.setDescription('An entry belonging to prvtHqosSvcIngFcDot1pTable.')
prvtHqosSvcIngFcDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 5, 1, 1), PrvtHqosDot1pPriority())
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pValue.setDescription('The Dot1p (VPT) value to match in the packet.')
prvtHqosSvcIngFcDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pRowStatus.setDescription("The RowStatus for this service ingress policy's Dot1p entry.")
prvtHqosSvcIngFcDot1pColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 5, 1, 3), PrvtHqosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pColor.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDot1pColor.setDescription("The color (conformance level) to apply to traffic matching this\n         forwarding-class's Dot1p value.")
prvtHqosSvcIngFcDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 6), )
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultTable.setDescription("Service Ingress Policy FC Default Mapping Table\n         This table is used to configure, for each forwarding class, the default settings for\n         all VPT or DSCP values.\n         Only one entry may be created for each service policy's forwarding class (i.e. per\n         prvtHqosSvcIngId, prvtHqosSvcIngFcType combination).")
prvtHqosSvcIngFcDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 6, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcDefaultMapType"))
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultEntry.setDescription('An entry belonging to prvtHqosSvcIngFcDefaultTable.')
prvtHqosSvcIngFcDefaultMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 6, 1, 1), PrvtHqosMapType())
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultMapType.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultMapType.setDescription('The mapping type (DSCP, or VPT) to which this row applies.')
prvtHqosSvcIngFcDefaultRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultRowStatus.setDescription('The RowStatus for this mapping type.')
prvtHqosSvcIngFcDefaultColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 6, 1, 3), PrvtHqosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultColor.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcDefaultColor.setDescription('The default color (conformance level) to apply for all values (DSCP/VPT)\n         applicable for the mapping type.')
prvtHqosSvcIngFcQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 7), )
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueTable.setDescription('Service Ingress Policy FC Queue Table\n         This table maintains, for service ingress policies, the mapping of\n         a particular forwarding class traffic type into a specified queue.\n         A queue is specified using a unique queue identifier\n         (prvtHqosSvcIngQueueId), and its parent scheduler policy\n         name (prvtHqosSchedIngPolicyName) and scheduler name\n         (prvtHqosSchedIngVirtName).')
prvtHqosSvcIngFcQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 7, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngFcQueueType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngVirtName"))
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueEntry.setDescription('An entry belonging to prvtHqosSvcIngFcQueueTable.')
prvtHqosSvcIngFcQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 7, 1, 1), PrvtHqosQueueType())
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueType.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueType.setDescription('The type (unicast/multicast/broadcast) of the queue to which this row applies.')
prvtHqosSvcIngFcQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngFcQueueRowStatus.setDescription('The RowStatus for this forwarding class queue.')
prvtHqosSvcIngQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8), )
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTable.setDescription('Service Ingress Queue Statistics Table\n         Entries in this table contain the per-port statistics for\n         service ingress queues.')
prvtHqosSvcIngQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcIngId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcIngQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngVirtName"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsEntry.setDescription('An entry belonging to prvtHqosSvcIngQStatsTable.')
prvtHqosSvcIngQStatsGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 2), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsGrnBytes.setDescription('The total number of bytes of green traffic.')
prvtHqosSvcIngQStatsGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 3), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsGrnPckts.setDescription('The total number of packets of green traffic.')
prvtHqosSvcIngQStatsYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 4), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsYlwBytes.setDescription('The total number of bytes of yellow traffic.')
prvtHqosSvcIngQStatsYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 5), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsYlwPckts.setDescription('The total number of packets of yellow traffic.')
prvtHqosSvcIngQStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 6), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTxBytes.setDescription('The total number of bytes of traffic transmitted.')
prvtHqosSvcIngQStatsTxPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 7), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTxPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsTxPckts.setDescription('The total number of packets of traffic transmitted.')
prvtHqosSvcIngQStatsWredGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 8), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredGrnBytes.setDescription('The total number of bytes of green traffic dropped due to the WRED.')
prvtHqosSvcIngQStatsWredGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 9), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredGrnPckts.setDescription('The total number of packets of green traffic dropped due to the WRED.')
prvtHqosSvcIngQStatsWredYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 10), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredYlwBytes.setDescription('The total number of bytes of yellow traffic dropped due to the WRED.')
prvtHqosSvcIngQStatsWredYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 11), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsWredYlwPckts.setDescription('The total number of packets of yellow traffic dropped due to the WRED.')
prvtHqosSvcIngQStatsPolDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 12), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsPolDropBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsPolDropBytes.setDescription('The total number of bytes of traffic dropped due to the policer.')
prvtHqosSvcIngQStatsPolDropPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 1, 8, 1, 13), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsPolDropPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcIngQStatsPolDropPckts.setDescription('The total number of packets of traffic dropped due to the policer.')
svcEgrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2))
prvtHqosSvcEgrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 1), )
if mibBuilder.loadTexts: prvtHqosSvcEgrTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrTable.setDescription('Service Egress Policy Table\n         Each entry in this table defines a service egress policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosSvcEgrQueueTable\n         - prvtHqosSvcEgrFcTable\n         - prvtHqosSvcEgrFcQueueTable')
prvtHqosSvcEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"))
if mibBuilder.loadTexts: prvtHqosSvcEgrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrEntry.setDescription('An entry belonging to prvtHqosSvcEgrTable.')
prvtHqosSvcEgrId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 1, 1, 1), PrvtHqosServicePolicyId())
if mibBuilder.loadTexts: prvtHqosSvcEgrId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrId.setDescription('Uniquely identifies a service egress policy.')
prvtHqosSvcEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrRowStatus.setDescription('The RowStatus for this service egress policy.')
prvtHqosSvcEgrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrDescr.setDescription('User-defined description for the service egress policy.')
prvtHqosSvcEgrQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2), )
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueTable.setDescription('Service Egress Policy Queue Table\n         Entries in this table define queues belonging to service egress policies.\n         A queue is specified using a unique queue identifier (prvtHqosSvcEgrQueueId),\n         and its parent scheduler policy name (prvtHqosSchedEgrPolicyName) and\n         scheduler name (prvtHqosSchedEgrVirtName).')
prvtHqosSvcEgrQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrVirtName"))
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueEntry.setDescription('An entry belonging to prvtHqosSvcEgrQueueTable.')
prvtHqosSvcEgrQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2, 1, 1), PrvtHqosServiceQueueId())
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueId.setDescription('Uniquely identifies a queue belonging to a service egress policy.')
prvtHqosSvcEgrQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueRowStatus.setDescription('The RowStatus for this service egress policy queue.')
prvtHqosSvcEgrQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2, 1, 3), PrvtHqosServWfqIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueServWfq.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueServWfq.setDescription('The WFQ profile that needs to be used by the scheduler to which the queue would be feeding to.\n         Must be set to the prvtHqosWfqSvcEgrPrfId of an entry existing in prvtHqosWfqSvcEgrPrfTable.')
prvtHqosSvcEgrQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 2, 1, 4), PrvtHqosWredIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueWred.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQueueWred.setDescription('The WRED profile applied to this service egress policy queue.\n         Must be set to the prvtHqosWredPrfId of an entry existing in prvtHqosWredPrfTable.')
prvtHqosSvcEgrFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 3), )
if mibBuilder.loadTexts: prvtHqosSvcEgrFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcTable.setDescription('Service Egress Policy FC Mapping Table\n         This table allows configuration that is specific to a forwarding class.\n         Before a row for a specific forwarding class may be created in\n         prvtHqosSvcEgrFcQueueTable, or in prvtHqosSvcEgrFcColorTable, a row with\n         that forwarding class must first be created in this table.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in prvtHqosSvcEgrFcQueueTable, and\n         prvtHqosSvcEgrFcColorTable.')
prvtHqosSvcEgrFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrFcNumber"))
if mibBuilder.loadTexts: prvtHqosSvcEgrFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcEntry.setDescription('An entry belonging to prvtHqosSvcEgrFcTable.')
prvtHqosSvcEgrFcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 3, 1, 1), PrvtHqosFcType())
if mibBuilder.loadTexts: prvtHqosSvcEgrFcNumber.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcNumber.setDescription('The forwarding class to which this row applies.')
prvtHqosSvcEgrFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcRowStatus.setDescription('The RowStatus for this forwarding class.')
prvtHqosSvcEgrFcQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 4), )
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueTable.setDescription('Service Egress Policy FC Queue Table\n         This table maintains, for service egress policies, the mapping of\n         traffic forwarding class into a specified queue.\n         A queue is specified using a unique queue identifier\n         (prvtHqosSvcEgrQueueId), and its parent scheduler policy\n         name (prvtHqosSchedEgrPolicyName) and scheduler name\n         (prvtHqosSchedEgrVirtName).')
prvtHqosSvcEgrFcQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrFcNumber"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrFcQueueType"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrVirtName"))
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueEntry.setDescription('An entry belonging to prvtHqosSvcEgrFcQueueTable.')
prvtHqosSvcEgrFcQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 4, 1, 1), PrvtHqosQueueType())
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueType.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueType.setDescription('The type (unicast/multicast/broadcast) of the queue to which this row applies.')
prvtHqosSvcEgrFcQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcQueueRowStatus.setDescription('The RowStatus for this queue.')
prvtHqosSvcEgrFcColorTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 5), )
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorTable.setDescription('Service Egress Policy FC Color Table\n         This table allows remarking of VPT bits based on forwarding class and color.')
prvtHqosSvcEgrFcColorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrFcNumber"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrFcColorValue"))
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorEntry.setDescription('An entry belonging to prvtHqosSvcEgrFcColorTable.')
prvtHqosSvcEgrFcColorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 5, 1, 2), PrvtHqosColorType())
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorValue.setDescription('The traffic color (conformance level) to which this row applies.')
prvtHqosSvcEgrFcColorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorRowStatus.setDescription('The RowStatus for this forwarding class and color.')
prvtHqosSvcEgrFcColorDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 5, 1, 4), PrvtHqosDot1pPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorDot1PValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrFcColorDot1PValue.setDescription('The 802.1p value to use for packet remarking for traffic belonging\n         to this forwarding class and color.')
prvtHqosSvcEgrQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6), )
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTable.setDescription('Service Egress Queue Statistics Table\n         Entries in this table contain the per-port statistics for\n         service egress queues.')
prvtHqosSvcEgrQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrId"), (0, "PRVT-HQOS-MIB", "prvtHqosSvcEgrQueueId"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrVirtName"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsEntry.setDescription('An entry belonging to prvtHqosSvcEgrQStatsTable.')
prvtHqosSvcEgrQStatsGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 2), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsGrnBytes.setDescription('The total number of bytes of green traffic.')
prvtHqosSvcEgrQStatsGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 3), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsGrnPckts.setDescription('The total number of packets of green traffic.')
prvtHqosSvcEgrQStatsYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 4), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsYlwBytes.setDescription('The total number of bytes of yellow traffic.')
prvtHqosSvcEgrQStatsYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 5), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsYlwPckts.setDescription('The total number of packets of yellow traffic.')
prvtHqosSvcEgrQStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 6), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTxBytes.setDescription('The total number of bytes of traffic transmitted.')
prvtHqosSvcEgrQStatsTxPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 7), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTxPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsTxPckts.setDescription('The total number of packets of traffic transmitted.')
prvtHqosSvcEgrQStatsWredGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 8), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredGrnBytes.setDescription('The total number of bytes of green traffic dropped due to the WRED.')
prvtHqosSvcEgrQStatsWredGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 9), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredGrnPckts.setDescription('The total number of packets of green traffic dropped due to the WRED.')
prvtHqosSvcEgrQStatsWredYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 10), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredYlwBytes.setDescription('The total number of bytes of yellow traffic dropped due to the WRED.')
prvtHqosSvcEgrQStatsWredYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 11), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsWredYlwPckts.setDescription('The total number of packets of yellow traffic dropped due to the WRED.')
prvtHqosSvcEgrQStatsPolDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 12), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsPolDropBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsPolDropBytes.setDescription('The total number of bytes of traffic dropped due to the policer.')
prvtHqosSvcEgrQStatsPolDropPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 2, 6, 1, 13), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsPolDropPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSvcEgrQStatsPolDropPckts.setDescription('The total number of packets of traffic dropped due to the policer.')
netObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3))
prvtHqosNetPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 1), )
if mibBuilder.loadTexts: prvtHqosNetPolicyTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetPolicyTable.setDescription('Network Policy Table\n         Each entry in this table defines a network (ingress or egress) policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosNetIngLspExpTable\n         - prvtHqosNetEgrFcTable')
prvtHqosNetPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetPolicyName"))
if mibBuilder.loadTexts: prvtHqosNetPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetPolicyEntry.setDescription('An entry belonging to prvtHqosNetPolicyTable.')
prvtHqosNetPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 1, 1, 1), PrvtHqosNetPolNameType())
if mibBuilder.loadTexts: prvtHqosNetPolicyName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetPolicyName.setDescription('Uniquely identifies a network policy.')
prvtHqosNetPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetPolicyRowStatus.setDescription('The RowStatus for this network policy.')
prvtHqosNetPolicyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetPolicyDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetPolicyDescr.setDescription('User-defined description for the network policy')
prvtHqosNetIngLspExpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2), )
if mibBuilder.loadTexts: prvtHqosNetIngLspExpTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpTable.setDescription("Network Ingress Policy LSP EXP Mapping Table\n         This table contains network ingress policies' LSP EXP bits to\n         forwarding class and color mappings.")
prvtHqosNetIngLspExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetIngLspExpValue"))
if mibBuilder.loadTexts: prvtHqosNetIngLspExpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpEntry.setDescription('An entry belonging to prvtHqosNetIngLspExpTable.')
prvtHqosNetIngLspExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2, 1, 1), PrvtHqosLspExpValueType())
if mibBuilder.loadTexts: prvtHqosNetIngLspExpValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpValue.setDescription('The LSP EXP bit value to which this row applies.')
prvtHqosNetIngLspExpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetIngLspExpRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpRowStatus.setDescription('The RowStatus for this LSP EXP bit value.')
prvtHqosNetIngLspExpFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2, 1, 3), PrvtHqosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetIngLspExpFC.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpFC.setDescription('The forwarding class to assign to traffic matching the LSP EXP bit value.')
prvtHqosNetIngLspExpColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 2, 1, 4), PrvtHqosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetIngLspExpColor.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetIngLspExpColor.setDescription('The color (conformance level) to assign to traffic matching the LSP EXP bit value.')
prvtHqosNetEgrFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3), )
if mibBuilder.loadTexts: prvtHqosNetEgrFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcTable.setDescription('Network Egress FC Mapping Table\n         This table allows remarking of LSP EXP bits based on forwarding class and color.')
prvtHqosNetEgrFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetEgrFcNumber"), (0, "PRVT-HQOS-MIB", "prvtHqosNetEgrFcColor"))
if mibBuilder.loadTexts: prvtHqosNetEgrFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcEntry.setDescription('An entry belonging to prvtHqosNetEgrFcTable.')
prvtHqosNetEgrFcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3, 1, 1), PrvtHqosFcType())
if mibBuilder.loadTexts: prvtHqosNetEgrFcNumber.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcNumber.setDescription('The forwarding class to which this row applies.')
prvtHqosNetEgrFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3, 1, 2), PrvtHqosColorType())
if mibBuilder.loadTexts: prvtHqosNetEgrFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcColor.setDescription('The traffic color (conformance level) to which this row applies.')
prvtHqosNetEgrFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetEgrFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcRowStatus.setDescription('The RowStatus for this forwarding class and color.')
prvtHqosNetEgrFcLspExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 3, 3, 1, 4), PrvtHqosLspExpValueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetEgrFcLspExpValue.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrFcLspExpValue.setDescription('The value to assign to the LSP EXP bits of traffic belonging to the forwarding class and color.')
netQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4))
prvtHqosNetQPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 1), )
if mibBuilder.loadTexts: prvtHqosNetQPolicyTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyTable.setDescription('Network Egress Queue Policy Table\n         Each entry in this table defines a network egress queue policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosNetQPolicyQueueTable\n         - prvtHqosNetQPolicyFcTable\n         - prvtHqosNetQPolicyFcQueueTable')
prvtHqosNetQPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyName"))
if mibBuilder.loadTexts: prvtHqosNetQPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyEntry.setDescription('An entry belonging to prvtHqosNetQPolicyTable.')
prvtHqosNetQPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 1, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosNetQPolicyName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyName.setDescription('Uniquely identifies a network egress queue policy.')
prvtHqosNetQPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyRowStatus.setDescription('The RowStatus for this network egress queue policy.')
prvtHqosNetQPolicyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyDescr.setDescription('User-defined description for the network egress queue policy.')
prvtHqosNetQPolicyQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2), )
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueTable.setDescription('Network Egress Queue Table\n         Entries in this table define queues belonging to network (egress) queue policies.')
prvtHqosNetQPolicyQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyQueueId"))
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueEntry.setDescription('An entry belonging to prvtHqosNetQPolicyQueueTable.')
prvtHqosNetQPolicyQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 1), PrvtHqosNetQueueIdType())
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueId.setDescription('Uniquely identifies a queue belonging to a network (egress) queue policy.')
prvtHqosNetQPolicyQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueRowStatus.setDescription('The RowStatus for this queue.')
prvtHqosNetQPolicyQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 3), PrvtHqosLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueLevel.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueLevel.setDescription('Specifies the level of priority for the queue while feeding to the parent.')
prvtHqosNetQPolicyQueueWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 4), PrvtHqosNetWfqIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueWfq.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueWfq.setDescription('The WFQ profile that needs to be used by the scheduler to which the queue would be feeding to.\n         Must be set to the prvtHqosWfqNetworkPrfId of an entry existing in prvtHqosWfqNetworkPrfTable.')
prvtHqosNetQPolicyQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 5), PrvtHqosWredIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueWred.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueWred.setDescription('The WRED profile applied to this queue.\n         Must be set to the prvtHqosWredPrfId of an entry existing in prvtHqosWredPrfTable.')
prvtHqosNetQPolicyQueueShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 2, 1, 6), PrvtHqosNetShaperId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueShaper.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyQueueShaper.setDescription('The shaping profile applied to this queue.\n         Must be set to the prvtHqosShaperNetPrfId of an entry existing in prvtHqosShaperNetPrfTable.')
prvtHqosNetQPolicyFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 3), )
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcTable.setDescription('Network Policy FC Table\n         A list of forwarding classes belonging to network queue policies.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in prvtHqosNetQPolicyFcQueueTable.')
prvtHqosNetQPolicyFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyFcNumber"))
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcEntry.setDescription('An entry belonging to prvtHqosNetQPolicyFcTable.')
prvtHqosNetQPolicyFcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 3, 1, 1), PrvtHqosFcType())
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcNumber.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcNumber.setDescription('The forwarding class to which this row applies.')
prvtHqosNetQPolicyFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcRowStatus.setDescription('The RowStatus for this forwarding class.')
prvtHqosNetQPolicyFcQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 4), )
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueTable.setDescription('Network Queue Policy FC Queue Table\n         This table maintains, for network queue policies, the mapping of a\n         particular forwarding class traffic type into a specified queue.')
prvtHqosNetQPolicyFcQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyFcNumber"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyFcQueueType"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyQueueId"))
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueEntry.setDescription('An entry belonging to prvtHqosNetQPolicyFcQueueTable.')
prvtHqosNetQPolicyFcQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 4, 1, 3), PrvtHqosQueueType())
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueType.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueType.setDescription('The type (unicast/multicast/broadcast) of the queue to be assigned to the forwarding class.')
prvtHqosNetQPolicyFcQueueRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueRStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetQPolicyFcQueueRStatus.setDescription('The RowStatus for this queue.')
prvtHqosNetEgrQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5), )
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTable.setDescription('Network Egress Queue Statistics Table\n         Entries in this table contain the per-port statistics for\n         network egress queues.')
prvtHqosNetEgrQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosNetQPolicyQueueId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsEntry.setDescription('An entry belonging to prvtHqosNetEgrQStatsTable.')
prvtHqosNetEgrQStatsGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 2), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsGrnBytes.setDescription('The total number of bytes of green traffic.')
prvtHqosNetEgrQStatsGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 3), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsGrnPckts.setDescription('The total number of packets of green traffic.')
prvtHqosNetEgrQStatsYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 4), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsYlwBytes.setDescription('The total number of bytes of yellow traffic.')
prvtHqosNetEgrQStatsYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 5), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsYlwPckts.setDescription('The total number of packets of yellow traffic.')
prvtHqosNetEgrQStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 6), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTxBytes.setDescription('The total number of bytes of traffic transmitted.')
prvtHqosNetEgrQStatsTxPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 7), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTxPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsTxPckts.setDescription('The total number of packets of traffic transmitted.')
prvtHqosNetEgrQStatsWredGrnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 8), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredGrnBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredGrnBytes.setDescription('The total number of bytes of green traffic dropped due to the WRED.')
prvtHqosNetEgrQStatsWredGrnPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 9), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredGrnPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredGrnPckts.setDescription('The total number of packets of green traffic dropped due to the WRED.')
prvtHqosNetEgrQStatsWredYlwBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 10), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredYlwBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredYlwBytes.setDescription('The total number of bytes of yellow traffic dropped due to the WRED.')
prvtHqosNetEgrQStatsWredYlwPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 11), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredYlwPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsWredYlwPckts.setDescription('The total number of packets of yellow traffic dropped due to the WRED.')
prvtHqosNetEgrQStatsPolDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 12), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsPolDropBytes.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsPolDropBytes.setDescription('The total number of bytes of traffic dropped due to the policer.')
prvtHqosNetEgrQStatsPolDropPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 4, 5, 1, 13), PrvtHqosStatsCountType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsPolDropPckts.setStatus('current')
if mibBuilder.loadTexts: prvtHqosNetEgrQStatsPolDropPckts.setDescription('The total number of packets of traffic dropped due to the policer.')
schedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5))
prvtHqosSchedIngPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 1), )
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyTable.setDescription('Service Scheduler Ingress Policy Table\n         Each entry in this table defines an ingress service scheduler policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosSchedIngVirtTable\n         - prvtHqosSchedIngRootTable')
prvtHqosSchedIngPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"))
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyEntry.setDescription('An entry belonging to prvtHqosSchedIngPolicyTable.')
prvtHqosSchedIngPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 1, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyName.setDescription('Uniquely identifies an ingress service scheduler policy.')
prvtHqosSchedIngPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyRowStatus.setDescription('The RowStatus for this ingress service scheduler policy.')
prvtHqosSchedIngPolicyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngPolicyDescr.setDescription('User-defined description for the ingress service scheduler policy')
prvtHqosSchedIngVirtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2), )
if mibBuilder.loadTexts: prvtHqosSchedIngVirtTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtTable.setDescription('Ingress Virtual Scheduler Table\n         Each entry in this table defines an ingress virtual (L2) scheduler.')
prvtHqosSchedIngVirtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngVirtName"))
if mibBuilder.loadTexts: prvtHqosSchedIngVirtEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtEntry.setDescription('An entry belonging to prvtHqosSchedIngVirtTable.')
prvtHqosSchedIngVirtName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedIngVirtName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtName.setDescription('Uniquely identifies a virtual scheduler belonging to an ingress service policy.')
prvtHqosSchedIngVirtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtRowStatus.setDescription('The RowStatus for this ingress virtual scheduler.')
prvtHqosSchedIngVirtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtDescr.setDescription('User-defined description for the ingress virtual scheduler.')
prvtHqosSchedIngVirtParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 4), PrvtHqosNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtParent.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtParent.setDescription('The scheduler to which this scheduler would be feeding to.\n         Must be set to the prvtHqosSchedIngRootName of an entry in prvtHqosSchedIngRootTable\n         that has the same prvtHqosSchedIngPolicyName.')
prvtHqosSchedIngVirtLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 5), PrvtHqosLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtLevel.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtLevel.setDescription('The priority level of the scheduler.')
prvtHqosSchedIngVirtWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 6), PrvtHqosServSchedWfqIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtWfqProfile.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtWfqProfile.setDescription('The WFQ profile number for this scheduler.\n         Must be set to the prvtHqosWfqSchedIngPrfId of an entry in prvtHqosWfqSchedIngPrfTable.')
prvtHqosSchedIngVirtShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 2, 1, 7), PrvtHqosL2ShaperId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngVirtShaper.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngVirtShaper.setDescription('The shaping profile applied to the scheduler.\n         Must be set to the prvtHqosShaperL2IngPrfId of an entry in prvtHqosShaperL2IngPrfTable.')
prvtHqosSchedIngRootTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3), )
if mibBuilder.loadTexts: prvtHqosSchedIngRootTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootTable.setDescription('Ingress Root Scheduler Table\n         Each entry in this table defines an ingress root scheduler.\n         A maximum of 2 entries may be created per policy (prvtHqosSchedIngPolicyName).')
prvtHqosSchedIngRootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedIngPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedIngRootName"))
if mibBuilder.loadTexts: prvtHqosSchedIngRootEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootEntry.setDescription('An entry belonging to prvtHqosSchedIngRootTable.')
prvtHqosSchedIngRootName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedIngRootName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootName.setDescription('Uniquely identifies an ingress root scheduler belonging to an ingress service policy.')
prvtHqosSchedIngRootRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngRootRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootRowStatus.setDescription('The RowStatus for this ingress root scheduler.')
prvtHqosSchedIngRootDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngRootDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootDescr.setDescription('User-defined description for the ingress root scheduler.')
prvtHqosSchedIngRootLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1, 4), PrvtHqosLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngRootLevel.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootLevel.setDescription('The priority level of the ingress root scheduler.')
prvtHqosSchedIngRootShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 3, 1, 5), PrvtHqosL1ShaperId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedIngRootShaper.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedIngRootShaper.setDescription('The shaping profile applied to the ingress root scheduler.\n         Must be set to the prvtHqosShaperL1IngPrfId of an entry in prvtHqosShaperL1IngPrfTable.')
prvtHqosSchedEgrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 4), )
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyTable.setDescription('Egress Service Scheduler Policy Table\n         Each entry in this table defines an egress service scheduler policy.\n         Note that deletion of a row in this table will also result in\n         the deletion of the dependent rows in the following tables:\n         - prvtHqosSchedEgrVirtTable\n         - prvtHqosSchedEgrRootTable')
prvtHqosSchedEgrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"))
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyEntry.setDescription('An entry belonging to prvtHqosSchedEgrPolicyTable.')
prvtHqosSchedEgrPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 4, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyName.setDescription('Uniquely identifies an egress scheduler policy.')
prvtHqosSchedEgrPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyRowStatus.setDescription('The RowStatus for this egress scheduler policy.')
prvtHqosSchedEgrPolicyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 4, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrPolicyDescr.setDescription('User-defined description for the egress scheduler policy')
prvtHqosSchedEgrVirtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5), )
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtTable.setDescription('Egress Virtual Scheduler Table\n         Each entry in this table defines an egress virtual (L2) scheduler.')
prvtHqosSchedEgrVirtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrVirtName"))
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtEntry.setDescription('An entry belonging to prvtHqosSchedEgrVirtTable.')
prvtHqosSchedEgrVirtName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtName.setDescription('Uniquely identifies a virtual scheduler belonging to an egress service policy.')
prvtHqosSchedEgrVirtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtRowStatus.setDescription('The RowStatus for this egress virtual scheduler.')
prvtHqosSchedEgrVirtDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtDescr.setDescription('User-defined description for the egress virtual scheduler.')
prvtHqosSchedEgrVirtParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 4), PrvtHqosNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtParent.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtParent.setDescription('The scheduler to which this scheduler would be feeding to.\n         Must be set to the prvtHqosSchedEgrRootName of an entry in prvtHqosSchedEgrRootTable\n         that has the same prvtHqosSchedEgrPolicyName.')
prvtHqosSchedEgrVirtLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 5), PrvtHqosLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtLevel.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtLevel.setDescription('The priority level of the scheduler.')
prvtHqosSchedEgrVirtWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 6), PrvtHqosServSchedWfqIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtWfqProfile.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtWfqProfile.setDescription('The WFQ profile number for this scheduler.\n         Must be set to the prvtHqosWfqSchedEgrPrfId of an entry in prvtHqosWfqSchedEgrPrfTable.')
prvtHqosSchedEgrVirtShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 5, 1, 7), PrvtHqosL2ShaperId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtShaper.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrVirtShaper.setDescription('The shaping profile applied to this scheduler.\n         Must be set to the prvtHqosShaperL2EgrPrfId of an entry in prvtHqosShaperL2EgrPrfTable.')
prvtHqosSchedEgrRootTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6), )
if mibBuilder.loadTexts: prvtHqosSchedEgrRootTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootTable.setDescription('Egress Root Scheduler Table\n         Each entry in this table defines an egress root scheduler.\n         A maximum of 2 entries may be created per policy (prvtHqosSchedEgrPolicyName).')
prvtHqosSchedEgrRootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrPolicyName"), (0, "PRVT-HQOS-MIB", "prvtHqosSchedEgrRootName"))
if mibBuilder.loadTexts: prvtHqosSchedEgrRootEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootEntry.setDescription('An entry belonging to prvtHqosSchedEgrRootTable.')
prvtHqosSchedEgrRootName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1, 1), PrvtHqosNamedItem())
if mibBuilder.loadTexts: prvtHqosSchedEgrRootName.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootName.setDescription('Uniquely identifies an egress root scheduler belonging to an egress service policy.')
prvtHqosSchedEgrRootRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrRootRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootRowStatus.setDescription('The RowStatus for this egress root scheduler.')
prvtHqosSchedEgrRootDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrRootDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootDescr.setDescription('User-defined description for the egress root scheduler.')
prvtHqosSchedEgrRootLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1, 4), PrvtHqosLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrRootLevel.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootLevel.setDescription('The priority level of the egress root scheduler.')
prvtHqosSchedEgrRootShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 5, 6, 1, 5), PrvtHqosL1ShaperId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosSchedEgrRootShaper.setStatus('current')
if mibBuilder.loadTexts: prvtHqosSchedEgrRootShaper.setDescription('The shaping profile applied to the egress root scheduler.\n         Must be set to the prvtHqosShaperL1EgrPrfId of an entry in prvtHqosShaperL1EgrPrfTable.')
wredObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6))
prvtHqosWredPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1), )
if mibBuilder.loadTexts: prvtHqosWredPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfTable.setDescription('WRED Profile Table\n         Each entry in this table defines a WRED profile.')
prvtHqosWredPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWredPrfId"))
if mibBuilder.loadTexts: prvtHqosWredPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfEntry.setDescription('An entry belonging to prvtHqosWredPrfTable.')
prvtHqosWredPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 1), PrvtHqosWredIdType())
if mibBuilder.loadTexts: prvtHqosWredPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfId.setDescription('Uniquely identifies a WRED profile.')
prvtHqosWredPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfRowStatus.setDescription('The RowStatus for this WRED profile.')
prvtHqosWredPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 3), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfDescr.setDescription('User-defined description for the WRED profile.')
prvtHqosWredPrfGreenMinAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 4), PrvtHqosWredMinValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfGreenMinAverage.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfGreenMinAverage.setDescription('Drop start threshold for the green traffic in kilobytes.')
prvtHqosWredPrfGreenMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 5), PrvtHqosWredMaxValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfGreenMaxAverage.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfGreenMaxAverage.setDescription('Absolute drop threshold for the green traffic in kilobytes.')
prvtHqosWredPrfGreenProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 6), PrvtHqosWredProbValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfGreenProbability.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfGreenProbability.setDescription('Drop probability slope for the green traffic.')
prvtHqosWredPrfYellowMinAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 7), PrvtHqosWredMinValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfYellowMinAverage.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfYellowMinAverage.setDescription('Drop start threshold for the yellow traffic in kilobytes.')
prvtHqosWredPrfYellowMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 8), PrvtHqosWredMaxValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfYellowMaxAverage.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfYellowMaxAverage.setDescription('Absolute drop threshold for the yellow traffic in kilobytes.')
prvtHqosWredPrfYellowProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 6, 1, 1, 9), PrvtHqosWredProbValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWredPrfYellowProbability.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWredPrfYellowProbability.setDescription('Drop probability slope for the yellow traffic.')
shaperObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7))
prvtHqosShaperL1IngPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1), )
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfTable.setDescription('Root(L1) Scheduler Shaper Ingress Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on an ingress root scheduler.')
prvtHqosShaperL1IngPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperL1IngPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfEntry.setDescription('An entry belonging to prvtHqosShaperL1IngPrfTable.')
prvtHqosShaperL1IngPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 1), PrvtHqosL1ShaperId())
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfId.setDescription('Uniquely identifies a root scheduler shaper ingress profile.')
prvtHqosShaperL1IngPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfRowStatus.setDescription('The RowStatus for this shaper profile.')
prvtHqosShaperL1IngPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 3), PrvtHqosRateValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperL1IngPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 4), PrvtHqosRateValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperL1IngPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 5), PrvtHqosBurstValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperL1IngPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 6), PrvtHqosBurstValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperL1IngPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 1, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1IngPrfDescr.setDescription('User-defined description for the shaper profile.')
prvtHqosShaperL1EgrPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2), )
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfTable.setDescription('Root(L1) Scheduler Shaper Egress Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on an egress root scheduler.')
prvtHqosShaperL1EgrPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperL1EgrPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfEntry.setDescription('An entry belonging to prvtHqosShaperL1EgrPrfTable.')
prvtHqosShaperL1EgrPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 1), PrvtHqosL1ShaperId())
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfId.setDescription('Uniquely identifies a root scheduler shaper egress profile.')
prvtHqosShaperL1EgrPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfRowStatus.setDescription('The RowStatus for this shaper profile.')
prvtHqosShaperL1EgrPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 3), PrvtHqosRateValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperL1EgrPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 4), PrvtHqosRateValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperL1EgrPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 5), PrvtHqosBurstValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperL1EgrPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 6), PrvtHqosBurstValueL1()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperL1EgrPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 2, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL1EgrPrfDescr.setDescription('User-defined description for the shaper profile.')
prvtHqosShaperL2IngPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3), )
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfTable.setDescription('(L2) Scheduler Shaper Ingress Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on an ingress L2 scheduler.')
prvtHqosShaperL2IngPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperL2IngPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfEntry.setDescription('An entry belonging to prvtHqosShaperL2IngPrfTable.')
prvtHqosShaperL2IngPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 1), PrvtHqosL2ShaperId())
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfId.setDescription('Uniquely identifies a L2 scheduler shaper ingress profile.')
prvtHqosShaperL2IngPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfRowStatus.setDescription('The RowStatus for this shaper profile.')
prvtHqosShaperL2IngPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 3), PrvtHqosRateValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperL2IngPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 4), PrvtHqosRateValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperL2IngPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 5), PrvtHqosBurstValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperL2IngPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 6), PrvtHqosBurstValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperL2IngPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 3, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2IngPrfDescr.setDescription('User-defined description for the profile.')
prvtHqosShaperL2EgrPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4), )
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfTable.setDescription('(L2) Scheduler Shaper Egress Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on an egress L2 scheduler.')
prvtHqosShaperL2EgrPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperL2EgrPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfEntry.setDescription('An entry belonging to prvtHqosShaperL2EgrPrfTable.')
prvtHqosShaperL2EgrPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 1), PrvtHqosL2ShaperId())
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfId.setDescription('Uniquely identifies a L2 scheduler shaper egress profile.')
prvtHqosShaperL2EgrPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfRowStatus.setDescription('The RowStatus for this shaper profile.')
prvtHqosShaperL2EgrPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 3), PrvtHqosRateValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperL2EgrPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 4), PrvtHqosRateValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperL2EgrPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 5), PrvtHqosBurstValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperL2EgrPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 6), PrvtHqosBurstValueL2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperL2EgrPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 4, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperL2EgrPrfDescr.setDescription('User-defined description for the shaper profile.')
prvtHqosShaperNetPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5), )
if mibBuilder.loadTexts: prvtHqosShaperNetPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfTable.setDescription('Network Shaper Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on a network scheduler.')
prvtHqosShaperNetPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperNetPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperNetPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfEntry.setDescription('An entry belonging to prvtHqosShaperNetPrfTable.')
prvtHqosShaperNetPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 1), PrvtHqosNetShaperId())
if mibBuilder.loadTexts: prvtHqosShaperNetPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfId.setDescription('Uniquely identifies a network scheduler shaper profile.')
prvtHqosShaperNetPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfRowStatus.setDescription('The RowStatus for this shaper profile.')
prvtHqosShaperNetPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 3), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperNetPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 4), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperNetPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 5), PrvtHqosBurstValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperNetPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 6), PrvtHqosBurstValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperNetPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 5, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperNetPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperNetPrfDescr.setDescription('User-defined description for the shaper profile.')
prvtHqosShaperIfPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6), )
if mibBuilder.loadTexts: prvtHqosShaperIfPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfTable.setDescription('Interface Shaper Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on an interface.')
prvtHqosShaperIfPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosShaperIfPrfId"))
if mibBuilder.loadTexts: prvtHqosShaperIfPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfEntry.setDescription('An entry belonging to prvtHqosShaperIfPrfTable.')
prvtHqosShaperIfPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 1), PrvtHqosIfShaperId())
if mibBuilder.loadTexts: prvtHqosShaperIfPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfId.setDescription('Uniquely identifies an interface shaper profile.')
prvtHqosShaperIfPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfRowStatus.setDescription('The RowStatus for this interface shaper profile.')
prvtHqosShaperIfPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 3), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosShaperIfPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 4), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosShaperIfPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 5), PrvtHqosBurstValueIntf()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosShaperIfPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 6), PrvtHqosBurstValueIntf()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosShaperIfPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 7, 6, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosShaperIfPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosShaperIfPrfDescr.setDescription('User-defined description for the shaper profile.')
wfqObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8))
prvtHqosWfqSvcIngPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1), )
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfTable.setDescription('Service Ingress WFQ Profile Table\n         Each entry in this table defines a service ingress WFQ profile.')
prvtHqosWfqSvcIngPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWfqSvcIngPrfId"))
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfEntry.setDescription('An entry belonging to prvtHqosWfqSvcIngPrfTable.')
prvtHqosWfqSvcIngPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1, 1, 1), PrvtHqosServWfqIdType())
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfId.setDescription('Uniquely identifies an ingress WFQ service profile.')
prvtHqosWfqSvcIngPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfRowStatus.setDescription('The RowStatus for this ingress WFQ service profile.')
prvtHqosWfqSvcIngPrfCirWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1, 1, 3), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfCirWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfCirWeight.setDescription('The relative weight for the packets where the WFQ service profile\n         is applied.')
prvtHqosWfqSvcIngPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 1, 1, 4), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcIngPrfDescr.setDescription('User-defined description for the WFQ service profile.')
prvtHqosWfqSvcEgrPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2), )
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfTable.setDescription('Service WFQ Egress Profile Table\n         Each entry in this table defines a service egress WFQ profile.')
prvtHqosWfqSvcEgrPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWfqSvcEgrPrfId"))
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfEntry.setDescription('An entry belonging to prvtHqosWfqSvcEgrPrfTable.')
prvtHqosWfqSvcEgrPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2, 1, 1), PrvtHqosServWfqIdType())
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfId.setDescription('Uniquely identifies an egress WFQ service profile.')
prvtHqosWfqSvcEgrPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfRowStatus.setDescription('The RowStatus for this egress WFQ service profile.')
prvtHqosWfqSvcEgrPrfCirWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2, 1, 3), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfCirWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfCirWeight.setDescription('The relative weight for the packets where the WFQ service profile\n         is applied.')
prvtHqosWfqSvcEgrPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 2, 1, 4), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSvcEgrPrfDescr.setDescription('User-defined description for the WFQ service profile.')
prvtHqosWfqSchedIngPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3), )
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfTable.setDescription('Scheduler Ingress WFQ Profile Table\n         Each entry in this table defines a scheduler ingress WFQ profile.\n         A maximum of 16 entries may be created.')
prvtHqosWfqSchedIngPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWfqSchedIngPrfId"))
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfEntry.setDescription('An entry belonging to prvtHqosWfqSchedIngPrfTable.')
prvtHqosWfqSchedIngPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1, 1), PrvtHqosServSchedWfqIdType())
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfId.setDescription('Uniquely identifies an ingress WFQ scheduler profile.')
prvtHqosWfqSchedIngPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfRowStatus.setDescription('The RowStatus for this ingress WFQ scheduler profile.')
prvtHqosWfqSchedIngPrfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1, 3), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfWeight.setDescription('The relative weight for the packets where the WFQ scheduler profile\n         is applied.')
prvtHqosWfqSchedIngPrfCirWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1, 4), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfCirWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfCirWeight.setDescription('The relative CIR weight for the packets where the WFQ scheduler profile\n         is applied.')
prvtHqosWfqSchedIngPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 3, 1, 5), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedIngPrfDescr.setDescription('User-defined description for the WFQ scheduler profile.')
prvtHqosWfqSchedEgrPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4), )
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfTable.setDescription('Scheduler Egress WFQ Profile Table\n         Each entry in this table defines a scheduler egress WFQ profile.\n         A maximum of 16 entries may be created.')
prvtHqosWfqSchedEgrPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWfqSchedEgrPrfId"))
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfEntry.setDescription('An entry belonging to prvtHqosWfqSchedEgrPrfTable.')
prvtHqosWfqSchedEgrPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1, 1), PrvtHqosServSchedWfqIdType())
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfId.setDescription('Uniquely identifies an egress WFQ scheduler profile.')
prvtHqosWfqSchedEgrPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfRowStatus.setDescription('The RowStatus for this egress WFQ scheduler profile.')
prvtHqosWfqSchedEgrPrfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1, 3), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfWeight.setDescription('The relative weight for the packets where the WFQ scheduler profile\n         is applied.')
prvtHqosWfqSchedEgrPrfCirWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1, 4), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfCirWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfCirWeight.setDescription('The relative CIR weight for the packets where the WFQ scheduler profile\n         is applied.')
prvtHqosWfqSchedEgrPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 4, 1, 5), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqSchedEgrPrfDescr.setDescription('User-defined description for the WFQ scheduler profile.')
prvtHqosWfqNetworkPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5), )
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfTable.setDescription('Network WFQ Profile Table\n         Each entry in this table defines a network WFQ profile.\n         A maximum of 16 entries may be created.')
prvtHqosWfqNetworkPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosWfqNetworkPrfId"))
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfEntry.setDescription('An entry belonging to prvtHqosWfqNetworkPrfTable.')
prvtHqosWfqNetworkPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1, 1), PrvtHqosNetWfqIdType())
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfId.setDescription('Uniquely identifies a WFQ network profile.')
prvtHqosWfqNetworkPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfRowStatus.setDescription('The RowStatus for this WFQ network profile.')
prvtHqosWfqNetworkPrfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1, 3), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfWeight.setDescription('The relative weight for the packets where the WFQ network profile\n         is applied.')
prvtHqosWfqNetworkPrfCirWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1, 4), PrvtHqosWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfCirWeight.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfCirWeight.setDescription('The relative CIR weight for the packets where the WFQ network profile\n         is applied.')
prvtHqosWfqNetworkPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 8, 5, 1, 5), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosWfqNetworkPrfDescr.setDescription('User-defined description for the WFQ network profile.')
ifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9))
prvtHqosIfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1), )
if mibBuilder.loadTexts: prvtHqosIfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfTable.setDescription('HQOS Interface Table\n         Contains HQOS specific information regarding an interface (port).')
prvtHqosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtHqosIfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfEntry.setDescription('An entry belonging to prvtHqosIfTable.')
prvtHqosIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfRowStatus.setDescription('The RowStatus for this port.')
prvtHqosIfNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1, 1, 2), PrvtHqosNetPolNameOrNoneType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosIfNetworkPolicy.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfNetworkPolicy.setDescription('The network policy applied to the port.\n         Must be set to a zero length string or to the prvtHqosNetPolicyName of an entry\n         in prvtHqosNetPolicyTable.\n         A zero length string represents that no network policy is applied to the\n         port.')
prvtHqosIfNetQueueEgrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1, 1, 3), PrvtHqosNamedItemOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosIfNetQueueEgrPolicy.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfNetQueueEgrPolicy.setDescription('The network egress queue policy applied to the port.\n         Must be set to a zero length string or to the prvtHqosNetQPolicyName of an entry\n         in prvtHqosNetQPolicyTable.\n         A zero length string represents that no network egress queue policy is\n         applied to the port.')
prvtHqosIfShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 9, 1, 1, 4), PrvtHqosIfShaperIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosIfShaperProfile.setStatus('current')
if mibBuilder.loadTexts: prvtHqosIfShaperProfile.setDescription('The shaper profile applied to the port.\n         Must be set to a value of zero or to the prvtHqosShaperIfPrfId of an entry\n         in prvtHqosShaperIfPrfTable.\n         The value of zero indicates that no shaper profile is applied to the port.')
policerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10))
prvtHqosPolicerSvcPrfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1), )
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfTable.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfTable.setDescription('Service Policer Profile Table\n         Each entry in this table defines a service policer profile.')
prvtHqosPolicerSvcPrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1), ).setIndexNames((0, "PRVT-HQOS-MIB", "prvtHqosPolicerSvcPrfId"))
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfEntry.setDescription('An entry belonging to prvtHqosPolicerSvcPrfTable.')
prvtHqosPolicerSvcPrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 1), PrvtHqosPolicerIdType())
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfId.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfId.setDescription('Uniquely identifies a service policer profile.')
prvtHqosPolicerSvcPrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfRowStatus.setDescription('The RowStatus for this service policer profile.')
prvtHqosPolicerSvcPrfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 3), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfCIR.setDescription('The committed information rate in kbps.')
prvtHqosPolicerSvcPrfPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 4), PrvtHqosRateValueNet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfPIR.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfPIR.setDescription('The peak information rate allowed in kbps.')
prvtHqosPolicerSvcPrfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 5), PrvtHqosBurstValueIntf()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfCBS.setDescription('The committed burst size allowed in kilobytes.')
prvtHqosPolicerSvcPrfPBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 6), PrvtHqosBurstValueIntf()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfPBS.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfPBS.setDescription('The maximum burst size allowed in kilobytes.')
prvtHqosPolicerSvcPrfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 5, 1, 10, 1, 1, 7), PrvtHqosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtHqosPolicerSvcPrfDescr.setDescription('User-defined description for the service policer profile.')
mibBuilder.exportSymbols("PRVT-HQOS-MIB", prvtHqosSvcIngQueueRowStatus=prvtHqosSvcIngQueueRowStatus, prvtHqosMIB=prvtHqosMIB, prvtHqosWfqSchedEgrPrfTable=prvtHqosWfqSchedEgrPrfTable, prvtHqosShaperL1EgrPrfPIR=prvtHqosShaperL1EgrPrfPIR, prvtHqosSvcIngFcDscpRowStatus=prvtHqosSvcIngFcDscpRowStatus, prvtHqosNetQPolicyFcRowStatus=prvtHqosNetQPolicyFcRowStatus, prvtHqosNetIngLspExpTable=prvtHqosNetIngLspExpTable, netObjects=netObjects, prvtHqosShaperL1IngPrfDescr=prvtHqosShaperL1IngPrfDescr, PrvtHqosDscpValue=PrvtHqosDscpValue, prvtHqosSvcEgrQueueRowStatus=prvtHqosSvcEgrQueueRowStatus, prvtHqosSvcEgrFcTable=prvtHqosSvcEgrFcTable, svcIngObjects=svcIngObjects, prvtHqosWfqSchedIngPrfDescr=prvtHqosWfqSchedIngPrfDescr, prvtHqosShaperL1EgrPrfRowStatus=prvtHqosShaperL1EgrPrfRowStatus, PrvtHqosIfShaperIdOrNone=PrvtHqosIfShaperIdOrNone, prvtHqosSvcIngFcEntry=prvtHqosSvcIngFcEntry, prvtHqosShaperL2IngPrfTable=prvtHqosShaperL2IngPrfTable, prvtHqosNetPolicyName=prvtHqosNetPolicyName, prvtHqosPolicerSvcPrfDescr=prvtHqosPolicerSvcPrfDescr, prvtHqosWfqSchedEgrPrfCirWeight=prvtHqosWfqSchedEgrPrfCirWeight, prvtHqosIfRowStatus=prvtHqosIfRowStatus, prvtHqosSchedIngVirtRowStatus=prvtHqosSchedIngVirtRowStatus, prvtHqosSvcEgrFcNumber=prvtHqosSvcEgrFcNumber, PrvtHqosWredMaxValue=PrvtHqosWredMaxValue, prvtHqosSchedEgrRootTable=prvtHqosSchedEgrRootTable, prvtHqosSvcIngFcType=prvtHqosSvcIngFcType, prvtHqosNetEgrFcRowStatus=prvtHqosNetEgrFcRowStatus, prvtHqosNetQPolicyFcQueueTable=prvtHqosNetQPolicyFcQueueTable, prvtHqosNetEgrFcColor=prvtHqosNetEgrFcColor, prvtHqosSvcEgrQueueWred=prvtHqosSvcEgrQueueWred, PYSNMP_MODULE_ID=prvtHqosMIB, prvtHqosSvcIngFcTable=prvtHqosSvcIngFcTable, PrvtHqosServSchedWfqIdType=PrvtHqosServSchedWfqIdType, prvtHqosSvcIngQueuePolicer=prvtHqosSvcIngQueuePolicer, prvtHqosShaperNetPrfEntry=prvtHqosShaperNetPrfEntry, prvtHqosSvcIngQStatsWredYlwPckts=prvtHqosSvcIngQStatsWredYlwPckts, PrvtHqosRateValueL2=PrvtHqosRateValueL2, PrvtHqosStatsCountType=PrvtHqosStatsCountType, prvtHqosWredPrfYellowMaxAverage=prvtHqosWredPrfYellowMaxAverage, PrvtHqosNetWfqIdType=PrvtHqosNetWfqIdType, PrvtHqosL1ShaperId=PrvtHqosL1ShaperId, prvtHqosNetQPolicyQueueWred=prvtHqosNetQPolicyQueueWred, prvtHqosShaperL1IngPrfCBS=prvtHqosShaperL1IngPrfCBS, PrvtHqosNetQueueIdType=PrvtHqosNetQueueIdType, prvtHqosWfqSvcEgrPrfRowStatus=prvtHqosWfqSvcEgrPrfRowStatus, prvtHqosSvcIngQStatsTable=prvtHqosSvcIngQStatsTable, prvtHqosSchedEgrRootDescr=prvtHqosSchedEgrRootDescr, prvtHqosNetIngLspExpColor=prvtHqosNetIngLspExpColor, prvtHqosNetEgrFcLspExpValue=prvtHqosNetEgrFcLspExpValue, prvtHqosWredPrfGreenProbability=prvtHqosWredPrfGreenProbability, prvtHqosWredPrfDescr=prvtHqosWredPrfDescr, prvtHqosShaperNetPrfId=prvtHqosShaperNetPrfId, prvtHqosSvcIngQueueWred=prvtHqosSvcIngQueueWred, prvtHqosSchedIngVirtEntry=prvtHqosSchedIngVirtEntry, PrvtHqosPolicerIdType=PrvtHqosPolicerIdType, prvtHqosSvcIngId=prvtHqosSvcIngId, PrvtHqosServiceQueueId=PrvtHqosServiceQueueId, prvtHqosSchedIngVirtParent=prvtHqosSchedIngVirtParent, prvtHqosNetQPolicyQueueWfq=prvtHqosNetQPolicyQueueWfq, prvtHqosNetEgrQStatsGrnBytes=prvtHqosNetEgrQStatsGrnBytes, prvtHqosShaperNetPrfPIR=prvtHqosShaperNetPrfPIR, prvtHqosSchedEgrRootEntry=prvtHqosSchedEgrRootEntry, prvtHqosWfqNetworkPrfId=prvtHqosWfqNetworkPrfId, prvtHqosSchedEgrPolicyName=prvtHqosSchedEgrPolicyName, prvtHqosSvcIngTable=prvtHqosSvcIngTable, prvtHqosNetPolicyTable=prvtHqosNetPolicyTable, prvtHqosWfqSchedIngPrfTable=prvtHqosWfqSchedIngPrfTable, prvtHqosShaperL1EgrPrfTable=prvtHqosShaperL1EgrPrfTable, prvtHqosShaperL1IngPrfTable=prvtHqosShaperL1IngPrfTable, prvtHqosWredPrfGreenMaxAverage=prvtHqosWredPrfGreenMaxAverage, prvtHqosSvcEgrId=prvtHqosSvcEgrId, prvtHqosSchedEgrVirtParent=prvtHqosSchedEgrVirtParent, prvtHqosWredPrfId=prvtHqosWredPrfId, PrvtHqosBurstValueIntf=PrvtHqosBurstValueIntf, prvtHqosSvcEgrQStatsTxPckts=prvtHqosSvcEgrQStatsTxPckts, prvtHqosWfqSchedIngPrfCirWeight=prvtHqosWfqSchedIngPrfCirWeight, prvtHqosSvcEgrFcQueueRowStatus=prvtHqosSvcEgrFcQueueRowStatus, prvtHqosWfqSchedEgrPrfDescr=prvtHqosWfqSchedEgrPrfDescr, prvtHqosSvcIngEntry=prvtHqosSvcIngEntry, prvtHqosSvcEgrQueueEntry=prvtHqosSvcEgrQueueEntry, prvtHqosNetIngLspExpRowStatus=prvtHqosNetIngLspExpRowStatus, prvtHqosSchedEgrVirtDescr=prvtHqosSchedEgrVirtDescr, prvtHqosSvcEgrDescr=prvtHqosSvcEgrDescr, prvtHqosIfNetworkPolicy=prvtHqosIfNetworkPolicy, prvtHqosWfqNetworkPrfTable=prvtHqosWfqNetworkPrfTable, prvtHqosSvcEgrFcColorDot1PValue=prvtHqosSvcEgrFcColorDot1PValue, prvtHqosSvcIngFcDot1pEntry=prvtHqosSvcIngFcDot1pEntry, prvtHqosNetEgrQStatsPolDropPckts=prvtHqosNetEgrQStatsPolDropPckts, prvtHqosSchedIngVirtDescr=prvtHqosSchedIngVirtDescr, prvtHqosSvcEgrQStatsWredYlwBytes=prvtHqosSvcEgrQStatsWredYlwBytes, prvtHqosSvcIngQStatsEntry=prvtHqosSvcIngQStatsEntry, prvtHqosWfqNetworkPrfWeight=prvtHqosWfqNetworkPrfWeight, prvtHqosSvcEgrQStatsGrnBytes=prvtHqosSvcEgrQStatsGrnBytes, prvtHqosSchedEgrVirtEntry=prvtHqosSchedEgrVirtEntry, prvtHqosNetIngLspExpEntry=prvtHqosNetIngLspExpEntry, PrvtHqosMapType=PrvtHqosMapType, prvtHqosSvcEgrRowStatus=prvtHqosSvcEgrRowStatus, prvtHqosShaperL1IngPrfPIR=prvtHqosShaperL1IngPrfPIR, prvtHqosShaperIfPrfCIR=prvtHqosShaperIfPrfCIR, PrvtHqosDot1pPriority=PrvtHqosDot1pPriority, prvtHqosNetQPolicyRowStatus=prvtHqosNetQPolicyRowStatus, prvtHqosSvcIngQueueTable=prvtHqosSvcIngQueueTable, prvtHqosSchedIngRootTable=prvtHqosSchedIngRootTable, prvtHqosNetQPolicyTable=prvtHqosNetQPolicyTable, prvtHqosSvcIngFcDefaultRowStatus=prvtHqosSvcIngFcDefaultRowStatus, prvtHqosNetQPolicyQueueLevel=prvtHqosNetQPolicyQueueLevel, prvtHqosShaperL1IngPrfId=prvtHqosShaperL1IngPrfId, prvtHqosShaperL1IngPrfEntry=prvtHqosShaperL1IngPrfEntry, prvtHqosShaperIfPrfEntry=prvtHqosShaperIfPrfEntry, prvtHqosWfqNetworkPrfRowStatus=prvtHqosWfqNetworkPrfRowStatus, prvtHqosSchedEgrVirtWfqProfile=prvtHqosSchedEgrVirtWfqProfile, shaperObjects=shaperObjects, prvtHqosNetEgrFcEntry=prvtHqosNetEgrFcEntry, PrvtHqosColorType=PrvtHqosColorType, prvtHqosSvcEgrQStatsWredGrnPckts=prvtHqosSvcEgrQStatsWredGrnPckts, prvtHqosShaperIfPrfId=prvtHqosShaperIfPrfId, prvtHqosShaperNetPrfCBS=prvtHqosShaperNetPrfCBS, prvtHqosSvcIngFcDefaultColor=prvtHqosSvcIngFcDefaultColor, prvtHqosWfqSvcIngPrfRowStatus=prvtHqosWfqSvcIngPrfRowStatus, prvtHqosSvcEgrQueueTable=prvtHqosSvcEgrQueueTable, prvtHqosNetQPolicyQueueId=prvtHqosNetQPolicyQueueId, prvtHqosPolicerSvcPrfId=prvtHqosPolicerSvcPrfId, prvtHqosSvcIngFcRowStatus=prvtHqosSvcIngFcRowStatus, PrvtHqosRateValueL1=PrvtHqosRateValueL1, PrvtHqosNetShaperId=PrvtHqosNetShaperId, prvtHqosNetQPolicyFcTable=prvtHqosNetQPolicyFcTable, prvtHqosSvcIngFcDot1pTable=prvtHqosSvcIngFcDot1pTable, prvtHqosNetQPolicyFcNumber=prvtHqosNetQPolicyFcNumber, prvtHqosSchedIngVirtWfqProfile=prvtHqosSchedIngVirtWfqProfile, prvtHqosSchedEgrVirtTable=prvtHqosSchedEgrVirtTable, prvtHqosNetPolicyRowStatus=prvtHqosNetPolicyRowStatus, prvtHqosSvcIngFcDscpEntry=prvtHqosSvcIngFcDscpEntry, prvtHqosNetQPolicyQueueRowStatus=prvtHqosNetQPolicyQueueRowStatus, prvtHqosNetQPolicyDescr=prvtHqosNetQPolicyDescr, prvtHqosShaperL2EgrPrfPBS=prvtHqosShaperL2EgrPrfPBS, PrvtHqosBurstValueNet=PrvtHqosBurstValueNet, prvtHqosSchedIngRootDescr=prvtHqosSchedIngRootDescr, prvtHqosSchedEgrPolicyDescr=prvtHqosSchedEgrPolicyDescr, prvtHqosSvcIngFcDot1pValue=prvtHqosSvcIngFcDot1pValue, prvtHqosShaperL2IngPrfCIR=prvtHqosShaperL2IngPrfCIR, prvtHqosWredPrfEntry=prvtHqosWredPrfEntry, prvtHqosSvcEgrFcColorTable=prvtHqosSvcEgrFcColorTable, prvtHqosIfNetQueueEgrPolicy=prvtHqosIfNetQueueEgrPolicy, prvtHqosNetEgrQStatsEntry=prvtHqosNetEgrQStatsEntry, prvtHqosNetEgrQStatsGrnPckts=prvtHqosNetEgrQStatsGrnPckts, PrvtHqosNetPolNameOrNoneType=PrvtHqosNetPolNameOrNoneType, prvtHqosSvcIngQueueEntry=prvtHqosSvcIngQueueEntry, prvtHqosShaperL2EgrPrfTable=prvtHqosShaperL2EgrPrfTable, prvtHqosSvcEgrQStatsGrnPckts=prvtHqosSvcEgrQStatsGrnPckts, prvtHqosWfqSchedIngPrfEntry=prvtHqosWfqSchedIngPrfEntry, prvtHqosSvcEgrFcColorRowStatus=prvtHqosSvcEgrFcColorRowStatus, prvtHqosSchedEgrRootName=prvtHqosSchedEgrRootName, prvtHqosWredPrfRowStatus=prvtHqosWredPrfRowStatus, PrvtHqosBurstValueL2=PrvtHqosBurstValueL2, prvtHqosWfqNetworkPrfCirWeight=prvtHqosWfqNetworkPrfCirWeight, prvtHqosSvcEgrQStatsPolDropPckts=prvtHqosSvcEgrQStatsPolDropPckts, prvtHqosNetEgrQStatsWredGrnPckts=prvtHqosNetEgrQStatsWredGrnPckts, prvtHqosWfqSvcIngPrfTable=prvtHqosWfqSvcIngPrfTable, hqosMIBObjects=hqosMIBObjects, prvtHqosSvcIngQueueId=prvtHqosSvcIngQueueId, prvtHqosSchedIngPolicyName=prvtHqosSchedIngPolicyName, svcEgrObjects=svcEgrObjects, PrvtHqosFcType=PrvtHqosFcType, prvtHqosShaperL1EgrPrfId=prvtHqosShaperL1EgrPrfId, prvtHqosShaperIfPrfPIR=prvtHqosShaperIfPrfPIR, ifObjects=ifObjects, prvtHqosSvcEgrQueueServWfq=prvtHqosSvcEgrQueueServWfq, prvtHqosShaperL2EgrPrfPIR=prvtHqosShaperL2EgrPrfPIR, prvtHqosShaperNetPrfDescr=prvtHqosShaperNetPrfDescr, prvtHqosSchedIngPolicyDescr=prvtHqosSchedIngPolicyDescr, prvtHqosWfqSvcIngPrfCirWeight=prvtHqosWfqSvcIngPrfCirWeight, PrvtHqosDescrType=PrvtHqosDescrType, schedObjects=schedObjects, prvtHqosShaperL2IngPrfId=prvtHqosShaperL2IngPrfId, PrvtHqosWeight=PrvtHqosWeight, prvtHqosShaperL1EgrPrfEntry=prvtHqosShaperL1EgrPrfEntry, PrvtHqosIfShaperId=PrvtHqosIfShaperId, prvtHqosSchedIngRootShaper=prvtHqosSchedIngRootShaper, prvtHqosSvcIngQStatsWredGrnBytes=prvtHqosSvcIngQStatsWredGrnBytes, PrvtHqosLspExpValueType=PrvtHqosLspExpValueType, prvtHqosNetEgrQStatsWredGrnBytes=prvtHqosNetEgrQStatsWredGrnBytes, prvtHqosShaperNetPrfRowStatus=prvtHqosShaperNetPrfRowStatus, prvtHqosWfqSvcEgrPrfTable=prvtHqosWfqSvcEgrPrfTable, prvtHqosIfShaperProfile=prvtHqosIfShaperProfile, prvtHqosSvcEgrFcColorEntry=prvtHqosSvcEgrFcColorEntry, PrvtHqosNamedItem=PrvtHqosNamedItem, prvtHqosShaperL2IngPrfRowStatus=prvtHqosShaperL2IngPrfRowStatus, prvtHqosSchedIngPolicyEntry=prvtHqosSchedIngPolicyEntry, PrvtHqosWredMinValue=PrvtHqosWredMinValue, prvtHqosSchedIngPolicyTable=prvtHqosSchedIngPolicyTable, prvtHqosSchedEgrVirtShaper=prvtHqosSchedEgrVirtShaper, prvtHqosSvcIngQStatsWredGrnPckts=prvtHqosSvcIngQStatsWredGrnPckts, prvtHqosSvcIngFcDot1pRowStatus=prvtHqosSvcIngFcDot1pRowStatus, prvtHqosSvcEgrFcQueueTable=prvtHqosSvcEgrFcQueueTable, prvtHqosShaperL1IngPrfRowStatus=prvtHqosShaperL1IngPrfRowStatus, prvtHqosSvcIngFcQueueEntry=prvtHqosSvcIngFcQueueEntry, prvtHqosWredPrfYellowProbability=prvtHqosWredPrfYellowProbability, prvtHqosShaperIfPrfPBS=prvtHqosShaperIfPrfPBS, prvtHqosSchedIngRootRowStatus=prvtHqosSchedIngRootRowStatus, prvtHqosWfqSchedEgrPrfWeight=prvtHqosWfqSchedEgrPrfWeight, prvtHqosSvcEgrQStatsWredYlwPckts=prvtHqosSvcEgrQStatsWredYlwPckts, prvtHqosSvcEgrFcColorValue=prvtHqosSvcEgrFcColorValue, prvtHqosNetQPolicyQueueShaper=prvtHqosNetQPolicyQueueShaper, prvtHqosSchedEgrPolicyRowStatus=prvtHqosSchedEgrPolicyRowStatus, prvtHqosSvcIngQStatsTxBytes=prvtHqosSvcIngQStatsTxBytes, prvtHqosIfEntry=prvtHqosIfEntry, prvtHqosSvcEgrQStatsPolDropBytes=prvtHqosSvcEgrQStatsPolDropBytes, prvtHqosNetQPolicyFcEntry=prvtHqosNetQPolicyFcEntry, prvtHqosShaperL1IngPrfCIR=prvtHqosShaperL1IngPrfCIR, wfqObjects=wfqObjects, prvtHqosShaperL1EgrPrfDescr=prvtHqosShaperL1EgrPrfDescr, policerObjects=policerObjects, prvtHqosPolicerSvcPrfCBS=prvtHqosPolicerSvcPrfCBS, prvtHqosNetEgrQStatsWredYlwBytes=prvtHqosNetEgrQStatsWredYlwBytes, prvtHqosSvcIngFcDefaultEntry=prvtHqosSvcIngFcDefaultEntry, PrvtHqosWredIdType=PrvtHqosWredIdType, prvtHqosNetEgrQStatsYlwBytes=prvtHqosNetEgrQStatsYlwBytes, prvtHqosSchedIngVirtLevel=prvtHqosSchedIngVirtLevel, prvtHqosNetPolicyEntry=prvtHqosNetPolicyEntry, prvtHqosNetQPolicyQueueEntry=prvtHqosNetQPolicyQueueEntry, prvtHqosWfqNetworkPrfDescr=prvtHqosWfqNetworkPrfDescr, prvtHqosSvcEgrQStatsYlwBytes=prvtHqosSvcEgrQStatsYlwBytes, prvtHqosShaperL2EgrPrfEntry=prvtHqosShaperL2EgrPrfEntry, prvtHqosShaperL2EgrPrfRowStatus=prvtHqosShaperL2EgrPrfRowStatus, prvtHqosShaperL2IngPrfPIR=prvtHqosShaperL2IngPrfPIR, prvtHqosWfqSchedIngPrfRowStatus=prvtHqosWfqSchedIngPrfRowStatus, prvtHqosSvcIngQueueServWfq=prvtHqosSvcIngQueueServWfq, prvtHqosSvcIngQStatsTxPckts=prvtHqosSvcIngQStatsTxPckts, prvtHqosSvcIngFcQueueRowStatus=prvtHqosSvcIngFcQueueRowStatus, prvtHqosPolicerSvcPrfPBS=prvtHqosPolicerSvcPrfPBS, prvtHqosNetQPolicyQueueTable=prvtHqosNetQPolicyQueueTable, prvtHqosSvcIngFcDscpTable=prvtHqosSvcIngFcDscpTable, prvtHqosSvcIngDescr=prvtHqosSvcIngDescr, prvtHqosSchedIngRootEntry=prvtHqosSchedIngRootEntry, prvtHqosWredPrfYellowMinAverage=prvtHqosWredPrfYellowMinAverage, PrvtHqosL2ShaperId=PrvtHqosL2ShaperId, netQueueObjects=netQueueObjects, prvtHqosWfqSvcIngPrfEntry=prvtHqosWfqSvcIngPrfEntry, prvtHqosSvcEgrEntry=prvtHqosSvcEgrEntry, prvtHqosWfqSvcEgrPrfDescr=prvtHqosWfqSvcEgrPrfDescr, PrvtHqosNetPolNameType=PrvtHqosNetPolNameType, PrvtHqosNamedItemOrNone=PrvtHqosNamedItemOrNone, prvtHqosWfqSchedEgrPrfId=prvtHqosWfqSchedEgrPrfId, prvtHqosSvcEgrFcQueueType=prvtHqosSvcEgrFcQueueType, prvtHqosShaperL1EgrPrfPBS=prvtHqosShaperL1EgrPrfPBS, prvtHqosSvcEgrQStatsTxBytes=prvtHqosSvcEgrQStatsTxBytes, PrvtHqosRateValueNet=PrvtHqosRateValueNet, prvtHqosSvcEgrQStatsTable=prvtHqosSvcEgrQStatsTable, prvtHqosSvcIngFcDot1pColor=prvtHqosSvcIngFcDot1pColor, prvtHqosIfTable=prvtHqosIfTable, prvtHqosSvcIngRowStatus=prvtHqosSvcIngRowStatus, prvtHqosSvcEgrQStatsWredGrnBytes=prvtHqosSvcEgrQStatsWredGrnBytes, prvtHqosShaperL2EgrPrfId=prvtHqosShaperL2EgrPrfId)
mibBuilder.exportSymbols("PRVT-HQOS-MIB", prvtHqosShaperL2IngPrfDescr=prvtHqosShaperL2IngPrfDescr, prvtHqosWfqSvcEgrPrfEntry=prvtHqosWfqSvcEgrPrfEntry, prvtHqosWfqSvcEgrPrfCirWeight=prvtHqosWfqSvcEgrPrfCirWeight, prvtHqosSvcEgrQStatsEntry=prvtHqosSvcEgrQStatsEntry, prvtHqosSvcIngFcDefaultMapType=prvtHqosSvcIngFcDefaultMapType, prvtHqosShaperL1EgrPrfCIR=prvtHqosShaperL1EgrPrfCIR, prvtHqosWfqSchedEgrPrfRowStatus=prvtHqosWfqSchedEgrPrfRowStatus, wredObjects=wredObjects, prvtHqosSchedIngVirtTable=prvtHqosSchedIngVirtTable, PrvtHqosQueueType=PrvtHqosQueueType, PrvtHqosBurstValueL1=PrvtHqosBurstValueL1, prvtHqosSvcIngQStatsPolDropBytes=prvtHqosSvcIngQStatsPolDropBytes, prvtHqosShaperL2IngPrfPBS=prvtHqosShaperL2IngPrfPBS, prvtHqosSchedEgrVirtLevel=prvtHqosSchedEgrVirtLevel, prvtHqosNetIngLspExpFC=prvtHqosNetIngLspExpFC, prvtHqosSchedIngVirtName=prvtHqosSchedIngVirtName, PrvtHqosServWfqIdType=PrvtHqosServWfqIdType, prvtHqosSchedIngRootLevel=prvtHqosSchedIngRootLevel, prvtHqosNetQPolicyFcQueueRStatus=prvtHqosNetQPolicyFcQueueRStatus, prvtHqosSchedEgrRootRowStatus=prvtHqosSchedEgrRootRowStatus, prvtHqosShaperL2IngPrfEntry=prvtHqosShaperL2IngPrfEntry, prvtHqosShaperL2EgrPrfCBS=prvtHqosShaperL2EgrPrfCBS, prvtHqosWredPrfTable=prvtHqosWredPrfTable, prvtHqosNetIngLspExpValue=prvtHqosNetIngLspExpValue, prvtHqosShaperIfPrfCBS=prvtHqosShaperIfPrfCBS, prvtHqosNetEgrQStatsWredYlwPckts=prvtHqosNetEgrQStatsWredYlwPckts, prvtHqosNetQPolicyName=prvtHqosNetQPolicyName, prvtHqosWfqSchedEgrPrfEntry=prvtHqosWfqSchedEgrPrfEntry, prvtHqosSchedEgrRootLevel=prvtHqosSchedEgrRootLevel, prvtHqosWfqNetworkPrfEntry=prvtHqosWfqNetworkPrfEntry, prvtHqosSvcEgrQueueId=prvtHqosSvcEgrQueueId, PrvtHqosServicePolicyId=PrvtHqosServicePolicyId, prvtHqosShaperNetPrfTable=prvtHqosShaperNetPrfTable, PrvtHqosLevel=PrvtHqosLevel, prvtHqosSchedEgrRootShaper=prvtHqosSchedEgrRootShaper, prvtHqosShaperNetPrfPBS=prvtHqosShaperNetPrfPBS, prvtHqosWfqSvcEgrPrfId=prvtHqosWfqSvcEgrPrfId, prvtHqosSvcEgrFcRowStatus=prvtHqosSvcEgrFcRowStatus, prvtHqosNetEgrQStatsTable=prvtHqosNetEgrQStatsTable, prvtHqosWfqSvcIngPrfDescr=prvtHqosWfqSvcIngPrfDescr, prvtHqosSvcEgrQStatsYlwPckts=prvtHqosSvcEgrQStatsYlwPckts, prvtHqosNetEgrQStatsYlwPckts=prvtHqosNetEgrQStatsYlwPckts, prvtHqosPolicerSvcPrfEntry=prvtHqosPolicerSvcPrfEntry, prvtHqosPolicerSvcPrfCIR=prvtHqosPolicerSvcPrfCIR, prvtHqosSchedIngRootName=prvtHqosSchedIngRootName, prvtHqosWfqSchedIngPrfWeight=prvtHqosWfqSchedIngPrfWeight, prvtHqosPolicerSvcPrfPIR=prvtHqosPolicerSvcPrfPIR, prvtHqosSvcIngFcDefaultTable=prvtHqosSvcIngFcDefaultTable, prvtHqosSvcIngFcQueueTable=prvtHqosSvcIngFcQueueTable, prvtHqosNetQPolicyEntry=prvtHqosNetQPolicyEntry, prvtHqosShaperL2EgrPrfCIR=prvtHqosShaperL2EgrPrfCIR, prvtHqosSvcIngFcDscpValue=prvtHqosSvcIngFcDscpValue, prvtHqosPolicerSvcPrfTable=prvtHqosPolicerSvcPrfTable, prvtHqosShaperL1IngPrfPBS=prvtHqosShaperL1IngPrfPBS, prvtHqosNetEgrFcTable=prvtHqosNetEgrFcTable, prvtHqosSvcEgrFcQueueEntry=prvtHqosSvcEgrFcQueueEntry, prvtHqosWredPrfGreenMinAverage=prvtHqosWredPrfGreenMinAverage, prvtHqosShaperL2EgrPrfDescr=prvtHqosShaperL2EgrPrfDescr, prvtHqosSchedIngPolicyRowStatus=prvtHqosSchedIngPolicyRowStatus, prvtHqosSvcEgrFcEntry=prvtHqosSvcEgrFcEntry, prvtHqosSvcIngFcQueueType=prvtHqosSvcIngFcQueueType, prvtHqosShaperIfPrfDescr=prvtHqosShaperIfPrfDescr, prvtHqosNetPolicyDescr=prvtHqosNetPolicyDescr, prvtHqosSvcIngQStatsGrnBytes=prvtHqosSvcIngQStatsGrnBytes, prvtHqosShaperIfPrfRowStatus=prvtHqosShaperIfPrfRowStatus, prvtHqosShaperIfPrfTable=prvtHqosShaperIfPrfTable, prvtHqosSchedEgrPolicyEntry=prvtHqosSchedEgrPolicyEntry, prvtHqosShaperL1EgrPrfCBS=prvtHqosShaperL1EgrPrfCBS, prvtHqosShaperL2IngPrfCBS=prvtHqosShaperL2IngPrfCBS, prvtHqosShaperNetPrfCIR=prvtHqosShaperNetPrfCIR, PrvtHqosWredProbValue=PrvtHqosWredProbValue, prvtHqosNetQPolicyFcQueueType=prvtHqosNetQPolicyFcQueueType, prvtHqosNetEgrQStatsTxBytes=prvtHqosNetEgrQStatsTxBytes, prvtHqosNetEgrQStatsTxPckts=prvtHqosNetEgrQStatsTxPckts, prvtHqosSvcEgrTable=prvtHqosSvcEgrTable, prvtHqosNetEgrQStatsPolDropBytes=prvtHqosNetEgrQStatsPolDropBytes, prvtHqosSchedEgrVirtRowStatus=prvtHqosSchedEgrVirtRowStatus, prvtHqosSchedEgrVirtName=prvtHqosSchedEgrVirtName, prvtHqosWfqSvcIngPrfId=prvtHqosWfqSvcIngPrfId, prvtHqosNetQPolicyFcQueueEntry=prvtHqosNetQPolicyFcQueueEntry, prvtHqosPolicerSvcPrfRowStatus=prvtHqosPolicerSvcPrfRowStatus, prvtHqosSvcIngQStatsWredYlwBytes=prvtHqosSvcIngQStatsWredYlwBytes, prvtHqosSchedEgrPolicyTable=prvtHqosSchedEgrPolicyTable, prvtHqosSvcIngQStatsYlwBytes=prvtHqosSvcIngQStatsYlwBytes, prvtHqosSchedIngVirtShaper=prvtHqosSchedIngVirtShaper, prvtHqosSvcIngQStatsGrnPckts=prvtHqosSvcIngQStatsGrnPckts, prvtHqosNetEgrFcNumber=prvtHqosNetEgrFcNumber, prvtHqosSvcIngQStatsPolDropPckts=prvtHqosSvcIngQStatsPolDropPckts, prvtHqosSvcIngFcDscpColor=prvtHqosSvcIngFcDscpColor, prvtHqosWfqSchedIngPrfId=prvtHqosWfqSchedIngPrfId, prvtHqosSvcIngQStatsYlwPckts=prvtHqosSvcIngQStatsYlwPckts)
