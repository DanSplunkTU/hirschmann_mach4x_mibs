#
# PySNMP MIB module PRVT-BIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-BIST-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:46:17 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
reportsL2IfaceUnit, switch, reportsL2IfaceSlot, reportsL2IfacePort = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "reportsL2IfaceUnit", "switch", "reportsL2IfaceSlot", "reportsL2IfacePort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, ModuleIdentity, Unsigned32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, IpAddress, Integer32, MibIdentifier, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "IpAddress", "Integer32", "MibIdentifier", "Counter64", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
prvtBISTMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 108))
prvtBISTMib.setRevisions(('2005-02-16 00:00', '2004-10-14 00:00', '2003-11-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtBISTMib.setRevisionsDescriptions(('Fixed spelling errors and changed the contact info.', 'Added functionality to schedule the self-test through SNMP, namely the bistSelfTestExecute\nand bistSelfTestExecuteStatus objects. Added functionality to monitor the result of all self-tests\nthat can be executed by the enable mode self-test command.', 'Initial version.',))
if mibBuilder.loadTexts: prvtBISTMib.setLastUpdated('200502160000Z')
if mibBuilder.loadTexts: prvtBISTMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtBISTMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtBISTMib.setDescription('The BIST MIB module for managing build-in self-tests and retrieving the results.')
class TestResult(TextualConvention, Integer32):
    description = 'This value represents the result of the test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("passed", 1), ("failed", 2), ("unknown", 3), ("notAvailable", 4))

prvtBISTNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 0))
prvtBISTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1))
prvtBISTConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 2))
bistConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 1))
bistStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 2))
bistResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3))
bistSelfTestExecute = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bistSelfTestExecute.setStatus('current')
if mibBuilder.loadTexts: bistSelfTestExecute.setDescription('Setting this object to execute(2) starts the execution of the BIST test and\nstores the results in bistResult.\n\nThis object does not execute port tests and does not influence the content\nof portTestTable.\n\nThe results of the test execution are displayed in bistResult. A GET on this\nobject always returns noop(1).')
bistSelfTestExecuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-started", 1), ("in-progress", 2), ("success", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistSelfTestExecuteStatus.setStatus('current')
if mibBuilder.loadTexts: bistSelfTestExecuteStatus.setDescription('This object displays the status of the last BIST execution. A value of\nnot-started(1) indicates that the test has not been manually executed since\nstart-up.\n\nA value of in-progress(2) indicates that the test is still being executed.\nsuccess(3) indicates that the test has been executed, error(4) is returned,\nif the test was not executed due to an internal software error.')
bistCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1))
bistRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2))
bistUART = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3))
bistSwitchCore = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 4))
bistNVRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5))
bistPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6))
bistOnboardPower = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7))
bistFan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8))
bistTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 9))
bistUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 10))
bistPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11))
cPUTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1), )
if mibBuilder.loadTexts: cPUTestTable.setStatus('current')
if mibBuilder.loadTexts: cPUTestTable.setDescription('Defines the CPU test Table for verification, via SNMP, of the functionality of\nthe OS device CPU')
cPUTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "cpuTestType"))
if mibBuilder.loadTexts: cPUTestEntry.setStatus('current')
if mibBuilder.loadTexts: cPUTestEntry.setDescription('cpuTestEntry')
cpuTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bistCPUValidation", 1), ("bistCPUUsage", 2))))
if mibBuilder.loadTexts: cpuTestType.setStatus('current')
if mibBuilder.loadTexts: cpuTestType.setDescription('CPU test type:\nbistCPUValidation(1), Verifying the functionality of the CPU.\nbistCPUUsage(2), Verifying the CPU usage.')
cpuTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 1, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTestResult.setStatus('current')
if mibBuilder.loadTexts: cpuTestResult.setDescription('The result of the current CPU test.')
ramTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1), )
if mibBuilder.loadTexts: ramTestTable.setStatus('current')
if mibBuilder.loadTexts: ramTestTable.setDescription('Defines the RAM test Table for verification, via SNMP, of the functionality of\nthe OS device RAM')
ramTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "ramTestType"))
if mibBuilder.loadTexts: ramTestEntry.setStatus('current')
if mibBuilder.loadTexts: ramTestEntry.setDescription('ramTestEntry')
ramTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bistRAMValidation", 1), ("bistRAMUsage", 2))))
if mibBuilder.loadTexts: ramTestType.setStatus('current')
if mibBuilder.loadTexts: ramTestType.setDescription('RAM test type:\nbistRAMValidation(1), Verifying the RAM functionality.\nbistRAMUsage(2), Verifying the RAM usage.')
ramTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 2, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ramTestResult.setStatus('current')
if mibBuilder.loadTexts: ramTestResult.setDescription('The result of the current CPU test.')
uartExistTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1), )
if mibBuilder.loadTexts: uartExistTestTable.setStatus('current')
if mibBuilder.loadTexts: uartExistTestTable.setDescription('Defines the test Table for verification, via SNMP, of the existence of UARTs in\nthe OS device')
uartExistTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "uartIndex"))
if mibBuilder.loadTexts: uartExistTestEntry.setStatus('current')
if mibBuilder.loadTexts: uartExistTestEntry.setDescription('uartExistTestEntry')
uartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: uartIndex.setStatus('current')
if mibBuilder.loadTexts: uartIndex.setDescription('The UART index e.g. 1,2 .. NUM of UARTs in the device')
uartExistTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 3, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uartExistTestResult.setStatus('current')
if mibBuilder.loadTexts: uartExistTestResult.setDescription('The result of the current UART test.')
bistCrossbarExistence = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 4, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistCrossbarExistence.setStatus('current')
if mibBuilder.loadTexts: bistCrossbarExistence.setDescription('Verifying Crossbar Existence.')
nvramTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1), )
if mibBuilder.loadTexts: nvramTestTable.setStatus('current')
if mibBuilder.loadTexts: nvramTestTable.setDescription('Defines the NVRAM test Table for verification, via SNMP, of the functionality of\nthe OS device NVRAM content')
nvramTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "nvramTestType"))
if mibBuilder.loadTexts: nvramTestEntry.setStatus('current')
if mibBuilder.loadTexts: nvramTestEntry.setDescription('nvramTestEntry')
nvramTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bistBootLoaderValidation", 1), ("bistApplicationValidation", 2), ("bistStartupConfigValidation", 3), ("bistScriptFileSystemValidation", 4), ("bistJavaImageValidation", 5), ("bistPROMValidation", 6))))
if mibBuilder.loadTexts: nvramTestType.setStatus('current')
if mibBuilder.loadTexts: nvramTestType.setDescription('RAM test type:\nbistRAMValidation(1), Verifying the Boot Loader Image.\nbistApplicationValidation(2), Verifying the Application Image.\nbistStartupConfigValidation(3), Verifying the Startup Configuration File.\nbistScriptFileSystemValidation(4), Verifying the Script File System.\nbistJavaImageValidation(5), Verifying the Java Image.\nbistPROMValidation(6), Verifying the PROM.')
nvramTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 5, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramTestResult.setStatus('current')
if mibBuilder.loadTexts: nvramTestResult.setDescription('The result of the current NVRAM test.')
powerSupplyTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1), )
if mibBuilder.loadTexts: powerSupplyTestTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTestTable.setDescription('Defines the test Table for verification, via SNMP, of the status of the power supplies\nin the OS device. Each power supply installed has a row index, determined by its\nphysical position.')
powerSupplyTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTestEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTestEntry.setDescription('powerSupplyTestEntry')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('The powerSupplyIndex index e.g. 1,2 .. number of the power supply in the device')
powerSupplyTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 6, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyTestResult.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTestResult.setDescription('Verifying the operation of the Power Supply.')
onboardPowerTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1), )
if mibBuilder.loadTexts: onboardPowerTestTable.setStatus('current')
if mibBuilder.loadTexts: onboardPowerTestTable.setDescription('Defines the test Table for verification, via SNMP, of the\nfunctionality of the OS device onboard power')
onboardPowerTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "onboardPowerTestType"))
if mibBuilder.loadTexts: onboardPowerTestEntry.setStatus('current')
if mibBuilder.loadTexts: onboardPowerTestEntry.setDescription('onboardPowerEntry')
onboardPowerTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bistOnboardPowerPHY", 1), ("bistOnboardPowerCPU", 2), ("bistOnboardPowerOC", 3), ("bistOnboardPower3-2V", 4), ("bistOnboardPower2-5V", 5), ("bistOnboardPower1-8V", 6), ("bistOnboardPower1-5V", 7), ("bistOnboardPower1-25V", 8))))
if mibBuilder.loadTexts: onboardPowerTestType.setStatus('current')
if mibBuilder.loadTexts: onboardPowerTestType.setDescription('Onboard power test type:\nbistOnboardPowerPHY(1), Verifying Onboard Power PHY.\nbistOnboardPowerCPU(2), Verifying Onboard Power CPU.\nbistOnboardPowerOC(3), Verifying Onboard Power OC.\nbistOnboardPower3-2V(4), Verifying Onboard Power 3.2V.\nbistOnboardPower2-5V(5), Verifying Onboard Power 2.5V.\nbistOnboardPower1-8V(6), Verifying Onboard Power 1.8V.\nbistOnboardPower1-5V(7), Verifying Onboard Power 1.5V.\nbistOnboardPower1-25V(8) Verifying Onboard Power 1.25V.')
onboardPowerTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 7, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onboardPowerTestResult.setStatus('current')
if mibBuilder.loadTexts: onboardPowerTestResult.setDescription('The result of the current onboard power test.')
fanTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1), )
if mibBuilder.loadTexts: fanTestTable.setStatus('current')
if mibBuilder.loadTexts: fanTestTable.setDescription('Defines the test Table for verification, via SNMP, of the status of the fans\nin the OS device. Each fan installed has a row index, determined by its physical\nposition.')
fanTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1), ).setIndexNames((0, "PRVT-BIST-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanTestEntry.setStatus('current')
if mibBuilder.loadTexts: fanTestEntry.setDescription('fanTestEntry')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: fanIndex.setStatus('current')
if mibBuilder.loadTexts: fanIndex.setDescription('The fan index e.g. 1,2 .. number of the fan in the device')
fanTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 8, 1, 1, 2), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanTestResult.setStatus('current')
if mibBuilder.loadTexts: fanTestResult.setDescription('Verifying the operation of the fan.')
bistTemperatureTest = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 9, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistTemperatureTest.setStatus('current')
if mibBuilder.loadTexts: bistTemperatureTest.setDescription('Verifying the Temperature.')
bistUPSTest = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 10, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bistUPSTest.setStatus('current')
if mibBuilder.loadTexts: bistUPSTest.setDescription('Verifying UPS.')
portsTestTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1), )
if mibBuilder.loadTexts: portsTestTable.setStatus('current')
if mibBuilder.loadTexts: portsTestTable.setDescription('Defines the ports test Table for verification, via SNMP, of the functionality of\nall LAN-ports (to be performed with local loop-back)')
portsTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "reportsL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "reportsL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "reportsL2IfacePort"))
if mibBuilder.loadTexts: portsTestEntry.setStatus('current')
if mibBuilder.loadTexts: portsTestEntry.setDescription('Defines the ports test entry for verification, via SNMP, of the functionality of\na LAN-port (to be performed with local loop-back)')
portTest = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 108, 1, 3, 11, 1, 1, 1), TestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTest.setStatus('current')
if mibBuilder.loadTexts: portTest.setDescription('Verifying the functionality of a LAN-port (to be performed with local loop-back).')
mibBuilder.exportSymbols("PRVT-BIST-MIB", prvtBISTNotifications=prvtBISTNotifications, prvtBISTObjects=prvtBISTObjects, ramTestTable=ramTestTable, ramTestResult=ramTestResult, prvtBISTMib=prvtBISTMib, bistSelfTestExecute=bistSelfTestExecute, bistNVRAM=bistNVRAM, bistCrossbarExistence=bistCrossbarExistence, bistUART=bistUART, bistTemperature=bistTemperature, uartExistTestEntry=uartExistTestEntry, bistResult=bistResult, uartExistTestTable=uartExistTestTable, nvramTestType=nvramTestType, uartIndex=uartIndex, onboardPowerTestEntry=onboardPowerTestEntry, bistCPU=bistCPU, fanTestEntry=fanTestEntry, bistSelfTestExecuteStatus=bistSelfTestExecuteStatus, ramTestEntry=ramTestEntry, bistOnboardPower=bistOnboardPower, portsTestTable=portsTestTable, fanTestTable=fanTestTable, bistConfig=bistConfig, bistTemperatureTest=bistTemperatureTest, bistRAM=bistRAM, bistPorts=bistPorts, onboardPowerTestResult=onboardPowerTestResult, uartExistTestResult=uartExistTestResult, nvramTestTable=nvramTestTable, bistFan=bistFan, PYSNMP_MODULE_ID=prvtBISTMib, powerSupplyTestTable=powerSupplyTestTable, TestResult=TestResult, cpuTestType=cpuTestType, powerSupplyIndex=powerSupplyIndex, bistUPS=bistUPS, nvramTestResult=nvramTestResult, bistUPSTest=bistUPSTest, portTest=portTest, cpuTestResult=cpuTestResult, onboardPowerTestTable=onboardPowerTestTable, portsTestEntry=portsTestEntry, bistStatus=bistStatus, fanTestResult=fanTestResult, powerSupplyTestEntry=powerSupplyTestEntry, cPUTestTable=cPUTestTable, cPUTestEntry=cPUTestEntry, bistSwitchCore=bistSwitchCore, ramTestType=ramTestType, nvramTestEntry=nvramTestEntry, prvtBISTConformance=prvtBISTConformance, onboardPowerTestType=onboardPowerTestType, fanIndex=fanIndex, powerSupplyTestResult=powerSupplyTestResult, bistPowerSupply=bistPowerSupply)
