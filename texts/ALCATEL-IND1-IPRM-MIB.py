#
# PySNMP MIB module ALCATEL-IND1-IPRM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-IPRM-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 00:33:45 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Iprm, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Iprm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibIdentifier, ModuleIdentity, Unsigned32, Counter64, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Integer32, Counter32, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter64", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Integer32", "Counter32", "Gauge32", "TimeTicks")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1IPRMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1))
alcatelIND1IPRMMIB.setRevisions(('2010-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPRMMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPRMMIB.setLastUpdated('201212010000Z')
if mibBuilder.loadTexts: alcatelIND1IPRMMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPRMMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPRMMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for\n             the configuration of IPRM global configuration parameters.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2010 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPRMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1))
alaIprmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1))
class AlaIprmAdminStatus(TextualConvention, Integer32):
    description = ' Admin status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class AlaIprmStaticRouteTypes(TextualConvention, Integer32):
    description = 'A mechanism for distinguishing the type of static route'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("regular", 1), ("recursive", 2), ("bfdEnabled", 3), ("interface", 4))

class AlaMplsL3VpnRouteType(TextualConvention, Integer32):
    reference = '[RFC4364]'
    description = 'Used to define the type of a route target usage.\n         Route targets can be specified to be imported,\n         exported, or both. For a complete definition of a\n         route target, see [RFC4364].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("import", 1), ("export", 2), ("both", 3))

class AlaIprmRtPrefType(TextualConvention, Integer32):
    description = 'Used to define the various types of routes along with their\n         route preference values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("local", 1), ("static", 2), ("ospf", 3), ("rip", 4), ("bgpExternal", 5), ("bgpInternal", 6), ("isisl1", 7), ("isisl2", 8), ("import", 9))

alaIprmRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaIprmRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTable.setDescription("IPRM's Routing table.")
alaIprmRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRouteDest"), (0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRouteMask"), (0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRouteTos"), (0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRouteNextHop"))
if mibBuilder.loadTexts: alaIprmRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteEntry.setDescription('A particular route to  a  particular  destination')
alaIprmRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIprmRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteDest.setDescription('The destination IP address of this route.')
alaIprmRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIprmRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteMask.setDescription('The mask of this route')
alaIprmRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: alaIprmRouteTos.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTos.setDescription('The TOS for this route')
alaIprmRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: alaIprmRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteNextHop.setDescription('The Gateway for this route')
alaIprmRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 5), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmRouteProto.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteProto.setDescription('The protocol that this route was learned from')
alaIprmRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteMetric.setDescription('The metric for this route')
alaIprmRoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmRoutePriority.setStatus('current')
if mibBuilder.loadTexts: alaIprmRoutePriority.setDescription('The priority for this route')
alaIprmStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaIprmStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteTable.setDescription("IPRM's Static Route table.")
alaIprmStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteDest"), (0, "ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteMask"), (0, "ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteNextHop"))
if mibBuilder.loadTexts: alaIprmStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteEntry.setDescription('A route entered by the user')
alaIprmStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIprmStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteDest.setDescription('The destination IP address of this route.')
alaIprmStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIprmStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteMask.setDescription('The mask of this route')
alaIprmStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: alaIprmStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteNextHop.setDescription('The Gateway for this route')
alaIprmStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteMetric.setDescription('The metric for this route')
alaIprmStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteStatus.setDescription('The status of this entry.  Enabling causes a new\n                static route to be created, disabled causes that\n                static route to be deleted.')
alaIprmStaticRouteBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 6), AlaIprmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteBfdStatus.setDescription('For enabling or disabling the BFD status on this static route.')
alaIprmStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 7), AlaIprmStaticRouteTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteType.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteType.setDescription('Type of static route.')
alaIprmStaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteTag.setDescription('Tag associated with static route.')
alaIprmStaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmStaticRouteName.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticRouteName.setDescription('A comment associated with the static route.')
alaIprmStaticAllBfd = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 3), AlaIprmAdminStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmStaticAllBfd.setStatus('current')
if mibBuilder.loadTexts: alaIprmStaticAllBfd.setDescription('For attempting to enable/disable the BFD state on all static routes.')
alaIprmPrimaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmPrimaryAddress.setStatus('current')
if mibBuilder.loadTexts: alaIprmPrimaryAddress.setDescription('Defines the Primary IP Address of this Router.')
alaIprmRouterId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmRouterId.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouterId.setDescription('Defines the Router-id for this Router.')
alaIprmRouteDistinguisher = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteDistinguisher.setDescription('Associates a route distinguisher to a VRF. Syntax for a route distinguisher and route target\n         as defined in [RFC4364].')
alaIprmRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaIprmRouteTargetTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTargetTable.setDescription('This table specifies per-VRF route target association.\n         Each entry identifies a connectivity policy supported\n         as part of a VPN.')
alaIprmRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRouteTarget"))
if mibBuilder.loadTexts: alaIprmRouteTargetEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTargetEntry.setDescription('An entry in this table is created by an LSR for\n         each route target configured for a VRF supporting\n         a MPLS L3VPN instance. See [RFC4364] for a\n         complete definition of a route target.')
alaIprmRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 32)))
if mibBuilder.loadTexts: alaIprmRouteTarget.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTarget.setDescription('A Virtual Router Route Target. Syntax for a route distinguisher and route target\n         as defined in [RFC4364].')
alaIprmRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 7, 1, 2), AlaMplsL3VpnRouteType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmRouteTargetType.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTargetType.setDescription('The route target distribution type.')
alaIprmRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmRouteTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmRouteTargetRowStatus.setDescription('This variable is used to create, modify, and/or\n         delete a row in this table.')
alaIprmRtPrefTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: alaIprmRtPrefTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmRtPrefTable.setDescription('This table specifies the route preference values for\n         various types of routes.')
alaIprmRtPrefTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmRtPrefEntryType"))
if mibBuilder.loadTexts: alaIprmRtPrefTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmRtPrefTableEntry.setDescription('An entry is in this table for each route preference type.')
alaIprmRtPrefEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 8, 1, 1), AlaIprmRtPrefType())
if mibBuilder.loadTexts: alaIprmRtPrefEntryType.setStatus('current')
if mibBuilder.loadTexts: alaIprmRtPrefEntryType.setDescription('The type of route (associated with a route preference value)')
alaIprmRtPrefEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmRtPrefEntryValue.setStatus('current')
if mibBuilder.loadTexts: alaIprmRtPrefEntryValue.setDescription('The route preference value used for this type of route.')
alaIprmExportRouteMap = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmExportRouteMap.setDescription('A route-map index representing the route-map used to filter\n         routes exported to the Global Route Table. A value of -1 indicates \n         no routes should be exported. A value of 0 indicates all routes \n         should be exported. Otherwise, the value is the route-map index to \n         use for filtering.')
alaIprmImportVrfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 10), )
if mibBuilder.loadTexts: alaIprmImportVrfTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportVrfTable.setDescription('This table specifies VRFs to import routes from.')
alaIprmImportVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmImportVrfName"))
if mibBuilder.loadTexts: alaIprmImportVrfEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportVrfEntry.setDescription('An entry in this table is created for each VRF\n         to import routes from.')
alaIprmImportVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: alaIprmImportVrfName.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportVrfName.setDescription('The name of the VRF that routes should be imported from. An\n         empty string indicates the default VRF.')
alaIprmImportVrfRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmImportVrfRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportVrfRouteMap.setDescription('A route-map index representing the route-map used to filter\n         imported routes.')
alaIprmImportVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmImportVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportVrfRowStatus.setDescription('This variable is used to create, modify, and/or\n         delete a row in this table.')
alaIprmImportIsidTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 11), )
if mibBuilder.loadTexts: alaIprmImportIsidTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportIsidTable.setDescription('This table specifies ISIS L3VPN ISIDs to import routes from.')
alaIprmImportIsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRM-MIB", "alaIprmImportIsid"))
if mibBuilder.loadTexts: alaIprmImportIsidEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportIsidEntry.setDescription('An entry in this table is created for each ISID\n         to import routes from.')
alaIprmImportIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIprmImportIsid.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportIsid.setDescription('The ISIS SPB L3VPN ISID that routes should be imported from.')
alaIprmImportIsidRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmImportIsidRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportIsidRouteMap.setDescription('A route-map index representing the route-map used to filter\n         imported routes.')
alaIprmImportIsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmImportIsidRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmImportIsidRowStatus.setDescription('This variable is used to create, modify, and/or\n         delete a row in this table.')
alaIprmExportToAllVrfsRouteMap = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmExportToAllVrfsRouteMap.setStatus('current')
if mibBuilder.loadTexts: alaIprmExportToAllVrfsRouteMap.setDescription("Used to export routes to all other VRFs that don't already have\n         an entry in the Import Vrf Table. The object is a route-map index \n         representing the route-map used to filter the exported routes.\n         A value of -1 indicates no routes should be exported. A value of 0 \n         indicates all routes should be exported. Otherwise, the value is \n         the route-map index to use for filtering.")
alcatelIND1IPRMMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 2))
alcatelIND1IPRMMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 2, 1))
alcatelIND1IPRMMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 2, 2))
alaIprmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPRM-MIB", "alaIprmConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmCompliance = alaIprmCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIprmCompliance.setDescription('The compliance statement for routers running IPRM\n            and implementing the ALCATEL-IND1-IPRM MIB.')
alaIprmConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPRM-MIB", "alaIprmRouteProto"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRouteMetric"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRoutePriority"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteMetric"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteStatus"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteBfdStatus"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteType"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteTag"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticRouteName"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmStaticAllBfd"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmPrimaryAddress"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRouterId"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRouteDistinguisher"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRouteTargetType"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRouteTargetRowStatus"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmRtPrefEntryValue"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmExportRouteMap"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmImportVrfRouteMap"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmImportVrfRowStatus"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmImportIsidRouteMap"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmImportIsidRowStatus"), ("ALCATEL-IND1-IPRM-MIB", "alaIprmExportToAllVrfsRouteMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmConfigMIBGroup = alaIprmConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaIprmConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of the IPRM Module.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPRM-MIB", alaIprmImportVrfRowStatus=alaIprmImportVrfRowStatus, alaIprmStaticRouteType=alaIprmStaticRouteType, alaIprmStaticRouteNextHop=alaIprmStaticRouteNextHop, alaIprmStaticRouteMask=alaIprmStaticRouteMask, alaIprmRtPrefTable=alaIprmRtPrefTable, alaIprmConfigMIBGroup=alaIprmConfigMIBGroup, alaIprmImportIsid=alaIprmImportIsid, alaIprmRouteMask=alaIprmRouteMask, alcatelIND1IPRMMIBObjects=alcatelIND1IPRMMIBObjects, alaIprmStaticRouteDest=alaIprmStaticRouteDest, alaIprmImportIsidEntry=alaIprmImportIsidEntry, alaIprmImportVrfTable=alaIprmImportVrfTable, alaIprmImportIsidRouteMap=alaIprmImportIsidRouteMap, alaIprmCompliance=alaIprmCompliance, alaIprmExportRouteMap=alaIprmExportRouteMap, alaIprmRtPrefEntryValue=alaIprmRtPrefEntryValue, alaIprmRoutePriority=alaIprmRoutePriority, alaIprmPrimaryAddress=alaIprmPrimaryAddress, alaIprmRouteTos=alaIprmRouteTos, alaIprmRouteDest=alaIprmRouteDest, alaIprmImportVrfRouteMap=alaIprmImportVrfRouteMap, alaIprmStaticRouteBfdStatus=alaIprmStaticRouteBfdStatus, alaIprmRouteTable=alaIprmRouteTable, alaIprmImportIsidTable=alaIprmImportIsidTable, alaIprmConfig=alaIprmConfig, alaIprmExportToAllVrfsRouteMap=alaIprmExportToAllVrfsRouteMap, alaIprmRouterId=alaIprmRouterId, alaIprmRouteEntry=alaIprmRouteEntry, alaIprmRtPrefTableEntry=alaIprmRtPrefTableEntry, alcatelIND1IPRMMIBConformance=alcatelIND1IPRMMIBConformance, AlaIprmRtPrefType=AlaIprmRtPrefType, alaIprmRouteTarget=alaIprmRouteTarget, alaIprmStaticRouteEntry=alaIprmStaticRouteEntry, alaIprmStaticRouteName=alaIprmStaticRouteName, alaIprmRouteTargetRowStatus=alaIprmRouteTargetRowStatus, AlaIprmStaticRouteTypes=AlaIprmStaticRouteTypes, alaIprmStaticAllBfd=alaIprmStaticAllBfd, alaIprmRouteTargetEntry=alaIprmRouteTargetEntry, alaIprmImportVrfEntry=alaIprmImportVrfEntry, alaIprmStaticRouteMetric=alaIprmStaticRouteMetric, alaIprmRouteDistinguisher=alaIprmRouteDistinguisher, AlaIprmAdminStatus=AlaIprmAdminStatus, alaIprmStaticRouteTag=alaIprmStaticRouteTag, alaIprmStaticRouteTable=alaIprmStaticRouteTable, alaIprmRtPrefEntryType=alaIprmRtPrefEntryType, alaIprmImportVrfName=alaIprmImportVrfName, alaIprmStaticRouteStatus=alaIprmStaticRouteStatus, alaIprmRouteMetric=alaIprmRouteMetric, alcatelIND1IPRMMIBGroups=alcatelIND1IPRMMIBGroups, alcatelIND1IPRMMIB=alcatelIND1IPRMMIB, alcatelIND1IPRMMIBCompliances=alcatelIND1IPRMMIBCompliances, AlaMplsL3VpnRouteType=AlaMplsL3VpnRouteType, PYSNMP_MODULE_ID=alcatelIND1IPRMMIB, alaIprmRouteNextHop=alaIprmRouteNextHop, alaIprmImportIsidRowStatus=alaIprmImportIsidRowStatus, alaIprmRouteTargetTable=alaIprmRouteTargetTable, alaIprmRouteProto=alaIprmRouteProto, alaIprmRouteTargetType=alaIprmRouteTargetType)
