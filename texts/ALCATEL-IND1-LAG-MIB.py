#
# PySNMP MIB module ALCATEL-IND1-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-LAG-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1LnkAgg, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1LnkAgg")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ChurnState, LacpKey, LacpState = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "ChurnState", "LacpKey", "LacpState")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, IpAddress, NotificationType, ObjectIdentity, Counter64, Counter32, TimeTicks, ModuleIdentity, Integer32, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "Counter64", "Counter32", "TimeTicks", "ModuleIdentity", "Integer32", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1LAGMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1))
alcatelIND1LAGMIB.setRevisions(('2010-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1LAGMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.',))
if mibBuilder.loadTexts: alcatelIND1LAGMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1LAGMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1LAGMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                     version of this document is used with the products in question:\n\n                                Alcatel-Lucent, Enterprise Solutions Division\n                               (Formerly Alcatel Internetworking, Incorporated)\n                                       26801 West Agoura Road\n                                   Agoura Hills, CA  91301-5122\n                                        United States Of America\n\n                     Telephone:              North America  +1 800 995 2696\n                                             Latin America  +1 877 919 9526\n                                             Europe         +31 23 556 0100\n                                             Asia           +65 394 7933\n                                             All Other      +1 818 878 4507\n\n                     Electronic Mail:         support@ind.alcatel.com\n                     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1LAGMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                           The Link Aggregation module for managing  ALCATEL FALCON product\n                           This MIB is an image of the  802.3ad standard.\n                 The aim of this proprietary MIB is to allow the creation of\n         aggregate objects with their size.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2007 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1LAGMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0))
if mibBuilder.loadTexts: alcatelIND1LAGMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LAGMIBNotifications.setDescription('Branch For LAG MIB Subsystem Notifications.')
alcatelIND1LAGMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1))
class LacpType(TextualConvention, Integer32):
    description = 'The object supports or not (Omnichannel) the LACP protocol .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("lacpOff", 0), ("lacpOn", 1))

class McLagType(TextualConvention, Integer32):
    description = 'The object supports or not the Multi Chassis Link aggregation  .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("mcLagOff", 0), ("mcLagOn", 1))

alclnkaggAgg = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1))
alclnkaggAggPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2))
alclnkaggTablesLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggTablesLastChanged.setStatus('current')
if mibBuilder.loadTexts: alclnkaggTablesLastChanged.setDescription('This object indicates the time of the\n                        most recent change to the alclnkaggAggTable,\n                        alclnkaggAggPortListTable, or\n                        alclnkaggAggPortTable.')
alclnkaggAggTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alclnkaggAggTable.setReference('IEEE 802.3 Subclause 30.7.1')
if mibBuilder.loadTexts: alclnkaggAggTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggTable.setDescription('A table that contains information about every\n                        Aggregator that is associated with this System.\n                        To create specify alclnkaggAggIndex,alclnkaggAggSize\n                        and alclnkaggAggLacpType. ')
alclnkaggAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggEntry.setDescription('A list of the Aggregator parameters. This is indexed\n                        by the ifIndex of the Aggregator.')
alclnkaggAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alclnkaggAggIndex.setReference('IEEE 802.3 Subclause 30.7.1.1.1')
if mibBuilder.loadTexts: alclnkaggAggIndex.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIndex.setDescription('The unique identifier allocated to this Aggregator by the local\n                        System.\n                        This attribute identifies an Aggregator instance among the subordinate\n                        managed objects of the containing object. This value is read-only.')
alclnkaggAggMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggMACAddress.setReference('IEEE 802.3 Subclause 30.7.1.1.9')
if mibBuilder.loadTexts: alclnkaggAggMACAddress.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggMACAddress.setDescription('A 6-octet read-only value carrying the individual\n                        MAC address assigned to the Aggregator.')
alclnkaggAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggActorSystemPriority.setReference('IEEE 802.3 Subclause 30.7.1.1.5')
if mibBuilder.loadTexts: alclnkaggAggActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggActorSystemPriority.setDescription("A 2-octet read-write value indicating the priority value\n                        associated with the Actor's System ID.")
alclnkaggAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggActorSystemID.setReference('IEEE 802.3 Subclause 30.7.1.1.4')
if mibBuilder.loadTexts: alclnkaggAggActorSystemID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggActorSystemID.setDescription("A 6-octet read-write MAC address value used as a unique\n                        identifier for the System that contains this Aggregator.\n                        NOTE-From the perspective of the Link Aggregation mechanisms\n                        described in Clause , only a single combination of\n                        Actor's System ID and System Priority are considered, and no\n                        distinction is made between the values of these parameters\n                        for an Aggregator and the port(s) that are associated with\n                        it; i.e., the protocol is described in terms of the operation\n                        of aggregation within a single System. However, the managed.\n                        objects provided for the Aggregator and the port both allow\n                        management of these parameters. The result of this is to\n                        permit a single piece of equipment to be configured by\n                        management to contain more than one System from the point of\n                        view of the operation of Link Aggregation. This may be of\n                        particular use in the configuration of equipment that has\n                        limited aggregation capability (see ).")
alclnkaggAggPartnerAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 5), LacpKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPartnerAdminKey.setReference(' specific to ALCATEL ')
if mibBuilder.loadTexts: alclnkaggAggPartnerAdminKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPartnerAdminKey.setDescription("The current Administrative value of the Key accepted for the\n                        Aggregator's current protocol Partner. Optional this is\n                        a 16-bit read-write value. If the aggregation is manually\n                        configured, this Key value will be a value assigned by the\n                        local System. The administrative Key value may differ from\n                                   the operational ")
alclnkaggAggActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 6), LacpKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggActorAdminKey.setReference('IEEE 802.3 Subclause 30.7.1.1.7')
if mibBuilder.loadTexts: alclnkaggAggActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggActorAdminKey.setDescription('The current administrative value of the Key for the Aggregator.\n                        The administrative Key value may differ from the operational\n                        Key value for the reasons discussed in . This is a 16-bit,\n                        read-write value. The meaning of particular Key values\n                        is of local significance.')
alclnkaggAggActorOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 7), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggActorOperKey.setReference('IEEE 802.3 Subclause 30.7.1.1.8')
if mibBuilder.loadTexts: alclnkaggAggActorOperKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggActorOperKey.setDescription('The current operational value of the Key for the Aggregator.\n                        The administrative Key value may differ from the operational\n                        Key value for the reasons discussed in .\n                        This is a 16-bit read-only value. The meaning of particular Key\n                        values is of local significance.')
alclnkaggAggPartnerSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemID.setReference('IEEE 802.3 Subclause 30.7.1.1.10')
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemID.setDescription('A 6-octet read-write MAC address value consisting\n                        of the unique identifier for the current protocol Partner of\n                        this Aggregator. A value of zero indicates that there is no\n                        known Partner. If the aggregation is manually configured, this\n                        System ID value will be a value assigned by the local System.')
alclnkaggAggPartnerSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemPriority.setReference('IEEE 802.3 Subclause 30.7.1.1.11')
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPartnerSystemPriority.setDescription("A 2-octet read-only value that indicates the priority\n                        value associated with the Partner's System ID. If the\n                        aggregation is manually configured, this System Priority value\n                        will be a value assigned by the local System.")
alclnkaggAggPartnerOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 10), LacpKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPartnerOperKey.setReference('IEEE 802.3 Subclause 30.7.1.1.12')
if mibBuilder.loadTexts: alclnkaggAggPartnerOperKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPartnerOperKey.setDescription("The current operational value of the Key for the\n                        Aggregator's current protocol Partner. This is\n                        a 16-bit read- write value. If the aggregation is manually\n                        configured, this Key value will be a value assigned by the\n                        local System.")
alclnkaggAggSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggSize.setReference('specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggSize.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggSize.setDescription('Maximum number of links that could be attached to this\n                         aggregator, This nominator is mandatory and is a required\n                         field in order to create a row in this table')
alclnkaggAggNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggNumber.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggNumber.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggNumber.setDescription('Aggreagtor number reference the aggregate dedicated from the\n                         ifindex at the creation')
alclnkaggAggDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggDescr.setReference(' IEEE 802.3 Subclause 30.7.1.1.2')
if mibBuilder.loadTexts: alclnkaggAggDescr.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggDescr.setDescription('Description is a human readable string which describes of\n             the type of aggregator object OMNICHANNEL / LACP  etc ')
alclnkaggAggName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggName.setReference(' IEEE 802.3 Subclause 30.7.1.1.3')
if mibBuilder.loadTexts: alclnkaggAggName.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggName.setDescription('Name of the aggregator is human readable string manually given by\n                                      the operator')
alclnkaggAggLacpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 15), LacpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggLacpType.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggLacpType.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggLacpType.setDescription('Aggreagtor set with LACP protocol or not (case of Omnichannel)\n                         mandatory at the creation of the aggregator, cannot be modified\n                         later ')
alclnkaggAggAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggAdminState.setReference(' IEEE 802.3 Subclause 30.7.1.1.13')
if mibBuilder.loadTexts: alclnkaggAggAdminState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggAdminState.setDescription('status assigned by the admnistrator. The activation of the aggregator\n                                     is managed by this nominator')
alclnkaggAggOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("logicPortCreatFailed", 3), ("qReservationFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggOperState.setReference(' IEEE 802.3 Subclause 30.7.1.1.14')
if mibBuilder.loadTexts: alclnkaggAggOperState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggOperState.setDescription('Operational status of the aggregator with proprietary values\n                         operational state from iftable corresponds to UP state ')
alclnkaggAggNbrSelectedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggNbrSelectedPorts.setReference('Specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggNbrSelectedPorts.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggNbrSelectedPorts.setDescription('The number of ports selected at the momemt .')
alclnkaggAggNbrAttachedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggNbrAttachedPorts.setReference('Specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggNbrAttachedPorts.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggNbrAttachedPorts.setDescription('The number of ports attached at the momemt .')
alclnkaggAggPrimaryPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 20), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortIndex.setReference('Specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortIndex.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortIndex.setDescription('the ifindex of the primary port in the aggregator used to send\n                         BPDUs and flooding frames Zeo indicates no primary port is\n                         available .')
alclnkaggAggPrimaryPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortPosition.setReference('Specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortPosition.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPrimaryPortPosition.setDescription('the port index number in the aggregator used to send\n                         BPDUs and flooding frames .')
alclnkaggAggRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggRowStatus.setReference(' specific to ALCATEL ')
if mibBuilder.loadTexts: alclnkaggAggRowStatus.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggRowStatus.setDescription('This object is the RowStatus (locking flag) for creating or\n                        deleting aggregator objects. alclnkaggAggSize, alclnkaggAggLacpType\n                        and  must be supplied in the request to create a row, it is a\n                        required field.')
alclnkaggAggMcLagType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 23), McLagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggMcLagType.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggMcLagType.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggMcLagType.setDescription('Aggregator set with MultiChassis  mode or not\n                         mandatory at the creation of the aggregator, cannot be modified\n                         later ')
alclnkaggAggPortSelectionHash = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceMac", 1), ("destinationMac", 2), ("sourceDestinationMac", 3), ("sourceIp", 4), ("destinationIp", 5), ("sourceDestinationIp", 6), ("tunnelProtocol", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortSelectionHash.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortSelectionHash.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortSelectionHash.setDescription('Port Selection Criteria used to hash one port of the aggregate\n                         for a given traffic flow ')
alclnkaggAggWTRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggWTRTimer.setReference('specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggWTRTimer.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggWTRTimer.setDescription('This sets the WTR  timer value in minutes for an aggregate. The default value is 0 minute.\n                         The Default means the WTR is Disabled.\n                         When an link comes up, \n                         If there is no WTR enabled for this linkagg, bring up the link.\n                         If there is a WTR configured for this linkagg,\n                         1.if there are no other links attached to the same linkagg, bypass the WTR and bring up the link immediately.\n                         2. If there are links attached to the same linkagg, start the WTR when the WTR expires,bring up the link.')
alclnkaggAggPortListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alclnkaggAggPortListTable.setReference('IEEE 802.3 Subclause 30.7.1.1.31')
if mibBuilder.loadTexts: alclnkaggAggPortListTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortListTable.setDescription('A table that contains a list of all the ports\n                        associated with each Aggregator.')
alclnkaggAggPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggPortListEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortListEntry.setDescription('A list of the ports associated with a given Aggregator.\n                        This is indexed by the ifIndex of the Aggregator.')
alclnkaggAggPortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 2, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortListPorts.setReference('IEEE 802.3 Subclause 30.7.1.1.31')
if mibBuilder.loadTexts: alclnkaggAggPortListPorts.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortListPorts.setDescription('The complete set of ports currently associated with\n                        this Aggregator. Each bit set in this list represents\n                        an Actor Port member of this Link Aggregation.')
alclnkaggAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alclnkaggAggPortTable.setReference('IEEE 802.3 Subclause 30.7.2')
if mibBuilder.loadTexts: alclnkaggAggPortTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortTable.setDescription('A table that contains Link Aggregation Control\n                        configuration information about every\n                        Aggregation Port associated with this device.\n                        A row appears in this table for each physical port.')
alclnkaggAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortIndex"))
if mibBuilder.loadTexts: alclnkaggAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortEntry.setDescription('A list of Link Aggregation Control configuration\n                        parameters for each Aggregation Port on this device.')
alclnkaggAggPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alclnkaggAggPortIndex.setReference('IEEE 802.3 Subclause 30.7.2.1.1')
if mibBuilder.loadTexts: alclnkaggAggPortIndex.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortIndex.setDescription('The ifIndex of the port')
alclnkaggAggPortActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.2')
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemPriority.setDescription("A 2-octet read-write value used to define the priority\n                        value associated with the Actor's System ID.")
alclnkaggAggPortActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.3')
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorSystemID.setDescription('A 6-octet read-only MAC address value that defines\n                        the value of the System ID for the System that contains this\n                        Aggregation Port.')
alclnkaggAggPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 4), LacpKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminKey.setReference('IEEE 802.3 Subclause 30.7.2.1.4')
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminKey.setDescription('The current administrative value of the Key for the\n                        Aggregation Port. This is a 16-bit read-write value.\n                        The meaning of particular Key values is of local significance.')
alclnkaggAggPortActorOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 5), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortActorOperKey.setReference('IEEE 802.3 Subclause 30.7.2.1.5')
if mibBuilder.loadTexts: alclnkaggAggPortActorOperKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorOperKey.setDescription('The current operational value of the Key for the\n                        Aggregation Port. This is a 16-bit read-only value.\n                        The meaning of particular Key values is of local significance.')
alclnkaggAggPortPartnerAdminSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.6')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemPriority.setDescription("A 2-octet read-write value used to define the administrative\n                        value of priority associated with the Partner's System ID. The\n                        assigned value is used, along with the value of\n                        aAggPortPartnerAdminSystemID, aAggPortPartnerAdminKey,\n                        aAggPortPartnerAdminPort, and aAggPortPartnerAdminPortPriority,\n                        in order to achieve manually configured aggregation.")
alclnkaggAggPortPartnerOperSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.7')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemPriority.setDescription("A 2-octet read-only value indicating the operational value\n                        of priority associated with the Partner's System ID. The\n                        value of this attribute may contain the manually configured value\n                        carried in aAggPortPartnerAdminSystemPriority\n                        if there is no protocol Partner.")
alclnkaggAggPortPartnerAdminSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.8')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminSystemID.setDescription("A 6-octet read-write MACAddress value representing\n                        the administrative value of the Aggregation Port's protocol\n                        Partner's System ID. The assigned value is used, along with\n                        the value of aAggPortPartnerAdminSystemPriority,\n                        aAggPortPartnerAdminKey, aAggPortPartnerAdminPort,\n                        and aAggPortPartnerAdminPortPriority, in order to\n                        achieve manually configured aggregation.")
alclnkaggAggPortPartnerOperSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.9')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperSystemID.setDescription("A 6-octet read-only MACAddress value representing\n                        the current value of the Aggregation Port's protocol Partner's\n                        System ID. A value of zero indicates that there is no known\n                        protocol Partner. The value of this attribute may contain the\n                        manually configured value carried in\n                        aAggPortPartnerAdminSystemID if there is no protocol Partner.")
alclnkaggAggPortPartnerAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 10), LacpKey()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminKey.setReference('IEEE 802.3 Subclause 30.7.2.1.10')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminKey.setDescription('The current administrative value of the Key for the\n                        protocol Partner. This is a 16-bit read-write value.\n                        The assigned value is used, along with the value of\n                        aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminSystemID,\n                        aAggPortPartnerAdminPort, and aAggPortPartnerAdminPortPriority,\n                        in order to achieve manually configured aggregation.')
alclnkaggAggPortPartnerOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 11), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperKey.setReference('IEEE 802.3 Subclause 30.7.2.1.11')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperKey.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperKey.setDescription('The current operational value of the Key for the\n                        protocol Partner. The value of this attribute may contain\n                        the manually configured value carried in\n                        aAggPortPartnerAdminKey if there is no protocol Partner.\n                        This is a 16-bit read-only value.')
alclnkaggAggPortSelectedAggID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggID.setReference('IEEE 802.3 Subclause 30.7.2.1.12')
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggID.setDescription('The identifier value of the Aggregator that this Aggregation\n                        Port has currently selected. Zero indicates that the Aggregation\n                        Port has not selected an Aggregator, either because it is in the\n                        process of detaching from an Aggregator or because there is no\n                        suitable Aggregator available for it to select. This value is\n                        read-only.')
alclnkaggAggPortAttachedAggID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 13), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortAttachedAggID.setReference('IEEE 802.3 Subclause 30.7.2.1.13')
if mibBuilder.loadTexts: alclnkaggAggPortAttachedAggID.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortAttachedAggID.setDescription('The identifier value of the Aggregator that this Aggregation\n                        Port is currently attached to. Zero indicates that the Aggregation\n                        Port is not currently attached to an Aggregator. This value is\n                        read-only.')
alclnkaggAggPortActorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortActorPort.setReference('IEEE 802.3 Subclause 30.7.2.1.14')
if mibBuilder.loadTexts: alclnkaggAggPortActorPort.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorPort.setDescription('The port number locally assigned to the Aggregation Port.\n                        The port number is communicated in LACPDUs as the\n                        Actor_Port. This value is read-only.')
alclnkaggAggPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortActorPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.15')
if mibBuilder.loadTexts: alclnkaggAggPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port.\n                        This 16-bit value is read-write.')
alclnkaggAggPortPartnerAdminPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPort.setReference('IEEE 802.3 Subclause 30.7.2.1.16')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPort.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPort.setDescription('The current administrative value of the port number\n                        for the protocol Partner. This is a 16-bit read-write value.\n                        The assigned value is used, along with the value of\n                        aAggPortPartnerAdminSystemPriority,\n                        aAggPortPartnerAdminSystemID, aAggPortPartnerAdminKey,\n                        and aAggPortPartnerAdminPortPriority,\n                        in order to achieve manually configured aggregation.')
alclnkaggAggPortPartnerOperPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPort.setReference('IEEE 802.3 Subclause 30.7.2.1.17')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPort.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPort.setDescription("The operational port number assigned to this Aggregation\n                        Port by the Aggregation Port's protocol Partner. The value\n                        of this attribute may contain the manually configured value\n                        carried in aAggPortPartnerAdminPort if there is no protocol\n                        Partner. This 16-bit value is read-only.")
alclnkaggAggPortPartnerAdminPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.18')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPortPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminPortPriority.setDescription('The current administrative value of the port priority\n                        for the protocol Partner. This is a 16-bit read-write value.\n                        The assigned value is used, along with the value of\n                        aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminSystemID,\n                        aAggPortPartnerAdminKey, and aAggPortPartnerAdminPort,\n                        in order to achieve manually configured aggregation.')
alclnkaggAggPortPartnerOperPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.19')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPortPriority.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperPortPriority.setDescription('The priority value assigned to this Aggregation Port\n                        by the Partner. The value of this attribute may contain the\n                        manually configured value carried in\n                        aAggPortPartnerAdminPortPriority if there is no\n                        protocol Partner. This 16-bit value is read-only.')
alclnkaggAggPortActorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 20), LacpState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminState.setReference('IEEE 802.3 Subclause 30.7.2.1.20')
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorAdminState.setDescription('A string of 8 bits, corresponding to the administrative values\n                        of Actor_State () as transmitted by the Actor in LACPDUs.\n                        The first bit corresponds to bit 0 of Actor_State (LACP_Activity),\n                        the second bit corresponds to bit 1 (LACP_Timeout), the third bit\n                        corresponds to bit 2 (Aggregation), the fourth bit corresponds to\n                        bit 3 (Synchronization), the fifth bit corresponds to bit 4\n                        (Collecting), the sixth bit corresponds to bit 5 (Distributing),\n                        the seventh bit corresponds to bit 6 (Defaulted), and the eighth\n                        bit corresponds to bit 7 (Expired). These values allow\n                        administrative control over the values of LACP_Activity,\n                        LACP_Timeout and Aggregation. This attribute value is read-write.')
alclnkaggAggPortActorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 21), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortActorOperState.setReference('IEEE 802.3 Subclause 30.7.2.1.21')
if mibBuilder.loadTexts: alclnkaggAggPortActorOperState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortActorOperState.setDescription('A string of 8 bits, corresponding to the current\n                        operational values of Actor_State as transmitted by the\n                        Actor in LACPDUs. The bit allocations are as defined in\n                        . This attribute value is read-only.')
alclnkaggAggPortPartnerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 22), LacpState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminState.setReference('IEEE 802.3 Subclause 30.7.2.1.22')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerAdminState.setDescription('A string of 8 bits, corresponding to the current administrative\n                        value of Actor_State for the protocol Partner. The bit\n                        allocations are as defined in . This attribute value is\n                        read-write. The assigned value is used in order to achieve\n                        manually configured aggregation.')
alclnkaggAggPortPartnerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 23), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperState.setReference('IEEE 802.3 Subclause 30.7.2.1.23')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPartnerOperState.setDescription('A string of 8 bits, corresponding to the current values of\n                        Actor_State in the most recently received LACPDU transmitted\n                        by the protocol Partner. The bit allocations are as defined in\n                        . In the absence of an active protocol Partner, this\n                        value may reflect the manually configured value\n                        aAggPortPartnerAdminState. This attribute value is read-only.')
alclnkaggAggPortSelectedAggNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggNumber.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggNumber.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortSelectedAggNumber.setDescription('Aggreagtor number to attach a  port at its creation\n                         mandatory and only used for the\n                         Omnichhannel not allowed for LACP\n                         (-1) value displayed when it is not significant')
alclnkaggAggPortGlobalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortGlobalPortNumber.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortGlobalPortNumber.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortGlobalPortNumber.setDescription('Physical reference of the port ')
alclnkaggAggPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortAdminState.setReference(' IEEE 802.3 Subclause 30.7.1.1.13')
if mibBuilder.loadTexts: alclnkaggAggPortAdminState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortAdminState.setDescription('status assigned by the admnistrator. port activation done by iftable\n                         this nominator is equivalent to ifAdminStatus in ifTable  ')
alclnkaggAggPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notAttached", 3), ("notAggregable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortOperState.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortOperState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortOperState.setDescription('Operational status of the port regarding the traffic')
alclnkaggAggPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("created", 1), ("configurable", 2), ("configured", 3), ("selected", 4), ("reserved", 5), ("attached", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortState.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortState.setDescription('aggregation status of the port')
alclnkaggAggPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortLinkState.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortLinkState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortLinkState.setDescription('Operational status of the link')
alclnkaggAggPortPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSignificant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortPrimary.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortPrimary.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortPrimary.setDescription('port primary or not')
alclnkaggAggPortLacpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 31), LacpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortLacpType.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortLacpType.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortLacpType.setDescription('Port set with LACP protocol or not (case of Omnichannel)\n                          mandatory at the creation of the port')
alclnkaggAggPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 32), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alclnkaggAggPortRowStatus.setReference(' specific to ALCATEL ')
if mibBuilder.loadTexts: alclnkaggAggPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortRowStatus.setDescription('This object is the RowStatus (locking flag) for creating or\n                         deleting aggregatable port objects. alclnkaggAggPortActorAdminKey\n                         and alclnkaggAggPortSlotSlice must be supplied\n                         in the request to create a row, it is a required field.')
alclnkaggAggPortMcLagType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 1, 1, 33), McLagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortMcLagType.setReference(' specific to ALCATEL')
if mibBuilder.loadTexts: alclnkaggAggPortMcLagType.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortMcLagType.setDescription('Port set with McLag mode or not  ')
alclnkaggAggPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alclnkaggAggPortStatsTable.setReference('IEEE 802.3 Subclause 30.7.3')
if mibBuilder.loadTexts: alclnkaggAggPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsTable.setDescription('A table that contains Link Aggregation information\n                         about every port that is associated with this device.\n                         A row appears in this table for each physical port.')
alclnkaggAggPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortIndex"))
if mibBuilder.loadTexts: alclnkaggAggPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsEntry.setDescription('A list of Link Aggregation Control Protocol statistics\n                        for each port on this device.')
alclnkaggAggPortStatsLACPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.2')
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsRx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsRx.setDescription('The number of valid LACPDUs received on this\n                        Aggregation Port. This value is read-only.')
alclnkaggAggPortStatsMarkerPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.3')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsRx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsRx.setDescription('The number of valid Marker PDUs received on this\n                        Aggregation Port. This value is read-only.')
alclnkaggAggPortStatsMarkerResponsePDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.4')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsRx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsRx.setDescription('The number of valid Marker Response PDUs received on this\n                         Aggregation Port. This value is read-only.')
alclnkaggAggPortStatsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsUnknownRx.setReference('IEEE 802.3 Subclause 30.7.3.1.5')
if mibBuilder.loadTexts: alclnkaggAggPortStatsUnknownRx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsUnknownRx.setDescription('The number of frames received that either:\n                        - carry the Slow Protocols Ethernet Type value (),\n                        but contain an unknown PDU, or:\n                        - are addressed to the Slow Protocols group MAC\n                        Address (), but do not carry the Slow Protocols Ethernet Type.\n                        This value is read-only.')
alclnkaggAggPortStatsIllegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsIllegalRx.setReference('IEEE 802.3 Subclause 30.7.3.1.6')
if mibBuilder.loadTexts: alclnkaggAggPortStatsIllegalRx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsIllegalRx.setDescription('The number of frames received that carry the Slow\n                        Protocols Ethernet Type value (), but contain a badly formed\n                        PDU or an illegal value of Protocol Subtype ().\n                        This value is read-only.')
alclnkaggAggPortStatsLACPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.7')
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsTx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsLACPDUsTx.setDescription('The number of LACPDUs transmitted on this\n                        Aggregation Port. This value is read-only.')
alclnkaggAggPortStatsMarkerPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.8')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsTx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerPDUsTx.setDescription('The number of Marker PDUs transmitted on this\n                        Aggregation Port. This value is read-only.')
alclnkaggAggPortStatsMarkerResponsePDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.9')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsTx.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsMarkerResponsePDUsTx.setDescription('The number of Marker Response PDUs transmitted\n                         on this Aggregation Port. This value is read-only.')
alclnkaggAggPortDebugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alclnkaggAggPortDebugTable.setReference('IEEE 802.3 Subclause 30.7.4')
if mibBuilder.loadTexts: alclnkaggAggPortDebugTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugTable.setDescription('A table that contains Link Aggregation debug\n                        information about every port that is associated with\n                        this device. A row appears in this table for each\n                        physical port.')
alclnkaggAggPortDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortIndex"))
if mibBuilder.loadTexts: alclnkaggAggPortDebugEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugEntry.setDescription('A list of the debug parameters for a port.')
alclnkaggAggPortDebugRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("current", 1), ("expired", 2), ("defaulted", 3), ("initialize", 4), ("lacpDisabled", 5), ("portDisabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugRxState.setReference('IEEE 802.3 Subclause 30.7.4.1.2')
if mibBuilder.loadTexts: alclnkaggAggPortDebugRxState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugRxState.setDescription("This attribute holds the value 'current' if the Receive\n                        state machine for the Aggregation Port is in the\n                        CURRENT state, 'expired' if the Receive state machine.\n                        is in the EXPIRED state, 'defaulted' if the Receive state\n                        machine is in the DEFAULTED state, 'initialize' if the\n                        Receive state machine is in the INITIALIZE state,\n                        'lacpDisabled' if the Receive state machine is in the\n                        LACP_DISABLED state, or 'portDisabled' if the Receive\n                        state machine is in the PORT_DISABLED state.\n                        This value is read-only.")
alclnkaggAggPortDebugLastRxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugLastRxTime.setReference('IEEE 802.3 Subclause 30.7.4.1.3')
if mibBuilder.loadTexts: alclnkaggAggPortDebugLastRxTime.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugLastRxTime.setDescription('The value of aTimeSinceSystemReset (F.2.1) when\n                        the last LACPDU was received by this Aggregation Port.\n                        This value is read-only.')
alclnkaggAggPortDebugMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("detached", 1), ("waiting", 2), ("attached", 3), ("collecting", 4), ("distributing", 5), ("collectingDistributing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxState.setReference('IEEE 802.3 Subclause 30.7.4.1.4')
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxState.setDescription("This attribute holds the value `detached' if the Mux\n                        state machine (43.4.14) for the Aggregation Port is in\n                        the DETACHED state, `waiting' if the Mux state machine\n                        is in the WAITING state, `attached' if the Mux state\n                        machine for the Aggregation Port is in the ATTACHED\n                        state, `collecting' if the Mux state machine for the\n                        Aggregation Port is in the COLLECTING state,\n                        `distributing' if the Mux state machine for the\n                        Aggregation Port is in the DISTRIBUTING state, and\n                        `collectingDistributing' if the Mux state machine for\n                        the Aggregation Port is in the COLLECTING_DISTRIBUTING\n                        state. This value is read-only.")
alclnkaggAggPortDebugMuxReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxReason.setReference('IEEE 802.3 Subclause 30.7.4.1.5')
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxReason.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugMuxReason.setDescription('A human-readable text string indicating the reason\n                        for the most recent change of Mux machine state.\n                        This value is read-only.')
alclnkaggAggPortDebugActorChurnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 5), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnState.setReference('IEEE 802.3 Subclause 30.7.4.1.6')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnState.setDescription("The state of the Actor Churn Detection machine\n                        () for the Aggregation Port. A value of 'noChurn'\n                        indicates that the state machine is in either the\n                        NO_ACTOR_CHURN or the ACTOR_CHURN_MONITOR\n                        state, and 'churn' indicates that the state machine is in the\n                        ACTOR_CHURN state. This value is read-only.")
alclnkaggAggPortDebugPartnerChurnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 6), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnState.setReference('IEEE 802.3 Subclause 30.7.4.1.7')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnState.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnState.setDescription("The state of the Partner Churn Detection machine\n                        () for the Aggregation Port. A value of 'noChurn'\n                        indicates that the state machine is in either the\n                        NO_PARTNER_CHURN or the PARTNER_CHURN_MONITOR\n                        state, and 'churn' indicates that the state machine is\n                        in the PARTNER_CHURN state.\n                        This value is read-only.")
alclnkaggAggPortDebugActorChurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnCount.setReference('IEEE 802.3 Subclause 30.7.4.1.8')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChurnCount.setDescription('Count of the number of times the Actor Churn state\n                        machine has entered the ACTOR_CHURN state.\n                        This value is read-only.')
alclnkaggAggPortDebugPartnerChurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnCount.setReference('IEEE 802.3 Subclause 30.7.4.1.9')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChurnCount.setDescription('Count of the number of times the Partner Churn\n                        state machine has entered the PARTNER_CHURN state.\n                        This value is read-only.')
alclnkaggAggPortDebugActorSyncTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorSyncTransitionCount.setReference('IEEE 802.3 Subclause 30.7.4.1.10')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorSyncTransitionCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorSyncTransitionCount.setDescription("Count of the number of times the Actor's Mux state\n                        machine () has entered the IN_SYNC state.\n                        This value is read-only.")
alclnkaggAggPortDebugPartnerSyncTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerSyncTransitionCount.setReference('IEEE 802.3 Subclause 30.7.4.1.11')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerSyncTransitionCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerSyncTransitionCount.setDescription("Count of the number of times the Partner's Mux\n                        state machine () has entered the IN_SYNC state.\n                        This value is read-only.")
alclnkaggAggPortDebugActorChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChangeCount.setReference('IEEE 802.3 Subclause 30.7.4.1.12')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChangeCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugActorChangeCount.setDescription("Count of the number of times the Actor's perception of\n                        the LAG ID for this Aggregation Port has changed.\n                        This value is read-only.")
alclnkaggAggPortDebugPartnerChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChangeCount.setReference('IEEE 802.3 Subclause 30.7.4.1.13')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChangeCount.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugPartnerChangeCount.setDescription("Count of the number of times the Partner's perception of\n                        the LAG ID (see ) for this Aggregation Port has changed.\n                        This value is read-only.")
alclnkaggAggIdIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alclnkaggAggIdIfIndexTable.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggIdIfIndexTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdIfIndexTable.setDescription("Each row in this table represents the link aggregation\n                        aggregate id's corresponding ifIndex. ")
alclnkaggAggIdIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggIfIndex"))
if mibBuilder.loadTexts: alclnkaggAggIdIfIndexEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdIfIndexEntry.setDescription('Parameters for link aggregation aggregate id relationship to ifIndex.')
alclnkaggIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alclnkaggIfIndex.setStatus('current')
if mibBuilder.loadTexts: alclnkaggIfIndex.setDescription('IfIndex for the given Aggregate ID')
alclnkaggAggId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkaggAggId.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggId.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggId.setDescription('The aggregate id number.')
alclnkaggAggIdAccountTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alclnkaggAggIdAccountTable.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggIdAccountTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdAccountTable.setDescription('Rows in this table represents account statistics of one aggregation.')
alclnkaggAggIdAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggIdAccountEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdAccountEntry.setDescription('Link Aggregate statistics.')
alcRxUndersize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxUndersize.setStatus('current')
if mibBuilder.loadTexts: alcRxUndersize.setDescription('Undersize packet received')
alcTxUndersize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTxUndersize.setStatus('current')
if mibBuilder.loadTexts: alcTxUndersize.setDescription('Undersize packet sent')
alcRxOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxOversize.setStatus('current')
if mibBuilder.loadTexts: alcRxOversize.setDescription('oversize packet received')
alcTxOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcTxOversize.setStatus('current')
if mibBuilder.loadTexts: alcTxOversize.setDescription('oversize packet sent')
alcRxPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets64.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets64.setDescription('packet size 64 received')
alcRxPackets127 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets127.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets127.setDescription('packet size 64-127 received')
alcRxPackets255 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets255.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets255.setDescription('packet size 128-255 received')
alcRxPackets511 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets511.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets511.setDescription('packet size 256-511 received')
alcRxPackets1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets1023.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets1023.setDescription('packet size 512-1023 received')
alcRxPackets1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets1518.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets1518.setDescription('packet size 1024-1518 received')
alcRxPackets4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets4095.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets4095.setDescription('packet size 1518-4095 received')
alcRxPackets9216 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxPackets9216.setStatus('current')
if mibBuilder.loadTexts: alcRxPackets9216.setDescription('packet size 4096-Max received')
alcRxJabberFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcRxJabberFrames.setStatus('current')
if mibBuilder.loadTexts: alcRxJabberFrames.setDescription('Jabber frames received')
alclnkaggAggIdCounterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5), )
if mibBuilder.loadTexts: alclnkaggAggIdCounterTable.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggIdCounterTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterTable.setDescription('Rows in this table represents counter statistics of one aggregation.')
alclnkaggAggIdCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggIdCounterEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterEntry.setDescription('Link Aggregate statistics.')
alcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInOctets.setStatus('current')
if mibBuilder.loadTexts: alcInOctets.setDescription('Octets received')
alcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutOctets.setStatus('current')
if mibBuilder.loadTexts: alcOutOctets.setDescription('Octets sent')
alcInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcInUcastPkts.setDescription('unicast packet received')
alcOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcOutUcastPkts.setDescription('unicast packet sent')
alcInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcInMcastPkts.setDescription('multicast packet received')
alcOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcOutMcastPkts.setDescription('multicast packet sent')
alcInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcInBcastPkts.setDescription('broadcast packet received')
alcOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: alcOutBcastPkts.setDescription('broadcast packet sent')
alcInPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInPauseFrames.setStatus('current')
if mibBuilder.loadTexts: alcInPauseFrames.setDescription('pause frames received')
alcOutPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutPauseFrames.setStatus('current')
if mibBuilder.loadTexts: alcOutPauseFrames.setDescription('pause frames sent')
alclnkaggAggIdCounterErrTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6), )
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrTable.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrTable.setDescription('Rows in this table represents counter error statistics of one aggregation.')
alclnkaggAggIdCounterErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrEntry.setDescription('Link Aggregate statistics.')
alcAlignmentsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcAlignmentsErrors.setStatus('current')
if mibBuilder.loadTexts: alcAlignmentsErrors.setDescription('Alignments error')
alcFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcFCSErrors.setStatus('current')
if mibBuilder.loadTexts: alcFCSErrors.setDescription('Alignments error')
alcIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIfInErrors.setStatus('current')
if mibBuilder.loadTexts: alcIfInErrors.setDescription('interface rceive error')
alcIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: alcIfOutErrors.setDescription('interface send error')
alclnkaggAggIdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alclnkaggAggIdTrafficTable.setReference('specific to Alcatel')
if mibBuilder.loadTexts: alclnkaggAggIdTrafficTable.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdTrafficTable.setDescription('Rows in this table represents traffic count statistics of one aggregation.')
alclnkaggAggIdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-LAG-MIB", "alclnkaggAggIndex"))
if mibBuilder.loadTexts: alclnkaggAggIdTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdTrafficEntry.setDescription('Link Aggregate statistics.')
alcInputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInputPackets.setStatus('current')
if mibBuilder.loadTexts: alcInputPackets.setDescription('InputPacket ')
alcInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcInputBytes.setStatus('current')
if mibBuilder.loadTexts: alcInputBytes.setDescription('Input bytes ')
alcOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutputPackets.setStatus('current')
if mibBuilder.loadTexts: alcOutputPackets.setDescription('InputPacket ')
alcOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcOutputBytes.setStatus('current')
if mibBuilder.loadTexts: alcOutputBytes.setDescription('output bytes ')
alcatelIND1LAGMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2))
if mibBuilder.loadTexts: alcatelIND1LAGMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LAGMIBConformance.setDescription('Branch For Link Aggregation Subsystem Conformance Information.')
alcatelIND1LAGMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1LAGMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LAGMIBGroups.setDescription('Branch For Link Aggregation Subsystem Units Of Conformance.')
alcatelIND1LAGMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1LAGMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LAGMIBCompliances.setDescription('Branch For Link Aggregation Subsystem Compliance Statements.')
alclnkaggAggGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggActorSystemID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPartnerAdminKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggActorSystemPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggActorAdminKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggMACAddress"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggActorOperKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPartnerSystemID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPartnerSystemPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPartnerOperKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggSize"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggNumber"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggDescr"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggName"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggLacpType"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggAdminState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggOperState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggNbrSelectedPorts"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggNbrAttachedPorts"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPrimaryPortIndex"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPrimaryPortPosition"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggRowStatus"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggMcLagType"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortSelectionHash"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggWTRTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggGroup = alclnkaggAggGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggGroup.setDescription('A collection of objects providing information about an\n                        aggregation.')
alclnkaggAggPortListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortListPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggPortListGroup = alclnkaggAggPortListGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortListGroup.setDescription('A collection of objects providing information about every\n                        port in an aggregation.')
alclnkaggAggPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorSystemPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorSystemID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorAdminKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorOperKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminSystemPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperSystemPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminSystemID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperSystemID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperKey"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortSelectedAggID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortAttachedAggID"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorPort"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorPortPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminPort"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperPort"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminPortPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperPortPriority"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorAdminState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortActorOperState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerAdminState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPartnerOperState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortSelectedAggNumber"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortGlobalPortNumber"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortAdminState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortOperState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortLinkState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortPrimary"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortLacpType"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortRowStatus"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortMcLagType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggPortGroup = alclnkaggAggPortGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortGroup.setDescription('A collection of objects providing information about every\n                        port in an aggregation.')
alclnkaggAggPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsLACPDUsRx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsMarkerPDUsRx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsMarkerResponsePDUsRx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsUnknownRx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsIllegalRx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsLACPDUsTx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsMarkerPDUsTx"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsMarkerResponsePDUsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggPortStatsGroup = alclnkaggAggPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortStatsGroup.setDescription('A collection of objects providing information about every\n                        port in an aggregation.')
alclnkaggAggPortDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugRxState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugLastRxTime"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugMuxState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugMuxReason"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugActorChurnState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugPartnerChurnState"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugActorChurnCount"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugPartnerChurnCount"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugActorSyncTransitionCount"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugPartnerSyncTransitionCount"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugActorChangeCount"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugPartnerChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggPortDebugGroup = alclnkaggAggPortDebugGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggPortDebugGroup.setDescription('A collection of objects providing debug information about.\n                        every aggregated port.')
alclnkaggTablesLastChangedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggTablesLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggTablesLastChangedGroup = alclnkaggTablesLastChangedGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggTablesLastChangedGroup.setDescription('A collection of objects providing information about the time\n                        of changes to the configuration of aggregations and their ports.')
alclnkaggAggCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkaggAggGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggTablesLastChangedGroup"), ("ALCATEL-IND1-LAG-MIB", "lnkaggNotificationVarsGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortListGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortStatsGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggPortDebugGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIdAccountGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIdCounterGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIdCounterErrGroup"), ("ALCATEL-IND1-LAG-MIB", "alclnkaggAggIdTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggCompliance = alclnkaggAggCompliance.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggCompliance.setDescription('The compliance statement for device support of\n                        Link Aggregation.')
lnkaggNotificationVarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lnkaggNotificationVarsGroup = lnkaggNotificationVarsGroup.setStatus('current')
if mibBuilder.loadTexts: lnkaggNotificationVarsGroup.setDescription('Collection of objects which appear only in notifications.')
lnkaggTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-LAG-MIB", "lnkaggAggUp"), ("ALCATEL-IND1-LAG-MIB", "lnkaggAggDown"), ("ALCATEL-IND1-LAG-MIB", "lnkaggPortJoin"), ("ALCATEL-IND1-LAG-MIB", "lnkaggPortLeave"), ("ALCATEL-IND1-LAG-MIB", "lnkaggPortRemove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lnkaggTrapsGroup = lnkaggTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: lnkaggTrapsGroup.setDescription('Collection of Traps for Link Aggregation .')
lnkaggNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 4))
traplnkaggAggId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: traplnkaggAggId.setStatus('current')
if mibBuilder.loadTexts: traplnkaggAggId.setDescription('Index Value of Link Aggregation group  .')
traplnkaggPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: traplnkaggPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: traplnkaggPortIfIndex.setDescription('Port of  Link Aggregate group .')
lnkaggAggUp = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0, 1)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if mibBuilder.loadTexts: lnkaggAggUp.setStatus('current')
if mibBuilder.loadTexts: lnkaggAggUp.setDescription('The Link Aggregation  is  active .\n                This trap is sent when any one port of the link aggregation\n                goes to attached state.')
lnkaggAggDown = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0, 2)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if mibBuilder.loadTexts: lnkaggAggDown.setStatus('current')
if mibBuilder.loadTexts: lnkaggAggDown.setDescription('The Link Aggregation  is  not active .\n                This trap is sent when all  ports of the link aggregation\n                goes out of attached state.')
lnkaggPortJoin = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0, 3)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if mibBuilder.loadTexts: lnkaggPortJoin.setStatus('current')
if mibBuilder.loadTexts: lnkaggPortJoin.setDescription('The Link Aggregation port  joins  the aggregate .\n                This trap is sent when given  port of the link aggregation\n                goes to attached state.')
lnkaggPortLeave = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0, 4)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if mibBuilder.loadTexts: lnkaggPortLeave.setStatus('current')
if mibBuilder.loadTexts: lnkaggPortLeave.setDescription('The Link Aggregation port  leaves  the aggregate .\n                This trap is sent when given  port of the link aggregation\n                goes out of  attached state.')
lnkaggPortRemove = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 0, 5)).setObjects(("ALCATEL-IND1-LAG-MIB", "traplnkaggAggId"), ("ALCATEL-IND1-LAG-MIB", "traplnkaggPortIfIndex"))
if mibBuilder.loadTexts: lnkaggPortRemove.setStatus('deprecated')
if mibBuilder.loadTexts: lnkaggPortRemove.setDescription('The Link Aggregation port removed from the aggregate  .\n                This trap is sent when given  port of the link aggregation\n                removed due to invalid configuration .')
alclnkaggAggConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5))
alclnkAggLocalRangeOperMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggLocalRangeOperMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggLocalRangeOperMin.setDescription('Minimum value of aggregate currently used  for\n             local aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known.\n             Valid linkagg range is from 0 to 127. Value -1 indicated none.')
alclnkAggLocalRangeOperMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggLocalRangeOperMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggLocalRangeOperMax.setDescription('Maximum value of aggregate currently used  for\n             local aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. Value -1 indicated none.')
alclnkAggLocalRangeConfiguredMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggLocalRangeConfiguredMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggLocalRangeConfiguredMin.setDescription('Minimum value of aggregate configured to be used for\n             local aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. Value -1 indicated none.')
alclnkAggLocalRangeConfiguredMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggLocalRangeConfiguredMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggLocalRangeConfiguredMax.setDescription('Maximum value of aggregate configured to be used for\n             local aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. Value -1 indicated none.')
alclnkAggPeerRangeOperMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggPeerRangeOperMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggPeerRangeOperMin.setDescription('Minimum value of aggregate currently used  for\n             peer aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggPeerRangeOperMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggPeerRangeOperMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggPeerRangeOperMax.setDescription('Maximum value of aggregate currently used  for\n             peer aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggPeerRangeConfiguredMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggPeerRangeConfiguredMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggPeerRangeConfiguredMin.setDescription('Minimum value of aggregate configured to be used for\n             peer aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggPeerRangeConfiguredMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggPeerRangeConfiguredMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggPeerRangeConfiguredMax.setDescription('Maximum value of aggregate configured to be used for\n             peer aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggMcLagRangeOperMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggMcLagRangeOperMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggMcLagRangeOperMin.setDescription('Minimum value of aggregate currently used  for\n             Multi Chassis aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggMcLagRangeOperMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alclnkAggMcLagRangeOperMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggMcLagRangeOperMax.setDescription('Maximum value of aggregate currently used  for\n             Multi Chassis aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggMcLagRangeConfiguredMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggMcLagRangeConfiguredMin.setStatus('current')
if mibBuilder.loadTexts: alclnkAggMcLagRangeConfiguredMin.setDescription('Minimum value of aggregate configured to be used for\n             Multi Chassis aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkAggMcLagRangeConfiguredMax = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alclnkAggMcLagRangeConfiguredMax.setStatus('current')
if mibBuilder.loadTexts: alclnkAggMcLagRangeConfiguredMax.setDescription('Maximum value of aggregate configured to be used for\n             Multi Chassis aggregates. Used only when\n             multi-chassis aggregation enabled and chassis id is known. \n\t     Valid linkagg range is from 0 to 127. \n\t     Value -1 indicated none or multi-chassis feature is not enabled.')
alclnkaggAggConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-LAG-MIB", "alclnkAggLocalRangeOperMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggLocalRangeOperMax"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggLocalRangeConfiguredMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggLocalRangeConfiguredMax"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggPeerRangeOperMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggPeerRangeOperMax"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggPeerRangeConfiguredMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggPeerRangeConfiguredMax"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggMcLagRangeOperMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggMcLagRangeOperMax"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggMcLagRangeConfiguredMin"), ("ALCATEL-IND1-LAG-MIB", "alclnkAggMcLagRangeConfiguredMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggConfigGroup = alclnkaggAggConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggConfigGroup.setDescription('A collection of objects providing information about ranges\n                        allowed aggregate number values.')
alclnkaggAggIdAccountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-LAG-MIB", "alcRxUndersize"), ("ALCATEL-IND1-LAG-MIB", "alcTxUndersize"), ("ALCATEL-IND1-LAG-MIB", "alcRxOversize"), ("ALCATEL-IND1-LAG-MIB", "alcTxOversize"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets64"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets127"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets255"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets511"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets1023"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets1518"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets4095"), ("ALCATEL-IND1-LAG-MIB", "alcRxPackets9216"), ("ALCATEL-IND1-LAG-MIB", "alcRxJabberFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggIdAccountGroup = alclnkaggAggIdAccountGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdAccountGroup.setDescription('A collection of objects providing information about aggregate account info')
alclnkaggAggIdCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-LAG-MIB", "alcInOctets"), ("ALCATEL-IND1-LAG-MIB", "alcOutOctets"), ("ALCATEL-IND1-LAG-MIB", "alcInUcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcOutUcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcInMcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcOutMcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcInBcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcOutBcastPkts"), ("ALCATEL-IND1-LAG-MIB", "alcInPauseFrames"), ("ALCATEL-IND1-LAG-MIB", "alcOutPauseFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggIdCounterGroup = alclnkaggAggIdCounterGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterGroup.setDescription('A collection of objects providing information about aggregate counter info')
alclnkaggAggIdCounterErrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-LAG-MIB", "alcAlignmentsErrors"), ("ALCATEL-IND1-LAG-MIB", "alcFCSErrors"), ("ALCATEL-IND1-LAG-MIB", "alcIfInErrors"), ("ALCATEL-IND1-LAG-MIB", "alcIfOutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggIdCounterErrGroup = alclnkaggAggIdCounterErrGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdCounterErrGroup.setDescription('A collection of objects providing information about aggregate counter error info')
alclnkaggAggIdTrafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 13, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-LAG-MIB", "alcInputPackets"), ("ALCATEL-IND1-LAG-MIB", "alcInputBytes"), ("ALCATEL-IND1-LAG-MIB", "alcOutputPackets"), ("ALCATEL-IND1-LAG-MIB", "alcOutputBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alclnkaggAggIdTrafficGroup = alclnkaggAggIdTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: alclnkaggAggIdTrafficGroup.setDescription('A collection of objects providing information about aggregate traffic info')
mibBuilder.exportSymbols("ALCATEL-IND1-LAG-MIB", alclnkaggAggPortActorOperKey=alclnkaggAggPortActorOperKey, alclnkaggAggIdIfIndexTable=alclnkaggAggIdIfIndexTable, alclnkaggAggPortTable=alclnkaggAggPortTable, McLagType=McLagType, alclnkaggAggPortPartnerAdminSystemPriority=alclnkaggAggPortPartnerAdminSystemPriority, alclnkaggAggPortPartnerAdminPortPriority=alclnkaggAggPortPartnerAdminPortPriority, alclnkaggAggPortGroup=alclnkaggAggPortGroup, alcRxPackets127=alcRxPackets127, alclnkaggAggIdAccountTable=alclnkaggAggIdAccountTable, alcFCSErrors=alcFCSErrors, alclnkaggAggPortPartnerOperState=alclnkaggAggPortPartnerOperState, alclnkaggAggPortStatsMarkerResponsePDUsTx=alclnkaggAggPortStatsMarkerResponsePDUsTx, alclnkaggAggRowStatus=alclnkaggAggRowStatus, alclnkaggAggPortPartnerOperPort=alclnkaggAggPortPartnerOperPort, alclnkaggAggPortLinkState=alclnkaggAggPortLinkState, alclnkaggAggActorOperKey=alclnkaggAggActorOperKey, alclnkaggAggPortStatsUnknownRx=alclnkaggAggPortStatsUnknownRx, alcatelIND1LAGMIB=alcatelIND1LAGMIB, alclnkaggAggIdCounterGroup=alclnkaggAggIdCounterGroup, alcOutOctets=alcOutOctets, alclnkaggAggTable=alclnkaggAggTable, alclnkaggAggIdTrafficEntry=alclnkaggAggIdTrafficEntry, alclnkaggAggPortActorPortPriority=alclnkaggAggPortActorPortPriority, alclnkAggPeerRangeOperMin=alclnkAggPeerRangeOperMin, alclnkaggAggPartnerAdminKey=alclnkaggAggPartnerAdminKey, alclnkaggAggPortActorPort=alclnkaggAggPortActorPort, alclnkaggAggPortAttachedAggID=alclnkaggAggPortAttachedAggID, alclnkAggMcLagRangeOperMin=alclnkAggMcLagRangeOperMin, alcRxJabberFrames=alcRxJabberFrames, alclnkaggAggPortDebugGroup=alclnkaggAggPortDebugGroup, alclnkaggAggActorSystemPriority=alclnkaggAggActorSystemPriority, alclnkaggAggPortDebugTable=alclnkaggAggPortDebugTable, alclnkaggIfIndex=alclnkaggIfIndex, alcOutMcastPkts=alcOutMcastPkts, alclnkaggAggPortMcLagType=alclnkaggAggPortMcLagType, alcRxPackets255=alcRxPackets255, traplnkaggAggId=traplnkaggAggId, alclnkaggAggPartnerSystemPriority=alclnkaggAggPartnerSystemPriority, alcInBcastPkts=alcInBcastPkts, alclnkaggAggPortIndex=alclnkaggAggPortIndex, alclnkaggAggIndex=alclnkaggAggIndex, lnkaggPortRemove=lnkaggPortRemove, alcInputPackets=alcInputPackets, alclnkaggAggPortStatsLACPDUsTx=alclnkaggAggPortStatsLACPDUsTx, alclnkaggAggPortActorOperState=alclnkaggAggPortActorOperState, alclnkaggTablesLastChangedGroup=alclnkaggTablesLastChangedGroup, alclnkaggAggConfigGroup=alclnkaggAggConfigGroup, alclnkaggAggIdAccountGroup=alclnkaggAggIdAccountGroup, alclnkaggAggPortSelectedAggNumber=alclnkaggAggPortSelectedAggNumber, alclnkAggMcLagRangeConfiguredMin=alclnkAggMcLagRangeConfiguredMin, alclnkaggAggPortActorSystemPriority=alclnkaggAggPortActorSystemPriority, alcInMcastPkts=alcInMcastPkts, alclnkaggAggPortPrimary=alclnkaggAggPortPrimary, alclnkAggLocalRangeConfiguredMin=alclnkAggLocalRangeConfiguredMin, alcOutUcastPkts=alcOutUcastPkts, alclnkaggAggNbrAttachedPorts=alclnkaggAggNbrAttachedPorts, traplnkaggPortIfIndex=traplnkaggPortIfIndex, alclnkaggAggPortDebugPartnerSyncTransitionCount=alclnkaggAggPortDebugPartnerSyncTransitionCount, alclnkaggAggPortListGroup=alclnkaggAggPortListGroup, alclnkaggAggPortDebugMuxState=alclnkaggAggPortDebugMuxState, alclnkaggAggPortActorAdminKey=alclnkaggAggPortActorAdminKey, alclnkaggAggMcLagType=alclnkaggAggMcLagType, alclnkaggAggPortListTable=alclnkaggAggPortListTable, alclnkaggAggPortPartnerAdminSystemID=alclnkaggAggPortPartnerAdminSystemID, alclnkaggAggPortState=alclnkaggAggPortState, PYSNMP_MODULE_ID=alcatelIND1LAGMIB, alclnkaggAggPortPartnerAdminState=alclnkaggAggPortPartnerAdminState, alclnkaggTablesLastChanged=alclnkaggTablesLastChanged, alclnkaggAggPortStatsMarkerPDUsRx=alclnkaggAggPortStatsMarkerPDUsRx, alclnkaggAggPortStatsGroup=alclnkaggAggPortStatsGroup, alclnkaggAggSize=alclnkaggAggSize, alclnkaggAggNbrSelectedPorts=alclnkaggAggNbrSelectedPorts, alclnkaggAggPortPartnerAdminPort=alclnkaggAggPortPartnerAdminPort, alclnkaggAggPortStatsIllegalRx=alclnkaggAggPortStatsIllegalRx, alclnkaggAggPortStatsMarkerPDUsTx=alclnkaggAggPortStatsMarkerPDUsTx, alcRxOversize=alcRxOversize, alclnkaggAggPortRowStatus=alclnkaggAggPortRowStatus, alclnkaggAggPortDebugPartnerChurnState=alclnkaggAggPortDebugPartnerChurnState, alclnkaggAggConfig=alclnkaggAggConfig, alclnkaggAggPortDebugActorChangeCount=alclnkaggAggPortDebugActorChangeCount, alclnkaggAggGroup=alclnkaggAggGroup, alcOutputPackets=alcOutputPackets, alclnkaggAggPortLacpType=alclnkaggAggPortLacpType, alclnkaggAggPortDebugLastRxTime=alclnkaggAggPortDebugLastRxTime, alclnkaggAggPortDebugMuxReason=alclnkaggAggPortDebugMuxReason, lnkaggAggUp=lnkaggAggUp, alclnkaggAgg=alclnkaggAgg, alclnkaggAggPortPartnerOperKey=alclnkaggAggPortPartnerOperKey, alcOutputBytes=alcOutputBytes, alclnkaggAggPortDebugPartnerChangeCount=alclnkaggAggPortDebugPartnerChangeCount, alcRxPackets511=alcRxPackets511, alcRxUndersize=alcRxUndersize, alcatelIND1LAGMIBGroups=alcatelIND1LAGMIBGroups, alclnkaggAggActorAdminKey=alclnkaggAggActorAdminKey, alclnkaggAggPortPartnerOperSystemPriority=alclnkaggAggPortPartnerOperSystemPriority, alclnkaggAggLacpType=alclnkaggAggLacpType, alclnkaggAggId=alclnkaggAggId, alclnkaggAggIdCounterTable=alclnkaggAggIdCounterTable, alcInPauseFrames=alcInPauseFrames, alclnkaggAggPortStatsMarkerResponsePDUsRx=alclnkaggAggPortStatsMarkerResponsePDUsRx, alclnkaggAggIdCounterErrGroup=alclnkaggAggIdCounterErrGroup, alclnkaggAggPortPartnerOperPortPriority=alclnkaggAggPortPartnerOperPortPriority, alclnkaggAggWTRTimer=alclnkaggAggWTRTimer, alclnkAggMcLagRangeConfiguredMax=alclnkAggMcLagRangeConfiguredMax, alcRxPackets1518=alcRxPackets1518, alclnkAggLocalRangeOperMin=alclnkAggLocalRangeOperMin, lnkaggNotificationVarsGroup=lnkaggNotificationVarsGroup, lnkaggPortLeave=lnkaggPortLeave, alclnkaggAggPortEntry=alclnkaggAggPortEntry, alcRxPackets1023=alcRxPackets1023, alcOutBcastPkts=alcOutBcastPkts, alcTxOversize=alcTxOversize, alcatelIND1LAGMIBConformance=alcatelIND1LAGMIBConformance, alclnkAggLocalRangeOperMax=alclnkAggLocalRangeOperMax, alclnkaggAggName=alclnkaggAggName, alclnkaggAggPortDebugActorChurnCount=alclnkaggAggPortDebugActorChurnCount, alclnkaggAggPartnerOperKey=alclnkaggAggPartnerOperKey, alcAlignmentsErrors=alcAlignmentsErrors, alclnkaggAggIdIfIndexEntry=alclnkaggAggIdIfIndexEntry, alclnkaggAggPortAdminState=alclnkaggAggPortAdminState, alcatelIND1LAGMIBObjects=alcatelIND1LAGMIBObjects, alclnkAggLocalRangeConfiguredMax=alclnkAggLocalRangeConfiguredMax, alclnkaggAggNumber=alclnkaggAggNumber, alclnkaggAggPortStatsTable=alclnkaggAggPortStatsTable, alclnkaggAggOperState=alclnkaggAggOperState, alclnkaggAggIdTrafficGroup=alclnkaggAggIdTrafficGroup, lnkaggNotificationVars=lnkaggNotificationVars, alclnkaggAggIdCounterEntry=alclnkaggAggIdCounterEntry, alclnkaggAggActorSystemID=alclnkaggAggActorSystemID, alcRxPackets64=alcRxPackets64, alclnkaggAggPortDebugPartnerChurnCount=alclnkaggAggPortDebugPartnerChurnCount, alclnkAggPeerRangeOperMax=alclnkAggPeerRangeOperMax, alclnkaggAggDescr=alclnkaggAggDescr, alcInUcastPkts=alcInUcastPkts, lnkaggAggDown=lnkaggAggDown, alclnkaggAggPortPartnerAdminKey=alclnkaggAggPortPartnerAdminKey, lnkaggPortJoin=lnkaggPortJoin, alcatelIND1LAGMIBNotifications=alcatelIND1LAGMIBNotifications, alclnkaggAggPrimaryPortPosition=alclnkaggAggPrimaryPortPosition, alclnkaggAggPortOperState=alclnkaggAggPortOperState, alclnkaggAggPortStatsEntry=alclnkaggAggPortStatsEntry, alclnkaggAggMACAddress=alclnkaggAggMACAddress, alclnkaggAggPortDebugRxState=alclnkaggAggPortDebugRxState, alclnkaggAggPortActorAdminState=alclnkaggAggPortActorAdminState, alclnkaggAggPortPartnerOperSystemID=alclnkaggAggPortPartnerOperSystemID, alclnkaggAggEntry=alclnkaggAggEntry, alclnkaggAggPortActorSystemID=alclnkaggAggPortActorSystemID, alclnkaggAggIdCounterErrTable=alclnkaggAggIdCounterErrTable, alcInOctets=alcInOctets, alcOutPauseFrames=alcOutPauseFrames, alclnkaggAggPortSelectionHash=alclnkaggAggPortSelectionHash, alclnkaggAggPortSelectedAggID=alclnkaggAggPortSelectedAggID, alclnkaggAggIdTrafficTable=alclnkaggAggIdTrafficTable, alclnkaggAggIdAccountEntry=alclnkaggAggIdAccountEntry, alcRxPackets9216=alcRxPackets9216, LacpType=LacpType, alcInputBytes=alcInputBytes, alclnkaggAggPartnerSystemID=alclnkaggAggPartnerSystemID, alclnkaggAggPortDebugEntry=alclnkaggAggPortDebugEntry, alcTxUndersize=alcTxUndersize, alclnkAggPeerRangeConfiguredMax=alclnkAggPeerRangeConfiguredMax, alcatelIND1LAGMIBCompliances=alcatelIND1LAGMIBCompliances, alcIfOutErrors=alcIfOutErrors, alclnkaggAggPortListEntry=alclnkaggAggPortListEntry, alclnkaggAggPortDebugActorChurnState=alclnkaggAggPortDebugActorChurnState, alclnkaggAggAdminState=alclnkaggAggAdminState, lnkaggTrapsGroup=lnkaggTrapsGroup, alclnkAggPeerRangeConfiguredMin=alclnkAggPeerRangeConfiguredMin, alcIfInErrors=alcIfInErrors, alclnkaggAggCompliance=alclnkaggAggCompliance, alclnkaggAggPortStatsLACPDUsRx=alclnkaggAggPortStatsLACPDUsRx, alclnkAggMcLagRangeOperMax=alclnkAggMcLagRangeOperMax, alclnkaggAggPortGlobalPortNumber=alclnkaggAggPortGlobalPortNumber, alclnkaggAggPort=alclnkaggAggPort, alclnkaggAggPortDebugActorSyncTransitionCount=alclnkaggAggPortDebugActorSyncTransitionCount, alclnkaggAggIdCounterErrEntry=alclnkaggAggIdCounterErrEntry, alcRxPackets4095=alcRxPackets4095, alclnkaggAggPortListPorts=alclnkaggAggPortListPorts, alclnkaggAggPrimaryPortIndex=alclnkaggAggPrimaryPortIndex)
