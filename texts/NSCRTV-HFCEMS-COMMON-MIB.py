#
# PySNMP MIB module NSCRTV-HFCEMS-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-HFCEMS-COMMON-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 12:05:56 2021
# On host fv-az36-755 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
commonIdent, nscrtvHFCemsTree = mibBuilder.importSymbols("NSCRTV-ROOT", "commonIdent", "nscrtvHFCemsTree")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso, Integer32, ObjectIdentity, TimeTicks, NotificationType, Counter32, Bits, Gauge32, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "Gauge32", "Unsigned32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
commonAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1))
commonAdminUseRf = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2))
commonAdminUseEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3))
commonMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1))
commonRfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2))
commonMacAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1))
commonBackoffParams = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2))
commonMacStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3))
commonAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1))
commonDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2))
commonNELogicalID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonNELogicalID.setStatus('mandatory')
if mibBuilder.loadTexts: commonNELogicalID.setDescription('ָNE\u07fcʶLogicIDֵһNE\u07b9ء\n            ˶ֵӦڷʧԴ洢С')
commonNEVendor = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendor.setStatus('mandatory')
if mibBuilder.loadTexts: commonNEVendor.setDescription('NE豸ҡ')
commonNEModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commonNEModelNumber.setDescription('NE豸ͺš')
commonNESerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNESerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commonNESerialNumber.setDescription('NE豸кš')
commonNEVendorInfo = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEVendorInfo.setStatus('optional')
if mibBuilder.loadTexts: commonNEVendorInfo.setDescription('NE豸Ӧ̵ָϢ')
commonNEStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNEStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonNEStatus.setDescription('7.5.4 STATRESP PDUеStatusӦ\n            Bit 0: CHNLRQST\n            Bit 1: CNTNRM\n            Bit 2: CNTCUR\n            Bit 3: MAJOR ALARMS\n            Bit 4: MINOR ALARMS\n            Bit 5: RSVD1\n            Bit 6: RSVD2\n            Bit 7: RSVD3')
commonReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonReset.setStatus('mandatory')
if mibBuilder.loadTexts: commonReset.setDescription("д'1'λNE豸дֵá˶ʱֵ'1'豸\n            Ӱ졣")
commonAlarmDetectionControl = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAlarmDetectionControl.setStatus('mandatory')
if mibBuilder.loadTexts: commonAlarmDetectionControl.setDescription('˶ڿNEĸ澯⡣\n            ģԱɢԱеһMIBﵽ趨ޣΪ澯ѷ\n            Ϊµĸ澯¼ڸ澯¼alarmLogTableһ\ue8ec澯彫ͬʱ\n            һMIBֵ״̬ڵǰ澯currentAlarmTableҲ\n            һ¼\n            \n            detectionDisabled(1)ֹͣģԱ/ɢԱصĸ澯̣NE\n            澯detectionEnabled(2)澯УdetectionEnabled֮\n            ǰӦ״̬ʼС\n            \n            detectionEnabledAndRegenerate(3)и澯Ϣ澯Сģ\n            ɢԱи澯Խָ澯֮ǰֵϡκԴڸ澯\n            ״̬Խָ澯ôֵ澯¼alarmLogTable\n            ǰ澯currentAlarmTableݡ\n            \n            detectionEnabledAndRegenerateʱģcommonAlarmDetectionControl\n            ΪdetectionEnabledAndRegnerateSNMPӦֵԺٶ˶ֵ\n            ʱӦΪdetectionEnabled\n            \n            detectionDisabledֵӰhfcColdStart hfcWarmStart Ĳ\n            רŹ涨һɲܴ˶Ӱ졣\n            \n            ˶ӦڷʧԴ洢УȱʡֵΪdetectionEnabled')
commonNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: commonNetworkAddress.setDescription('NEIPַNETrapʱӦ˵ֵַӦڷʧԴ洢С\n            ֵעʱͨMAC̵ͨıؽӿá')
commonCheckCode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonCheckCode.setStatus('mandatory')
if mibBuilder.loadTexts: commonCheckCode.setDescription('˶Ӧõļı档ļӦ豸\n            òʹڷʧԴ洢еж㷨ɳ\n            涨\n            öֵӦڷʧԴ洢УӦʱ¼벢\n            ǰֵбȽϣԾǷӦһhfcColdStart  hfcWarmStart塣\n            Դ˶дSetRequestʱ뽫¼㣬SetRequest\n            GetResponseӦСʱhfcColdStart  hfcWarmStart 塣')
commonTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: commonTrapCommunityString.setDescription("TrapеĹַͬȱʡֵ'public'\n            ˶ֵӦڷʧԴ洢С")
commonTamperStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTamperStatus.setStatus('optional')
if mibBuilder.loadTexts: commonTamperStatus.setDescription('NE豸İȫ(Ƿ)״̬˶ҪɢԱжӦһ\n            Ŀintactʾcompromisedʾ澯')
commonInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonInternalTemperature.setStatus('optional')
if mibBuilder.loadTexts: commonInternalTemperature.setDescription('NE豸ڲ¶ȣλΪ϶ȡ˶ҪԱжӦһĿ')
commonTime = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonTime.setStatus('optional')
if mibBuilder.loadTexts: commonTime.setDescription('NEĵǰʱPOSIXʾ1970110ʱ')
commonVarBindings = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonVarBindings.setStatus('mandatory')
if mibBuilder.loadTexts: commonVarBindings.setDescription('˶ʾܱNEյSNMPϢ\U000f6a31ĿֵΪ0ʾ\u0530\n            Ŀûơ')
commonResetCause = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonResetCause.setStatus('mandatory')
if mibBuilder.loadTexts: commonResetCause.setDescription('ʾNEһθλԭ')
commonCraftStatus = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonCraftStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonCraftStatus.setDescription('˶ʾNEؽӿڣRS232RS485ӿڣ״̬NEһҪֱ֧ؽӿڡ\n            NE ؽӿڵ״̬ӰMAC ӿڵĹܣ ֱ֧ؽӿڣ ֵΪ\n            disconnected')
commonDeviceOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceOID.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceOID.setDescription('˶ΪһOIDָ룬ָ\U000b1ef9豸MIB(ڵ㡢˫Ŵ) ')
commonDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceId.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceId.setDescription('˶ɱ豸ָ̺ͲƷASCIIıϢ')
commonPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: commonPhysAddress.setDescription('NEMACַ')
commonMaxMulticastAddresses = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxMulticastAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: commonMaxMulticastAddresses.setDescription('NE豸ֵ֧鲥ַĿ')
commonMulticastAddressTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3), )
if mibBuilder.loadTexts: commonMulticastAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: commonMulticastAddressTable.setDescription('鲥ַ˶ֵӦڷʧԴ洢С')
commonMulticastAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonMulticastAddressIndex"))
if mibBuilder.loadTexts: commonMulticastAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commonMulticastAddressEntry.setDescription('鲥ַĿ')
commonMulticastAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMulticastAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commonMulticastAddressIndex.setDescription('鲥ַ')
commonMulticastAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMulticastAddressNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commonMulticastAddressNumber.setDescription('鲥ַI/GλΪ1Ч')
commonBackoffPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: commonBackoffPeriod.setDescription('Backoff㷨Ļ\u05fcʱ䣨msʼȱʡֵΪ6ms\n            ˶ֵӦڷʧԴ洢С')
commonACKTimeoutWindow = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonACKTimeoutWindow.setStatus('mandatory')
if mibBuilder.loadTexts: commonACKTimeoutWindow.setDescription('NEȴHEACKӦĳʱʱ䣨msʼȱʡֵΪ19ms\n            ˶ֵӦڷʧԴ洢С')
commonMaximumMACLayerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaximumMACLayerRetries.setStatus('mandatory')
if mibBuilder.loadTexts: commonMaximumMACLayerRetries.setDescription('NEݰԴʼȱʡֵΪ16\n            ˶ֵӦڷʧԴ洢С')
commonMaxPayloadSize = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonMaxPayloadSize.setStatus('mandatory')
if mibBuilder.loadTexts: commonMaxPayloadSize.setDescription('ŵݰֵ֧Чغɣpayloadĳȡ')
commonBackoffMinimumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMinimumExponent.setStatus('mandatory')
if mibBuilder.loadTexts: commonBackoffMinimumExponent.setDescription('\u05fcMAC淶backoff㷨СֵָȱʡֵΪ6\n            ֵôcommonBackoffMaximumValueֵ\n            ˶ֵӦڷʧԴ洢С')
commonBackoffMaximumExponent = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackoffMaximumExponent.setStatus('mandatory')
if mibBuilder.loadTexts: commonBackoffMaximumExponent.setDescription('\u05fcMAC淶backoff㷨ֵָȱʡֵΪ15\n            ֵСcommonBackoffMinimumֵ\n            ˶ֵӦڷʧԴ洢С')
commonForwardPathLOSEvents = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathLOSEvents.setStatus('optional')
if mibBuilder.loadTexts: commonForwardPathLOSEvents.setDescription('ŵLOSĿλΪ0')
commonForwardPathFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathFramingErrors.setStatus('optional')
if mibBuilder.loadTexts: commonForwardPathFramingErrors.setDescription('ŵ֡ĿλΪ0')
commonForwardPathCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonForwardPathCRCErrors.setStatus('optional')
if mibBuilder.loadTexts: commonForwardPathCRCErrors.setDescription('CRCУĿλΪ0')
commonInvalidMacCmds = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonInvalidMacCmds.setStatus('optional')
if mibBuilder.loadTexts: commonInvalidMacCmds.setDescription('ЧMACĿλΪ0')
commonBackwardPathCollisionTimes = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 1, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonBackwardPathCollisionTimes.setStatus('optional')
if mibBuilder.loadTexts: commonBackwardPathCollisionTimes.setDescription('ݰײλΪ0')
commonReturnPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonReturnPathFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: commonReturnPathFrequency.setDescription('ŵƵʣλΪHz\n            ˶ֵӦڷʧԴ洢С')
commonForwardPathFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: commonForwardPathFrequency.setDescription('ŵƵʣλΪHz\n            ˶ֵӦڷʧԴ洢С')
commonProvisionedReturnPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonProvisionedReturnPowerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: commonProvisionedReturnPowerLevel.setDescription('ŵʵƽλΪdBuV\n            ڲʹʱֵ뵽ӽֵ֧˶ʱʵֵֵ\n            ˶ֵӦڷʧԴ洢С')
commonForwardPathReceiveLevel = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonForwardPathReceiveLevel.setStatus('optional')
if mibBuilder.loadTexts: commonForwardPathReceiveLevel.setDescription('ŵչʵƽλΪdBuV')
commonMaxReturnPower = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonMaxReturnPower.setStatus('mandatory')
if mibBuilder.loadTexts: commonMaxReturnPower.setDescription('ŵʵƽλΪdBuV\n            ˶ֵӦڷʧԴ洢С')
commonAgentBootWay = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootDefault", 1), ("bootBOOTP", 2), ("bootTFTP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentBootWay.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentBootWay.setDescription('')
commonAgentReset = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentReset.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentReset.setDescription("д'1'ʹдֵá˶ʱ\n            ֵ'1'ԴӰ졣")
commonAgentMaxTraps = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAgentMaxTraps.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentMaxTraps.setDescription('\u2d7d澯ʱTRAP0ʾó̵Ԥȱʡֵ')
commonAgentTrapMinInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMinInterval.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapMinInterval.setDescription('TRAPСλΪs')
commonAgentTrapMaxInterval = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapMaxInterval.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapMaxInterval.setDescription('TRAPλΪs')
commonTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonTrapAck.setStatus('optional')
if mibBuilder.loadTexts: commonTrapAck.setDescription('ñ֪ͨSnmpĸ澯TrapϢѾյط\n            ݺ\u0378澯MIB alarmLogInformation ͬյͨ\n            alarmLogInformation ȷ֪Ӧһ澯TrapϢӶֹͣ\n            ø澯TrapϢط')
commonAgentTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7), )
if mibBuilder.loadTexts: commonAgentTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapTable.setDescription('TRAPϢ')
commonAgentTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonAgentTrapIndex"))
if mibBuilder.loadTexts: commonAgentTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapEntry.setDescription('TRAPϢĿ')
commonAgentTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAgentTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapIndex.setDescription('TRAP')
commonAgentTrapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapIP.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapIP.setDescription('TRAPʱĿIPַ')
commonAgentTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapCommunity.setDescription('TRAPʱĹַͬ')
commonAgentTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commonAgentTrapEnable", 1), ("commonAgentTrapDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonAgentTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonAgentTrapStatus.setDescription('ʾTRAPǷá')
commonDeviceNum = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceNum.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceNum.setDescription('ʾôǰڹ豸')
commonDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: commonDeviceInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceInfoTable.setDescription('ǰڹ豸Ϣб')
commonDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-COMMON-MIB", "commonDeviceSlot"))
if mibBuilder.loadTexts: commonDeviceInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceInfoEntry.setDescription('ǰڹ豸ϢбĿ')
commonDeviceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceSlot.setDescription('ǰڹ豸Ϣбı')
commonDevicesID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesID.setStatus('mandatory')
if mibBuilder.loadTexts: commonDevicesID.setDescription('ָ豸ıʶ')
commonDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendor.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceVendor.setDescription('豸ҡ')
commonDeviceModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceModelNumber.setDescription('豸ͺš')
commonDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceSerialNumber.setDescription('豸кš')
commonDeviceVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceVendorInfo.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceVendorInfo.setDescription('豸Ӧ̵ָϢ')
commonDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceStatus.setDescription('豸״̬\n            Bit 0: RSVD0\n            Bit 1: RSVD1\n            Bit 2: RSVD2\n            Bit 3: MAJOR ALARMS\n            Bit 4: MINOR ALARMS\n            Bit 5: RSVD5\n            Bit 6: RSVD6\n            Bit 7: RSVD7')
commonDeviceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceReset.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceReset.setDescription("д'1'λ豸дֵá˶ʱֵ'1'豸\n            Ӱ졣")
commonDeviceAlarmDetectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commonDeviceAlarmDetectionControl.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceAlarmDetectionControl.setDescription('˶ڿ豸ĸ澯⡣')
commonDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceMACAddress.setDescription('豸MACַ')
commonDeviceTamperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intact", 1), ("compromised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceTamperStatus.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceTamperStatus.setDescription('豸İȫ(Ƿ)״̬˶ҪɢԱжӦһĿ\n            intactʾcompromisedʾ澯')
commonDeviceInternalTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceInternalTemperature.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceInternalTemperature.setDescription('豸ڲ¶ȣλΪ϶ȡ˶ҪԱжӦһĿ')
commonDeviceResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("powerup", 2), ("command", 3), ("watchdog", 4), ("craft", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceResetCause.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceResetCause.setDescription('ʾ豸һθλԭ')
commonDeviceCraftStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceCraftStatus.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceCraftStatus.setDescription('˶ʾ豸ؽӿڣRS232RS485ӿڣ״̬')
commonDevicesOID = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDevicesOID.setStatus('mandatory')
if mibBuilder.loadTexts: commonDevicesOID.setDescription('Ŀʶָ豸ľʵ֡')
commonDeviceAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceAcct.setStatus('optional')
if mibBuilder.loadTexts: commonDeviceAcct.setDescription('ʾ豸ۼƹʱ䣬λΪs')
commonDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceName.setDescription('豸ơ')
commonDeviceMFD = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceMFD.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceMFD.setDescription('豸ڡ')
commonDeviceFW = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 3, 3, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonDeviceFW.setStatus('mandatory')
if mibBuilder.loadTexts: commonDeviceFW.setDescription('豸̼Ϣ')
hfcColdStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,0)).setObjects(("NSCRTV-HFCEMS-COMMON-MIB", "commonPhysAddress"), ("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID"))
if mibBuilder.loadTexts: hfcColdStart.setDescription('hfcColdStartʾͷЭʵ³ʼҴûЭʵ\n            ı䡣Ӧעɹ͡')
hfcWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 17409, 1) + (0,2)).setObjects(("NSCRTV-HFCEMS-COMMON-MIB", "commonPhysAddress"), ("NSCRTV-HFCEMS-COMMON-MIB", "commonNELogicalID"))
if mibBuilder.loadTexts: hfcWarmStart.setDescription('hfcWarmStartʾͷЭʵ³ʼҴûЭʵû\n            θı䡣Ӧעɺ͡')
mibBuilder.exportSymbols("NSCRTV-HFCEMS-COMMON-MIB", commonVarBindings=commonVarBindings, commonMaxReturnPower=commonMaxReturnPower, commonDeviceTamperStatus=commonDeviceTamperStatus, commonNELogicalID=commonNELogicalID, commonAgentTrapMaxInterval=commonAgentTrapMaxInterval, commonForwardPathReceiveLevel=commonForwardPathReceiveLevel, commonAdminGroup=commonAdminGroup, commonDeviceMACAddress=commonDeviceMACAddress, commonMacAddress=commonMacAddress, commonMaximumMACLayerRetries=commonMaximumMACLayerRetries, commonTamperStatus=commonTamperStatus, commonMulticastAddressTable=commonMulticastAddressTable, commonAgentTrapIP=commonAgentTrapIP, commonDeviceName=commonDeviceName, commonNEModelNumber=commonNEModelNumber, commonBackoffMinimumExponent=commonBackoffMinimumExponent, commonDeviceInfoTable=commonDeviceInfoTable, commonDevicesOID=commonDevicesOID, commonAgentTrapCommunity=commonAgentTrapCommunity, commonDeviceVendor=commonDeviceVendor, commonMACGroup=commonMACGroup, commonNEVendor=commonNEVendor, commonBackwardPathCollisionTimes=commonBackwardPathCollisionTimes, commonAgentTrapStatus=commonAgentTrapStatus, commonDeviceInternalTemperature=commonDeviceInternalTemperature, commonDeviceFW=commonDeviceFW, commonDeviceSlot=commonDeviceSlot, commonMaxMulticastAddresses=commonMaxMulticastAddresses, commonDeviceStatus=commonDeviceStatus, commonPhysAddress=commonPhysAddress, commonMulticastAddressNumber=commonMulticastAddressNumber, commonAgentTrapEntry=commonAgentTrapEntry, commonAgentGroup=commonAgentGroup, commonForwardPathLOSEvents=commonForwardPathLOSEvents, commonDeviceAlarmDetectionControl=commonDeviceAlarmDetectionControl, commonBackoffPeriod=commonBackoffPeriod, commonDeviceVendorInfo=commonDeviceVendorInfo, hfcColdStart=hfcColdStart, commonTime=commonTime, commonDeviceId=commonDeviceId, commonNEVendorInfo=commonNEVendorInfo, commonNESerialNumber=commonNESerialNumber, commonAgentTrapMinInterval=commonAgentTrapMinInterval, commonAgentTrapIndex=commonAgentTrapIndex, commonDeviceReset=commonDeviceReset, commonDeviceOID=commonDeviceOID, commonAdminUseRf=commonAdminUseRf, commonMulticastAddressEntry=commonMulticastAddressEntry, commonDeviceNum=commonDeviceNum, commonReset=commonReset, commonForwardPathCRCErrors=commonForwardPathCRCErrors, commonForwardPathFrequency=commonForwardPathFrequency, commonProvisionedReturnPowerLevel=commonProvisionedReturnPowerLevel, commonMacStats=commonMacStats, commonDeviceSerialNumber=commonDeviceSerialNumber, commonDeviceResetCause=commonDeviceResetCause, commonDevicesID=commonDevicesID, commonAlarmDetectionControl=commonAlarmDetectionControl, commonTrapCommunityString=commonTrapCommunityString, commonResetCause=commonResetCause, commonForwardPathFramingErrors=commonForwardPathFramingErrors, commonDeviceAcct=commonDeviceAcct, commonInternalTemperature=commonInternalTemperature, commonDeviceInfoEntry=commonDeviceInfoEntry, commonAgentTrapTable=commonAgentTrapTable, hfcWarmStart=hfcWarmStart, commonBackoffParams=commonBackoffParams, commonMaxPayloadSize=commonMaxPayloadSize, commonReturnPathFrequency=commonReturnPathFrequency, commonTrapAck=commonTrapAck, commonDeviceCraftStatus=commonDeviceCraftStatus, commonDeviceModelNumber=commonDeviceModelNumber, commonInvalidMacCmds=commonInvalidMacCmds, commonDeviceGroup=commonDeviceGroup, commonAdminUseEthernet=commonAdminUseEthernet, commonACKTimeoutWindow=commonACKTimeoutWindow, commonNEStatus=commonNEStatus, commonMulticastAddressIndex=commonMulticastAddressIndex, commonBackoffMaximumExponent=commonBackoffMaximumExponent, commonAgentMaxTraps=commonAgentMaxTraps, commonAgentReset=commonAgentReset, commonNetworkAddress=commonNetworkAddress, commonDeviceMFD=commonDeviceMFD, commonRfGroup=commonRfGroup, commonCraftStatus=commonCraftStatus, commonCheckCode=commonCheckCode, commonAgentBootWay=commonAgentBootWay)
