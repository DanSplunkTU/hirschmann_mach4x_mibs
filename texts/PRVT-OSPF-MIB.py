#
# PySNMP MIB module PRVT-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-OSPF-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 11:54:27 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
routingProtocols, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "routingProtocols")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, Counter64, Unsigned32, NotificationType, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Counter32, ModuleIdentity, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Counter64", "Unsigned32", "NotificationType", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Counter32", "ModuleIdentity", "iso", "TimeTicks")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
prvtOspfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2))
prvtOspfMIB.setRevisions(('2012-04-01 00:00', '2011-06-02 00:00', '2009-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtOspfMIB.setRevisionsDescriptions(('Area ID is represent as octet string', 'Added prvtOspfTrafficEngEnable', 'Initial version',))
if mibBuilder.loadTexts: prvtOspfMIB.setLastUpdated('201204010000Z')
if mibBuilder.loadTexts: prvtOspfMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtOspfMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtOspfMIB.setDescription('The PRVT OSPF MIB module contains additional information, needed to\n         control the OSPF protocol, that is not found in the standard RFC')
class PrvtOspfDesignatedRouterPriority(TextualConvention, Integer32):
    description = 'The values defined for the priority of a system for\n         becoming the designated router.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrvtOspfIpAddress(TextualConvention, OctetString):
    description = 'An IP address.\n         Currently only IPv4 network addresses are supported.\n         Format for IPv4 addresses consist of 4 octets in network-byte order.'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
prvtOspfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1))
prvtOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtOspfRouterId.setReference('OSPF Version 2, C.1 Global parameters')
if mibBuilder.loadTexts: prvtOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterId.setDescription("A 32-bit integer uniquely identifying the\n         router in the Autonomous System.\n         By convention, to ensure uniqueness, this\n         should default to the value of one of the\n         router's IP interface addresses.")
prvtOspfAdminStat = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtOspfAdminStat.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAdminStat.setDescription("The administrative status of OSPF in the\n         router. The value 'enabled' denotes that the\n         OSPF Process is active on at least one interface;\n         'disabled' disables it on all interfaces.")
prvtOspfVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfVersionNumber.setReference('OSPF Version 2, Title')
if mibBuilder.loadTexts: prvtOspfVersionNumber.setStatus('current')
if mibBuilder.loadTexts: prvtOspfVersionNumber.setDescription('The current version number of the OSPF\n         protocol is 2.')
prvtOspfExternLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExternLsaCount.setReference('OSPF Version 2, Appendix A.4.5 AS external link\n         advertisements')
if mibBuilder.loadTexts: prvtOspfExternLsaCount.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExternLsaCount.setDescription('The number of external (LS type 5) link-state\n         advertisements in the link-state database.')
prvtOspfExternLsaCksumSum = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExternLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExternLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of\n         the external link-state advertisements contained\n         in the link-state database. This sum\n         can be used to determine if there has been a\n         change in a router's link state database, and\n         to compare the link-state database of two\n         routers.")
prvtOspfTOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfTOSSupport.setReference('OSPF Version 2, Appendix F.1.2 Optional TOS\n         support')
if mibBuilder.loadTexts: prvtOspfTOSSupport.setStatus('current')
if mibBuilder.loadTexts: prvtOspfTOSSupport.setDescription("The router's support for type-of-service routing.")
prvtOspfOriginateNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfOriginateNewLsas.setStatus('current')
if mibBuilder.loadTexts: prvtOspfOriginateNewLsas.setDescription('The number of new link-state advertisements\n         that have been originated. This number is\n         incremented each time the router originates a\n         new LSA.')
prvtOspfRxNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRxNewLsas.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRxNewLsas.setDescription('The number of link-state advertisements re-\n         ceived determined to be new instantiations.\n         This number does not include newer instantia-\n         tions of self-originated link-state advertise-\n         ments.')
prvtOspfExtLsdbLimit = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtOspfExtLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbLimit.setDescription("The maximum number of non-default AS-\n         external-LSAs entries that can be stored in the\n         link-state database. If the value is -1, then\n         there is no limit.\n         When the number of non-default AS-external-LSAs\n         in a router's link-state database reaches\n         ospfExtLsdbLimit, the router enters Overflow-\n         State. The router never holds more than\n         ospfExtLsdbLimit non-default AS-external-LSAs\n         in its database. OspfExtLsdbLimit MUST be set\n         identically in all routers attached to the OSPF\n         backbone and/or any regular OSPF area. (i.e.,\n         OSPF stub areas and NSSAs are excluded).")
prvtOspfMulticastExtensions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfMulticastExtensions.setStatus('current')
if mibBuilder.loadTexts: prvtOspfMulticastExtensions.setDescription("A Bit Mask indicating whether the router is\n         forwarding IP multicast (Class D) datagrams\n         based on the algorithms defined in the Multi-\n         cast Extensions to OSPF.\n         Bit 0, if set, indicates that the router can\n         forward IP multicast datagrams in the router's\n         directly attached areas (called intra-area mul-\n         ticast routing).\n         Bit 1, if set, indicates that the router can\n         forward IP multicast datagrams between OSPF\n         areas (called inter-area multicast routing).\n         Bit 2, if set, indicates that the router can\n         forward IP multicast datagrams between Auto-\n         nomous Systems (called inter-AS multicast rout-\n         ing).\n         Only certain combinations of bit settings are\n         allowed, namely: 0 (no multicast forwarding is\n         enabled), 1 (intra-area multicasting only), 3\n         (intra-area and inter-area multicasting), 5\n         (intra-area and inter-AS multicasting) and 7\n         (multicasting everywhere). By default, no mul-\n         ticast forwarding is enabled.")
prvtOspfExitOverflowInterval = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtOspfExitOverflowInterval.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExitOverflowInterval.setDescription('The number of seconds that, after entering\n         OverflowState, a router will attempt to leave\n         OverflowState. This allows the router to again\n         originate non-default AS-external-LSAs. When\n         set to 0, the router will not leave Overflow-\n         State until restarted.')
prvtOspfDemandExtensions = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfDemandExtensions.setReference('OSPF Version 2, Appendix on Demand Routing')
if mibBuilder.loadTexts: prvtOspfDemandExtensions.setStatus('current')
if mibBuilder.loadTexts: prvtOspfDemandExtensions.setDescription("The router's support for demand routing.")
prvtOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13), )
if mibBuilder.loadTexts: prvtOspfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data\n         Structure')
if mibBuilder.loadTexts: prvtOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaTable.setDescription("Information describing the configured parameters\n         and cumulative statistics of the router's\n         attached areas.")
prvtOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfAreaId"))
if mibBuilder.loadTexts: prvtOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaEntry.setDescription("Information describing the configured\n         parameters and cumulative statistics\n         of one of the router's attached areas.")
prvtOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtOspfAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: prvtOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaId.setDescription('An octet string, uniquely identifying area.\n         Both A.B.C.D or integer notations are supported.\n         Area ID 0.0.0.0 is used for the OSPF backbone.')
prvtOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaRowStatus.setDescription("This variable displays the status of the en-\n         try. Setting it to 'invalid' has the effect of\n         rendering it inoperative. The internal effect\n         (row removal) is implementation dependent.")
prvtOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaType.setDescription('The area type')
prvtOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaSummary.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaSummary.setDescription('The variable ospfAreaSummary controls the im-\n         port of summary LSAs into stub areas. It has\n         no effect on other areas.\n         If it is noAreaSummary, the router will neither\n         originate nor propagate summary LSAs into the\n         stub area. It will rely entirely on its de-\n         fault route.\n         If it is sendAreaSummary, the router will both\n         summarize and propagate summary LSAs.')
prvtOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaAuthType.setDescription('The authentication type specified for an area.\n         Additional authentication types may be assigned\n         locally on a per Area basis.')
prvtOspfAreaShortcutConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaShortcutConfiguration.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaShortcutConfiguration.setDescription('Allows the user to set whether the area\n         allows the traffict to pass through other\n         not backbone area')
prvtOspfAreaNssaTransitRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ospfNssaRoleNever", 0), ("ospfNssaRoleAlways", 1), ("ospfNssaRoleCandidate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaNssaTransitRole.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaNssaTransitRole.setDescription('Transit role')
prvtOspfAreaImportList = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaImportList.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaImportList.setDescription('Import List')
prvtOspfAreaExportList = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 9), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaExportList.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaExportList.setDescription('Export List')
prvtOspfAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaMetric.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaMetric.setDescription('Area metric')
prvtOspfAreaMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparableCost", 2), ("nonComparable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaMetricType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaMetricType.setDescription('Area metric type')
prvtOspfAreaDefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfAreaDefaultCost.setStatus('current')
if mibBuilder.loadTexts: prvtOspfAreaDefaultCost.setDescription('Default cost')
prvtOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14), )
if mibBuilder.loadTexts: prvtOspfLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver-\n         tisements')
if mibBuilder.loadTexts: prvtOspfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbTable.setDescription("The OSPF Process's Link State Database.")
prvtOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfLsdbAreaId"), (0, "PRVT-OSPF-MIB", "prvtOspfLsdbType"), (0, "PRVT-OSPF-MIB", "prvtOspfLsdbLsid"), (0, "PRVT-OSPF-MIB", "prvtOspfLsdbRouterId"))
if mibBuilder.loadTexts: prvtOspfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbEntry.setDescription('A single Link State Advertisement.')
prvtOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtOspfLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: prvtOspfLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbAreaId.setDescription('The 32 bit identifier of the Area from which\n         the LSA was received.')
prvtOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("unknownLink", 8), ("opaqueLinkLsa", 9), ("opaqueAreaLsa", 10), ("opaqueAsLsa", 11))))
if mibBuilder.loadTexts: prvtOspfLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State\n         Advertisement header')
if mibBuilder.loadTexts: prvtOspfLsdbType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbType.setDescription('The type of the link state advertisement.\n         Each link state type has a separate\n         advertisement format.')
prvtOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 3), IpAddress())
if mibBuilder.loadTexts: prvtOspfLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: prvtOspfLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbLsid.setDescription('The Link State ID is an LS Type Specific field\n         containing either a Router ID or an IP Address;\n         it identifies the piece of the routing domain\n         that is being described by the advertisement.')
prvtOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 4), IpAddress())
if mibBuilder.loadTexts: prvtOspfLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: prvtOspfLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the\n         originating router in the Autonomous System.')
prvtOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence\n         number')
if mibBuilder.loadTexts: prvtOspfLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbSequence.setDescription('The sequence number field is a signed 32-bit\n         integer. It is used to detect old and duplicate\n         link state advertisements. The space of\n         sequence numbers is linearly ordered. The\n         larger the sequence number the more recent the\n         advertisement.')
prvtOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: prvtOspfLsdbAge.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbAge.setDescription('This field is the age of the link state\n         advertisement in seconds.')
prvtOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: prvtOspfLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbChecksum.setDescription("This field is the checksum of the complete\n         contents of the advertisement, excepting the\n         age field. The age field is excepted so that\n         an advertisement's age can be incremented\n         without updating the checksum. The checksum\n         used is the same that is used for ISO\n         connectionless datagrams; it is commonly\n         referred to as the Fletcher checksum.")
prvtOspfLsdbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfLsdbLength.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbLength.setDescription('The length of the ospf packet')
prvtOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 14, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State\n         Advertisements')
if mibBuilder.loadTexts: prvtOspfLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: prvtOspfLsdbAdvertisement.setDescription('The entire Link State Advertisement,\n         including its header.')
prvtOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15), )
if mibBuilder.loadTexts: prvtOspfExtLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver-\n         tisements')
if mibBuilder.loadTexts: prvtOspfExtLsdbTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbTable.setDescription("The OSPF Process's Links State Database.")
prvtOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfExtLsdbType"), (0, "PRVT-OSPF-MIB", "prvtOspfExtLsdbLsid"), (0, "PRVT-OSPF-MIB", "prvtOspfExtLsdbRouterId"))
if mibBuilder.loadTexts: prvtOspfExtLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbEntry.setDescription('A single Link State Advertisement.')
prvtOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("unknownLink", 8), ("opaqueLinkLsa", 9), ("opaqueAreaLsa", 10), ("opaqueAsLsa", 11))))
if mibBuilder.loadTexts: prvtOspfExtLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State\n         Advertisement header')
if mibBuilder.loadTexts: prvtOspfExtLsdbType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbType.setDescription('The type of the link state advertisement.\n         Each link state type has a separate advertise-\n         ment format.')
prvtOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: prvtOspfExtLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: prvtOspfExtLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbLsid.setDescription('The Link State ID is an LS Type Specific field\n         containing either a Router ID or an IP Address;\n         it identifies the piece of the routing domain\n         that is being described by the advertisement.')
prvtOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: prvtOspfExtLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: prvtOspfExtLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the\n         originating router in the Autonomous System.')
prvtOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExtLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence\n         number')
if mibBuilder.loadTexts: prvtOspfExtLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbSequence.setDescription('The sequence number field is a signed 32-bit\n         integer. It is used to detect old and duplicate\n         link state advertisements. The space of\n         sequence numbers is linearly ordered. The\n         larger the sequence number the more recent the\n         advertisement.')
prvtOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExtLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: prvtOspfExtLsdbAge.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbAge.setDescription('This field is the age of the link state\n         advertisement in seconds.')
prvtOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExtLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: prvtOspfExtLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbChecksum.setDescription("This field is the checksum of the complete\n         contents of the advertisement, excepting the\n         age field. The age field is excepted so that\n         an advertisement's age can be incremented\n         without updating the checksum. The checksum\n         used is the same that is used for ISO\n         connectionless datagrams; it is commonly referred\n         to as the Fletcher checksum.")
prvtOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 15, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfExtLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver-\n         tisements')
if mibBuilder.loadTexts: prvtOspfExtLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: prvtOspfExtLsdbAdvertisement.setDescription('The entire Link State Advertisement, including\n         its header.')
prvtOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16), )
if mibBuilder.loadTexts: prvtOspfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface\n         parameters')
if mibBuilder.loadTexts: prvtOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfTable.setDescription('The OSPF Interface Table describes the inter-\n         faces from the viewpoint of OSPF.')
prvtOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfIfIpAddress"))
if mibBuilder.loadTexts: prvtOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfEntry.setDescription('The OSPF Interface Entry describes one inter-\n         face from the viewpoint of OSPF.')
prvtOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
prvtOspfIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfRowStatus.setDescription("This variable displays the status of the entry.\n         Setting it to 'invalid' has the effect of\n         rendering it inoperative. The internal effect\n         (row removal) is implementation dependent.")
prvtOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAreaId.setDescription('An octet string, uniquely identifying area.\n         Both A.B.C.D or integer notations are supported. Area ID\n         0.0.0.0 is used for the OSPF backbone.')
prvtOspfIfWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("passive", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfWorkingMode.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfWorkingMode.setDescription('Working mode')
prvtOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfTransitDelay.setDescription('The estimated number of seconds it takes to\n         transmit a link state update packet over this\n         interface.')
prvtOspfIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfPriority.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfPriority.setDescription('The priority of this interface. Used in\n         multi-access networks, this field is used in\n         the designated router election algorithm. The\n         value 0 signifies that the router is not eligible\n         to become the designated router on this\n         particular network. In the event of a tie in\n         this value, routers will use their Router ID as\n         a tie breaker.')
prvtOspfIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfHelloTimer.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfHelloTimer.setDescription('The length of time, in seconds, between the\n         Hello packets that the router sends on the\n         interface. This value must be the same for all\n         routers attached to a common network.')
prvtOspfIfDeadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfDeadTimer.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfDeadTimer.setDescription("The number of seconds that a router's Hello\n         packets have not been seen before it's neigh-\n         bors declare the router down. This should be\n         some multiple of the Hello interval. This\n         value must be the same for all routers attached\n         to a common network.")
prvtOspfIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfRetransmitInterval.setDescription('The number of seconds between link-state ad-\n         vertisement retransmissions, for adjacencies\n         belonging to this interface. This value is\n         also used when retransmitting database descrip-\n         tion and link-state request packets.')
prvtOspfIfOutputCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfOutputCost.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfOutputCost.setDescription('No description in main model!')
prvtOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthType.setDescription('Set authentication type of interface.\n         If not set, will use the one from area!')
prvtOspfIfAuthSimple = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfAuthSimple.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthSimple.setDescription('Simple authentication password (key).Up to 8 characters')
prvtOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ("virtualLink", 6), ("loopback", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfType.setDescription('No description in main model!')
prvtOspfIfAuthMd5Table = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 17), )
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Table.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Table.setDescription('Table for configuring message digest authentication password')
prvtOspfIfAuthMd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 17, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfIfIpAddress"), (0, "PRVT-OSPF-MIB", "prvtOspfIfAuthMd5Key"))
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Entry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Entry.setDescription('Table rows')
prvtOspfIfAuthMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Key.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Key.setDescription('Authentication key.')
prvtOspfIfAuthMd5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfAuthMd5RowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthMd5RowStatus.setDescription('RowStatus.')
prvtOspfIfAuthMd5Word = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Word.setStatus('current')
if mibBuilder.loadTexts: prvtOspfIfAuthMd5Word.setDescription('Authentication word.')
prvtOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18), )
if mibBuilder.loadTexts: prvtOspfNbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: prvtOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrTable.setDescription('A table of non-virtual neighbor information.')
prvtOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfNbrIpAddr"), (0, "PRVT-OSPF-MIB", "prvtOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: prvtOspfNbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: prvtOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrEntry.setDescription('The information regarding a single neighbor.')
prvtOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 1), PrvtOspfIpAddress())
if mibBuilder.loadTexts: prvtOspfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrIpAddr.setDescription("The IP address this neighbor is using in its\n         IP Source Address. Note that, on addressless\n         links, this will not be 0.0.0.0, but the ad-\n         dress of another of the neighbor's interfaces.")
prvtOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: prvtOspfNbrAddressLessIndex.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrAddressLessIndex.setDescription('On an interface having an IP Address, zero.\n         On addressless interfaces, the corresponding\n         value of ifIndex in the Internet Standard MIB.\n         On row creation, this can be derived from the\n         instance.')
prvtOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 3), PrvtOspfIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrRtrId.setDescription('A 32-bit integer (represented as a type IpAd-\n         dress) uniquely identifying the neighboring\n         router in the Autonomous System.')
prvtOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrOptions.setReference('OSPF Version 2, Section 12.1.2 Options')
if mibBuilder.loadTexts: prvtOspfNbrOptions.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op-\n         tions field.\n         \n         Bit 0, if set, indicates that the system will\n         operate on Type of Service metrics other than\n         TOS 0. If zero, the neighbor will ignore all\n         metrics except the TOS 0 metric.\n         \n         Bit 1, if set, indicates that the associated\n         area accepts and operates on external informa-\n         tion; if zero, it is a stub area.\n         \n         Bit 2, if set, indicates that the system is ca-\n         pable of routing IP Multicast datagrams; i.e.,\n         that it implements the Multicast Extensions to\n         OSPF.\n         \n         Bit 3, if set, indicates that the associated\n         area is an NSSA. These areas are capable of\n         carrying type 7 external advertisements, which\n         are translated into type 5 external advertise-\n         ments at NSSA borders.")
prvtOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 5), PrvtOspfDesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrPriority.setDescription('The priority of this neighbor in the designat-\n         ed router election algorithm. The value 0 sig-\n         nifies that the neighbor is not eligible to be-\n         come the designated router on this particular\n         network.')
prvtOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrState.setReference('OSPF Version 2, Section 10.1 Neighbor States')
if mibBuilder.loadTexts: prvtOspfNbrState.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrState.setDescription('The State of the relationship with this Neigh-\n         bor.')
prvtOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrEvents.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrEvents.setDescription('The number of times this neighbor relationship\n         has changed state, or an error has occurred.')
prvtOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
prvtOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbmaNbrPermanence.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbmaNbrPermanence.setDescription("This variable displays the status of the entry.\n         'dynamic' and 'permanent' refer to how\n         the neighbor became known.")
prvtOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 18, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: prvtOspfNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed\n         to the neighbor')
prvtOspfRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19), )
if mibBuilder.loadTexts: prvtOspfRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeTable.setDescription('The table represents the routing protocols, redistributed into the OSPF \n         routing domain.\n         \n         Creation of conceptual row in the table starts the redistribution of the \n         specified protocol, which would lead to the injection of routing information \n         from that protocol into the OSPF.\n         \n         Deletion of conceptual row would stop the redistribution of that protocol \n         into the OSPF.\n         \n         OSPF router, which redistributes routing information from other \n         protocols, is an ASBR router')
prvtOspfRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfRedistributeProtocol"))
if mibBuilder.loadTexts: prvtOspfRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeEntry.setDescription('The conceptual row represents a routing protocol, redistributed into OSPF')
prvtOspfRedistributeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 17))).clone(namedValues=NamedValues(("kernel", 2), ("connected", 3), ("static", 4), ("default", 17))))
if mibBuilder.loadTexts: prvtOspfRedistributeProtocol.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeProtocol.setDescription('The specific routes redistributed into OSPF. For T4R model the valid values \n         are connected, rip and static.\n         For all the other models all of the above routes can be redistributed ')
prvtOspfRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeRowStatus.setDescription('Indicates the status of the row. Setting of this field to active enables the \n         redistribution of the protocol.\n         \n         Setting this field to destroy disables the redistribution of the protocol.')
prvtOspfRedistributeMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfRedistributeMetric1.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeMetric1.setDescription('The metric 1, with which the external routes will be redistributed in the OSPF')
prvtOspfRedistributeMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfRedistributeMetric2.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeMetric2.setDescription('The metric 2, with which the external routes will be redistributed in the OSPF')
prvtOspfRedistributeRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 19, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtOspfRedistributeRouteMap.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRedistributeRouteMap.setDescription('The route map that would filter the redistributed routing information')
prvtOspfRouterDataTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20), )
if mibBuilder.loadTexts: prvtOspfRouterDataTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataTable.setDescription('Information about available routers')
prvtOspfRouterDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfRouterDataPrefix"), (0, "PRVT-OSPF-MIB", "prvtOspfRouterDataType"), (0, "PRVT-OSPF-MIB", "prvtOspfRouterDataAreaId"))
if mibBuilder.loadTexts: prvtOspfRouterDataEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataEntry.setDescription('The conceptual row represents a routing entry')
prvtOspfRouterDataPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5))
if mibBuilder.loadTexts: prvtOspfRouterDataPrefix.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataPrefix.setDescription('Unknown in main data model')
prvtOspfRouterDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("network", 1), ("router", 2), ("external", 3))))
if mibBuilder.loadTexts: prvtOspfRouterDataType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataType.setDescription('Unknown in main data model')
prvtOspfRouterDataAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: prvtOspfRouterDataAreaId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataAreaId.setDescription('Unknown in main data model')
prvtOspfRouterDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 4), IpAddress())
if mibBuilder.loadTexts: prvtOspfRouterDataId.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataId.setDescription('Unknown in main data model')
prvtOspfRouterDataCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 5), Unsigned32())
if mibBuilder.loadTexts: prvtOspfRouterDataCost.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataCost.setDescription('Unknown in main data model')
prvtOspfRouterDataCostType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataCostType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataCostType.setDescription('Unknown in main data model')
prvtOspfRouterDataDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("router", 1), ("network", 2), ("disables", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataDestType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataDestType.setDescription('Unknown in main data model')
prvtOspfRouterDataPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("intraArea", 1), ("interArea", 2), ("external1", 3), ("external3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataPathType.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataPathType.setDescription('Unknown in main data model')
prvtOspfRouterDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 9), Bits().clone(namedValues=NamedValues(("abr", 0), ("asbr", 1), ("virtual", 2), ("unknown", 3), ("nssa", 4), ("shortcut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataFlags.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataFlags.setDescription('Unknown in main data model')
prvtOspfRouterDataExternalRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataExternalRouting.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataExternalRouting.setDescription('Unknown in main data model')
prvtOspfRouterDataTag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterDataTag.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterDataTag.setDescription('Unknown in main data model')
prvtOspfRouterPathTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 21), )
if mibBuilder.loadTexts: prvtOspfRouterPathTable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterPathTable.setDescription("Information about available router's paths")
prvtOspfRouterPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 21, 1), ).setIndexNames((0, "PRVT-OSPF-MIB", "prvtOspfRouterDataPrefix"), (0, "PRVT-OSPF-MIB", "prvtOspfRouterDataType"), (0, "PRVT-OSPF-MIB", "prvtOspfRouterDataAreaId"), (0, "PRVT-OSPF-MIB", "prvtOspfRouterPathNextHop"))
if mibBuilder.loadTexts: prvtOspfRouterPathEntry.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterPathEntry.setDescription("The conceptual row represents a routing's path entry")
prvtOspfRouterPathNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 21, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: prvtOspfRouterPathNextHop.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterPathNextHop.setDescription('Unknown in main data model')
prvtOspfRouterPathAdvertisingRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterPathAdvertisingRouter.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterPathAdvertisingRouter.setDescription('Unknown in main data model')
prvtOspfRouterPathInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 21, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtOspfRouterPathInterfaceName.setStatus('current')
if mibBuilder.loadTexts: prvtOspfRouterPathInterfaceName.setDescription('Unknown in main data model')
prvtOspfTrafficEngEnable = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 6, 4, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtOspfTrafficEngEnable.setStatus('current')
if mibBuilder.loadTexts: prvtOspfTrafficEngEnable.setDescription("Set to 'true' to enable the traffic engineering extensions of OSPF.\n         Note that enabling traffic engineering requires that router interface lo1\n         (PRVT-SWITCH-IPVLAN-MIB::ipInterfaceIpAddress.lo1) be configured with a\n         valid IP address (not 0.0.0.0 or 127.0.0.1).  An attempt to enable traffic\n         engineering without such a valid address will fail (error returned).")
mibBuilder.exportSymbols("PRVT-OSPF-MIB", prvtOspfLsdbRouterId=prvtOspfLsdbRouterId, prvtOspfVersionNumber=prvtOspfVersionNumber, prvtOspfAreaId=prvtOspfAreaId, prvtOspfNbrHelloSuppressed=prvtOspfNbrHelloSuppressed, prvtOspfAreaShortcutConfiguration=prvtOspfAreaShortcutConfiguration, prvtOspfAreaImportList=prvtOspfAreaImportList, prvtOspfRedistributeRowStatus=prvtOspfRedistributeRowStatus, prvtOspfExtLsdbRouterId=prvtOspfExtLsdbRouterId, prvtOspfRedistributeTable=prvtOspfRedistributeTable, prvtOspfTrafficEngEnable=prvtOspfTrafficEngEnable, prvtOspfRouterPathInterfaceName=prvtOspfRouterPathInterfaceName, prvtOspfNbrAddressLessIndex=prvtOspfNbrAddressLessIndex, prvtOspfExtLsdbEntry=prvtOspfExtLsdbEntry, prvtOspfExitOverflowInterval=prvtOspfExitOverflowInterval, prvtOspfRouterDataType=prvtOspfRouterDataType, prvtOspfAreaSummary=prvtOspfAreaSummary, prvtOspfAreaAuthType=prvtOspfAreaAuthType, prvtOspfIfTransitDelay=prvtOspfIfTransitDelay, prvtOspfRouterDataAreaId=prvtOspfRouterDataAreaId, prvtOspfIfAuthSimple=prvtOspfIfAuthSimple, prvtOspfIfPriority=prvtOspfIfPriority, prvtOspfNbrIpAddr=prvtOspfNbrIpAddr, prvtOspfOriginateNewLsas=prvtOspfOriginateNewLsas, prvtOspfRouterDataCost=prvtOspfRouterDataCost, prvtOspfIfOutputCost=prvtOspfIfOutputCost, prvtOspfLsdbLength=prvtOspfLsdbLength, prvtOspfExtLsdbLsid=prvtOspfExtLsdbLsid, PrvtOspfDesignatedRouterPriority=PrvtOspfDesignatedRouterPriority, prvtOspfAreaType=prvtOspfAreaType, prvtOspfRouterPathNextHop=prvtOspfRouterPathNextHop, prvtOspfIfAuthMd5Table=prvtOspfIfAuthMd5Table, prvtOspfAreaNssaTransitRole=prvtOspfAreaNssaTransitRole, prvtOspfRouterDataEntry=prvtOspfRouterDataEntry, prvtOspfNbmaNbrPermanence=prvtOspfNbmaNbrPermanence, prvtOspfIfAuthMd5RowStatus=prvtOspfIfAuthMd5RowStatus, prvtOspfRedistributeEntry=prvtOspfRedistributeEntry, prvtOspfIfType=prvtOspfIfType, prvtOspfExtLsdbSequence=prvtOspfExtLsdbSequence, PYSNMP_MODULE_ID=prvtOspfMIB, prvtOspfIfEntry=prvtOspfIfEntry, prvtOspfIfAuthMd5Word=prvtOspfIfAuthMd5Word, prvtOspfIfWorkingMode=prvtOspfIfWorkingMode, prvtOspfRouterPathAdvertisingRouter=prvtOspfRouterPathAdvertisingRouter, prvtOspfLsdbSequence=prvtOspfLsdbSequence, prvtOspfTOSSupport=prvtOspfTOSSupport, prvtOspfNbrTable=prvtOspfNbrTable, prvtOspfAreaMetric=prvtOspfAreaMetric, prvtOspfNbrRtrId=prvtOspfNbrRtrId, prvtOspfRouterDataCostType=prvtOspfRouterDataCostType, PrvtOspfIpAddress=PrvtOspfIpAddress, prvtOspfRouterId=prvtOspfRouterId, prvtOspfIfDeadTimer=prvtOspfIfDeadTimer, prvtOspfIfAuthType=prvtOspfIfAuthType, prvtOspfAdminStat=prvtOspfAdminStat, prvtOspfRouterDataFlags=prvtOspfRouterDataFlags, prvtOspfRedistributeProtocol=prvtOspfRedistributeProtocol, prvtOspfNbrEvents=prvtOspfNbrEvents, prvtOspfExtLsdbChecksum=prvtOspfExtLsdbChecksum, prvtOspfLsdbAreaId=prvtOspfLsdbAreaId, prvtOspfExtLsdbAge=prvtOspfExtLsdbAge, prvtOspfLsdbAge=prvtOspfLsdbAge, prvtOspfExternLsaCksumSum=prvtOspfExternLsaCksumSum, prvtOspfRouterDataTable=prvtOspfRouterDataTable, prvtOspfAreaEntry=prvtOspfAreaEntry, prvtOspfNbrPriority=prvtOspfNbrPriority, prvtOspfIfAuthMd5Key=prvtOspfIfAuthMd5Key, prvtOspfAreaRowStatus=prvtOspfAreaRowStatus, prvtOspfExtLsdbType=prvtOspfExtLsdbType, prvtOspfAreaExportList=prvtOspfAreaExportList, prvtOspfIfRetransmitInterval=prvtOspfIfRetransmitInterval, prvtOspfExtLsdbAdvertisement=prvtOspfExtLsdbAdvertisement, prvtOspfLsdbTable=prvtOspfLsdbTable, prvtOspfLsdbLsid=prvtOspfLsdbLsid, prvtOspfNbrEntry=prvtOspfNbrEntry, prvtOspfDemandExtensions=prvtOspfDemandExtensions, prvtOspfRouterDataPathType=prvtOspfRouterDataPathType, prvtOspfRouterDataPrefix=prvtOspfRouterDataPrefix, prvtOspfRouterDataTag=prvtOspfRouterDataTag, prvtOspfIfAreaId=prvtOspfIfAreaId, prvtOspfObjects=prvtOspfObjects, prvtOspfIfTable=prvtOspfIfTable, prvtOspfNbrLsRetransQLen=prvtOspfNbrLsRetransQLen, prvtOspfRouterDataId=prvtOspfRouterDataId, prvtOspfExtLsdbLimit=prvtOspfExtLsdbLimit, prvtOspfAreaDefaultCost=prvtOspfAreaDefaultCost, prvtOspfNbrState=prvtOspfNbrState, prvtOspfRedistributeMetric1=prvtOspfRedistributeMetric1, prvtOspfLsdbChecksum=prvtOspfLsdbChecksum, prvtOspfIfHelloTimer=prvtOspfIfHelloTimer, prvtOspfRouterDataExternalRouting=prvtOspfRouterDataExternalRouting, prvtOspfIfRowStatus=prvtOspfIfRowStatus, prvtOspfRedistributeRouteMap=prvtOspfRedistributeRouteMap, prvtOspfIfIpAddress=prvtOspfIfIpAddress, prvtOspfAreaTable=prvtOspfAreaTable, prvtOspfLsdbAdvertisement=prvtOspfLsdbAdvertisement, prvtOspfRouterPathEntry=prvtOspfRouterPathEntry, prvtOspfRouterPathTable=prvtOspfRouterPathTable, prvtOspfLsdbEntry=prvtOspfLsdbEntry, prvtOspfAreaMetricType=prvtOspfAreaMetricType, prvtOspfLsdbType=prvtOspfLsdbType, prvtOspfMIB=prvtOspfMIB, prvtOspfNbrOptions=prvtOspfNbrOptions, prvtOspfRedistributeMetric2=prvtOspfRedistributeMetric2, prvtOspfIfAuthMd5Entry=prvtOspfIfAuthMd5Entry, prvtOspfRouterDataDestType=prvtOspfRouterDataDestType, prvtOspfExtLsdbTable=prvtOspfExtLsdbTable, prvtOspfMulticastExtensions=prvtOspfMulticastExtensions, prvtOspfExternLsaCount=prvtOspfExternLsaCount, prvtOspfRxNewLsas=prvtOspfRxNewLsas)
