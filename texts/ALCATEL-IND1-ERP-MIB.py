#
# PySNMP MIB module ALCATEL-IND1-ERP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-ERP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:11 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Erp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Erp")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "Counter32")
TruthValue, DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
alcatelIND1ERPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1))
alcatelIND1ERPMIB.setRevisions(('2010-05-13 00:00', '2008-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1ERPMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The ERP MIB defines a set of ERP related management objects for ports\n                        that support Ethernet Ring Protection (ERP) Switching Protocol for ETH\n                        Layer Ring Topologies. With this, rapid protection switching of 50ms can\n                        be achieved.\n\n                        This MIB comprises proprietary managed objects as well the objects required\n                        for conforming to the protocol.',))
if mibBuilder.loadTexts: alcatelIND1ERPMIB.setLastUpdated('201106150000Z')
if mibBuilder.loadTexts: alcatelIND1ERPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1ERPMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate\n                version of this document is used with the products in question:\n\n                Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                26801 West Agoura Road\n                Agoura Hills, CA  91301-5122\n                United States Of America\n\n                Telephone:              North America  +1 800 995 2696\n                                        Latin America  +1 877 919 9526\n                                        Europe         +31 23 556 0100\n                                        Asia           +65 394 7933\n                                        All Other      +1 818 878 4507\n\n                Electronic Mail:         support@ind.alcatel.com\n                World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1ERPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n                        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                        For the Birds Of Prey Product Line\n                        ERP Switching is protection switching mechanism for ETH Layer Ethernet Ring\n                        topologies.\n\n                        The right to make changes in specification and other information\n                        contained in this document without prior notice is reserved.\n\n                        No liability shall be assumed for any incidental, indirect, special, or\n                        consequential damages whatsoever arising from or related to this\n                        document or the information contained herein.\n\n                        Vendors, end-users, and other interested parties are granted\n                        non-exclusive license to use this specification in connection with\n                        management of the products for which it is intended to be used.\n\n                        Copyright (C) 1995-2008 Alcatel-Lucent, Incorporated\n                        ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1ErpMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 0))
if mibBuilder.loadTexts: alcatelIND1ErpMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ErpMIBNotifications.setDescription('Branch For ERP MIB Subsystem Notifications.')
alcatelIND1ERPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ERPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ERPMIBObjects.setDescription('Branch For ERP\n                Subsystem Managed Objects.')
alcatelIND1ERPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2))
alaErpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 1))
alaErpRingAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2))
class AlaErpRingPortStatus(TextualConvention, Integer32):
    description = 'Indicates the status of the Ring Port.\n\n        forwarding(1)         Status is forwarding.\n        blocking(2)           Status is blocking.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forwarding", 1), ("blocking", 2))

class AlaErpRingPortType(TextualConvention, Integer32):
    description = 'Indicates the type of the Ring Port.\n\n        nonRpl(1)  Port is Non-RPL Port.\n        rpl(2)     Port is RPL Port. Node is RPL Owner for the Ring.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nonRpl", 1), ("rpl", 2))

class AlaErpRingMepId(TextualConvention, Unsigned32):
    reference = '802.1ag clauses 3.18 and 19.2.1'
    description = 'Maintenance association End Point Identifier (MEPID): A small\n        integer, unique over a given Maintenance Association,\n        identifying a specific MEP.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8191)

class AlaErpRingMEGLevel(TextualConvention, Unsigned32):
    description = 'MEG level of the R-APS PDU to be inserted.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

alaErpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpClearStats.setStatus('current')
if mibBuilder.loadTexts: alaErpClearStats.setDescription('Defines the global clear statistics control for ERP.\n         The value reset (1) indicates that ERP should clear all\n         statistics related to all the rings in the system.\n         By default, this object contains a zero value.')
alaErpRingTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaErpRingTable.setStatus('current')
if mibBuilder.loadTexts: alaErpRingTable.setDescription('There is one ERP Ring table per bridge. It permits\n        the configuration of Ring.')
alaErpRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-ERP-MIB", "alaErpRingId"))
if mibBuilder.loadTexts: alaErpRingEntry.setStatus('current')
if mibBuilder.loadTexts: alaErpRingEntry.setDescription('The ERP Ring table entry.')
alaErpRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaErpRingId.setStatus('current')
if mibBuilder.loadTexts: alaErpRingId.setDescription('Ring identifier that is unique in the bridge.')
alaErpRingServiceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingServiceVid.setStatus('current')
if mibBuilder.loadTexts: alaErpRingServiceVid.setDescription('An integer indicating the VID of Service VLAN. All the ERP\n       control traffic will flow with Service VLAN tag across the\n       ring. This object must be specified while creating a row in\n       this table. Once the row has been created, the value of\n       this object cannot be changed.')
alaErpRingMEGLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 3), AlaErpRingMEGLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingMEGLevel.setStatus('current')
if mibBuilder.loadTexts: alaErpRingMEGLevel.setDescription('MEG level of the R-APS PDU to be inserted for this Ring.\n       This object must be specified while creating a row in\n       this table. Once the row has been created, the value of\n       this object cannot be changed.')
alaErpRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingPort1.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPort1.setDescription('This object is the interface index of the ring port,which is\n       either a bridge port, or an aggregated link within a bridge,\n       on which ring is configured.\n       There can be only two ring ports per ring in a bridge.\n       This object must be specified while creating a row in\n       this table. Once the row has been created, the value of\n       this object cannot be changed.')
alaErpRingPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingPort2.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPort2.setDescription('This object is the interface index of the ring port,which is\n       either a bridge port, or an aggregated link within a bridge,\n       on which ring is configured.\n       In case of sub-ring, this will be zero. And that is the\n indicator of sub-ring.\n       This object must be specified while creating a row in\n       this table. Once the row has been created, the value of\n       this object cannot be changed.')
alaErpRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingStatus.setStatus('current')
if mibBuilder.loadTexts: alaErpRingStatus.setDescription('An Integer value indicating the administrative state of the Ring.\n\n        enabled indicates that the Ring is to function normally, and\n        disabled that it is to cease functioning.')
alaErpRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("protection", 1), ("init", 2), ("manualSwitch", 3), ("forcedSwitch", 4), ("pending", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingState.setStatus('current')
if mibBuilder.loadTexts: alaErpRingState.setDescription('The current state of the Ring.')
alaErpRingWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: alaErpRingWaitToRestoreTimer.setDescription('This object is valid only for RPL Node.\n\n       This timer is started to prevent frequent operation switch due\n       to an intermittent defect.\n\n       It may be configured by the operator in 1 minute steps between\n       0 and 12 minutes.')
alaErpRingGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(50)).setUnits('10 milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingGuardTimer.setStatus('current')
if mibBuilder.loadTexts: alaErpRingGuardTimer.setDescription('Defines the guard timer value in centiseconds.\n\n        This timer is started to prevent the ring nodes from receiving\n        outdated R-APS messages.\n\n        It may be configured by the operator in 10 ms steps between\n        10 ms to 2 seconds.')
alaErpRingClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingClearStats.setStatus('current')
if mibBuilder.loadTexts: alaErpRingClearStats.setDescription('Defines per ring clear statistics control for ERP.\n        The value reset (1) indicates that ERP should clear all\n        statistics related to a ring in the system.By default,\n        this object contains a zero value.')
alaErpRingLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingLastStateChange.setStatus('current')
if mibBuilder.loadTexts: alaErpRingLastStateChange.setDescription('The time (SysUpTime) at which the ethernet ring last\n        entered new state. : This object has been deprecated Please refer\n        alaErpRingLastStateChangeStr. ')
alaErpRingTimeToRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingTimeToRevert.setStatus('current')
if mibBuilder.loadTexts: alaErpRingTimeToRevert.setDescription('Defines the time left to revert from Pending State to Idle State.')
alaErpRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaErpRingRowStatus.setDescription('The status of the row.\n\n        The writable columns in a row can not be changed if the row\n        is active. All columns must have a valid value before a row\n        can be activated.')
alaErpRingVirtualChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingVirtualChannel.setStatus('current')
if mibBuilder.loadTexts: alaErpRingVirtualChannel.setDescription('A Integer value indicating whether the ring is operating with the\n        Virtual channel enabled or not.')
alaErpRingRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingRevertive.setStatus('current')
if mibBuilder.loadTexts: alaErpRingRevertive.setDescription('A Integer value indicating whether the ring is operating with the\n        revertive mode enabled or not ')
alaErpRingClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingClearAction.setStatus('current')
if mibBuilder.loadTexts: alaErpRingClearAction.setDescription('Defines clear action for ERP ring\n        The value reset(1) will give CLEAR action to ERP state machine')
alaErpRingActiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingActiveVersion.setStatus('current')
if mibBuilder.loadTexts: alaErpRingActiveVersion.setDescription('This object indicates active ERP Ring protocol version.')
alaErpRingResetVersionFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingResetVersionFallback.setStatus('current')
if mibBuilder.loadTexts: alaErpRingResetVersionFallback.setDescription('Resets ERP running protocol')
alaErpRingLastStateChangeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingLastStateChangeStr.setStatus('current')
if mibBuilder.loadTexts: alaErpRingLastStateChangeStr.setDescription('The time (SysUpTime) at which the ethernet ring last\n                    entered new state.')
alaErpRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alaErpRingPortTable.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortTable.setDescription('There is one ERP Ring Port table per bridge. It permits\n        the configuration of Ring Ports.')
alaErpRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-ERP-MIB", "alaErpRingId"), (0, "ALCATEL-IND1-ERP-MIB", "alaErpRingPortIfIndex"))
if mibBuilder.loadTexts: alaErpRingPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortEntry.setDescription('The ERP Ring Port table entry.')
alaErpRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaErpRingPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortIfIndex.setDescription('This object is the interface index of the interface either a\n        bridge port, or an aggregated link within a bridge port, to\n        which ring port is configured.\n        There can be only two ring ports per ring in a bridge.')
alaErpRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 2), AlaErpRingPortStatus().clone('blocking')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpRingPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortStatus.setDescription('Status of the Ring Port.')
alaErpRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 3), AlaErpRingPortType().clone('nonRpl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpRingPortType.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortType.setDescription('Type of the Ring Port.\n\n       To configure a node as a RPL owner for the ring, this object\n       has value of RPL(2).')
alaErpRingPortEthOAMEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpRingPortEthOAMEvent.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortEthOAMEvent.setDescription('A Boolean indicating whether ERP Ring Port shall take loss of\n       connectivity event from Ethernet OAM.\n\n       True indicates that the Ring Port is to take events from\n       Ethernet OAM.')
alaErpRingPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpRingPortClearStats.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortClearStats.setDescription('Defines per ring port clear statistics control for ERP.\n        The value reset (1) indicates that ERP should clear all\n        statistics related to a ring port in the system.By default,\n        this object contains a zero value.')
alaErpRingPortRmepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 6), AlaErpRingMepId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpRingPortRmepId.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortRmepId.setDescription('Identifier of Remote Endpoint.')
alaErpRingPortVirtualSfMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaErpRingPortVirtualSfMonitor.setStatus('current')
if mibBuilder.loadTexts: alaErpRingPortVirtualSfMonitor.setDescription('A Boolean indicating whether ERP Ring Port shall take loss of\n       connectivity event from Virtual SF monitor protocol.\n\n       True indicates that the Ring Port is to take events from\n       Virtual SF monitor.')
alaErpRingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alaErpRingVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaErpRingVlanTable.setDescription('This table defines the association of VIDs and RingIds.\n\n        The writable objects in this table need to be persistent\n        upon reboot or restart of a device.')
alaErpRingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-ERP-MIB", "alaErpRingId"), (0, "ALCATEL-IND1-ERP-MIB", "alaErpRingVlanProtectedVid"))
if mibBuilder.loadTexts: alaErpRingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaErpRingVlanEntry.setDescription('The VLAN table entry.')
alaErpRingVlanProtectedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: alaErpRingVlanProtectedVid.setStatus('current')
if mibBuilder.loadTexts: alaErpRingVlanProtectedVid.setDescription('An integer indicating the VID of Protected VLAN.')
alaErpRingVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaErpRingVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaErpRingVlanRowStatus.setDescription('The status of the row.\n\n        The writable columns in a row can not be changed if the row\n        is active. All columns must have a valid value before a row\n        can be activated.')
alaErpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaErpStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsTable.setDescription('There is one ERP Stats table per bridge. This table\n       contains the statistics for the ERP on per Ring basis.')
alaErpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1), )
alaErpRingPortEntry.registerAugmentions(("ALCATEL-IND1-ERP-MIB", "alaErpStatsEntry"))
alaErpStatsEntry.setIndexNames(*alaErpRingPortEntry.getIndexNames())
if mibBuilder.loadTexts: alaErpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsEntry.setDescription('The Statistics table entry.')
alaErpStatsSignalFailPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsSignalFailPduTx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsSignalFailPduTx.setDescription('A count of the number of R-APS (SF) PDUs transmitted on this\n       interface for this Ring.')
alaErpStatsSignalFailPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsSignalFailPduRx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsSignalFailPduRx.setDescription('A count of the number of valid R-APS (SF) PDUs received on this\n       interface for this Ring.')
alaErpStatsSignalFailPduDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsSignalFailPduDrop.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsSignalFailPduDrop.setDescription('A count of the number of valid R-APS (SF) PDUs dropped.')
alaErpStatsNoRequestPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsNoRequestPduTx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsNoRequestPduTx.setDescription('A count of the number of R-APS (NR) PDUs transmitted on this\n       interface for this Ring.')
alaErpStatsNoRequestPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsNoRequestPduRx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsNoRequestPduRx.setDescription('A count of the number of valid R-APS (NR) PDUs received on this\n       interface for this Ring.')
alaErpStatsNoRequestPduDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsNoRequestPduDrop.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsNoRequestPduDrop.setDescription('A count of the number of valid R-APS (NR) PDUs dropped.')
alaErpStatsRPLBlockPDUTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDUTx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDUTx.setDescription('A count of the number of R-APS (NR, RB) PDUs transmitted on this\n       interface for this Ring.')
alaErpStatsRPLBlockPDURx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDURx.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDURx.setDescription('A count of the number of valid R-APS (NR, RB) PDUs received on this\n       interface for this Ring.')
alaErpStatsRPLBlockPDUDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDUDrop.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsRPLBlockPDUDrop.setDescription('A count of the number of valid R-APS (NR, RB) PDUs dropped.')
alaErpStatsPDUErr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaErpStatsPDUErr.setStatus('current')
if mibBuilder.loadTexts: alaErpStatsPDUErr.setDescription('A count of the number of error R-APS PDUs received.')
alaErpRingStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 0, 1)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpRingId"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingState"))
if mibBuilder.loadTexts: alaErpRingStateChanged.setStatus('current')
if mibBuilder.loadTexts: alaErpRingStateChanged.setDescription('The ERP Ring State has changed to Protection from Idle. Notify the user by\n                 raising the Trap. ')
alaErpRingMultipleRpl = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 0, 2)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpRingId"))
if mibBuilder.loadTexts: alaErpRingMultipleRpl.setStatus('current')
if mibBuilder.loadTexts: alaErpRingMultipleRpl.setDescription('The trap shall be raised on RPL if there are multiple RPLs detected in the\n                ring. When the RPL node receives the NR (RB) message, this trap is raised.')
alaErpRingRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 0, 3)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpRingId"))
if mibBuilder.loadTexts: alaErpRingRemoved.setStatus('current')
if mibBuilder.loadTexts: alaErpRingRemoved.setDescription('The trap shall be raised whenever the ring is removed dynamically in\n                Unlike NI Scenario only.')
alcatelIND1ERPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 1))
alcatelIND1ERPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 2))
alcatelIND1ERPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpGlobalGroup"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingAttributesGroup"), ("ALCATEL-IND1-ERP-MIB", "alaErpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ERPMIBCompliance = alcatelIND1ERPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ERPMIBCompliance.setDescription('Compliance statement for ERP.')
alaErpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaErpGlobalGroup = alaErpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaErpGlobalGroup.setDescription('Objects for the Global Group.')
alaErpRingAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpRingId"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingServiceVid"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingMEGLevel"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPort1"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPort2"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingStatus"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingState"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingWaitToRestoreTimer"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingGuardTimer"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingClearStats"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingLastStateChange"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingTimeToRevert"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingRowStatus"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingVirtualChannel"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingRevertive"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingClearAction"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortStatus"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortType"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortEthOAMEvent"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortClearStats"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortRmepId"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingVlanRowStatus"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsSignalFailPduTx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsSignalFailPduRx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsSignalFailPduDrop"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsNoRequestPduTx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsNoRequestPduRx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsNoRequestPduDrop"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsRPLBlockPDUTx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsRPLBlockPDURx"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsRPLBlockPDUDrop"), ("ALCATEL-IND1-ERP-MIB", "alaErpStatsPDUErr"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingPortVirtualSfMonitor"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingActiveVersion"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingResetVersionFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaErpRingAttributesGroup = alaErpRingAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: alaErpRingAttributesGroup.setDescription('Objects for the Ring Group.')
alaErpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 46, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-ERP-MIB", "alaErpRingStateChanged"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingMultipleRpl"), ("ALCATEL-IND1-ERP-MIB", "alaErpRingRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaErpNotificationGroup = alaErpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaErpNotificationGroup.setDescription('Collection of notifications for ERP.')
mibBuilder.exportSymbols("ALCATEL-IND1-ERP-MIB", alaErpRingActiveVersion=alaErpRingActiveVersion, alaErpRingClearStats=alaErpRingClearStats, alaErpRingVlanRowStatus=alaErpRingVlanRowStatus, alaErpRingPortClearStats=alaErpRingPortClearStats, alaErpRingPortStatus=alaErpRingPortStatus, alaErpRingStateChanged=alaErpRingStateChanged, alaErpRingTable=alaErpRingTable, alaErpRingPort2=alaErpRingPort2, AlaErpRingPortType=AlaErpRingPortType, alaErpRingLastStateChange=alaErpRingLastStateChange, alaErpRingPortVirtualSfMonitor=alaErpRingPortVirtualSfMonitor, alaErpRingPortRmepId=alaErpRingPortRmepId, alaErpRingMEGLevel=alaErpRingMEGLevel, alaErpRingPortEthOAMEvent=alaErpRingPortEthOAMEvent, alaErpRingGuardTimer=alaErpRingGuardTimer, PYSNMP_MODULE_ID=alcatelIND1ERPMIB, alaErpRingLastStateChangeStr=alaErpRingLastStateChangeStr, alaErpRingWaitToRestoreTimer=alaErpRingWaitToRestoreTimer, alcatelIND1ERPMIBCompliances=alcatelIND1ERPMIBCompliances, alcatelIND1ERPMIBGroups=alcatelIND1ERPMIBGroups, alcatelIND1ERPMIBObjects=alcatelIND1ERPMIBObjects, alaErpRingTimeToRevert=alaErpRingTimeToRevert, alaErpRingPortEntry=alaErpRingPortEntry, alaErpNotificationGroup=alaErpNotificationGroup, alaErpStatsTable=alaErpStatsTable, alaErpStatsRPLBlockPDURx=alaErpStatsRPLBlockPDURx, alaErpRingAttributesGroup=alaErpRingAttributesGroup, alaErpStatsNoRequestPduTx=alaErpStatsNoRequestPduTx, alcatelIND1ErpMIBNotifications=alcatelIND1ErpMIBNotifications, alaErpRingServiceVid=alaErpRingServiceVid, alaErpRingRevertive=alaErpRingRevertive, alaErpGlobal=alaErpGlobal, alaErpStatsSignalFailPduTx=alaErpStatsSignalFailPduTx, alaErpStatsSignalFailPduRx=alaErpStatsSignalFailPduRx, alaErpRingPortType=alaErpRingPortType, alaErpClearStats=alaErpClearStats, alaErpStatsRPLBlockPDUDrop=alaErpStatsRPLBlockPDUDrop, alaErpRingEntry=alaErpRingEntry, alaErpRingVlanTable=alaErpRingVlanTable, AlaErpRingMepId=AlaErpRingMepId, alaErpRingClearAction=alaErpRingClearAction, alaErpRingState=alaErpRingState, alaErpRingPortTable=alaErpRingPortTable, alaErpRingPort1=alaErpRingPort1, alaErpRingAttributes=alaErpRingAttributes, alaErpRingPortIfIndex=alaErpRingPortIfIndex, alaErpStatsNoRequestPduRx=alaErpStatsNoRequestPduRx, alaErpStatsPDUErr=alaErpStatsPDUErr, alaErpRingMultipleRpl=alaErpRingMultipleRpl, AlaErpRingMEGLevel=AlaErpRingMEGLevel, AlaErpRingPortStatus=AlaErpRingPortStatus, alcatelIND1ERPMIBConformance=alcatelIND1ERPMIBConformance, alaErpRingStatus=alaErpRingStatus, alaErpStatsNoRequestPduDrop=alaErpStatsNoRequestPduDrop, alaErpRingVlanProtectedVid=alaErpRingVlanProtectedVid, alaErpRingRemoved=alaErpRingRemoved, alaErpRingRowStatus=alaErpRingRowStatus, alaErpStatsRPLBlockPDUTx=alaErpStatsRPLBlockPDUTx, alaErpStatsSignalFailPduDrop=alaErpStatsSignalFailPduDrop, alcatelIND1ERPMIB=alcatelIND1ERPMIB, alaErpRingVirtualChannel=alaErpRingVirtualChannel, alaErpRingId=alaErpRingId, alcatelIND1ERPMIBCompliance=alcatelIND1ERPMIBCompliance, alaErpStatsEntry=alaErpStatsEntry, alaErpRingResetVersionFallback=alaErpRingResetVersionFallback, alaErpRingVlanEntry=alaErpRingVlanEntry, alaErpGlobalGroup=alaErpGlobalGroup)
